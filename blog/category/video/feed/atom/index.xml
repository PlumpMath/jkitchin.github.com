<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-12-26T13:09:40Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Drag images and files onto org-mode and insert a link to them]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them" />
    <id>http://jkitchin.github.io/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them</id>
    <updated>2015-07-10T16:11:43Z</updated>
    <published>2015-07-10T16:11:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="video" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Drag images and files onto org-mode and insert a link to them]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them"><![CDATA[


<p>
I want to drag and drop an image onto an org mode file and get a link to that file. This would be used for finding images in Finder, and then dragging them to the Emacs buffer. There is <a href="http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/org-download.el">org-download.el</a> which looks like it should do something like this too, but it did not work out of the box for me, and I want to add a few wrinkles to it. For a simple drag-n-drop, I just want the link to appear. With ctrl-drag-n-drop I want to add an attr_org line to set the image size, add a caption line, insert the image at the beginning of the line where the mouse cursor is, put the cursor on the caption line and then refresh the inline images in org-mode so the image is immediately visible.
</p>

<p>
While we are at let us also make it possible to drag file links onto org-files, instead of having the files open. Again, for a simple drag-n-drop, I want a link inserted. For ctrl-drag-n-drop we open the file, and for Meta (alt) drag-n-drop, we insert an attachfile link. You can also define s-drag-n-drop (Super/command) and C-s and M-s drag-n-drop if you can think of things to do with that.
</p>

<p>
Here is the code to make those things happen. Or watch the video: <a href="https://www.youtube.com/watch?v=ahqKXbBVjpQ">https://www.youtube.com/watch?v=ahqKXbBVjpQ</a> 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">my-dnd-func</span> (event)
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"e"</span>)
  (goto-char (nth 1 (event-start event)))
  (x-focus-frame nil)
  (<span style="color: #0000FF;">let*</span> ((payload (car (last event)))
         (type (car payload))
         (fname (cadr payload))
         (img-regexp <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">png</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">jp[e]?g</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">\\&gt;"</span>))
    (<span style="color: #0000FF;">cond</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">insert image link</span>
     ((<span style="color: #0000FF;">and</span>  (eq 'drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert (format <span style="color: #008000;">"[[%s]]"</span> fname))
      (org-display-inline-images t t))
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">insert image link with caption</span>
     ((<span style="color: #0000FF;">and</span>  (eq 'C-drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert <span style="color: #008000;">"#+ATTR_ORG: :width 300\n"</span>)
      (insert (concat  <span style="color: #008000;">"#+CAPTION: "</span> (read-input <span style="color: #008000;">"Caption: "</span>) <span style="color: #008000;">"\n"</span>))
      (insert (format <span style="color: #008000;">"[[%s]]"</span> fname))
      (org-display-inline-images t t))
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">C-drag-n-drop to open a file</span>
     ((<span style="color: #0000FF;">and</span>  (eq 'C-drag-n-drop (car event))
            (eq 'file type))
      (find-file fname))
     ((<span style="color: #0000FF;">and</span> (eq 'M-drag-n-drop (car event))
           (eq 'file type))
      (insert (format <span style="color: #008000;">"[[attachfile:%s]]"</span> fname)))
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">regular drag and drop on file</span>
     ((eq 'file type)
      (insert (format <span style="color: #008000;">"[[%s]]\n"</span> fname)))
     (t
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"I am not equipped for dnd on %s"</span> payload)))))


(define-key org-mode-map (kbd <span style="color: #008000;">"&lt;drag-n-drop&gt;"</span>) 'my-dnd-func)
(define-key org-mode-map (kbd <span style="color: #008000;">"&lt;C-drag-n-drop&gt;"</span>) 'my-dnd-func)
(define-key org-mode-map (kbd <span style="color: #008000;">"&lt;M-drag-n-drop&gt;"</span>) 'my-dnd-func)
</pre>
</div>

<pre class="example">
my-dnd-func
</pre>
<p>

</p>

<p>
<a href="/media/2015-07-10-Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/jkitchin.json">jkitchin.json</a> 

</p>

<p>
<img src="/media/2015-07-10-Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/Au-icosahedron-3.png"> </p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Acronym minor mode for Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/09/Acronym-minor-mode-for-Emacs" />
    <id>http://jkitchin.github.io/blog/2015/07/09/Acronym-minor-mode-for-Emacs</id>
    <updated>2015-07-09T08:04:40Z</updated>
    <published>2015-07-09T08:04:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="video" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="tooltip" />
    <summary type="html"><![CDATA[Acronym minor mode for Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/09/Acronym-minor-mode-for-Emacs"><![CDATA[



<p>
Three letter acronyms (TLA) are pretty common, as are other kinds of acronyms, e.g. ferromagnetic (FM), anti-ferromagnetic (AFM), National Security Agency (NSA), even <a href="https://www.gnu.org/fun/jokes/gnuemacs.acro.exp.html">Escape-Meta-Alt-Control-Shift</a> (EMACS) etc&#x2026; in technical documents. As you get away from the definition, it can get hard to remember what they are, so here we develop a minor mode that will put a tooltip over acronyms that hopefully shows what they mean.
</p>

<p>
You can see this in action here: <a href="https://www.youtube.com/watch?v=2G2isMO6E2c">https://www.youtube.com/watch?v=2G2isMO6E2c</a> 
</p>

<p>
When we turn the mode on, it will scan the buffer looking for an acronym pattern, deduce its likely meaning, and put tooltips on every subsequent use of the acronym. The pattern we will look for is a sequence of uppercase letters surrounded by parentheses. We will assume that if we find N uppercase letters, that the previous N words contain the definition of the acronym. This is pretty approximate, but it is not likely to be that wrong. Then, we will use button-lock to put the tooltips on all subsequent instances of acronyms. We don't want flyspell interfering with the tooltips, so we remove the overlays if they are there.
</p>

<p>
Unlike previous examples where we just use button-lock, here we wrap the feature into a minor mode that you can turn on and off. Note, you cannot add new acronyms and have them have tooltips. You have to refresh the buttons.
</p>

<p>
Here is the minor mode code. We use the interesting rx package to build the regular expression. It is more verbose, but a little easier to read than a straight regexp like (concat "\\&lt;" (match-string 1) "\\&gt;") in my opinion.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(make-variable-buffer-local
  (<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">*acronym-buttons*</span> '() <span style="color: #036A07;">"list of acronym buttons"</span>))

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">rx</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-acronyms</span> ()
  (<span style="color: #0000FF;">save-excursion</span>
    (<span style="color: #0000FF;">let</span> ((case-fold-search nil))
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"(</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[A-Z]+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">)"</span> nil t)
        (<span style="color: #0000FF;">when</span> flyspell-mode
          (flyspell-delete-region-overlays (match-beginning 1)
                                           (match-end 1)))
        (<span style="color: #0000FF;">let*</span> ((acronym (match-string 1))
               (p (point))
               (definition (<span style="color: #0000FF;">save-excursion</span>
                             (goto-char (match-beginning 1))
                             (backward-word (length acronym))
                             (buffer-substring (point) p))))
          (add-to-list '*acronym-buttons*
                       (button-lock-set-button
                        (<span style="color: #0000FF;">rx</span> word-start (eval (match-string 1)) word-end)
                        nil
                        <span style="color: #006FE0;">:help-echo</span> definition)))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">remove-acronym-buttons</span> ()
  (<span style="color: #0000FF;">dolist</span> (button *acronym-buttons*)
      (button-lock-unset-button button))
  (<span style="color: #0000FF;">setq</span> *acronym-buttons* '()))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">refresh-acronyms</span> ()
  <span style="color: #036A07;">"Refresh acronym tooltips in buffer."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (remove-acronym-buttons)
  (highlight-acronyms))


<span style="color: #8D8D84;">;;;</span><span style="color: #8D8D84; font-style: italic;">###</span><span style="color: #ff0000; font-weight: bold; font-style: italic;">autoload</span>
(<span style="color: #0000FF;">define-minor-mode</span> <span style="color: #006699;">acronym-mode</span>
  <span style="color: #036A07;">"Put definitions on acronyms."</span>
  <span style="color: #006FE0;">:lighter</span> <span style="color: #008000;">" AM"</span>
  (<span style="color: #0000FF;">if</span> acronym-mode
      (highlight-acronyms)
    (remove-acronym-buttons)))


(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">acronym-mode</span>)
</pre>
</div>

<pre class="example">
acronym-mode
</pre>

<p>
There it is. Now any time we have an acronym like EMACS we can mouse over it, or type C-h . on the acronym to see how it was previously defined. If you don't like it, you can turn it off!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/09/Acronym-minor-mode-for-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
