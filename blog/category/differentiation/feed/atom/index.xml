<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-06-29T20:14:13Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Derivatives by FFT]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/26/Derivatives-by-FFT" />
    <id>http://jkitchin.github.io/blog/2013/02/26/Derivatives-by-FFT</id>
    <updated>2013-02-27T14:51:24Z</updated>
    <published>2013-02-26T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="differentiation" />
    <summary type="html"><![CDATA[Derivatives by FFT]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/26/Derivatives-by-FFT"><![CDATA[


<p>

</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

N = 101 <span style="color: #ff0000; font-weight: bold;">#number of points</span>
L = 2 * np.pi <span style="color: #ff0000; font-weight: bold;">#interval of data</span>

x = np.arange(0.0, L, L/<span style="color: #8b0000;">float</span>(N)) <span style="color: #ff0000; font-weight: bold;">#this does not include the endpoint</span>

<span style="color: #ff0000; font-weight: bold;">#add some random noise</span>
y = np.sin(x) + 0.05 * np.random.random(size=x.shape)
dy_analytical = np.cos(x)

<span style="color: #228b22;">'''</span>
<span style="color: #228b22;">http://sci.tech-archive.net/Archive/sci.math/2008-05/msg00401.html</span>

<span style="color: #228b22;">you can use fft to calculate derivatives!</span>
<span style="color: #228b22;">'''</span>

<span style="color: #8b0000;">if</span> N % 2 == 0:
    k = np.asarray(<span style="color: #8b0000;">range</span>(0, N / 2) + [0] + <span style="color: #8b0000;">range</span>(-N / 2 + 1,0))
<span style="color: #8b0000;">else:</span>
    k = np.asarray(<span style="color: #8b0000;">range</span>(0,(N - 1) / 2) + [0] + <span style="color: #8b0000;">range</span>(-(N - 1) / 2, 0))

k *= 2 * np.pi / L

fd = np.real(np.fft.ifft(1.0j * k * np.fft.fft(y)))

plt.plot(x, y, label=<span style="color: #228b22;">'function'</span>)
plt.plot(x,dy_analytical,label=<span style="color: #228b22;">'analytical der'</span>)
plt.plot(x,fd,label=<span style="color: #228b22;">'fft der'</span>)
plt.legend(loc=<span style="color: #228b22;">'lower left'</span>)

plt.savefig(<span style="color: #228b22;">'images/fft-der.png'</span>)
plt.show()
</pre>
</div>

<p><img src="/img/./images/fft-der.png"><p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/26/Derivatives-by-FFT.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
