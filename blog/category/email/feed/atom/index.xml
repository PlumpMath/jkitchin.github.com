<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-11-26T15:53:17Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Better integration of org-mode and email]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/06/08/Better-integration-of-org-mode-and-email" />
    <id>http://jkitchin.github.io/blog/2014/06/08/Better-integration-of-org-mode-and-email</id>
    <updated>2014-06-08T20:57:53Z</updated>
    <published>2014-06-08T20:57:53Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="email" />
    <summary type="html"><![CDATA[Better integration of org-mode and email]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/06/08/Better-integration-of-org-mode-and-email"><![CDATA[


<p>
I like to email org-mode headings and content to people. It would be nice to have some records of when a heading was sent, and to whom. We store this information in a heading. It is pretty easy to write a simple function that emails a selected region.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun email-region (start end)
  "Send region as the body of an email."
  (interactive "r")
  (let ((content (buffer-substring start end)))
    (compose-mail)
    (message-goto-body)
    (insert content)
    (message-goto-to)))
</pre>
</div>

<p>
that function is not glamorous, and you still have to fill in the email fields, and unless you use gnus and org-contacts, the only record keeping is through the email provider. 
</p>

<p>
What I would like is to send a whole heading in an email. The headline should be the subject, and if there are TO, CC or BCC properties, those should be used. If there is <i>no TO</i>, then I want to grab the TO from the email after you enter it and store it as a property. You should be able to set OTHER-HEADERS as a property (this is just for fun. There is no practical reason for this yet). After you send the email, it should record in the heading when it was sent.
</p>

<p>
It turned out that is a relatively tall order. While it is easy to setup the email if you have everything in place, it is tricky to get the information on TO and the time sent <i>after</i> the email is sent. Past lispers had a lot of ideas to make this possible, and a day of digging got me to the answer. You can specify some "action" functions that get called at various times, e.g. after sending, and a return action when the compose window is done. Unfortunately, I could not figure out any way to do things except to communicate through some global variables.
</p>

<p>
So here is the code that lets me send org-headings, with the TO, CC, BCC properties, and that records when I sent the email after it is sent.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defvar *email-heading-point* nil
  "global variable to store point in for returning")

(defvar *email-to-addresses* nil
  "global variable to store to address in email")

(defun email-heading-return ()
  "after returning from compose do this"
  (switch-to-buffer (marker-buffer  *email-heading-point*))
  (goto-char (marker-position  *email-heading-point*))
  (setq *email-heading-point* nil)
  (org-set-property "SENT-ON" (current-time-string))
  ;; reset this incase you added new ones
  (org-set-property "TO" *email-to-addresses*)
  )

(defun email-send-action ()
  "send action for compose-mail"
  (setq *email-to-addresses* (mail-fetch-field "To")))

(defun email-heading ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

save when it was sent as s SENT property. this is overwritten on
subsequent sends. could save them all in a logbook?
"
  (interactive)
  ; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (org-mark-subtree)
  (let ((content (buffer-substring (point) (mark)))
	(TO (org-entry-get (point) "TO" t))
	(CC (org-entry-get (point) "CC" t))
	(BCC (org-entry-get (point) "BCC" t))
	(SUBJECT (nth 4 (org-heading-components)))
	(OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
	(continue nil)
	(switch-function nil)
	(yank-action nil)
	(send-actions '((email-send-action . nil)))
	(return-action '(email-heading-return)))
    
    (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
    (message-goto-body)
    (insert content)
    (when CC
      (message-goto-cc)
      (insert CC))
    (when BCC
      (message-goto-bcc)
      (insert BCC))
    (if TO
	(message-goto-body)
      (message-goto-to))       
    ))
</pre>
</div>

<p>
This works pretty well for me. Since I normally use this to send tasks to people, it keeps the task organized where I want it, and I can embed an org-id in the email so if the person replies to it telling me the task is done, I can easily navigate to the task to mark it off. Pretty handy.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/06/08/Better-integration-of-org-mode-and-email.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Mail merge with python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/04/16/Mail-merge-with-python" />
    <id>http://jkitchin.github.io/blog/2013/04/16/Mail-merge-with-python</id>
    <updated>2013-04-16T16:10:50Z</updated>
    <published>2013-04-16T16:10:50Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="programming" />
    <category scheme="http://jkitchin.github.io/blog" term="email" />
    <summary type="html"><![CDATA[Mail merge with python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/04/16/Mail-merge-with-python"><![CDATA[


<p>
Suppose you are organizing some event, and you have a mailing list of email addresses and people you need to send a mail to telling them what room they will be in. You would like to send a personalized email to each person, and you do not want to type each one by hand. Python can automate this for you. All you need is the mailing list in some kind of structured format, and then you can go through it line by line to create and send emails.
</p>

<p>
We will use an org-table to store the data in.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" id="mail-list">
<caption></caption>

<colgroup>
<col class="left"/>

<col class="left"/>

<col class="left"/>

<col class="right"/>
</colgroup>
<thead>
<tr>
<th scope="col" class="left">First name</th>
<th scope="col" class="left">Last name</th>
<th scope="col" class="left">email address</th>
<th scope="col" class="right">Room number</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Jane</td>
<td class="left">Doe</td>
<td class="left">jane-doe@gmail.com</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">John</td>
<td class="left">Doe</td>
<td class="left">john-doe@gmail.com</td>
<td class="right">2</td>
</tr>

<tr>
<td class="left">Jimmy</td>
<td class="left">John</td>
<td class="left">jimmy-john@gmail.com</td>
<td class="right">3</td>
</tr>
</tbody>
</table>

<p>
We pass that table into an org-mode source block as a variable called data, which will be a list of lists, one for each row of the table. You could alternatively read these from an excel spreadsheet, a csv file, or some kind of python data structure. 
</p>

<p>
We do not actually send the emails in this example. To do that you need to have access to a mail server, which could be on your own machine, or it could be a relay server you have access to.
</p>

<p>
We create a string that is a template with some fields to be substituted, e.g. the firstname and room number in this case. Then we loop through each row of the table, and format the template with those values, and create an email message to the person. First we print each message to check that they are correct. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ebbbff; font-weight: bold;">import</span> smtplib
<span style="color: #ebbbff; font-weight: bold;">from</span> email.MIMEMultipart <span style="color: #ebbbff; font-weight: bold;">import</span> MIMEMultipart
<span style="color: #ebbbff; font-weight: bold;">from</span> email.MIMEText <span style="color: #ebbbff; font-weight: bold;">import</span> MIMEText
<span style="color: #ebbbff; font-weight: bold;">from</span> email.Utils <span style="color: #ebbbff; font-weight: bold;">import</span>  formatdate

template = <span style="color: #d1f1a9;">'''</span>
<span style="color: #d1f1a9;">Dear {firstname:s},</span>

<span style="color: #d1f1a9;">I am pleased to inform you that your talk will be in room {roomnumber:d}.</span>

<span style="color: #d1f1a9;">Sincerely,</span>
<span style="color: #d1f1a9;">John</span>
<span style="color: #d1f1a9;">'''</span>

<span style="color: #ebbbff; font-weight: bold;">for</span> firstname, lastname, emailaddress, roomnumber <span style="color: #ebbbff; font-weight: bold;">in</span> data:
    msg = MIMEMultipart()
    msg[<span style="color: #d1f1a9;">'From'</span>] = <span style="color: #d1f1a9;">"youremail@gmail.com"</span>
    msg[<span style="color: #d1f1a9;">'To'</span>] = emailaddress
    msg[<span style="color: #d1f1a9;">'Date'</span>] = formatdate(localtime=<span style="color: #ebbbff; font-weight: bold;">True</span>)

    msgtext = template.format(**<span style="color: #ffc58f;">locals</span>())
    <span style="color: #ffc58f;">print</span> msgtext

    msg.attach(MIMEText(msgtext))

    <span style="color: #7285b7; font-weight: bold; font-style: italic;">#</span><span style="color: #7285b7; font-weight: bold; font-style: italic;"># Uncomment these lines and fix </span>
    <span style="color: #7285b7; font-weight: bold; font-style: italic;">#</span><span style="color: #7285b7; font-weight: bold; font-style: italic;">server = smtplib.SMTP('your.relay.server.edu')</span>
    <span style="color: #7285b7; font-weight: bold; font-style: italic;">#</span><span style="color: #7285b7; font-weight: bold; font-style: italic;">server.sendmail('your_email@gmail.com', # from</span>
    <span style="color: #7285b7; font-weight: bold; font-style: italic;">#                </span><span style="color: #7285b7; font-weight: bold; font-style: italic;">emailaddress,</span>
    <span style="color: #7285b7; font-weight: bold; font-style: italic;">#                </span><span style="color: #7285b7; font-weight: bold; font-style: italic;">msg.as_string())</span>
    <span style="color: #7285b7; font-weight: bold; font-style: italic;">#</span><span style="color: #7285b7; font-weight: bold; font-style: italic;">server.quit()</span>

    <span style="color: #ffc58f;">print</span> msg.as_string()
    <span style="color: #ffc58f;">print</span> <span style="color: #d1f1a9;">'------------------------------------------------------------------'</span>
</pre>
</div>

<pre class="example">
Dear Jane,

I am pleased to inform you that your talk will be in room 1.

Sincerely,
John

Content-Type: multipart/mixed; boundary="===============1191311863=="
MIME-Version: 1.0
From: youremail@gmail.com
To: jane-doe@gmail.com
Date: Tue, 16 Apr 2013 16:10:23 -0400

--===============1191311863==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit


Dear Jane,

I am pleased to inform you that your talk will be in room 1.

Sincerely,
John

--===============1191311863==--
------------------------------------------------------------------

Dear John,

I am pleased to inform you that your talk will be in room 2.

Sincerely,
John

Content-Type: multipart/mixed; boundary="===============1713881863=="
MIME-Version: 1.0
From: youremail@gmail.com
To: john-doe@gmail.com
Date: Tue, 16 Apr 2013 16:10:23 -0400

--===============1713881863==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit


Dear John,

I am pleased to inform you that your talk will be in room 2.

Sincerely,
John

--===============1713881863==--
------------------------------------------------------------------

Dear Jimmy,

I am pleased to inform you that your talk will be in room 3.

Sincerely,
John

Content-Type: multipart/mixed; boundary="===============0696685580=="
MIME-Version: 1.0
From: youremail@gmail.com
To: jimmy-john@gmail.com
Date: Tue, 16 Apr 2013 16:10:23 -0400

--===============0696685580==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit


Dear Jimmy,

I am pleased to inform you that your talk will be in room 3.

Sincerely,
John

--===============0696685580==--
------------------------------------------------------------------
</pre>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/04/16/Mail-merge-with-python.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
