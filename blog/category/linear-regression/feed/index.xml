<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Mon, 23 Nov 2015 12:03:21 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Linear regression with confidence intervals.</title>
      <link>http://jkitchin.github.io/blog/2013/02/18/Linear-regression-with-confidence-intervals</link>
      <pubDate>Mon, 18 Feb 2013 09:00:00 EST</pubDate>
      <category><![CDATA[confidence interval]]></category>
      <category><![CDATA[data analysis]]></category>
      <category><![CDATA[linear regression]]></category>
      <guid isPermaLink="false">ouU1Cp122xYewitLr1OY7aToQLI=</guid>
      <description>Linear regression with confidence intervals.</description>
      <content:encoded><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/08/28/linear-regression-with-confidence-intervals/" >Matlab post</a>
Fit a fourth order polynomial to this data and determine the confidence interval for each parameter. Data from example 5-1 in Fogler, Elements of Chemical Reaction Engineering.
</p>

<p>
We want the equation \(Ca(t) = b0 + b1*t + b2*t^2 + b3*t^3 + b4*t^4\) fit to the data in the least squares sense. We can write this in a linear algebra form as: T*p = Ca where T is a matrix of columns [1 t t^2 t^3 t^4], and p is a column vector of the fitting parameters. We want to solve for the p vector and estimate the confidence intervals.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.stats.distributions <span style="color: #8b0000;">import</span>  t

time = np.array([0.0, 50.0, 100.0, 150.0, 200.0, 250.0, 300.0])
Ca = np.array([50.0, 38.0, 30.6, 25.6, 22.2, 19.5, 17.4])*1e-3

T = np.column_stack([time**0, time, time**2, time**3, time**4])

p, res, rank, s = np.linalg.lstsq(T, Ca)
<span style="color: #ff0000; font-weight: bold;"># the parameters are now in p</span>

<span style="color: #ff0000; font-weight: bold;"># compute the confidence intervals</span>
n = <span style="color: #8b0000;">len</span>(Ca)
k = <span style="color: #8b0000;">len</span>(p)

sigma2 = np.sum((Ca - np.dot(T, p))**2) / (n - k)  <span style="color: #ff0000; font-weight: bold;"># RMSE</span>

C = sigma2 * np.linalg.inv(np.dot(T.T, T)) <span style="color: #ff0000; font-weight: bold;"># covariance matrix</span>
se = np.sqrt(np.diag(C)) <span style="color: #ff0000; font-weight: bold;"># standard error</span>

alpha = 0.05 <span style="color: #ff0000; font-weight: bold;"># 100*(1 - alpha) confidence level</span>

sT = t.ppf(1.0 - alpha/2.0, n - k) <span style="color: #ff0000; font-weight: bold;"># student T multiplier</span>
CI = sT * se

<span style="color: #8b0000;">for</span> beta, ci <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(p, CI):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{2: 1.2e} [{0: 1.4e} {1: 1.4e}]'</span>.format(beta - ci, beta + ci, beta)

SS_tot = np.sum((Ca - np.mean(Ca))**2)
SS_err = np.sum((np.dot(T, p) - Ca)**2)

<span style="color: #ff0000; font-weight: bold;">#  http://en.wikipedia.org/wiki/Coefficient_of_determination</span>
Rsq = 1 - SS_err/SS_tot
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'R^2 = {0}'</span>.format(Rsq)

<span style="color: #ff0000; font-weight: bold;"># plot fit</span>
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(time, Ca, <span style="color: #228b22;">'bo'</span>, label=<span style="color: #228b22;">'raw data'</span>)
plt.plot(time, np.dot(T, p), <span style="color: #228b22;">'r-'</span>, label=<span style="color: #228b22;">'fit'</span>)
plt.xlabel(<span style="color: #228b22;">'Time'</span>)
plt.ylabel(<span style="color: #228b22;">'Ca (mol/L)'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/linregress-conf.png'</span>)
</pre>
</div>

<pre class="example">
 5.00e-02 [ 4.9680e-02  5.0300e-02]
-2.98e-04 [-3.1546e-04 -2.8023e-04]
 1.34e-06 [ 1.0715e-06  1.6155e-06]
-3.48e-09 [-4.9032e-09 -2.0665e-09]
 3.70e-12 [ 1.3501e-12  6.0439e-12]
R^2 = 0.999986967246
</pre>

<p><img src="/img/./images/linregress-conf.png"><p>

<p>
A fourth order polynomial fits the data well, with a good R^2 value. All of the parameters appear to be significant, i.e. zero is not included in any of the parameter confidence intervals. This does not mean this is the best model for the data, just that the model fits well.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Linear-regression-with-confidence-intervals..org">org-mode source</a><p>]]></content:encoded>
    </item>
  </channel>
</rss>
