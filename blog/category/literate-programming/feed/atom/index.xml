<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-04-04T15:32:43Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Literate programming example with Fortran and org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode</id>
    <updated>2014-02-06T10:28:38Z</updated>
    <published>2014-02-04T10:22:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="literate-programming" />
    <summary type="html"><![CDATA[Literate programming example with Fortran and org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. A slightly more complicated example.</a></li>
<li><a href="#sec-2">2. Summary key points</a></li>
</ul>
</div>
</div>
<p>
Update: see a short video of how this post works here: <a href="/media/2014-02-04-Literate-programming-example-with-Fortran-and-org-mode/literate-programming.swf">video</a> 
</p>

<p>
I want to illustrate the literate programming capabilities of org-mode. One idea in literate programming is to have code in blocks surrounded by explanatory text. There is a process called "tangling", which extracts the code, and possibly compiles and runs it. I have typically used python and emacs-lisp in org-mode, but today we look at using Fortran. 
</p>

<p>
The first simple example is a hello world fortran program. Typically you create a file containing code like this:
</p>

<div class="org-src-container">

<pre class="src src-fortran"><span style="color: #8b0000;">PROGRAM</span> <span style="color: #8b2323;">hello</span>

<span style="color: #8b0000;">PRINT</span> *, <span style="color: #228b22;">"Hello world"</span>

<span style="color: #8b0000;">END</span> <span style="color: #8b0000;">PROGRAM</span> <span style="color: #8b2323;">hello</span>
</pre>
</div>

<p>
That file can be named something like hello.f90. We specify that in the source block header like this:
</p>

<pre class="example">
:tangle hello.f90
</pre>

<p>
There are a variety of ways to build your program. Let us create a makefile to do it. We will specify that this block is tangled to a Makefile like this:
</p>
<pre class="example">
:tangle Makefile
</pre>

<p>
Our Makefile will have three targets: 
</p>
<ol class="org-ol">
<li>hello, which compiles our program to an executable called a.out. 
</li>
<li>execute, which depends on hello, and runs the executable
</li>
<li>clean, which deletes a.out if it exists
</li>
</ol>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #8b2323;">hello</span>:  hello.f90
        gfortran hello.f90

<span style="color: #8b2323;">execute</span>: hello
        ./a.out

<span style="color: #8b2323;">clean</span>:
        rm -f a.out *.o
</pre>
</div>

<p>
Now, we can run <pre>elisp:(org-babel-tangle)</pre> , which will extract these files to the current directory. Here is evidence that the files exist.
</p>

<div class="org-src-container">

<pre class="src src-sh">ls
</pre>
</div>

<pre class="example">
hello.f90
literate.org
Makefile
</pre>

<p>
Let us go a step further, and use the makefile to execute our program. The first time you run this, you will see that the 
</p>

<div class="org-src-container">

<pre class="src src-sh">make clean execute
</pre>
</div>

<pre class="example">
rm -f a.out *.o
gfortran hello.f90
./a.out
 Hello world
</pre>

<p>
That works well! The only really inconvenient issue is that if you update the Fortran code above, you have to manually rerun  <pre>elisp:(org-babel-tangle)</pre> , then run the <code>make execute</code> command. We can combine that in a single block, where you do both things at once. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(shell-command-to-string <span style="color: #228b22;">"make clean execute"</span>)
</pre>
</div>

<pre class="example">
rm -f a.out *.o
gfortran hello.f90
./a.out
 Hello world
</pre>

<p>
That is it in a nutshell. We had a source block for a Fortran program, and a source block for the Makefile. After tangling the org-file, we have those files available for us to use. Next, let us consider a little more complicated example.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> A slightly more complicated example.</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, let us consider a Fortran code with two files. We will define a module file, and a program file. The module file contains a function to compute the area of a circle as a function of its radius. Here is our module file, which is tangled to circle.f90.
</p>

<div class="org-src-container">

<pre class="src src-fortran">MODULE Circle
      <span style="color: #4682b4;">implicit None</span>
      public :: area
<span style="color: #ff0000; font-weight: bold;">c</span><span style="color: #ff0000; font-weight: bold;">ontains</span>
      <span style="color: #8b0000;">function</span> <span style="color: #8b2323;">area</span>(r) 
      <span style="color: #4682b4;">implicit none</span>
      <span style="color: #4682b4;">real</span>, intent(in) :: r
      <span style="color: #4682b4;">real</span> :: area
      area = 3.14159 * r**2
      <span style="color: #8b0000;">return</span>
      <span style="color: #8b0000;">end</span> <span style="color: #8b0000;">function</span> <span style="color: #8b2323;">area</span>
<span style="color: #8b0000;">END</span> MODULE Circle
</pre>
</div>

<p>
Now, we write a program that will print a table of circle areas. Here we hard-code an array of 5 radius values, then loop through the values and get the area of the circle with that radius. We will print some output that generates an org-mode <a href="http://orgmode.org/manual/Tables.htm">table</a> . In this program, we <code>use</code> our module defined above.
</p>

<div class="org-src-container">

<pre class="src src-fortran"><span style="color: #8b0000;">program</span> <span style="color: #8b2323;">main</span>
      
use circle, only: area

<span style="color: #4682b4;">implicit none</span>
<span style="color: #4682b4;">integer</span> :: i
<span style="color: #4682b4;">REAL</span>, <span style="color: #4682b4;">DIMENSION</span>(<span style="color: #8b008b;">5</span>) :: R
R = (/1.0, 2.0, 3.0, 4.0, 5.0 /)

<span style="color: #8b0000;">print</span> *, <span style="color: #228b22;">"#+tblname: circle-area"</span>
<span style="color: #ff0000; font-weight: bold;">d</span><span style="color: #ff0000; font-weight: bold;">o i = 1, 5</span>
  <span style="color: #8b0000;">print</span> *, <span style="color: #228b22;">"|"</span>, R(i), <span style="color: #228b22;">"|"</span>, area(R(i)), <span style="color: #228b22;">"|"</span>
<span style="color: #8b0000;">end</span> <span style="color: #8b0000;">do</span>

<span style="color: #8b0000;">end</span> <span style="color: #8b0000;">program</span> <span style="color: #8b2323;">main</span>
</pre>
</div>

<p>
Now, we make a makefile that will build this program. I use a different name for the file, since we already have a Makefile in this directory from the last example.  I also put @ at the front of each command in the makefile to suppress it from being echoed when we run it. Later, we will use the makefile to compile the program, and then run it, and we only want the output of the program. 
</p>

<p>
The compiling instructions are more complex. We have to compile the circle module first, and then the main program. Here is our makefile. 
</p>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #8b2323;">circle</span>:
        <span style="color: #4682b4;">@</span>gfortran -c circle.f90

<span style="color: #8b2323;">main</span>: circle
        <span style="color: #4682b4;">@</span>gfortran -c main.f90
        <span style="color: #4682b4;">@</span>gfortran circle.o main.o -o main

<span style="color: #8b2323;">clean</span>:
        <span style="color: #4682b4;">@</span>rm -f *.o main
</pre>
</div>

<p>
Now, we run this block, which tangles out our new files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">main.f90</td>
<td class="left">circle.f90</td>
<td class="left">hello.f90</td>
<td class="left">makefile-main</td>
<td class="left">Makefile</td>
</tr>
</tbody>
</table>

<p>
Note that results above show we have tangled <i>all</i> the source blocks in this file. You can limit the scope of tangling, by narrowing to a subtree, but that is beyond our aim for today.
</p>

<p>
Finally, we are ready to build our program. We specify the new makefile with the <code>-f</code> option to make. We use the clean target to get rid of old results, and then the main target with builds the program. Since main depends on circle, the circle file is compiled first. 
</p>

<p>
Note in this block I use this header:
</p>
<pre class="example">
#+BEGIN_SRC sh :results raw
</pre>

<p>
That will tell the block to output the results directly in the buffer. I have the fortran code prename the table, and put | around the entries, so this entry is output directly as an org table. 
</p>

<div class="org-src-container">

<pre class="src src-sh">make -f makefile-main clean main
./main
</pre>
</div>

<table id="circle-area" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1.000000</td>
<td class="right">3.141590</td>
</tr>

<tr>
<td class="right">2.000000</td>
<td class="right">12.56636</td>
</tr>

<tr>
<td class="right">3.000000</td>
<td class="right">28.27431</td>
</tr>

<tr>
<td class="right">4.000000</td>
<td class="right">50.26544</td>
</tr>

<tr>
<td class="right">5.000000</td>
<td class="right">78.53975</td>
</tr>
</tbody>
</table>



<p>
It takes some skill getting used to using <code>:results raw</code>. The results are not replaced if you run the code again. That can be inconvenient if you print a very large table, which you must manually delete. 
</p>


<p>
Now that we have a named org table, I can use that table as data in other source blocks, e.g. here in python. You define variables in the header name by referring to the tblname like this.
</p>

<pre class="example">
#+BEGIN_SRC python :var data=circle-area
</pre>

<p>
Then, data is available as a variable in your code. Let us try it and plot the area vs. radius here. For more fun, we will make the plot <a href="http://xkcd.com/">xkcd</a> , so it looks like I sketched it by hand.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.xkcd()

<span style="color: #8b0000;">print</span> data <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">data is a list </span>
<span style="color: #8b008b;">data</span> = np.array(data)
plt.plot(data[:, 0], data[:, 1])
plt.xlabel(<span style="color: #228b22;">'radius'</span>)
plt.ylabel(<span style="color: #228b22;">'area'</span>)
plt.savefig(<span style="color: #228b22;">'circle-area.png'</span>)
</pre>
</div>

<pre class="example">
[[1.0, 3.14159], [2.0, 12.56636], [3.0, 28.27431], [4.0, 50.26544], [5.0, 78.53975]]
</pre>


<div class="figure">
<p><img src="/media/2014-02-04-Literate-programming-example-with-Fortran-and-org-mode/circle-area.png"> 
</p>
</div>

<p>
It appears the area increases quadratically with radius. No surprise there! For fun, let us show that. If we divide each area by \(r^2\), we should get back &pi;. Let us do this in emacs-lisp, just to illustrate how flexibly we can switch between languages. In lisp, the data structure will be a list of items like ((radius1 area1) (radius2 area2)&#x2026;). So, we just map a function that divides the area (the second element of an entry) by the square of the first element. My lisp-fu is only average, so I use the <code>nth</code> function to get those elements. We also load the calc library to get the math-pow function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">calc</span>)
(mapcar (<span style="color: #8b0000;">lambda</span> (x) (/ (nth 1 x) (math-pow (nth 0 x) 2))) data)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
</tr>
</tbody>
</table>


<p>
Indeed, we get &pi; for each element, which shows in fact that the area does increase quadratically with radius.
</p>

<p>
You can learn more about tangling source code from org-mode here <a href="http://orgmode.org/manual/Extracting-source-code.html">http://orgmode.org/manual/Extracting-source-code.html</a> .
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary key points</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>You can organize source files in org-mode as source blocks which can be "tangled" to "real" source code.
</li>
<li>You can build into your org-file(s) even the Makefile, or other building instructions.
</li>
<li>You can even run the build program, and the resulting programs from org-mode to capture data.
</li>
<li>Once that data is in org-mode, you can reuse it in other source blocks, including other languages. 
</li>
</ol>

<p>
What benefits could there be for this? One is you work in org-mode, which allows you to structure a document in different ways than code does. You can use headings to make the hierarchy you want. You can put links in places that allow you to easily navigate the document. Second, you can build in the whole workflow into your document, from building to execution. Third, you could have a self-contained file that extracts what someone else needs, but which has documentation and explanation built into it, <i>which you wrote as you developed the program</i>, rather than as an afterthought. You can still edit each block in its native emacs-mode, and have org-mode too. That is something like having cake, <i>and eating it too</i>!
</p>

<p>
Downsides? Probably. Most IDE/project type environments are designed for code. These tools offer nice navigation between functions and files. I don't use those tools, but I imagine if you are hooked on them, you might have to learn something new this way.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
</feed>
