<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-02-10T12:43:37Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Invisible text in emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/06/Invisible-text-in-emacs" />
    <id>http://jkitchin.github.io/blog/2014/02/06/Invisible-text-in-emacs</id>
    <updated>2014-02-06T09:03:02Z</updated>
    <published>2014-02-06T09:02:44Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Invisible text in emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/06/Invisible-text-in-emacs"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#beginner">1. subsection 1</a></li>
<li><a href="#sec-2">2. subsection 2</a></li>
<li><a href="#sec-3">3. subsection 3</a></li>
</ul>
</div>
</div>
<p>
Emacs supports <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Invisible-Text.html">invisible text</a> . In other words, you can use code to set properties on text in a buffer that make it visible, or invisible. You can use code to change the invisibility properties of text. 
</p>

<p>
I have been exploring ways to conditionally navigate in org documents using links. These links may validate that some property has been set in a heading, for example. An alternative approach is to make regions visible, depending on some criteria. That is what we do today. You will probably want to see this  <a href="/media/2014-02-06-Invisible-text-in-emacs/invisible-text.swf">video</a> , since what happens in this post is dynamic, and you will not see visible and invisible text.
</p>

<p>
What I have below here are a set of headings with properties that indicate what "level" they are at: beginner, medium and advanced. 
First, we mark each org subtree  with an overlay that has an 'invisible property that contains the "level". Then, we add the "level" to the list of symbols that marks invisible sections.  If you run this block, the headings all disappear.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-map-entries (<span style="color: #8b0000;">lambda</span> () 
                   (<span style="color: #8b0000;">let</span> ((level (org-entry-get (point) <span style="color: #228b22;">"level"</span>))
                          (symbol-level))
                     (<span style="color: #8b0000;">when</span> level
                       (setq symbol-level (intern level))
                       (org-mark-subtree)                 
                       (overlay-put (make-overlay (point) (mark))
                                    'invisible 
                                    symbol-level)
                       <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">make regions with symbol-level invisible</span>
                       (add-to-invisibility-spec `(,symbol-level))))))
</pre>
</div>

<p>
Now, we can selectively make them appear with these links.
</p>

<p>
<pre>elisp:(remove-from-invisibility-spec '(beginner))</pre> 
</p>

<p>
<pre>elisp:(remove-from-invisibility-spec '(medium))</pre> 
</p>

<p>
<pre>elisp:(remove-from-invisibility-spec '(advanced))</pre> 
</p>

<p>
I imagine this could be useful to show selective content based on user choices. I am not sure it is better than links to external files. I imagine you would have to open this org file by some elisp command that would run the block at the top to make everything invisible, and then show it to the user. You could definitely build in more complex code to determine if a user was allowed to open a section. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">level2-p</span> ()
  <span style="color: #228b22;">"return if user is ready for level 2 based on value of property named correct"</span>
  (interactive)
  (<span style="color: #8b0000;">save-excursion</span>
    (org-open-link-from-string <span style="color: #228b22;">"[[#beginner]]"</span>)
    (<span style="color: #8b0000;">let</span> ((val (org-entry-get (point) <span style="color: #228b22;">"correct"</span>)))
      (<span style="color: #8b0000;">if</span> (and val (string= val <span style="color: #228b22;">"true"</span>))
          t
        nil))))
</pre>
</div>

<pre class="example">
level2-p
</pre>

<p>
Now, we can build this link: <pre>elisp:(when (level2-p) (remove-from-invisibility-spec '(medium)))</pre> 
</p>

<p>
This will show the medium level, provided we have already opened the beginner level and set the property value correctly.
</p>

<div id="outline-container-beginner" class="outline-2">
<h2 id="beginner"><a id="sec-1"></a><span class="section-number-2">1</span> subsection 1</h2>
<div class="outline-text-2" id="text-beginner">
<p>
some text in 1
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> subsection 2</h2>
<div class="outline-text-2" id="text-2">
<p>
more text in 2
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> subsection 3</h2>
<div class="outline-text-2" id="text-3">
<p>
last section 3
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/06/Invisible-text-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Send email to a list of users]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/01/13/Send-email-to-a-list-of-users" />
    <id>http://jkitchin.github.io/blog/2014/01/13/Send-email-to-a-list-of-users</id>
    <updated>2014-01-13T18:42:59Z</updated>
    <published>2014-01-13T18:41:55Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Send email to a list of users]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/01/13/Send-email-to-a-list-of-users"><![CDATA[


<p>
I have a need to send a lot of emails to users in my class. I have to send each student an email containing there userid and a password assigned to them. I have a list of these, so the strategy is to create a function that will email that information to one user, and then use mapcar to apply the function to each pair in a list.  First, we work out a function that will send one email to one user.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">send-mail</span> (userid password)
  <span style="color: #228b22;">"send email to userid@andrew.cmu.edu containing their password"</span>
  (interactive)
  (mail)
  (mail-to)
  (insert (format <span style="color: #228b22;">"%s@andrew.cmu.edu"</span> userid))
  (mail-subject)
  (insert <span style="color: #228b22;">"[06-640] account information"</span>)
  (mail-text)
  (insert (format <span style="color: #228b22;">"</span>
<span style="color: #228b22;">An account has been created on gilgamesh.cheme.cmu.edu</span>
<span style="color: #228b22;">userid: %s</span>
<span style="color: #228b22;">password: %s"</span> userid password))
  (mail-send-and-exit))

(send-mail <span style="color: #228b22;">"jkitchin"</span> <span style="color: #228b22;">"trustme99"</span>)
</pre>
</div>

<p>
That worked well. I ran the block and got the email. 
</p>

<p>
Now, suppose I have this data:
</p>
<table id="users" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">userid</th>
<th scope="col" class="left">password</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">user1</td>
<td class="left">trustme99</td>
</tr>

<tr>
<td class="left">user2</td>
<td class="left">foolme99</td>
</tr>

<tr>
<td class="left">user3</td>
<td class="left">blameme99</td>
</tr>
</tbody>
</table>

<p>
We can pass that to a source block as a list of lists that will look like this:
</p>
<pre class="example">
 ((user1 trustme99) (user2 foolme99) (user3 blameme99))
</pre>

<p>
Then, we can use a mapcar to process each element. Here I use a dummy function with two arguments. If I substitute the function above, each of these users would get an email.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">fun</span> (a b)
  (princ (format <span style="color: #228b22;">"user: %s\npassword: %s\n"</span> a b)))

(mapcar (<span style="color: #8b0000;">lambda</span> (x) (fun (car x) (cadr x))) data)
</pre>
</div>

<pre class="example">
user: user1
password: trustme99
user: user2
password: foolme99
user: user3
password: blameme99
</pre>

<p>
I am not sure that is the best way to get the first and second elements in the list element. It looks funny to me, but it works fine. the alternative is not much prettier:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">fun</span> (a b)
  (princ (format <span style="color: #228b22;">"user: %s\npassword: %s\n"</span> a b)))

(mapcar (<span style="color: #8b0000;">lambda</span> (x) (fun (nth 0 x) (nth 1 x))) data)
</pre>
</div>

<pre class="example">
user: user1
password: trustme99
user: user2
password: foolme99
user: user3
password: blameme99
</pre>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/13/Send-email-to-a-list-of-users.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Custom directives]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/11/30/Custom-directives" />
    <id>http://jkitchin.github.io/blog/2013/11/30/Custom-directives</id>
    <updated>2013-11-30T09:35:33Z</updated>
    <published>2013-11-30T09:19:56Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Custom directives]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/11/30/Custom-directives"><![CDATA[




<p>
You can define custom <a href="http://orgmode.org/worg/org-contrib/org-special-blocks.html">special blocks</a> in org-mode. Here is an example of creating attention and note directives. Note you need to specify the styles and environments in the header like this:
</p>
<pre class="example">
#+HTML_HEAD_EXTRA:  &lt;style&gt;.attention {font-size: 30px; text-indent: 50px; color: red; background-color:HotPink;}&lt;/style&gt;
#+HTML_HEAD_EXTRA:  &lt;style&gt;.note {font-size: 30px; text-indent: 50px; background-color:LightSkyBlue;}&lt;/style&gt;

#+LATEX_HEADER: \usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
#+LATEX_HEADER: \newenvironment{attention}{\color{red}}{\ignorespacesafterend}
#+LATEX_HEADER: \newenvironment{note}{\itshape}{\ignorespacesafterend}
</pre>

<p>
That allows you to define different looks for exporting to html and LaTeX. For the blog post, I put the style in the body of the html.
</p>

<style>.attention {font-size: 30px; text-indent: 50px; color: red; background-color:HotPink;}</style>
<style>.note {font-size: 30px; text-indent: 50px; background-color:LightSkyBlue;}</style>

<p>
Here is the markup for an attention block.
</p>

<pre class="example">
#+BEGIN_ATTENTION
Pay attention to this text!
#+END_ATTENTION
</pre>

<p>
Renders like this: 
</p>
<div class="attention">
<p>
Pay attention to this text!
</p>

</div>


<p>
A note is defined as:
</p>
<pre class="example">
#+begin_note
this is a note
#+end_note
</pre>

<p>
and it renders like this:
</p>
<div class="note">
<p>
this is a note.
</p>

</div>

<p>
I am not sure if it is possible to add arguments, e.g. via attributes. Anyway, this may enable some flexibility in adding content that may be rendered in html and LaTeX in org-mode. There is a function (org-html-special-block and org-latex-special-block) that does the rendering, and it has an info plist that probably has the information. It does not appear you can pass arguments in though. That would require a filter that redefines the rendering.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/11/30/Custom-directives.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Posting articles to CiteULike from bibtex]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/10/20/Posting-articles-to-CiteULike-from-bibtex" />
    <id>http://jkitchin.github.io/blog/2013/10/20/Posting-articles-to-CiteULike-from-bibtex</id>
    <updated>2013-10-20T19:35:35Z</updated>
    <published>2013-10-20T15:33:08Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="citeulike" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Posting articles to CiteULike from bibtex]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/10/20/Posting-articles-to-CiteULike-from-bibtex"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Doing this in emacs</a></li>
</ul>
</div>
</div>

<p>
I have been using <a href="http://www.citeulike.org/user/jkitchin">CiteULike</a> for a while now to keep a list of articles that are probably worth reading. Basically, each month I get a table of contents from many journals, and as I read through them, if an article catches my attention I add it to my CiteULike account. 
</p>

<p>
This list is not synchronized with my bibtex database however. These serve different purposes. The CiteULike list is for articles that are probably worth reading, while the bibtex file contains articles I am probably going to cite. It should be that every article in my bibtex file is on CiteULike, but not necessarily the other way around. The problem is I do not have a way to push files from my bibtex file to CiteULike easily.
</p>

<p>
CiteULike allows you to <a href="http://www.citeulike.org/profile/jkitchin/import_go">import</a> a bibtex file though. I want to explore automatically importing a bibtex file by simulating the form. We need a set of cookies to make this happen so CiteULike knows who we are. I stored my username and password in a file called citeulike.json and use them to get cookies that I save here in a pickle file. I think this cookie gives you access to your CiteULike account, so it should be kept secret.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> json, pickle, requests

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'citeulike.json'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">d</span> = json.loads(f.read())

<span style="color: #8b008b;">url</span> = <span style="color: #228b22;">'http://www.citeulike.org/login.do'</span>

<span style="color: #8b008b;">data</span> = <span style="color: #228b22;">"username={0}&amp;password={1}&amp;perm=1"</span>.<span style="color: #cd0000;">format</span>(d[<span style="color: #228b22;">'username'</span>], d[<span style="color: #228b22;">'password'</span>])

<span style="color: #8b008b;">r</span> = requests.post(url, data=data, allow_redirects=<span style="color: #cd0000;">False</span>)

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'cookies.pckl'</span>, <span style="color: #228b22;">'wb'</span>) <span style="color: #8b0000;">as</span> f:
    pickle.dump(r.cookies, f)
</pre>
</div>

<p>
By inspecting the <a href="http://www.citeulike.org/profile/jkitchin/import_go">import</a> page with Firebug, I constructed this http request to upload a bibtex string.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle, requests

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">reload cookies</span>
<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'cookies.pckl'</span>, <span style="color: #228b22;">'rb'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">cookies</span> = pickle.load(f)

<span style="color: #8b008b;">url</span> = <span style="color: #228b22;">'http://www.citeulike.org/profile/jkitchin/import_do'</span>

<span style="color: #8b008b;">bibtex</span> = <span style="color: #228b22;">'''</span>
<span style="color: #228b22;">@article{zhuo-2010-co2-induc,</span>
<span style="color: #228b22;">  author =       {Zhuo, Shengchi and Huang, Yongmin and Peng, Changjun</span>
<span style="color: #228b22;">                  and Liu, Honglai and Hu, Ying and Jiang, Jianwen},</span>
<span style="color: #228b22;">  title =        {CO2-Induced Microstructure Transition of Surfactant</span>
<span style="color: #228b22;">                  in Aqueous Solution: Insight from Molecular Dynamics</span>
<span style="color: #228b22;">                  Simulation},</span>
<span style="color: #228b22;">  journal =      {The Journal of Physical Chemistry B},</span>
<span style="color: #228b22;">  volume =       114,</span>
<span style="color: #228b22;">  number =       19,</span>
<span style="color: #228b22;">  pages =        {6344-6349},</span>
<span style="color: #228b22;">  year =         2010,</span>
<span style="color: #228b22;">  doi =          {10.1021/jp910253b},</span>
<span style="color: #228b22;">  URL =          {http://pubs.acs.org/doi/abs/10.1021/jp910253b},</span>
<span style="color: #228b22;">  eprint =       {http://pubs.acs.org/doi/pdf/10.1021/jp910253b}</span>
<span style="color: #228b22;">}'''</span>

<span style="color: #8b008b;">data</span> = {<span style="color: #228b22;">'pasted'</span>:bibtex,
        <span style="color: #228b22;">'to_read'</span>:2,
        <span style="color: #228b22;">'tag_parsing'</span>:<span style="color: #228b22;">'simple'</span>,
        <span style="color: #228b22;">'strip_brackets'</span>:<span style="color: #228b22;">'no'</span>,
        <span style="color: #228b22;">'update_id'</span>:<span style="color: #228b22;">'bib-key'</span>,
        <span style="color: #228b22;">'btn_bibtex'</span>:<span style="color: #228b22;">'Import BibTeX file ...'</span>}

<span style="color: #8b008b;">headers</span> = {<span style="color: #228b22;">'content-type'</span>: <span style="color: #228b22;">'multipart/form-data'</span>,
           <span style="color: #228b22;">'User-Agent'</span>:<span style="color: #228b22;">'jkitchin/johnrkitchin@gmail.com bibtexupload'</span>}

<span style="color: #8b008b;">r</span> = requests.post(url, headers=headers, data=data, cookies=cookies, files={})
</pre>
</div>

<p>
The result is that article is now listed in my CiteULike at <a href="http://www.citeulike.org/user/jkitchin/article/12728895">http://www.citeulike.org/user/jkitchin/article/12728895</a> .  This opens the possibility of integrating this into my bibtex workflow. I could implement this in emacs-lisp, and have it automatically upload new entries in the bibtex file to CiteULike. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Doing this in emacs</h2>
<div class="outline-text-2" id="text-1">
<p>
I think the easiest thing to do here is to write a python script that takes the bibtex string and posts it. We will use emacs to get the bibtex string. We will use the example at  <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">http://ergoemacs.org/emacs/elisp_perl_wrapper.html</a> to put this together. This example uses an external script that takes a string on stdin, and returns a result on stdout.
</p>

<p>
We will run the function in a bibtex buffer. We will narrow the buffer to the current entry, and use that to define the boundaries of the string. We do the command in a temp-buffer to prevent it from modifying our bibtex file. There is some way to make the command not do this with optional arguments, but I did not figure it out. It is a little ugly I had to use an absolute path below. An alternative would be to put the script into a directory on your path. Here is the function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">j/upload-bibtex-entry-to-citeulike</span> ()
  <span style="color: #228b22;">"get bibtex string and submit to citeulike"</span>
  (interactive)
  (<span style="color: #8b0000;">save-restriction</span>
    (bibtex-narrow-to-entry)
    (<span style="color: #8b0000;">let</span> ((startpos (point-min))
          (endpos (point-max))
          (bibtex-string (buffer-string))
          (script <span style="color: #228b22;">"python c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/upload_bibtex_citeulike.py"</span>))
      (<span style="color: #8b0000;">with-temp-buffer</span> (insert bibtex-string)
                        (shell-command-on-region (point-min) (point-max) script t nil nil t)))))
</pre>
</div>

<p>
Now, let us define the python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">!python</span>
<span style="color: #8b0000;">import</span> pickle, requests, sys

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">reload cookies</span>
<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/cookies.pckl'</span>, <span style="color: #228b22;">'rb'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">cookies</span> = pickle.load(f)

<span style="color: #8b008b;">url</span> = <span style="color: #228b22;">'http://www.citeulike.org/profile/jkitchin/import_do'</span>

<span style="color: #8b008b;">bibtex</span> = sys.stdin.read()

<span style="color: #8b008b;">data</span> = {<span style="color: #228b22;">'pasted'</span>:bibtex,
        <span style="color: #228b22;">'to_read'</span>:2,
        <span style="color: #228b22;">'tag_parsing'</span>:<span style="color: #228b22;">'simple'</span>,
        <span style="color: #228b22;">'strip_brackets'</span>:<span style="color: #228b22;">'no'</span>,
        <span style="color: #228b22;">'update_id'</span>:<span style="color: #228b22;">'bib-key'</span>,
        <span style="color: #228b22;">'btn_bibtex'</span>:<span style="color: #228b22;">'Import BibTeX file ...'</span>}

<span style="color: #8b008b;">headers</span> = {<span style="color: #228b22;">'content-type'</span>: <span style="color: #228b22;">'multipart/form-data'</span>,
           <span style="color: #228b22;">'User-Agent'</span>:<span style="color: #228b22;">'jkitchin/johnrkitchin@gmail.com bibtexupload'</span>}

<span style="color: #8b008b;">r</span> = requests.post(url, headers=headers, data=data, cookies=cookies, files={})
</pre>
</div>

<p>
That is it. Now, in my bibtex file with the cursor in an entry, I type M-x j/upload-bibtex-entry-to-citeulike, and a few seconds later the entry has been uploaded! 
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/10/20/Posting-articles-to-CiteULike-from-bibtex.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Tool tips on text in Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/04/12/Tool-tips-on-text-in-Emacs" />
    <id>http://jkitchin.github.io/blog/2013/04/12/Tool-tips-on-text-in-Emacs</id>
    <updated>2013-04-12T11:36:59Z</updated>
    <published>2013-04-12T10:12:48Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Tool tips on text in Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/04/12/Tool-tips-on-text-in-Emacs"><![CDATA[


<p>
Here we look at a way to get tool tips on text in Emacs. This would be helpful for giving hints, or definitions, or reminders about something. Tool tips are created by setting the help-echo text property for the string of interest. We will write a function that adds the tool tip to every instance of a string in the current buffer. We will also change the color of the string slightly to give the reader a hint there might be something there.
</p>

<p>
Here is the code. We use save-excursion so that the cursor stays where it starts. Then we search for the string we want a tool tip on, and set the appropriate properties.
</p>

<p>
What is a foobar?
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">add a tooltip to every instance of foobar</span>
(<span style="color: #8b0000;">save-excursion</span>  <span style="color: #ff0000; font-weight: bold;">;</span><span style="color: #ff0000; font-weight: bold;">return cursor to current-point</span>
  (goto-char 1)
    (<span style="color: #8b0000;">while</span> (search-forward <span style="color: #228b22;">"foobar"</span> (point-max) t)
      (set-text-properties  (match-beginning 0) (match-end 0)
                            `(help-echo <span style="color: #228b22;">"You know... a bar for foos!"</span>
                             font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"dark slate gray"</span>))
)))
</pre>
</div>

<p>
After you run the function above, the next sentence should have a grayed word in it, and when you hold your mouse over the grayed word a tool tip should appear.
</p>

<p>
There is a foobar in the woods.
</p>

<p>
You can see the effect here:
</p>

<p><img src="/img/./tooltip-emacs.png"><p>

<p>
This could be an interesting way to increase the depth and richness of text. To use it you would have to define a function that runs when a file is opened, or call the function after opening a file.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/04/12/Tool-tips-on-text-in-Emacs.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
