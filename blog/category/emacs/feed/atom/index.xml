<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-12-21T16:46:35Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Capturing stderr from Python in org-mode - take 2]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2" />
    <id>http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2</id>
    <updated>2014-12-21T11:46:11Z</updated>
    <published>2014-12-21T11:46:11Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Capturing stderr from Python in org-mode - take 2]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2"><![CDATA[


<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/09/27/Capturing-stderr-and-exceptions-from-python-in-org-mode/">post</a> I wrote about a sandbox module to help capture stderr in Python code blocks in org-mode. That module worked, but ran as a script. 
</p>

<p>
stderr is not captured in the output of a code block in org-mode. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
</pre>

<p>
The messages to stderr just disappears. Not good for code like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
[[ 1.]
 [ 1.]]
</pre>

<p>
There is an error in that code, k is not defined. If you run that as a script, you get this output:
</p>
<pre class="example">
&gt;&gt;&gt; Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
</pre>

<p>
But, that is evidently going to stderr, and not getting captured in org-mode. Boo. A silent error that returns a value! This behavior of odeint may be <a href="https://github.com/scipy/scipy/pull/4052">fixed</a> in scipy 0.15, but it is a general deficiency of org-mode babel code blocks. So, today I am looking back into a way to fix it. We try something as mundane as just redefining stderr in Python at runtime.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
testing stderr
</pre>

<p>
That works fine. Let us test it with the other block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
[[ 1.]
 [ 1.]]
</pre>

<p>
Sweet, we get the errors. We still get the returned value, but it is immediately obvious something is wrong. I have wrapped that little tidbit into a Python module in <a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py">pycse.orgmode</a> , which you can import to get the same effect.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pycse.orgmode

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Finally, you can avoid the import by setting your org-babel Python command like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-python-command <span style="color: #228b22;">"python -i -c \"import pycse.orgmode\""</span>)
</pre>
</div>

<pre class="example">
python -i -c "import pycse.orgmode"
</pre>

<p>
Now, we run our faulty block again:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Excellent. The stderr is captured.
</p>

<p>
And we get basically the same output as before for regular code blocks. There is an extra line before and after the output for some reason. I can live with that!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> + <span style="color: #000000; background-color: #cccccc; font-weight: bold;">7</span>
</pre>
</div>

<pre class="example">
13
</pre>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/21/Capturing-stderr-from-Python-in-org-mode---take-2.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A new mode for Python documentation]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/20/A-new-mode-for-Python-documentation" />
    <id>http://jkitchin.github.io/blog/2014/12/20/A-new-mode-for-Python-documentation</id>
    <updated>2014-12-20T17:49:34Z</updated>
    <published>2014-12-20T15:02:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[A new mode for Python documentation]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/20/A-new-mode-for-Python-documentation"><![CDATA[



<p>
The emacs-lisp documentation in Emacs is inspiring. It is interlinked, you can click on links to open source files, other commands, etc&#x2026; Python documentation is not that nice. It should be.
</p>

<p>
I wrote a little pydoc function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc</span> (name)
  <span style="color: #228b22;">"Display pydoc information for NAME in a buffer named *pydoc*."</span>
  (interactive <span style="color: #228b22;">"sName of function or module: "</span>)
  (switch-to-buffer-other-window <span style="color: #228b22;">"*pydoc*"</span>)
  (erase-buffer)
  (insert (shell-command-to-string (format <span style="color: #228b22;">"python -m pydoc %s"</span> name)))
  (goto-char (point-min)))
</pre>
</div>

<p>
which at least accesses python documentation in emacs. It looks like this:
</p>


<div class="figure">
<p><img src="/media/2014-12-20-A-new-mode-for-Python-documentation/pydoc-jasp.png"> 
</p>
</div>

<p>
But, this lacks functionality. I want there to be useful links in this, so I can click on the filename to open the source, or click on the packages to get their documentation. Below, we walk through a few functions that will operate on the buffer and put text properties on different pieces.
</p>

<p>
First, let us make the source file clickable so it opens the source.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-make-file-link</span> ()
  <span style="color: #228b22;">"Find FILE in a pydoc buffer and make it a clickable link"</span>
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^FILE</span>
<span style="color: #228b22;">    </span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">$"</span> nil t)

    (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap))
          (start (match-beginning 1))
          (end (match-end 1))
          (source-file (match-string 1)))
      
      ;; <span style="color: #ff0000; font-weight: bold;">set file to be clickable to open the source</span>
      (define-key map [mouse-1]
        `(<span style="color: #8b0000;">lambda</span> ()
          (interactive)
          (find-file ,source-file)))
      ;<span style="color: #ff0000; font-weight: bold;">(remove-text-properties start end '(mouse-face nil))</span>
      (set-text-properties
       start end
       `(local-map, map
                   font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                   mouse-face highlight
                   help-echo <span style="color: #228b22;">"mouse-1: click to open"</span>)))))
</pre>
</div>

<pre class="example">
pydoc-make-file-link
</pre>

<p>
Next, sometimes there are URLs in the python documentation. These should all open up in a browser when you click on them. Here we propertize anything we recognize as a URL to make it open when clicked on.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-make-url-links</span> ()
  (goto-char (point-min))
  (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">http</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">s</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">?://.*$</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span> nil t)
    (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap))
          (start (match-beginning 1))
          (end (match-end 1)))
        
      (define-key map [mouse-1]
        `(<span style="color: #8b0000;">lambda</span> ()
          (interactive)
          (browse-url ,(buffer-substring start end))))
        
      (set-text-properties
       start end
       `(local-map ,map
                   font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                   mouse-face highlight
                   help-echo (format <span style="color: #228b22;">"mouse-1: click to open"</span>))))))
</pre>
</div>

<p>
When we get documentation for a package, we should make each entry of the package clickable, so we can get to the documentation for that package easily. We store the name of the current package so we can construct the path to the subpackage.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-get-name</span> ()
  <span style="color: #228b22;">"get NAME and store locally"</span>
  (make-variable-buffer-local 'pydoc-name)
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^NAME</span>
<span style="color: #228b22;">\\s-*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">-][a-zA-Z]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span> nil t)
    (setq pydoc-name (match-string 1))))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-make-package-links</span> ()
  <span style="color: #228b22;">"make links in PACKAGE CONTENTS"</span>
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^PACKAGE CONTENTS"</span> nil t)
    (forward-line)

    (<span style="color: #8b0000;">while</span> (string-match
            <span style="color: #228b22;">"^    </span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[a-zA-Z0-9_]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">[ ]?</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">(package)</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">?"</span>
            (buffer-substring
             (line-beginning-position)
             (line-end-position)))
                
      (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap))
            (start (match-beginning 1))
            (end (match-end 1))
            (package (concat
                      pydoc-name <span style="color: #228b22;">"."</span>
                      (match-string 1
                                    (buffer-substring
                                     (line-beginning-position)
                                     (line-end-position))))))
        
        (define-key map [mouse-1]
          `(<span style="color: #8b0000;">lambda</span> ()
            (interactive)
            (pydoc ,package)))
          
        (set-text-properties
         (+ (line-beginning-position) start)
         (+ (line-beginning-position) end)
         `(local-map, map
                      font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                      mouse-face highlight
                      help-echo (format <span style="color: #228b22;">"mouse-1: click to open %s"</span> ,package))))
      (forward-line))))
</pre>
</div>

<p>
Next, we put some eye candy on function names and arguments. This won't do anything functionally, but it breaks up the monotony of all black text.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-colorize-functions</span> ()
  <span style="color: #228b22;">"Change color of function names and args."</span>
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^Functions"</span> nil t)  
    (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"    </span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[a-zA-z0-9-]+</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">(</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">)]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">)"</span> nil t)
      (set-text-properties
       (match-beginning 1)
       (match-end 1)
       '(font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"brown"</span>)))

      (set-text-properties
       (match-beginning 2)
       (match-end 2)
       '(font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>))))))
</pre>
</div>

<p>
I have gotten used to the [back] link in emacs-lisp documentation, so we try to emulate it here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-insert-back-link</span> ()
  <span style="color: #228b22;">"Insert link to previous buffer"</span>
  (goto-char (point-max)) 
  (insert <span style="color: #228b22;">"</span>
<span style="color: #228b22;">[back]"</span>)
  (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap)))
    
    ;; <span style="color: #ff0000; font-weight: bold;">set file to be clickable to open the source</span>
    (define-key map [mouse-1]
      (<span style="color: #8b0000;">lambda</span> ()
        (interactive)
        (pydoc *pydoc-last*)))

      (set-text-properties
       (line-beginning-position)
       (line-end-position)
       `(local-map, map
                    font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                    mouse-face highlight
                    help-echo <span style="color: #228b22;">"mouse-1: click to return"</span>))))
</pre>
</div>

<pre class="example">
pydoc-insert-back-link
</pre>

<p>
Ok, finally we remake the pydoc function. 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">*pydoc-current*</span> nil
 <span style="color: #228b22;">"Stores current pydoc command"</span>)

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">*pydoc-last*</span> nil
 <span style="color: #228b22;">"Stores the last pydoc command"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc</span> (name)
  <span style="color: #228b22;">"Display pydoc information for NAME in a buffer named *pydoc*."</span>
  (interactive <span style="color: #228b22;">"sName of function or module: "</span>)

  (switch-to-buffer-other-window <span style="color: #228b22;">"*pydoc*"</span>)
  (setq buffer-read-only nil)
  (erase-buffer)
  (insert (shell-command-to-string (format <span style="color: #228b22;">"python -m pydoc %s"</span> name)))
  (goto-char (point-min))

  ;; <span style="color: #ff0000; font-weight: bold;">save </span>
  (<span style="color: #8b0000;">when</span> *pydoc-current*
      (setq *pydoc-last* *pydoc-current*))
  (setq *pydoc-current* name)


  (<span style="color: #8b0000;">save-excursion</span>
    (pydoc-get-name)
    (pydoc-make-url-links)
    (pydoc-make-file-link)
    (pydoc-make-package-links)
    (pydoc-colorize-functions)
    (pydoc-insert-back-link))

  ;; <span style="color: #ff0000; font-weight: bold;">make read-only and press q to quit</span>
  (setq buffer-read-only t)
  (use-local-map (copy-keymap org-mode-map))
  (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer)))

  (font-lock-mode))
</pre>
</div>

<pre class="example">
pydoc
</pre>

<p>
Now, we get a much more functional pydoc:
</p>


<div class="figure">
<p><img src="/media/2014-12-20-A-new-mode-for-Python-documentation/pydoc-enhanced-jasp.png"> 
</p>
<p><span class="figure-number">Figure 2:</span> Annotated screenshot</p>
</div>

<p>
and with the colorized function names:
</p>


<div class="figure">
<p><img src="/media/2014-12-20-A-new-mode-for-Python-documentation/pydoc-potcar.png"> 
</p>
</div>

<p>
Admittedly, there seems to be a lot of boilerplate code for propertizing the strings, but it doesn't seem too bad. I will probably use this documentation tool this spring, so maybe I will think of new functionality to add to pydoc. Any ideas?
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/20/A-new-mode-for-Python-documentation.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Selective auto-capitalization in org-buffers]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers" />
    <id>http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers</id>
    <updated>2014-12-03T12:20:24Z</updated>
    <published>2014-12-03T12:20:24Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Selective auto-capitalization in org-buffers]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers"><![CDATA[



<p>
I have been using auto-capitalize.el for a short time to automatically capitalize the beginning of sentences. I mostly like what it does, but in org-mode I tend to write short code blocks while still in org-mode, and it is pretty irritating for auto-capitalize to "fix" the capitalization of your code. Of course, I can type C-c ' to edit the block in its native mode, but I do not always want to do that.
</p>

<p>
Below, I illustrate an approach to turn off auto-capitalize-mode when the cursor is inside a code-block. Basically, we write a function that checks if you are in a src-block, and if auto-capitalize is on, turn it off. If you are not in the code-block, we turn auto-capitalize on if it is not on. Then we hook the function into post-command-hook, which will run it after every emacs command, including cursor movements.
</p>

<p>
Here is that code:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">dwiw-auto-capitalize</span> ()
  (<span style="color: #8b0000;">if</span> (org-in-block-p '(<span style="color: #228b22;">"src"</span>))
      (<span style="color: #8b0000;">when</span> auto-capitalize
        (auto-capitalize-mode -1))
    (<span style="color: #8b0000;">unless</span> auto-capitalize
      (auto-capitalize-mode 1))))

(add-hook 'post-command-hook 'dwiw-auto-capitalize)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">dwiw-auto-capitalize</td>
</tr>
</tbody>
</table>

<p>
It works! Now the minor mode turns on and off depending on where the cursor is in my org document.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/03/Selective-auto-capitalization-in-org-buffers.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Machine-gradable quizzes in emacs+org-modex]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex" />
    <id>http://jkitchin.github.io/blog/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex</id>
    <updated>2014-11-23T16:49:52Z</updated>
    <published>2014-11-23T16:49:52Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org" />
    <category scheme="http://jkitchin.github.io/blog" term="education" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Machine-gradable quizzes in emacs+org-modex]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex"><![CDATA[



<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/01/01/Interactive-quizzes-with-feedback-in-org-mode/">post</a> , we considered interactive quizzes in emacs and org-mode. Here we consider a variation of that idea with the aim of creating a machine-gradable quiz, i.e. a modern version of a scantron.
</p>

<p>
The idea is simple, we will let each question be represented by an org headline, and the choices will be clickable links that store the answer as a property in the headline. Each headline will have a unique id. The grading key will contain these ids and the correct answer, and a function will determine if the right answer was selected for each question.
</p>

<p>
Here is a simple link that will store the value of the link as a property. Note that the path must be at least two characters long to be recognized as a link, unless you wrap the link in double brackets. We will have the link insert a comment to indicate to the user what they chose. We do that because the PROPERTIES drawer is usually hidden, and it is not obvious it was changed.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"mc"</span> 
 (<span style="color: #8b0000;">lambda</span> (link)
   (<span style="color: #8b0000;">save-restriction</span>
     (org-narrow-to-subtree)
     (goto-char (point-max))
     (insert (concat
              (<span style="color: #8b0000;">unless</span> (bolp) <span style="color: #228b22;">"\n"</span>)
              (format <span style="color: #228b22;">"# you chose %s"</span> link))))
       
   (org-entry-put (point) <span style="color: #228b22;">"ANSWER"</span> link)))
</pre>
</div>

<p>
Next, we add a subheading with some questions to test the link.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Some questions</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><a id="ID-19C7BA30-A761-4C94-9F3B-E6010E263949" name="ID-19C7BA30-A761-4C94-9F3B-E6010E263949"></a><span class="section-number-3">1.1</span> question 1</h3>
<div class="outline-text-3" id="text-1-1">
<p>
What is 2 + 2?
</p>

<p>
<a href="a">a</a> 1
</p>

<p>
<a href="b">b</a> 2
</p>

<p>
<a href="c">c</a> 4
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><a id="ID-38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9" name="ID-38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"></a><span class="section-number-3">1.2</span> question 2</h3>
<div class="outline-text-3" id="text-1-2">
<p>
What is 2 - 2?
</p>

<p>
<a href="a">a</a> 0
</p>

<p>
<a href="b">b</a> 2
</p>

<p>
<a href="c">c</a> 4
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Grading</h2>
<div class="outline-text-2" id="text-2">
<p>
We will store an alist of id and answer for each problem. To grade, we simple map over the alist, go to the section with the id, and compare the answers. When the answer is correct, we save a point, and when not, no point. We can use the org-mode machinery to jump to the problems and get the stored answer. We put some feedback at the end of the file to see what was right, and what was wrong.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((key '((<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>)
              (<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>)))
       (MAX (length key))
       (points 0)
       (answer))
  
  (<span style="color: #8b0000;">dolist</span> (tup key)
    (<span style="color: #8b0000;">save-excursion</span>
      (org-open-link-from-string
       (format <span style="color: #228b22;">"id:%s"</span> (car tup)))
      (setq answer (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>))
      (<span style="color: #8b0000;">if</span> (string= answer (cdr tup))
          (<span style="color: #8b0000;">progn</span>
            (setq points (+ 1 points))
            (goto-char (point-max))
            (insert (format <span style="color: #228b22;">"# id:%s: %s correct\n"</span> (car tup) answer)))
        (goto-char (point-max))
        (insert (format <span style="color: #228b22;">"# id:%s: %s wrong (%s is correct)\n"</span>
                        (car tup)
                        answer
                        (cdr tup))))))
  (goto-char (point-max))
  (insert (format
           <span style="color: #228b22;">"#+GRADE: %s"</span> (/ (float points) (float MAX)))))
</pre>
</div>

<p>
That works pretty well. I need to think about how to codify the key, since this would usually be stored in some file. We would also need to wrap the code block in a function that we could call easily. The org-id key is easy, but not very readable. It would make it easy to keep a database of these problems though. 
</p>
<p>
Just for completeness, I want to save the key to a file, and use it. We simply write the alist in a file. Here are the contents, which are tangled to key.el. One alternative might be to have a solution copy of the quiz which has the answers in it, and we read the answers from the file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>)
 (<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>))
</pre>
</div>

<p>
Now, we read it in like this. The rest of the code is basically the same.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((key (<span style="color: #8b0000;">with-temp-buffer</span> 
              (insert-file-contents <span style="color: #228b22;">"key.el"</span>)
              (read (current-buffer))))
       (MAX (length key))
       (points 0)
       (answer))
  
  (<span style="color: #8b0000;">dolist</span> (tup key)
    (<span style="color: #8b0000;">save-excursion</span>
      (org-open-link-from-string
       (format <span style="color: #228b22;">"id:%s"</span> (car tup)))
      (setq answer (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>))
      (<span style="color: #8b0000;">if</span> (string= answer (cdr tup))
          (<span style="color: #8b0000;">progn</span>
            (setq points (+ 1 points))
            (goto-char (point-max))
            (insert (format <span style="color: #228b22;">"# id:%s: %s correct\n"</span> (car tup) answer)))
        (goto-char (point-max))
        (insert (format <span style="color: #228b22;">"# id:%s: %s wrong (%s is correct)\n"</span>
                        (car tup)
                        answer
                        (cdr tup))))))
  (goto-char (point-max))
  (insert (format
           <span style="color: #228b22;">"#+GRADE: %s"</span> (/ (float points) (float MAX)))))
</pre>
</div>

<p>
It is probably much easier to have a solution version of the quiz, and generate the key from it. For example, we can collect the ID and ANSWER from the problems in this file like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((key '()))
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let</span> ((id) (ans))
       (<span style="color: #8b0000;">when</span> (and
              (setq id (org-entry-get (point) <span style="color: #228b22;">"ID"</span>))
              (setq ans (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>)))
         (add-to-list 'key (cons id ans))))))
key)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>)
 (<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>))
</pre>
</div>

<p>
So, if we had a master solution file, we could read the key from there. That is the way to do this.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Accessing web of science entry, citing and related articles from a doi in emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs" />
    <id>http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</id>
    <updated>2014-11-05T10:55:03Z</updated>
    <published>2014-11-04T21:18:10Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="org-ref" />
    <summary type="html"><![CDATA[Accessing web of science entry, citing and related articles from a doi in emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs"><![CDATA[



<p>
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with <a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=4DwqzHSXl8YdqGjGQ2z&preferencesSaved=">Web Of Science</a> , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API <a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf">http://wokinfo.com/media/pdf/OpenURL-guide.pdf</a> to make links to the things I am interested in here. Based on that document, here are three links based on a <a href="10.1021/jp047349j">10.1021/jp047349j</a> that take you to different Web Of Science (WOS) pages.
</p>


<ol class="org-ol">
<li>go to article in WOS: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j</a> 
</li>
<li>citing articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes</a> 
</li>
<li>related articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes</a> 
</li>
</ol>

<p>
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos</span> (doi)
  <span style="color: #228b22;">"Open Web of Science entry for DOI"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (format
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/%s"</span> doi)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-citing</span> (doi)
  <span style="color: #228b22;">"Open Web of Science citing articles entry. May be empty if none are found"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
    doi
    <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"</span>)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-related</span> (doi)
  <span style="color: #228b22;">"Open Web of Science related articles page."</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
           doi
           <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"</span>)))
</pre>
</div>

<pre class="example">
doi-utils-wos-related
</pre>

<p>
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things <a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/">here</a> about Scopus and issues with ISI that I note for reference to future me.
</p>

<p>
Some of these are now included in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">jmax-bibtex.el</a> and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[words - some interesting utilities for text in emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/11/03/words-some-interesting-utilities-for-text-in-emacs" />
    <id>http://jkitchin.github.io/blog/2014/11/03/words-some-interesting-utilities-for-text-in-emacs</id>
    <updated>2014-11-04T09:20:15Z</updated>
    <published>2014-11-03T11:31:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[words - some interesting utilities for text in emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/11/03/words-some-interesting-utilities-for-text-in-emacs"><![CDATA[


<p>
Recently I <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/">posted</a> about an org-link with a menu. Here I extend the idea to a command that will do approximately the same thing. The idea is a command called words that will be run interactively. It will grab the word at point, or operate on a selected region, and then offer a menu to lookup the definition, find it in a thesaurus, google it, etc&#x2026; We structure the code so you can add functions to it later, without directly modifying this code. The only limitation of this code is that the functions must have a signature with no arguments. That does not seem terribly limiting, as we can check for a region, and use it if we want (see the words-google function).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-dictionary</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://dictionary.reference.com/browse/%s?s=t"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-thesaurus</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.thesaurus.com/browse/%s"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-google</span> ()
  (interactive)  
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.google.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))


(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">words-funcs</span> '()
 <span style="color: #228b22;">"functions to run in `</span><span style="color: #cd0000;">words</span><span style="color: #228b22;">'. Each entry is a list of (key menu-name function)."</span>)

(setq words-funcs
  '((<span style="color: #228b22;">"d"</span> <span style="color: #228b22;">"ictionary"</span> words-dictionary)
    (<span style="color: #228b22;">"t"</span> <span style="color: #228b22;">"hesaurus"</span> words-thesaurus)
    (<span style="color: #228b22;">"g"</span> <span style="color: #228b22;">"oogle"</span> words-google)))
 

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words</span> ()
  (interactive)
   (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     words-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
   (<span style="color: #8b0000;">let</span> ((input (read-char-exclusive)))
     (funcall
      (elt 
       (assoc
        (char-to-string input) words-funcs)
       2))))
</pre>
</div>

<pre class="example">
words
</pre>

<p>
This works nicely. Now, let us add a new function that looks up the word or selection on twitter. We just define a new function, and add the menu selection to the words-func variable. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-twitter</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"https://twitter.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"w"</span> <span style="color: #228b22;">"twitter"</span> words-twitter)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">d</td>
<td class="left">ictionary</td>
<td class="left">words-dictionary</td>
</tr>

<tr>
<td class="left">t</td>
<td class="left">hesaurus</td>
<td class="left">words-thesaurus</td>
</tr>

<tr>
<td class="left">g</td>
<td class="left">oogle</td>
<td class="left">words-google</td>
</tr>

<tr>
<td class="left">w</td>
<td class="left">twitter</td>
<td class="left">words-twitter</td>
</tr>
</tbody>
</table>

<p>
Finally, the most complicated idea: spelling and grammar. I know there is flyspell, and such, but they are build on an ancient dictionary. Here, for fun, we explore a web api. This next function is not a trivial one, and I will not explain it here beyond saying it sends a selection of text to a url, gets an xml response back, and that response is parsed and printed to a buffer by this function. The main point is to illustrate we can do interesting things with a selection of text!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-atd</span> ()
  <span style="color: #228b22;">"Send paragraph at point to After the deadline for spell and grammar checking."</span>
  (interactive)
  
  (<span style="color: #8b0000;">let*</span> ((url-request-method <span style="color: #228b22;">"POST"</span>)
         (url-request-data (format
                            <span style="color: #228b22;">"key=some-random-text-&amp;data=%s"</span>
                            (url-hexify-string
                             (thing-at-point 'paragraph))))
         (xml  (<span style="color: #8b0000;">with-current-buffer</span>
                   (url-retrieve-synchronously
                    <span style="color: #228b22;">"http://service.afterthedeadline.com/checkDocument"</span>)
                 (xml-parse-region url-http-end-of-headers (point-max))))
         (results (car xml))
         (errors (xml-get-children results 'error)))
    
    (switch-to-buffer-other-frame <span style="color: #228b22;">"*ATD*"</span>)
    (erase-buffer)
    (<span style="color: #8b0000;">dolist</span> (err errors)
      (<span style="color: #8b0000;">let*</span> ((children (xml-node-children err))
             ;; <span style="color: #ff0000; font-weight: bold;">for some reason I could not get the string out, and had to do this.</span>
             (s (car (last (nth 1 children))))
             ;; <span style="color: #ff0000; font-weight: bold;">the last/car stuff doesn't seem right. there is probably</span>
             ;; <span style="color: #ff0000; font-weight: bold;">a more idiomatic way to get this</span>
             (desc (last (car (xml-get-children children 'description))))
             (type (last (car (xml-get-children children 'type))))
             (suggestions (xml-get-children children 'suggestions))
             (options (xml-get-children (xml-node-name suggestions) 'option))
             (opt-string  (mapconcat
                           (<span style="color: #8b0000;">lambda</span> (el)
                             (<span style="color: #8b0000;">when</span> (listp el)
                               (car (last el))))
                           options
                           <span style="color: #228b22;">" "</span>)))

        (insert (format <span style="color: #228b22;">"** %s ** %s</span>
<span style="color: #228b22;">Description: %s</span>
<span style="color: #228b22;">Suggestions: %s</span>

<span style="color: #228b22;">"</span> s type desc opt-string))))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"s"</span> <span style="color: #228b22;">"spell/grammar"</span> words-atd)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<pre class="example">
words-atd
</pre>

<p>
My final words menu looks like: 
</p>

<div class="figure">
<p><img src="/media/2014-11-03-words---some-interesting-utilities-for-text-in-emacs/final-menu.png"> 
</p>
</div>

<p>
If I have the cursor in the previous paragraph, run the words command and select "s" I get a buffer with these contents:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> flyspell ** (spelling)</h2>
<div class="outline-text-2" id="text-1">
<p>
Description: (Spelling)
Suggestions: flywheel flyball
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> are build on ** (grammar)</h2>
<div class="outline-text-2" id="text-2">
<p>
Description: (Auxiliary Verb Agreement)
Suggestions: are built on
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> api ** (spelling)</h2>
<div class="outline-text-2" id="text-3">
<p>
Description: (Spelling)
Suggestions: app ape apt ai ami
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> url ** (spelling)</h2>
<div class="outline-text-2" id="text-4">
<p>
Description: (Spelling)
Suggestions: urn ure curl hurl burl
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> xml ** (spelling)</h2>
<div class="outline-text-2" id="text-5">
<p>
Description: (Spelling)
Suggestions: xl ml
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-6">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> an xml ** (grammar)</h2>
<div class="outline-text-2" id="text-7">
<p>
Description: (Wrong article)
Suggestions: a xml
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-8">
<p>
Description: (Hidden Verbs)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> is parsed ** (grammar)</h2>
<div class="outline-text-2" id="text-9">
<p>
Description: (Passive voice)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-10">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-11">
<p>
Description: (Hidden Verbs)
Suggestions: 
#+END<sub>EXAMPLE</sub>
</p>

<p>
It might be nice to link back to those words, so you could click on them and fix them, but that is a beyond today's goal. In summary, today we looked at a framework to create a user-modifiable menu of commands that are launched from a single command. Here we called the command words, and then built up some different things we might want to do with the word or selection at point. While you can of course just remember the individual commands, remembering one command and then being prompted might have some advantages.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/03/words---some-interesting-utilities-for-text-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using Pymacs to integrate Python into Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs" />
    <id>http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs</id>
    <updated>2014-10-19T09:33:08Z</updated>
    <published>2014-10-19T09:33:08Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Using Pymacs to integrate Python into Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs"><![CDATA[


<p>
<a href="https://github.com/pinard/Pymacs">Pymacs</a> is a project that aims to integrate Python into Emacs, and vice versa. In this post, I am going to examine the Python into Emacs integration. I cloned the git repository, ran make install, and setup my init.el file like this, as suggested in the manual.
</p>

<pre class="example">
(add-to-list 'load-path (expand-file-name "Pymacs" starter-kit-dir))
(require 'pymacs)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
</pre>

<p>
Pymacs provides some mapping of Python modules to emacs-lisp functions. You load modules in emacs-lisp, and then a dash-mangled version of the Python functions are available, <i>in emacs lisp</i>. Here is an example. We will load numpy, and find the maximum element of an array. For comparison, here is the Python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.max(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Now, the corresponding emacs version using Pymacs.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(np-max (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Neat! The dot notation is basically replaced with dash notation, and we use a lisp list as the argument instead of an array. Otherwise, this looks almost identical. Now, let us consider something more complicated, and get the determinant of the array. We add a PREFIX to the load statement for numpy.linalg similar to what we would do in Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> numpy.linalg <span style="color: #8b0000;">as</span> la
<span style="color: #8b0000;">print</span> la.det(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
And in emacs-lisp:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(pymacs-load <span style="color: #228b22;">"numpy.linalg"</span> <span style="color: #228b22;">"la-"</span>)
(la-det (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
We can call functions from matplotlib to make a figure. For example:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"matplotlib.pyplot"</span> <span style="color: #228b22;">"plt-"</span>)
(<span style="color: #8b0000;">let*</span> ((x  '(1 2 3 4))
       (y  (mapcar (<span style="color: #8b0000;">lambda</span> (z) (* z z)) x)))
  (plt-plot x y)
  (plt-xlabel <span style="color: #228b22;">"x values"</span>)
  (plt-ylabel <span style="color: #228b22;">"x$^2$"</span>)
  (plt-savefig <span style="color: #228b22;">"plt-pymacs.png"</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-10-19-Using-Pymacs-to-integrate-Python-into-Emacs/plt-pymacs.png"> 
</p>
</div>

<p>
This was a little subtle. It was necessary to save the lists as variables, and use the variables in the plot command.
</p>

<p>
I am not sure what this offers over just having a Python block present in org-mode though. Maybe it is more useful in emacs-lisp libraries where you want to bring in some numerical analysis. Or if you have some custom library of Python you would like to use in elisp. Here is a highly contrived example. Suppose we have a Python module with this special function that converts an argument to "J":
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">special_func</span>(x):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">"J"</span>
</pre>
</div>

<p>
In Python, we might use it like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> my_python <span style="color: #8b0000;">as</span> mp
<span style="color: #8b0000;">print</span> [mp.special_func(x) <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>]]
</pre>
</div>

<pre class="example">
['J', 'J', 'J']
</pre>

<p>
We can import the module, and use the function in emacs-lisp too. The underscore in the function name is turned into a dash, which is a little confusing, but it works otherwise.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"my_python"</span> <span style="color: #228b22;">"mp-"</span>)
(mapcar 'mp-special-func '(1 2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">J</td>
<td class="left">J</td>
<td class="left">J</td>
</tr>
</tbody>
</table>


<p>
It does not seem possible to do everything though. For example, It is not clear how to pass functions through either side. For example, this does not work for fsolve, although it seems like it should. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"scipy.optimize"</span> <span style="color: #228b22;">"so-"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">objective</span> (x)
  (- x 5))

(so-fsolve 'objective 3)
</pre>
</div>

<p>
I get an error like this:
</p>
<pre class="example">
Pymacs loading scipy.optimize...done
pymacs-report-error: Python: Emacs: "(wrong-type-argument number-or-marker-p (pymacs-python . 47))"
</pre>

<p>
The Python equivalent is here:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(x):
    <span style="color: #8b0000;">return</span> x - <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>

<span style="color: #8b0000;">print</span> fsolve(objective, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
</pre>
</div>

<pre class="example">
[ 5.]
</pre>

<p>
There is an open question on StackOverflow <a href="http://stackoverflow.com/questions/25471580/can-you-use-a-function-as-an-argument-to-a-python-function-in-pymacs">here</a> on this issue. Overall, I find the project very interesting. It would be awesome if you could extend emacs more easily in other languages, especially scripting languages such as Python that have numerical and plotting capabilities. Right now, this is possible in limited ways. For example, Xah Lee describes an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">approach</a> where an arbitrary script can take data on stdin, process it, and output the results to stdout. Emacs can capture this and use it to modify the buffer. This uses the <code>shell-command</code> features in Emacs. These scripts could be written in Python, Perl, Ruby, etc&#x2026; This seems like a simpler and more flexible approach, except that it requires creating the shell commands and putting them on the executable path (as opposed to having Python modules on a PYTHONPATH). These lack the deep integration of documentation you get with emacs-lisp and Python functions.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A git status Emacs modeline]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/19/A-git-status-Emacs-modeline" />
    <id>http://jkitchin.github.io/blog/2014/09/19/A-git-status-Emacs-modeline</id>
    <updated>2014-09-19T09:36:21Z</updated>
    <published>2014-09-19T09:36:21Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="git" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[A git status Emacs modeline]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/19/A-git-status-Emacs-modeline"><![CDATA[


<p>
I am using git more and more in Emacs, and I would like a way to know the status of the git repo I am working in by looking at the modeline. I know about <a href="https://github.com/magit/magit">magit</a> , and other git modes, but none of them provide something as easy as useful as say <a href="https://github.com/magicmonty/bash-git-prompt">bash-git-prompt</a> in the bash shell, which is to say I do not want to run a command to see the status (I might as well be in the shell then). Part of this need comes from a project with hundreds of git repos in it, and I want convenient status when I open any one of them.
</p>

<p>
Here, I want to emulate the bash-git-prompt feature in the Emacs modeline where it will show you when you are in a git repo, and then some basic information like what branch you are on, the number of untracked, modified files, and the commit status with respect to a remote. First, we only want this when we are in a git repo. We can check for that like this. The command in this block returns a string that starts with fatal when not in a git repo.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(not (string-match <span style="color: #228b22;">"^fatal"</span> (shell-command-to-string <span style="color: #228b22;">"git rev-parse --git-dir"</span>)))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Let us wrap that in a nice function so we can use it later..
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">in-git-p</span> ()
  (not (string-match <span style="color: #228b22;">"^fatal"</span> (shell-command-to-string <span style="color: #228b22;">"git rev-parse --git-dir"</span>))))

(in-git-p)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Next, we would like to know how many untracked, modified and other (e.g. unmerged, deleted, etc&#x2026;) files we have. We can get this from  <code>git status --porcelain</code>. I am going to set these to be red if they are not zero, so they stand out, and be green otherwise. We will also store a list of each file type so we can make a tooltip on the counter to see what is there.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">git-parse-status</span> ()
  (interactive)
  (<span style="color: #8b0000;">let</span> ((U 0)   ; <span style="color: #ff0000; font-weight: bold;">untracked files</span>
        (M 0)   ; <span style="color: #ff0000; font-weight: bold;">modified files</span>
        (O 0)   ; <span style="color: #ff0000; font-weight: bold;">other files</span>
        (U-files <span style="color: #228b22;">""</span>)
        (M-files <span style="color: #228b22;">""</span>)
        (O-files <span style="color: #228b22;">""</span>))
    (<span style="color: #8b0000;">dolist</span> (line (split-string
                   (shell-command-to-string <span style="color: #228b22;">"git status --porcelain"</span>)
                   <span style="color: #228b22;">"\n"</span>))
      (<span style="color: #8b0000;">cond</span>

       ;; <span style="color: #ff0000; font-weight: bold;">ignore empty line at end</span>
       ((string= <span style="color: #228b22;">""</span> line) nil)

       ((string-match <span style="color: #228b22;">"^\\?\\?"</span> line)
        (setq U (+ 1 U))
        (setq U-files (concat U-files <span style="color: #228b22;">"\n"</span> line)))

       ((string-match <span style="color: #228b22;">"^ M"</span> line)
        (setq M (+ 1 M))
        (setq M-files (concat M-files <span style="color: #228b22;">"\n"</span> line))
        )

       (t
        (message <span style="color: #228b22;">"detected other in %s"</span> line)
        (setq O (+ 1 O))
        (setq O-files (concat O-files <span style="color: #228b22;">"\n"</span> line)))))
      
    ;; <span style="color: #ff0000; font-weight: bold;">construct propertized string</span>
    (concat
     <span style="color: #228b22;">"("</span>
     (propertize 
      (format <span style="color: #228b22;">"M:%d"</span> M)
      'face (list '<span style="color: #cd0000;">:foreground</span> (<span style="color: #8b0000;">if</span> (&gt; M 0)
                                   <span style="color: #228b22;">"red"</span>
                                 <span style="color: #228b22;">"forest green"</span>))
      'help-echo M-files)
     <span style="color: #228b22;">"|"</span>
     (propertize 
      (format <span style="color: #228b22;">"U:%d"</span> U)
      'face (list '<span style="color: #cd0000;">:foreground</span> (<span style="color: #8b0000;">if</span> (&gt; U 0)
                                   <span style="color: #228b22;">"red"</span>
                                 <span style="color: #228b22;">"forest green"</span>))
      'help-echo U-files)
     <span style="color: #228b22;">"|"</span>
     (propertize 
      (format <span style="color: #228b22;">"O:%d"</span> O)
      'face (list '<span style="color: #cd0000;">:foreground</span> (<span style="color: #8b0000;">if</span> (&gt; O 0)
                                   <span style="color: #228b22;">"red"</span>
                                 <span style="color: #228b22;">"forest green"</span>))
      'help-echo O-files)                   
      <span style="color: #228b22;">") "</span>)))

(git-parse-status)
</pre>
</div>

<pre class="example">
(M:1|U:2|O:0) 
</pre>

<p>
Finally, let us get the branch we are on, and the commits with respect to a remote. We can do that like this. We use some unicode characters to indicate what direction things go, e.g. an up arrow to indicate you need to push, and a down arrow to indicate you should pull.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">git-remote-status</span> ()
  (interactive)
  (<span style="color: #8b0000;">let*</span> (;; <span style="color: #ff0000; font-weight: bold;">get the branch we are on.</span>
         (branch (s-trim
                  (shell-command-to-string
                   <span style="color: #228b22;">"git rev-parse --abbrev-ref HEAD"</span>)))
         ;; <span style="color: #ff0000; font-weight: bold;">get the remote the branch points to.</span>
         (remote (s-trim
                  (shell-command-to-string
                   (format <span style="color: #228b22;">"git config branch.%s.remote"</span> branch))))
         (remote-branch (s-trim
                         (shell-command-to-string
                          <span style="color: #228b22;">"git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)"</span>)))
         (commits (split-string
                   (s-trim
                    (shell-command-to-string
                     (format
                      <span style="color: #228b22;">"git rev-list --count --left-right HEAD...%s"</span>
                      remote-branch)))))
         (local (nth 0 commits))
         (remotes (nth 1 commits)))
    (concat
     <span style="color: #228b22;">"["</span>
     (propertize
      (format <span style="color: #228b22;">"%s"</span> branch)
      'face (list <span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"magenta"</span>))
     <span style="color: #228b22;">"|"</span>
     (format <span style="color: #228b22;">"&#8593;%s|&#8595;%s"</span> local remotes)
     <span style="color: #228b22;">"]"</span>))) 

(git-remote-status)
</pre>
</div>

<pre class="example">
[source|↑0|↓0]
</pre>

<p>
Now, we can finally put this together in a little minor mode. We add an element to the mode-line-format variable that evaluates those functions. When we turn off the minor mode, we remove the element from the modeline.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">define-minor-mode</span> <span style="color: #8b2323;">git-mode</span>
  <span style="color: #228b22;">"minor mode to put git repo status in modeline"</span>
  nil nil nil
  (<span style="color: #8b0000;">let</span> ((git-modeline '(<span style="color: #cd0000;">:eval</span> (<span style="color: #8b0000;">if</span> (not (in-git-p))
                                  <span style="color: #228b22;">""</span>
                                (concat 
                                 (git-remote-status)
                                 (git-parse-status))))))
    (<span style="color: #8b0000;">if</span> git-mode
        ;; <span style="color: #ff0000; font-weight: bold;">put in modeline</span>
        (push git-modeline mode-line-format)
      ;; <span style="color: #ff0000; font-weight: bold;">remove from modeline</span>
      (setq mode-line-format
            (-remove (<span style="color: #8b0000;">lambda</span> (x)
                       (equal x git-modeline))                                  
                     mode-line-format)))))
</pre>
</div>

<p>
This leads to a modeline that looks like this (when my mouse is hovered over the M):
</p>


<div class="figure">
<p><img src="/media/2014-09-19-A-git-status-Emacs-modeline/git-modeline.png"> 
</p>
</div>

<p>
This seems to have some performance issue, since pretty much everytime I type a key, it updates the modeline, and runs git. That is too often. Let us redefine the mode here so we have a minimum time between updates, say 15 seconds. We will store the last time updated, and the last value of the mode-line. Then each time the modeline updates, if the time since the last update is greater than our interval, then we will run the git commands. Otherwise, we just use the old modeline value.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">git-modeline-last-update</span> (float-time) <span style="color: #228b22;">"Last time we updated"</span>)
(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">git-modeline-update-interval</span> 15 <span style="color: #228b22;">"Minimum time between update in seconds"</span>)
(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">git-modeline</span> <span style="color: #228b22;">""</span> <span style="color: #228b22;">"Last value of the modeline"</span>)

(<span style="color: #8b0000;">define-minor-mode</span> <span style="color: #8b2323;">git-mode</span>
  <span style="color: #228b22;">"minor mode to put git repo status in modeline"</span>
  nil nil nil
  (<span style="color: #8b0000;">let</span> ((git-modeline '(<span style="color: #cd0000;">:eval</span> (<span style="color: #8b0000;">if</span>
                                  (&gt; (- (float-time) git-modeline-last-update)
                                     git-modeline-update-interval)
                                  ;; <span style="color: #ff0000; font-weight: bold;">we are updating                              </span>
                                  (setq git-modeline
                                        (<span style="color: #8b0000;">if</span> (not (in-git-p))
                                            <span style="color: #228b22;">""</span>                                   
                                          (setq  git-modeline-last-update (float-time))
                                          (concat 
                                           (git-remote-status)
                                           (git-parse-status))))
                                
                              ;; <span style="color: #ff0000; font-weight: bold;">use last value of the modeline</span>
                              git-modeline))))
    (<span style="color: #8b0000;">if</span> git-mode
        ;; <span style="color: #ff0000; font-weight: bold;">put in modeline</span>
        (push git-modeline mode-line-format)
      ;; <span style="color: #ff0000; font-weight: bold;">remove from modeline</span>
      (setq mode-line-format
            (-remove (<span style="color: #8b0000;">lambda</span> (x)
                       (equal x git-modeline))                                  
                     mode-line-format)))))
</pre>
</div>

<p>
That does it I think. I don't have any performance issues here now. I have not tested this super thoroughly on many git repos, but it seems to be pretty consistent and correct so far. The remote status code is where there is the most probability for issues. I still do not know that part of git very well.  I wonder if there is a more elegant solution than this, perhaps an idle timer. I notice a little lag in updating the data when I switch to another git repo. That might be a little confusing one day.
</p>


<p>
Otherwise, this seems like a pretty nice solution so far. There are still some things that would be nice to see on here. For example, a pop-up menu on the modeline to switch branches, push or pull, and with actions for the files, e.g. add/commit, etc&#x2026; Those do not seem to hard to </p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/19/A-git-status-Emacs-modeline.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Colorized text in Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/14/Colorized-text-in-Emacs" />
    <id>http://jkitchin.github.io/blog/2014/09/14/Colorized-text-in-Emacs</id>
    <updated>2014-09-14T14:33:32Z</updated>
    <published>2014-09-14T14:23:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Colorized text in Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/14/Colorized-text-in-Emacs"><![CDATA[



<p>
As I continue investigating Emacs + org-mode as a platform for creating applications, it has come up a few times that it would be useful to display colored text. For example, in a summary report of a git repo, you might want to see some information in red, e.g. if you have uncommitted changes, and some information in green, e.g. the repo is clean and consistent with a remote.
</p>

<p>
We can set colors on a string in Emacs like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(propertize <span style="color: #228b22;">"Red Text"</span> 'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>))
</pre>
</div>

<p>
The only tricky part is that we need to insert the text into a font-locked buffer to see it. That is also a tad tricky to illustrate in a code block, so here is a way to try it:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(re-search-forward <span style="color: #228b22;">"-&gt; "</span>)
(insert
  (propertize <span style="color: #228b22;">"Red Text"</span> 'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>)))
</pre>
</div>

<p>
-&gt; Red Text
</p>

<p>
The red text does not show in the HTML post, so this is a screenshot of what it looks like in my buffer:
</p>


<div class="figure">
<p><img src="/media/2014-09-14-Colorized-text-in-Emacs/red-text.png"> 
</p>
</div>

<p>
Now, here is how we might use this in a summary report. Say we have a git repo, and we want to know various facts about it. We can get information about tracked/ untracked and modified files like this:
</p>

<div class="org-src-container">

<pre class="src src-sh">git status --porcelain
</pre>
</div>
<pre class="example">
 M _blog/blog.html
 M _blog/blog.org
A  _blog/images/red-text.png
</pre>

<p>
This shows we have two tracked, but modified files, and on added but not committed file. We can use this code to show if we have any untracked files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((n 0) s)
  (<span style="color: #8b0000;">dolist</span> (line (split-string
                 (shell-command-to-string <span style="color: #228b22;">"git status --porcelain"</span>)
                 <span style="color: #228b22;">"\n"</span>))
    (<span style="color: #8b0000;">when</span> (string-match <span style="color: #228b22;">"^\\?\\?"</span> line)
      (setq n (+ 1 n))))
  (<span style="color: #8b0000;">if</span> (&gt; n 0)
      (setq s (propertize (format <span style="color: #228b22;">"%s untracked files"</span> n)
                          'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>)))
    (setq s (propertize <span style="color: #228b22;">"No untracked files"</span> 
                        'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"forest green"</span>))))
  (re-search-forward <span style="color: #228b22;">"-&gt;"</span>)
  (insert s))
</pre>
</div>

<p>
-&gt;No untracked files
</p>

<p>
In HTML (i.e. the blog post) you cannot really see the green text, so here is a screenshot illustrating it.
<img src="/media/2014-09-14-Colorized-text-in-Emacs/git-untracked-files.png"> 
</p>

<p>
Similarly, we can check for modified files. We add a wrinkle and add a tooltip like text that shows the output of the git command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((n 0)
      (output (shell-command-to-string <span style="color: #228b22;">"git status --porcelain"</span>))
      s)
  (<span style="color: #8b0000;">dolist</span> (line (split-string
                 output
                 <span style="color: #228b22;">"\n"</span>))
    (<span style="color: #8b0000;">when</span> (string-match <span style="color: #228b22;">"^ M"</span> line)
      (setq n (+ 1 n))))
  (<span style="color: #8b0000;">if</span> (&gt; n 0)
      (setq s (propertize (format <span style="color: #228b22;">"%s modified files"</span> n)
                          'help-echo output
                          'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>)))
    (setq s (propertize <span style="color: #228b22;">"No modified files"</span> 
                        'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"forest green"</span>))))
  (re-search-forward <span style="color: #228b22;">"-&gt; "</span>)
  (insert s))
</pre>
</div>

<p>
-&gt; 2 modified files
</p>

<p>
That looks like this in emacs:
</p>


<div class="figure">
<p><img src="/media/2014-09-14-Colorized-text-in-Emacs/git-modified.png"> 
</p>
</div>


<p>
That is the main idea in this post. You can create strings with properties, and use code to determine what they e.g. what color the text is, etc&#x2026; There are lots of properties listed at <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html">http://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html</a> that might be helpful in an application. Here are some previous posts that examined similar ideas.
</p>

<ul class="org-ul">
<li>Read-only text <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/09/13/Make-some-org-sections-read-only/">http://kitchingroup.cheme.cmu.edu/blog/2014/09/13/Make-some-org-sections-read-only/</a> 
</li>

<li>Tool tips: <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/04/12/Tool-tips-on-text-in-Emacs/">http://kitchingroup.cheme.cmu.edu/blog/2013/04/12/Tool-tips-on-text-in-Emacs/</a> 
</li>

<li>Invisible text (this is not exactly a property, but it is similar)
</li>
</ul>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2014/02/06/Invisible-text-in-emacs/">http://kitchingroup.cheme.cmu.edu/blog/2014/02/06/Invisible-text-in-emacs/</a> </p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/14/Colorized-text-in-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Make some org-sections read-only]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only" />
    <id>http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only</id>
    <updated>2014-09-13T13:50:49Z</updated>
    <published>2014-09-13T13:50:49Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Make some org-sections read-only]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only"><![CDATA[


<p>
There are times where I want an org-file to be <i>partly</i> read-only. For example, there might be instructions that should not be modified. In this post we consider how to implement that. For now, we only want an org-section to be read-only, and we will designate those sections by a tag read<sub>only</sub>. Then, the idea is that a hook function would be run when the org-file is loaded, and mark regions of text as read-only before the user can do anything.
</p>

<p>
In Emacs, you can mark a section of text, and set it to have a property of read-only. So, we can just map over the entries, and any heading that is tagged as read<sub>only</sub> can be made read-only!
</p>

<p>
Here we set the first few characters of this buffer to be read-only.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-text-properties 1 8 '(read-only t))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Emacs is semi-serious about what read-only means. You cannot even change properties of read-only text, unless you set inhibit-read-only as a variable.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((inhibit-read-only t))
 (remove-text-properties 1 8 '(read-only t)))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Now, we can map over the entries in this buffer, and set any heading tagged read<sub>only</sub> to actually be that way like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-map-entries (<span style="color: #8b0000;">lambda</span> ()
                   (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
                          (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
                          (end (org-element-property <span style="color: #cd0000;">:end</span> element)))
                     (add-text-properties begin end '(read-only t))))
                 <span style="color: #228b22;">"read_only"</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">t</td>
</tr>
</tbody>
</table>

<p>
To get this to work when org-mode is turned on, we just wrap it in a function, add the function to a hook, and a function to undo the read-only behavior. I found that if I use the end reported by org-element-at-point, it includes the first character of the next section, we take one away from the end to avoid that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-mark-readonly</span> ()
  (interactive)
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
            (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
            (end (org-element-property <span style="color: #cd0000;">:end</span> element)))
       (add-text-properties begin (- end 1) '(read-only t))))
   <span style="color: #228b22;">"read_only"</span>)
 (message <span style="color: #228b22;">"Made readonly!"</span>))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-remove-readonly</span> ()
  (interactive)
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
            (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
            (end (org-element-property <span style="color: #cd0000;">:end</span> element))
            (inhibit-read-only t))
         (remove-text-properties begin (- end 1) '(read-only t))))
     <span style="color: #228b22;">"read_only"</span>))

(add-hook 'org-mode-hook 'org-mark-readonly)
</pre>
</div>

<p>
That seem to be all there is. After executing the code above, when I open this file, the next section is read-only! I can use the other function to remove that if I need to edit it. Score one for Emacs + org-mode!
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Read-only section&#xa0;&#xa0;&#xa0;<span class="tag"><span class="read_only">read_only</span></span></h2>
<div class="outline-text-2" id="text-1">
<p>
This text is so important, it should be read-only.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Editable section</h2>
<div class="outline-text-2" id="text-2">
<p>
You can do what you want here. Like add text.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/13/Make-some-org-sections-read-only.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
</feed>
