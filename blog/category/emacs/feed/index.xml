<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Fri, 09 Dec 2016 20:10:27 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Persistent highlighting in Emacs</title>
      <link>http://jkitchin.github.io/blog/2016/11/10/Persistent-highlighting-in-Emacs</link>
      <pubDate>Thu, 10 Nov 2016 09:16:38 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">ZBwI57UPCGkqvVwVuKvIDBfJBSo=</guid>
      <description>Persistent highlighting in Emacs</description>
      <content:encoded><![CDATA[


<p>
In this <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text/">recent post</a> I showed a way to use org-mode links to color text. The main advantage of that approach is it is explicit markup in the file, so it is persistent and exportable to html. The downside of that approach is you cannot use it in code, since the markup will break the code.
</p>

<p>
An alternative approach is to use overlays to color the text. This allows you to color the text, add annotations as tooltips and to provide a variety of highlighting colors. Overlays are not explicit markup in the file, so it is necessary to think of a way to save them so they can be restored later. We do this by using hook functions to store the overlays in a file-local variable on saving, and a file-local variable to restore the overlays when the file is opened. I bind the primary function `ov-highlighter/body' to a key, in my case hyper-h, which launches a hydra to access the commands.
</p>

<p>
You can find the code here: <a href="https://github.com/jkitchin/scimax/blob/org-9/ov-highlighter.el">https://github.com/jkitchin/scimax/blob/org-9/ov-highlighter.el</a>. Probably around mid-December it will get merged into the master branch.
</p>

<p>
Here is what this looks like in my buffer:
</p>


<p>
<img src="/media/date-10-11-2016-time-09-05-44.png"> 
</p>

<p>
You may want to see the video:
</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/syeRq_LBFns" frameborder="0" allowfullscreen></iframe>

<ol class="org-ol">
<li>blue green pink yellow custom</li>
<li>Put a comment here.</li>
<li>Markup a tpyo.</li>
<li>Get a list of the highlights in the buffer.</li>
</ol>

<p>
These highlights are pretty awesome. They work in code blocks, and comments. They also work in non-org files (only in Emacs of course).
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 5
<span style="color: #BA36A5;">b</span> = 6

<span style="color: #0000FF;">print</span>(a+b)<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">print the sum of a and b</span>
</pre>
</div>

<p>
11
</p>

<p>
Overall, this is pretty handy. You can highlight your own notes, provide feedback to others, etc. without changing the actual text in the document (well, except for the local variables at the end of the buffer, but these are usually in a "comment" that does not affect the document).
</p>


<p>
Here are few limitations though:
</p>
<ol class="org-ol">
<li>You can only edit/change the file in Emacs, and the hook functions have to enabled, or the overlay data will get corrupted. That means a merge conflict can ruin the overlays.</li>
<li>Anyone you share the file with needs to have the ov-highlighter library loaded too. Otherwise they will not see the highlights, and any edits will make the overlay data incorrect.</li>
<li>The highlights do not export from org-mode (although they do work with `htmlize-buffer'!).</li>
</ol>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((html-buffer (htmlize-buffer))
       (html (<span style="color: #0000FF;">with-current-buffer</span> html-buffer
               (buffer-string))))
  (<span style="color: #0000FF;">with-temp-file</span> <span style="color: #008000;">"test.html"</span>
    (insert html))
  (kill-buffer html-buffer))

(browse-url <span style="color: #008000;">"test.html"</span>)
</pre>
</div>

<pre class="example">
#&lt;process open test.html&gt;
</pre>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/11/10/Persistent-highlighting-in-Emacs.org">org-mode source</a></p>
<p>Org-mode version = 9.0</p>]]></content:encoded>
    </item>
    <item>
      <title>New and improved asynchronous org-babel python blocks</title>
      <link>http://jkitchin.github.io/blog/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks</link>
      <pubDate>Wed, 09 Nov 2016 11:00:01 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">wVert8ZKDnHiHY-yRgGuXz9E1B8=</guid>
      <description>New and improved asynchronous org-babel python blocks</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgb1ee49d">1. autopep8</a></li>
<li><a href="#orgcca807a">2. pylint</a></li>
</ul>
</div>
</div>
<p>
About a year ago I posted some code to run org-babel python blocks <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode/">asynchronously</a>. This year, my students asked for some enhancements related to debugging. Basically, they were frustrated by a few things when they got errors. First, they found it difficult to find the line number in the Traceback in the src block because there are no line numbers in the block, and it is annoying to do a special edit just for line numbers.  
</p>

<p>
I thought about this, and figured out how to significantly improve the situation. The async python code in scimax now has the following features:
</p>

<ol class="org-ol">
<li>When you get a Traceback, it goes in the results, and each file listed in it is hyperlinked to the source file and line so it is easy to get to them.</li>
<li>The cursor jumps to the last line in the code block that is listed in the Traceback, and a beacon shines to show you the line</li>
<li>You can turn on temporary line numbers in the code block to see where the lines are in the block, and these disappear when you start typing. This is done in the variable `org-babel-async-python-show-line-numbers'.</li>
<li>You can control whether a buffer of the results shows or not via the variable `org-babel-async-python-show-results'.</li>
<li>When you run the block, you get a clickable link in the RESULTS section to kill the process.</li>
<li>You may also find the `autopep8' and `pylint' functions helpful.</li>
</ol>

<p>
The code for this is currently found here:
<a href="https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el">https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el</a>
</p>

<p>
Eventually, I will merge this into master, after I am sure about all the changes needed for org 9.0. That is not likely to happen until the semester ends, so I do not mess up my students who use scimax in class. So, sometime mid-December it will make into master.
</p>

<p>
To make async the default way to run a python block use this code, so that you can use C-c C-c to run them:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">scimax-org-babel-python</span>)
(add-to-list 'org-ctrl-c-ctrl-c-hook 'org-babel-async-execute:python)
</pre>
</div>

<p>
As with the past few posts, this video will make it much more clear what the post is about: 
</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/m4vCXM7_p_o" frameborder="0" allowfullscreen></iframe>


<p>
Here is a prototypical example that shows how it works. While it runs you can view the progress if you click on the link to show the results.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #0000FF;">import</span> time

<span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(5):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(i)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(2)
</pre>
</div>

<p>
0
1
2
3
4
Traceback (most recent call last):
  File "Org SRC", line 5, in &lt;module&gt;
    time.sleep(2)
KeyboardInterrupt
</p>




<p>
This block has a pretty obvious issue when we run it. The cursor jumps right to the problem!
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #0000FF;">print</span>(<span style="color: #008000;">'This line is ok'</span>)
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">5 / 0</span>
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'We will not see this'</span>)
</pre>
</div>

<p>
This line is ok
We will not see this
</p>



<p>
This block shows we can access any of the links in the Traceback. Here we have an error in calling a function that is raised in an external file.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">from</span> scipy.integrate <span style="color: #0000FF;">import</span> odeint

<span style="color: #BA36A5;">Vspan</span> = np.linspace(0, 2) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">L</span>

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">dF/dV = F</span>
<span style="color: #0000FF;">def</span> <span style="color: #006699;">dFdV</span>(F, V, v0):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> F


<span style="color: #0000FF;">print</span>(odeint(dFdV, 1.0, Vspan))
</pre>
</div>

<p>
Traceback (most recent call last):
  File "Org SRC", line 11, in &lt;module&gt;
    print(odeint(dFdV, 1.0, Vspan))
  File "/Users/jkitchin/anaconda3/lib/python3.5/site-packages/scipy/integrate/odepack.py", line 215, in odeint
    ixpr, mxstep, mxhnil, mxordn, mxords)
TypeError: dFdV() missing 1 required positional argument: 'v0'
</p>


<p>
Here we show how nice it is to be able to kill a process. This block will not end on its own.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #0000FF;">while</span> <span style="color: #D0372D;">True</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span>
</pre>
</div>

<p>
Traceback (most recent call last):
  File "Org SRC", line 2, in &lt;module&gt;
    pass
KeyboardInterrupt
</p>

<div id="outline-container-orgb1ee49d" class="outline-2">
<h2 id="orgb1ee49d"><span class="section-number-2">1</span> autopep8</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://pypi.python.org/pypi/autopep8">autopep8</a> is a tool for reformatting Python code. We wrapped this into an Emacs command so you can quickly reformat a Python code block. 
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 4
<span style="color: #BA36A5;">b</span> = 5
<span style="color: #BA36A5;">c</span> = a * b  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">comment</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">another comment</span>


<span style="color: #0000FF;">def</span> <span style="color: #006699;">f</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> x
<span style="color: #0000FF;">print</span>(f(5))
</pre>
</div>
</div>
</div>

<div id="outline-container-orgcca807a" class="outline-2">
<h2 id="orgcca807a"><span class="section-number-2">2</span> pylint</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://www.pylint.org">pylint</a> is a great tool for checking your Python code for errors, style and conventions. We also wrapped this into an Emacs command so you can run it on a Python src block. The report that is generated had clickable links to help you get right to the lines in your code block with problems.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #BA36A5;">a</span> = np.array(5, 5)

<span style="color: #0000FF;">def</span> <span style="color: #006699;">f</span>(x): <span style="color: #0000FF;">return</span> x

<span style="color: #0000FF;">print</span>(f(6))
</pre>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/11/09/New-and-improved-asynchronous-org-babel-python-blocks.org">org-mode source</a></p>
<p>Org-mode version = 9.0</p>]]></content:encoded>
    </item>
    <item>
      <title>New color link in org 9.0 using font-lock to color the text</title>
      <link>http://jkitchin.github.io/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text</link>
      <pubDate>Tue, 08 Nov 2016 18:36:28 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">Yd1ruOGo_1haR9qxDFG_rmhUCRw=</guid>
      <description>New color link in org 9.0 using font-lock to color the text</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org7a9df33">1. Code for the color link</a></li>
</ul>
</div>
</div>
<p>
I previously blogged about <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML/">colored text in org-mode</a> using links. Back in org 8.0, we had to do some tricky work with font-lock to get the colors to work, and particularly had to use overlays to get reliable coloring. Org 9.0 improves this a lot, with the font-lock built right in, and some other nice features like completion. The integration of font-lock means we do not have to deal with overlays! Here is what it looks like in my buffer:
</p>

<p>
<img src="/media/date-08-11-2016-time-18-31-18.png"> 
</p>

<p>
And it exports nicely to HTML. You can see the code here: <a href="#org7a9df33">Code for the color link</a>. This is good for small bits of text you want colored. It is not good for paragraphs, or text with line breaks in it, because links do not support that. It also is not useful in code blocks since the link syntax would break the code. You need an alternative approach for those applications which is more complicated than these simple links. One nice feature of this is the persistence (I mean it comes back when you open the file after closing it) of the color since it is explicit markup in the file.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">loop</span> for color in color-name-rgb-alist
      do
      (princ (format <span style="color: #008000;">"[[color:%s][Text colored in %s]] "</span> (car color) (car color))))
</pre>
</div>

<p>
<span style="color: rgb(255,250,250)">Text colored in snow</span> <span style="color: rgb(248,248,255)">Text colored in ghostwhite</span> <span style="color: rgb(245,245,245)">Text colored in whitesmoke</span> <span style="color: rgb(220,220,220)">Text colored in gainsboro</span> <span style="color: rgb(255,250,240)">Text colored in floralwhite</span> <span style="color: rgb(253,245,230)">Text colored in oldlace</span> <span style="color: rgb(250,240,230)">Text colored in linen</span> <span style="color: rgb(250,235,215)">Text colored in antiquewhite</span> <span style="color: rgb(255,239,213)">Text colored in papayawhip</span> <span style="color: rgb(255,235,205)">Text colored in blanchedalmond</span> <span style="color: rgb(255,228,196)">Text colored in bisque</span> <span style="color: rgb(255,218,185)">Text colored in peachpuff</span> <span style="color: rgb(255,222,173)">Text colored in navajowhite</span> <span style="color: rgb(255,228,181)">Text colored in moccasin</span> <span style="color: rgb(255,248,220)">Text colored in cornsilk</span> <span style="color: rgb(255,255,240)">Text colored in ivory</span> <span style="color: rgb(255,250,205)">Text colored in lemonchiffon</span> <span style="color: rgb(255,245,238)">Text colored in seashell</span> <span style="color: rgb(240,255,240)">Text colored in honeydew</span> <span style="color: rgb(245,255,250)">Text colored in mintcream</span> <span style="color: rgb(240,255,255)">Text colored in azure</span> <span style="color: rgb(240,248,255)">Text colored in aliceblue</span> <span style="color: rgb(230,230,250)">Text colored in lavender</span> <span style="color: rgb(255,240,245)">Text colored in lavenderblush</span> <span style="color: rgb(255,228,225)">Text colored in mistyrose</span> <span style="color: rgb(255,255,255)">Text colored in white</span> <span style="color: rgb(0,0,0)">Text colored in black</span> <span style="color: rgb(47,79,79)">Text colored in darkslategray</span> <span style="color: rgb(47,79,79)">Text colored in darkslategrey</span> <span style="color: rgb(105,105,105)">Text colored in dimgray</span> <span style="color: rgb(105,105,105)">Text colored in dimgrey</span> <span style="color: rgb(112,128,144)">Text colored in slategray</span> <span style="color: rgb(112,128,144)">Text colored in slategrey</span> <span style="color: rgb(119,136,153)">Text colored in lightslategray</span> <span style="color: rgb(119,136,153)">Text colored in lightslategrey</span> <span style="color: rgb(190,190,190)">Text colored in gray</span> <span style="color: rgb(190,190,190)">Text colored in grey</span> <span style="color: rgb(211,211,211)">Text colored in lightgrey</span> <span style="color: rgb(211,211,211)">Text colored in lightgray</span> <span style="color: rgb(25,25,112)">Text colored in midnightblue</span> <span style="color: rgb(0,0,128)">Text colored in navy</span> <span style="color: rgb(0,0,128)">Text colored in navyblue</span> <span style="color: rgb(100,149,237)">Text colored in cornflowerblue</span> <span style="color: rgb(72,61,139)">Text colored in darkslateblue</span> <span style="color: rgb(106,90,205)">Text colored in slateblue</span> <span style="color: rgb(123,104,238)">Text colored in mediumslateblue</span> <span style="color: rgb(132,112,255)">Text colored in lightslateblue</span> <span style="color: rgb(0,0,205)">Text colored in mediumblue</span> <span style="color: rgb(65,105,225)">Text colored in royalblue</span> <span style="color: rgb(0,0,255)">Text colored in blue</span> <span style="color: rgb(30,144,255)">Text colored in dodgerblue</span> <span style="color: rgb(0,191,255)">Text colored in deepskyblue</span> <span style="color: rgb(135,206,235)">Text colored in skyblue</span> <span style="color: rgb(135,206,250)">Text colored in lightskyblue</span> <span style="color: rgb(70,130,180)">Text colored in steelblue</span> <span style="color: rgb(176,196,222)">Text colored in lightsteelblue</span> <span style="color: rgb(173,216,230)">Text colored in lightblue</span> <span style="color: rgb(176,224,230)">Text colored in powderblue</span> <span style="color: rgb(175,238,238)">Text colored in paleturquoise</span> <span style="color: rgb(0,206,209)">Text colored in darkturquoise</span> <span style="color: rgb(72,209,204)">Text colored in mediumturquoise</span> <span style="color: rgb(64,224,208)">Text colored in turquoise</span> <span style="color: rgb(0,255,255)">Text colored in cyan</span> <span style="color: rgb(224,255,255)">Text colored in lightcyan</span> <span style="color: rgb(95,158,160)">Text colored in cadetblue</span> <span style="color: rgb(102,205,170)">Text colored in mediumaquamarine</span> <span style="color: rgb(127,255,212)">Text colored in aquamarine</span> <span style="color: rgb(0,100,0)">Text colored in darkgreen</span> <span style="color: rgb(85,107,47)">Text colored in darkolivegreen</span> <span style="color: rgb(143,188,143)">Text colored in darkseagreen</span> <span style="color: rgb(46,139,87)">Text colored in seagreen</span> <span style="color: rgb(60,179,113)">Text colored in mediumseagreen</span> <span style="color: rgb(32,178,170)">Text colored in lightseagreen</span> <span style="color: rgb(152,251,152)">Text colored in palegreen</span> <span style="color: rgb(0,255,127)">Text colored in springgreen</span> <span style="color: rgb(124,252,0)">Text colored in lawngreen</span> <span style="color: rgb(0,255,0)">Text colored in green</span> <span style="color: rgb(127,255,0)">Text colored in chartreuse</span> <span style="color: rgb(0,250,154)">Text colored in mediumspringgreen</span> <span style="color: rgb(173,255,47)">Text colored in greenyellow</span> <span style="color: rgb(50,205,50)">Text colored in limegreen</span> <span style="color: rgb(154,205,50)">Text colored in yellowgreen</span> <span style="color: rgb(34,139,34)">Text colored in forestgreen</span> <span style="color: rgb(107,142,35)">Text colored in olivedrab</span> <span style="color: rgb(189,183,107)">Text colored in darkkhaki</span> <span style="color: rgb(240,230,140)">Text colored in khaki</span> <span style="color: rgb(238,232,170)">Text colored in palegoldenrod</span> <span style="color: rgb(250,250,210)">Text colored in lightgoldenrodyellow</span> <span style="color: rgb(255,255,224)">Text colored in lightyellow</span> <span style="color: rgb(255,255,0)">Text colored in yellow</span> <span style="color: rgb(255,215,0)">Text colored in gold</span> <span style="color: rgb(238,221,130)">Text colored in lightgoldenrod</span> <span style="color: rgb(218,165,32)">Text colored in goldenrod</span> <span style="color: rgb(184,134,11)">Text colored in darkgoldenrod</span> <span style="color: rgb(188,143,143)">Text colored in rosybrown</span> <span style="color: rgb(205,92,92)">Text colored in indianred</span> <span style="color: rgb(139,69,19)">Text colored in saddlebrown</span> <span style="color: rgb(160,82,45)">Text colored in sienna</span> <span style="color: rgb(205,133,63)">Text colored in peru</span> <span style="color: rgb(222,184,135)">Text colored in burlywood</span> <span style="color: rgb(245,245,220)">Text colored in beige</span> <span style="color: rgb(245,222,179)">Text colored in wheat</span> <span style="color: rgb(244,164,96)">Text colored in sandybrown</span> <span style="color: rgb(210,180,140)">Text colored in tan</span> <span style="color: rgb(210,105,30)">Text colored in chocolate</span> <span style="color: rgb(178,34,34)">Text colored in firebrick</span> <span style="color: rgb(165,42,42)">Text colored in brown</span> <span style="color: rgb(233,150,122)">Text colored in darksalmon</span> <span style="color: rgb(250,128,114)">Text colored in salmon</span> <span style="color: rgb(255,160,122)">Text colored in lightsalmon</span> <span style="color: rgb(255,165,0)">Text colored in orange</span> <span style="color: rgb(255,140,0)">Text colored in darkorange</span> <span style="color: rgb(255,127,80)">Text colored in coral</span> <span style="color: rgb(240,128,128)">Text colored in lightcoral</span> <span style="color: rgb(255,99,71)">Text colored in tomato</span> <span style="color: rgb(255,69,0)">Text colored in orangered</span> <span style="color: rgb(255,0,0)">Text colored in red</span> <span style="color: rgb(255,105,180)">Text colored in hotpink</span> <span style="color: rgb(255,20,147)">Text colored in deeppink</span> <span style="color: rgb(255,192,203)">Text colored in pink</span> <span style="color: rgb(255,182,193)">Text colored in lightpink</span> <span style="color: rgb(219,112,147)">Text colored in palevioletred</span> <span style="color: rgb(176,48,96)">Text colored in maroon</span> <span style="color: rgb(199,21,133)">Text colored in mediumvioletred</span> <span style="color: rgb(208,32,144)">Text colored in violetred</span> <span style="color: rgb(255,0,255)">Text colored in magenta</span> <span style="color: rgb(238,130,238)">Text colored in violet</span> <span style="color: rgb(221,160,221)">Text colored in plum</span> <span style="color: rgb(218,112,214)">Text colored in orchid</span> <span style="color: rgb(186,85,211)">Text colored in mediumorchid</span> <span style="color: rgb(153,50,204)">Text colored in darkorchid</span> <span style="color: rgb(148,0,211)">Text colored in darkviolet</span> <span style="color: rgb(138,43,226)">Text colored in blueviolet</span> <span style="color: rgb(160,32,240)">Text colored in purple</span> <span style="color: rgb(147,112,219)">Text colored in mediumpurple</span> <span style="color: rgb(216,191,216)">Text colored in thistle</span> <span style="color: rgb(255,250,250)">Text colored in snow1</span> <span style="color: rgb(238,233,233)">Text colored in snow2</span> <span style="color: rgb(205,201,201)">Text colored in snow3</span> <span style="color: rgb(139,137,137)">Text colored in snow4</span> <span style="color: rgb(255,245,238)">Text colored in seashell1</span> <span style="color: rgb(238,229,222)">Text colored in seashell2</span> <span style="color: rgb(205,197,191)">Text colored in seashell3</span> <span style="color: rgb(139,134,130)">Text colored in seashell4</span> <span style="color: rgb(255,239,219)">Text colored in antiquewhite1</span> <span style="color: rgb(238,223,204)">Text colored in antiquewhite2</span> <span style="color: rgb(205,192,176)">Text colored in antiquewhite3</span> <span style="color: rgb(139,131,120)">Text colored in antiquewhite4</span> <span style="color: rgb(255,228,196)">Text colored in bisque1</span> <span style="color: rgb(238,213,183)">Text colored in bisque2</span> <span style="color: rgb(205,183,158)">Text colored in bisque3</span> <span style="color: rgb(139,125,107)">Text colored in bisque4</span> <span style="color: rgb(255,218,185)">Text colored in peachpuff1</span> <span style="color: rgb(238,203,173)">Text colored in peachpuff2</span> <span style="color: rgb(205,175,149)">Text colored in peachpuff3</span> <span style="color: rgb(139,119,101)">Text colored in peachpuff4</span> <span style="color: rgb(255,222,173)">Text colored in navajowhite1</span> <span style="color: rgb(238,207,161)">Text colored in navajowhite2</span> <span style="color: rgb(205,179,139)">Text colored in navajowhite3</span> <span style="color: rgb(139,121,94)">Text colored in navajowhite4</span> <span style="color: rgb(255,250,205)">Text colored in lemonchiffon1</span> <span style="color: rgb(238,233,191)">Text colored in lemonchiffon2</span> <span style="color: rgb(205,201,165)">Text colored in lemonchiffon3</span> <span style="color: rgb(139,137,112)">Text colored in lemonchiffon4</span> <span style="color: rgb(255,248,220)">Text colored in cornsilk1</span> <span style="color: rgb(238,232,205)">Text colored in cornsilk2</span> <span style="color: rgb(205,200,177)">Text colored in cornsilk3</span> <span style="color: rgb(139,136,120)">Text colored in cornsilk4</span> <span style="color: rgb(255,255,240)">Text colored in ivory1</span> <span style="color: rgb(238,238,224)">Text colored in ivory2</span> <span style="color: rgb(205,205,193)">Text colored in ivory3</span> <span style="color: rgb(139,139,131)">Text colored in ivory4</span> <span style="color: rgb(240,255,240)">Text colored in honeydew1</span> <span style="color: rgb(224,238,224)">Text colored in honeydew2</span> <span style="color: rgb(193,205,193)">Text colored in honeydew3</span> <span style="color: rgb(131,139,131)">Text colored in honeydew4</span> <span style="color: rgb(255,240,245)">Text colored in lavenderblush1</span> <span style="color: rgb(238,224,229)">Text colored in lavenderblush2</span> <span style="color: rgb(205,193,197)">Text colored in lavenderblush3</span> <span style="color: rgb(139,131,134)">Text colored in lavenderblush4</span> <span style="color: rgb(255,228,225)">Text colored in mistyrose1</span> <span style="color: rgb(238,213,210)">Text colored in mistyrose2</span> <span style="color: rgb(205,183,181)">Text colored in mistyrose3</span> <span style="color: rgb(139,125,123)">Text colored in mistyrose4</span> <span style="color: rgb(240,255,255)">Text colored in azure1</span> <span style="color: rgb(224,238,238)">Text colored in azure2</span> <span style="color: rgb(193,205,205)">Text colored in azure3</span> <span style="color: rgb(131,139,139)">Text colored in azure4</span> <span style="color: rgb(131,111,255)">Text colored in slateblue1</span> <span style="color: rgb(122,103,238)">Text colored in slateblue2</span> <span style="color: rgb(105,89,205)">Text colored in slateblue3</span> <span style="color: rgb(71,60,139)">Text colored in slateblue4</span> <span style="color: rgb(72,118,255)">Text colored in royalblue1</span> <span style="color: rgb(67,110,238)">Text colored in royalblue2</span> <span style="color: rgb(58,95,205)">Text colored in royalblue3</span> <span style="color: rgb(39,64,139)">Text colored in royalblue4</span> <span style="color: rgb(0,0,255)">Text colored in blue1</span> <span style="color: rgb(0,0,238)">Text colored in blue2</span> <span style="color: rgb(0,0,205)">Text colored in blue3</span> <span style="color: rgb(0,0,139)">Text colored in blue4</span> <span style="color: rgb(30,144,255)">Text colored in dodgerblue1</span> <span style="color: rgb(28,134,238)">Text colored in dodgerblue2</span> <span style="color: rgb(24,116,205)">Text colored in dodgerblue3</span> <span style="color: rgb(16,78,139)">Text colored in dodgerblue4</span> <span style="color: rgb(99,184,255)">Text colored in steelblue1</span> <span style="color: rgb(92,172,238)">Text colored in steelblue2</span> <span style="color: rgb(79,148,205)">Text colored in steelblue3</span> <span style="color: rgb(54,100,139)">Text colored in steelblue4</span> <span style="color: rgb(0,191,255)">Text colored in deepskyblue1</span> <span style="color: rgb(0,178,238)">Text colored in deepskyblue2</span> <span style="color: rgb(0,154,205)">Text colored in deepskyblue3</span> <span style="color: rgb(0,104,139)">Text colored in deepskyblue4</span> <span style="color: rgb(135,206,255)">Text colored in skyblue1</span> <span style="color: rgb(126,192,238)">Text colored in skyblue2</span> <span style="color: rgb(108,166,205)">Text colored in skyblue3</span> <span style="color: rgb(74,112,139)">Text colored in skyblue4</span> <span style="color: rgb(176,226,255)">Text colored in lightskyblue1</span> <span style="color: rgb(164,211,238)">Text colored in lightskyblue2</span> <span style="color: rgb(141,182,205)">Text colored in lightskyblue3</span> <span style="color: rgb(96,123,139)">Text colored in lightskyblue4</span> <span style="color: rgb(198,226,255)">Text colored in slategray1</span> <span style="color: rgb(185,211,238)">Text colored in slategray2</span> <span style="color: rgb(159,182,205)">Text colored in slategray3</span> <span style="color: rgb(108,123,139)">Text colored in slategray4</span> <span style="color: rgb(202,225,255)">Text colored in lightsteelblue1</span> <span style="color: rgb(188,210,238)">Text colored in lightsteelblue2</span> <span style="color: rgb(162,181,205)">Text colored in lightsteelblue3</span> <span style="color: rgb(110,123,139)">Text colored in lightsteelblue4</span> <span style="color: rgb(191,239,255)">Text colored in lightblue1</span> <span style="color: rgb(178,223,238)">Text colored in lightblue2</span> <span style="color: rgb(154,192,205)">Text colored in lightblue3</span> <span style="color: rgb(104,131,139)">Text colored in lightblue4</span> <span style="color: rgb(224,255,255)">Text colored in lightcyan1</span> <span style="color: rgb(209,238,238)">Text colored in lightcyan2</span> <span style="color: rgb(180,205,205)">Text colored in lightcyan3</span> <span style="color: rgb(122,139,139)">Text colored in lightcyan4</span> <span style="color: rgb(187,255,255)">Text colored in paleturquoise1</span> <span style="color: rgb(174,238,238)">Text colored in paleturquoise2</span> <span style="color: rgb(150,205,205)">Text colored in paleturquoise3</span> <span style="color: rgb(102,139,139)">Text colored in paleturquoise4</span> <span style="color: rgb(152,245,255)">Text colored in cadetblue1</span> <span style="color: rgb(142,229,238)">Text colored in cadetblue2</span> <span style="color: rgb(122,197,205)">Text colored in cadetblue3</span> <span style="color: rgb(83,134,139)">Text colored in cadetblue4</span> <span style="color: rgb(0,245,255)">Text colored in turquoise1</span> <span style="color: rgb(0,229,238)">Text colored in turquoise2</span> <span style="color: rgb(0,197,205)">Text colored in turquoise3</span> <span style="color: rgb(0,134,139)">Text colored in turquoise4</span> <span style="color: rgb(0,255,255)">Text colored in cyan1</span> <span style="color: rgb(0,238,238)">Text colored in cyan2</span> <span style="color: rgb(0,205,205)">Text colored in cyan3</span> <span style="color: rgb(0,139,139)">Text colored in cyan4</span> <span style="color: rgb(151,255,255)">Text colored in darkslategray1</span> <span style="color: rgb(141,238,238)">Text colored in darkslategray2</span> <span style="color: rgb(121,205,205)">Text colored in darkslategray3</span> <span style="color: rgb(82,139,139)">Text colored in darkslategray4</span> <span style="color: rgb(127,255,212)">Text colored in aquamarine1</span> <span style="color: rgb(118,238,198)">Text colored in aquamarine2</span> <span style="color: rgb(102,205,170)">Text colored in aquamarine3</span> <span style="color: rgb(69,139,116)">Text colored in aquamarine4</span> <span style="color: rgb(193,255,193)">Text colored in darkseagreen1</span> <span style="color: rgb(180,238,180)">Text colored in darkseagreen2</span> <span style="color: rgb(155,205,155)">Text colored in darkseagreen3</span> <span style="color: rgb(105,139,105)">Text colored in darkseagreen4</span> <span style="color: rgb(84,255,159)">Text colored in seagreen1</span> <span style="color: rgb(78,238,148)">Text colored in seagreen2</span> <span style="color: rgb(67,205,128)">Text colored in seagreen3</span> <span style="color: rgb(46,139,87)">Text colored in seagreen4</span> <span style="color: rgb(154,255,154)">Text colored in palegreen1</span> <span style="color: rgb(144,238,144)">Text colored in palegreen2</span> <span style="color: rgb(124,205,124)">Text colored in palegreen3</span> <span style="color: rgb(84,139,84)">Text colored in palegreen4</span> <span style="color: rgb(0,255,127)">Text colored in springgreen1</span> <span style="color: rgb(0,238,118)">Text colored in springgreen2</span> <span style="color: rgb(0,205,102)">Text colored in springgreen3</span> <span style="color: rgb(0,139,69)">Text colored in springgreen4</span> <span style="color: rgb(0,255,0)">Text colored in green1</span> <span style="color: rgb(0,238,0)">Text colored in green2</span> <span style="color: rgb(0,205,0)">Text colored in green3</span> <span style="color: rgb(0,139,0)">Text colored in green4</span> <span style="color: rgb(127,255,0)">Text colored in chartreuse1</span> <span style="color: rgb(118,238,0)">Text colored in chartreuse2</span> <span style="color: rgb(102,205,0)">Text colored in chartreuse3</span> <span style="color: rgb(69,139,0)">Text colored in chartreuse4</span> <span style="color: rgb(192,255,62)">Text colored in olivedrab1</span> <span style="color: rgb(179,238,58)">Text colored in olivedrab2</span> <span style="color: rgb(154,205,50)">Text colored in olivedrab3</span> <span style="color: rgb(105,139,34)">Text colored in olivedrab4</span> <span style="color: rgb(202,255,112)">Text colored in darkolivegreen1</span> <span style="color: rgb(188,238,104)">Text colored in darkolivegreen2</span> <span style="color: rgb(162,205,90)">Text colored in darkolivegreen3</span> <span style="color: rgb(110,139,61)">Text colored in darkolivegreen4</span> <span style="color: rgb(255,246,143)">Text colored in khaki1</span> <span style="color: rgb(238,230,133)">Text colored in khaki2</span> <span style="color: rgb(205,198,115)">Text colored in khaki3</span> <span style="color: rgb(139,134,78)">Text colored in khaki4</span> <span style="color: rgb(255,236,139)">Text colored in lightgoldenrod1</span> <span style="color: rgb(238,220,130)">Text colored in lightgoldenrod2</span> <span style="color: rgb(205,190,112)">Text colored in lightgoldenrod3</span> <span style="color: rgb(139,129,76)">Text colored in lightgoldenrod4</span> <span style="color: rgb(255,255,224)">Text colored in lightyellow1</span> <span style="color: rgb(238,238,209)">Text colored in lightyellow2</span> <span style="color: rgb(205,205,180)">Text colored in lightyellow3</span> <span style="color: rgb(139,139,122)">Text colored in lightyellow4</span> <span style="color: rgb(255,255,0)">Text colored in yellow1</span> <span style="color: rgb(238,238,0)">Text colored in yellow2</span> <span style="color: rgb(205,205,0)">Text colored in yellow3</span> <span style="color: rgb(139,139,0)">Text colored in yellow4</span> <span style="color: rgb(255,215,0)">Text colored in gold1</span> <span style="color: rgb(238,201,0)">Text colored in gold2</span> <span style="color: rgb(205,173,0)">Text colored in gold3</span> <span style="color: rgb(139,117,0)">Text colored in gold4</span> <span style="color: rgb(255,193,37)">Text colored in goldenrod1</span> <span style="color: rgb(238,180,34)">Text colored in goldenrod2</span> <span style="color: rgb(205,155,29)">Text colored in goldenrod3</span> <span style="color: rgb(139,105,20)">Text colored in goldenrod4</span> <span style="color: rgb(255,185,15)">Text colored in darkgoldenrod1</span> <span style="color: rgb(238,173,14)">Text colored in darkgoldenrod2</span> <span style="color: rgb(205,149,12)">Text colored in darkgoldenrod3</span> <span style="color: rgb(139,101,8)">Text colored in darkgoldenrod4</span> <span style="color: rgb(255,193,193)">Text colored in rosybrown1</span> <span style="color: rgb(238,180,180)">Text colored in rosybrown2</span> <span style="color: rgb(205,155,155)">Text colored in rosybrown3</span> <span style="color: rgb(139,105,105)">Text colored in rosybrown4</span> <span style="color: rgb(255,106,106)">Text colored in indianred1</span> <span style="color: rgb(238,99,99)">Text colored in indianred2</span> <span style="color: rgb(205,85,85)">Text colored in indianred3</span> <span style="color: rgb(139,58,58)">Text colored in indianred4</span> <span style="color: rgb(255,130,71)">Text colored in sienna1</span> <span style="color: rgb(238,121,66)">Text colored in sienna2</span> <span style="color: rgb(205,104,57)">Text colored in sienna3</span> <span style="color: rgb(139,71,38)">Text colored in sienna4</span> <span style="color: rgb(255,211,155)">Text colored in burlywood1</span> <span style="color: rgb(238,197,145)">Text colored in burlywood2</span> <span style="color: rgb(205,170,125)">Text colored in burlywood3</span> <span style="color: rgb(139,115,85)">Text colored in burlywood4</span> <span style="color: rgb(255,231,186)">Text colored in wheat1</span> <span style="color: rgb(238,216,174)">Text colored in wheat2</span> <span style="color: rgb(205,186,150)">Text colored in wheat3</span> <span style="color: rgb(139,126,102)">Text colored in wheat4</span> <span style="color: rgb(255,165,79)">Text colored in tan1</span> <span style="color: rgb(238,154,73)">Text colored in tan2</span> <span style="color: rgb(205,133,63)">Text colored in tan3</span> <span style="color: rgb(139,90,43)">Text colored in tan4</span> <span style="color: rgb(255,127,36)">Text colored in chocolate1</span> <span style="color: rgb(238,118,33)">Text colored in chocolate2</span> <span style="color: rgb(205,102,29)">Text colored in chocolate3</span> <span style="color: rgb(139,69,19)">Text colored in chocolate4</span> <span style="color: rgb(255,48,48)">Text colored in firebrick1</span> <span style="color: rgb(238,44,44)">Text colored in firebrick2</span> <span style="color: rgb(205,38,38)">Text colored in firebrick3</span> <span style="color: rgb(139,26,26)">Text colored in firebrick4</span> <span style="color: rgb(255,64,64)">Text colored in brown1</span> <span style="color: rgb(238,59,59)">Text colored in brown2</span> <span style="color: rgb(205,51,51)">Text colored in brown3</span> <span style="color: rgb(139,35,35)">Text colored in brown4</span> <span style="color: rgb(255,140,105)">Text colored in salmon1</span> <span style="color: rgb(238,130,98)">Text colored in salmon2</span> <span style="color: rgb(205,112,84)">Text colored in salmon3</span> <span style="color: rgb(139,76,57)">Text colored in salmon4</span> <span style="color: rgb(255,160,122)">Text colored in lightsalmon1</span> <span style="color: rgb(238,149,114)">Text colored in lightsalmon2</span> <span style="color: rgb(205,129,98)">Text colored in lightsalmon3</span> <span style="color: rgb(139,87,66)">Text colored in lightsalmon4</span> <span style="color: rgb(255,165,0)">Text colored in orange1</span> <span style="color: rgb(238,154,0)">Text colored in orange2</span> <span style="color: rgb(205,133,0)">Text colored in orange3</span> <span style="color: rgb(139,90,0)">Text colored in orange4</span> <span style="color: rgb(255,127,0)">Text colored in darkorange1</span> <span style="color: rgb(238,118,0)">Text colored in darkorange2</span> <span style="color: rgb(205,102,0)">Text colored in darkorange3</span> <span style="color: rgb(139,69,0)">Text colored in darkorange4</span> <span style="color: rgb(255,114,86)">Text colored in coral1</span> <span style="color: rgb(238,106,80)">Text colored in coral2</span> <span style="color: rgb(205,91,69)">Text colored in coral3</span> <span style="color: rgb(139,62,47)">Text colored in coral4</span> <span style="color: rgb(255,99,71)">Text colored in tomato1</span> <span style="color: rgb(238,92,66)">Text colored in tomato2</span> <span style="color: rgb(205,79,57)">Text colored in tomato3</span> <span style="color: rgb(139,54,38)">Text colored in tomato4</span> <span style="color: rgb(255,69,0)">Text colored in orangered1</span> <span style="color: rgb(238,64,0)">Text colored in orangered2</span> <span style="color: rgb(205,55,0)">Text colored in orangered3</span> <span style="color: rgb(139,37,0)">Text colored in orangered4</span> <span style="color: rgb(255,0,0)">Text colored in red1</span> <span style="color: rgb(238,0,0)">Text colored in red2</span> <span style="color: rgb(205,0,0)">Text colored in red3</span> <span style="color: rgb(139,0,0)">Text colored in red4</span> <span style="color: rgb(255,20,147)">Text colored in deeppink1</span> <span style="color: rgb(238,18,137)">Text colored in deeppink2</span> <span style="color: rgb(205,16,118)">Text colored in deeppink3</span> <span style="color: rgb(139,10,80)">Text colored in deeppink4</span> <span style="color: rgb(255,110,180)">Text colored in hotpink1</span> <span style="color: rgb(238,106,167)">Text colored in hotpink2</span> <span style="color: rgb(205,96,144)">Text colored in hotpink3</span> <span style="color: rgb(139,58,98)">Text colored in hotpink4</span> <span style="color: rgb(255,181,197)">Text colored in pink1</span> <span style="color: rgb(238,169,184)">Text colored in pink2</span> <span style="color: rgb(205,145,158)">Text colored in pink3</span> <span style="color: rgb(139,99,108)">Text colored in pink4</span> <span style="color: rgb(255,174,185)">Text colored in lightpink1</span> <span style="color: rgb(238,162,173)">Text colored in lightpink2</span> <span style="color: rgb(205,140,149)">Text colored in lightpink3</span> <span style="color: rgb(139,95,101)">Text colored in lightpink4</span> <span style="color: rgb(255,130,171)">Text colored in palevioletred1</span> <span style="color: rgb(238,121,159)">Text colored in palevioletred2</span> <span style="color: rgb(205,104,137)">Text colored in palevioletred3</span> <span style="color: rgb(139,71,93)">Text colored in palevioletred4</span> <span style="color: rgb(255,52,179)">Text colored in maroon1</span> <span style="color: rgb(238,48,167)">Text colored in maroon2</span> <span style="color: rgb(205,41,144)">Text colored in maroon3</span> <span style="color: rgb(139,28,98)">Text colored in maroon4</span> <span style="color: rgb(255,62,150)">Text colored in violetred1</span> <span style="color: rgb(238,58,140)">Text colored in violetred2</span> <span style="color: rgb(205,50,120)">Text colored in violetred3</span> <span style="color: rgb(139,34,82)">Text colored in violetred4</span> <span style="color: rgb(255,0,255)">Text colored in magenta1</span> <span style="color: rgb(238,0,238)">Text colored in magenta2</span> <span style="color: rgb(205,0,205)">Text colored in magenta3</span> <span style="color: rgb(139,0,139)">Text colored in magenta4</span> <span style="color: rgb(255,131,250)">Text colored in orchid1</span> <span style="color: rgb(238,122,233)">Text colored in orchid2</span> <span style="color: rgb(205,105,201)">Text colored in orchid3</span> <span style="color: rgb(139,71,137)">Text colored in orchid4</span> <span style="color: rgb(255,187,255)">Text colored in plum1</span> <span style="color: rgb(238,174,238)">Text colored in plum2</span> <span style="color: rgb(205,150,205)">Text colored in plum3</span> <span style="color: rgb(139,102,139)">Text colored in plum4</span> <span style="color: rgb(224,102,255)">Text colored in mediumorchid1</span> <span style="color: rgb(209,95,238)">Text colored in mediumorchid2</span> <span style="color: rgb(180,82,205)">Text colored in mediumorchid3</span> <span style="color: rgb(122,55,139)">Text colored in mediumorchid4</span> <span style="color: rgb(191,62,255)">Text colored in darkorchid1</span> <span style="color: rgb(178,58,238)">Text colored in darkorchid2</span> <span style="color: rgb(154,50,205)">Text colored in darkorchid3</span> <span style="color: rgb(104,34,139)">Text colored in darkorchid4</span> <span style="color: rgb(155,48,255)">Text colored in purple1</span> <span style="color: rgb(145,44,238)">Text colored in purple2</span> <span style="color: rgb(125,38,205)">Text colored in purple3</span> <span style="color: rgb(85,26,139)">Text colored in purple4</span> <span style="color: rgb(171,130,255)">Text colored in mediumpurple1</span> <span style="color: rgb(159,121,238)">Text colored in mediumpurple2</span> <span style="color: rgb(137,104,205)">Text colored in mediumpurple3</span> <span style="color: rgb(93,71,139)">Text colored in mediumpurple4</span> <span style="color: rgb(255,225,255)">Text colored in thistle1</span> <span style="color: rgb(238,210,238)">Text colored in thistle2</span> <span style="color: rgb(205,181,205)">Text colored in thistle3</span> <span style="color: rgb(139,123,139)">Text colored in thistle4</span> <span style="color: rgb(0,0,0)">Text colored in gray0</span> <span style="color: rgb(0,0,0)">Text colored in grey0</span> <span style="color: rgb(3,3,3)">Text colored in gray1</span> <span style="color: rgb(3,3,3)">Text colored in grey1</span> <span style="color: rgb(5,5,5)">Text colored in gray2</span> <span style="color: rgb(5,5,5)">Text colored in grey2</span> <span style="color: rgb(8,8,8)">Text colored in gray3</span> <span style="color: rgb(8,8,8)">Text colored in grey3</span> <span style="color: rgb(10,10,10)">Text colored in gray4</span> <span style="color: rgb(10,10,10)">Text colored in grey4</span> <span style="color: rgb(13,13,13)">Text colored in gray5</span> <span style="color: rgb(13,13,13)">Text colored in grey5</span> <span style="color: rgb(15,15,15)">Text colored in gray6</span> <span style="color: rgb(15,15,15)">Text colored in grey6</span> <span style="color: rgb(18,18,18)">Text colored in gray7</span> <span style="color: rgb(18,18,18)">Text colored in grey7</span> <span style="color: rgb(20,20,20)">Text colored in gray8</span> <span style="color: rgb(20,20,20)">Text colored in grey8</span> <span style="color: rgb(23,23,23)">Text colored in gray9</span> <span style="color: rgb(23,23,23)">Text colored in grey9</span> <span style="color: rgb(26,26,26)">Text colored in gray10</span> <span style="color: rgb(26,26,26)">Text colored in grey10</span> <span style="color: rgb(28,28,28)">Text colored in gray11</span> <span style="color: rgb(28,28,28)">Text colored in grey11</span> <span style="color: rgb(31,31,31)">Text colored in gray12</span> <span style="color: rgb(31,31,31)">Text colored in grey12</span> <span style="color: rgb(33,33,33)">Text colored in gray13</span> <span style="color: rgb(33,33,33)">Text colored in grey13</span> <span style="color: rgb(36,36,36)">Text colored in gray14</span> <span style="color: rgb(36,36,36)">Text colored in grey14</span> <span style="color: rgb(38,38,38)">Text colored in gray15</span> <span style="color: rgb(38,38,38)">Text colored in grey15</span> <span style="color: rgb(41,41,41)">Text colored in gray16</span> <span style="color: rgb(41,41,41)">Text colored in grey16</span> <span style="color: rgb(43,43,43)">Text colored in gray17</span> <span style="color: rgb(43,43,43)">Text colored in grey17</span> <span style="color: rgb(46,46,46)">Text colored in gray18</span> <span style="color: rgb(46,46,46)">Text colored in grey18</span> <span style="color: rgb(48,48,48)">Text colored in gray19</span> <span style="color: rgb(48,48,48)">Text colored in grey19</span> <span style="color: rgb(51,51,51)">Text colored in gray20</span> <span style="color: rgb(51,51,51)">Text colored in grey20</span> <span style="color: rgb(54,54,54)">Text colored in gray21</span> <span style="color: rgb(54,54,54)">Text colored in grey21</span> <span style="color: rgb(56,56,56)">Text colored in gray22</span> <span style="color: rgb(56,56,56)">Text colored in grey22</span> <span style="color: rgb(59,59,59)">Text colored in gray23</span> <span style="color: rgb(59,59,59)">Text colored in grey23</span> <span style="color: rgb(61,61,61)">Text colored in gray24</span> <span style="color: rgb(61,61,61)">Text colored in grey24</span> <span style="color: rgb(64,64,64)">Text colored in gray25</span> <span style="color: rgb(64,64,64)">Text colored in grey25</span> <span style="color: rgb(66,66,66)">Text colored in gray26</span> <span style="color: rgb(66,66,66)">Text colored in grey26</span> <span style="color: rgb(69,69,69)">Text colored in gray27</span> <span style="color: rgb(69,69,69)">Text colored in grey27</span> <span style="color: rgb(71,71,71)">Text colored in gray28</span> <span style="color: rgb(71,71,71)">Text colored in grey28</span> <span style="color: rgb(74,74,74)">Text colored in gray29</span> <span style="color: rgb(74,74,74)">Text colored in grey29</span> <span style="color: rgb(77,77,77)">Text colored in gray30</span> <span style="color: rgb(77,77,77)">Text colored in grey30</span> <span style="color: rgb(79,79,79)">Text colored in gray31</span> <span style="color: rgb(79,79,79)">Text colored in grey31</span> <span style="color: rgb(82,82,82)">Text colored in gray32</span> <span style="color: rgb(82,82,82)">Text colored in grey32</span> <span style="color: rgb(84,84,84)">Text colored in gray33</span> <span style="color: rgb(84,84,84)">Text colored in grey33</span> <span style="color: rgb(87,87,87)">Text colored in gray34</span> <span style="color: rgb(87,87,87)">Text colored in grey34</span> <span style="color: rgb(89,89,89)">Text colored in gray35</span> <span style="color: rgb(89,89,89)">Text colored in grey35</span> <span style="color: rgb(92,92,92)">Text colored in gray36</span> <span style="color: rgb(92,92,92)">Text colored in grey36</span> <span style="color: rgb(94,94,94)">Text colored in gray37</span> <span style="color: rgb(94,94,94)">Text colored in grey37</span> <span style="color: rgb(97,97,97)">Text colored in gray38</span> <span style="color: rgb(97,97,97)">Text colored in grey38</span> <span style="color: rgb(99,99,99)">Text colored in gray39</span> <span style="color: rgb(99,99,99)">Text colored in grey39</span> <span style="color: rgb(102,102,102)">Text colored in gray40</span> <span style="color: rgb(102,102,102)">Text colored in grey40</span> <span style="color: rgb(105,105,105)">Text colored in gray41</span> <span style="color: rgb(105,105,105)">Text colored in grey41</span> <span style="color: rgb(107,107,107)">Text colored in gray42</span> <span style="color: rgb(107,107,107)">Text colored in grey42</span> <span style="color: rgb(110,110,110)">Text colored in gray43</span> <span style="color: rgb(110,110,110)">Text colored in grey43</span> <span style="color: rgb(112,112,112)">Text colored in gray44</span> <span style="color: rgb(112,112,112)">Text colored in grey44</span> <span style="color: rgb(115,115,115)">Text colored in gray45</span> <span style="color: rgb(115,115,115)">Text colored in grey45</span> <span style="color: rgb(117,117,117)">Text colored in gray46</span> <span style="color: rgb(117,117,117)">Text colored in grey46</span> <span style="color: rgb(120,120,120)">Text colored in gray47</span> <span style="color: rgb(120,120,120)">Text colored in grey47</span> <span style="color: rgb(122,122,122)">Text colored in gray48</span> <span style="color: rgb(122,122,122)">Text colored in grey48</span> <span style="color: rgb(125,125,125)">Text colored in gray49</span> <span style="color: rgb(125,125,125)">Text colored in grey49</span> <span style="color: rgb(127,127,127)">Text colored in gray50</span> <span style="color: rgb(127,127,127)">Text colored in grey50</span> <span style="color: rgb(130,130,130)">Text colored in gray51</span> <span style="color: rgb(130,130,130)">Text colored in grey51</span> <span style="color: rgb(133,133,133)">Text colored in gray52</span> <span style="color: rgb(133,133,133)">Text colored in grey52</span> <span style="color: rgb(135,135,135)">Text colored in gray53</span> <span style="color: rgb(135,135,135)">Text colored in grey53</span> <span style="color: rgb(138,138,138)">Text colored in gray54</span> <span style="color: rgb(138,138,138)">Text colored in grey54</span> <span style="color: rgb(140,140,140)">Text colored in gray55</span> <span style="color: rgb(140,140,140)">Text colored in grey55</span> <span style="color: rgb(143,143,143)">Text colored in gray56</span> <span style="color: rgb(143,143,143)">Text colored in grey56</span> <span style="color: rgb(145,145,145)">Text colored in gray57</span> <span style="color: rgb(145,145,145)">Text colored in grey57</span> <span style="color: rgb(148,148,148)">Text colored in gray58</span> <span style="color: rgb(148,148,148)">Text colored in grey58</span> <span style="color: rgb(150,150,150)">Text colored in gray59</span> <span style="color: rgb(150,150,150)">Text colored in grey59</span> <span style="color: rgb(153,153,153)">Text colored in gray60</span> <span style="color: rgb(153,153,153)">Text colored in grey60</span> <span style="color: rgb(156,156,156)">Text colored in gray61</span> <span style="color: rgb(156,156,156)">Text colored in grey61</span> <span style="color: rgb(158,158,158)">Text colored in gray62</span> <span style="color: rgb(158,158,158)">Text colored in grey62</span> <span style="color: rgb(161,161,161)">Text colored in gray63</span> <span style="color: rgb(161,161,161)">Text colored in grey63</span> <span style="color: rgb(163,163,163)">Text colored in gray64</span> <span style="color: rgb(163,163,163)">Text colored in grey64</span> <span style="color: rgb(166,166,166)">Text colored in gray65</span> <span style="color: rgb(166,166,166)">Text colored in grey65</span> <span style="color: rgb(168,168,168)">Text colored in gray66</span> <span style="color: rgb(168,168,168)">Text colored in grey66</span> <span style="color: rgb(171,171,171)">Text colored in gray67</span> <span style="color: rgb(171,171,171)">Text colored in grey67</span> <span style="color: rgb(173,173,173)">Text colored in gray68</span> <span style="color: rgb(173,173,173)">Text colored in grey68</span> <span style="color: rgb(176,176,176)">Text colored in gray69</span> <span style="color: rgb(176,176,176)">Text colored in grey69</span> <span style="color: rgb(179,179,179)">Text colored in gray70</span> <span style="color: rgb(179,179,179)">Text colored in grey70</span> <span style="color: rgb(181,181,181)">Text colored in gray71</span> <span style="color: rgb(181,181,181)">Text colored in grey71</span> <span style="color: rgb(184,184,184)">Text colored in gray72</span> <span style="color: rgb(184,184,184)">Text colored in grey72</span> <span style="color: rgb(186,186,186)">Text colored in gray73</span> <span style="color: rgb(186,186,186)">Text colored in grey73</span> <span style="color: rgb(189,189,189)">Text colored in gray74</span> <span style="color: rgb(189,189,189)">Text colored in grey74</span> <span style="color: rgb(191,191,191)">Text colored in gray75</span> <span style="color: rgb(191,191,191)">Text colored in grey75</span> <span style="color: rgb(194,194,194)">Text colored in gray76</span> <span style="color: rgb(194,194,194)">Text colored in grey76</span> <span style="color: rgb(196,196,196)">Text colored in gray77</span> <span style="color: rgb(196,196,196)">Text colored in grey77</span> <span style="color: rgb(199,199,199)">Text colored in gray78</span> <span style="color: rgb(199,199,199)">Text colored in grey78</span> <span style="color: rgb(201,201,201)">Text colored in gray79</span> <span style="color: rgb(201,201,201)">Text colored in grey79</span> <span style="color: rgb(204,204,204)">Text colored in gray80</span> <span style="color: rgb(204,204,204)">Text colored in grey80</span> <span style="color: rgb(207,207,207)">Text colored in gray81</span> <span style="color: rgb(207,207,207)">Text colored in grey81</span> <span style="color: rgb(209,209,209)">Text colored in gray82</span> <span style="color: rgb(209,209,209)">Text colored in grey82</span> <span style="color: rgb(212,212,212)">Text colored in gray83</span> <span style="color: rgb(212,212,212)">Text colored in grey83</span> <span style="color: rgb(214,214,214)">Text colored in gray84</span> <span style="color: rgb(214,214,214)">Text colored in grey84</span> <span style="color: rgb(217,217,217)">Text colored in gray85</span> <span style="color: rgb(217,217,217)">Text colored in grey85</span> <span style="color: rgb(219,219,219)">Text colored in gray86</span> <span style="color: rgb(219,219,219)">Text colored in grey86</span> <span style="color: rgb(222,222,222)">Text colored in gray87</span> <span style="color: rgb(222,222,222)">Text colored in grey87</span> <span style="color: rgb(224,224,224)">Text colored in gray88</span> <span style="color: rgb(224,224,224)">Text colored in grey88</span> <span style="color: rgb(227,227,227)">Text colored in gray89</span> <span style="color: rgb(227,227,227)">Text colored in grey89</span> <span style="color: rgb(229,229,229)">Text colored in gray90</span> <span style="color: rgb(229,229,229)">Text colored in grey90</span> <span style="color: rgb(232,232,232)">Text colored in gray91</span> <span style="color: rgb(232,232,232)">Text colored in grey91</span> <span style="color: rgb(235,235,235)">Text colored in gray92</span> <span style="color: rgb(235,235,235)">Text colored in grey92</span> <span style="color: rgb(237,237,237)">Text colored in gray93</span> <span style="color: rgb(237,237,237)">Text colored in grey93</span> <span style="color: rgb(240,240,240)">Text colored in gray94</span> <span style="color: rgb(240,240,240)">Text colored in grey94</span> <span style="color: rgb(242,242,242)">Text colored in gray95</span> <span style="color: rgb(242,242,242)">Text colored in grey95</span> <span style="color: rgb(245,245,245)">Text colored in gray96</span> <span style="color: rgb(245,245,245)">Text colored in grey96</span> <span style="color: rgb(247,247,247)">Text colored in gray97</span> <span style="color: rgb(247,247,247)">Text colored in grey97</span> <span style="color: rgb(250,250,250)">Text colored in gray98</span> <span style="color: rgb(250,250,250)">Text colored in grey98</span> <span style="color: rgb(252,252,252)">Text colored in gray99</span> <span style="color: rgb(252,252,252)">Text colored in grey99</span> <span style="color: rgb(255,255,255)">Text colored in gray100</span> <span style="color: rgb(255,255,255)">Text colored in grey100</span> <span style="color: rgb(169,169,169)">Text colored in darkgrey</span> <span style="color: rgb(169,169,169)">Text colored in darkgray</span> <span style="color: rgb(0,0,139)">Text colored in darkblue</span> <span style="color: rgb(0,139,139)">Text colored in darkcyan</span> <span style="color: rgb(139,0,139)">Text colored in darkmagenta</span> <span style="color: rgb(139,0,0)">Text colored in darkred</span> <span style="color: rgb(144,238,144)">Text colored in lightgreen</span> 
</p>


<div id="outline-container-org7a9df33" class="outline-2">
<h2 id="org7a9df33"><a id="ID-FA2E424A-84B3-4DD0-A683-98702F9E51BF"></a><span class="section-number-2">1</span> Code for the color link</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">s</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">color-comp</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Completion function for color links."</span>
  (<span style="color: #0000FF;">let</span> ((color-data (<span style="color: #0000FF;">prog2</span>
                        (<span style="color: #0000FF;">save-selected-window</span>
                          (list-colors-display))
                        (<span style="color: #0000FF;">with-current-buffer</span> (get-buffer <span style="color: #008000;">"*Colors*"</span>)
                          (mapcar (<span style="color: #0000FF;">lambda</span> (line)
                                    (append (list line)
                                            (s-split <span style="color: #008000;">" "</span> line t)))
                                  (s-split <span style="color: #008000;">"\n"</span> (buffer-string))))
                      (kill-buffer <span style="color: #008000;">"*Colors*"</span>))))
    (format <span style="color: #008000;">"color:%s"</span>
            (s-trim (cadr (assoc (completing-read <span style="color: #008000;">"Color: "</span> color-data) color-data))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">color-link-face</span> (path)
  <span style="color: #036A07;">"Face function for color links."</span>
  (<span style="color: #0000FF;">or</span> (cdr (assoc path org-link-colors))
      `(<span style="color: #006FE0;">:foreground</span> ,path)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">color-link-export</span> (path description backend)
  <span style="color: #036A07;">"Export function for color links."</span>
  (<span style="color: #0000FF;">cond</span>
   ((eq backend 'html)
    (<span style="color: #0000FF;">let</span> ((rgb (assoc (downcase path) color-name-rgb-alist))
          r g b)
      (<span style="color: #0000FF;">setq</span> r (* 255 (/ (nth 1 rgb) 65535.0))
            g (* 255 (/ (nth 2 rgb) 65535.0))
            b (* 255 (/ (nth 3 rgb) 65535.0)))
      (format <span style="color: #008000;">"&lt;span style=\"color: rgb(%s,%s,%s)\"&gt;%s&lt;/span&gt;"</span>
              (truncate r) (truncate g) (truncate b)
              (<span style="color: #0000FF;">or</span> description path))))))

(org-link-set-parameters <span style="color: #008000;">"color"</span>         
                         <span style="color: #006FE0;">:face</span> 'color-link-face
                         <span style="color: #006FE0;">:complete</span> 'color-comp
                         <span style="color: #006FE0;">:export</span> 'color-link-export)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">:face</td>
<td class="org-left">color-link-face</td>
<td class="org-left">:complete</td>
<td class="org-left">color-comp</td>
<td class="org-left">:export</td>
<td class="org-left">color-link-export</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/11/08/New-color-link-in-org-9.0-using-font-lock-to-color-the-text.org">org-mode source</a></p>
<p>Org-mode version = 9.0</p>]]></content:encoded>
    </item>
    <item>
      <title>Better equation numbering in LaTeX fragments in org-mode</title>
      <link>http://jkitchin.github.io/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode</link>
      <pubDate>Mon, 07 Nov 2016 07:02:19 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[latex]]></category>
      <guid isPermaLink="false">sV0Pj44wa6HIr8UdE-ygikpo0Oo=</guid>
      <description>Better equation numbering in LaTeX fragments in org-mode</description>
      <content:encoded><![CDATA[


<p>
In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. One thing that has always bothered me though, is that each fragment is created in isolation. That means numbering is almost always wrong, and typically with each numbered equation starting with (1). Here we look at a way to fix that. Fixing it means we have to find a way to not create each fragment image in isolation; each one needs a context that enables the numbering to be correct. The idea we try here is simple: we just figure out in advance what the numbering for each equation should be, and then figure out how to get that information to the image generation.
</p>

<p>
See this video of the post in action:
</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/pcMuJlUvKCw" frameborder="0" allowfullscreen></iframe>

<p>
Here are some example equations to see how it works.
</p>

<p>
This should be numbered (1)
</p>
\begin{equation}
\int x^2 dx
\end{equation}

<p>
This is a numbered equation with a custom number. This should have (E1) as the number.
</p>
\begin{equation}\tag{E1}
\int x^2 dx
\end{equation}

<p>
But equation* is not numbered
</p>
\begin{equation*}
\int x^2 dx
\end{equation*}

<p>
LaTeX align environments are numbered. The first line is (2), the second line is not numbered (because we put <code>\nonumber</code> in the line), and the third line is (3).
</p>
\begin{align}
a = 5 \\
b=6 \nonumber \\
c = 8
\end{align}

<p>
But align* environments are not numbered.
</p>
\begin{align*}
a = 5 \\
b=6
\end{align*}

<p>
This should be numbered (4).
</p>

\begin{equation}
\int x^3 dx
\end{equation}

<p>
These should be numbered (5), (6) and (7).
</p>
\begin{align}
a = 5 \\
b=6  \\
c = 8
\end{align}

<p>
This should be numbered with (E2).
</p>
\begin{equation}\tag{E2}
\int x^2 dx 
\end{equation}

<p>
And this should be numbered (8).
</p>
\begin{equation}
\int x^2 dx 
\end{equation}

<p>
Note: This will be numbered (1) because it is exactly the same equation as a previous one! 
</p>
\begin{equation}
\int x^2 dx
\end{equation}


<p>
We can change the numbering of an equation with code like this. After this code, the next equation will be numbered (5).
</p>

<p>
The only fragments that should be numbered are equation environments, and align environments (these are the main ones that we consider here). The align environment is tricky since there is potentially more than one number in the environment. 
</p>

<p>
So, we get all the fragments, and generate a list of which ones should be numbered, and if they should what the number should be. That means we will need to count the number of numbered equations in an align environment. We will do that by getting the number of line breaks, and subtracting the number of nonumbers.
</p>

<p>
Here is the code block that does that, using advice again. A downside of this approach is that we generate the list for every fragment, which is not efficient, since it should not change in a synchronous approach to generating them.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-renumber-environment</span> (orig-func <span style="color: #6434A3;">&amp;rest</span> args)
  (<span style="color: #0000FF;">let</span> ((results '()) 
        (counter -1)
        (numberp))

    (<span style="color: #0000FF;">setq</span> results (<span style="color: #0000FF;">loop</span> for (begin .  env) in 
                        (org-element-map (org-element-parse-buffer) 'latex-environment
                          (<span style="color: #0000FF;">lambda</span> (env)
                            (cons
                             (org-element-property <span style="color: #006FE0;">:begin</span> env)
                             (org-element-property <span style="color: #006FE0;">:value</span> env))))
                        collect
                        (<span style="color: #0000FF;">cond</span>
                         ((<span style="color: #0000FF;">and</span> (string-match <span style="color: #008000;">"\\\\begin{equation}"</span> env)
                               (not (string-match <span style="color: #008000;">"\\\\tag{"</span> env)))
                          (<span style="color: #0000FF;">incf</span> counter)
                          (cons begin counter))
                         ((string-match <span style="color: #008000;">"\\\\begin{align}"</span> env)
                          (<span style="color: #0000FF;">prog2</span>
                              (<span style="color: #0000FF;">incf</span> counter)
                              (cons begin counter)                          
                            (<span style="color: #0000FF;">with-temp-buffer</span>
                              (insert env)
                              (goto-char (point-min))
                              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">\\ is used for a new line. Each one leads to a number</span>
                              (<span style="color: #0000FF;">incf</span> counter (count-matches <span style="color: #008000;">"\\\\$"</span>))
                              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">unless there are nonumbers.</span>
                              (goto-char (point-min))
                              (<span style="color: #0000FF;">decf</span> counter (count-matches <span style="color: #008000;">"\\nonumber"</span>)))))
                         (t
                          (cons begin nil)))))

    (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">setq</span> numberp (cdr (assoc (point) results)))
      (<span style="color: #0000FF;">setf</span> (car args)
            (concat
             (format <span style="color: #008000;">"\\setcounter{equation}{%s}\n"</span> numberp)
             (car args)))))
  
  (apply orig-func args))

(advice-add 'org-create-formula-image <span style="color: #006FE0;">:around</span> #'org-renumber-environment)
</pre>
</div>

<p>
You can remove the advice like this.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(advice-remove 'org-create-formula-image #'org-renumber-environment)
</pre>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 9.0</p>]]></content:encoded>
    </item>
    <item>
      <title>Justifying LaTeX preview fragments in org-mode</title>
      <link>http://jkitchin.github.io/blog/2016/11/06/Justifying-LaTeX-preview-fragments-in-org-mode</link>
      <pubDate>Sun, 06 Nov 2016 20:44:53 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[latex]]></category>
      <guid isPermaLink="false">hjotOh9E_Hff5mx_bipGH2If-Mo=</guid>
      <description>Justifying LaTeX preview fragments in org-mode</description>
      <content:encoded><![CDATA[


<p>
A colleague asked if I knew how to center the preview images of LaTeX equations in an org-buffer. This might make org-mode notes look nicer when lecturing, for example. We thought it might be possible to just offset the overlay with a before-string made up of the right number of spaces. I worked out a full solution that lets you "justify" the preview images. You have to add a :justify option to org-format-latex-options, and the option is either 'center or 'right (anything else means left-justified as the default). This will only justify equations that start at the beginning of a line to avoid modifying fragments that are in text. You should see the video to see this in action:
</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/nA9YzooqpWY" frameborder="0" allowfullscreen></iframe>

<p>
Equation 1:
\(e^{i\pi} + 1 = 0\)
</p>

<p>
An \(x^2 = -1\) equation in the text is not affected.
</p>

<p>
A display equation with some space after the equation:
\[e^{i \cdot \pi} + 1 = 0\]     
</p>

<p>
This is a numbered equation.
</p>

\begin{equation}
\int x^2 dx
\end{equation}

<p>
The idea is pretty simple, we get the width of the window, and the width of the image, and compute the offset that approximately centers or right justifies the overlay, and then add the before-string property to the overlay. While we are at it, I will add a tooltip to the image so you can see the LaTeX code that created it, and make it clickable so you can toggle it back to the code. 
I apply the functions as after advice to the function that creates the overlay, so we do not have to adapt the org code at all. Here is the code that does it.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">specify the justification you want</span>
(plist-put org-format-latex-options <span style="color: #006FE0;">:justify</span> 'center)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-justify-fragment-overlay</span> (beg end image imagetype)
  <span style="color: #036A07;">"Adjust the justification of a LaTeX fragment.</span>
<span style="color: #036A07;">The justification is set by :justify in</span>
<span style="color: #036A07;">`</span><span style="color: #D0372D;">org-format-latex-options</span><span style="color: #036A07;">'. Only equations at the beginning of a</span>
<span style="color: #036A07;">line are justified."</span>
  (<span style="color: #0000FF;">cond</span>
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Centered justification</span>
   ((<span style="color: #0000FF;">and</span> (eq 'center (plist-get org-format-latex-options <span style="color: #006FE0;">:justify</span>)) 
         (= beg (line-beginning-position)))
    (<span style="color: #0000FF;">let*</span> ((img (create-image image 'imagemagick t))
           (width (car (image-size img)))
           (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Right justification</span>
   ((<span style="color: #0000FF;">and</span> (eq 'right (plist-get org-format-latex-options <span style="color: #006FE0;">:justify</span>)) 
         (= beg (line-beginning-position)))
    (<span style="color: #0000FF;">let*</span> ((img (create-image image 'imagemagick t))
           (width (car (image-display-size (overlay-get (ov-at) 'display))))
           (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-latex-fragment-tooltip</span> (beg end image imagetype)
  <span style="color: #036A07;">"Add the fragment tooltip to the overlay and set click function to toggle it."</span>
  (overlay-put (ov-at) 'help-echo
               (concat (buffer-substring beg end)
                       <span style="color: #008000;">"mouse-1 to toggle."</span>))
  (overlay-put (ov-at) 'local-map (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
                                    (define-key map [mouse-1]
                                      `(<span style="color: #0000FF;">lambda</span> ()
                                         (<span style="color: #0000FF;">interactive</span>)
                                         (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                    map)))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">advise the function to a</span>
(advice-add 'org--format-latex-make-overlay <span style="color: #006FE0;">:after</span> 'org-justify-fragment-overlay)
(advice-add 'org--format-latex-make-overlay <span style="color: #006FE0;">:after</span> 'org-latex-fragment-tooltip)
</pre>
</div>

<p>
That is it. If you get tired of the advice, remove it like this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">(advice-remove 'org--format-latex-make-overlay 'org-justify-fragment-overlay)
(advice-remove 'org--format-latex-make-overlay 'org-latex-fragment-tooltip)
</pre>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/11/06/Justifying-LaTeX-preview-fragments-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 9.0</p>]]></content:encoded>
    </item>
    <item>
      <title>Copy formatted org-mode text from Emacs to other applications</title>
      <link>http://jkitchin.github.io/blog/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications</link>
      <pubDate>Thu, 16 Jun 2016 11:46:39 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[rtf]]></category>
      <guid isPermaLink="false">8BfFihQxeSpGlD1tGvKAFPysQFM=</guid>
      <description>Copy formatted org-mode text from Emacs to other applications</description>
      <content:encoded><![CDATA[


<p>
I do a lot of writing in org-mode and I thought it would be great if I could copy text from an org-file and paste it <i>with formatting</i> into other applications, e.g. Word, Gmail, etc&#x2026;.  Curiosity got the better of me and I wondered how this is done in other applications. It works by creating a <a href="https://www.safaribooksonline.com/library/view/rtf-pocket-guide/9781449302047/ch01.html">Rich Text Format</a> version of what you want to copy and then putting that on the clipboard. It isn't quite enough to just copy it, it needs to go in the clipboard as an RTF datatype. On Mac OSX I used <a href="http://osxdaily.com/2007/03/05/manipulating-the-clipboard-from-the-command-line/">pbcopy</a> to make that happen. 
</p>

<p>
Check out this video of this post in action: <a href="https://www.youtube.com/watch?v=irkmQnggVpE">https://www.youtube.com/watch?v=irkmQnggVpE</a> 
</p>

<p>
One simple strategy to do this from org-mode is to generate HTML by export, and then convert it to RTF with a utility, e.g. textutil. For example like this. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">formatted-copy</span> ()
  <span style="color: #036A07;">"Export region to HTML, and copy it to the clipboard."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">save-window-excursion</span>
    (<span style="color: #0000FF;">let*</span> ((buf (org-export-to-buffer 'html <span style="color: #008000;">"*Formatted Copy*"</span> nil nil t t))
           (html (<span style="color: #0000FF;">with-current-buffer</span> buf (buffer-string))))
      (<span style="color: #0000FF;">with-current-buffer</span> buf
        (shell-command-on-region
         (point-min)
         (point-max)
         <span style="color: #008000;">"textutil -stdin -format html -convert rtf -stdout | pbcopy"</span>)) 
      (kill-buffer buf))))

(global-set-key (kbd <span style="color: #008000;">"H-w"</span>) 'formatted-copy)
</pre>
</div>

<p>
This works well for everything but equations and images. Citations leave a bit to be desired, but improving this is still a challenge. 
</p>

<p>
Let us try this on some text. Some <b>bold</b>, <i>italic</i>, <span class="underline">underline</span>, <del>struck</del> and <code>verbatim</code> text to copy. Here are some example Formulas: H<sub>2</sub>O ionizes to form H<sup>+</sup>. We simply must have an equation: \(e^{i\pi} + 1 = 0\) <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. We should also have a citation <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a> and multiple citations <a class='org-ref-reference' href="#kitchin-2016-autom-data">kitchin-2016-autom-data</a>,<a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a> <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>.
</p>

<p>
A code block:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #BA36A5;">x</span> = np.linspace(0, 60, 500)
plt.figure(figsize=(4, 2))
plt.plot(np.exp(-0.1 * x) * np.cos(x),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>np.exp(-0.1 * x) * np.sin(x))
org.figure(plt.savefig(<span style="color: #008000;">'spiral.png'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  caption=<span style="color: #008000;">'A spiral.'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  attributes=[[<span style="color: #008000;">'org'</span>, <span style="color: #008000;">':width 100'</span>]])
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">''</span>)
org.table([[<span style="color: #008000;">'H1'</span>, <span style="color: #008000;">'H2'</span>], <span style="color: #D0372D;">None</span>, [1, 2], [2, 4]],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> caption=<span style="color: #008000;">'A simple table'</span>)
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">''</span>)
org.result(6 * 7)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-06-16-Copy-formatted-org-mode-text-from-Emacs-to-other-applications/spiral.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A spiral.</p>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A simple table</caption>

<colgroup>
<col  class="org-right" />

<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">H1</th>
<th scope="col" class="org-right">H2</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">1</td>
<td class="org-right">2</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-right">4</td>
</tr>
</tbody>
</table>

<pre class="example">
42
</pre>

<p>
In summary, this simple approach to generating RTF from exported HTML works really well for the simplest markups. To improve on getting figures in, getting cross-references, captions, proper references, etc&#x2026; will require a more sophisticated export approach, and probably one that exports RTF directly. That is a big challenge for another day!
</p>

<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="kitchin-2015-examp">[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, <i>ACS Catalysis</i>, <b>5(6)</b>, 3894-3899 (2015). http://dx.doi.org/10.1021/acscatal.5b00538</a></li>
<li><a id="kitchin-2016-autom-data">[kitchin-2016-autom-data] "Kitchin, Van Gulick & Zilinski, Automating Data Sharing Through Authoring Tools, <i>"International Journal on Digital Libraries"</i>, <b></b>, 1-6 (2016). http://dx.doi.org/10.1007/s00799-016-0173-7</a></li>
<li><a id="kitchin-2015-data-surfac-scien">[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, <i>"Surface Science "</i>, <b>N/A</b>, in press (2015). http://dx.doi.org/10.1016/j.susc.2015.05.007</a></li>
</ul>
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
There are probably some ways to get better images for equations. To get equation numbers and references to them will probably require a two pass build process.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
This is another place where configuration will be required for bibliography style. Also, some checks to join neighboring footnotes.
</p></div></div>


</div>
</div><p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content:encoded>
    </item>
    <item>
      <title>Using prefix args in ivy actions</title>
      <link>http://jkitchin.github.io/blog/2016/06/14/Using-prefix-args-in-ivy-actions</link>
      <pubDate>Tue, 14 Jun 2016 11:03:46 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[ivy]]></category>
      <guid isPermaLink="false">llUH4oZhmfyX6P9Gq4ewBjNC8q4=</guid>
      <description>Using prefix args in ivy actions</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. Bare bones setup</a></li>
</ul>
</div>
</div>
<p>
There is a <a href="https://github.com/abo-abo/swiper/commit/e54aa1850077d22e8007edef86d4bb751c3b7794">brand new feature</a> in ivy which allows you to pass prefix args to the action functions. This change has made it into MELPA by now, so you can try it out. Check out this <a href="#orgheadline1">1</a> for an emacs -Q setup that I used for this post. This installs ivy and org-ref with some minimal setup.
</p>

<p>
The video for this post can be found here: <a href="https://www.youtube.com/watch?v=Y8HHLAE_-yA">https://www.youtube.com/watch?v=Y8HHLAE_-yA</a> 
</p>

<p>
In this post I will show how to use this new feature to create an ivy selection function that inserts a citation from a bibtex file, and with a prefix arg lets you choose the type of citation to insert.
</p>

<p>
<a href="https://melpa.org/#/org-ref">org-ref</a> provides a function that generates candidates for selection. Each candidate is a list where the car of the list is a display string, and the cdr is an a-list of properties. I have a lot of entries in here, so it is important to have a convenient selection tool.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> org-ref-bibtex-files '(<span style="color: #008000;">"references.bib"</span>))
(length (orhc-bibtex-candidates))
</pre>
</div>

<p>
Here is an example of the first entry in my bibliography. We will need to extract the key from that. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(elt (orhc-bibtex-candidates) 0)
</pre>
</div>



<p>
Here is the key from that entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(cdr (assoc <span style="color: #008000;">"=key="</span> (elt (orhc-bibtex-candidates) 0)))
</pre>
</div>


<p>
By default we will insert that as <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a> but there are other types of citations we might use too like <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>. org-ref provides a list of citation types we could insert. Here they are. This somewhat complicated code just wraps the string so it fits in the blog post nicely.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-temp-buffer</span> 
  (insert (format <span style="color: #008000;">"%s"</span> org-ref-cite-types))
  (fill-region (point-min) (point-max))
  (buffer-string))
</pre>
</div>

<p>
So, we are now prepared to make a simple ivy function to query our bibliography that has a default action to insert a standard citation, but we can use a prefix to change the citation type. The prefix arg is stored in the global variable ivy-current-prefix-arg which can be checked inside the action function. We can check for it in the action function and do something different if a prefix arg is used. Here is the function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">cite</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"select: "</span> (orhc-bibtex-candidates)
            <span style="color: #006FE0;">:action</span> (<span style="color: #0000FF;">lambda</span> (entry) 
                      (<span style="color: #0000FF;">let</span> ((key (cdr (assoc <span style="color: #008000;">"=key="</span> entry)))
                            (type (<span style="color: #0000FF;">if</span> ivy-current-prefix-arg
                                      (ivy-read <span style="color: #008000;">"type: "</span> org-ref-cite-types)
                                    <span style="color: #008000;">"cite"</span>)))
                        (<span style="color: #0000FF;">with-ivy-window</span>
                          (insert (format <span style="color: #008000;">"%s:%s"</span> type key)))))))
</pre>
</div>

<p>
To get the default action, we run M-x cite, enter our query, select an entry and press return. To get an alternate cite type, we run M-x cite, enter the query, select an entry, then type  C-u return, which will prompt you for an alternate citation type, then insert your choice and the citation. Here are some examples.
<a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>  <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a> <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</p>



<p>
In summary, these aren't functions you would want to use; they don't handle a lot of the nuances of multiple citations. They are just to illustrate in a pretty simple way how easy it is to use a prefix arg in an ivy action function now! 
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> Bare bones setup</h2>
<div class="outline-text-2" id="text-1">
<p>
This will setup the bare bones emacs that I used for this post.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> package-user-dir (expand-file-name <span style="color: #008000;">"sandbox"</span>))

(<span style="color: #0000FF;">setq</span> package-archives
      '((<span style="color: #008000;">"melpa"</span> . <span style="color: #008000;">"http://melpa.org/packages/"</span>)))

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">package</span>)

<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">Code:</span>

(package-initialize)

(<span style="color: #0000FF;">unless</span> (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(<span style="color: #0000FF;">eval-when-compile</span>
  (<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">use-package</span>))

(<span style="color: #0000FF;">setq</span> use-package-always-ensure t)

(<span style="color: #0000FF;">use-package</span> <span style="color: #D0372D;">ivy</span>)

(<span style="color: #0000FF;">use-package</span> <span style="color: #D0372D;">org-ref</span>
 <span style="color: #006FE0;">:init</span> 
 (<span style="color: #0000FF;">setq</span> org-ref-default-bibliography '(<span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>))
 <span style="color: #006FE0;">:config</span> (<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">org-ref-helm-cite</span>))

(global-visual-line-mode 1)
(<span style="color: #0000FF;">setq</span> org-confirm-babel-evaluate nil)
(load-theme 'leuven)
</pre>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/14/Using-prefix-args-in-ivy-actions.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content:encoded>
    </item>
    <item>
      <title>Dynamic sorting with ivy</title>
      <link>http://jkitchin.github.io/blog/2016/06/13/Dynamic-sorting-with-ivy</link>
      <pubDate>Mon, 13 Jun 2016 15:51:19 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[ivy]]></category>
      <guid isPermaLink="false">hLJ9e4x3ygVWdrOY6ZX81mTFbQg=</guid>
      <description>Dynamic sorting with ivy</description>
      <content:encoded><![CDATA[


<p>
I have been exploring ivy a lot these days as a general purpose completion backend. One need I have is dynamic resorting of candidates. I illustrate how to achieve that here. A big thanks to Oleh Krehel (author of ivy) for a lot help today getting this working!
</p>

<p>
You may want to check out the video: <a href="https://www.youtube.com/watch?v=nFKfM3MOAd0">https://www.youtube.com/watch?v=nFKfM3MOAd0</a> 
</p>

<p>
First, a typical ivy-read example. Below I have a set of contact data for some people, and have setup an ivy-read command that inserts the email in the current buffer by default, and a second action for the phone. What is missing that I would like to do is dynamically reorder the candidates, including sorting all the candidates, swapping candidates up and down to fine tune the order, and then finally applying an action to all the candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ct</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"contact: "</span> '((<span style="color: #008000;">"Kno Body"</span> <span style="color: #008000;">"kb@true.you"</span> <span style="color: #008000;">"555-1212"</span>)
                          (<span style="color: #008000;">"A. Person"</span> <span style="color: #008000;">"ap@some.come"</span> <span style="color: #008000;">"867-5304"</span>)
                          (<span style="color: #008000;">"G. Willikers"</span> <span style="color: #008000;">"gw@not.me"</span> <span style="color: #008000;">"555-5555"</span>))
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"o"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 0))))
                       <span style="color: #008000;">"insert email"</span>)
                      (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 1))))
                       <span style="color: #008000;">"insert phone"</span>))))
</pre>
</div>

<p>
So, first a set of functions to manipulate the candidates. We create a swap function, two functions to move candidates up and down, and two functions that sort the whole list of candidates in ascending and descending order. In each case, we just update the ivy collection with the new modified collection, we save the currently selected candidate, and then reset the state to update the candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">swap</span> (i j lst)
  <span style="color: #036A07;">"Swap index I and J in the list LST."</span> 
  (<span style="color: #0000FF;">let</span> ((tempi (nth i lst)))
    (<span style="color: #0000FF;">setf</span> (nth i lst) (nth j lst))
    (<span style="color: #0000FF;">setf</span> (nth j lst) tempi))
  lst)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-move-up</span> ()
  <span style="color: #036A07;">"Move ivy candidate up."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (swap ivy--index (1- ivy--index) (ivy-state-collection ivy-last)))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-move-down</span> ()
  <span style="color: #036A07;">"Move ivy candidate down."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (swap ivy--index (1+ ivy--index) (ivy-state-collection ivy-last)))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-a-z</span> ()
  <span style="color: #036A07;">"Sort ivy candidates from a-z."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (cl-sort (ivy-state-collection ivy-last)
                 (<span style="color: #0000FF;">if</span> (listp (car (ivy-state-collection ivy-last)))
                     (<span style="color: #0000FF;">lambda</span> (a b)
                       (string-lessp (car a) (car b)))
                   (<span style="color: #0000FF;">lambda</span> (a b)
                     (string-lessp a b)))))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-z-a</span> ()
  <span style="color: #036A07;">"Sort ivy candidates from z-a."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (cl-sort (ivy-state-collection ivy-last)
                 (<span style="color: #0000FF;">if</span> (listp (car (ivy-state-collection ivy-last)))
                     (<span style="color: #0000FF;">lambda</span> (a b)
                       (string-greaterp (car a) (car b)))
                   (<span style="color: #0000FF;">lambda</span> (a b)
                     (string-greaterp a b)))))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))
</pre>
</div>


<p>
Now, we make a keymap to bind these commands so they are convenient to use. I will use C-arrows for swapping, and M-arrows for sorting the whole list. I also add M-&lt;return&gt; which allows me to use a numeric prefix to apply an action to all the candidates. M-&lt;return&gt; applies the default action. M-1 M-&lt;return&gt; applies the first action, M-2 M-&lt;return&gt; the second action, etc&#x2026;
</p>

<p>
This specific implementation assumes your candidates have a cdr.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> ivy-sort-keymap
      (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
        (define-key map (kbd <span style="color: #008000;">"C-&lt;up&gt;"</span>) 'ivy-move-up)
        (define-key map (kbd <span style="color: #008000;">"C-&lt;down&gt;"</span>) 'ivy-move-down)

        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">sort all keys</span>
        (define-key map (kbd <span style="color: #008000;">"M-&lt;up&gt;"</span>) 'ivy-a-z)
        (define-key map (kbd <span style="color: #008000;">"M-&lt;down&gt;"</span>) 'ivy-z-a)

        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">map over all all entries with nth action</span>
        (define-key map (kbd <span style="color: #008000;">"M-&lt;return&gt;"</span>)
          (<span style="color: #0000FF;">lambda</span> (arg)
            <span style="color: #036A07;">"Apply the numeric prefix ARGth action to every candidate."</span>
            (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
            <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">with no arg use default action</span>
            (<span style="color: #0000FF;">unless</span> arg (<span style="color: #0000FF;">setq</span> arg (car (ivy-state-action ivy-last))))
            (ivy-beginning-of-buffer)
            (<span style="color: #0000FF;">let</span> ((func (elt (elt (ivy-state-action ivy-last) arg) 1)))
              (<span style="color: #0000FF;">loop</span> for i from 0 to (- ivy--length 1)
                    do 
                    (funcall func
                             (<span style="color: #0000FF;">let</span> ((cand (elt
                                          (ivy-state-collection ivy-last)
                                          ivy--index)))
                               (<span style="color: #0000FF;">if</span> (listp cand)
                                   (cdr cand)
                                 cand)))
                    (ivy-next-line)))
            (ivy-exit-with-action
             (<span style="color: #0000FF;">lambda</span> (x) nil))))
        map))
</pre>
</div>

<p>
Ok, now we modify our ivy-read function to use the keymap.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ctn</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"contact: "</span> '((<span style="color: #008000;">"Kno Body"</span> <span style="color: #008000;">"kb@true.you"</span> <span style="color: #008000;">"555-1212"</span>)
                          (<span style="color: #008000;">"A. Person"</span> <span style="color: #008000;">"ap@some.come"</span> <span style="color: #008000;">"867-5304"</span>)
                          (<span style="color: #008000;">"G. Willikers"</span> <span style="color: #008000;">"gw@not.me"</span> <span style="color: #008000;">"555-5555"</span>))
            <span style="color: #006FE0;">:keymap</span> ivy-sort-keymap
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"o"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 0))))
                       <span style="color: #008000;">"insert email"</span>)
                      (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 1))))
                       <span style="color: #008000;">"insert phone"</span>))))
</pre>
</div>

<p>
kb@true.you, gw@not.me, ap@some.come, 555-1212, 555-5555, 867-5304
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/13/Dynamic-sorting-with-ivy.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content:encoded>
    </item>
    <item>
      <title>ob-hy.el - or better integration of hylang in org-mode</title>
      <link>http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode</link>
      <pubDate>Fri, 01 Apr 2016 19:31:37 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">9wlG2HzzI7-88z-SmPn9f-oE0qg=</guid>
      <description>ob-hy.el - or better integration of hylang in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tests</a>
<ul>
<li><a href="#sec-1-1">1.1. Simple</a></li>
<li><a href="#sec-1-2">1.2. vars in header</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Summary</a></li>
</ul>
</div>
</div>
<p>
The point of this post is to develop and test a more substantial integration of Hy into org-mode. We develop ob-hy.el here. This is based off of ob-clojure.el.
</p>

<p>
The next few blocks will get tangled to ob-hy.el. First, some variables.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">ob</span>)

(add-to-list 'org-structure-template-alist
             '(<span style="color: #008000;">"hy"</span> <span style="color: #008000;">"#+BEGIN_SRC hy\n?\n#+END_SRC"</span> <span style="color: #008000;">"&lt;src lang=\"hy\"&gt;\n?\n&lt;/src&gt;"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-tangle-lang-exts</span>)
(add-to-list 'org-babel-tangle-lang-exts '(<span style="color: #008000;">"hy"</span> . <span style="color: #008000;">"hy"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-default-header-args:hy</span> '())
(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-header-args:hy</span> '((<span style="color: #006FE0;">:results</span> . <span style="color: #008000;">"output"</span>)))
</pre>
</div>

<pre class="example">
org-babel-header-args:hy
</pre>

<p>
Next a function to expand the code body. This will allow us to pass vars in the header.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-expand-body:hy</span> (body params)
  <span style="color: #036A07;">"Expand BODY according to PARAMS, return the expanded body."</span>
  (<span style="color: #0000FF;">let*</span> ((vars (mapcar #'cdr (org-babel-get-header params <span style="color: #006FE0;">:var</span>)))
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (print-level nil)
         (print-length nil)
         (body (org-babel-trim
                (<span style="color: #0000FF;">if</span> (&gt; (length vars) 0)
                    (concat <span style="color: #008000;">"(let ["</span>
                            (mapconcat
                             (<span style="color: #0000FF;">lambda</span> (var)
                               (format
                                <span style="color: #008000;">"%S (quote %S)"</span>
                                (car var)
                                (cdr var)))
                             vars <span style="color: #008000;">"\n      "</span>)
                            <span style="color: #008000;">"]\n"</span> body <span style="color: #008000;">")"</span>)
                  body))))
    (<span style="color: #0000FF;">when</span> (not (member <span style="color: #008000;">"output"</span> result-params))
      (<span style="color: #0000FF;">setq</span> body (format <span style="color: #008000;">"(print (do  %s\n))"</span> body)))
    body))
</pre>
</div>

<pre class="example">
org-babel-expand-body:hy
</pre>

<p>
And a function to execute the body. We still use a simple approach to write the code to a temp-file, execute it, capture the output, and delete the file. This limits things to
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  <span style="color: #036A07;">"Execute a block of hy code with Babel."</span>
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>))
         result
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (body (org-babel-expand-body:hy body params)))

    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))

    (<span style="color: #0000FF;">unwind-protect</span>
        (<span style="color: #0000FF;">progn</span>
          (<span style="color: #0000FF;">cond</span>
           ((member <span style="color: #008000;">"body"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result body))
           ((member <span style="color: #008000;">"python"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py %s"</span> tempfile))))
           ((member <span style="color: #008000;">"ast"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py -a -np %s"</span> tempfile))))
           (t
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy %s"</span> tempfile)))))

          (<span style="color: #0000FF;">org-babel-result-cond</span> result-params
            result
            (<span style="color: #0000FF;">condition-case</span> nil (org-babel-script-escape result)
              (<span style="color: #ff0000; font-weight: bold;">error</span> result))))
      (delete-file tempfile))))

(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">ob-hy</span>)
</pre>
</div>

<pre class="example">
ob-hy
</pre>

<p>
Now we tangle and load those blocks.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(load-file <span style="color: #008000;">"ob-hy.el"</span>)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Next, we do some tests. They are all simple tests.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tests</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Simple</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
We can see how this turns into Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
print(u'Hy world')
</pre>

<p>
or the AST:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Module(
    body=[Expr(value=Call(func=Name(id='print'), args=[Str(s=u'Hy world')], keywords=[], starargs=None, kwargs=None))])
</pre>

<p>
Let's test :results value. It is not quite the value since we seem to get everything that is output from the script, but if you don't print stuff, it seems to get it right.
</p>

<div class="org-src-container">

<pre class="src src-hy"><span style="color: #008000;">"test"</span>
(<span style="color: #006FE0;">+</span> 1 2 3)
</pre>
</div>

<pre class="example">
6
</pre>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> vars in header</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Here we test out adding variables to the header lines.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="hy-world">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Interesting, I am not sure where the space between them comes from. Let's check out the :results body option. It will show us the hy script that gets run.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "world")]
(print "Hy" data))
</pre>

<p>
Nothing obvious about the space there. We can test out passing block results in here.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
Hy  world
</pre>

<p>
Here is the body of that:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "Hy world
")]
(print data))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary</h2>
<div class="outline-text-2" id="text-2">
<p>
It works well enough to make testing in org-mode pretty convenient. I can't think of anything else it "needs" right now, although communication with a repl might make it faster, and sessions are not supported at the moment. Saving that for another day ;)
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/01/ob-hy.el---or-better-integration-of-hylang-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>More on Hy and why I think it is a big deal</title>
      <link>http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal</link>
      <pubDate>Thu, 31 Mar 2016 13:41:43 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">K3rprBTSYnrEBGagSwWNLrb8STo=</guid>
      <description>More on Hy and why I think it is a big deal</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Editing with hy-mode and lispy</a></li>
<li><a href="#sec-2">2. Python with no whitespace, or commas in lists</a></li>
<li><a href="#sec-3">3. No confusion in expressions in statements</a></li>
<li><a href="#sec-4">4. Proper multiline lambda functions</a></li>
<li><a href="#sec-5">5. Macros and Extensible syntax</a>
<ul>
<li><a href="#sec-5-1">5.1. Some math</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Interoperability with Python</a></li>
<li><a href="#sec-7">7. Integration of emacs and Hy</a></li>
<li><a href="#sec-8">8. Hypster and Hy Society.</a></li>
<li><a href="#sec-9">9. What do we still need?</a></li>
</ul>
</div>
</div>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/30/OMG-A-Lisp-that-runs-python/">Yesterday</a> I talked about <a href="https://github.com/hylang/hy">hylang</a> , a Lisp that basically compiles to and runs Python code. Today, I want to show a few reasons why this is a great idea, and an important one. Below I give a few examples of why the hylang approach is better (in my opinion of course) than Python with a few examples of things I have always wanted in Python but couldn't get.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Editing with hy-mode and lispy</h2>
<div class="outline-text-2" id="text-1">
<p>
There is a major mode for Hy: <a href="https://github.com/hylang/hy-mode">https://github.com/hylang/hy-mode</a> also on MELPA. It gives us some syntax highlighting and better access to a REPL.
</p>

<p>
Let's load lispy (<a href="https://github.com/abo-abo/lispy">https://github.com/abo-abo/lispy</a> ) for it so we also get amazing editing. I always wanted to use lispy style navigation and editing in Python, but the whitespace and indentation did not make it that easy. Problem solved with these. @abo-abo already added basic eval support for Hy to lispy since the post yesterday (<a href="https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c">https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c</a> ); Thanks!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-hook 'hy-mode-hook
          (<span style="color: #0000FF;">lambda</span> ()
            (lispy-mode 1)))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Python with no whitespace, or commas in lists</h2>
<div class="outline-text-2" id="text-2">
<p>
You can still use indentation (it is good style), but this works!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
(<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3) (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
(<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This looks nicer.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
  (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3)
    (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
    (<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This is a big deal too. Using Python in sessions in org-mode has always been a little complicated by the indentation and whitespace, especially with nested loops and functions. That problem is probably gone.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> No confusion in expressions in statements</h2>
<div class="outline-text-2" id="text-3">
<p>
In Python you can do this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 5
<span style="color: #0000FF;">print</span>(a)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
But not this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(a=5)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
  File "&lt;stdin&gt;", line 1
   print(a=5)
          ^
SyntaxError: invalid syntax
</pre>

<p>
You can't put assignment statements and expression statements anywhere you want, they are only legal syntax in some places. For example, a=5 above actually looks like the print function has an argument of a that set to 5. Not true in Lisp; there are only expressions! So this works fine.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">setv</span> a 5))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> a 5))
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
I just like this style of simple syntax.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Proper multiline lambda functions</h2>
<div class="outline-text-2" id="text-4">
<p>
Python syntax fundamentally limits you to one line lambdas. Not so for Hy. Let's use one in a filter to print even numbers. Here is an example with a two-liner but you could make them more complicated. In Python, you have to make a separate function for this. That isn't terrible, but if it is never used for anything else, it could be avoided.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="lambda">(<span style="color: #006FE0;">setv</span> a [0 1 2 3 4 5 6 7 8])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">display</span> [list filter]
  (<span style="color: #0000FF;">for</span> [x list] (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">filter</span> x) (<span style="color: #006FE0;">print</span> x))))

(display a (<span style="color: #0000FF;">lambda</span> [x]
             (<span style="color: #006FE0;">=</span> (<span style="color: #006FE0;">%</span> x 2) 0)))
</pre>
</div>

<pre class="example">
0
2
4
6
8
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Macros and Extensible syntax</h2>
<div class="outline-text-2" id="text-5">
<p>
It is not easy to get real macro (code expansion) behavior in Python. Yes, there are decorators, and closures, and related things that get close to it. But there are not lisp-like macros.
</p>

<p>
Here is a (too) simple macro to allow for infix notation. It only works for two arguments, but could be extended for multiple arguments.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">infix</span> [code]
  (<span style="color: #006FE0;">quasiquote</span> ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> (infix (1 + 1)))
</pre>
</div>
<pre class="example">
2
</pre>

<p>
If we want new syntax we can get it!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">$</span> [code]
  (<span style="color: #006FE0;">quasiquote</span>
   ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> #$(1 + 1))
</pre>
</div>

<pre class="example">
2
</pre>

<p>
Why is this nice? Here is a math example that shows why you might want to change syntax.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Some math</h3>
<div class="outline-text-3" id="text-5-1">
<p>
See <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/">http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/</a> for the Python version of solving the Bessel equation numerically. Here we do it with hylang.
</p>

<p>
Why would we want infix notation? Here is a good reason. The prefix notation is not easy to read. Compare:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">dzdx</span> = 1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
</pre>
</div>

<p>
The infix notation is simpler to read. Still, the code below is not that hard to figure out, especially if there was a generalized infix notation that allowed (with parens for explicit operation precedence):
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (nfx (1.0 / x**2) * ((-x * z) - ((x**2 - nu**2) * y))))
</pre>
</div>

<p>
So, here is the hylang equivalent to my previous Python version.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"hy-ode.png"</span>)
</pre>
</div>

<pre class="example">
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
None
</pre>


<div class="figure">
<p><img src="/media/2016-03-31-More-on-Hy-and-why-I-think-it-is-a-big-deal/hy-ode.png"> 
</p>
</div>

<p>
This looks really good to me, except for that prefix math. The array slice syntax is interesting. Not that obvious yet.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Interoperability with Python</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop">http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop</a> 
</p>

<p>
Write Hy code and use it in Python. Use Python code in Hy. Repeat. Sweet.
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Integration of emacs and Hy</h2>
<div class="outline-text-2" id="text-7">
<p>
This isn't so beautiful but it illustrates  a pretty awesome integration of Hy(python) into Emacs!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">hy</span> (body)
  `(<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
          (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
     (message (format <span style="color: #008000;">"code: %S"</span> ,body))
     (<span style="color: #0000FF;">with-temp-file</span> tempfile
       (mapc (<span style="color: #0000FF;">lambda</span> (form) (insert (format <span style="color: #008000;">"%s"</span> form))) ,body))
     (read (<span style="color: #0000FF;">unwind-protect</span>
               (shell-command-to-string
                (format <span style="color: #008000;">"hy %s"</span> tempfile))
             (delete-file tempfile)))))

(aref (<span style="color: #0000FF;">hy</span> '((import numpy)
            (setv a (numpy.array [1 2 3]))
            (setv b (numpy.array [1 2 3]))
            (print (* a b))))
      1)
</pre>
</div>

<pre class="example">
4
</pre>

<p>
This isn't perfect, and there are many ways it could break down. But if you are careful to make the output "read"able, you can literally embed Hy code in Emacs lisp and use the results, a total win for Science! I feel like it might need something like progn, but that would not change what this does dramatically.
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Hypster and Hy Society.</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://notes.pault.ag/hy-survival-guide/">http://notes.pault.ag/hy-survival-guide/</a> ROTFL. <b>ironically</b> of course ;)
</p>

<p>
And the <a href="https://twitter.com/hylang">@hylang</a> Twitter account is run by Hy Society. Nice.
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> What do we still need?</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li>Experience. Hy seems relatively young compared to other Lisps. It isn't clear yet if this could work like Python does at scale in research. I sure look forward to finding out though!
</li>
<li>Proper infix notation for engineering math. I could live with no operator precedence if it led to a quicker solution for now. As long as something like (1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)) is legal!
</li>
<li>A proper integration with org-mode and the REPL.
</li>
<li>Toolchains like emacs-lisp has. I just love those. Killer debugging, access to hyperlinked documentation, code navigation, &#x2026; Maybe integration with something like SLIME or CIDER? Hyder?
</li>
<li>Use it in a proper big project to find out where the limitations are, maybe Hycse as a companion to Pycse (<a href="http://kitchingroup.cheme.cmu.edu/pycse/">http://kitchingroup.cheme.cmu.edu/pycse/</a> )? or a rewrite of <a href="http://kitchingroup.cheme.cmu.edu/dft-book/">http://kitchingroup.cheme.cmu.edu/dft-book/</a> in Hy?
</li>
</ol>

<p>
Overall, I am pretty excited about this project. The syntax is a bit reminiscent of Clojure, and Racket, the former by design. Lots of new ideas still seem to be percolating in, so there is likely good stuff to see in the future!
</p>

<p>
I haven't used it enough to see the warts yet, but already the top issues I had with Python are largely addressed, so I see this as a way to continue progress with all the benefits of Python.
</p>

<img src="https://imgs.xkcd.com/comics/lisp_cycles.png">
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
