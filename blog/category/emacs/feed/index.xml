<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sat, 24 Oct 2015 17:42:27 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Saving the current restriction and restoring it while following links</title>
      <link>http://jkitchin.github.io/blog/2015/10/24/Saving-the-current-restriction-and-restoring-it-while-following-links</link>
      <pubDate>Sat, 24 Oct 2015 13:41:45 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">YT9lKIGC8EOMKRbm2EP4wgSTpz0=</guid>
      <description>Saving the current restriction and restoring it while following links</description>
      <content:encoded><![CDATA[



<p>
On the org-mode mailing list there has been some discussion about following id links. The issue is that if your buffer is narrowed, clicking on the link does not change the restriction to actually take you to the entry. This is debatably desirable. If I click on a link, I want it to go where it points. But, I might also like to go back to my narrowed view. So here consider how to save the state of narrowing, and restore it. We modify the function that opens an id link to save the restriction, and widen the buffer if necessary.
</p>

<p>
Saving the restriction seems easy, we just save a marker to point, and the point-min and point-max. We save the marker for a convenient way to get the buffer, and perhaps the actual point. We advise the C-c &amp; function to restore the restriction after we leave it. This should fix the restriction in whatever buffer we undid it in.
</p>

<p>
Here is the code that seems to work for me. Thanks to Rasmus for the idea on saving the restriction data.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">*saved-restriction*</span> nil
 <span style="color: #036A07;">"A global var containing the current restriction. Returns (point-marker point-min point-max"</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">save-current-restriction</span> ()
  <span style="color: #036A07;">"Save the current restriction at point."</span>
  (<span style="color: #0000FF;">setq</span> *saved-restriction*
        (<span style="color: #0000FF;">if</span> (buffer-narrowed-p)
            (list (point-marker) (point-min) (point-max))
          nil)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">restore-saved-restriction</span> ()
  <span style="color: #036A07;">"Restore the last saved restriction."</span>
  (<span style="color: #0000FF;">when</span> *saved-restriction*
    (set-buffer (marker-buffer (car *saved-restriction*)))
    (narrow-to-region (nth 1 *saved-restriction*)
                      (nth 2 *saved-restriction*)))
  (<span style="color: #0000FF;">setq</span> *saved-restriction* nil))

<span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">' actually modify this function to save the restriction, and widen if needed.</span>
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-id-open</span> (id)
  <span style="color: #036A07;">"Go to the entry with id ID."</span>
  (org-mark-ring-push)
  (<span style="color: #0000FF;">let</span> ((m (org-id-find id 'marker))
        cmd)
    (<span style="color: #0000FF;">unless</span> m
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"Cannot find entry with ID \"%s\""</span> id))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Use a buffer-switching command in analogy to finding files</span>
    (<span style="color: #0000FF;">setq</span> cmd
          (<span style="color: #0000FF;">or</span>
           (cdr
            (assq
             (cdr (assq 'file org-link-frame-setup))
             '((find-file . switch-to-buffer)
               (find-file-other-window . switch-to-buffer-other-window)
               (find-file-other-frame . switch-to-buffer-other-frame))))
           'switch-to-buffer-other-window))
    (<span style="color: #0000FF;">if</span> (not (equal (current-buffer) (marker-buffer m)))
        (funcall cmd (marker-buffer m)))
    (save-current-restriction)
    (<span style="color: #0000FF;">when</span> (&gt; m (point-max))
      (widen))
    (goto-char m)
    (move-marker m nil)
    (org-show-context)))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">And we advise the function going back to restore the restriction.</span>
(<span style="color: #0000FF;">defadvice</span> <span style="color: #006699;">org-mark-ring-goto</span> (after restore-my-restriction () activate)
  <span style="color: #036A07;">"Restore narrowing."</span>
  (restore-saved-restriction))
</pre>
</div>

<pre class="example">
org-mark-ring-goto
</pre>

<p>
This seems to preserve restrictions in the current buffer and in other buffers, as long as I use C-c &amp; to invoke org-mark-ring goto. I am not sure how easy it would be to make this work for all links. Each link has its own function for following so I am not sure we can easily get them all to do this unless there is some high level function to advise like org-mouse-down-mouse or something similar. It also has the limitation that the restoration only occurs using org-mark-ring-goto, unless you specifically run the  (restore-saved-restriction) function yourself. That could be made an interactive function for that purpose. Otherwise, this seems like a reasonable approach.</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/24/Saving-the-current-restriction-and-restoring-it-while-following-links.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Line numbers in org-mode code blocks</title>
      <link>http://jkitchin.github.io/blog/2015/10/13/Line-numbers-in-org-mode-code-blocks</link>
      <pubDate>Tue, 13 Oct 2015 08:58:34 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">uiVEeY3zbYDjvvhyKVdNcK5To3s=</guid>
      <description>Line numbers in org-mode code blocks</description>
      <content:encoded><![CDATA[



<p>
Some of my students have wanted to show line numbers in code blocks. This is especially useful for when you run a Python block, and you get an error message with a line number in it. Right now, to figure out which line that is, you have to into the code block, type C-c ' to get into edit mode, and turn line numbers on. We look into how to achieve that here.
</p>

<p>
You may want to see the video here: <a href="https://www.youtube.com/watch?v=kinWijGzXms">https://www.youtube.com/watch?v=kinWijGzXms</a> .
</p>

<p>
First, we need to get the region that is the code block. We can find some info in the org-element, but, the :begin and :end include lines we don't want, like the header lines, and the results. But, we can get the beginning, and maybe from there search forward to the block. Run this code block to see where the point goes.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp" id="boring-example"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">a boring comment</span>

(<span style="color: #0000FF;">progn</span>
  (+ 40 2))

(goto-char (org-element-property <span style="color: #006FE0;">:begin</span> (org-element-context)))
(re-search-forward (regexp-quote (org-element-property <span style="color: #006FE0;">:value</span> (org-element-context))))
(goto-char (match-beginning 0))
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">number of lines in block. The last carriage return doesn't count.</span>
(1- (length (s-split <span style="color: #008000;">"\n"</span> (org-element-property <span style="color: #006FE0;">:value</span> (org-element-context)))))
</pre>
</div>

<pre class="example">
9
</pre>

<p>
So, we can get the number of lines, and move the point to the first line. For numbers, we will use overlays. Here is a simple way to put a number at the beginning of a line.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let</span> (ov)
  (beginning-of-line)
  (<span style="color: #0000FF;">setq</span> ov (make-overlay (point) (point)))
  (overlay-put ov 'before-string <span style="color: #008000;">"1"</span>))
</pre>
</div>

<pre class="example">
1
</pre>

<p>
The next thing to do is make a function that puts a number at the beginning of a line. We might as well store these overlays in a variable, so they are easy to remove later. This is just for exploration of how to do it. Later we combine all these pieces together.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">number-line-overlays</span> '()
  <span style="color: #036A07;">"List of overlays for line numbers."</span>)

(make-variable-buffer-local 'number-line-overlays)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">number-line</span> (N)
 <span style="color: #036A07;">"Put an overlay at the beginning of a line."</span>
  (beginning-of-line)
  (<span style="color: #0000FF;">let</span> (ov)
    (<span style="color: #0000FF;">setq</span> ov (make-overlay (point) (point)))
    (overlay-put ov 'before-string (format <span style="color: #008000;">"%3s"</span> (number-to-string N)))
    (add-to-list 'number-line-overlays ov)))

(number-line 4)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">#&lt;overlay from 1782 to 1782 in blog.org&gt;</td>
</tr>
</tbody>
</table>


<p>
That looks promising. Let's make a function to clear those overlays. It is so easy it may not even be worth writing.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">number-line-clear</span> ()
  (mapc 'delete-overlay number-line-overlays)
  (<span style="color: #0000FF;">setq</span> number-line-overlays '()))

(number-line-clear)
</pre>
</div>

<p>
Finally, we are ready to hack up the code block numbering code. The numbers will not automatically update, so we will write a function that numbers the block, but only temporarily. Any key press will get rid of the numbers so we can get back to work.  I am going to go ahead and make this a stand-alone function and block.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">number-line-overlays</span> '()
  <span style="color: #036A07;">"List of overlays for line numbers."</span>)

(make-variable-buffer-local 'number-line-overlays)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">number-line-src-block</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">save-excursion</span>
    (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
           (nlines (- (length
                       (s-split
                        <span style="color: #008000;">"\n"</span>
                        (org-element-property <span style="color: #006FE0;">:value</span> src-block)))
                      1)))
      (goto-char (org-element-property <span style="color: #006FE0;">:begin</span> src-block))
      (re-search-forward (regexp-quote (org-element-property <span style="color: #006FE0;">:value</span> src-block)))
      (goto-char (match-beginning 0))

      (<span style="color: #0000FF;">loop</span> for i from 1 to nlines
            do
            (beginning-of-line)
            (<span style="color: #0000FF;">let</span> (ov)
              (<span style="color: #0000FF;">setq</span> ov (make-overlay (point) (point)))
              (overlay-put ov 'before-string (format <span style="color: #008000;">"%3s"</span> (number-to-string i)))
              (add-to-list 'number-line-overlays ov))
            (next-line))))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">now read a char to clear them</span>
  (read-key <span style="color: #008000;">"Press a key to clear numbers."</span>)
  (mapc 'delete-overlay number-line-overlays)
  (<span style="color: #0000FF;">setq</span> number-line-overlays '()))

(number-line-src-block)
</pre>
</div>

<p>
I am not sure how to get the numbers to automatically update smoothly like they do in linum-mode. That code uses a lot of hooks to make updates work, and embeds them in a minor mode to get rid of them. It also puts them in the fringe I think, but it is not clear how that is done.
</p>

<p>
We could modify what happens after the numbers are put on, e.g. pressing numbers might jump to a line, or some other kind of functionality. I don't have a critical need for this right now, so I didn't explore it more. Let me know if you have any good ideas for it!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/13/Line-numbers-in-org-mode-code-blocks.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A checkbox list in org-mode with one value</title>
      <link>http://jkitchin.github.io/blog/2015/10/05/A-checkbox-list-in-org-mode-with-one-value</link>
      <pubDate>Mon, 05 Oct 2015 19:15:25 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">diCVFNxzA9WpPeWPOIIb2GOs73o=</guid>
      <description>A checkbox list in org-mode with one value</description>
      <content:encoded><![CDATA[



<p>
A while ago I had a need for a checklist in org-mode where only one value would be checked at a time. Like a radio button in a browser form. That isn't as far as I know a feature yet, but it was not hard to achieve thanks to the org-element api.  My simple idea is to make a function that will be added to the org-checkbox-statistics-hook. The function will uncheck all the boxes, and recheck the one you just clicked with a hybrid of manipulating the cursor and inserting characters with org-element code. We will use an attribute on the checklist to indicate it is a "radio" list. This seems like a feature that might already exist, but I couldn't find it.
</p>

<p>
Here is the code we run. First, we make sure we are on a plain list that has an attr_org property of ":radio", that way this won't apply to all lists, just the radio lists. Then, we loop through each element in the structure, and if it is checked, we replace [X] with [ ]. Then, we reinsert the X and delete a space, which puts [X] where we originally clicked, or used C-c C-c. Finally, we add it to the hook, so it only gets run when a checkbox is changed via clicking with org-mouse, or C-c C-c. Of course, this doesn't work if you type X in the box.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">dash</span>)
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">check-hook-fn</span> ()
  (<span style="color: #0000FF;">when</span> (-contains? (org-element-property
                     <span style="color: #006FE0;">:attr_org</span>
                     (org-element-property <span style="color: #006FE0;">:parent</span> (org-element-context)))
                    <span style="color: #008000;">":radio"</span>)
    (<span style="color: #0000FF;">save-excursion</span>
      (<span style="color: #0000FF;">loop</span> for el in (org-element-property <span style="color: #006FE0;">:structure</span> (org-element-context))
            do
            (goto-char (car el))
            (<span style="color: #0000FF;">when</span> (re-search-forward <span style="color: #008000;">"\\[X\\]"</span> (line-end-position) t)
              (replace-match <span style="color: #008000;">"[ ]"</span>))))
    (forward-char)
    (insert <span style="color: #008000;">"X"</span>)
    (delete-char 1)))

(add-hook 'org-checkbox-statistics-hook 'check-hook-fn)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">check-hook-fn</td>
</tr>
</tbody>
</table>

<p>
Here is a regular checklist. You can check as many as you want.
</p>
<ul class="org-ul">
<li><code>[X]</code> one
</li>
<li><code>[X]</code> two
</li>
<li><code>[&#xa0;]</code> three
</li>
</ul>

<p>
Now, here is a radio checklist. Only one item at a time can be checked. Nice!
</p>

<ul class="org-ul">
<li><code>[&#xa0;]</code> a
</li>
<li><code>[&#xa0;]</code> b
</li>
<li><code>[X]</code> c
</li>
</ul>

<p>
It is worth noting here that if we put a name on the list, it becomes an addressable data source. First we need this convenient function to get the data associated with a named list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-get-plain-list</span> (name)
  <span style="color: #036A07;">"Get the org-element representation of a plain-list with NAME."</span>
  (<span style="color: #0000FF;">catch</span> '<span style="color: #D0372D;">found</span>
    (org-element-map
        (org-element-parse-buffer)
        'plain-list
      (<span style="color: #0000FF;">lambda</span> (plain-list)
        (<span style="color: #0000FF;">when</span>
            (string= name (org-element-property <span style="color: #006FE0;">:name</span> plain-list))
          (<span style="color: #0000FF;">throw</span> '<span style="color: #D0372D;">found</span> plain-list))))))
</pre>
</div>

<pre class="example">
org-get-plain-list
</pre>

<p>
Now, let's use that to get the value of the checked item in the "test" list. We define the item as everything after the [X] and get it from a regular expression match.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">get-radio-list-value</span> (list-name)
  <span style="color: #036A07;">"Return the value of the checked item in a radio list."</span>
  (<span style="color: #0000FF;">save-excursion</span>
    (<span style="color: #0000FF;">loop</span> for el in (org-element-property
                     <span style="color: #006FE0;">:structure</span>
                     (org-jump-to-plain-list list-name))
          if (string= (nth 4 el) <span style="color: #008000;">"[X]"</span>)
          return (<span style="color: #0000FF;">progn</span>
                   (<span style="color: #0000FF;">let</span> ((item (buffer-substring (car el) (car (last el)))))
                     (string-match <span style="color: #008000;">"\\[X\\]</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">.*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">$"</span> item)
                     (match-string 1 item))))))

(get-radio-list-value <span style="color: #008000;">"test"</span>)
</pre>
</div>

<pre class="example">
c
</pre>

<p>
Perfect. This has lots of potential applications. Data collection and quizzes come to mind, with associated ability to autograde and aggregate the data!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/05/A-checkbox-list-in-org-mode-with-one-value.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A framework for automated feedback with Python and org-mode</title>
      <link>http://jkitchin.github.io/blog/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode</link>
      <pubDate>Sat, 03 Oct 2015 20:23:29 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">yh8IShBzbxUEvbpzeLo05dvyC_I=</guid>
      <description>A framework for automated feedback with Python and org-mode</description>
      <content:encoded><![CDATA[



<p>
<a href="http://docs.autolab.cs.cmu.edu">Autolab</a> is an autograding service that automatically grades code assignments. It uses a program to evaluate a program on a secure virtual system. Using this requires you to run a server, and run code from students. I have never liked that because it is hard to sandbox code well enough to prevent malicious code from doing bad things. Autolab does it well, but it is a heavy solution. Here we explore a local version, one that is used to test for correctness, and not for grading. Here, if you are malicious, you reap what you sow&#x2026;
</p>

<p>
The basic idea I am working towards is that Emacs will provide content to be learned (through org-mode) with active exercises. The exercises will involve a code block, and the user will run a command on their code (or an advised C-c C-c) that checks the solution for correctness. A user will be able to see the solution, and maybe get hints.
</p>

<p>
Suppose we have a problem to solve \(e^x = 3\). This is a simple problem to solve, and here is a solution.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scipy.optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)

<span style="color: #0000FF;">print</span> solve()
</pre>
</div>

<pre class="example">
[ 1.09861229]
</pre>

<p>
We would like to test this for correctness. We code this in a function-based form because we will later use the function <code>solve</code> to test for correctness. Let's see how we could test it with a test function. We will use exec on a string representing our code to get it into our namespace. I don't see a security issue here. You are writing the code! Eventually, we will be passing code to the test framework this way from an org-mode source block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> unittest
<span style="color: #BA36A5;">TOLERANCE</span> = 1e-5

<span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'''from scipy.optimize import fsolve</span>
<span style="color: #008000;">import numpy as np</span>

<span style="color: #008000;">def objective(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return np.exp(x) - 3</span>

<span style="color: #008000;">def solve():</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return fsolve(objective, 3)[0]</span>

<span style="color: #008000;">print solve()'''</span>

<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_solve</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">abs</span>(np.log(3) - solve()) &lt;= TOLERANCE):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Correct'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'incorrect'</span>)

test_solve(s)
</pre>
</div>

<pre class="example">
1.09861228867
Correct
</pre>

<p>
Next, we need to think about how we could generate an import statement from a code block name, import in python, and run a test function. We can assume that the test code will be in a file called "test_%s.py" on your python path. Here are the contents of test_solve.py.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #BA36A5;">TOLERANCE</span> = 1e-5

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve_solution</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">from</span> scipy. optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)[0]


<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_solve</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">abs</span>(solve_solution() - solve()) &lt;= TOLERANCE):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Correct!'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Incorrect'</span>)
</pre>
</div>

<p>
Now, we can import that, and use the functions. Here is the Python script we need to run to test it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> test_solve
test_solve.test_solve(<span style="color: #036A07;">'''</span>
<span style="color: #036A07;">from scipy. optimize import fsolve</span>
<span style="color: #036A07;">import numpy as np</span>

<span style="color: #036A07;">def objective(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   return np.exp(x) - 3</span>

<span style="color: #036A07;">def solve():</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   return fsolve(objective, 3)[0]</span>

<span style="color: #036A07;">print solve()'''</span>)
</pre>
</div>

<pre class="example">
1.09861228867
Correct!
</pre>

<p>
Now, an elisp block to do that. One way to do this is to just run a shell command passing the string to a python interpreter. This is a short way away from an Emacs command now.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((string <span style="color: #008000;">"import test_solve</span>
<span style="color: #008000;">test_solve.test_solve('''</span>
<span style="color: #008000;">from scipy. optimize import fsolve</span>
<span style="color: #008000;">import numpy as np</span>

<span style="color: #008000;">def objective(x):</span>
<span style="color: #008000;">    return np.exp(x) - 3</span>

<span style="color: #008000;">def solve():</span>
<span style="color: #008000;">    return fsolve(objective, 3)[0]</span>

<span style="color: #008000;">print solve()''')"</span>))
  (shell-command-to-string (format <span style="color: #008000;">"python -c \"%s\""</span> string)))
</pre>
</div>

<pre class="example">
1.09861228867
Correct!
</pre>

<p>
Ok, now to wrap it all up in a function we can run from Emacs in a code block to test it. With the cursor in a code block, we get the name, and build the python code, and run it. The function is more complex than I anticipated because I end up  running the code block essentially twice, once to get a results block and once to get the test results. For short problems this is not an issue. I also add the test results in a way that is compatible with the current results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">check</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
         (name (org-element-property <span style="color: #006FE0;">:name</span> src-block))
         (code (org-element-property <span style="color: #006FE0;">:value</span> src-block))
         (end (org-element-property <span style="color: #006FE0;">:end</span> src-block))
         (results)
         (template (format <span style="color: #008000;">"import test_%s</span>
<span style="color: #008000;">test_%s.test_%s('''%s''')"</span> name name name code))
         (output (format
                  <span style="color: #008000;">"\n%s\n"</span>
                  (s-join
                   <span style="color: #008000;">"\n"</span>
                   (mapcar
                    (<span style="color: #0000FF;">lambda</span> (s)
                      (<span style="color: #0000FF;">if</span> (s-starts-with? <span style="color: #008000;">":"</span> s)
                          s
                        (concat <span style="color: #008000;">": "</span> s)))
                    (s-split
                     <span style="color: #008000;">"\n"</span>
                     (shell-command-to-string
                      (format <span style="color: #008000;">"python -c \"%s\""</span> template))))))))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">execute block as normal</span>
    (org-babel-execute-src-block)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and add some output to the Results block</span>
    (<span style="color: #0000FF;">if</span> (org-babel-where-is-src-block-result)
        (<span style="color: #0000FF;">progn</span>
          (goto-char (org-babel-where-is-src-block-result))
          (<span style="color: #0000FF;">setq</span> results (org-element-context))
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete results line</span>
          (kill-line)
          <span style="color: #8D8D84;">;;  </span><span style="color: #8D8D84; font-style: italic;">delete the results</span>
          (<span style="color: #0000FF;">setf</span> (buffer-substring (org-element-property <span style="color: #006FE0;">:begin</span> results)
                                  (org-element-property <span style="color: #006FE0;">:post-affiliated</span> results))
                <span style="color: #008000;">""</span>)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">paste results line back</span>
          (yank)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and the output from your code</span>
          (insert output))
      (message <span style="color: #008000;">"%s"</span> output))))
</pre>
</div>

<pre class="example">
check
</pre>

<p>
Now, we use a named src-block so we can call M-x check in it, and check the answer.
</p>

<div class="org-src-container">

<pre class="src src-python" id="solve"><span style="color: #0000FF;">from</span> scipy.optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)

<span style="color: #0000FF;">print</span> solve()
</pre>
</div>

<pre class="example">
[ 1.09861229]
Correct!
</pre>

<p>
I would like to be able to provide a solution function that would show a user my solution they were tested against. Python provides the <code>inspect</code> module that can do this. Here is how we get the code in Python.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> inspect
<span style="color: #0000FF;">import</span> test_solve

<span style="color: #0000FF;">print</span> inspect.getsource(test_solve.solve_solution)
</pre>
</div>

<pre class="example">
def solve_solution():
    from scipy. optimize import fsolve
    import numpy as np

    def objective(x):
        return np.exp(x) - 3

    return fsolve(objective, 3)[0]
</pre>

<p>
This makes it easy to wrap up a function in emacs that will show this from at src block. We just get the block name, and build the python code and execute it here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">show-solution</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
         (name (org-element-property <span style="color: #006FE0;">:name</span> src-block))
         (template (format  <span style="color: #008000;">"import inspect</span>
<span style="color: #008000;">import test_%s</span>

<span style="color: #008000;">print inspect.getsource(test_%s.%s_solution)"</span> name name name)))
    (switch-to-buffer-other-window (get-buffer-create <span style="color: #008000;">"solution"</span>))
    (erase-buffer)
    (insert (shell-command-to-string
             (format <span style="color: #008000;">"python -c \"%s\""</span> template)))
    (python-mode)))
</pre>
</div>

<pre class="example">
show-solution
</pre>

<p>
That summarizes the main features. It allows me to write a test module that has some name conventions to define a solution function, and a test function. Emacs can generate some boilerplate code for different problem names, and run the test to give the user some feedback. Most of the code in this post would not be directly visible to a user, it would be buried in a python module somewhere on the path, and in elisp files providing the glue. I am not sure how much obfuscation you can put in the python files, e.g. just providing byte-compiled code, so it is less easy to just read it. That is not as big a deal when it is just a study guide/feedback system.
</p>

<p>
From an authoring point of view, this seems pretty good to me. It is feasible I think to write an org-source document like this with tangling for the test modules, and an export to org that does not have the solutions in it. The only subtle point might be needing to alter Python paths to find the test modules if they aren't installed via something like pip.
</p>


<p>
I think this is pretty flexible, and could handle problems that take arguments, e.g. write a function that sorts a list. Here is a simple example of that. First we write the test_sort.py file with a solution, and some tests.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">sort_solution</span>(LIST):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> LIST.sort()

<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_sort</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> sort([3, 4, 2]) == [2, 3, 4]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'passed test 1'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> sort([<span style="color: #008000;">'z'</span>, <span style="color: #008000;">'b'</span>]) == [<span style="color: #008000;">'b'</span>, <span style="color: #008000;">'z'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'passed test 2'</span>)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-python" id="sort"><span style="color: #0000FF;">def</span> <span style="color: #006699;">sort</span>(LIST):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #006FE0;">sorted</span>(LIST)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s
</pre>
</div>
<pre class="example">
passed test 1
passed test 2
</pre>

<p>
Maybe it would make sense to use unittests, or nose or some other testing framework if it makes writing the tests easier. Another day.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A cursor goto hydra for emacs</title>
      <link>http://jkitchin.github.io/blog/2015/09/28/A-cursor-goto-hydra-for-emacs</link>
      <pubDate>Mon, 28 Sep 2015 16:38:11 EDT</pubDate>
      <category><![CDATA[hydra]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">REQ67Q6xpYDjjof7YOcjK-HAr28=</guid>
      <description>A cursor goto hydra for emacs</description>
      <content:encoded><![CDATA[



<p>
In the spirit of upping my navigation game, here we examine navigation by search like methods. You probably know about C-s with will search forward for a word, and C-r which will search backwards. This will get you to the start of a word pretty easily. It won't get you into a word though, you have to navigate to that, and it isn't too handy to get to a line, or window, or headline in an org-file. Each of these is an emacs command, which as with navigation I don't always remember. Today, we build a hydra to make this easy too.
</p>

<p>
We will use features from <a href="https://github.com/abo-abo/avy">avy</a> , and <a href="https://github.com/emacs-helm/helm">helm</a> , and some standard emacs features. <code>avy</code> is pretty neat. It provides an interface to jump to characters, words and subwords by pressing keys. To jump to a character that is visible on the screen, you invoke avy-goto-char and press the character you want to jump to. <code>avy</code> will overlay a sequence of keys you then type to jump to that character. It might be more convenient to jump to a pair of characters, which you do by invoking avy-goto-char-2. Similarly, there are commands to jump to the beginning of a word, and a subword, both with variations that allow you to specify the beginning letter of the word, or to get overlays on every word.
</p>

<p>
I spend most of my days in org-files, so I frequently want to jump to an org headline in the current buffer, or some headline in an org-file in my agenda. Helm provides a nice set of functions for this in helm-org-headlines and helm-org-agenda-files-headings. We can also use helm-multi-swoop-org to use the swoop search function in all open org-buffers with helm selection. Within a buffer, you might also use the search forward and backward capabilities, or the more advanced helm-occur or swiper-helm features.
Finally, I may want my cursor to go to another recent file, or open buffer.
</p>

<p>
The hydra we will develop here puts all of these commands a few keystrokes away, with a hint system to remind you what is possible. In addition to these "goto" commands, I add a character to switch to the navigation hydra we developed in the last <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/09/27/Upping-my-Emacs-navigation-game/">post</a> so I can switch to navigation if I change my mind. I also put two commands to store the current position before the goto command, and to return to that stored position conveniently. I bind this hydra to super-g, because the super key isn't used much on my Mac, and g reminds of "goto". So, here is my hydra code:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defhydra</span> goto (<span style="color: #006FE0;">:color</span> blue <span style="color: #006FE0;">:hint</span> nil)
  <span style="color: #008000;">"</span>
<span style="color: #008000;">Goto:</span>
<span style="color: #008000;">^Char^              ^Word^                ^org^                    ^search^</span>
<span style="color: #008000;">^^^^^^^^---------------------------------------------------------------------------</span>
<span style="color: #008000;">_c_: 2 chars        _w_: word by char     _h_: headline in buffer  _o_: helm-occur</span>
<span style="color: #008000;">_C_: char           _W_: some word        _a_: heading in agenda   _p_: helm-swiper</span>
<span style="color: #008000;">_L_: char in line   _s_: subword by char  _q_: swoop org buffers   _f_: search forward</span>
<span style="color: #008000;">^  ^                _S_: some subword     ^ ^                      _b_: search backward</span>
<span style="color: #008000;">-----------------------------------------------------------------------------------</span>
<span style="color: #008000;">_B_: helm-buffers       _l_: avy-goto-line</span>
<span style="color: #008000;">_m_: helm-mini          _i_: ace-window</span>
<span style="color: #008000;">_R_: helm-recentf</span>

<span style="color: #008000;">_n_: Navigate           _._: mark position _/_: jump to mark</span>
<span style="color: #008000;">"</span>
  (<span style="color: #008000;">"c"</span> avy-goto-char-2)
  (<span style="color: #008000;">"C"</span> avy-goto-char)
  (<span style="color: #008000;">"L"</span> avy-goto-char-in-line)
  (<span style="color: #008000;">"w"</span> avy-goto-word-1)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">jump to beginning of some word</span>
  (<span style="color: #008000;">"W"</span> avy-goto-word-0)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">jump to subword starting with a char</span>
  (<span style="color: #008000;">"s"</span> avy-goto-subword-1)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">jump to some subword</span>
  (<span style="color: #008000;">"S"</span> avy-goto-subword-0)

  (<span style="color: #008000;">"l"</span> avy-goto-line)
  (<span style="color: #008000;">"i"</span> ace-window)

  (<span style="color: #008000;">"h"</span> helm-org-headlines)
  (<span style="color: #008000;">"a"</span> helm-org-agenda-files-headings)
  (<span style="color: #008000;">"q"</span> helm-multi-swoop-org)

  (<span style="color: #008000;">"o"</span> helm-occur)
  (<span style="color: #008000;">"p"</span> swiper-helm)

  (<span style="color: #008000;">"f"</span> isearch-forward)
  (<span style="color: #008000;">"b"</span> isearch-backward)

  (<span style="color: #008000;">"."</span> org-mark-ring-push <span style="color: #006FE0;">:color</span> red)
  (<span style="color: #008000;">"/"</span> org-mark-ring-goto <span style="color: #006FE0;">:color</span> blue)
  (<span style="color: #008000;">"B"</span> helm-buffers-list)
  (<span style="color: #008000;">"m"</span> helm-mini)
  (<span style="color: #008000;">"R"</span> helm-recentf)
  (<span style="color: #008000;">"n"</span> hydra-navigate/body))

(global-set-key (kbd <span style="color: #008000;">"s-g"</span>) 'goto/body)
</pre>
</div>

<p>
As with the last navigation hydra, this is a pretty massive set of options and takes up some decent screen space at the bottom om my emacs. They are mostly here to remind me that there are better navigation options, and with practice I suspect muscle memory will provide fast navigation tools with more precision and fewer keystrokes than simple navigation.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/09/28/A-cursor-goto-hydra-for-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Upping my Emacs navigation game</title>
      <link>http://jkitchin.github.io/blog/2015/09/27/Upping-my-Emacs-navigation-game</link>
      <pubDate>Sun, 27 Sep 2015 21:21:51 EDT</pubDate>
      <category><![CDATA[hydra]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">Yyw695E2cnekTlHe0xHuWlrlBL0=</guid>
      <description>Upping my Emacs navigation game</description>
      <content:encoded><![CDATA[



<p>
I have been trying to up my navigation game in Emacs, by which I mean I want to get my cursor where I want it with a minimal number of keystrokes, and preferrably no mouse actions. There are lots of little and big navigations I do a lot:
</p>
<ol class="org-ol">
<li>forward/backward by a character
</li>
<li>forward/backward by a word/subword
</li>
<li>forward/backward by a sentence
</li>
<li>forward/backward by a line
</li>
<li>to the beginning and end of a line
</li>
<li>to the beginning and end of a sentence
</li>
<li>to the beginning and end of a paragraph
</li>
<li>to the beginning and end of a page
</li>
<li>to the beginning and end of a buffer
</li>
<li>scrolling up/down
</li>
<li>into another window
</li>
<li>back and forth to buffers
</li>
</ol>

<p>
Occasionally, I want to save a location so I can easily get back to it. Not all of these are strictly speaking navigation in the usual sense, but they are things I do often enough. There are Emacs commands for all these, and keyboard shortcuts for many of them, but I don't use them often, and as a result I don't remember them either.
</p>

<p>
Here I develop a <a href="https://github.com/abo-abo/hydra">hydra</a> that will provide these features. Hydra is a super amazing, menu prompting system that provides hints to remind you of what can be done, and to access it from a character. It is possible to pass numeric and universal arguments to the commands by typing -, a number, or C-u before pressing the character.
</p>

<p>
I want some commands to be repeatable, which we get with a "red" hydra, and some commands to exit on running, which we get with a "blue" head. So, here is an over-the-top hydra for navigation.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defhydra</span> hydra-navigate (<span style="color: #006FE0;">:color</span> red
                          <span style="color: #006FE0;">:hint</span> nil)
  <span style="color: #008000;">"</span>
<span style="color: #008000;">_f_: forward-char       _w_: forward-word       _n_: next-line</span>
<span style="color: #008000;">_b_: backward-char      _W_: backward-word      _p_: previous-line</span>
<span style="color: #008000;">^ ^                     _o_: subword-right      _,_: beginning-of-line</span>
<span style="color: #008000;">^ ^                     _O_: subword-left       _._: end-of-line</span>

<span style="color: #008000;">_s_: forward sentence   _a_: forward paragraph  _g_: forward page</span>
<span style="color: #008000;">_S_: backward sentence  _A_: backward paragraph _G_: backward page</span>

<span style="color: #008000;">_h_: helm mini _B_: buffer list _i_: window</span>
<span style="color: #008000;">_&lt;left&gt;_: previous buffer   _&lt;right&gt;_: next buffer</span>
<span style="color: #008000;">_&lt;up&gt;_: scroll-up           _&lt;down&gt;_: scroll-down</span>

<span style="color: #008000;">_[_: backward-sexp _]_: forward-sexp</span>
<span style="color: #008000;">_&lt;_ beginning of buffer _&gt;_ end of buffer _m_: set mark _/_: jump to mark</span>
<span style="color: #008000;">"</span>
  (<span style="color: #008000;">"f"</span> forward-char)
  (<span style="color: #008000;">"b"</span> backward-char)
  (<span style="color: #008000;">"w"</span> forward-word)
  (<span style="color: #008000;">"W"</span> backward-word)
  (<span style="color: #008000;">"n"</span> next-line)
  (<span style="color: #008000;">"p"</span> previous-line)
  (<span style="color: #008000;">"o"</span> subword-right)
  (<span style="color: #008000;">"O"</span> subword-left)
  (<span style="color: #008000;">"s"</span> forward-sentence)
  (<span style="color: #008000;">"S"</span> backward-sentence)
  (<span style="color: #008000;">"a"</span> forward-paragraph)
  (<span style="color: #008000;">"A"</span> backward-paragraph)
  (<span style="color: #008000;">"g"</span> forward-page)
  (<span style="color: #008000;">"G"</span> backward-page)
  (<span style="color: #008000;">"&lt;right&gt;"</span> next-buffer)
  (<span style="color: #008000;">"&lt;left&gt;"</span> previous-buffer)
  (<span style="color: #008000;">"h"</span> helm-mini <span style="color: #006FE0;">:color</span> blue)
  (<span style="color: #008000;">"i"</span> ace-window <span style="color: #006FE0;">:color</span> blue)
  (<span style="color: #008000;">"m"</span> org-mark-ring-push)
  (<span style="color: #008000;">"/"</span> org-mark-ring-goto <span style="color: #006FE0;">:color</span> blue)
  (<span style="color: #008000;">"B"</span> helm-buffers-list)
  (<span style="color: #008000;">"&lt;up&gt;"</span> scroll-up)
  (<span style="color: #008000;">"&lt;down&gt;"</span> scroll-down)
  (<span style="color: #008000;">"&lt;"</span> beginning-of-buffer)
  (<span style="color: #008000;">"&gt;"</span> end-of-buffer)
  (<span style="color: #008000;">"."</span> end-of-line)
  (<span style="color: #008000;">"["</span> backward-sexp)
  (<span style="color: #008000;">"]"</span> forward-sexp)
  (<span style="color: #008000;">","</span> beginning-of-line)
  (<span style="color: #008000;">"q"</span> nil <span style="color: #008000;">"quit"</span> <span style="color: #006FE0;">:color</span> blue))

(global-set-key (kbd <span style="color: #008000;">"s-n"</span>) 'hydra-navigate/body)
</pre>
</div>

<pre class="example">
hydra-navigate/body
</pre>

<p>
I basically like it. The menu is a little on the large side, but it makes for easy modal navigation in a buffer, to other windows, and other buffers. On the whole for moderate cursor movements, this results in basically equal keystrokes. For example, to move 3 characters forward, we have C-f C-f C-f or C-u 3 C-f, or s-n 3 f. The advantage (I think) is a single interface to all these navigation commands with hints on what to do.
</p>

<p>
There is still another level of navigation, which is related to navigation by searching. That is a whole different level of navigation I will work on another day!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/09/27/Upping-my-Emacs-navigation-game.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Checking for email attachments before you send email</title>
      <link>http://jkitchin.github.io/blog/2015/09/04/Checking-for-email-attachments-before-you-send-email</link>
      <pubDate>Fri, 04 Sep 2015 19:03:53 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[email]]></category>
      <guid isPermaLink="false">MErOMYWf44oQU2aj5jMLXAC9izU=</guid>
      <description>Checking for email attachments before you send email</description>
      <content:encoded><![CDATA[


<p>
Does this comic (<a href="http://www.phdcomics.com/comics/archive.php?comicid=1817">http://www.phdcomics.com/comics/archive.php?comicid=1817</a> ) apply to you? Do you miss the Gmail feature that will alert you that it seems like you mention an attachment but there isn't one attached before it lets you send it? Let's make Emacs help us here. We will scan our emails for the word "attach", and if we see it, scan the email for evidence of an attachment. Then create a hook function that will prompt us if it appears we mention an attachment, but don't have one.
</p>

<p>
An attachment looks like this in my messages:
</p>
<pre class="example">
&lt;#part type="image/png" filename="~/Desktop/wordcloud.png" disposition=attachment&gt;
&lt;#/part&gt;
</pre>

<p>
So, probably finding "&lt;#part" in the buffer means I probably have an attachment. We will use the message-send-hook to run this function. Here is the code. Some brief testing from me seems to work fine! It is pretty simple, but probably good enough to save me from sending messages with no attachment, and not too intrusive for when no attachment is actually needed, e.g. in replies. Let me know if you have ideas for improvements.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">email-says-attach-p</span> ()
  <span style="color: #036A07;">"Return t if email suggests there could be an attachment."</span>
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char (point-min))
    (re-search-forward <span style="color: #008000;">"attach"</span> nil t)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">email-has-attachment-p</span> ()
  <span style="color: #036A07;">"Return t if the currently open email has an attachment"</span>
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char (point-min))
    (re-search-forward <span style="color: #008000;">"&lt;#part"</span> nil t)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">email-pre-send-check-attachment</span> ()
  (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> (email-says-attach-p)
             (not (email-has-attachment-p)))
    (<span style="color: #0000FF;">unless</span>
        (y-or-n-p <span style="color: #008000;">"Your email suggests you need an attachment, but no attachment was found. Send anyway?"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"It seems an attachment is needed, but none was found. Aborting send."</span>))))

(add-hook 'message-send-hook 'email-pre-send-check-attachment)
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/09/04/Checking-for-email-attachments-before-you-send-email.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A highlight annotation mode for Emacs using font-lock</title>
      <link>http://jkitchin.github.io/blog/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock</link>
      <pubDate>Tue, 28 Jul 2015 10:57:17 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[annotation]]></category>
      <guid isPermaLink="false">728zPTn0N0f1gENydl33NkYFHXo=</guid>
      <description>A highlight annotation mode for Emacs using font-lock</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Known limitations</a></li>
</ul>
</div>
</div>
<p>
One of my students asked about highlighting text in emacs for note-taking. I can see some advantages for doing it while teaching, for example, and for students studying, so here we we work it out.
</p>

<p>
You will definitely want to see the video on this one, the highlights do not show up in the published html. <a href="https://www.youtube.com/watch?v=Cvz2tiT12-I">https://www.youtube.com/watch?v=Cvz2tiT12-I</a> 
</p>

<p>
For temporary use, highlighting is pretty easy, you just set a property on a region, e.g. the background color. For example, we can do this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">this seems to be necessary to get the tooltips to work.</span>
(<span style="color: #0000FF;">setq</span> font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-region</span> (beg end)
 (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"r"</span>)
 (set-text-properties
  beg end
  '(font-lock-face (<span style="color: #006FE0;">:background</span> <span style="color: #008000;">"Light Salmon"</span>)
                   highlighted t
                   help-echo <span style="color: #008000;">"highlighted"</span>)))

(global-set-key (kbd <span style="color: #008000;">"s-h"</span>) 'highlight-region)
</pre>
</div>

<pre class="example">
highlight-region
</pre>

<p>
This sets the background color, and another property "highlighted" that we will use later. The trouble is this is transient. When I close the file, the highlights are lost. We can save them to a file though, and reload them later. As long as we are diligent about that we should be able to provide persistent highlights.
</p>

<p>
First we need a function to get all the highlights, their start and end, their color, and if there is a help-echo which provides a tooltip. We will see why later. Here we loop through the buffer collecting highlights, and return a list of them.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-get-highlights</span> ()
  <span style="color: #036A07;">"Scan buffer for list of highlighted regions.</span>
<span style="color: #036A07;">These are defined only by the highlighted property. That means</span>
<span style="color: #036A07;">adjacent highlighted regions will be merged into one region with</span>
<span style="color: #036A07;">the color of the first one."</span>
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #0000FF;">let</span> ((highlights '())
          (p)
          (beg)
          (end)
          (note)
          (color))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">corner case of first point being highlighted</span>
      (<span style="color: #0000FF;">when</span> (get-text-property (point) 'highlighted)
        (<span style="color: #0000FF;">setq</span> beg (point)
              end (next-single-property-change (point) 'highlighted)
              color (background-color-at-point)
              help-echo (get-text-property (point) 'help-echo))
        (add-to-list 'highlights (list beg end color help-echo) t)
        (goto-char end))

      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Now the rest of the buffer</span>
      (<span style="color: #0000FF;">while</span> (<span style="color: #0000FF;">setq</span> p (next-single-property-change (point) 'highlighted))
        (<span style="color: #0000FF;">setq</span> beg (goto-char p))
        (<span style="color: #0000FF;">setq</span> color (background-color-at-point))
        (<span style="color: #0000FF;">setq</span> note (get-text-property (point) 'help-echo))
        (<span style="color: #0000FF;">setq</span> end (next-single-property-change (point) 'highlighted))
        (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> beg end)
          (goto-char end)
          (add-to-list 'highlights (list beg
                                         end
                                         color
                                         note)
                       t)
          (goto-char end)))
      highlights)))

(highlight-get-highlights)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="right">438</td>
<td class="right">454</td>
<td class="left">Light Salmon</td>
<td class="left">highlighted</td>
</tr>

<tr>
<td class="right">1014</td>
<td class="right">1031</td>
<td class="left">Light Salmon</td>
<td class="left">highlighted</td>
</tr>
</tbody>
</table>


<p>
Next, we generate a filename, and a function to save the highlights to disk. We make it a hook function that runs every time we save the buffer.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-save-filename</span> ()
  <span style="color: #036A07;">"Return name of file to save overlays in."</span>
  (<span style="color: #0000FF;">when</span> (buffer-file-name)
    (concat <span style="color: #008000;">"."</span> (file-name-nondirectory (buffer-file-name)) <span style="color: #008000;">".highlights"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-save</span> ()
  <span style="color: #036A07;">"Loop through buffer and save regions with property highlighted.</span>
<span style="color: #036A07;">Save beginning, end of each region, color and help-echo on the</span>
<span style="color: #036A07;">first character of the region. Delete highlight file if it is empty."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((fname (highlight-save-filename))
        (highlights (highlight-get-highlights)))
    (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">and</span> fname highlights)
          (<span style="color: #0000FF;">with-temp-file</span> fname
            (print highlights (current-buffer)))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get rid of file if there are not highlights</span>
        (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> fname (file-exists-p fname))
          (delete-file fname)))))

(add-hook 'after-save-hook 'highlight-save)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">highlight-save</td>
<td class="left">helm-swoop&#x2013;clear-cache</td>
</tr>
</tbody>
</table>


<div class="org-src-container">

<pre class="src src-sh">cat .highlights.org.highlights
</pre>
</div>

<pre class="example">
((438 454 "Light Salmon" "highlighted") (1014 1031 "Light Salmon" "highlighted"))
</pre>

<p>
Here, we can read the contents and apply the highlights. We set this up on a hook for org-mode, so it will apply them on when we open org-files. You could make this more general if you plan to highlight in code files, for example.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-load</span> ()
  <span style="color: #036A07;">"Load and apply highlights."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setq</span> font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))
  (<span style="color: #0000FF;">let</span> ((fname (highlight-save-filename)))
    (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> fname (file-exists-p fname))
      (mapcar
       (<span style="color: #0000FF;">lambda</span> (entry)
         (<span style="color: #0000FF;">let</span> ((beg (nth 0 entry))
               (end (nth 1 entry))
               (color (nth 2 entry))
               (help-echo (nth 3 entry)))
           (set-text-properties
            beg end
            `(font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
                             help-echo ,help-echo
                             highlighted t))))
       (<span style="color: #0000FF;">with-temp-buffer</span> (insert-file-contents fname)
                         (read (current-buffer)))))))


(add-hook 'org-mode-hook 'highlight-load)
</pre>
</div>


<p>
Now, let's outdo ourselves in ridiculosity. We will add a helm-colors selector to give you unprecedented highlighting capability in multicolor magnificence. This function will highlight selected text, or update the color of an existing highlight.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight</span> (beg end <span style="color: #6434A3;">&amp;optional</span> color)
  <span style="color: #036A07;">"Highlight region from BEG to END with COLOR.</span>
<span style="color: #036A07;">COLOR is selected from `</span><span style="color: #D0372D;">helm-colors</span><span style="color: #036A07;">' when run interactively."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"r"</span>)
  (<span style="color: #0000FF;">unless</span> (<span style="color: #0000FF;">or</span> (get-text-property (point) 'highlighted)
              (region-active-p))
    (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"No region selected or not on a highlight."</span>))
  (<span style="color: #0000FF;">unless</span> color
    (<span style="color: #0000FF;">setq</span> color (s-trim (helm-colors))))
  (<span style="color: #0000FF;">if</span> (get-text-property (point) 'highlighted)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">update color</span>
      (<span style="color: #0000FF;">let</span> ((beg (previous-single-property-change (point) 'highlighted))
            (end (next-single-property-change (point) 'highlighted)))
        (set-text-properties
         beg end
         `(font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
                          highlighted t)))
  (set-text-properties
   beg end
   `(font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
                    highlighted t))))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">For convenience</span>
(global-set-key (kbd <span style="color: #008000;">"s-h"</span>) 'highlight)
</pre>
</div>
<pre class="example">
highlight
</pre>


<p>
Now, we can conveniently highlight text in whatever color we want. How about list your highlights? After we have highlighted a lot, it might be nice to see a list of these we can click on to find our highlights more quickly.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-list</span> ()
  <span style="color: #036A07;">"Make a list of highlighted text in another buffer. "</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((cb (current-buffer))
        (fname (buffer-file-name))
        (hls (mapcar
              (<span style="color: #0000FF;">lambda</span> (entry)
                (list (nth 0 entry)
                      (buffer-substring (nth 0 entry) (nth 1 entry))))
              (highlight-get-highlights))))
    (<span style="color: #0000FF;">if</span> hls
        (<span style="color: #0000FF;">progn</span>
          (split-window-right)
          (switch-to-buffer-other-window <span style="color: #008000;">"*highlights*"</span>) (org-mode)
          (<span style="color: #0000FF;">setq</span> buffer-read-only nil)
          (erase-buffer)
          (insert <span style="color: #008000;">"Click on text to jump to the position.\n\n"</span>)

          (<span style="color: #0000FF;">dolist</span> (s hls)
            (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
              (define-key map [mouse-1]
                `(<span style="color: #0000FF;">lambda</span> ()
                   (<span style="color: #0000FF;">interactive</span>)
                   (find-file ,fname)
                   (goto-char ,(nth 0 s))))
              (insert (propertize
                       (concat (nth 1 s) <span style="color: #008000;">"\n"</span>)
                       'local-map map))))
          (<span style="color: #0000FF;">setq</span> buffer-read-only t))
      (message <span style="color: #008000;">"No highlights found."</span>))))
</pre>
</div>

<pre class="example">
highlight-list
</pre>

<p>
You probably would like to just select some text with your mouse, and have it highlighted. That requires us to advise the mouse-set-region function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-green</span> ()
  <span style="color: #036A07;">"Highlight region in green."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Darkolivegreen1"</span>))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">create the advice for use later</span>
(<span style="color: #0000FF;">defadvice</span> <span style="color: #006699;">mouse-set-region</span> (after my-highlight () disable)
  <span style="color: #036A07;">"Highlight"</span>
  (highlight-green))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-mouse-on</span> ()
  <span style="color: #036A07;">"Turn on mouse highlighting"</span>
  (<span style="color: #0000FF;">interactive</span>)
  (ad-enable-advice 'mouse-set-region 'after 'my-highlight)
  (ad-activate 'mouse-set-region))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-mouse-off</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ad-disable-advice 'mouse-set-region 'after 'my-highlight)
  (ad-deactivate 'mouse-set-region))
</pre>
</div>

<pre class="example">
highlight-mouse-off
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-picasso-blues</span> ()
 (<span style="color: #0000FF;">interactive</span>)
 (<span style="color: #0000FF;">save-excursion</span>
   (<span style="color: #0000FF;">let</span> ((colors '(<span style="color: #008000;">"PowderBlue"</span>
                   <span style="color: #008000;">"Lightskyblue1"</span>
                   <span style="color: #008000;">"Lightskyblue2"</span>
                   <span style="color: #008000;">"Lightskyblue3"</span>
                   <span style="color: #008000;">"Lightskyblue4"</span>))
         (beg (region-beginning))
         (end (region-end)))
     (goto-char beg)
     (<span style="color: #0000FF;">while</span> (&lt; (point) (- end 1))
       (highlight (point) (+ 1 (point))
                  (nth (mod (- (point) (region-beginning)) (length colors)) colors))
       (forward-char)))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-rainbow</span> ()
 (<span style="color: #0000FF;">interactive</span>)
 (<span style="color: #0000FF;">save-excursion</span>
   (<span style="color: #0000FF;">let</span> ((colors '(<span style="color: #008000;">"Red1"</span>
                   <span style="color: #008000;">"Orange1"</span>
                   <span style="color: #008000;">"Yellow1"</span>
                   <span style="color: #008000;">"Darkolivegreen1"</span>
                   <span style="color: #008000;">"Skyblue1"</span>
                   <span style="color: #008000;">"Blue1"</span>
                   <span style="color: #008000;">"DarkViolet"</span>))
         (beg (region-beginning))
         (end (region-end)))
     (goto-char beg)
     (<span style="color: #0000FF;">while</span> (&lt; (point) (- end 1))
       (highlight (point) (+ 1 (point))
                  (nth (mod (- (point) (region-beginning)) (length colors)) colors))
       (forward-char)))))
</pre>
</div>

<p>
=These look cool, but they don't get properly saved. The code that finds the highlights finds the region, but only saves the first color. That means that adjacent highlights of different color will also not be saved correctly.
</p>

<p>
How about a highlight with your own tooltip? In theory we can set the help-echo property to some text. In practice I have found this tricky because font-lock occasionally erases help-echo properties on re-fontifying. We remove help-echo from a list of properties that are affected by this, but another library may add it back, and there might be some unintended consequences of that. Here we design a function to highlight with a user-defined tooltip.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-note</span> (beg end color <span style="color: #6434A3;">&amp;optional</span> note)
  <span style="color: #036A07;">"Highlight selected text and add NOTE to it as a tooltip."</span>
  (<span style="color: #0000FF;">interactive</span>
   (list
    (region-beginning)
    (region-end)
    (s-trim (helm-colors))))
  (<span style="color: #0000FF;">unless</span> note (<span style="color: #0000FF;">setq</span> note (read-input <span style="color: #008000;">"Note: "</span>)))
  (<span style="color: #0000FF;">unless</span> (region-active-p)
    (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"No region selected."</span>))
  (set-text-properties
   beg end
   `(help-echo ,note font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
               highlighted t)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-note-edit</span> (new-note)
  <span style="color: #036A07;">"Set tooltip of highlight at point to NEW-NOTE."</span>
  (<span style="color: #0000FF;">interactive</span> (list (read-input <span style="color: #008000;">"Note: "</span> (get-text-property (point) 'help-echo))))
  (<span style="color: #0000FF;">let*</span> ((region (button-lock-find-extent (point) 'highlighted))
         (beg (car region))
         (end (cdr region)))
    (put-text-property beg end 'help-echo new-note)))
</pre>
</div>

<p>
=highlight-note-edit
==highlight-note-edit
==highlight-note-edit
==highlight-note-edit
=C
Want to get rid of the highlights? We may want to delete one or all. We make a function for each.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-clear</span> ()
  <span style="color: #036A07;">"Clear highlight at point."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">when</span> (get-text-property (point) 'highlighted)
    (set-text-properties
     (next-single-property-change (point) 'highlighted)
     (previous-single-property-change (point) 'highlighted)
     nil)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-clear-all</span> ()
  <span style="color: #036A07;">"Clear all highlights.</span>
<span style="color: #036A07;">They are really deleted when you save the buffer."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (mapcar
   (<span style="color: #0000FF;">lambda</span> (entry)
     (<span style="color: #0000FF;">let</span> ((beg (nth 0 entry))
           (end (nth 1 entry)))
       (set-text-properties
        beg end nil)))
   (highlight-get-highlights))
  (<span style="color: #0000FF;">when</span> (get-buffer <span style="color: #008000;">"*highlights*"</span>)
    (kill-buffer <span style="color: #008000;">"*highlights*"</span>)))
</pre>
</div>
<pre class="example">
highlight-clear-all
</pre>

<p>
Let's define a few convenience functions for common colors, a hydra to quickly select them and bind it to a key for convenience.  While we are at it, we add a menu to Org too.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-yellow</span> ()
  <span style="color: #036A07;">"Highlight region in yellow."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Yellow"</span>))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-blue</span> ()
  <span style="color: #036A07;">"Highlight region in blue."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"LightBlue"</span>))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-pink</span> ()
  <span style="color: #036A07;">"Highlight region in pink."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Pink"</span>))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-green</span> ()
  <span style="color: #036A07;">"Highlight region in green."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Darkolivegreen1"</span>))


(<span style="color: #0000FF;">defhydra</span> highlighter (<span style="color: #006FE0;">:color</span> blue) <span style="color: #008000;">"highlighter"</span>
  (<span style="color: #008000;">"b"</span> highlight-blue <span style="color: #008000;">"blue"</span>)
  (<span style="color: #008000;">"g"</span> highlight-green <span style="color: #008000;">"Green"</span>)
  (<span style="color: #008000;">"p"</span> highlight-pink <span style="color: #008000;">"Pink"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define as many special colors as you like.</span>
  (<span style="color: #008000;">"s"</span> (highlight (region-beginning) (region-end) <span style="color: #008000;">"Lightsalmon1"</span>) <span style="color: #008000;">"Salmon"</span>)
  (<span style="color: #008000;">"y"</span> highlight-yellow <span style="color: #008000;">"yellow"</span>)
  (<span style="color: #008000;">"c"</span> highlight <span style="color: #008000;">"Choose color"</span>)
  (<span style="color: #008000;">"n"</span> (highlight-note (region-beginning) (region-end) <span style="color: #008000;">"Thistle"</span>) <span style="color: #008000;">"Note"</span>)
  (<span style="color: #008000;">"N"</span> highlight-note <span style="color: #008000;">"Note (c)"</span>)
  (<span style="color: #008000;">"m"</span> highlight-mouse-on <span style="color: #008000;">"Mouse"</span>)
  (<span style="color: #008000;">"M"</span> highlight-mouse-off <span style="color: #008000;">"Mouse off"</span>)
  (<span style="color: #008000;">"e"</span> highlight-note-edit <span style="color: #008000;">"Edit note"</span>)
  (<span style="color: #008000;">"l"</span> highlight-list <span style="color: #008000;">"List highlights"</span>)
  (<span style="color: #008000;">"r"</span> highlight-load <span style="color: #008000;">"Reload"</span>)
  (<span style="color: #008000;">"S"</span> highlight-save <span style="color: #008000;">"Save"</span>)
  (<span style="color: #008000;">"d"</span> highlight-clear <span style="color: #008000;">"Delete"</span>)
  (<span style="color: #008000;">"D"</span> highlight-clear-all <span style="color: #008000;">"Delete All"</span>))

(easy-menu-change
 '(<span style="color: #008000;">"Org"</span>) <span style="color: #008000;">"highlighter"</span>
 '([<span style="color: #008000;">"Highlight"</span> highlight]
   [<span style="color: #008000;">"Highlight (B)"</span> highlight-blue]
   [<span style="color: #008000;">"Highlight (G)"</span> highlight-green]
   [<span style="color: #008000;">"Highlight (P)"</span> highlight-pink]
   [<span style="color: #008000;">"Highlight (Y)"</span> highlight-yellow]
   [<span style="color: #008000;">"Highlight note"</span> highlight-note]
   [<span style="color: #008000;">"List highlights"</span> highlight-list]
   [<span style="color: #008000;">"Delete highlight"</span> highlight-clear]
   [<span style="color: #008000;">"Delete highlights"</span> highlight-clear-all])
 <span style="color: #008000;">"Show/Hide"</span>)


(global-set-key (kbd <span style="color: #008000;">"s-h"</span>) 'highlighter/body)
</pre>
</div>

<pre class="example">
highlighter/body
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Known limitations</h2>
<div class="outline-text-2" id="text-1">
<p>
The tooltips seem especially fragile, and if there is code that undoes the removal of help-echo from font-lock-extra-managed-props, it seems possible they would easily get lost. I wouldn't use them a lot without a lot of testing. You <i>have</i> to rely on the hook functions defined to keep the highlights synchronized between the buffer and the external highlight file. If you were to rename a file externally, e.g. in the OS, or with a shell command, then the highlights will be lost unless you also rename the external file.
</p>

<p>
Highlights are not robust enough to survive refiling an org-mode section from one file to another.  Personally I don't see these as too big a problem; I don't put a lot of value of highlights, but I can see it being pretty annoying to lose them!
</p>

<p>
Still, if you want to give this a try, you can use the code here: <a href="/media/2015-07-28-A-highlight-annotation-mode-for-Emacs-using-font-lock/highlights.el">highlights.el</a> . You should bind the functions to whatever keys you want. Also, it is setup to only work for org-mode. I am not sure what the best hook to use for any file might be. Maybe find-file-hook.
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Running scientific instruments in Emacs and recording the results</title>
      <link>http://jkitchin.github.io/blog/2015/07/25/Running-scientific-instruments-in-Emacs-and-recording-the-results</link>
      <pubDate>Sat, 25 Jul 2015 10:04:01 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[notebook]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">98w4pu7ihCg5yUl5vU4BtOlRWZs=</guid>
      <description>Running scientific instruments in Emacs and recording the results</description>
      <content:encoded><![CDATA[



<p>
Today we look at running a scientific instrument via http requests from Emacs and org-mode. We will use a Gamry Ref600 potentiostat because Gamry has very nicely provide a COM interface we can access via Python. This will be only a proof of concept to see what it is like. We will not consider any issues of security, etc&#x2026;, only what is it like to do it.
</p>

<p>
The setup will look like this: we will run a flask web app that uses python to control the instrument via http requests. Why? Because I want to run the instrument from my Mac ;) and so far there are only Windows drivers for the instrument. So, we run the flask app on the Windows machine, and I run it from here on my Mac by sending requests. Flask takes care of converting requests to action using Python. You can see the <a href="#sec-2">Flask app here</a>.
</p>

<p>
Let's see what is online:
</p>
<div class="org-src-container">

<pre class="src src-sh">curl jkitchin-win.cheme.cmu.edu:5000/pstats
</pre>
</div>

<pre class="example">
(u'REF600-13089',)
</pre>

<p>
We have one potentiostat online with serial number 13089. I have a dummy cell connected to it which has a little resistor on it. So we can run a cyclic voltammogram and it should be a straight line. We have to know a bit about what is returned. We will get a json file back, and it will have the data in it. The data will be a list of lists. The data we want is in columns 1 and 3 (python indexing). Obviously you need some prior knowledge of what data comes back to use this. That would come from reading some documentation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">'http://jkitchin-win.cheme.cmu.edu:5000/cv?endv=0.25&amp;startv=-0.25'</span>)

<span style="color: #BA36A5;">dj</span> = resp.json()
<span style="color: #BA36A5;">data</span> = np.array(dj[<span style="color: #008000;">'data'</span>])

plt.plot(data[:, 1], data[:, 3])
plt.xlabel(<span style="color: #008000;">'Voltage (V)'</span>)
plt.ylabel(<span style="color: #008000;">'Current (A)'</span>)
plt.tight_layout()
plt.savefig(<span style="color: #008000;">'cv-1.png'</span>)
</pre>
</div>

<p>
<img src="/media/2015-07-25-Running-scientific-instruments-in-Emacs-and-recording-the-results/cv-1.png"> 
Well, there you have it. Possibly the first Gamry Ref600 to ever have been driven from a Mac ;) Let me be more explicit about that; I could <i>also</i> run this from Linux, an iPad, etc&#x2026; You could do this in a browser, or in an IPython notebook, or in Matlab, among many other possibilities. You could write a script in perl, shell, ruby, emacs-lisp, or any other language that supports http requests.
</p>

<p>
I am not sure why the graph is not perfectly linear, maybe there is some capacitive charging that starts out. The resistance based on the current at 0.2V is about 2000 ohms, which is in good agreement with what is listed on the board the dummy cell is on.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
There are a host of interesting issues one eventually has to consider here including security, but also error management and debugging. I hacked something like an http api here by running flask on the windows machine running the instrument. That is a layer of abstraction on an abstraction to start with. I think later instruments are likely to run these webservers themselves on small dedicated computers, e.g. via a Raspberry pi or Arduino chipset. It is not obvious how sophisticated you can make this with respect to triggering different instruments, etc&#x2026;
</p>

<p>
In running this, my "notebook" was blocked while the experiment ran. It is possible to run things asynchronously, and sometimes that would make sense. In the example here, we have provided a very limited set of functions to "run" the potentiostat. It was only a proof of concept to get a sense for what it is like. In practice a fuller set of functions would be implemented. Another point to consider is how the data comes back from the potentiostat. We used json here because it is convenient, but we could just as well send files, and other sorts of data too.
</p>

<p>
This lays out the possibility to walk up to an instrument with an electronic notebook, setup and run the experiment, capture the results in the notebook and take it back to the office for analysis. Pretty cool.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a id="ID-5EB72A19-B9D3-4ABA-975F-61ACE16E0D87" name="ID-5EB72A19-B9D3-4ABA-975F-61ACE16E0D87"></a><span class="section-number-2">2</span> Flask app</h2>
<div class="outline-text-2" id="text-2">

<p>
So, here is my flask app. We setup a few routes using get requests to do things like get a list of the potentiostats online, and to run a cyclic voltamogram. As a side note, after this post is over, I am turning off the app, so you won't be able to repeat the codes ;) This is not a beautiful, secure or error tolerant code. It works enough for a proof of concept of simple experiments.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> flask <span style="color: #0000FF;">import</span> Flask, request, jsonify
<span style="color: #0000FF;">import</span> time

<span style="color: #BA36A5;">app</span> = Flask(<span style="color: #006FE0;">__name__</span>)

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">hello_world</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'Hello World!'</span>

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/pstats'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_pstats</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> win32com.client <span style="color: #0000FF;">as</span> client
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">devices</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDeviceList'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = <span style="color: #006FE0;">str</span>(devices.EnumSections())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> result

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/close_pstat'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">close</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> win32com.client <span style="color: #0000FF;">as</span> client
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">devicelist</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDeviceList'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x</span> = devicelist.EnumSections()[0]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pstat</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryPstat'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Init(x)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Close()


<span style="color: #0000FF;">def</span> <span style="color: #006699;">run_ramp</span>(Sinit,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">start value</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    Sfinal, <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">end value</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    ScanRate=1,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    SampleRate=0.01,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    CtrlMode=1,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">GamryCOM.PstatMode</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    fname=<span style="color: #D0372D;">None</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">'''We assume the first device is the one you want.</span>
<span style="color: #036A07;">    '''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> win32com.client <span style="color: #0000FF;">as</span> client
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">devicelist</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDeviceList'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x</span> = devicelist.EnumSections()[0]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pstat</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryPstat'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Init(x)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Open()

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dtaqcpiv</span>=client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDtaqCpiv'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   dtaqcpiv.Init(pstat)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sigramp</span>=client.Dispatch(<span style="color: #008000;">'GamryCOM.GamrySignalRamp'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   sigramp.Init(pstat, Sinit, Sfinal, ScanRate, SampleRate, CtrlMode)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.SetSignal(sigramp)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.SetCell(1) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">1 == GamryCOM.CellOn</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   dtaqcpiv.Run(<span style="color: #D0372D;">True</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">except</span> <span style="color: #6434A3;">Exception</span> <span style="color: #0000FF;">as</span> e:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Close()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">raise</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">NOTE:  The comtypes example in this same directory illustrates the use of com</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">notification events.  The comtypes package is recommended as an alternative</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">to win32com.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(2) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">just wait sufficiently long for the acquisition to complete.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">acquired_points</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">count</span> = 1
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">while</span> count &gt; 0:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">count</span>, <span style="color: #BA36A5;">points</span> = dtaqcpiv.Cook(10)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The columns exposed by GamryDtaq.Cook vary by dtaq and are</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">documented in the Toolkit Reference Manual.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   acquired_points.extend(<span style="color: #006FE0;">zip</span>(*points))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">acquired_points</span> = np.array(acquired_points)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> fname <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   np.savetxt(fname, acquired_points)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Close()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> jsonify({<span style="color: #008000;">'data'</span>: acquired_points.tolist()})

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/cv'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">run_cv</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = <span style="color: #006FE0;">str</span>(request.values)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">startv</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'startv'</span>, -0.1))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">endv</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'endv'</span>, 0.1))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">scanrate</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'scanrate'</span>, 1.0))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">samplerate</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'samplerate'</span>, 0.01))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = run_ramp(startv, endv, scanrate, samplerate)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> data


<span style="color: #0000FF;">if</span> <span style="color: #006FE0;">__name__</span> == <span style="color: #008000;">'__main__'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   app.run(host=<span style="color: #008000;">'jkitchin-win.cheme.cmu.edu'</span>, port=5000, debug=<span style="color: #D0372D;">True</span>)
</pre>
</div>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/25/Running-scientific-instruments-in-Emacs-and-recording-the-results.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A sudo org-link and sh block</title>
      <link>http://jkitchin.github.io/blog/2015/07/17/A-sudo-org-link-and-sh-block</link>
      <pubDate>Fri, 17 Jul 2015 12:42:34 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[babel]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">MOPGUwfkhzLawJGSAeH4c0fVZlg=</guid>
      <description>A sudo org-link and sh block</description>
      <content:encoded><![CDATA[


<p>
Shell blocks in org-mode are pretty useful, but they are a little limited in that it is not obvious how to run a sudo command in them.
</p>

<p>
So for example, this gives me a permission denied error.
</p>
<div class="org-src-container">

<pre class="src src-sh">ls /var/audit
</pre>
</div>

<p>
One way to get around this is to create an org-mode link like this one:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">http://stackoverflow.com/questions/2472273/how-do-i-run-a-sudo-command-in-emacs</span>
(org-add-link-type
 <span style="color: #008000;">"sudo"</span>
 (<span style="color: #0000FF;">lambda</span> (cmd)
   <span style="color: #036A07;">"Run CMD with sudo."</span>
   (shell-command
    (concat <span style="color: #008000;">"echo "</span> (shell-quote-argument (read-passwd <span style="color: #008000;">"Password? "</span>))
            <span style="color: #008000;">" | sudo -S "</span> cmd))))
</pre>
</div>

<p>
Now you can create a link like <a href="ls /var/audit">ls /var/audit</a>, and when you click on it you will be prompted for a password, and then you will see a buffer containing the output. To get an actual sudo code block, you need a new org babel library. Here is an example of what it might look like. Tangle this file to generate the library. Note: This is a lightly modified version of ob-emacs-lisp.el, and I have not tested it very thoroughly.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">ob-sudo.el --- An org-mode source block to run shell commands as sudo</span>

<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">Commentary:</span>
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Runs the block of code as a shell command with sudo.</span>

<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">Code:</span>

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:sudo</span> (body params)
  <span style="color: #036A07;">"Run BODY as a shell command using sudo."</span>
  (<span style="color: #0000FF;">let*</span> ((passwd (shell-quote-argument (read-passwd <span style="color: #008000;">"Password? "</span>)))
         (result (shell-command-to-string
                  (concat <span style="color: #008000;">"echo "</span> passwd
                          <span style="color: #008000;">" | sudo -S "</span> body))))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is verbatim from ob-emacs-lisp</span>
    (<span style="color: #0000FF;">org-babel-result-cond</span> (cdr (assoc <span style="color: #006FE0;">:result-params</span> params))
      (<span style="color: #0000FF;">let</span> ((print-level nil)
            (print-length nil))
        (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">or</span> (member <span style="color: #008000;">"scalar"</span> (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
                (member <span style="color: #008000;">"verbatim"</span> (cdr (assoc <span style="color: #006FE0;">:result-params</span> params))))
            (format <span style="color: #008000;">"%S"</span> result)
          (format <span style="color: #008000;">"%s"</span> result)))
      (org-babel-reassemble-table
       result
       (org-babel-pick-name (cdr (assoc <span style="color: #006FE0;">:colname-names</span> params))
                            (cdr (assoc <span style="color: #006FE0;">:colnames</span> params)))
       (org-babel-pick-name (cdr (assoc <span style="color: #006FE0;">:rowname-names</span> params))
                            (cdr (assoc <span style="color: #006FE0;">:rownames</span> params)))))))

(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">ob-sudo</span>)
<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">ob-sudo.el ends here</span>
</pre>
</div>

<p>
Let us add the current dir to our path so we can load it. If you use this a lot, you should put the library on your permanent path.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'load-path (expand-file-name <span style="color: #008000;">"."</span>))
</pre>
</div>

<p>
Now, add the sudo "language" to org-babel-load-languages.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (sh . t)
   (matlab . t)
   (sqlite . t)
   (ruby . t)
   (perl . t)
   (org . t)
   (dot . t)
   (plantuml . t)
   (R . t)
   (sudo . t)))
</pre>
</div>

<p>
And, here it is in action. Hopefully I am not giving away some important information here!
</p>

<div class="org-src-container">

<pre class="src src-sudo">ls /var/audit
</pre>
</div>

<pre class="example">
20141106003522.20141110021519
20141110021548.crash_recovery
20141112154126.crash_recovery
20141119201541.20141122145259
20141122145317.20141124214930
20141124215000.crash_recovery
20141126062011.20141202192451
20141202192507.crash_recovery
20141210133306.crash_recovery
20141225181819.20150106015256
20150106015325.20150111010018
20150111010121.crash_recovery
20150115195518.20150115200101
20150115200110.crash_recovery
20150123061227.20150215123411
20150215123454.crash_recovery
20150225004740.20150310201600
20150310201633.20150314214730
20150314214807.crash_recovery
20150323145600.20150329170647
20150329170721.crash_recovery
20150407215846.20150413000423
20150413000438.20150421122044
20150421122104.20150518122545
20150518122616.20150518124432
20150518124432.20150518124513
20150518124513.20150518125437
20150518125437.20150518125935
20150518125935.20150518132111
20150518132111.20150531202621
20150531202719.20150601123612
20150601123612.20150601124932
20150601124932.20150601125151
20150601125151.20150601125555
20150601125555.20150601131947
20150601131947.20150601132421
20150601132421.20150601133735
20150601133735.20150601140740
20150601140740.20150601154012
20150601154012.20150601155125
20150601155125.20150601155215
20150601155215.20150601160937
20150601160937.crash_recovery
20150613061543.20150614054541
20150614054541.20150625165357
20150625165432.20150625200623
20150625200623.20150628042242
20150628042242.20150628103628
20150628103628.20150630052100
20150630052100.20150701232519
20150702005345.20150710203212
20150710203226.not_terminated
current
</pre>

<p>
Summary thoughts: I will reiterate again I have not tested this a lot, I was mostly interested in trying to make a new sh block with sudo support. Let me know if it has issues for you, and make sure you have backups of things it could mess up!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/17/A-sudo-org-link-and-sh-block.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
