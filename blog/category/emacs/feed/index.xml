<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Thu, 31 Mar 2016 17:49:04 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>More on Hy and why I think it is a big deal</title>
      <link>http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal</link>
      <pubDate>Thu, 31 Mar 2016 13:41:43 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">K3rprBTSYnrEBGagSwWNLrb8STo=</guid>
      <description>More on Hy and why I think it is a big deal</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Editing with hy-mode and lispy</a></li>
<li><a href="#sec-2">2. Python with no whitespace, or commas in lists</a></li>
<li><a href="#sec-3">3. No confusion in expressions in statements</a></li>
<li><a href="#sec-4">4. Proper multiline lambda functions</a></li>
<li><a href="#sec-5">5. Macros and Extensible syntax</a>
<ul>
<li><a href="#sec-5-1">5.1. Some math</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Interoperability with Python</a></li>
<li><a href="#sec-7">7. Integration of emacs and Hy</a></li>
<li><a href="#sec-8">8. Hypster and Hy Society.</a></li>
<li><a href="#sec-9">9. What do we still need?</a></li>
</ul>
</div>
</div>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/30/OMG-A-Lisp-that-runs-python/">Yesterday</a> I talked about <a href="https://github.com/hylang/hy">hylang</a> , a Lisp that basically compiles to and runs Python code. Today, I want to show a few reasons why this is a great idea, and an important one. Below I give a few examples of why the hylang approach is better (in my opinion of course) than Python with a few examples of things I have always wanted in Python but couldn't get.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Editing with hy-mode and lispy</h2>
<div class="outline-text-2" id="text-1">
<p>
There is a major mode for Hy: <a href="https://github.com/hylang/hy-mode">https://github.com/hylang/hy-mode</a> also on MELPA. It gives us some syntax highlighting and better access to a REPL.
</p>

<p>
Let's load lispy (<a href="https://github.com/abo-abo/lispy">https://github.com/abo-abo/lispy</a> ) for it so we also get amazing editing. I always wanted to use lispy style navigation and editing in Python, but the whitespace and indentation did not make it that easy. Problem solved with these. @abo-abo already added basic eval support for Hy to lispy since the post yesterday (<a href="https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c">https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c</a> ); Thanks!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-hook 'hy-mode-hook
          (<span style="color: #0000FF;">lambda</span> ()
            (lispy-mode 1)))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Python with no whitespace, or commas in lists</h2>
<div class="outline-text-2" id="text-2">
<p>
You can still use indentation (it is good style), but this works!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
(<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3) (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
(<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This looks nicer.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
  (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3)
    (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
    (<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This is a big deal too. Using Python in sessions in org-mode has always been a little complicated by the indentation and whitespace, especially with nested loops and functions. That problem is probably gone.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> No confusion in expressions in statements</h2>
<div class="outline-text-2" id="text-3">
<p>
In Python you can do this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 5
<span style="color: #0000FF;">print</span>(a)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
But not this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(a=5)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
  File "&lt;stdin&gt;", line 1
   print(a=5)
          ^
SyntaxError: invalid syntax
</pre>

<p>
You can't put assignment statements and expression statements anywhere you want, they are only legal syntax in some places. For example, a=5 above actually looks like the print function has an argument of a that set to 5. Not true in Lisp; there are only expressions! So this works fine.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">setv</span> a 5))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> a 5))
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
I just like this style of simple syntax.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Proper multiline lambda functions</h2>
<div class="outline-text-2" id="text-4">
<p>
Python syntax fundamentally limits you to one line lambdas. Not so for Hy. Let's use one in a filter to print even numbers. Here is an example with a two-liner but you could make them more complicated. In Python, you have to make a separate function for this. That isn't terrible, but if it is never used for anything else, it could be avoided.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="lambda">(<span style="color: #006FE0;">setv</span> a [0 1 2 3 4 5 6 7 8])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">display</span> [list filter]
  (<span style="color: #0000FF;">for</span> [x list] (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">filter</span> x) (<span style="color: #006FE0;">print</span> x))))

(display a (<span style="color: #0000FF;">lambda</span> [x]
             (<span style="color: #006FE0;">=</span> (<span style="color: #006FE0;">%</span> x 2) 0)))
</pre>
</div>

<pre class="example">
0
2
4
6
8
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Macros and Extensible syntax</h2>
<div class="outline-text-2" id="text-5">
<p>
It is not easy to get real macro (code expansion) behavior in Python. Yes, there are decorators, and closures, and related things that get close to it. But there are not lisp-like macros.
</p>

<p>
Here is a (too) simple macro to allow for infix notation. It only works for two arguments, but could be extended for multiple arguments.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">infix</span> [code]
  (<span style="color: #006FE0;">quasiquote</span> ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> (infix (1 + 1)))
</pre>
</div>
<pre class="example">
2
</pre>

<p>
If we want new syntax we can get it!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">$</span> [code]
  (<span style="color: #006FE0;">quasiquote</span>
   ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> #$(1 + 1))
</pre>
</div>

<pre class="example">
2
</pre>

<p>
Why is this nice? Here is a math example that shows why you might want to change syntax.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Some math</h3>
<div class="outline-text-3" id="text-5-1">
<p>
See <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/">http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/</a> for the Python version of solving the Bessel equation numerically. Here we do it with hylang.
</p>

<p>
Why would we want infix notation? Here is a good reason. The prefix notation is not easy to read. Compare:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">dzdx</span> = 1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
</pre>
</div>

<p>
The infix notation is simpler to read. Still, the code below is not that hard to figure out, especially if there was a generalized infix notation that allowed (with parens for explicit operation precedence):
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (nfx (1.0 / x**2) * ((-x * z) - ((x**2 - nu**2) * y))))
</pre>
</div>

<p>
So, here is the hylang equivalent to my previous Python version.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0)
  (<span style="color: #006FE0;">setv</span> y (<span style="color: #006FE0;">get</span> Y 0))
  (<span style="color: #006FE0;">setv</span> z (<span style="color: #006FE0;">get</span> Y 1))

  (<span style="color: #006FE0;">setv</span> dydx z)
  (<span style="color: #006FE0;">setv</span> dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15)
(<span style="color: #006FE0;">setv</span> y0 1.0)
(<span style="color: #006FE0;">setv</span> z0 0.0)
(<span style="color: #006FE0;">setv</span> Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10))
(<span style="color: #006FE0;">setv</span> sol (odeint fbessel Y0 xspan))
(<span style="color: #006FE0;">setv</span> s (<span style="color: #006FE0;">list-comp</span> (<span style="color: #006FE0;">get</span> x 0) [x sol]))

(plt.plot xspan s <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"hy-ode.png"</span>)
</pre>
</div>

<pre class="example">
2016-03-30 21:51:34.936 Python[95268:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-03-30 21:51:34.937 Python[95268:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
</pre>


<div class="figure">
<p><img src="/media/2016-03-31-More-on-Hy-and-why-I-think-it-is-a-big-deal/hy-ode.png"> 
</p>
</div>

<p>
I wish I could put multiple pairs in setv. The use of list comprehension for the slices on the array are a little odd. I am not sure if there is a nicer syntax for that (this is only the 2nd day I have used hylang). Otherwise it looks really good to me, except for that prefix math.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Interoperability with Python</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop">http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop</a> 
</p>

<p>
Write Hy code and use it in Python. Use Python code in Hy. Repeat. Sweet.
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Integration of emacs and Hy</h2>
<div class="outline-text-2" id="text-7">
<p>
This isn't so beautiful but it illustrates  a pretty awesome integration of Hy(python) into Emacs!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">hy</span> (body)
  `(<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
          (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
     (message (format <span style="color: #008000;">"code: %S"</span> ,body))
     (<span style="color: #0000FF;">with-temp-file</span> tempfile
       (mapc (<span style="color: #0000FF;">lambda</span> (form) (insert (format <span style="color: #008000;">"%s"</span> form))) ,body))
     (read (<span style="color: #0000FF;">unwind-protect</span>
               (shell-command-to-string
                (format <span style="color: #008000;">"hy %s"</span> tempfile))
             (delete-file tempfile)))))

(aref (<span style="color: #0000FF;">hy</span> '((import numpy)
            (setv a (numpy.array [1 2 3]))
            (setv b (numpy.array [1 2 3]))
            (print (* a b))))
      1)
</pre>
</div>

<pre class="example">
4
</pre>

<p>
This isn't perfect, and there are many ways it could break down. But if you are careful to make the output "read"able, you can literally embed Hy code in Emacs lisp and use the results, a total win for Science! I feel like it might need something like progn, but that would not change what this does dramatically.
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Hypster and Hy Society.</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://notes.pault.ag/hy-survival-guide/">http://notes.pault.ag/hy-survival-guide/</a> ROTFL. <b>ironically</b> of course ;)
</p>

<p>
And the <a href="https://twitter.com/hylang">@hylang</a> Twitter account is run by Hy Society. Nice.
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> What do we still need?</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li>Experience. Hy seems relatively young compared to other Lisps. It isn't clear yet if this could work like Python does at scale in research. I sure look forward to finding out though!
</li>
<li>Proper infix notation for engineering math. I could live with no operator precedence if it led to a quicker solution for now. As long as something like (1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)) is legal!
</li>
<li>A proper integration with org-mode and the REPL.
</li>
<li>Toolchains like emacs-lisp has. I just love those. Killer debugging, access to hyperlinked documentation, code navigation, &#x2026; Maybe integration with something like SLIME or CIDER? Hyder?
</li>
<li>Use it in a proper big project to find out where the limitations are, maybe Hycse as a companion to Pycse (<a href="http://kitchingroup.cheme.cmu.edu/pycse/">http://kitchingroup.cheme.cmu.edu/pycse/</a> )? or a rewrite of <a href="http://kitchingroup.cheme.cmu.edu/dft-book/">http://kitchingroup.cheme.cmu.edu/dft-book/</a> in Hy?
</li>
</ol>

<p>
Overall, I am pretty excited about this project. The syntax is a bit reminiscent of Clojure, and Racket, the former by design. Lots of new ideas still seem to be percolating in, so there is likely good stuff to see in the future!
</p>

<p>
I haven't used it enough to see the warts yet, but already the top issues I had with Python are largely addressed, so I see this as a way to continue progress with all the benefits of Python.</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Jump to a tagged src block</title>
      <link>http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block</link>
      <pubDate>Wed, 30 Mar 2016 14:26:35 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">rEfibtplRxyznsBNmHgs5roma0g=</guid>
      <description>Jump to a tagged src block</description>
      <content:encoded><![CDATA[


<p>
If you have a lot of src-blocks in your org-file, it might be nice to "tag" them and be able to jump around between them using tag expressions, or by the name of the block, language etc&#x2026; Here we develop a way to do that and create a handy function to jump to blocks in the current buffer.
</p>

<p>
First, we look at how to "tag" a src-block. One way is to use a header like this:
</p>

<pre class="example">
#+header: :tags cool idiom two
</pre>

<p>
These are not tags in the usual org-mode sense, they are just a space separated list of words we will later treat as tags. We can get the tags on a src-block with this function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-block-tags</span> (src-block)
  <span style="color: #036A07;">"Return tags for SRC-BLOCK (an org element)."</span>
  (<span style="color: #0000FF;">let*</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                   (mapcar 'org-babel-parse-header-arguments
                           (org-element-property <span style="color: #006FE0;">:header</span> src-block))))
         (tags (cdr (assoc <span style="color: #006FE0;">:tags</span> headers))))
    (<span style="color: #0000FF;">when</span> tags
      (split-string tags))))
</pre>
</div>

<pre class="example">
src-block-tags
</pre>

<p>
Now, we make a src-block with the tags "test" "one" and "idiom", and see how to tell if the block matches the tag expression "test+idiom".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp" id="tag-matcher">(<span style="color: #0000FF;">let*</span> ((lexical-binding nil)
       (todo-only nil)
       (tags-list (src-block-tags (org-element-context)))
       (tag-expression <span style="color: #008000;">"test+idiom"</span>))
  (eval (cdr (org-make-tags-matcher tag-expression))))
</pre>
</div>
<pre class="example">
t
</pre>

<p>
It does, so we wrap that up into a function that tells us if a src-block matches some tag expression.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-block-match-tag-expression-p</span> (src-block tag-expression)
  <span style="color: #036A07;">"Determine if SRC-BLOCK matches TAG-EXPRESSION."</span>
  (<span style="color: #0000FF;">let*</span> ((lexical-binding nil)
         (todo-only nil)
         (tags-list (src-block-tags src-block)))
    (eval (cdr (org-make-tags-matcher tag-expression)))))
</pre>
</div>
<pre class="example">
src-block-match-tag-expression-p
</pre>

<p>
Here we test that on a block tagged "one three" on the expression "one-two" which means tagged one and not two.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(src-block-match-tag-expression-p (org-element-context) <span style="color: #008000;">"one-two"</span>)
</pre>
</div>
<pre class="example">
t
</pre>

<p>
Those are the main pieces we need to jump around. We just need a selection tool with a list of filtered candidates. We get a list of src-block candidates to choose from in the next block as an example. Here we get blocks tagged one but not two. We can incorporate this into a selection backend like helm or ivy.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) 'src-block
  (<span style="color: #0000FF;">lambda</span> (src-block)
    (<span style="color: #0000FF;">when</span> (src-block-match-tag-expression-p src-block <span style="color: #008000;">"one-two"</span>)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Get a string and marker</span>
      (cons
       (format <span style="color: #008000;">"%15s|%15s|%s"</span>
               (org-element-property <span style="color: #006FE0;">:name</span> src-block)
               (org-element-property <span style="color: #006FE0;">:language</span> src-block)
               (org-element-property <span style="color: #006FE0;">:header</span> src-block))
       (org-element-property <span style="color: #006FE0;">:begin</span> src-block)))))
</pre>
</div>
<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #008000;">"    tag-matcher|     emacs-lisp|(:tags test one idiom)"</span> . 1222)
 (<span style="color: #008000;">"            nil|     emacs-lisp|(:tags one)"</span> . 1641)
 (<span style="color: #008000;">"            nil|     emacs-lisp|(:tags one three)"</span> . 2120))
</pre>
</div>

<p>
Now let us put that into ivy. We will ask for an expression to filter the blocks on, and then use ivy to narrow what is left, and the only action is to jump to the position of the selected block. You can start with a tag expression, or press enter to get all the tags. Then you can use ivy to further narrow by language, block name, or other tags.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-jump-to-src</span> (tag-expression)
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"sTag expression: "</span>)
  (ivy-read <span style="color: #008000;">"Select: "</span>
            (org-element-map (org-element-parse-buffer) 'src-block
              (<span style="color: #0000FF;">lambda</span> (src-block)
                (<span style="color: #0000FF;">when</span> (src-block-match-tag-expression-p src-block tag-expression)
                  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Get a string and marker</span>
                  (cons
                   (format <span style="color: #008000;">"%15s|%15s|%s"</span>
                           (org-element-property <span style="color: #006FE0;">:name</span> src-block)
                           (org-element-property <span style="color: #006FE0;">:language</span> src-block)
                           (org-element-property <span style="color: #006FE0;">:header</span> src-block))
                   (org-element-property <span style="color: #006FE0;">:begin</span> src-block)))))
            <span style="color: #006FE0;">:require-match</span> t
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"j"</span> (<span style="color: #0000FF;">lambda</span> (pos) (<span style="color: #0000FF;">interactive</span>) (goto-char pos))))))
</pre>
</div>

<pre class="example">
ivy-jump-to-src
</pre>

<p>
For fun, here is a python block just for testing.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(42)
</pre>
</div>

<pre class="example">
42
</pre>

<p>
That is it! It seems to work ok. There are some variations that might be preferrable, like putting the tags in as params in the src-block header to avoid needing a separate header line. It isn't clear how much I would use this, and it is slow if you have <i>a lot</i> of src blocks in a /large/org-file because of the parsing. (how large? I noticed a notable lag on my 22,800 line org-file this is in ;).
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/30/Jump-to-a-tagged-src-block.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Another approach to embedded molecular data in org-mode</title>
      <link>http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode</link>
      <pubDate>Mon, 28 Mar 2016 11:25:16 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[chemistry]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">c-Frb_EpIvnXnKeo9vGWBKuL3Ak=</guid>
      <description>Another approach to embedded molecular data in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Summary thoughts</a></li>
<li><a href="#sec-2">2. Appendix of molecules</a>
<ul>
<li><a href="#sec-2-1">2.1. Water</a></li>
<li><a href="#sec-2-2">2.2. Caffeine</a></li>
</ul>
</li>
</ul>
</div>
</div>
<style>.molecule {background-color:LightSkyBlue;}</style>
<p>
In the <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/">last post</a> we examined a molecule link to a src-block defining a molecule in some format. We blurred the distinction between program and data there. Here we re-separate them to try out some different ideas. We will use an <a href="http://orgmode.org/manual/Special-blocks.html">org-mode special block</a> to contain the "data" which is a molecular representation in some format. Then, we will use open-babel to convert the format to various other formats to explore using the data.
</p>

<p>
Here is a methane molecule (with 4 implicit hydrogens in the SMILES format). We put it in a named special block in org-mode, and even put a header on it to indicate the format and a display name!
</p>

<div class="molecule" id="methane-smiles">
<p>
C
</p>

</div>

<p>
We can use the SMILES representation block as input to a new command that converts it to the CML format, with coordinates. We use a simple shell command here and pass the contents of the molecule in as a variable. That is nice because in SMILES methane is represented by a single "C", and this CML is <i>much</i> more verbose.
</p>

<div class="org-src-container">

<pre class="src src-sh" id="methane-cml"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">input</span> | obabel -ismi -o cml --gen3d
</pre>
</div>

<pre class="example">
&lt;?xml version="1.0"?&gt;
&lt;molecule xmlns="http://www.xml-cml.org/schema"&gt;
 &lt;atomArray&gt;
  &lt;atom id="a1" elementType="C" x3="1.047517" y3="-0.064442" z3="0.060284"/&gt;
  &lt;atom id="a2" elementType="H" x3="2.139937" y3="-0.064341" z3="0.059898"/&gt;
  &lt;atom id="a3" elementType="H" x3="0.683568" y3="-0.799429" z3="-0.661322"/&gt;
  &lt;atom id="a4" elementType="H" x3="0.683566" y3="0.927794" z3="-0.216100"/&gt;
  &lt;atom id="a5" elementType="H" x3="0.683669" y3="-0.321317" z3="1.056822"/&gt;
 &lt;/atomArray&gt;
 &lt;bondArray&gt;
  &lt;bond atomRefs2="a1 a2" order="1"/&gt;
  &lt;bond atomRefs2="a1 a3" order="1"/&gt;
  &lt;bond atomRefs2="a1 a4" order="1"/&gt;
  &lt;bond atomRefs2="a1 a5" order="1"/&gt;
 &lt;/bondArray&gt;
&lt;/molecule&gt;
</pre>

<p>
We can also use the CML output as input to a command that generates an SVG image, again, passing the CML in via a variable in the header.
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">cml</span> | obabel -icml -o svg
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-28-Another-approach-to-embedded-molecular-data-in-org-mode/methane.svg"> 
</p>
</div>

<p>
With our previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/">molecule link</a> we can refer to these in our text now as <a href="#methane-smiles">methane-smiles</a> and <a href="#methane-cml">methane-cml</a>.
</p>

<p>
So far it all looks good. Let us do something new. We will use the SMILES representation to create an <a href="https://wiki.fysik.dtu.dk/ase/ase/atoms.html">ase.atoms</a> object in Python. First, we create an xyz format that <code>ase</code> can read. Rather than clutter up our document with the output, we silence it.
</p>

<div class="org-src-container">

<pre class="src src-sh" id="methane-xyz"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">input</span> | obabel -ismi -o xyz --gen3d
</pre>
</div>

<p>
Now, we can use the string generated in a Python file to generate a tempfile (or you could have saved the result above to a file and just read it in here). I was too lazy to make the file link to the image myself, so I setup a :file header and just print the result to stdout in this block. Although all we do here is create a new image, this demonstrates you can use data from a MOLECULE block and pass it into a Python script where other kinds of calculations might occur.
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> ase.io <span style="color: #0000FF;">import</span> read, write

<span style="color: #0000FF;">from</span> tempfile <span style="color: #0000FF;">import</span> mkstemp
<span style="color: #BA36A5;">fd</span>, <span style="color: #BA36A5;">fname</span> = mkstemp(suffix=<span style="color: #008000;">".xyz"</span>)
<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(xyz)

<span style="color: #BA36A5;">atoms</span> = read(fname)
write(<span style="color: #008000;">'-'</span>, atoms, <span style="color: #006FE0;">format</span>=<span style="color: #008000;">"png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-28-Another-approach-to-embedded-molecular-data-in-org-mode/methane.png"> 
</p>
</div>


<p>
The last point to discuss is discoverability. It would be helpful if we could use a program to "extract" molecular information about the molecules we use in our work. Here is a block that will map over the MOLECULE blocks and summarize what is found with a common format (SMILES again). We generate a table of clickable links to each molecule found in the documents. There is a small appendix in this document containing <a href="#h2o">h2o</a> and <a href="#caffeine">caffeine</a> that will show in this table.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">mlc-to-smiles</span> (blk)
  <span style="color: #036A07;">"Convert a molecule BLK to smiles format using openbabel."</span>
  (<span style="color: #0000FF;">let*</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                   (mapcar 'org-babel-parse-header-arguments
                           (org-element-property <span style="color: #006FE0;">:header</span> blk))))
         (format (cdr (assoc <span style="color: #006FE0;">:format</span> headers)))
         (content (buffer-substring-no-properties
                   (org-element-property <span style="color: #006FE0;">:contents-begin</span> blk)
                   (org-element-property <span style="color: #006FE0;">:contents-end</span> blk)))
         (tempfile (make-temp-file <span style="color: #008000;">"obabel-"</span>)))
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert content))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">convert to smiles. This outputs a smiles string and the file it was</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">generated from. I don't know how to suppress the file, so we use awk to</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">just get the SMILEs strings. It is not pretty. I know.</span>
    (<span style="color: #0000FF;">prog1</span>
        (s-trim (shell-command-to-string
                 (format  <span style="color: #008000;">"obabel %s %s -osmi 2&gt; /dev/null | awk '{print $1}'"</span>
                          (format <span style="color: #008000;">"-i%s"</span> format) tempfile)))
      (delete-file tempfile))))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Generate the table of molecules</span>
(append '((<span style="color: #008000;">"Display name"</span> <span style="color: #008000;">"Name"</span> <span style="color: #008000;">"format"</span> <span style="color: #008000;">"SMILES representation"</span>))
        '(hline)
        (org-element-map (org-element-parse-buffer) 'special-block
          (<span style="color: #0000FF;">lambda</span> (sb)
            (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"MOLECULE"</span> (org-element-property <span style="color: #006FE0;">:type</span> sb))
              (<span style="color: #0000FF;">let</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                              (mapcar 'org-babel-parse-header-arguments
                                      (org-element-property <span style="color: #006FE0;">:header</span> sb)))))

                (list
                 (format <span style="color: #008000;">"[[molecule:%s][%s]]"</span> (org-element-property <span style="color: #006FE0;">:name</span> sb)
                         (cdr (assoc <span style="color: #006FE0;">:display-name</span> headers)))
                 (org-element-property <span style="color: #006FE0;">:name</span> sb)
                 (cdr (assoc <span style="color: #006FE0;">:format</span> headers))
                 (mlc-to-smiles sb)))))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Display name</th>
<th scope="col" class="left">Name</th>
<th scope="col" class="left">format</th>
<th scope="col" class="left">SMILES representation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><a href="#methane-smiles">methane-smiles</a></td>
<td class="left">methane-smiles</td>
<td class="left">smiles</td>
<td class="left">C</td>
</tr>

<tr>
<td class="left"><a href="#h2o">h2o</a></td>
<td class="left">h2o</td>
<td class="left">cml</td>
<td class="left">OO</td>
</tr>

<tr>
<td class="left"><a href="#caffeine">caffeine</a></td>
<td class="left">caffeine</td>
<td class="left">xyz</td>
<td class="left">Cn1cnc2n(C)c(=O)n(C)c(=O)c12</td>
</tr>
</tbody>
</table>

<p>
That seems pretty discoverable to me. We not only can discover the molecules in this post, but can pretty easily convert them to other formats (SMILES) in this case. Since we can run any code we want on them, we could just as well import them to a database, or do subsequent calculations on them.
</p>

<p>
The MOLECULE block is not standard, and I have only demonstrated here that it is suitable for this purpose. But, it looks like we could extend it and deal with a variety of formats. We can use headers to add metadata, format, etc&#x2026; Some features I find missing are similar to those in code blocks where we can type C-c ' to edit them in special modes, and the nice syntax highlighting that often comes with that.
</p>

<p>
It might be helpful to make the export of MOLECULE blocks nicer looking and more functional. The default export, for example doesn't put an id attribute in the block. First, we rewrite an org-function to add the id attribute to the exported blocks so our molecule links will work.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-html-special-block</span> (special-block contents info)
  <span style="color: #036A07;">"Transcode a SPECIAL-BLOCK element from Org to HTML.</span>
<span style="color: #036A07;">CONTENTS holds the contents of the block.  INFO is a plist</span>
<span style="color: #036A07;">holding contextual information."</span>
  (<span style="color: #0000FF;">let*</span> ((block-type (downcase
                      (org-element-property <span style="color: #006FE0;">:type</span> special-block)))
         (contents (<span style="color: #0000FF;">or</span> contents <span style="color: #008000;">""</span>))
         (html5-fancy (<span style="color: #0000FF;">and</span> (org-html-html5-p info)
                           (plist-get info <span style="color: #006FE0;">:html-html5-fancy</span>)
                           (member block-type org-html-html5-elements)))
         (attributes (org-export-read-attribute <span style="color: #006FE0;">:attr_html</span> special-block)))
    (<span style="color: #0000FF;">unless</span> html5-fancy
      (<span style="color: #0000FF;">let</span> ((class (plist-get attributes <span style="color: #006FE0;">:class</span>)))
        (<span style="color: #0000FF;">setq</span> attributes (plist-put attributes <span style="color: #006FE0;">:class</span>
                                    (<span style="color: #0000FF;">if</span> class (concat class <span style="color: #008000;">" "</span> block-type)
                                      block-type)))
        (<span style="color: #0000FF;">when</span> (org-element-property <span style="color: #006FE0;">:name</span> special-block)
          (<span style="color: #0000FF;">setq</span> attributes (plist-put
                            attributes <span style="color: #006FE0;">:id</span>
                            (org-element-property <span style="color: #006FE0;">:name</span> special-block))))))
    (<span style="color: #0000FF;">setq</span> attributes (org-html--make-attribute-string attributes))
    (<span style="color: #0000FF;">when</span> (not (equal attributes <span style="color: #008000;">""</span>))
      (<span style="color: #0000FF;">setq</span> attributes (concat <span style="color: #008000;">" "</span> attributes)))
    (<span style="color: #0000FF;">if</span> html5-fancy
        (format <span style="color: #008000;">"&lt;%s%s&gt;\n%s&lt;/%s&gt;"</span> block-type attributes
                contents block-type)
      (format <span style="color: #008000;">"&lt;div%s&gt;\n%s\n&lt;/div&gt;"</span> attributes contents))))
</pre>
</div>

<pre class="example">
org-html-special-block
</pre>

<p>
It would be nice to add some additional information around the block, e.g. that it is a molecule, maybe some tooltip about the format, etc&#x2026;, but we leave that to another day. These should probably be handled specially with a dedicated export function. You will note that MOLECULE blocks don't export too well, they should probably be wrapped in &lt;pre&gt; for HTML export. We will at least make them stand out with this bit of css magic.
</p>

<pre class="example">
#+HTML_HEAD_EXTRA:  &lt;style&gt;.molecule {background-color:LightSkyBlue;}&lt;/style&gt;
</pre>



<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
This looks pretty promising as a way to embed molecular data into org-files so that the data is reusable and discoverable. If there is metadata that cannot go into the MOLECULE format we can put it in headers instead. This seems like it could be useful.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Appendix of molecules</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Water</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Here is water in the CML format.
</p>

<div class="molecule" id="h2o">
<p>
&lt;?xml version="1.0"?&gt;
&lt;molecule xmlns="<a href="http://www.xml-cml.org/schema">http://www.xml-cml.org/schema</a>"&gt;
 &lt;atomArray&gt;
  &lt;atom id="a1" elementType="O"/&gt;
  &lt;atom id="a2" elementType="O"/&gt;
 &lt;/atomArray&gt;
 &lt;bondArray&gt;
  &lt;bond atomRefs2="a1 a2" order="1"/&gt;
 &lt;/bondArray&gt;
&lt;/molecule&gt;
</p>

</div>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Caffeine</h3>
<div class="outline-text-3" id="text-2-2">
<p>
This is a simple xyz format of caffeine.
</p>

<div class="molecule" id="caffeine">
<p>
24
</p>

<p>
C          1.02887       -0.01688       -0.03460
N          2.46332        0.11699       -0.03522
C          3.33799       -0.94083       -0.03530
N          4.59156       -0.53767       -0.03594
C          4.50847        0.82120       -0.03623
N          5.57252        1.69104       -0.03687
C          6.93040        1.17620       -0.03898
C          5.33446        3.06602       -0.03685
O          6.26078        3.88171       -0.03594
N          3.98960        3.48254       -0.03830
C          3.70813        4.90531       -0.04199
C          2.87287        2.63769       -0.03747
O          1.71502        3.04777       -0.03830
C          3.21603        1.25723       -0.03610
H          0.54478        0.95872       -0.03440
H          0.73663       -0.56946        0.86233
H          0.73584       -0.56959       -0.93118
H          3.00815       -1.97242       -0.03493
H          7.67209        1.97927       -0.03815
H          7.07929        0.56516       -0.93486
H          7.08112        0.56135        0.85404
H          4.61163        5.51902       -0.04152
H          3.11230        5.15092        0.84340
H          3.11643        5.14660       -0.93127
</p>

</div>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A molecule link for org-mode</title>
      <link>http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode</link>
      <pubDate>Sat, 26 Mar 2016 15:28:17 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[chemistry]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">U1RoQRECYwAfObskx8qSl1Vly28=</guid>
      <description>A molecule link for org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Appendix of molecules</a></li>
<li><a href="#sec-2">2. smiles major mode</a></li>
</ul>
</div>
</div>
<p>
Here I am exploring some ideas on compact and functional representations of molecules in org-mode. We will use some functionality from OpenBabel (<a href="https://openbabel.org/docs/dev/index.html">https://openbabel.org/docs/dev/index.html</a> ) for conversion of formats.
</p>

<p>
One approach we could use is the <a href="https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system">SMILES</a> representation. OpenBabel provides tools to convert SMILES to a visualization like this. Let's check out an old favorite: caffeine.
</p>

<div class="org-src-container">

<pre class="src src-sh">obabel -:<span style="color: #008000;">"Cn1cnc2n(C)c(=O)n(C)c(=O)c12"</span> -osvg
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/out.svg"> 
</p>
</div>

<p>
We can imagine the SMILES string is a program, and use an org-mode src block to contain it.  It isn't quite a program, as it is more like data, but we can make the block executable if we define how to "execute" the block, and for that we will just have obabel generate the svg representation of the molecule. Here is our execute function. It simply generates the svg to stdout. We can use a :file header to capture it in a file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:smiles</span> (body params)
  (shell-command-to-string
   (format <span style="color: #008000;">"obabel -:\"%s\" -osvg 2&gt; /dev/null"</span> body)))
</pre>
</div>

<pre class="example">
org-babel-execute:smiles
</pre>

<p>
You can find a smiles block in <a href="#sec-1">Appendix of molecules</a> that was adapted from <a href="http://www.daylight.com/dayhtml_tutorials/languages/smiles/smiles_examples.html">here</a> .
</p>

<p>
Now, we need a link to refer to our molecule. We want the follow action to jump to our src block which should have a name. We will have it export as the name of the block linked to the molecule definition. This should work fine for definitions in the document. It is not robust to link to molecules in other org-files in the export. That would require those files to be exported too. For now we just define an HTML export.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">molecule-jump</span> (name)
  (org-mark-ring-push)
  (org-open-link-from-string (format <span style="color: #008000;">"[[%s]]"</span> path)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">molecule-export</span> (path desc backend)
  (<span style="color: #0000FF;">let</span> ((name (<span style="color: #0000FF;">save-window-excursion</span>
                (molecule-jump path)
                (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context)))))
    (<span style="color: #0000FF;">cond</span>
     ((eq 'html backend)
      (format <span style="color: #008000;">"&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;"</span> name name)))))

(org-add-link-type
 <span style="color: #008000;">"molecule"</span>
 'molecule-jump
 'molecule-export)
</pre>
</div>

<p>
Now we link to <a href="#LSD">LSD</a> and <a href="#ethanol">ethanol</a> that allows us to navigate to the definition. We can also refer to a molecule in another file like <a href="#ethanol">ethanol</a>. The links are clickable, and should jump to the molecule definition. On export to HTML they will be links to the definition.
</p>

<p>
Our link provides some limited functionality. We can provide more by making the follow action open a menu for example. Instead, we created a major mode <a href="#sec-2">here</a>. It provides a function to convert smiles to CML. It is readily extensible to do other conversions.
</p>

<p>
One of the reasons we want to have molecules as "data" is so we can find them in our papers. Here is an example of that. We defined two molecules in the Appendix, and we find them here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer)
    'src-block
  (<span style="color: #0000FF;">lambda</span> (src)
    (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"smiles"</span> (org-element-property <span style="color: #006FE0;">:language</span> src))
      (org-element-property <span style="color: #006FE0;">:name</span> src))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">LSD</td>
<td class="left">ethanol</td>
</tr>
</tbody>
</table>

<p>
There is still a lot to do to make this really functional. For example, we might want to use the molecules to write reactions. We might also want more advanced conversion or lookup functions, and more export options. It might be desirable to have tooltips on the links to see the molecules too. No doubt one might want to fine-tune the way the blocks run, so that options could be passed as header args.
Maybe I will work on that another day.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-1CD759B4-E276-4990-982C-E98CCE5B0517" name="ID-1CD759B4-E276-4990-982C-E98CCE5B0517"></a><span class="section-number-2">1</span> Appendix of molecules</h2>
<div class="outline-text-2" id="text-1">

<p>
Here is an example smiles block.
</p>
<div class="org-src-container">
<label class="org-src-name">A lysergic acid diethylamide molecule</label>
<pre class="src src-smiles" id="LSD">CCN(CC)C(=O)[C@H]1CN(C)[C@@H]2Cc3c[nH]c4cccc(C2=C1)c34
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/lsd.svg"> 
</p>
</div>

<div class="org-src-container">
<label class="org-src-name">An ethanol molecule.</label>
<pre class="src src-smiles" id="ethanol">CCO
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/ethanol.svg"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a id="ID-7978044B-CB2F-4AB3-8142-34A28B3DB201" name="ID-7978044B-CB2F-4AB3-8142-34A28B3DB201"></a><span class="section-number-2">2</span> smiles major mode</h2>
<div class="outline-text-2" id="text-2">
<p>
It would be nice to have a language mode to do special edits of SMILES src blocks. This mode does very little but provide a function that converts SMILES to CML using obabel and open it in a buffer. We redirect stderr to /dev/null to avoid seeing the messages from obabel. We also provide another function that opens a browser to names of the molecule.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">easymenu</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">smiles-cml</span> ()
  <span style="color: #036A07;">"Convert the smiles string in the buffer to CML."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((smiles (buffer-string)))
    (switch-to-buffer (get-buffer-create <span style="color: #008000;">"SMILES-CML"</span>))
    (erase-buffer)
    (insert
     (shell-command-to-string
      (format <span style="color: #008000;">"obabel -:\"%s\" -ocml 2&gt; /dev/null"</span>
              smiles)))
    (goto-char (point-min))
    (xml-mode)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">smiles-names</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (browse-url
   (format <span style="color: #008000;">"http://cactus.nci.nih.gov/chemical/structure/%s/names"</span>
           (buffer-string))))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">smiles-mode-map</span>
  nil
  <span style="color: #036A07;">"Keymap for smiles-mode."</span>)

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">adapted from http://ergoemacs.org/emacs/elisp_menu_for_major_mode.html</span>
(<span style="color: #0000FF;">define-derived-mode</span> <span style="color: #006699;">smiles-mode</span> fundamental-mode <span style="color: #008000;">"smiles-mode"</span>
  <span style="color: #036A07;">"Major mode for SMILES code."</span>
  (<span style="color: #0000FF;">setq</span> buffer-invisibility-spec '(t)
        mode-name <span style="color: #008000;">" &#9786;"</span>)

  (<span style="color: #0000FF;">when</span> (not smiles-mode-map)
    (<span style="color: #0000FF;">setq</span> smiles-mode-map (make-sparse-keymap)))
  (define-key smiles-mode-map (kbd <span style="color: #008000;">"C-c C-c"</span>) 'smiles-cml)
  (define-key smiles-mode-map (kbd <span style="color: #008000;">"C-c C-n"</span>) 'smiles-names)

  (define-key smiles-mode-map [menu-bar] (make-sparse-keymap))

  (<span style="color: #0000FF;">let</span> ((menuMap (make-sparse-keymap <span style="color: #008000;">"SMILES"</span>)))
    (define-key smiles-mode-map [menu-bar smiles] (cons <span style="color: #008000;">"SMILES"</span> menuMap))

    (define-key menuMap [cml]
      '(<span style="color: #008000;">"CML"</span> . smiles-cml))
    (define-key menuMap [names]
      '(<span style="color: #008000;">"Names"</span> . smiles-names))))
</pre>
</div>

<pre class="example">
smiles-mode
</pre>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/26/A-molecule-link-for-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Displaying image overlays on image filenames in Emacs</title>
      <link>http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs</link>
      <pubDate>Mon, 21 Mar 2016 11:21:19 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">TYzYY7kKXIdWZeDJIV9P-L4kQe0=</guid>
      <description>Displaying image overlays on image filenames in Emacs</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tooltip approach</a></li>
<li><a href="#sec-2">2. The overlay approach</a></li>
</ul>
</div>
</div>
<p>
It has always bothered me a little that I have to add a file image after code blocks in org-mode to see the results. That extra work&#x2026; I also don't like having to explicitly print the figure in the code, since that is the extra work, just in a different place. Today I look into two approaches to this. First, we consider something like tooltips, and second just putting overlays of image files right on the file name. The plus side of this is no extra work. The downside is they won't export; that will still take the extra work, but you needed that for the caption anyway for now.
</p>

<p>
Here is a video illustrating the code in this post: <a href="https://www.youtube.com/watch?v=VuAnwCERM0U">https://www.youtube.com/watch?v=VuAnwCERM0U</a> 
</p>

<p>
Here is a test.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([0, 1, 2, 4, 16])
plt.savefig(<span style="color: #008000;">"test-fig.png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-21-Displaying-image-overlays-on-image-filenames-in-Emacs/test-fig.png"> 
</p>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tooltip approach</h2>
<div class="outline-text-2" id="text-1">
<p>
Building on our <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs/">previous approach</a> of graphical tooltips, we try that here to show the images. I have solved the issue of why the images didn't show in the tooltips before; it was related to how Emacs was built. I used to build it with "cocoa" support so it integrates well in OSX. Here, I have build it with gtk3, and the tooltips work with images.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">image-tooltip-re</span> (concat  <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?3:</span><span style="color: #008000;">'</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?1:</span><span style="color: #008000;">.*\\."</span>
                                  (regexp-opt '(<span style="color: #008000;">"png"</span> <span style="color: #008000;">"PNG"</span> <span style="color: #008000;">"JPG"</span> <span style="color: #008000;">"jpeg"</span>
                                                <span style="color: #008000;">"jpg"</span> <span style="color: #008000;">"JPEG"</span> <span style="color: #008000;">"eps"</span> <span style="color: #008000;">"EPS"</span>))
                                  <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?:</span><span style="color: #008000;">\\3</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
  <span style="color: #036A07;">"Regexp to match image filenames in quotes"</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">image-tooltip</span> (window object position)
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char position)
    (<span style="color: #0000FF;">let</span> (beg end imgfile img s)
      (<span style="color: #0000FF;">while</span> (not (looking-at image-tooltip-re))
        (forward-char -1))
      (<span style="color: #0000FF;">setq</span> imgfile (match-string-no-properties 1))
      (<span style="color: #0000FF;">when</span> (file-exists-p imgfile)
        (<span style="color: #0000FF;">setq</span> img (create-image (expand-file-name imgfile)
                                'imagemagick nil <span style="color: #006FE0;">:width</span> 200))
        (propertize <span style="color: #008000;">"Look in the minibuffer"</span>
                    'display img)))))

(font-lock-add-keywords
 nil
 `((,image-tooltip-re
    0 '(face font-lock-keyword-face
             help-echo image-tooltip))))

(font-lock-fontify-buffer)
</pre>
</div>

<p>
Now these both have tooltips on them: "test-fig.png"  and  'test-fig.png'.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> The overlay approach</h2>
<div class="outline-text-2" id="text-2">
<p>
We might alternatively prefer to put overlays in the buffer. Here we make that happen.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">next-image-overlay</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  (<span style="color: #0000FF;">when</span> (re-search-forward image-tooltip-re limit t)
    (<span style="color: #0000FF;">setq</span> beg (match-beginning 0)
          end (match-end 0)
          imgfile (match-string 1))
    (<span style="color: #0000FF;">when</span> (file-exists-p imgfile)
      (<span style="color: #0000FF;">setq</span> img (create-image (expand-file-name imgfile)
                              'imagemagick nil <span style="color: #006FE0;">:width</span> 300))
      (<span style="color: #0000FF;">setq</span> ov (make-overlay beg end))
      (overlay-put ov 'display img)
      (overlay-put ov 'face 'default)
      (overlay-put ov 'org-image-overlay t)
      (overlay-put ov 'modification-hooks
                   (list 'org-display-inline-remove-overlay)))))

(font-lock-add-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t)))
 t)
</pre>
</div>


<p>
Here is the example we looked at before.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([-0, 1, 2, 4, 16])
plt.savefig(<span style="color: #008000;">"test-fig.png"</span>)
</pre>
</div>

<p>
You may want to remove those overlays. Here is one way. Note they come back if you don't disable the font-lock keywords though.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(ov-clear 'org-image-overlay)
</pre>
</div>
<p>
I know you want to do that so here is:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(font-lock-remove-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t))))

(ov-clear 'org-image-overlay)
</pre>
</div>


<p>
Note you still have to clear the overlays. Font lock doesn't seem to do that for you I think.
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Org teleport headlines</title>
      <link>http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines</link>
      <pubDate>Fri, 18 Mar 2016 08:47:14 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">oRuOS7EpzEm__3VkF6kCRgjKZ8w=</guid>
      <description>Org teleport headlines</description>
      <content:encoded><![CDATA[


<p>
I often want to rearrange org headlines.  There are super convenient shortcuts for some things, like Alt-up/down to move up and down, and Alt-left/right to change levels, and shift variants of that when there are nested headlines. There is also refile for some use cases. The case these don't handle for me is when I have a headline at the bottom and I want to move it a distance. To cut down on key strokes, I usually kill the headline, jump to where I want, and paste it.
</p>

<p>
In lispy, there is a teleport command for this! I am going to adapt this here for reorganizing org-headlines. This version allows you to move headlines around on the visible area. You need another strategy for the candidates to jump to if you want to move a headline off the screen. Note though that ivy is really smart, you can have one file in a split view and it will jump to any headline in any window! I use ivy for the navigation here, but you could also use helm to select headlines, for example. This function puts your headline after the selected headline, unless you use a prefix arg, and then it goes before.
</p>

<p>
Check out the video to see this in action: <a href="https://www.youtube.com/watch?v=Vv-2888rpyc">https://www.youtube.com/watch?v=Vv-2888rpyc</a> 
</p>

<p>
Note: this code is a little more advanced than what is in the video; I added a numeric prefix to change the headline level.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-teleport</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Teleport the current heading to after a headline selected with avy.</span>
<span style="color: #036A07;">With a prefix ARG move the headline to before the selected</span>
<span style="color: #036A07;">headline. With a numeric prefix, set the headline level. If ARG</span>
<span style="color: #036A07;">is positive, move after, and if negative, move before."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Kill current headline</span>
  (org-mark-subtree)
  (kill-region (region-beginning) (region-end))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Jump to a visible headline</span>
  (<span style="color: #0000FF;">avy-with</span> avy-goto-line (avy--generic-jump <span style="color: #008000;">"^\\*+"</span> nil avy-style))
  (<span style="color: #0000FF;">cond</span>
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Move before  and change headline level</span>
   ((<span style="color: #0000FF;">and</span> (numberp arg) (&gt; 0 arg))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">arg is what we want, second is what we have</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if n is positive, we need to demote (increase level)</span>
    (<span style="color: #0000FF;">let</span> ((n (- (abs arg) (car (org-heading-components)))))
      (<span style="color: #0000FF;">cl-loop</span> for i from 1 to (abs n)
               do
               (<span style="color: #0000FF;">if</span> (&gt; 0 n)
                   (org-promote-subtree)
                 (org-demote-subtree)))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Move after and change level</span>
   ((<span style="color: #0000FF;">and</span> (numberp arg) (&lt; 0 arg))
    (org-mark-subtree)
    (goto-char (region-end))
    (<span style="color: #0000FF;">when</span> (eobp) (insert <span style="color: #008000;">"\n"</span>))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">n is what we want and second is what we have</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if n is positive, we need to demote</span>
    (<span style="color: #0000FF;">let</span> ((n (- (abs arg) (car (org-heading-components)))))
      (<span style="color: #0000FF;">cl-loop</span> for i from 1 to (abs n)
               do
               (<span style="color: #0000FF;">if</span> (&gt; 0 n) (org-promote-subtree)
                 (org-demote-subtree)))))

   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">move to before selection</span>
   ((equal arg '(4))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank)))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">move to after selection</span>
   (t
    (org-mark-subtree)
    (goto-char (region-end))
    (<span style="color: #0000FF;">when</span> (eobp) (insert <span style="color: #008000;">"\n"</span>))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))))
  (outline-hide-leaves))
</pre>
</div>

<pre class="example">
org-teleport
</pre>

<p>
Now we add some new speed commands to help us out. I think we should be able to mark subtrees ("@" is bound to this, but I like "m" better) and kill them with a key stroke, in addition to teleporting them. Since we figured out the nice way to jump to a headline up there, we bind that to "q" which isn't used so far, and maps to a similar concept in lispy. The lowercase "t" is already bound to changing the TODO state, so we use capital "T" for the speed key to teleport. Note it is possible to "compose" the same effect by typing "k" to kill a headline, then "q" to jump somewhere else (or navigate where you want,  and then "C-y" to paste it at the new location. Or, "T".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"m"</span> 'org-mark-subtree))
(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"k"</span> (<span style="color: #0000FF;">lambda</span> ()
                                                  (org-mark-subtree)
                                                  (kill-region
                                                   (region-beginning)
                                                   (region-end)))))
(add-to-list 'org-speed-commands-user
             (cons <span style="color: #008000;">"q"</span> (<span style="color: #0000FF;">lambda</span> ()
                         (<span style="color: #0000FF;">avy-with</span> avy-goto-line
                           (avy--generic-jump <span style="color: #008000;">"^\\*+"</span> nil avy-style)))))

(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"T"</span> 'org-teleport))
<span style="color: #008000;">"done"</span>
</pre>
</div>

<pre class="example">
done
</pre>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/18/Org-teleport-headlines.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Getting graphical feedback as tooltips in Emacs</title>
      <link>http://jkitchin.github.io/blog/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs</link>
      <pubDate>Wed, 16 Mar 2016 17:14:21 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">rqzCQW6l0wZF8QL6uw-AUQxp5rY=</guid>
      <description>Getting graphical feedback as tooltips in Emacs</description>
      <content:encoded><![CDATA[


<p>
In a continued exploration of Emacs as a user interface today we consider how to look at alternative representations of text. The long term idea is you might have a link to a datafile, say a Raman spectrum. You could click on the link to open it, perhaps even in analysis software. But, it might be nice to have a thumbnail type image that shows the data in graphical form. That might be sufficient for some purposes to identify which file to open.
</p>

<p>
You need to see the video to see the tooltips actually working in Emacs: <a href="https://www.youtube.com/watch?v=uX_hAPb9NOc">https://www.youtube.com/watch?v=uX_hAPb9NOc</a> 
</p>

<p>
To illustrate the idea here we will have E1macs display an image when you mouse over some words that represent fruit, specifically grapes, kiwi and strawberry. We have in this directory images of those fruit:
</p>

<div class="org-src-container">

<pre class="src src-sh">ls
</pre>
</div>

<pre class="example">
grapes.png
image-tooltips.org
kiwi.png
strawberry.png
</pre>

<p>
We will use font-lock to add a tooltip to those words that displays the image in the minibuffer. I thought the image would show in the tooltip here, but for some reason it doesn't. Maybe that is ok, since it doesn't clutter the text with big images. Font lock also makes the words stand out a bit so you know there is something there. Here is our tooltip code, and the font-lock-add-keywords that activates it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">image-tooltip</span> (window object position)
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char position)
    (<span style="color: #0000FF;">let*</span> ((img-file (format <span style="color: #008000;">"%s.png"</span> (thing-at-point 'word)))
           (s (propertize <span style="color: #008000;">"Look in the minbuffer"</span>
                          'display (create-image (expand-file-name img-file)))))
      (message <span style="color: #008000;">"%s"</span> s))))

(font-lock-add-keywords
 nil
 '((<span style="color: #008000;">"\\&lt;kiwi\\&gt;</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\\&lt;grapes\\&gt;</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">strawberry"</span> 0 '(face font-lock-keyword-face
                                                      help-echo image-tooltip))))
</pre>
</div>

<p>
Some examples of fruit are the kiwi, the strawberry and grapes. That is a little example to illustrate the concept. Now, imagine something more sophisticated, e.g. a link to a molecular simulation that generates a thumbnail of the atomic geometry, and a summary of the energy. Or a Raman spectrum that shows a thumbnail of the spectrum.
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Modern use of helm - sortable candidates</title>
      <link>http://jkitchin.github.io/blog/2016/01/24/Modern-use-of-helm-sortable-candidates</link>
      <pubDate>Sun, 24 Jan 2016 14:48:13 EST</pubDate>
      <category><![CDATA[helm]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">ZnitoN0_UnTciejiQ08oPeIrO0w=</guid>
      <description>Modern use of helm - sortable candidates</description>
      <content:encoded><![CDATA[


<p>
<a href="https://github.com/emacs-helm/helm">helm</a> continues to be my goto completion engine. I was perusing the source for helm-top, and noticed some cool new features, like sorting the candidates in the completion buffer! I also noticed that helm sources are preferably created with some new factory functions (as opposed to the a-lists I used to use). Here I explore some of these and illustrate how to make a sortable helm source.
</p>

<p>
First, we need a function to give us some candidates we will select from. I will use a function that returns a list of cons cells from a variable containing some data where each element in the data is a plist containing a number and key. I list strings as the number and key  so we can see what sorting does later. The data is just a list of plists containing a "number" and a key that is a string. We will create a helm function with these as candidates, and an ability to sort them in ascending/descending order on either the number or key.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> h-data '((<span style="color: #006FE0;">:num</span> 1 <span style="color: #006FE0;">:key</span> <span style="color: #008000;">"apple"</span>)
               (<span style="color: #006FE0;">:num</span> 9 <span style="color: #006FE0;">:key</span> <span style="color: #008000;">"berry"</span>)
               (<span style="color: #006FE0;">:num</span> 2 <span style="color: #006FE0;">:key</span> <span style="color: #008000;">"cactus"</span>)
               (<span style="color: #006FE0;">:num</span> 5 <span style="color: #006FE0;">:key</span> <span style="color: #008000;">"dog"</span>)
               (<span style="color: #006FE0;">:num</span> 4 <span style="color: #006FE0;">:key</span> <span style="color: #008000;">"frog"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">h-candidates</span> ()
  <span style="color: #036A07;">"Returns candidates for the helm source."</span>
  (<span style="color: #0000FF;">loop</span> for cand in h-data
        collect (cons (format <span style="color: #008000;">"%s %s"</span>
                              (plist-get cand <span style="color: #006FE0;">:num</span>)
                              (plist-get cand <span style="color: #006FE0;">:key</span>))
                      cand)))

(print (h-candidates))
</pre>
</div>

<pre class="example">
(("1 apple" :num 1 :key "apple") ("9 berry" :num 9 :key "berry") ("2 cactus" :num 2 :key "cactus") ("5 dog" :num 5 :key "dog") ("4 frog" :num 4 :key "frog"))
</pre>


<p>
Now, provide sorting, we need to create a candidate transformer function. This function will take the current candidates and source, and return a new list of candidates, possibly sorted. We use a variable to store how to sort the candidates. We also need a way to trigger the sorting. We will bind M-&lt;down&gt; to a function that will set the sort function, and refresh helm. Here is a keymap definition we will use later.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">h-map</span>
  (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
    (set-keymap-parent map helm-map)
    (define-key map (kbd <span style="color: #008000;">"M-&lt;down&gt;"</span>)   'h-sort)
    map)
  <span style="color: #036A07;">"keymap for a helm source."</span>)
</pre>
</div>

<pre class="example">
h-map
</pre>

<p>
Now, we define the sort variable, a function that sets the variable, refreshes the candidates, and finally resets the sort variable. A key point here is the sort functions must take two arguments, which will be two candidates, and each candidate is of the form (string . data). We want to sort on one of the elements in the data plists for this example.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">h-sort-fn</span> nil)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">h-sort</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((action (read-char <span style="color: #008000;">"#decreasing (d) | #increasing (i) | a-z (a) | z-a (z: "</span>)))
    (<span style="color: #0000FF;">cond</span>
     ((eq action ?d)
      (<span style="color: #0000FF;">setq</span> h-sort-fn (<span style="color: #0000FF;">lambda</span> (c1 c2) (&gt; (plist-get (cdr c1) <span style="color: #006FE0;">:num</span>) (plist-get (cdr c2) <span style="color: #006FE0;">:num</span>)))))
     ((eq action ?i)
      (<span style="color: #0000FF;">setq</span> h-sort-fn (<span style="color: #0000FF;">lambda</span> (c1 c2) (&lt; (plist-get (cdr c1) <span style="color: #006FE0;">:num</span>) (plist-get (cdr c2) <span style="color: #006FE0;">:num</span>)))))
     ((eq action ?a)
      (<span style="color: #0000FF;">setq</span> h-sort-fn (<span style="color: #0000FF;">lambda</span> (c1 c2) (string&lt; (plist-get (cdr c1) <span style="color: #006FE0;">:key</span>) (plist-get (cdr c2) <span style="color: #006FE0;">:key</span>)))))
     ((eq action ?z)
      (<span style="color: #0000FF;">setq</span> h-sort-fn (<span style="color: #0000FF;">lambda</span> (c1 c2) (string&gt; (plist-get (cdr c1) <span style="color: #006FE0;">:key</span>) (plist-get (cdr c2) <span style="color: #006FE0;">:key</span>)))))
     (t (<span style="color: #0000FF;">setq</span> h-sort-fn nil)))
     (helm-refresh)
     (<span style="color: #0000FF;">setq</span> h-sort-fn nil)))
</pre>
</div>

<pre class="example">
h-sort
</pre>

<p>
Next, we define a candidate transformer. This function takes the list of candidates and the source. Here, if we have defined a sort function, we use it to sort the candidates, and if not, return the candidates. A subtle point here is the use of -sort from dash.el, which does not modify the original list at all. The build in function sort does modify the candidate list somehow, and it does not work the way you want it to here. This function gets run as the helm pattern changes.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">h-candidate-transformer</span> (candidates source)
  (<span style="color: #0000FF;">if</span> h-sort-fn
    (<span style="color: #0000FF;">progn</span> (message <span style="color: #008000;">"Sorting with %s"</span> h-sort-fn)
    (<span style="color: #0000FF;">-sort</span> h-sort-fn candidates))
  candidates))
</pre>
</div>

<pre class="example">
h-candidate-transformer
</pre>

<p>
Now, just for fun, we show that dynamically defined actions are possible. Here, we generate an action list that is different for even and odd numbers. These actions are pretty trivial, but give you an idea of what might be possible; custom, context specific actions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Make dynamic actions based on the candidate selected</span>
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">h-action-transformer</span> (actions candidate)
  <span style="color: #036A07;">"Candidate is the result selected."</span>
  (<span style="color: #0000FF;">if</span> (evenp (plist-get candidate <span style="color: #006FE0;">:num</span>))
      '((<span style="color: #008000;">"Even"</span> . identity))
    '((<span style="color: #008000;">"Odd"</span> . identity))))
</pre>
</div>

<pre class="example">
h-action-transformer
</pre>

<p>
Finally, we are ready to create a helm source. We use the new factory function for creating the source with our keymap, candidates and transformer functions.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> h-source
      (<span style="color: #0000FF;">helm-build-sync-source</span> <span style="color: #008000;">"number-selector"</span>
        <span style="color: #006FE0;">:keymap</span> h-map
        <span style="color: #006FE0;">:candidates</span> #'h-candidates
        <span style="color: #006FE0;">:filtered-candidate-transformer</span> #'h-candidate-transformer
        <span style="color: #006FE0;">:action-transformer</span> #'h-action-transformer))
</pre>
</div>

<p>
Now, you can run the helm source like this.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(helm <span style="color: #006FE0;">:sources</span> 'h-source)
</pre>
</div>

<p>
You can sort the numbers in descending order by typing M-&lt;down&gt; and pressing d. To get ascending order, press i instead. To sort on the keys, type a sort from a to z, and press z to sort on z to a. If you press tab on a selection, you will see that the actions you get depend on whether the selection is an even or odd number! So, you can get some context specific actions depending on your selection. Pretty awesome.
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/01/24/Modern-use-of-helm---sortable-candidates.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Side by side figures in org-mode for different export outputs</title>
      <link>http://jkitchin.github.io/blog/2016/01/17/Side-by-side-figures-in-org-mode-for-different-export-outputs</link>
      <pubDate>Sun, 17 Jan 2016 21:03:13 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">3kvZhMTSCOktXvTt7DVxqRXzvr8=</guid>
      <description>Side by side figures in org-mode for different export outputs</description>
      <content:encoded><![CDATA[


<p>
Occasionally, someone wants side by side figures with subcaptions that have individually referenceable labels. This is not too hard in LaTeX, and there is a solution here:  <a href="http://www.johndcook.com/blog/2009/01/14/how-to-display-side-by-side-figurs-in-latex/">http://www.johndcook.com/blog/2009/01/14/how-to-display-side-by-side-figurs-in-latex/</a> .
</p>

<p>
We can create side by side figures in raw LaTeX like this (note however, this will not show up in html export):
</p>

<p>
And in our text we can refer to the overall Figure <a href="#fig12">fig12</a>, or the subfigures Figure <a href="#fig:a">fig:a</a> or Figure <a href="#fig:b">fig:b</a>. This works fine if your end goal is LaTeX export. It does not work fine if you want to consider HTML or some other output.
</p>

<p>
So, here we consider how we could remove the LaTeX dependency by representing the figures in a sexp data structure, for example something like this. I change the labels and captions a bit so they are actually distinguishable.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(figure ()
 (subfigure '(<span style="color: #008000;">"Left graph from sexp."</span> (label <span style="color: #008000;">"fig:sa"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/cos-plot.png"</span>))
 (enskip)
 (subfigure '(<span style="color: #008000;">"Right graph from sexp"</span> (label <span style="color: #008000;">"fig:sb"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
 (caption
  <span style="color: #008000;">"Text pertaining to both graphs from a sexp, "</span> (ref <span style="color: #008000;">"fig:sa"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:sb"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"figs12"</span>)))
</pre>
</div>

<pre class="example">
"emacs-lisp"
</pre>

<p>
This doesn't look much worse than the LaTeX code itself. It might not seem useful right away, but imagine if this was really code that could evaluate to the format we want. Remember the <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry/">sexp bibtex entry</a> that could evaluate to bibtex, json or xml? Let's look at this here. What we consider is kind of like <a href="http://oremacs.com/2015/01/23/eltex/">http://oremacs.com/2015/01/23/eltex/</a> , but we could include other kinds of exports if we wanted.
</p>

<p>
Here is our special block in org-mode. It should render roughly as side by side images in LaTeX and HTML.
</p>

<div class="sexp">
<p>
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:sa"))
            (includegraphics '((width . "3in"))
                             "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:sb"))
            (includegraphics '((width . "3in"))
                             "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:sa")
  " and " (ref "fig:sb") "." (label "figs12")))
</p>

</div>

<p>
Now, we need a function to format the sexp block for export. It is easy, we just eval the contents of the block. We do assume here there is just one sexp to evaluate. This function will handle all special blocks, but we only want to do something different for the sexp blocks.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">sb-format</span> (sb contents info)
  (<span style="color: #0000FF;">cond</span>
     ((string= <span style="color: #008000;">"SEXP"</span> (org-element-property <span style="color: #006FE0;">:type</span> sb))
      (eval (read (buffer-substring
                   (org-element-property <span style="color: #006FE0;">:contents-begin</span> sb)
                   (org-element-property <span style="color: #006FE0;">:contents-end</span> sb)))))
     (t
      contents)))))
</pre>
</div>

<pre class="example">
sb-format
</pre>

<p>
All that is left is to define the functions. We do that next.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Latex export</h2>
<div class="outline-text-2" id="text-1">
<p>
We do LaTeX export first because we know what it should look like. We need to define a function for each piece of the data structure that will evaluate to a string. Here are three easy ones.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">label</span> (arg)
  (format <span style="color: #008000;">"\\label{%s}"</span> arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ref</span> (arg)
  (format <span style="color: #008000;">"\\ref{%s}"</span> arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">caption</span> (<span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"\\caption{%s}"</span>
         (mapconcat 'eval body <span style="color: #008000;">""</span>)))

(caption
  <span style="color: #008000;">"Text pertaining to both graphs, "</span> (ref <span style="color: #008000;">"fig:a"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:b"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"fig12"</span>))
</pre>
</div>
<pre class="example">
\caption{Text pertaining to both graphs, \ref{fig:a} and \ref{fig:b}.\label{fig12}}
</pre>

<p>
Now, for includegraphics, we allow options and a path. The options we assume are in an a-list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">includegraphics</span> (options path)
  (format <span style="color: #008000;">"\\includegraphics%s{%s}"</span>
          (<span style="color: #0000FF;">if</span> options
              (format <span style="color: #008000;">"[%s]"</span>
                      (mapconcat (<span style="color: #0000FF;">lambda</span> (ccell)
                                   (format <span style="color: #008000;">"%s=%s"</span>
                                           (car ccell)
                                           (cdr ccell)))
                                 options
                                 <span style="color: #008000;">","</span>))
            <span style="color: #008000;">""</span>)
          path))

(includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                 <span style="color: #008000;">"images/eos-uncertainty.png"</span>)
</pre>
</div>
<pre class="example">
\includegraphics[width=3in]{images/eos-uncertainty.png}
</pre>

<p>
Similarly for subfigure, we have options, and then a body of expressions. The options here are just expressions that should evaluate to strings. This is not consistent with the way we do options in includegraphics. This is just proof of concept work, so I don't know if this inconsistency is really problematic yet, or insufficient for all options.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">subfigure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"\\subfigure%s{%s}"</span>
          (<span style="color: #0000FF;">if</span> options
              (format <span style="color: #008000;">"[%s]"</span>
                      (mapconcat 'eval options <span style="color: #008000;">""</span>))
            <span style="color: #008000;">""</span>)
          (mapconcat 'eval body <span style="color: #008000;">""</span>)))

(subfigure '(<span style="color: #008000;">"Right graph"</span> (label <span style="color: #008000;">"fig:b"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
</pre>
</div>
<pre class="example">
\subfigure[Right graph\label{fig:b}]{\includegraphics[width=3in]{images/eos-uncertainty.png}}
</pre>

<p>
Now, we put the whole figure together.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">figure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"\\begin{figure}</span>
<span style="color: #008000;">%s</span>
<span style="color: #008000;">\\end{figure}"</span>
(mapconcat 'eval body <span style="color: #008000;">"\n"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">enskip</span> () <span style="color: #036A07;">"\\enskip"</span>)
</pre>
</div>
<pre class="example">
enskip
</pre>

<p>
Now, we would have a block like this, and we can evaluate it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(figure ()
 (subfigure '(<span style="color: #008000;">"Left graph from sexp."</span> (label <span style="color: #008000;">"fig:ssa"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/cos-plot.png"</span>))
 (enskip)
 (subfigure '(<span style="color: #008000;">"Right graph from sexp"</span> (label <span style="color: #008000;">"fig:ssb"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
 (caption
  <span style="color: #008000;">"Text pertaining to both graphs from a sexp, "</span> (ref <span style="color: #008000;">"fig:ssa"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:ssb"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"figss12"</span>)))
</pre>
</div>

<p>
Not the most beautiful LaTeX ever, but it works. Now, to get this to work, we need to handle our special sexp blocks differently. We do that with a new derived backend.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-export-define-derived-backend 'my-latex 'latex
  <span style="color: #006FE0;">:translate-alist</span> '((special-block . sb-format)))

(org-latex-compile (org-export-to-file 'my-latex <span style="color: #008000;">"custom-sb-export.tex"</span>))
(org-open-file <span style="color: #008000;">"custom-sb-export.pdf"</span>)
</pre>
</div>

<p>
It works, and here is the pdf: <a href="/media/2016-01-17-Side-by-side-figures-in-org-mode-for-different-export-outputs/custom-sb-export.pdf">custom-sb-export.pdf</a> .
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> HTML functions</h2>
<div class="outline-text-2" id="text-2">
<p>
We can use the same sexp block to get figures side-by-side in HTML. We need to redefine each element and its HTML output.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">label</span> (arg)
  (format <span style="color: #008000;">"&lt;a name=\"%s\"&gt;&lt;/a&gt;"</span> arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ref</span> (arg)
  (format <span style="color: #008000;">"&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;"</span> arg arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">caption</span> (<span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"&lt;caption&gt;%s&lt;/caption&gt;"</span>
         (mapconcat 'eval body <span style="color: #008000;">""</span>)))

(caption
  <span style="color: #008000;">"Text pertaining to both graphs, "</span> (ref <span style="color: #008000;">"fig:a"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:b"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"fig12"</span>))
</pre>
</div>

<pre class="example">
&lt;caption&gt;Text pertaining to both graphs, &lt;a href="#fig:a"&gt;fig:a&lt;/a&gt; and &lt;a href="#fig:b"&gt;fig:b&lt;/a&gt;.&lt;a name="fig12"&gt;&lt;/a&gt;&lt;/caption&gt;
</pre>


<p>
We will ignore options for the includegraphics html output. We would need to specify some way to do unit conversions for html. Here we fix the width.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">includegraphics</span> (options path)
  (format <span style="color: #008000;">"&lt;img src=\"/media/%s\" width=\"300\"&gt;"</span>
          path))

(includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                 <span style="color: #008000;">"images/eos-uncertainty.png"</span>)
</pre>
</div>

<pre class="example">
&lt;img src="/media/images/eos-uncertainty.png" width="300"&gt;
</pre>

<p>
We wrap a subfigure in a table cell.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">subfigure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"&lt;td&gt;%s%s&lt;/td&gt;"</span>
          (mapconcat 'eval body <span style="color: #008000;">""</span>)
          (<span style="color: #0000FF;">when</span> options
            (concat <span style="color: #008000;">"&lt;br&gt;"</span>
                    (mapconcat 'eval options <span style="color: #008000;">""</span>)))))

(subfigure '(<span style="color: #008000;">"Right graph"</span> (label <span style="color: #008000;">"fig:b"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
</pre>
</div>

<pre class="example">
&lt;td&gt;&lt;img src="/media/images/eos-uncertainty.png" width="300"&gt;&lt;br&gt;Right graph&lt;a name="fig:b"&gt;&lt;/a&gt;&lt;/td&gt;
</pre>

<p>
We assume we can put the images in a single row.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">figure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"&lt;span class=\"image\"&gt;&lt;table&gt;</span>
<span style="color: #008000;">&lt;tr&gt;%s&lt;/tr&gt;</span>
<span style="color: #008000;">&lt;/table&gt;&lt;/span&gt;"</span>
(mapconcat 'eval body <span style="color: #008000;">"\n"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">enskip</span> () <span style="color: #036A07;">""</span>)
</pre>
</div>

<pre class="example">
enskip
</pre>

<p>
Now, here is our specification.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(figure ()
 (subfigure '(<span style="color: #008000;">"Left graph"</span> (label <span style="color: #008000;">"fig:ha"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/cos-plot.png"</span>))
 (enskip)
 (subfigure '(<span style="color: #008000;">"Right graph"</span> (label <span style="color: #008000;">"fig:hb"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
 (caption
  <span style="color: #008000;">"Text pertaining to both graphs, "</span> (ref <span style="color: #008000;">"fig:ha"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:hb"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"figh12"</span>)))
</pre>
</div>

<span class="image"><table>
<tr><td><img src="/media/images/cos-plot.png" width="300"><br>Left graph<a name="fig:ha"></a></td>

<td><img src="/media/images/eos-uncertainty.png" width="300"><br>Right graph<a name="fig:hb"></a></td>
<caption>Text pertaining to both graphs, <a href="#fig:ha">fig:ha</a> and <a href="#fig:hb">fig:hb</a>.<a name="figh12"></a></caption></tr>
</table></span>


<p>
And our derived backend for HTML.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-export-define-derived-backend 'my-html 'html
  <span style="color: #006FE0;">:translate-alist</span> '((special-block . sb-format)))

(browse-url (org-export-to-file 'my-html <span style="color: #008000;">"custom-sb-export.html"</span>))
</pre>
</div>

<pre class="example">
#&lt;process open custom-sb-export.html&gt;
</pre>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-3">
<p>
I think I like the idea. Obviously there are differences between what is possible between LaTeX and HTML, notably the attributes that may or may not be supported between them, including the units of the width, labels, and references. I still have not figured out an elegant way to switch between LaTeX and HTML exports since there is basically one set of functions that need different outputs under different conditions; maybe each function could have backend specific output.
</p>

<p>
For small things, you could achieve this with inline emacs-lisp src blocks, but I think those are limited to one liners. Alternatively, you could probably get by with output from an actual src block, but you would have to make sure it executed during export (I turn this off by default), and that it have backend specific output.
</p>

<p>
Finally, the only other alternative is a preprocessor that finds the sexps that define the data and replaces them with output.
</p>

<p>
The sexp block I described above is basically like a domain specific language (DSL). Something like this is described in "Practical Common Lisp" (<a href="http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html">http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html</a> ). My version is not as sophisticated as the one there.  Notably, mine uses eval which has some limitations, such as no communication between sexp blocks.</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/01/17/Side-by-side-figures-in-org-mode-for-different-export-outputs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Colored text in org-mode with export to HTML</title>
      <link>http://jkitchin.github.io/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML</link>
      <pubDate>Sat, 16 Jan 2016 19:34:57 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">ilI8YI8Rc6NNl7TvxkV7sJifUDk=</guid>
      <description>Colored text in org-mode with export to HTML</description>
      <content:encoded><![CDATA[



<p>
Just for fun, I want to put colored text in org-mode using links. This is a simple hack that uses the description in an org-mode link as the text to color, and the path in link to specify the color. I use an overlay to do this because I could not figure out how to change the face foreground color. We provide a simple export to HTML. LaTeX is also doable, but a trickier export as you need to define the colors in the LaTeX header also.
</p>

<p>
Here is the code to make the color link, and put overlays on them with font-lock.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">ov</span>)

(org-add-link-type
 <span style="color: #008000;">"color"</span>
 (<span style="color: #0000FF;">lambda</span> (path)
   <span style="color: #036A07;">"No follow action."</span>)
 (<span style="color: #0000FF;">lambda</span> (color description backend)
   (<span style="color: #0000FF;">cond</span>
    ((eq backend 'html)
     (<span style="color: #0000FF;">let</span> ((rgb (assoc color color-name-rgb-alist))
           r g b)
       (<span style="color: #0000FF;">if</span> rgb
           (<span style="color: #0000FF;">progn</span>
             (<span style="color: #0000FF;">setq</span> r (* 255 (/ (nth 1 rgb) 65535.0))
                   g (* 255 (/ (nth 2 rgb) 65535.0))
                   b (* 255 (/ (nth 3 rgb) 65535.0)))
             (format <span style="color: #008000;">"&lt;span style=\"color: rgb(%s,%s,%s)\"&gt;%s&lt;/span&gt;"</span>
                     (truncate r) (truncate g) (truncate b)
                     (<span style="color: #0000FF;">or</span> description color)))
         (format <span style="color: #008000;">"No Color RGB for %s"</span> color)))))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">next-color-link</span> (limit)
  (<span style="color: #0000FF;">when</span> (re-search-forward
         <span style="color: #008000;">"color:[a-zA-Z]\\{2,\\}"</span> limit t)
    (forward-char -2)
    (<span style="color: #0000FF;">let*</span> ((next-link (org-element-context))
           color beg end post-blanks)
      (<span style="color: #0000FF;">if</span> next-link
          (<span style="color: #0000FF;">progn</span>
            (<span style="color: #0000FF;">setq</span> color (org-element-property <span style="color: #006FE0;">:path</span> next-link)
                  beg (org-element-property <span style="color: #006FE0;">:begin</span> next-link)
                  end (org-element-property <span style="color: #006FE0;">:end</span> next-link)
                  post-blanks (org-element-property <span style="color: #006FE0;">:post-blank</span> next-link))
            (set-match-data
             (list beg
                   (- end post-blanks)))
            (ov-clear beg end 'color)
            (ov beg
                (- end post-blanks)
             'color t
             'face
             `((<span style="color: #006FE0;">:foreground</span> ,color)))
            (goto-char end))
        (goto-char limit)
        nil))))

(font-lock-add-keywords
    nil
    '((next-color-link (0  'org-link t)))
    t)
</pre>
</div>

<p>
I do not love the use of overlays on this, but it is the only way I could figure out how to do this without creating a face for every single color. Setting the foreground color property on the links did not work.
</p>

<p>
Now, we use a loop to generate a lot of colored links to check it out. It basically works. I see some overlays pop up in folded headlines sometimes, but I don't mind that too much. Emacs slows down when the screen is full of these links, but it seems fine under normal numbers of links. Since colors are likely to only be for accent, I do not think performance will be a problem. This might be a nice way to add accents to draw attention to some text in org-mode. If you like this, you might can get the code here: <a href="https://github.com/jkitchin/jmax/blob/master/org-colored-text.el">https://github.com/jkitchin/jmax/blob/master/org-colored-text.el</a> 
</p>

<p>
Here is what the text looks like in my buffer.
</p>


<div class="figure">
<p><img src="/media/2016-01-16-Colored-text-in-org-mode-with-export-to-HTML/colored-text.png"> 
</p>
</div>


<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">loop</span> for color in color-name-rgb-alist
      do
      (princ (format <span style="color: #008000;">"[[color:%s][Text colored in %s]]\n"</span> (car color) (car color))))
</pre>
</div>

<p>
<span style="color: rgb(255,250,250)">Text colored in snow</span>
<span style="color: rgb(248,248,255)">Text colored in ghostwhite</span>
<span style="color: rgb(245,245,245)">Text colored in whitesmoke</span>
<span style="color: rgb(220,220,220)">Text colored in gainsboro</span>
<span style="color: rgb(255,250,240)">Text colored in floralwhite</span>
<span style="color: rgb(253,245,230)">Text colored in oldlace</span>
<span style="color: rgb(250,240,230)">Text colored in linen</span>
<span style="color: rgb(250,235,215)">Text colored in antiquewhite</span>
<span style="color: rgb(255,239,213)">Text colored in papayawhip</span>
<span style="color: rgb(255,235,205)">Text colored in blanchedalmond</span>
<span style="color: rgb(255,228,196)">Text colored in bisque</span>
<span style="color: rgb(255,218,185)">Text colored in peachpuff</span>
<span style="color: rgb(255,222,173)">Text colored in navajowhite</span>
<span style="color: rgb(255,228,181)">Text colored in moccasin</span>
<span style="color: rgb(255,248,220)">Text colored in cornsilk</span>
<span style="color: rgb(255,255,240)">Text colored in ivory</span>
<span style="color: rgb(255,250,205)">Text colored in lemonchiffon</span>
<span style="color: rgb(255,245,238)">Text colored in seashell</span>
<span style="color: rgb(240,255,240)">Text colored in honeydew</span>
<span style="color: rgb(245,255,250)">Text colored in mintcream</span>
<span style="color: rgb(240,255,255)">Text colored in azure</span>
<span style="color: rgb(240,248,255)">Text colored in aliceblue</span>
<span style="color: rgb(230,230,250)">Text colored in lavender</span>
<span style="color: rgb(255,240,245)">Text colored in lavenderblush</span>
<span style="color: rgb(255,228,225)">Text colored in mistyrose</span>
<span style="color: rgb(255,255,255)">Text colored in white</span>
<span style="color: rgb(0,0,0)">Text colored in black</span>
<span style="color: rgb(47,79,79)">Text colored in darkslategray</span>
<span style="color: rgb(47,79,79)">Text colored in darkslategrey</span>
<span style="color: rgb(105,105,105)">Text colored in dimgray</span>
<span style="color: rgb(105,105,105)">Text colored in dimgrey</span>
<span style="color: rgb(112,128,144)">Text colored in slategray</span>
<span style="color: rgb(112,128,144)">Text colored in slategrey</span>
<span style="color: rgb(119,136,153)">Text colored in lightslategray</span>
<span style="color: rgb(119,136,153)">Text colored in lightslategrey</span>
<span style="color: rgb(190,190,190)">Text colored in gray</span>
<span style="color: rgb(190,190,190)">Text colored in grey</span>
<span style="color: rgb(211,211,211)">Text colored in lightgrey</span>
<span style="color: rgb(211,211,211)">Text colored in lightgray</span>
<span style="color: rgb(25,25,112)">Text colored in midnightblue</span>
<span style="color: rgb(0,0,128)">Text colored in navy</span>
<span style="color: rgb(0,0,128)">Text colored in navyblue</span>
<span style="color: rgb(100,149,237)">Text colored in cornflowerblue</span>
<span style="color: rgb(72,61,139)">Text colored in darkslateblue</span>
<span style="color: rgb(106,90,205)">Text colored in slateblue</span>
<span style="color: rgb(123,104,238)">Text colored in mediumslateblue</span>
<span style="color: rgb(132,112,255)">Text colored in lightslateblue</span>
<span style="color: rgb(0,0,205)">Text colored in mediumblue</span>
<span style="color: rgb(65,105,225)">Text colored in royalblue</span>
<span style="color: rgb(0,0,255)">Text colored in blue</span>
<span style="color: rgb(30,144,255)">Text colored in dodgerblue</span>
<span style="color: rgb(0,191,255)">Text colored in deepskyblue</span>
<span style="color: rgb(135,206,235)">Text colored in skyblue</span>
<span style="color: rgb(135,206,250)">Text colored in lightskyblue</span>
<span style="color: rgb(70,130,180)">Text colored in steelblue</span>
<span style="color: rgb(176,196,222)">Text colored in lightsteelblue</span>
<span style="color: rgb(173,216,230)">Text colored in lightblue</span>
<span style="color: rgb(176,224,230)">Text colored in powderblue</span>
<span style="color: rgb(175,238,238)">Text colored in paleturquoise</span>
<span style="color: rgb(0,206,209)">Text colored in darkturquoise</span>
<span style="color: rgb(72,209,204)">Text colored in mediumturquoise</span>
<span style="color: rgb(64,224,208)">Text colored in turquoise</span>
<span style="color: rgb(0,255,255)">Text colored in cyan</span>
<span style="color: rgb(224,255,255)">Text colored in lightcyan</span>
<span style="color: rgb(95,158,160)">Text colored in cadetblue</span>
<span style="color: rgb(102,205,170)">Text colored in mediumaquamarine</span>
<span style="color: rgb(127,255,212)">Text colored in aquamarine</span>
<span style="color: rgb(0,100,0)">Text colored in darkgreen</span>
<span style="color: rgb(85,107,47)">Text colored in darkolivegreen</span>
<span style="color: rgb(143,188,143)">Text colored in darkseagreen</span>
<span style="color: rgb(46,139,87)">Text colored in seagreen</span>
<span style="color: rgb(60,179,113)">Text colored in mediumseagreen</span>
<span style="color: rgb(32,178,170)">Text colored in lightseagreen</span>
<span style="color: rgb(152,251,152)">Text colored in palegreen</span>
<span style="color: rgb(0,255,127)">Text colored in springgreen</span>
<span style="color: rgb(124,252,0)">Text colored in lawngreen</span>
<span style="color: rgb(0,255,0)">Text colored in green</span>
<span style="color: rgb(127,255,0)">Text colored in chartreuse</span>
<span style="color: rgb(0,250,154)">Text colored in mediumspringgreen</span>
<span style="color: rgb(173,255,47)">Text colored in greenyellow</span>
<span style="color: rgb(50,205,50)">Text colored in limegreen</span>
<span style="color: rgb(154,205,50)">Text colored in yellowgreen</span>
<span style="color: rgb(34,139,34)">Text colored in forestgreen</span>
<span style="color: rgb(107,142,35)">Text colored in olivedrab</span>
<span style="color: rgb(189,183,107)">Text colored in darkkhaki</span>
<span style="color: rgb(240,230,140)">Text colored in khaki</span>
<span style="color: rgb(238,232,170)">Text colored in palegoldenrod</span>
<span style="color: rgb(250,250,210)">Text colored in lightgoldenrodyellow</span>
<span style="color: rgb(255,255,224)">Text colored in lightyellow</span>
<span style="color: rgb(255,255,0)">Text colored in yellow</span>
<span style="color: rgb(255,215,0)">Text colored in gold</span>
<span style="color: rgb(238,221,130)">Text colored in lightgoldenrod</span>
<span style="color: rgb(218,165,32)">Text colored in goldenrod</span>
<span style="color: rgb(184,134,11)">Text colored in darkgoldenrod</span>
<span style="color: rgb(188,143,143)">Text colored in rosybrown</span>
<span style="color: rgb(205,92,92)">Text colored in indianred</span>
<span style="color: rgb(139,69,19)">Text colored in saddlebrown</span>
<span style="color: rgb(160,82,45)">Text colored in sienna</span>
<span style="color: rgb(205,133,63)">Text colored in peru</span>
<span style="color: rgb(222,184,135)">Text colored in burlywood</span>
<span style="color: rgb(245,245,220)">Text colored in beige</span>
<span style="color: rgb(245,222,179)">Text colored in wheat</span>
<span style="color: rgb(244,164,96)">Text colored in sandybrown</span>
<span style="color: rgb(210,180,140)">Text colored in tan</span>
<span style="color: rgb(210,105,30)">Text colored in chocolate</span>
<span style="color: rgb(178,34,34)">Text colored in firebrick</span>
<span style="color: rgb(165,42,42)">Text colored in brown</span>
<span style="color: rgb(233,150,122)">Text colored in darksalmon</span>
<span style="color: rgb(250,128,114)">Text colored in salmon</span>
<span style="color: rgb(255,160,122)">Text colored in lightsalmon</span>
<span style="color: rgb(255,165,0)">Text colored in orange</span>
<span style="color: rgb(255,140,0)">Text colored in darkorange</span>
<span style="color: rgb(255,127,80)">Text colored in coral</span>
<span style="color: rgb(240,128,128)">Text colored in lightcoral</span>
<span style="color: rgb(255,99,71)">Text colored in tomato</span>
<span style="color: rgb(255,69,0)">Text colored in orangered</span>
<span style="color: rgb(255,0,0)">Text colored in red</span>
<span style="color: rgb(255,105,180)">Text colored in hotpink</span>
<span style="color: rgb(255,20,147)">Text colored in deeppink</span>
<span style="color: rgb(255,192,203)">Text colored in pink</span>
<span style="color: rgb(255,182,193)">Text colored in lightpink</span>
<span style="color: rgb(219,112,147)">Text colored in palevioletred</span>
<span style="color: rgb(176,48,96)">Text colored in maroon</span>
<span style="color: rgb(199,21,133)">Text colored in mediumvioletred</span>
<span style="color: rgb(208,32,144)">Text colored in violetred</span>
<span style="color: rgb(255,0,255)">Text colored in magenta</span>
<span style="color: rgb(238,130,238)">Text colored in violet</span>
<span style="color: rgb(221,160,221)">Text colored in plum</span>
<span style="color: rgb(218,112,214)">Text colored in orchid</span>
<span style="color: rgb(186,85,211)">Text colored in mediumorchid</span>
<span style="color: rgb(153,50,204)">Text colored in darkorchid</span>
<span style="color: rgb(148,0,211)">Text colored in darkviolet</span>
<span style="color: rgb(138,43,226)">Text colored in blueviolet</span>
<span style="color: rgb(160,32,240)">Text colored in purple</span>
<span style="color: rgb(147,112,219)">Text colored in mediumpurple</span>
<span style="color: rgb(216,191,216)">Text colored in thistle</span>
<span style="color: rgb(255,250,250)">Text colored in snow1</span>
<span style="color: rgb(238,233,233)">Text colored in snow2</span>
<span style="color: rgb(205,201,201)">Text colored in snow3</span>
<span style="color: rgb(139,137,137)">Text colored in snow4</span>
<span style="color: rgb(255,245,238)">Text colored in seashell1</span>
<span style="color: rgb(238,229,222)">Text colored in seashell2</span>
<span style="color: rgb(205,197,191)">Text colored in seashell3</span>
<span style="color: rgb(139,134,130)">Text colored in seashell4</span>
<span style="color: rgb(255,239,219)">Text colored in antiquewhite1</span>
<span style="color: rgb(238,223,204)">Text colored in antiquewhite2</span>
<span style="color: rgb(205,192,176)">Text colored in antiquewhite3</span>
<span style="color: rgb(139,131,120)">Text colored in antiquewhite4</span>
<span style="color: rgb(255,228,196)">Text colored in bisque1</span>
<span style="color: rgb(238,213,183)">Text colored in bisque2</span>
<span style="color: rgb(205,183,158)">Text colored in bisque3</span>
<span style="color: rgb(139,125,107)">Text colored in bisque4</span>
<span style="color: rgb(255,218,185)">Text colored in peachpuff1</span>
<span style="color: rgb(238,203,173)">Text colored in peachpuff2</span>
<span style="color: rgb(205,175,149)">Text colored in peachpuff3</span>
<span style="color: rgb(139,119,101)">Text colored in peachpuff4</span>
<span style="color: rgb(255,222,173)">Text colored in navajowhite1</span>
<span style="color: rgb(238,207,161)">Text colored in navajowhite2</span>
<span style="color: rgb(205,179,139)">Text colored in navajowhite3</span>
<span style="color: rgb(139,121,94)">Text colored in navajowhite4</span>
<span style="color: rgb(255,250,205)">Text colored in lemonchiffon1</span>
<span style="color: rgb(238,233,191)">Text colored in lemonchiffon2</span>
<span style="color: rgb(205,201,165)">Text colored in lemonchiffon3</span>
<span style="color: rgb(139,137,112)">Text colored in lemonchiffon4</span>
<span style="color: rgb(255,248,220)">Text colored in cornsilk1</span>
<span style="color: rgb(238,232,205)">Text colored in cornsilk2</span>
<span style="color: rgb(205,200,177)">Text colored in cornsilk3</span>
<span style="color: rgb(139,136,120)">Text colored in cornsilk4</span>
<span style="color: rgb(255,255,240)">Text colored in ivory1</span>
<span style="color: rgb(238,238,224)">Text colored in ivory2</span>
<span style="color: rgb(205,205,193)">Text colored in ivory3</span>
<span style="color: rgb(139,139,131)">Text colored in ivory4</span>
<span style="color: rgb(240,255,240)">Text colored in honeydew1</span>
<span style="color: rgb(224,238,224)">Text colored in honeydew2</span>
<span style="color: rgb(193,205,193)">Text colored in honeydew3</span>
<span style="color: rgb(131,139,131)">Text colored in honeydew4</span>
<span style="color: rgb(255,240,245)">Text colored in lavenderblush1</span>
<span style="color: rgb(238,224,229)">Text colored in lavenderblush2</span>
<span style="color: rgb(205,193,197)">Text colored in lavenderblush3</span>
<span style="color: rgb(139,131,134)">Text colored in lavenderblush4</span>
<span style="color: rgb(255,228,225)">Text colored in mistyrose1</span>
<span style="color: rgb(238,213,210)">Text colored in mistyrose2</span>
<span style="color: rgb(205,183,181)">Text colored in mistyrose3</span>
<span style="color: rgb(139,125,123)">Text colored in mistyrose4</span>
<span style="color: rgb(240,255,255)">Text colored in azure1</span>
<span style="color: rgb(224,238,238)">Text colored in azure2</span>
<span style="color: rgb(193,205,205)">Text colored in azure3</span>
<span style="color: rgb(131,139,139)">Text colored in azure4</span>
<span style="color: rgb(131,111,255)">Text colored in slateblue1</span>
<span style="color: rgb(122,103,238)">Text colored in slateblue2</span>
<span style="color: rgb(105,89,205)">Text colored in slateblue3</span>
<span style="color: rgb(71,60,139)">Text colored in slateblue4</span>
<span style="color: rgb(72,118,255)">Text colored in royalblue1</span>
<span style="color: rgb(67,110,238)">Text colored in royalblue2</span>
<span style="color: rgb(58,95,205)">Text colored in royalblue3</span>
<span style="color: rgb(39,64,139)">Text colored in royalblue4</span>
<span style="color: rgb(0,0,255)">Text colored in blue1</span>
<span style="color: rgb(0,0,238)">Text colored in blue2</span>
<span style="color: rgb(0,0,205)">Text colored in blue3</span>
<span style="color: rgb(0,0,139)">Text colored in blue4</span>
<span style="color: rgb(30,144,255)">Text colored in dodgerblue1</span>
<span style="color: rgb(28,134,238)">Text colored in dodgerblue2</span>
<span style="color: rgb(24,116,205)">Text colored in dodgerblue3</span>
<span style="color: rgb(16,78,139)">Text colored in dodgerblue4</span>
<span style="color: rgb(99,184,255)">Text colored in steelblue1</span>
<span style="color: rgb(92,172,238)">Text colored in steelblue2</span>
<span style="color: rgb(79,148,205)">Text colored in steelblue3</span>
<span style="color: rgb(54,100,139)">Text colored in steelblue4</span>
<span style="color: rgb(0,191,255)">Text colored in deepskyblue1</span>
<span style="color: rgb(0,178,238)">Text colored in deepskyblue2</span>
<span style="color: rgb(0,154,205)">Text colored in deepskyblue3</span>
<span style="color: rgb(0,104,139)">Text colored in deepskyblue4</span>
<span style="color: rgb(135,206,255)">Text colored in skyblue1</span>
<span style="color: rgb(126,192,238)">Text colored in skyblue2</span>
<span style="color: rgb(108,166,205)">Text colored in skyblue3</span>
<span style="color: rgb(74,112,139)">Text colored in skyblue4</span>
<span style="color: rgb(176,226,255)">Text colored in lightskyblue1</span>
<span style="color: rgb(164,211,238)">Text colored in lightskyblue2</span>
<span style="color: rgb(141,182,205)">Text colored in lightskyblue3</span>
<span style="color: rgb(96,123,139)">Text colored in lightskyblue4</span>
<span style="color: rgb(198,226,255)">Text colored in slategray1</span>
<span style="color: rgb(185,211,238)">Text colored in slategray2</span>
<span style="color: rgb(159,182,205)">Text colored in slategray3</span>
<span style="color: rgb(108,123,139)">Text colored in slategray4</span>
<span style="color: rgb(202,225,255)">Text colored in lightsteelblue1</span>
<span style="color: rgb(188,210,238)">Text colored in lightsteelblue2</span>
<span style="color: rgb(162,181,205)">Text colored in lightsteelblue3</span>
<span style="color: rgb(110,123,139)">Text colored in lightsteelblue4</span>
<span style="color: rgb(191,239,255)">Text colored in lightblue1</span>
<span style="color: rgb(178,223,238)">Text colored in lightblue2</span>
<span style="color: rgb(154,192,205)">Text colored in lightblue3</span>
<span style="color: rgb(104,131,139)">Text colored in lightblue4</span>
<span style="color: rgb(224,255,255)">Text colored in lightcyan1</span>
<span style="color: rgb(209,238,238)">Text colored in lightcyan2</span>
<span style="color: rgb(180,205,205)">Text colored in lightcyan3</span>
<span style="color: rgb(122,139,139)">Text colored in lightcyan4</span>
<span style="color: rgb(187,255,255)">Text colored in paleturquoise1</span>
<span style="color: rgb(174,238,238)">Text colored in paleturquoise2</span>
<span style="color: rgb(150,205,205)">Text colored in paleturquoise3</span>
<span style="color: rgb(102,139,139)">Text colored in paleturquoise4</span>
<span style="color: rgb(152,245,255)">Text colored in cadetblue1</span>
<span style="color: rgb(142,229,238)">Text colored in cadetblue2</span>
<span style="color: rgb(122,197,205)">Text colored in cadetblue3</span>
<span style="color: rgb(83,134,139)">Text colored in cadetblue4</span>
<span style="color: rgb(0,245,255)">Text colored in turquoise1</span>
<span style="color: rgb(0,229,238)">Text colored in turquoise2</span>
<span style="color: rgb(0,197,205)">Text colored in turquoise3</span>
<span style="color: rgb(0,134,139)">Text colored in turquoise4</span>
<span style="color: rgb(0,255,255)">Text colored in cyan1</span>
<span style="color: rgb(0,238,238)">Text colored in cyan2</span>
<span style="color: rgb(0,205,205)">Text colored in cyan3</span>
<span style="color: rgb(0,139,139)">Text colored in cyan4</span>
<span style="color: rgb(151,255,255)">Text colored in darkslategray1</span>
<span style="color: rgb(141,238,238)">Text colored in darkslategray2</span>
<span style="color: rgb(121,205,205)">Text colored in darkslategray3</span>
<span style="color: rgb(82,139,139)">Text colored in darkslategray4</span>
<span style="color: rgb(127,255,212)">Text colored in aquamarine1</span>
<span style="color: rgb(118,238,198)">Text colored in aquamarine2</span>
<span style="color: rgb(102,205,170)">Text colored in aquamarine3</span>
<span style="color: rgb(69,139,116)">Text colored in aquamarine4</span>
<span style="color: rgb(193,255,193)">Text colored in darkseagreen1</span>
<span style="color: rgb(180,238,180)">Text colored in darkseagreen2</span>
<span style="color: rgb(155,205,155)">Text colored in darkseagreen3</span>
<span style="color: rgb(105,139,105)">Text colored in darkseagreen4</span>
<span style="color: rgb(84,255,159)">Text colored in seagreen1</span>
<span style="color: rgb(78,238,148)">Text colored in seagreen2</span>
<span style="color: rgb(67,205,128)">Text colored in seagreen3</span>
<span style="color: rgb(46,139,87)">Text colored in seagreen4</span>
<span style="color: rgb(154,255,154)">Text colored in palegreen1</span>
<span style="color: rgb(144,238,144)">Text colored in palegreen2</span>
<span style="color: rgb(124,205,124)">Text colored in palegreen3</span>
<span style="color: rgb(84,139,84)">Text colored in palegreen4</span>
<span style="color: rgb(0,255,127)">Text colored in springgreen1</span>
<span style="color: rgb(0,238,118)">Text colored in springgreen2</span>
<span style="color: rgb(0,205,102)">Text colored in springgreen3</span>
<span style="color: rgb(0,139,69)">Text colored in springgreen4</span>
<span style="color: rgb(0,255,0)">Text colored in green1</span>
<span style="color: rgb(0,238,0)">Text colored in green2</span>
<span style="color: rgb(0,205,0)">Text colored in green3</span>
<span style="color: rgb(0,139,0)">Text colored in green4</span>
<span style="color: rgb(127,255,0)">Text colored in chartreuse1</span>
<span style="color: rgb(118,238,0)">Text colored in chartreuse2</span>
<span style="color: rgb(102,205,0)">Text colored in chartreuse3</span>
<span style="color: rgb(69,139,0)">Text colored in chartreuse4</span>
<span style="color: rgb(192,255,62)">Text colored in olivedrab1</span>
<span style="color: rgb(179,238,58)">Text colored in olivedrab2</span>
<span style="color: rgb(154,205,50)">Text colored in olivedrab3</span>
<span style="color: rgb(105,139,34)">Text colored in olivedrab4</span>
<span style="color: rgb(202,255,112)">Text colored in darkolivegreen1</span>
<span style="color: rgb(188,238,104)">Text colored in darkolivegreen2</span>
<span style="color: rgb(162,205,90)">Text colored in darkolivegreen3</span>
<span style="color: rgb(110,139,61)">Text colored in darkolivegreen4</span>
<span style="color: rgb(255,246,143)">Text colored in khaki1</span>
<span style="color: rgb(238,230,133)">Text colored in khaki2</span>
<span style="color: rgb(205,198,115)">Text colored in khaki3</span>
<span style="color: rgb(139,134,78)">Text colored in khaki4</span>
<span style="color: rgb(255,236,139)">Text colored in lightgoldenrod1</span>
<span style="color: rgb(238,220,130)">Text colored in lightgoldenrod2</span>
<span style="color: rgb(205,190,112)">Text colored in lightgoldenrod3</span>
<span style="color: rgb(139,129,76)">Text colored in lightgoldenrod4</span>
<span style="color: rgb(255,255,224)">Text colored in lightyellow1</span>
<span style="color: rgb(238,238,209)">Text colored in lightyellow2</span>
<span style="color: rgb(205,205,180)">Text colored in lightyellow3</span>
<span style="color: rgb(139,139,122)">Text colored in lightyellow4</span>
<span style="color: rgb(255,255,0)">Text colored in yellow1</span>
<span style="color: rgb(238,238,0)">Text colored in yellow2</span>
<span style="color: rgb(205,205,0)">Text colored in yellow3</span>
<span style="color: rgb(139,139,0)">Text colored in yellow4</span>
<span style="color: rgb(255,215,0)">Text colored in gold1</span>
<span style="color: rgb(238,201,0)">Text colored in gold2</span>
<span style="color: rgb(205,173,0)">Text colored in gold3</span>
<span style="color: rgb(139,117,0)">Text colored in gold4</span>
<span style="color: rgb(255,193,37)">Text colored in goldenrod1</span>
<span style="color: rgb(238,180,34)">Text colored in goldenrod2</span>
<span style="color: rgb(205,155,29)">Text colored in goldenrod3</span>
<span style="color: rgb(139,105,20)">Text colored in goldenrod4</span>
<span style="color: rgb(255,185,15)">Text colored in darkgoldenrod1</span>
<span style="color: rgb(238,173,14)">Text colored in darkgoldenrod2</span>
<span style="color: rgb(205,149,12)">Text colored in darkgoldenrod3</span>
<span style="color: rgb(139,101,8)">Text colored in darkgoldenrod4</span>
<span style="color: rgb(255,193,193)">Text colored in rosybrown1</span>
<span style="color: rgb(238,180,180)">Text colored in rosybrown2</span>
<span style="color: rgb(205,155,155)">Text colored in rosybrown3</span>
<span style="color: rgb(139,105,105)">Text colored in rosybrown4</span>
<span style="color: rgb(255,106,106)">Text colored in indianred1</span>
<span style="color: rgb(238,99,99)">Text colored in indianred2</span>
<span style="color: rgb(205,85,85)">Text colored in indianred3</span>
<span style="color: rgb(139,58,58)">Text colored in indianred4</span>
<span style="color: rgb(255,130,71)">Text colored in sienna1</span>
<span style="color: rgb(238,121,66)">Text colored in sienna2</span>
<span style="color: rgb(205,104,57)">Text colored in sienna3</span>
<span style="color: rgb(139,71,38)">Text colored in sienna4</span>
<span style="color: rgb(255,211,155)">Text colored in burlywood1</span>
<span style="color: rgb(238,197,145)">Text colored in burlywood2</span>
<span style="color: rgb(205,170,125)">Text colored in burlywood3</span>
<span style="color: rgb(139,115,85)">Text colored in burlywood4</span>
<span style="color: rgb(255,231,186)">Text colored in wheat1</span>
<span style="color: rgb(238,216,174)">Text colored in wheat2</span>
<span style="color: rgb(205,186,150)">Text colored in wheat3</span>
<span style="color: rgb(139,126,102)">Text colored in wheat4</span>
<span style="color: rgb(255,165,79)">Text colored in tan1</span>
<span style="color: rgb(238,154,73)">Text colored in tan2</span>
<span style="color: rgb(205,133,63)">Text colored in tan3</span>
<span style="color: rgb(139,90,43)">Text colored in tan4</span>
<span style="color: rgb(255,127,36)">Text colored in chocolate1</span>
<span style="color: rgb(238,118,33)">Text colored in chocolate2</span>
<span style="color: rgb(205,102,29)">Text colored in chocolate3</span>
<span style="color: rgb(139,69,19)">Text colored in chocolate4</span>
<span style="color: rgb(255,48,48)">Text colored in firebrick1</span>
<span style="color: rgb(238,44,44)">Text colored in firebrick2</span>
<span style="color: rgb(205,38,38)">Text colored in firebrick3</span>
<span style="color: rgb(139,26,26)">Text colored in firebrick4</span>
<span style="color: rgb(255,64,64)">Text colored in brown1</span>
<span style="color: rgb(238,59,59)">Text colored in brown2</span>
<span style="color: rgb(205,51,51)">Text colored in brown3</span>
<span style="color: rgb(139,35,35)">Text colored in brown4</span>
<span style="color: rgb(255,140,105)">Text colored in salmon1</span>
<span style="color: rgb(238,130,98)">Text colored in salmon2</span>
<span style="color: rgb(205,112,84)">Text colored in salmon3</span>
<span style="color: rgb(139,76,57)">Text colored in salmon4</span>
<span style="color: rgb(255,160,122)">Text colored in lightsalmon1</span>
<span style="color: rgb(238,149,114)">Text colored in lightsalmon2</span>
<span style="color: rgb(205,129,98)">Text colored in lightsalmon3</span>
<span style="color: rgb(139,87,66)">Text colored in lightsalmon4</span>
<span style="color: rgb(255,165,0)">Text colored in orange1</span>
<span style="color: rgb(238,154,0)">Text colored in orange2</span>
<span style="color: rgb(205,133,0)">Text colored in orange3</span>
<span style="color: rgb(139,90,0)">Text colored in orange4</span>
<span style="color: rgb(255,127,0)">Text colored in darkorange1</span>
<span style="color: rgb(238,118,0)">Text colored in darkorange2</span>
<span style="color: rgb(205,102,0)">Text colored in darkorange3</span>
<span style="color: rgb(139,69,0)">Text colored in darkorange4</span>
<span style="color: rgb(255,114,86)">Text colored in coral1</span>
<span style="color: rgb(238,106,80)">Text colored in coral2</span>
<span style="color: rgb(205,91,69)">Text colored in coral3</span>
<span style="color: rgb(139,62,47)">Text colored in coral4</span>
<span style="color: rgb(255,99,71)">Text colored in tomato1</span>
<span style="color: rgb(238,92,66)">Text colored in tomato2</span>
<span style="color: rgb(205,79,57)">Text colored in tomato3</span>
<span style="color: rgb(139,54,38)">Text colored in tomato4</span>
<span style="color: rgb(255,69,0)">Text colored in orangered1</span>
<span style="color: rgb(238,64,0)">Text colored in orangered2</span>
<span style="color: rgb(205,55,0)">Text colored in orangered3</span>
<span style="color: rgb(139,37,0)">Text colored in orangered4</span>
<span style="color: rgb(255,0,0)">Text colored in red1</span>
<span style="color: rgb(238,0,0)">Text colored in red2</span>
<span style="color: rgb(205,0,0)">Text colored in red3</span>
<span style="color: rgb(139,0,0)">Text colored in red4</span>
<span style="color: rgb(255,20,147)">Text colored in deeppink1</span>
<span style="color: rgb(238,18,137)">Text colored in deeppink2</span>
<span style="color: rgb(205,16,118)">Text colored in deeppink3</span>
<span style="color: rgb(139,10,80)">Text colored in deeppink4</span>
<span style="color: rgb(255,110,180)">Text colored in hotpink1</span>
<span style="color: rgb(238,106,167)">Text colored in hotpink2</span>
<span style="color: rgb(205,96,144)">Text colored in hotpink3</span>
<span style="color: rgb(139,58,98)">Text colored in hotpink4</span>
<span style="color: rgb(255,181,197)">Text colored in pink1</span>
<span style="color: rgb(238,169,184)">Text colored in pink2</span>
<span style="color: rgb(205,145,158)">Text colored in pink3</span>
<span style="color: rgb(139,99,108)">Text colored in pink4</span>
<span style="color: rgb(255,174,185)">Text colored in lightpink1</span>
<span style="color: rgb(238,162,173)">Text colored in lightpink2</span>
<span style="color: rgb(205,140,149)">Text colored in lightpink3</span>
<span style="color: rgb(139,95,101)">Text colored in lightpink4</span>
<span style="color: rgb(255,130,171)">Text colored in palevioletred1</span>
<span style="color: rgb(238,121,159)">Text colored in palevioletred2</span>
<span style="color: rgb(205,104,137)">Text colored in palevioletred3</span>
<span style="color: rgb(139,71,93)">Text colored in palevioletred4</span>
<span style="color: rgb(255,52,179)">Text colored in maroon1</span>
<span style="color: rgb(238,48,167)">Text colored in maroon2</span>
<span style="color: rgb(205,41,144)">Text colored in maroon3</span>
<span style="color: rgb(139,28,98)">Text colored in maroon4</span>
<span style="color: rgb(255,62,150)">Text colored in violetred1</span>
<span style="color: rgb(238,58,140)">Text colored in violetred2</span>
<span style="color: rgb(205,50,120)">Text colored in violetred3</span>
<span style="color: rgb(139,34,82)">Text colored in violetred4</span>
<span style="color: rgb(255,0,255)">Text colored in magenta1</span>
<span style="color: rgb(238,0,238)">Text colored in magenta2</span>
<span style="color: rgb(205,0,205)">Text colored in magenta3</span>
<span style="color: rgb(139,0,139)">Text colored in magenta4</span>
<span style="color: rgb(255,131,250)">Text colored in orchid1</span>
<span style="color: rgb(238,122,233)">Text colored in orchid2</span>
<span style="color: rgb(205,105,201)">Text colored in orchid3</span>
<span style="color: rgb(139,71,137)">Text colored in orchid4</span>
<span style="color: rgb(255,187,255)">Text colored in plum1</span>
<span style="color: rgb(238,174,238)">Text colored in plum2</span>
<span style="color: rgb(205,150,205)">Text colored in plum3</span>
<span style="color: rgb(139,102,139)">Text colored in plum4</span>
<span style="color: rgb(224,102,255)">Text colored in mediumorchid1</span>
<span style="color: rgb(209,95,238)">Text colored in mediumorchid2</span>
<span style="color: rgb(180,82,205)">Text colored in mediumorchid3</span>
<span style="color: rgb(122,55,139)">Text colored in mediumorchid4</span>
<span style="color: rgb(191,62,255)">Text colored in darkorchid1</span>
<span style="color: rgb(178,58,238)">Text colored in darkorchid2</span>
<span style="color: rgb(154,50,205)">Text colored in darkorchid3</span>
<span style="color: rgb(104,34,139)">Text colored in darkorchid4</span>
<span style="color: rgb(155,48,255)">Text colored in purple1</span>
<span style="color: rgb(145,44,238)">Text colored in purple2</span>
<span style="color: rgb(125,38,205)">Text colored in purple3</span>
<span style="color: rgb(85,26,139)">Text colored in purple4</span>
<span style="color: rgb(171,130,255)">Text colored in mediumpurple1</span>
<span style="color: rgb(159,121,238)">Text colored in mediumpurple2</span>
<span style="color: rgb(137,104,205)">Text colored in mediumpurple3</span>
<span style="color: rgb(93,71,139)">Text colored in mediumpurple4</span>
<span style="color: rgb(255,225,255)">Text colored in thistle1</span>
<span style="color: rgb(238,210,238)">Text colored in thistle2</span>
<span style="color: rgb(205,181,205)">Text colored in thistle3</span>
<span style="color: rgb(139,123,139)">Text colored in thistle4</span>
<span style="color: rgb(0,0,0)">Text colored in gray0</span>
<span style="color: rgb(0,0,0)">Text colored in grey0</span>
<span style="color: rgb(3,3,3)">Text colored in gray1</span>
<span style="color: rgb(3,3,3)">Text colored in grey1</span>
<span style="color: rgb(5,5,5)">Text colored in gray2</span>
<span style="color: rgb(5,5,5)">Text colored in grey2</span>
<span style="color: rgb(8,8,8)">Text colored in gray3</span>
<span style="color: rgb(8,8,8)">Text colored in grey3</span>
<span style="color: rgb(10,10,10)">Text colored in gray4</span>
<span style="color: rgb(10,10,10)">Text colored in grey4</span>
<span style="color: rgb(13,13,13)">Text colored in gray5</span>
<span style="color: rgb(13,13,13)">Text colored in grey5</span>
<span style="color: rgb(15,15,15)">Text colored in gray6</span>
<span style="color: rgb(15,15,15)">Text colored in grey6</span>
<span style="color: rgb(18,18,18)">Text colored in gray7</span>
<span style="color: rgb(18,18,18)">Text colored in grey7</span>
<span style="color: rgb(20,20,20)">Text colored in gray8</span>
<span style="color: rgb(20,20,20)">Text colored in grey8</span>
<span style="color: rgb(23,23,23)">Text colored in gray9</span>
<span style="color: rgb(23,23,23)">Text colored in grey9</span>
<span style="color: rgb(26,26,26)">Text colored in gray10</span>
<span style="color: rgb(26,26,26)">Text colored in grey10</span>
<span style="color: rgb(28,28,28)">Text colored in gray11</span>
<span style="color: rgb(28,28,28)">Text colored in grey11</span>
<span style="color: rgb(31,31,31)">Text colored in gray12</span>
<span style="color: rgb(31,31,31)">Text colored in grey12</span>
<span style="color: rgb(33,33,33)">Text colored in gray13</span>
<span style="color: rgb(33,33,33)">Text colored in grey13</span>
<span style="color: rgb(36,36,36)">Text colored in gray14</span>
<span style="color: rgb(36,36,36)">Text colored in grey14</span>
<span style="color: rgb(38,38,38)">Text colored in gray15</span>
<span style="color: rgb(38,38,38)">Text colored in grey15</span>
<span style="color: rgb(41,41,41)">Text colored in gray16</span>
<span style="color: rgb(41,41,41)">Text colored in grey16</span>
<span style="color: rgb(43,43,43)">Text colored in gray17</span>
<span style="color: rgb(43,43,43)">Text colored in grey17</span>
<span style="color: rgb(46,46,46)">Text colored in gray18</span>
<span style="color: rgb(46,46,46)">Text colored in grey18</span>
<span style="color: rgb(48,48,48)">Text colored in gray19</span>
<span style="color: rgb(48,48,48)">Text colored in grey19</span>
<span style="color: rgb(51,51,51)">Text colored in gray20</span>
<span style="color: rgb(51,51,51)">Text colored in grey20</span>
<span style="color: rgb(54,54,54)">Text colored in gray21</span>
<span style="color: rgb(54,54,54)">Text colored in grey21</span>
<span style="color: rgb(56,56,56)">Text colored in gray22</span>
<span style="color: rgb(56,56,56)">Text colored in grey22</span>
<span style="color: rgb(59,59,59)">Text colored in gray23</span>
<span style="color: rgb(59,59,59)">Text colored in grey23</span>
<span style="color: rgb(61,61,61)">Text colored in gray24</span>
<span style="color: rgb(61,61,61)">Text colored in grey24</span>
<span style="color: rgb(64,64,64)">Text colored in gray25</span>
<span style="color: rgb(64,64,64)">Text colored in grey25</span>
<span style="color: rgb(66,66,66)">Text colored in gray26</span>
<span style="color: rgb(66,66,66)">Text colored in grey26</span>
<span style="color: rgb(69,69,69)">Text colored in gray27</span>
<span style="color: rgb(69,69,69)">Text colored in grey27</span>
<span style="color: rgb(71,71,71)">Text colored in gray28</span>
<span style="color: rgb(71,71,71)">Text colored in grey28</span>
<span style="color: rgb(74,74,74)">Text colored in gray29</span>
<span style="color: rgb(74,74,74)">Text colored in grey29</span>
<span style="color: rgb(77,77,77)">Text colored in gray30</span>
<span style="color: rgb(77,77,77)">Text colored in grey30</span>
<span style="color: rgb(79,79,79)">Text colored in gray31</span>
<span style="color: rgb(79,79,79)">Text colored in grey31</span>
<span style="color: rgb(82,82,82)">Text colored in gray32</span>
<span style="color: rgb(82,82,82)">Text colored in grey32</span>
<span style="color: rgb(84,84,84)">Text colored in gray33</span>
<span style="color: rgb(84,84,84)">Text colored in grey33</span>
<span style="color: rgb(87,87,87)">Text colored in gray34</span>
<span style="color: rgb(87,87,87)">Text colored in grey34</span>
<span style="color: rgb(89,89,89)">Text colored in gray35</span>
<span style="color: rgb(89,89,89)">Text colored in grey35</span>
<span style="color: rgb(92,92,92)">Text colored in gray36</span>
<span style="color: rgb(92,92,92)">Text colored in grey36</span>
<span style="color: rgb(94,94,94)">Text colored in gray37</span>
<span style="color: rgb(94,94,94)">Text colored in grey37</span>
<span style="color: rgb(97,97,97)">Text colored in gray38</span>
<span style="color: rgb(97,97,97)">Text colored in grey38</span>
<span style="color: rgb(99,99,99)">Text colored in gray39</span>
<span style="color: rgb(99,99,99)">Text colored in grey39</span>
<span style="color: rgb(102,102,102)">Text colored in gray40</span>
<span style="color: rgb(102,102,102)">Text colored in grey40</span>
<span style="color: rgb(105,105,105)">Text colored in gray41</span>
<span style="color: rgb(105,105,105)">Text colored in grey41</span>
<span style="color: rgb(107,107,107)">Text colored in gray42</span>
<span style="color: rgb(107,107,107)">Text colored in grey42</span>
<span style="color: rgb(110,110,110)">Text colored in gray43</span>
<span style="color: rgb(110,110,110)">Text colored in grey43</span>
<span style="color: rgb(112,112,112)">Text colored in gray44</span>
<span style="color: rgb(112,112,112)">Text colored in grey44</span>
<span style="color: rgb(115,115,115)">Text colored in gray45</span>
<span style="color: rgb(115,115,115)">Text colored in grey45</span>
<span style="color: rgb(117,117,117)">Text colored in gray46</span>
<span style="color: rgb(117,117,117)">Text colored in grey46</span>
<span style="color: rgb(120,120,120)">Text colored in gray47</span>
<span style="color: rgb(120,120,120)">Text colored in grey47</span>
<span style="color: rgb(122,122,122)">Text colored in gray48</span>
<span style="color: rgb(122,122,122)">Text colored in grey48</span>
<span style="color: rgb(125,125,125)">Text colored in gray49</span>
<span style="color: rgb(125,125,125)">Text colored in grey49</span>
<span style="color: rgb(127,127,127)">Text colored in gray50</span>
<span style="color: rgb(127,127,127)">Text colored in grey50</span>
<span style="color: rgb(130,130,130)">Text colored in gray51</span>
<span style="color: rgb(130,130,130)">Text colored in grey51</span>
<span style="color: rgb(133,133,133)">Text colored in gray52</span>
<span style="color: rgb(133,133,133)">Text colored in grey52</span>
<span style="color: rgb(135,135,135)">Text colored in gray53</span>
<span style="color: rgb(135,135,135)">Text colored in grey53</span>
<span style="color: rgb(138,138,138)">Text colored in gray54</span>
<span style="color: rgb(138,138,138)">Text colored in grey54</span>
<span style="color: rgb(140,140,140)">Text colored in gray55</span>
<span style="color: rgb(140,140,140)">Text colored in grey55</span>
<span style="color: rgb(143,143,143)">Text colored in gray56</span>
<span style="color: rgb(143,143,143)">Text colored in grey56</span>
<span style="color: rgb(145,145,145)">Text colored in gray57</span>
<span style="color: rgb(145,145,145)">Text colored in grey57</span>
<span style="color: rgb(148,148,148)">Text colored in gray58</span>
<span style="color: rgb(148,148,148)">Text colored in grey58</span>
<span style="color: rgb(150,150,150)">Text colored in gray59</span>
<span style="color: rgb(150,150,150)">Text colored in grey59</span>
<span style="color: rgb(153,153,153)">Text colored in gray60</span>
<span style="color: rgb(153,153,153)">Text colored in grey60</span>
<span style="color: rgb(156,156,156)">Text colored in gray61</span>
<span style="color: rgb(156,156,156)">Text colored in grey61</span>
<span style="color: rgb(158,158,158)">Text colored in gray62</span>
<span style="color: rgb(158,158,158)">Text colored in grey62</span>
<span style="color: rgb(161,161,161)">Text colored in gray63</span>
<span style="color: rgb(161,161,161)">Text colored in grey63</span>
<span style="color: rgb(163,163,163)">Text colored in gray64</span>
<span style="color: rgb(163,163,163)">Text colored in grey64</span>
<span style="color: rgb(166,166,166)">Text colored in gray65</span>
<span style="color: rgb(166,166,166)">Text colored in grey65</span>
<span style="color: rgb(168,168,168)">Text colored in gray66</span>
<span style="color: rgb(168,168,168)">Text colored in grey66</span>
<span style="color: rgb(171,171,171)">Text colored in gray67</span>
<span style="color: rgb(171,171,171)">Text colored in grey67</span>
<span style="color: rgb(173,173,173)">Text colored in gray68</span>
<span style="color: rgb(173,173,173)">Text colored in grey68</span>
<span style="color: rgb(176,176,176)">Text colored in gray69</span>
<span style="color: rgb(176,176,176)">Text colored in grey69</span>
<span style="color: rgb(179,179,179)">Text colored in gray70</span>
<span style="color: rgb(179,179,179)">Text colored in grey70</span>
<span style="color: rgb(181,181,181)">Text colored in gray71</span>
<span style="color: rgb(181,181,181)">Text colored in grey71</span>
<span style="color: rgb(184,184,184)">Text colored in gray72</span>
<span style="color: rgb(184,184,184)">Text colored in grey72</span>
<span style="color: rgb(186,186,186)">Text colored in gray73</span>
<span style="color: rgb(186,186,186)">Text colored in grey73</span>
<span style="color: rgb(189,189,189)">Text colored in gray74</span>
<span style="color: rgb(189,189,189)">Text colored in grey74</span>
<span style="color: rgb(191,191,191)">Text colored in gray75</span>
<span style="color: rgb(191,191,191)">Text colored in grey75</span>
<span style="color: rgb(194,194,194)">Text colored in gray76</span>
<span style="color: rgb(194,194,194)">Text colored in grey76</span>
<span style="color: rgb(196,196,196)">Text colored in gray77</span>
<span style="color: rgb(196,196,196)">Text colored in grey77</span>
<span style="color: rgb(199,199,199)">Text colored in gray78</span>
<span style="color: rgb(199,199,199)">Text colored in grey78</span>
<span style="color: rgb(201,201,201)">Text colored in gray79</span>
<span style="color: rgb(201,201,201)">Text colored in grey79</span>
<span style="color: rgb(204,204,204)">Text colored in gray80</span>
<span style="color: rgb(204,204,204)">Text colored in grey80</span>
<span style="color: rgb(207,207,207)">Text colored in gray81</span>
<span style="color: rgb(207,207,207)">Text colored in grey81</span>
<span style="color: rgb(209,209,209)">Text colored in gray82</span>
<span style="color: rgb(209,209,209)">Text colored in grey82</span>
<span style="color: rgb(212,212,212)">Text colored in gray83</span>
<span style="color: rgb(212,212,212)">Text colored in grey83</span>
<span style="color: rgb(214,214,214)">Text colored in gray84</span>
<span style="color: rgb(214,214,214)">Text colored in grey84</span>
<span style="color: rgb(217,217,217)">Text colored in gray85</span>
<span style="color: rgb(217,217,217)">Text colored in grey85</span>
<span style="color: rgb(219,219,219)">Text colored in gray86</span>
<span style="color: rgb(219,219,219)">Text colored in grey86</span>
<span style="color: rgb(222,222,222)">Text colored in gray87</span>
<span style="color: rgb(222,222,222)">Text colored in grey87</span>
<span style="color: rgb(224,224,224)">Text colored in gray88</span>
<span style="color: rgb(224,224,224)">Text colored in grey88</span>
<span style="color: rgb(227,227,227)">Text colored in gray89</span>
<span style="color: rgb(227,227,227)">Text colored in grey89</span>
<span style="color: rgb(229,229,229)">Text colored in gray90</span>
<span style="color: rgb(229,229,229)">Text colored in grey90</span>
<span style="color: rgb(232,232,232)">Text colored in gray91</span>
<span style="color: rgb(232,232,232)">Text colored in grey91</span>
<span style="color: rgb(235,235,235)">Text colored in gray92</span>
<span style="color: rgb(235,235,235)">Text colored in grey92</span>
<span style="color: rgb(237,237,237)">Text colored in gray93</span>
<span style="color: rgb(237,237,237)">Text colored in grey93</span>
<span style="color: rgb(240,240,240)">Text colored in gray94</span>
<span style="color: rgb(240,240,240)">Text colored in grey94</span>
<span style="color: rgb(242,242,242)">Text colored in gray95</span>
<span style="color: rgb(242,242,242)">Text colored in grey95</span>
<span style="color: rgb(245,245,245)">Text colored in gray96</span>
<span style="color: rgb(245,245,245)">Text colored in grey96</span>
<span style="color: rgb(247,247,247)">Text colored in gray97</span>
<span style="color: rgb(247,247,247)">Text colored in grey97</span>
<span style="color: rgb(250,250,250)">Text colored in gray98</span>
<span style="color: rgb(250,250,250)">Text colored in grey98</span>
<span style="color: rgb(252,252,252)">Text colored in gray99</span>
<span style="color: rgb(252,252,252)">Text colored in grey99</span>
<span style="color: rgb(255,255,255)">Text colored in gray100</span>
<span style="color: rgb(255,255,255)">Text colored in grey100</span>
<span style="color: rgb(169,169,169)">Text colored in darkgrey</span>
<span style="color: rgb(169,169,169)">Text colored in darkgray</span>
<span style="color: rgb(0,0,139)">Text colored in darkblue</span>
<span style="color: rgb(0,139,139)">Text colored in darkcyan</span>
<span style="color: rgb(139,0,139)">Text colored in darkmagenta</span>
<span style="color: rgb(139,0,0)">Text colored in darkred</span>
<span style="color: rgb(144,238,144)">Text colored in lightgreen</span>
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
