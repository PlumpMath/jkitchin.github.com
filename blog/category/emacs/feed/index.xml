<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Wed, 01 Jul 2015 15:42:49 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Spoken translations in Emacs</title>
      <link>http://jkitchin.github.io/blog/2015/07/01/Spoken-translations-in-Emacs</link>
      <pubDate>Wed, 01 Jul 2015 11:42:28 EDT</pubDate>
      <category><![CDATA[speech]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">Zp8xiJg6ES3-rUVGYiL6AXNY724=</guid>
      <description>Spoken translations in Emacs</description>
      <content:encoded><![CDATA[



<p>
Finally, continuing our experiments with computer speech for fun, let us try a translation of text to another language that is then spoken. Here is a free translator that has the courtesy to reply with json with the translated text in it. <a href="http://mymemory.translated.net/api/get?q=Hello%20World!&langpair=en|de">http://mymemory.translated.net/api/get?q=Hello%20World!&langpair=en|de</a> I had to download a German voice called Anna, then get some translated text.
</p>

<p>
As with previous posts, there is a video: <a href="https://www.youtube.com/watch?v=8CBKnahE0ak">https://www.youtube.com/watch?v=8CBKnahE0ak</a> . I am trying ScreenFlow for these (instead of Camtasia), and I still have not quite mastered the aspect ratio, so the videos still look a little odd.
</p>

<p>
As a reminder, we have this easy way to speak text in applescript. If you are on Linux, check out <a href="https://wiki.archlinux.org/index.php/Festival">Festival</a> and on windows you may find some inspiration <a href="http://stackoverflow.com/questions/1040655/ms-speech-from-command-line">here</a> .
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(do-applescript <span style="color: #008000;">"say \"Hello. My name is John. I am glad to meet you.\""</span>)
</pre>
</div>

<p>
You can retrieve json data of the translated text, and then we can use it in our <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/29/Getting-Emacs-to-read-to-me/">word-speak</a> function we previously developed. Here is an example in in German.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((words-voice <span style="color: #008000;">"Anna"</span>)
       (text <span style="color: #008000;">"Hello. My name is John. I am glad to meet you."</span>)
       (url (format <span style="color: #008000;">"http://mymemory.translated.net/api/get?q=%s!&amp;langpair=en|de"</span>
                    text))
       (json (<span style="color: #0000FF;">with-current-buffer</span>
                 (url-retrieve-synchronously url)
               (json-read-from-string
                (buffer-substring url-http-end-of-headers (point-max)))))
       (translated-text (cdr (assoc 'translatedText (cdr (assoc 'responseData json))))))
  (words-speak translated-text)
  translated-text)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #008000;">"Hallo. Mein Name ist John. Ich freue mich, Sie kennen zu lernen.!"</span>
</pre>
</div>


<p>
How about Chinese? Again, I downloaded a Chinese voice called "Ting-Ting".
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((words-voice <span style="color: #008000;">"Ting-Ting"</span>)
       (text <span style="color: #008000;">"Hello. My name is John. I am glad to meet you."</span>)
       (url (format <span style="color: #008000;">"http://mymemory.translated.net/api/get?q=%s!&amp;langpair=en|zh"</span>
                    text))
       (json (<span style="color: #0000FF;">with-current-buffer</span>
                 (url-retrieve-synchronously url)
               (json-read-from-string
                (buffer-substring url-http-end-of-headers (point-max)))))
       (translated-text (cdr (assoc 'translatedText (cdr (assoc 'responseData json))))))
  (words-speak translated-text)
  translated-text)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #008000;">"&#20320;&#22909;&#12290;&#25105;&#30340;&#21517;&#23383;&#26159;&#32422;&#32752;&#12290;&#25105;&#24456;&#39640;&#20852;&#35265;&#21040;&#20320;&#12290;!"</span>
</pre>
</div>

<p>
So, can any Chinese readers and listeners confirm if the text translates correctly, and if Ting-Ting said it correctly? Hopefully it is good enough to make some sense and be useful!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/01/Spoken-translations-in-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Get spoken definitions from the Meriam dictionary</title>
      <link>http://jkitchin.github.io/blog/2015/06/30/Get-spoken-definitions-from-the-Meriam-dictionary</link>
      <pubDate>Tue, 30 Jun 2015 11:26:41 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">7NMCEbkQYHE8R_G3lZIClQbLX1g=</guid>
      <description>Get spoken definitions from the Meriam dictionary</description>
      <content:encoded><![CDATA[


<p>
Now that I can get <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/29/Getting-Emacs-to-read-to-me/">Emacs to speak words</a> , here is a new application of the idea. We use it to speak the definition of the word at point. We look up the definition here:
<a href="http://www.dictionaryapi.com/account/index.htm">http://www.dictionaryapi.com/account/index.htm</a> 
</p>

<p>
You may want to head straight to the video to see how this works here: <a href="https://www.youtube.com/watch?v=m529gXMrXZA">https://www.youtube.com/watch?v=m529gXMrXZA</a> 
</p>


<p>
I had to get an API key for this. I suppose this key should be secret, but it could only be secure by obscurity in any kind of webapp and I don't anticipate using this much so here are the keys I got for the dictionary and thesaurus.
</p>

<p>
Key (Dictionary): 64f0950a-03b9-4315-9ba5-a73a964251ed
Key (Thesaurus): ff0e39e2-b31f-4f17-833c-24e2875aad5d
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span>
    (url-retrieve-synchronously
     (format
      <span style="color: #008000;">"http://www.dictionaryapi.com/api/v1/references/collegiate/xml/%s?key=%s"</span>
      <span style="color: #008000;">"synchronous"</span>
      <span style="color: #008000;">"64f0950a-03b9-4315-9ba5-a73a964251ed"</span>))
  (buffer-substring url-http-end-of-headers (point-max)))
</pre>
</div>

<pre class="example">
&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;entry_list version="1.0"&gt;
</pre>
<p>
:        &lt;entry id="synchronous"&gt;&lt;ew&gt;synchronous&lt;/ew&gt;&lt;subj&gt;AE-4b#CP-5#TL-5&lt;/subj&gt;&lt;hw&gt;syn*chro*nous&lt;/hw&gt;&lt;sound&gt;&lt;wav&gt;synchr14.wav&lt;/wav&gt;&lt;wpr&gt;!siN-kru-nus&lt;/wpr&gt;&lt;/sound&gt;&lt;pr&gt;ˈsiŋ-krə-nəs, ˈsin-&lt;/pr&gt;&lt;fl&gt;adjective&lt;/fl&gt;&lt;et&gt;Late Latin &lt;it&gt;synchronos,&lt;/it&gt; from Greek, from &lt;it&gt;syn-&lt;/it&gt; + &lt;it&gt;chronos&lt;/it&gt; time&lt;/et&gt;&lt;def&gt;&lt;date&gt;1669&lt;/date&gt; &lt;sn&gt;1&lt;/sn&gt; &lt;dt&gt;:happening, existing, or arising at precisely the same time&lt;/dt&gt; &lt;sn&gt;2&lt;/sn&gt; &lt;dt&gt;:recurring or operating at exactly the same periods&lt;/dt&gt; &lt;sn&gt;3&lt;/sn&gt; &lt;dt&gt;:involving or indicating &lt;fw&gt;synchronism&lt;/fw&gt;&lt;/dt&gt; &lt;sn&gt;4 a&lt;/sn&gt; &lt;dt&gt;:having the same period&lt;/dt&gt; &lt;sd&gt;also&lt;/sd&gt; &lt;dt&gt;:having the same period and phase&lt;/dt&gt;  &lt;sn&gt;b&lt;/sn&gt; &lt;dt&gt;:&lt;sx&gt;geostationary&lt;/sx&gt;&lt;/dt&gt; &lt;sn&gt;5&lt;/sn&gt; &lt;dt&gt;:of, used in, or being digital communication (as between computers) in which a common timing signal is established that dictates when individual bits can be transmitted and which allows for very high rates of data transfer&lt;/dt&gt;&lt;ss&gt;contemporary&lt;/ss&gt;&lt;/def&gt;&lt;uro&gt;&lt;ure&gt;syn*chro*nous*ly&lt;/ure&gt; &lt;fl&gt;adverb&lt;/fl&gt;&lt;/uro&gt;&lt;uro&gt;&lt;ure&gt;syn*chro*nous*ness&lt;/ure&gt; &lt;fl&gt;noun&lt;/fl&gt;&lt;/uro&gt;&lt;/entry&gt;
:        &lt;entry id="synchronous motor"&gt;&lt;ew&gt;synchronous motor&lt;/ew&gt;&lt;subj&gt;ME#EE&lt;/subj&gt;&lt;hw&gt;synchronous motor&lt;/hw&gt;&lt;fl&gt;noun&lt;/fl&gt;&lt;def&gt;&lt;date&gt;1897&lt;/date&gt;&lt;dt&gt;:an electric motor having a speed strictly proportional to the frequency of the operating current&lt;/dt&gt;&lt;/def&gt;&lt;/entry&gt;
</p>
<pre class="example">
&lt;/entry_list&gt;
</pre>

<p>
The idea is to query the url, get some xml back, and collect the definitions from it. Then, construct a string of the word, the number of definitions, then the definitions, and say it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">speak-definition</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((keyword (thing-at-point 'word))
         (api-key <span style="color: #008000;">"64f0950a-03b9-4315-9ba5-a73a964251ed"</span>)
         (xml (<span style="color: #0000FF;">with-current-buffer</span>
                  (url-retrieve-synchronously
                   (format
                    <span style="color: #008000;">"http://www.dictionaryapi.com/api/v1/references/collegiate/xml/%s?key=%s"</span>
                    keyword
                    api-key))
                (xml-parse-region url-http-end-of-headers (point-max))))
         (entries (xml-get-children (car xml) 'entry))
         (nentries (length entries))
         (defs (<span style="color: #0000FF;">loop</span> for entry in entries
                     collect (car (xml-get-children entry 'def))))
         (definition (format
                      <span style="color: #008000;">"%s"</span>
                      (concat
                       (format <span style="color: #008000;">"%s has %s definition%s. "</span>
                               keyword
                               nentries
                               (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">or</span> (= 0 nentries)
                                       (&gt; nentries 1))
                                   <span style="color: #008000;">"s"</span>
                                 <span style="color: #008000;">""</span>))
                       (mapconcat
                        'identity
                        (<span style="color: #0000FF;">loop</span> for element in
                              (<span style="color: #0000FF;">loop</span> for def in defs
                                    collect (car (xml-get-children def 'dt)))
                              for i from 1
                              collect (format <span style="color: #008000;">"%s %s"</span> i (car (xml-node-children element))))
                        <span style="color: #008000;">" "</span>)))))
    (message definition)
    (do-applescript
     (format
      <span style="color: #008000;">"say \"%s\""</span> definition))))
</pre>
</div>

<pre class="example">
speak-definition
</pre>

<p>
Let us try this out on a few words: asynchronous  synchronous  flibbity
</p>

<p>
I guess this would be helpful sometimes ;)
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/30/Get-spoken-definitions-from-the-Meriam-dictionary.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Getting Emacs to read to me</title>
      <link>http://jkitchin.github.io/blog/2015/06/29/Getting-Emacs-to-read-to-me</link>
      <pubDate>Mon, 29 Jun 2015 14:56:16 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">DwYJChCDl8rIpuU18s40lLB6IzQ=</guid>
      <description>Getting Emacs to read to me</description>
      <content:encoded><![CDATA[



<p>
I thought it would be interesting to have Emacs read text on the screen. Why? Sometimes I get tired of reading ;) Seriously though, this has applications in accessibility, learning to read, translation, taking a break from looking at the screen, reading emails out loud, fun and games, etc&#x2026; Seems like a worthwhile endeavor!
</p>

<p>
You may want to see this video: <a href="https://www.youtube.com/watch?v=8bgS8yDSkXw">https://www.youtube.com/watch?v=8bgS8yDSkXw</a> to hear how it works.
</p>

<p>
On a Mac, it turns out to be easy to get a voice with a little applescript:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(do-applescript <span style="color: #008000;">"say \"Hello John\" using \"Victoria\""</span>)
</pre>
</div>

<p>
Interesting idea to integrate some feedback into Emacs-lisp functions! at least if you are on a Mac. All we need are some interactive functions that grab text, and pass them to the applescript with an appropriate amount of escaping any quotes and backslashes.
</p>

<p>
Here is a function to speak the word at point, or selected region, or the text passed to the function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">words-voice</span> <span style="color: #008000;">"Vicki"</span>
  <span style="color: #036A07;">"Mac voice to use for speaking."</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">words-speak</span> (<span style="color: #6434A3;">&amp;optional</span> text)
  <span style="color: #036A07;">"Speak word at point or region. Mac only."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">unless</span> text
    (<span style="color: #0000FF;">setq</span> text (<span style="color: #0000FF;">if</span> (use-region-p)
                   (buffer-substring
                    (region-beginning) (region-end))
                 (thing-at-point 'word))))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">escape some special applescript chars</span>
  (<span style="color: #0000FF;">setq</span> text (replace-regexp-in-string <span style="color: #008000;">"\\\\"</span> <span style="color: #008000;">"\\\\\\\\"</span> text))
  (<span style="color: #0000FF;">setq</span> text (replace-regexp-in-string <span style="color: #008000;">"\""</span> <span style="color: #008000;">"\\\\\""</span> text))
  (do-applescript
   (format
    <span style="color: #008000;">"say \"%s\" using \"%s\""</span>
    text
    words-voice)))
</pre>
</div>

<pre class="example">
words-speak
</pre>

<p>
Now we can write:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(words-speak <span style="color: #008000;">"Hello John"</span>)
</pre>
</div>

<p>
One reason I wrote this is to read org-files to me. So, now we write some functions to read words, sentences and paragraphs. These are all syntactic units in Emacs. We write code to enable us to read the next or previous units with the prefix args. Finally,  we bind the commands to some keys and a hydra for fun.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> sentence-end-double-space nil)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">mac-say-word</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Speak word at point. With ARG, go forward ARG words."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">arg can be (4), 4, "-", or -1. we handle these like this.</span>
  (<span style="color: #0000FF;">let</span> ((newarg))
    (<span style="color: #0000FF;">when</span> arg
      (<span style="color: #0000FF;">setq</span> newarg (<span style="color: #0000FF;">cond</span>
                    ((listp arg)
                     (round (log (car arg) 4)))
                    ((<span style="color: #0000FF;">and</span> (stringp arg) (string= <span style="color: #008000;">"-"</span> arg))
                     ((&lt; 0 arg) arg)
                     -1)
                    (t arg)))
      (forward-word newarg))
    (<span style="color: #0000FF;">when</span> (thing-at-point 'word)
      (words-speak (thing-at-point 'word)))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">mac-say-sentence</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Speak sentence at point. With ARG, go forward ARG sentences."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">arg can be (4), 4, "-", or -1. we handle these like this.</span>
  (<span style="color: #0000FF;">let</span> ((newarg))
    (<span style="color: #0000FF;">when</span> arg
      (<span style="color: #0000FF;">setq</span> newarg (<span style="color: #0000FF;">cond</span>
                    ((listp arg)
                     (round (log (car arg) 4)))
                    ((<span style="color: #0000FF;">and</span> (stringp arg) (string= <span style="color: #008000;">"-"</span> arg))
                     ((&lt; 0 arg) arg)
                     -1)
                    (t arg)))
      (forward-sentence newarg)
      (<span style="color: #0000FF;">when</span> (&lt; 0 newarg) (forward-word)))
    (<span style="color: #0000FF;">when</span> (thing-at-point 'sentence)
      (words-speak (thing-at-point 'sentence)))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">mac-say-paragraph</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Speak paragraph at point. With ARG, go forward ARG paragraphs."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">arg can be (4), 4, "-", or -1. we handle these like this.</span>
  (<span style="color: #0000FF;">let</span> ((newarg))
    (<span style="color: #0000FF;">when</span> arg
      (<span style="color: #0000FF;">setq</span> newarg (<span style="color: #0000FF;">cond</span>
                    ((listp arg)
                     (round (log (car arg) 4)))
                    ((<span style="color: #0000FF;">and</span> (stringp arg) (string= <span style="color: #008000;">"-"</span> arg))
                     ((&lt; 0 arg) arg)
                     -1)
                    (t arg)))
      (forward-paragraph newarg)
      (<span style="color: #0000FF;">when</span> (&lt; 0 newarg) (forward-word)))
    (<span style="color: #0000FF;">when</span> (thing-at-point 'paragraph)
      (words-speak (thing-at-point 'paragraph)))))
</pre>
</div>

<pre class="example">
mac-say-paragraph
</pre>

<p>
Now for some key-bindings. I will make a hydra that allows repeating commands, and a keymap for more direct function calls.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defhydra</span> mac-speak (<span style="color: #006FE0;">:color</span> red)
  <span style="color: #008000;">"word speak"</span>
  (<span style="color: #008000;">"w"</span> (<span style="color: #0000FF;">progn</span> (mac-say-word) (forward-word)) <span style="color: #008000;">"Next word"</span>)
  (<span style="color: #008000;">"W"</span> (mac-say-word -1) <span style="color: #008000;">"Previous word"</span>)
  (<span style="color: #008000;">"s"</span> (<span style="color: #0000FF;">progn</span> (mac-say-sentence) (forward-sentence)(forward-word)) <span style="color: #008000;">"Next sentence"</span>)
  (<span style="color: #008000;">"S"</span> (mac-say-sentence -1) <span style="color: #008000;">"Previous sentence"</span>)
  (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">progn</span> (mac-say-paragraph) (forward-paragraph)) <span style="color: #008000;">"Next paragraph"</span>)
  (<span style="color: #008000;">"P"</span> (mac-say-paragraph -1) <span style="color: #008000;">"Previous paragraph"</span>))

(define-prefix-command 'mac-speak-keymap)
(define-key mac-speak-keymap (vector ?w) 'mac-say-word)
(define-key mac-speak-keymap (vector ?s) 'mac-say-sentence)
(define-key mac-speak-keymap (vector ?p) 'mac-say-paragraph)
(define-key mac-speak-keymap (vector ?h) 'mac-speak/body)
(global-set-key (kbd <span style="color: #008000;">"\C-xr"</span>) 'mac-speak-keymap)
</pre>
</div>

<pre class="example">
mac-speak-keymap
</pre>

<p>
Now, I can navigate text and have my Mac read it to me. It isn't quite like hearing a real person read it, but it is not too bad either. When you need a break from reading, this might be a nice tool!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/29/Getting-Emacs-to-read-to-me.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Clickable text for learning environments</title>
      <link>http://jkitchin.github.io/blog/2015/06/26/Clickable-text-for-learning-environments</link>
      <pubDate>Fri, 26 Jun 2015 11:22:17 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">AuTFwtHFhvSKaLfZ4vHeEAsj_zo=</guid>
      <description>Clickable text for learning environments</description>
      <content:encoded><![CDATA[



<p>
One use for clickable text is in educational texts, or technical documents where you want easy access to glossaries for jargon or new words, or other context specific information. Here we consider some approaches to highlight words in an Emacs buffer that are defined in a glossary, to give them tooltips and make them clickable.
</p>

<p>
You may want to see the video of this in action, the blog post does not do it justice: <a href="http://www.youtube.com/watch?v=Ogavyl_QXiU">http://www.youtube.com/watch?v=Ogavyl_QXiU</a> 
</p>

<p>
We assume we have a <a href="#sec-1">1</a> in the current document that has the words we want to highlight as headlines.  Here is a somewhat hacky way to get the list of keywords (hacky because we use cdr to get rid of the Glossary in the list). Our glossary only has two terms: INCAR and KPOINTS.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">save-excursion</span>
    (org-open-link-from-string <span style="color: #008000;">"[[*Glossary]]"</span>)
    (cdr  (org-map-entries (<span style="color: #0000FF;">lambda</span> ()
                             (nth 4 (org-heading-components)))
                           nil 'tree)))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">INCAR</td>
<td class="left">KPOINTS</td>
</tr>
</tbody>
</table>

<p>
We can use that list to make the regexp for button lock with regexp-opt like we did before. We illustrate two ideas here for the highlighted text. One is a dynamic tooltip, which we calculate on the fly and use to display the contents of the glossary heading when you mouse over the word or call local help from the keyboard (C-h .). Second, when you click on the word, you jump to the section in the glossary, and you can readily jump back with C-c &amp; (Thanks org-mode!).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-glossary-words</span> ()
  (button-lock-set-button
   (regexp-opt (<span style="color: #0000FF;">save-excursion</span>
                 (org-open-link-from-string <span style="color: #008000;">"[[*Glossary]]"</span>)
                 (cdr  (org-map-entries
                        (<span style="color: #0000FF;">lambda</span> ()
                          (nth 4 (org-heading-components)))
                        nil 'tree))))
   (<span style="color: #0000FF;">lambda</span> ()
     <span style="color: #036A07;">"Jump to definition."</span>
     (<span style="color: #0000FF;">interactive</span>)
     (<span style="color: #0000FF;">let</span> ((keyword (get-surrounding-text-with-property 'glossary)))
       (org-open-link-from-string (format <span style="color: #008000;">"[[*%s]]"</span> keyword))))
   <span style="color: #006FE0;">:additional-property</span> 'glossary
   <span style="color: #006FE0;">:face</span> '((<span style="color: #006FE0;">:background</span> <span style="color: #008000;">"gray80"</span>) (<span style="color: #006FE0;">:underline</span> t))
   <span style="color: #006FE0;">:help-echo</span> (<span style="color: #0000FF;">lambda</span> (window object position)
                (<span style="color: #0000FF;">save-excursion</span>
                  (goto-char position)
                  (<span style="color: #0000FF;">save-restriction</span>
                    (org-open-link-from-string
                     (format <span style="color: #008000;">"[[*%s]]"</span> (get-surrounding-text-with-property 'glossary)))
                    (org-narrow-to-subtree)
                    (buffer-string))))))

(highlight-glossary-words)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">\(?:INCAR\</td>
<td class="left">KPOINTS\)</td>
<td class="left">(0 (quote (face ((:background gray80) (:underline t)) keymap (keymap (mouse-1 lambda nil Jump to definition. (interactive) (let ((keyword (get-surrounding-text-with-property (quote glossary)))) (org-open-link-from-string (format <i>*%s</i> keyword))))) button-lock t glossary t mouse-face button-lock-mouse-face help-echo (lambda (window object position) (save-excursion (goto-char position) (save-restriction (org-open-link-from-string (format <i>*%s</i> (get-surrounding-text-with-property (quote glossary)))) (org-narrow-to-subtree) (buffer-string)))) rear-nonsticky t)) append)</td>
</tr>
</tbody>
</table>

<p>
That is pretty cool. You might want something a little smarter for the tooltip, e.g. just the first line of the headline, but this works fine for this little example. I noticed that flyspell seems to get the tooltip in KPOINTS, sometimes, when it thinks it is misspelled.
</p>

<p>
It might take some local variables to make this work only in this just a file, rather than in every file. Alternatively, you could define a function that opens the file and then applies this.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Glossary</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> INCAR</h3>
<div class="outline-text-3" id="text-1-1">
<p>
The file containing all the input parameters for VASP.
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> KPOINTS</h3>
<div class="outline-text-3" id="text-1-2">
<p>
The file containing the definitions of the kpoint grid.
</p>

<p>
See <a href="http://cms.mpi.univie.ac.at/vasp/vasp/KPOINTS_file.html">http://cms.mpi.univie.ac.at/vasp/vasp/KPOINTS_file.html</a> 
</p>
</div>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/26/Clickable-text-for-learning-environments.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Integrating swish-e and Emacs</title>
      <link>http://jkitchin.github.io/blog/2015/06/25/Integrating-swish-e-and-Emacs</link>
      <pubDate>Thu, 25 Jun 2015 10:37:05 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">6niCJ0luIGwpPDINzVyYVCw0RB8=</guid>
      <description>Integrating swish-e and Emacs</description>
      <content:encoded><![CDATA[



<p>
<a href="http://swish-e.org">swish-e</a> is a software package that indexes files on your computer, and then allows you to search the index. Spotlight on my Mac is not working too well (sometimes not at all), and I want some more flexibility so today we try getting swish-e up and running and integrated with Emacs. I don't know that swish-e is the best tool for this available, but it has been on my radar a <i>long</i> time (probably since 2003 from this <a href="http://joshr.com/src/docs/HowToIndexAnything.pdf">article</a> ), and it was easy to setup and use.
</p>

<p>
I use homebrew, so installation was this simple:
</p>

<div class="org-src-container">

<pre class="src src-sh">brew install swish-e
</pre>
</div>

<p>
To test things out, I will only index org-files. I have these all over the place, and they are not all in my org-mode agenda. So, finding them quickly would be awesome.
</p>

<div class="org-src-container">

<pre class="src src-text"># Example configuration file

# Tell Swish-e what to directories to index
IndexDir /Users/jkitchin/Dropbox
IndexDir "/Users/jkitchin/Box Sync"
IndexDir /Users/jkitchin/blogofile-jkitchin.github.com

# where to save the index
IndexFile /Users/jkitchin/.swish-e/index.swish-e

# What to index
IndexOnly .org

# Tell Swish-e that .txt files are to use the text parser.
IndexContents TXT* .org

# Otherwise, use the HTML parser
DefaultContents HTML*

# Ask libxml2 to report any parsing errors and warnings or
# any UTF-8 to 8859-1 conversion errors
ParserWarnLevel 9
</pre>
</div>

<p>
Now, we create our index.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -c ~/.swish-e/swish.conf
</pre>
</div>

<pre class="example">
Indexing Data Source: "File-System"
Indexing "/Users/jkitchin/Dropbox"
Indexing "/Users/jkitchin/Box Sync"
Indexing "/Users/jkitchin/blogofile-jkitchin.github.com"
Removing very common words...
no words removed.
Writing main index...
Sorting words ...
Sorting 130,109 words alphabetically
Writing header ...
Writing index entries ...
  Writing word text: ...  Writing word text:  10%  Writing word text:  20%  Writing word text:  30%  Writing word text:  40%  Writing word text:  50%  Writing word text:  60%  Writing word text:  70%  Writing word text:  80%  Writing word text:  90%  Writing word text: 100%  Writing word text: Complete
  Writing word hash: ...  Writing word hash:  10%  Writing word hash:  20%  Writing word hash:  30%  Writing word hash:  40%  Writing word hash:  50%  Writing word hash:  60%  Writing word hash:  70%  Writing word hash:  80%  Writing word hash:  90%  Writing word hash: 100%  Writing word hash: Complete
  Writing word data: ...  Writing word data:   9%  Writing word data:  19%  Writing word data:  29%  Writing word data:  39%  Writing word data:  49%  Writing word data:  59%  Writing word data:  69%  Writing word data:  79%  Writing word data:  89%  Writing word data:  99%  Writing word data: Complete
130,109 unique words indexed.
Sorting property: swishdocpath                            Sorting property: swishtitle                              Sorting property: swishdocsize                            Sorting property: swishlastmodified                       4 properties sorted.
3,208 files indexed.  54,104,974 total bytes.  8,038,594 total words.
Elapsed time: 00:00:16 CPU time: 00:00:13
Indexing done!
</pre>


<p>
Now an example search. I have been looking into the Energy frontier research centers, and I want to find my notes on it. Here is a little query. I use a special output format to keep things simple for the parsing later, just the rank and path, separated by a tab.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -f ~/.swish-e/index.swish-e -x <span style="color: #008000;">'%r\t%p\n'</span> -w efrc
</pre>
</div>
<pre class="example">
# SWISH format: 2.4.7
# Search words: efrc
# Removed stopwords:
# Number of hits: 2
# Search time: 0.000 seconds
# Run time: 0.008 seconds
1000	/Users/jkitchin/Dropbox/org-mode/journal.org
471	/Users/jkitchin/Dropbox/org-mode/proposals.org
.
</pre>

<p>
Now, for the integration with Emacs. We just get that output in a string, split it, and get the parts we want.  I think I will use helm to provide a selection buffer to these results. We need a list of cons cells (string . candidate). Then we write an interactive helm function. We provide two sources. One for the initial query, and another to start a new search, in case you don't find what you want.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-swish-e-candidates</span> (query)
  <span style="color: #036A07;">"Generate a list of cons cells (swish-e result . path)."</span>
  (<span style="color: #0000FF;">let*</span> ((result (shell-command-to-string
                  (format <span style="color: #008000;">"swish-e -f ~/.swish-e/index.swish-e -x \"%%r\t%%p\n\" -w %s"</span>
                          (shell-quote-argument query))))
         (lines (s-split <span style="color: #008000;">"\n"</span> result t))
         (candidates '()))
    (<span style="color: #0000FF;">loop</span> for line in lines
          unless (<span style="color: #0000FF;">or</span>  (s-starts-with? <span style="color: #008000;">"#"</span> line)
                      (s-starts-with? <span style="color: #008000;">"."</span> line))
          collect (cons line (cdr (s-split <span style="color: #008000;">"\t"</span> line))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-swish-e</span> (query)
  <span style="color: #036A07;">"Run a swish-e query and provide helm selection buffer of the results."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"sQuery: "</span>)
  (helm <span style="color: #006FE0;">:sources</span> `(((name . ,(format <span style="color: #008000;">"swish-e: %s"</span> query))
                    (candidates . ,(helm-swish-e-candidates query))
                    (action . ((<span style="color: #008000;">"open"</span> . (<span style="color: #0000FF;">lambda</span> (f)
                                           (find-file (car f)))))))
                   ((name . <span style="color: #008000;">"New search"</span>)
                    (dummy)
                    (action . ((<span style="color: #008000;">"search"</span> . (<span style="color: #0000FF;">lambda</span> (f)
                                             (helm-swish-e helm-pattern)))))))))
</pre>
</div>

<pre class="example">
helm-swish-e
</pre>

<p>
Now I can run M-x helm-swish-e and enter "efrc AND computing infrastructure" to find org files containing those words, then press enter to find the file. Nice and easy. I have not tested the query syntax very fully, but so far it is working fine!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/25/Integrating-swish-e-and-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Conditional hydra menus</title>
      <link>http://jkitchin.github.io/blog/2015/06/24/Conditional-hydra-menus</link>
      <pubDate>Wed, 24 Jun 2015 07:31:41 EDT</pubDate>
      <category><![CDATA[hydra]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">ZZdRz0Eq33gTqhYphCP78l-a35c=</guid>
      <description>Conditional hydra menus</description>
      <content:encoded><![CDATA[



<p>
Usually the <a href="https://github.com/abo-abo/hydra">hydra</a> menu is hard coded in the defhydra macro. Sometimes, you would like conditional options, that is, depending on some condition we get different options <i>when we run the hydra</i> and not when it was defined. This is an open <a href="https://github.com/abo-abo/hydra/issues/86">issue</a> in hydra. Here we explore a way to achieve that. The idea is to construct the code for the hydra, then eval it, and run the hydra. In this example we make the conditional menu depend on whether we are on an even or odd numbered line. I use the `' syntax for defining the list of code. ` is a variation of ' (quote) that enables you to use the , operator to evaluate that element while in data mode. So, here is our first idea:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">my-hydra-1</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (eval
   `(<span style="color: #0000FF;">defhydra</span> my-hydra-1 (<span style="color: #006FE0;">:color</span> blue) <span style="color: #008000;">"My hydra"</span>
      ,(<span style="color: #0000FF;">if</span> (evenp (line-number-at-pos))
           '(<span style="color: #008000;">"e"</span> (message-box <span style="color: #008000;">"Even line"</span>) <span style="color: #008000;">"Even"</span>)
         '(<span style="color: #008000;">"o"</span> (message-box <span style="color: #008000;">"Odd line"</span>) <span style="color: #008000;">"Odd"</span>))
      ,(<span style="color: #0000FF;">when</span> t '(<span style="color: #008000;">"a"</span> (message-box <span style="color: #008000;">"always true"</span>) <span style="color: #008000;">"always"</span>))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">This does not work. you must return a legitimate hydra menu item</span>
      <span style="color: #8D8D84;">;;      </span><span style="color: #8D8D84; font-style: italic;">,(when nil '("n" (message-box "never") "never"))</span>
      ))
  (my-hydra-1/body))

(my-hydra-1)
(my-hydra-1)
</pre>
</div>

<pre class="example">
my-hydra
</pre>

<p>
As long as it is not expensive to compute the conditionals, this seems like an easy enough way to get conditional options in a hydra. One limitation of the previous approach is our menu conditionals must return a hydra menu, and not nil. Here is an alternative approach to writing the function that solves the issue of the nil return in the last function. Here we build up the code list using append. It might seem like a macro should be used here, but I have not figured out how to get the macro to run the conditionals at the run-time. Note, we cannot use funcall on the defhydra because that is a macro.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">my-hydra-2</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((conditionals '((<span style="color: #0000FF;">if</span> (evenp (line-number-at-pos))
                            '(<span style="color: #008000;">"e"</span> (message-box <span style="color: #008000;">"Even second"</span>) <span style="color: #008000;">"Even"</span>)
                          '(<span style="color: #008000;">"o"</span> (message-box <span style="color: #008000;">"Odd second"</span>) <span style="color: #008000;">"Odd"</span>))
                        (<span style="color: #0000FF;">when</span> t '(<span style="color: #008000;">"a"</span> (message-box <span style="color: #008000;">"always true"</span>) <span style="color: #008000;">"always"</span>))
                        (<span style="color: #0000FF;">when</span> nil '(<span style="color: #008000;">"n"</span> (message-box <span style="color: #008000;">"never"</span>) <span style="color: #008000;">"never"</span>)))))
    (eval
     (append
      '(defhydra my-hydra-2 (<span style="color: #006FE0;">:color</span> blue) <span style="color: #008000;">"My hydra"</span>)
      (<span style="color: #0000FF;">loop</span> for cond in conditionals
            with result = (eval cond)
            if (eval cond)
            collect (eval cond))))
    (my-hydra-2/body)))

(my-hydra-2)
(my-hydra-2)
</pre>
</div>

<p>
That works too. Let us try another type of syntax where the conditional statements have a cons cell with a conditional statement, and a hydra menu option for when the statement is true. This is functionally similar to our first method, but has some advantages in brevity and less quoting. We add a conditional hint here too (at some expense of additional quoting).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">my-hydra-3</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((conditionals
         `(((evenp (line-number-at-pos)) . (<span style="color: #008000;">"e"</span> (message-box <span style="color: #008000;">"Even second"</span>) ,(format <span style="color: #008000;">"Even: %s"</span> (line-number-at-pos))))
           ((oddp (line-number-at-pos)) . (<span style="color: #008000;">"o"</span> (message-box <span style="color: #008000;">"Odd second"</span>) ,(format <span style="color: #008000;">"Odd: %s"</span> (line-number-at-pos))))
           (t . (<span style="color: #008000;">"a"</span> (message-box <span style="color: #008000;">"always true"</span>) <span style="color: #008000;">"always"</span>))
           (nil . (<span style="color: #008000;">"n"</span> (message-box <span style="color: #008000;">"never"</span>) <span style="color: #008000;">"never"</span>)))))
    (eval
     (append
      '(defhydra my-hydra-3 (<span style="color: #006FE0;">:color</span> blue) <span style="color: #008000;">"My hydra"</span>)
      (<span style="color: #0000FF;">loop</span> for cond in conditionals
            if (eval (car  cond))
            collect (cdr cond))))
    (my-hydra-3/body)))

(my-hydra-3)
(my-hydra-3)
</pre>
</div>

<p>
I cannot figure out how to abstract this much further. There is a little redundancy in names, e.g. in the defhydra and at the end, but it is not too bad, which would usually be handled by a macro. I tried some defmacros to try this, but I could not figure out how to get the conditionals to expand at the right times, which is at run time, and not at macro expansion time. I need a macro that generates a function that has the call to defhydra in it! Maybe next year ;)
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/24/Conditional-hydra-menus.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Clickable email addresses in emacs</title>
      <link>http://jkitchin.github.io/blog/2015/06/21/Clickable-email-addresses-in-emacs</link>
      <pubDate>Sun, 21 Jun 2015 16:42:40 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[email]]></category>
      <guid isPermaLink="false">yQhR3CKLJrKAF-nSLoMLoxU0VgA=</guid>
      <description>Clickable email addresses in emacs</description>
      <content:encoded><![CDATA[



<p>
There are clickable <a href="mailto:jkitchin@andrew.cmu.edu">mailto:jkitchin@andrew.cmu.edu</a> links in org-mode, but standalone email addresses like jkitchin@cmu.edu are just ordinary text. Here, I want to explore using clickable text instead. I will use the button-lock package for this. I borrowed an email regexp from <a href="http://www.emacswiki.org/emacs/RegularExpression">EmacsWiki: Regular Expression</a> for this. The idea is to define a regular expression for an email address, and use it to make the emails clickable.
</p>

<p>
I am still not sure what the canonical way to get the value of the text that was highlighted. Here we use the :additional-property feature to set a property to t, and then use that property to get the characters that have a non-nil "email-address" property. It seems clunky, but it works. The main action is to compose an email in mu4e (my preferred email program in emacs). You could also put a call to helm here, or to a hydra for other options.
</p>

<p>
I make the email addresses stand out a little by giving them a gray background, and a tooltip so you can see why they are highlighted. I also bind RET so I don't have to use the mouse. Don't forget you can type C-h . to see the local help instead of mousing over it! Finally, we add a text-mode hook so this will get loaded when we open a text file (or one with a mode derived from text-mode like org-mode).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-email-addresses</span> ()
  <span style="color: #036A07;">"Add button to email address. Clicking or RET will open a compose email window."</span>
  (button-lock-set-button
   <span style="color: #008000;">"\\w+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">\\.\\w+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">?@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">\\w</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\\.</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">+"</span>
   (<span style="color: #0000FF;">lambda</span> ()
     (<span style="color: #0000FF;">interactive</span>)
     (<span style="color: #0000FF;">let</span> ((start) (end) (email-address))
       (<span style="color: #0000FF;">while</span> (get-text-property (point) 'email-address)
         (backward-char))
       (forward-char)
       (<span style="color: #0000FF;">setq</span> start (point))
       (<span style="color: #0000FF;">while</span> (get-text-property (point) 'email-address)
         (forward-char))
       (<span style="color: #0000FF;">setq</span> end (point))
       (<span style="color: #0000FF;">setq</span> email-address (buffer-substring start end))
       (mu4e~compose-mail email-address)))
     <span style="color: #006FE0;">:face</span> '((<span style="color: #006FE0;">:background</span> <span style="color: #008000;">"gray80"</span>) (<span style="color: #006FE0;">:underline</span> t))
     <span style="color: #006FE0;">:help-echo</span> <span style="color: #008000;">"click to send mu4e email"</span>
     <span style="color: #006FE0;">:keyboard-binding</span> (kbd <span style="color: #008000;">"RET"</span>)
     <span style="color: #006FE0;">:additional-property</span> 'email-address))

(add-hook 'text-mode-hook 'highlight-email-addresses)
</pre>
</div>

<p>
That doesn't look too bad. Now, anytime I open an org-mode file with an email address in it, the address is highlighted in light gray, and underlined. I can click on it or put the cursor on it and press return and I get a compose email window open, with the email address pre-filled in! I am sure this will have some other applications.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/21/Clickable-email-addresses-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Python data structures to lisp</title>
      <link>http://jkitchin.github.io/blog/2015/05/16/Python-data-structures-to-lisp</link>
      <pubDate>Sat, 16 May 2015 10:47:59 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[lisp]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">W0S7IVT_nQDetPEbwbEN0vag2-U=</guid>
      <description>Python data structures to lisp</description>
      <content:encoded><![CDATA[


<p>
I have an idea in mind that would use the output of python scripts in lisp functions. Xah Lee posted an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">idea for writing emacs commands in scripting languages</a> . In this post I want to explore an extension of the idea, where a Python script will return output that can be read in Lisp, e.g. we can convert a Python list to a lisp list, or a dictionary to an a-list or p-list. I can already see that simple data structures will be "simple", and arbitrary data structures will offer a lot of challenges, e.g. nested lists or dictionaries&#x2026;
</p>

<p>
If I could add some custom functions to the basic builtin types in Python, then I could use another approach to format python objects as lisp data types. This isn't recommended by Pythonistas, but I guess they don't want to use lisp as much as I do ;) I found this approach to modifying builtins:
</p>

<p>
<a href="http://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a">http://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a</a> 
</p>

<p>
We use that almost verbatim here to get what I want. This is a super low level way to add functions to the builtins. I add some simple formatting to floats, ints and strings. I add a more complex recursive formatting function to lists, tuples and dictionaries. A dictionary can be represented as an alist or plist. Both examples are shown, but I leave the alist version commented out. Finally, we add a lispify function to numpy arrays.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> ctypes <span style="color: #0000FF;">as</span> c

<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">PyObject_HEAD</span>(c.Structure):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">_fields_</span> = [(<span style="color: #008000;">'HEAD'</span>, c.c_ubyte * (<span style="color: #006FE0;">object</span>.__basicsize__ -
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     c.sizeof(c.c_void_p))),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   (<span style="color: #008000;">'ob_type'</span>, c.c_void_p)]

<span style="color: #BA36A5;">_get_dict</span> = c.pythonapi._PyObject_GetDictPtr
<span style="color: #BA36A5;">_get_dict.restype</span> = c.POINTER(c.py_object)
<span style="color: #BA36A5;">_get_dict.argtypes</span> = [c.py_object]

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_dict</span>(<span style="color: #006FE0;">object</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> _get_dict(<span style="color: #006FE0;">object</span>).contents.value

get_dict(<span style="color: #006FE0;">str</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> s:<span style="color: #008000;">'"{}"'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(s))
get_dict(<span style="color: #006FE0;">float</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> f:<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(f))
get_dict(<span style="color: #006FE0;">int</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> f:<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(f))

<span style="color: #0000FF;">import</span> collections
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">lispify</span>(L):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Convert a Python object L to a lisp representation."</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">str</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">float</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">int</span>)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> L.lisp()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> (<span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">list</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">tuple</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, np.ndarray)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> element <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [element.lisp()]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'('</span> + <span style="color: #008000;">' '</span>.join(s) + <span style="color: #008000;">')'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">dict</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> key <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">alist format</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">s += ["({0} . {1})".format(key, L[key].lisp())]</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plist</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [<span style="color: #008000;">":{0} {1}"</span>.<span style="color: #006FE0;">format</span>(key, L[key].lisp())]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'('</span> + <span style="color: #008000;">' '</span>.join(s) + <span style="color: #008000;">')'</span>

get_dict(<span style="color: #006FE0;">list</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(<span style="color: #006FE0;">tuple</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(<span style="color: #006FE0;">dict</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(np.ndarray)[<span style="color: #008000;">'lisp'</span>] = lispify
</pre>
</div>

<p>
Let us test these out.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> pylisp <span style="color: #0000FF;">import</span> *
<span style="color: #BA36A5;">a</span> = 4.5
<span style="color: #0000FF;">print</span> <span style="color: #006FE0;">int</span>(a).lisp()
<span style="color: #0000FF;">print</span> a.lisp()
<span style="color: #0000FF;">print</span> <span style="color: #008000;">"test"</span>.lisp()

<span style="color: #0000FF;">print</span> [1, 2, 3].lisp()
<span style="color: #0000FF;">print</span> (1, 2, 3).lisp()

<span style="color: #0000FF;">print</span> [[1, 3], (5, 6)].lisp()

<span style="color: #0000FF;">print</span> {<span style="color: #008000;">"a"</span>: 5}.lisp()
<span style="color: #0000FF;">print</span> [[1, 3], (5, 6), {<span style="color: #008000;">"a"</span>: 5, <span style="color: #008000;">"b"</span>: <span style="color: #008000;">"test"</span>}].lisp()


<span style="color: #BA36A5;">A</span> = np.array([1, 3, 4])
<span style="color: #0000FF;">print</span> A.lisp()
<span style="color: #0000FF;">print</span> ({<span style="color: #008000;">"tree"</span>: [5, 6]}, [<span style="color: #008000;">"a"</span>, 4, <span style="color: #008000;">"list"</span>], 5, 2.0 / 3.0).lisp()
</pre>
</div>

<pre class="example">
4
4.5
"test"
(1 2 3)
(1 2 3)
((1 3) (5 6))
(:a 5)
((1 3) (5 6) (:a 5 :b "test"))
(1 3 4)
((:tree (5 6)) ("a" 4 "list") 5 0.666666666667)
</pre>


<p>
Now, is that better than a single lisp function with a lot of conditionals to handle each type? I am not sure. This seems to work pretty well.
</p>


<p>
Here is how I imagine using this idea. We would have some emacs-lisp variables and use them to dynamically generate a python script. We run the python script, capturing the output, and read it back in as a lisp data structure. Here is a simple kind of example that generates a dictionary.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((elisp-var 6)
       (result)
      (script (format <span style="color: #008000;">"</span>
<span style="color: #008000;">from pylisp import *</span>
<span style="color: #008000;">print {x: [2*y for y in range(x)] for x in range(1, %s)}.lisp()</span>
<span style="color: #008000;">"</span> elisp-var)))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">start a python process</span>
  (run-python)
  (<span style="color: #0000FF;">setq</span> result (read (python-shell-send-string-no-output
   script)))
  (plist-get result <span style="color: #006FE0;">:5</span>))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(0 2 4 6 8)
</pre>
</div>

<p>
That seems to work pretty well. One alternative idea to this is <a href="https://github.com/pinard/Pymacs">Pymacs</a> , which I have written about <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs/">before</a> . This project isn't currently under active development, and I ran into some difficulties with it before.
</p>

<p>
Here we can solve the problem I previously posed and get the result back as an elisp float, and then reuse the result
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((myvar 3)
       (script (format <span style="color: #008000;">"from pylisp import *</span>
<span style="color: #008000;">from scipy.optimize import fsolve</span>
<span style="color: #008000;">def objective(x):</span>
<span style="color: #008000;">    return x - 5</span>

<span style="color: #008000;">ans, = fsolve(objective, %s)</span>
<span style="color: #008000;">print ans.lisp()"</span> myvar)))
  (run-python)
  (<span style="color: #0000FF;">setq</span> result (read (python-shell-send-string-no-output
                       script)))
  (- 5 result))
</pre>
</div>

<pre class="example">
0.0
</pre>

<p>
Bottom line: we can write python code in lisp functions that are dynamically updated, execute them, and get lisp data structures back for simple data types. I think that could be useful in some applications, where it is easier to do parsing/analysis in Python, but you want to do something else that is easier in Lisp.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/16/Python-data-structures-to-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Clickable links for Twitter handles in Emacs</title>
      <link>http://jkitchin.github.io/blog/2015/03/18/Clickable-links-for-Twitter-handles-in-Emacs</link>
      <pubDate>Wed, 18 Mar 2015 12:20:18 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">z2q7vHNNF9m8ByP8zSvxGL7gFKA=</guid>
      <description>Clickable links for Twitter handles in Emacs</description>
      <content:encoded><![CDATA[



<p>
Org-mode has clickable links, and they are awesome. You can make your own links, for example here is a link for twitter handles that opens a browser to the handle, and exports as an html link.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type <span style="color: #008000;">"twitter"</span>
 (<span style="color: #0000FF;">lambda</span> (handle)
   (browse-url (concat <span style="color: #008000;">"http://twitter.com/"</span> handle)))
 (<span style="color: #0000FF;">lambda</span> (path desc backend)
   (format <span style="color: #008000;">"&lt;a href=\"http://twitter.com/%s\"&gt;%s&lt;/a&gt;"</span> path path)))
</pre>
</div>

<p>
Check it out here: <a href="http://twitter.com/johnkitchin">johnkitchin</a>.
</p>

<p>
There is another alternative to make clickable text, and that is the button-lock package. You define a regular expression for the text you want to be clickable, and a function to run when it is clicked. Here is an example.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">button-lock</span>)
(global-button-lock-mode)

(button-lock-set-button
 <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>
 (<span style="color: #0000FF;">lambda</span> ()
   (interactive)
   (re-search-backward <span style="color: #008000;">"@"</span>)
   (re-search-forward  <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[a-zA-Z0-9_]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
   (<span style="color: #0000FF;">let*</span> ((handle (match-string-no-properties 1)))
     (browse-url (concat <span style="color: #008000;">"http://twitter.com/"</span> handle))))
 <span style="color: #006FE0;">:face</span> (list 'org-link))
</pre>
</div>

<p>
Check it out: @johnkitchin. Of course, you can make your clicking function more sophisticated, e.g. to give you a <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/02/22/org-mode-links-meet-hydra/">menu of options</a> , e.g. to send a tweet to someone, or open the web page, or look them up in your org-contacts. The differences between this and an org-mode link are that this works in any mode, and it has no export in org-mode, so it will go as plain text. Since this is just a feature for Emacs though, that should be fine.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/18/Clickable-links-for-Twitter-handles-in-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Update on org-ref - it is now all emacs-lisp</title>
      <link>http://jkitchin.github.io/blog/2015/03/16/Update-on-org-ref-it-is-now-all-emacs-lisp</link>
      <pubDate>Mon, 16 Mar 2015 08:51:50 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[orgref]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">lxDcgY-unx5zZatEH91XGswGRFQ=</guid>
      <description>Update on org-ref - it is now all emacs-lisp</description>
      <content:encoded><![CDATA[



<p>
The <a href="https://github.com/jkitchin/org-ref">org-ref</a> code is finally all in emacs-lisp! This should make it much easier to install, and is another step closer to getting org-ref into MELPA. Previously, I had written the most significant code in org-mode source blocks that were intended to be tangled out. I found this was not really portable, because what gets tangled depends on your org-mode setup. I had to specifically set example blocks to not tangle, or org-ref would not work for other people, and if I forgot to set a block to tangle, it also would not work for others. That should not happen again now, since there is no more tangling.
</p>


<p>
There are some relatively new features in org-ref:
</p>
<ol class="org-ol">
<li>New colored org-ref links to differentiate them from other
org-links. Citations are greenish, refs and labels are maroonish.
</li>
<li>Context messages about links. With your cursor on a cite, ref or label link
you will get a context message, e.g. a formatted citation, some context about
the label a ref refers to, or a count of the labels in the mini-buffer.
</li>
<li>There is now an org-ref menu in the Org menu.
</li>
<li>There is a new org-ref-help function that opens an org-file of org-ref
documentation.
</li>
<li>Pretty thorough integration of helm throughout org-ref, and some integration
of hydra.
</li>
<li>A few utility libraries: doi-utils, isbn, wos, pubmed, arxiv, jmax-bibtex, sci-id,
x2bib. Not all these are new, but if you didn't know about them, check them out.
</li>
<li>Cask integration. This mostly provides access to testing and dependencies
right now. org-ref is also now tested continuously at
<a href="https://travis-ci.org/jkitchin/org-ref">https://travis-ci.org/jkitchin/org-ref</a> .
</li>
</ol>

<p>
org-ref is basically feature complete I think (which is to say that once again, I do not have any big ideas for new features ;). There are some places where it could be refactored a little, e.g. there are some bibtex only functions in org-ref.el that really should go into jmax-bibtex.el (which also could be renamed). This is a very low priority though, because things are working fine as far as I can tell.
</p>

<p>
What does it need before going into MELPA? Probably some tests would be a good idea. On Travis, all that is really tested is that it loads with no errors. I would like to see some stability on my end, e.g. at least a week where no commits get made, and no errors are reported. And finally, I would like to make sure I have some time to handle issues that come up when a broader audience is trying it out.
</p>

<p>
My target date to get this in MELPA is June 1, 2015. Try out the new org-ref, and let me know how it goes!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/16/Update-on-org-ref---it-is-now-all-emacs-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
