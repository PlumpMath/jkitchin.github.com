<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Wed, 26 Nov 2014 15:55:17 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Machine-gradable quizzes in emacs+org-modex</title>
      <link>http://jkitchin.github.io/blog/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex</link>
      <pubDate>Sun, 23 Nov 2014 16:49:52 EST</pubDate>
      <category><![CDATA[org]]></category>
      <category><![CDATA[education]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">5xUSRYZKuVN9t_z_ZDnRsVaBgsM=</guid>
      <description>Machine-gradable quizzes in emacs+org-modex</description>
      <content:encoded><![CDATA[



<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/01/01/Interactive-quizzes-with-feedback-in-org-mode/">post</a> , we considered interactive quizzes in emacs and org-mode. Here we consider a variation of that idea with the aim of creating a machine-gradable quiz, i.e. a modern version of a scantron.
</p>

<p>
The idea is simple, we will let each question be represented by an org headline, and the choices will be clickable links that store the answer as a property in the headline. Each headline will have a unique id. The grading key will contain these ids and the correct answer, and a function will determine if the right answer was selected for each question.
</p>

<p>
Here is a simple link that will store the value of the link as a property. Note that the path must be at least two characters long to be recognized as a link, unless you wrap the link in double brackets. We will have the link insert a comment to indicate to the user what they chose. We do that because the PROPERTIES drawer is usually hidden, and it is not obvious it was changed.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"mc"</span> 
 (<span style="color: #8b0000;">lambda</span> (link)
   (<span style="color: #8b0000;">save-restriction</span>
     (org-narrow-to-subtree)
     (goto-char (point-max))
     (insert (concat
              (<span style="color: #8b0000;">unless</span> (bolp) <span style="color: #228b22;">"\n"</span>)
              (format <span style="color: #228b22;">"# you chose %s"</span> link))))
       
   (org-entry-put (point) <span style="color: #228b22;">"ANSWER"</span> link)))
</pre>
</div>

<p>
Next, we add a subheading with some questions to test the link.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Some questions</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><a id="ID-19C7BA30-A761-4C94-9F3B-E6010E263949" name="ID-19C7BA30-A761-4C94-9F3B-E6010E263949"></a><span class="section-number-3">1.1</span> question 1</h3>
<div class="outline-text-3" id="text-1-1">
<p>
What is 2 + 2?
</p>

<p>
<a href="a">a</a> 1
</p>

<p>
<a href="b">b</a> 2
</p>

<p>
<a href="c">c</a> 4
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><a id="ID-38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9" name="ID-38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"></a><span class="section-number-3">1.2</span> question 2</h3>
<div class="outline-text-3" id="text-1-2">
<p>
What is 2 - 2?
</p>

<p>
<a href="a">a</a> 0
</p>

<p>
<a href="b">b</a> 2
</p>

<p>
<a href="c">c</a> 4
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Grading</h2>
<div class="outline-text-2" id="text-2">
<p>
We will store an alist of id and answer for each problem. To grade, we simple map over the alist, go to the section with the id, and compare the answers. When the answer is correct, we save a point, and when not, no point. We can use the org-mode machinery to jump to the problems and get the stored answer. We put some feedback at the end of the file to see what was right, and what was wrong.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((key '((<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>)
              (<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>)))
       (MAX (length key))
       (points 0)
       (answer))
  
  (<span style="color: #8b0000;">dolist</span> (tup key)
    (<span style="color: #8b0000;">save-excursion</span>
      (org-open-link-from-string
       (format <span style="color: #228b22;">"id:%s"</span> (car tup)))
      (setq answer (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>))
      (<span style="color: #8b0000;">if</span> (string= answer (cdr tup))
          (<span style="color: #8b0000;">progn</span>
            (setq points (+ 1 points))
            (goto-char (point-max))
            (insert (format <span style="color: #228b22;">"# id:%s: %s correct\n"</span> (car tup) answer)))
        (goto-char (point-max))
        (insert (format <span style="color: #228b22;">"# id:%s: %s wrong (%s is correct)\n"</span>
                        (car tup)
                        answer
                        (cdr tup))))))
  (goto-char (point-max))
  (insert (format
           <span style="color: #228b22;">"#+GRADE: %s"</span> (/ (float points) (float MAX)))))
</pre>
</div>

<p>
That works pretty well. I need to think about how to codify the key, since this would usually be stored in some file. We would also need to wrap the code block in a function that we could call easily. The org-id key is easy, but not very readable. It would make it easy to keep a database of these problems though. 
</p>
<p>
Just for completeness, I want to save the key to a file, and use it. We simply write the alist in a file. Here are the contents, which are tangled to key.el. One alternative might be to have a solution copy of the quiz which has the answers in it, and we read the answers from the file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>)
 (<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>))
</pre>
</div>

<p>
Now, we read it in like this. The rest of the code is basically the same.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((key (<span style="color: #8b0000;">with-temp-buffer</span> 
              (insert-file-contents <span style="color: #228b22;">"key.el"</span>)
              (read (current-buffer))))
       (MAX (length key))
       (points 0)
       (answer))
  
  (<span style="color: #8b0000;">dolist</span> (tup key)
    (<span style="color: #8b0000;">save-excursion</span>
      (org-open-link-from-string
       (format <span style="color: #228b22;">"id:%s"</span> (car tup)))
      (setq answer (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>))
      (<span style="color: #8b0000;">if</span> (string= answer (cdr tup))
          (<span style="color: #8b0000;">progn</span>
            (setq points (+ 1 points))
            (goto-char (point-max))
            (insert (format <span style="color: #228b22;">"# id:%s: %s correct\n"</span> (car tup) answer)))
        (goto-char (point-max))
        (insert (format <span style="color: #228b22;">"# id:%s: %s wrong (%s is correct)\n"</span>
                        (car tup)
                        answer
                        (cdr tup))))))
  (goto-char (point-max))
  (insert (format
           <span style="color: #228b22;">"#+GRADE: %s"</span> (/ (float points) (float MAX)))))
</pre>
</div>

<p>
It is probably much easier to have a solution version of the quiz, and generate the key from it. For example, we can collect the ID and ANSWER from the problems in this file like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((key '()))
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let</span> ((id) (ans))
       (<span style="color: #8b0000;">when</span> (and
              (setq id (org-entry-get (point) <span style="color: #228b22;">"ID"</span>))
              (setq ans (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>)))
         (add-to-list 'key (cons id ans))))))
key)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>)
 (<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>))
</pre>
</div>

<p>
So, if we had a master solution file, we could read the key from there. That is the way to do this.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Accessing web of science entry, citing and related articles from a doi in emacs</title>
      <link>http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</link>
      <pubDate>Tue, 04 Nov 2014 21:18:10 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[org-ref]]></category>
      <guid isPermaLink="false">4Q13snCzg0aAr06d3H0Sw7LWsd8=</guid>
      <description>Accessing web of science entry, citing and related articles from a doi in emacs</description>
      <content:encoded><![CDATA[



<p>
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with <a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=4DwqzHSXl8YdqGjGQ2z&preferencesSaved=">Web Of Science</a> , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API <a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf">http://wokinfo.com/media/pdf/OpenURL-guide.pdf</a> to make links to the things I am interested in here. Based on that document, here are three links based on a <a href="10.1021/jp047349j">10.1021/jp047349j</a> that take you to different Web Of Science (WOS) pages.
</p>


<ol class="org-ol">
<li>go to article in WOS: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j</a> 
</li>
<li>citing articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes</a> 
</li>
<li>related articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes</a> 
</li>
</ol>

<p>
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos</span> (doi)
  <span style="color: #228b22;">"Open Web of Science entry for DOI"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (format
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/%s"</span> doi)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-citing</span> (doi)
  <span style="color: #228b22;">"Open Web of Science citing articles entry. May be empty if none are found"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
    doi
    <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"</span>)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-related</span> (doi)
  <span style="color: #228b22;">"Open Web of Science related articles page."</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
           doi
           <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"</span>)))
</pre>
</div>

<pre class="example">
doi-utils-wos-related
</pre>

<p>
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things <a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/">here</a> about Scopus and issues with ISI that I note for reference to future me.
</p>

<p>
Some of these are now included in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">jmax-bibtex.el</a> and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>words - some interesting utilities for text in emacs</title>
      <link>http://jkitchin.github.io/blog/2014/11/03/words-some-interesting-utilities-for-text-in-emacs</link>
      <pubDate>Mon, 03 Nov 2014 11:31:45 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">zBeWt-UzQ9UsZMMHQc2CQsR8jKY=</guid>
      <description>words - some interesting utilities for text in emacs</description>
      <content:encoded><![CDATA[


<p>
Recently I <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/">posted</a> about an org-link with a menu. Here I extend the idea to a command that will do approximately the same thing. The idea is a command called words that will be run interactively. It will grab the word at point, or operate on a selected region, and then offer a menu to lookup the definition, find it in a thesaurus, google it, etc&#x2026; We structure the code so you can add functions to it later, without directly modifying this code. The only limitation of this code is that the functions must have a signature with no arguments. That does not seem terribly limiting, as we can check for a region, and use it if we want (see the words-google function).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-dictionary</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://dictionary.reference.com/browse/%s?s=t"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-thesaurus</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.thesaurus.com/browse/%s"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-google</span> ()
  (interactive)  
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.google.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))


(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">words-funcs</span> '()
 <span style="color: #228b22;">"functions to run in `</span><span style="color: #cd0000;">words</span><span style="color: #228b22;">'. Each entry is a list of (key menu-name function)."</span>)

(setq words-funcs
  '((<span style="color: #228b22;">"d"</span> <span style="color: #228b22;">"ictionary"</span> words-dictionary)
    (<span style="color: #228b22;">"t"</span> <span style="color: #228b22;">"hesaurus"</span> words-thesaurus)
    (<span style="color: #228b22;">"g"</span> <span style="color: #228b22;">"oogle"</span> words-google)))
 

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words</span> ()
  (interactive)
   (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     words-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
   (<span style="color: #8b0000;">let</span> ((input (read-char-exclusive)))
     (funcall
      (elt 
       (assoc
        (char-to-string input) words-funcs)
       2))))
</pre>
</div>

<pre class="example">
words
</pre>

<p>
This works nicely. Now, let us add a new function that looks up the word or selection on twitter. We just define a new function, and add the menu selection to the words-func variable. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-twitter</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"https://twitter.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"w"</span> <span style="color: #228b22;">"twitter"</span> words-twitter)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">d</td>
<td class="left">ictionary</td>
<td class="left">words-dictionary</td>
</tr>

<tr>
<td class="left">t</td>
<td class="left">hesaurus</td>
<td class="left">words-thesaurus</td>
</tr>

<tr>
<td class="left">g</td>
<td class="left">oogle</td>
<td class="left">words-google</td>
</tr>

<tr>
<td class="left">w</td>
<td class="left">twitter</td>
<td class="left">words-twitter</td>
</tr>
</tbody>
</table>

<p>
Finally, the most complicated idea: spelling and grammar. I know there is flyspell, and such, but they are build on an ancient dictionary. Here, for fun, we explore a web api. This next function is not a trivial one, and I will not explain it here beyond saying it sends a selection of text to a url, gets an xml response back, and that response is parsed and printed to a buffer by this function. The main point is to illustrate we can do interesting things with a selection of text!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-atd</span> ()
  <span style="color: #228b22;">"Send paragraph at point to After the deadline for spell and grammar checking."</span>
  (interactive)
  
  (<span style="color: #8b0000;">let*</span> ((url-request-method <span style="color: #228b22;">"POST"</span>)
         (url-request-data (format
                            <span style="color: #228b22;">"key=some-random-text-&amp;data=%s"</span>
                            (url-hexify-string
                             (thing-at-point 'paragraph))))
         (xml  (<span style="color: #8b0000;">with-current-buffer</span>
                   (url-retrieve-synchronously
                    <span style="color: #228b22;">"http://service.afterthedeadline.com/checkDocument"</span>)
                 (xml-parse-region url-http-end-of-headers (point-max))))
         (results (car xml))
         (errors (xml-get-children results 'error)))
    
    (switch-to-buffer-other-frame <span style="color: #228b22;">"*ATD*"</span>)
    (erase-buffer)
    (<span style="color: #8b0000;">dolist</span> (err errors)
      (<span style="color: #8b0000;">let*</span> ((children (xml-node-children err))
             ;; <span style="color: #ff0000; font-weight: bold;">for some reason I could not get the string out, and had to do this.</span>
             (s (car (last (nth 1 children))))
             ;; <span style="color: #ff0000; font-weight: bold;">the last/car stuff doesn't seem right. there is probably</span>
             ;; <span style="color: #ff0000; font-weight: bold;">a more idiomatic way to get this</span>
             (desc (last (car (xml-get-children children 'description))))
             (type (last (car (xml-get-children children 'type))))
             (suggestions (xml-get-children children 'suggestions))
             (options (xml-get-children (xml-node-name suggestions) 'option))
             (opt-string  (mapconcat
                           (<span style="color: #8b0000;">lambda</span> (el)
                             (<span style="color: #8b0000;">when</span> (listp el)
                               (car (last el))))
                           options
                           <span style="color: #228b22;">" "</span>)))

        (insert (format <span style="color: #228b22;">"** %s ** %s</span>
<span style="color: #228b22;">Description: %s</span>
<span style="color: #228b22;">Suggestions: %s</span>

<span style="color: #228b22;">"</span> s type desc opt-string))))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"s"</span> <span style="color: #228b22;">"spell/grammar"</span> words-atd)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<pre class="example">
words-atd
</pre>

<p>
My final words menu looks like: 
</p>

<div class="figure">
<p><img src="/media/2014-11-03-words---some-interesting-utilities-for-text-in-emacs/final-menu.png"> 
</p>
</div>

<p>
If I have the cursor in the previous paragraph, run the words command and select "s" I get a buffer with these contents:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> flyspell ** (spelling)</h2>
<div class="outline-text-2" id="text-1">
<p>
Description: (Spelling)
Suggestions: flywheel flyball
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> are build on ** (grammar)</h2>
<div class="outline-text-2" id="text-2">
<p>
Description: (Auxiliary Verb Agreement)
Suggestions: are built on
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> api ** (spelling)</h2>
<div class="outline-text-2" id="text-3">
<p>
Description: (Spelling)
Suggestions: app ape apt ai ami
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> url ** (spelling)</h2>
<div class="outline-text-2" id="text-4">
<p>
Description: (Spelling)
Suggestions: urn ure curl hurl burl
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> xml ** (spelling)</h2>
<div class="outline-text-2" id="text-5">
<p>
Description: (Spelling)
Suggestions: xl ml
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-6">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> an xml ** (grammar)</h2>
<div class="outline-text-2" id="text-7">
<p>
Description: (Wrong article)
Suggestions: a xml
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-8">
<p>
Description: (Hidden Verbs)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> is parsed ** (grammar)</h2>
<div class="outline-text-2" id="text-9">
<p>
Description: (Passive voice)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-10">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-11">
<p>
Description: (Hidden Verbs)
Suggestions: 
#+END<sub>EXAMPLE</sub>
</p>

<p>
It might be nice to link back to those words, so you could click on them and fix them, but that is a beyond today's goal. In summary, today we looked at a framework to create a user-modifiable menu of commands that are launched from a single command. Here we called the command words, and then built up some different things we might want to do with the word or selection at point. While you can of course just remember the individual commands, remembering one command and then being prompted might have some advantages.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/03/words---some-interesting-utilities-for-text-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Pymacs to integrate Python into Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs</link>
      <pubDate>Sun, 19 Oct 2014 09:33:08 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">A5OvYHGpZAZwz5h8XmQIZWiVqqU=</guid>
      <description>Using Pymacs to integrate Python into Emacs</description>
      <content:encoded><![CDATA[


<p>
<a href="https://github.com/pinard/Pymacs">Pymacs</a> is a project that aims to integrate Python into Emacs, and vice versa. In this post, I am going to examine the Python into Emacs integration. I cloned the git repository, ran make install, and setup my init.el file like this, as suggested in the manual.
</p>

<pre class="example">
(add-to-list 'load-path (expand-file-name "Pymacs" starter-kit-dir))
(require 'pymacs)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
</pre>

<p>
Pymacs provides some mapping of Python modules to emacs-lisp functions. You load modules in emacs-lisp, and then a dash-mangled version of the Python functions are available, <i>in emacs lisp</i>. Here is an example. We will load numpy, and find the maximum element of an array. For comparison, here is the Python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.max(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Now, the corresponding emacs version using Pymacs.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(np-max (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Neat! The dot notation is basically replaced with dash notation, and we use a lisp list as the argument instead of an array. Otherwise, this looks almost identical. Now, let us consider something more complicated, and get the determinant of the array. We add a PREFIX to the load statement for numpy.linalg similar to what we would do in Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> numpy.linalg <span style="color: #8b0000;">as</span> la
<span style="color: #8b0000;">print</span> la.det(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
And in emacs-lisp:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(pymacs-load <span style="color: #228b22;">"numpy.linalg"</span> <span style="color: #228b22;">"la-"</span>)
(la-det (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
We can call functions from matplotlib to make a figure. For example:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"matplotlib.pyplot"</span> <span style="color: #228b22;">"plt-"</span>)
(<span style="color: #8b0000;">let*</span> ((x  '(1 2 3 4))
       (y  (mapcar (<span style="color: #8b0000;">lambda</span> (z) (* z z)) x)))
  (plt-plot x y)
  (plt-xlabel <span style="color: #228b22;">"x values"</span>)
  (plt-ylabel <span style="color: #228b22;">"x$^2$"</span>)
  (plt-savefig <span style="color: #228b22;">"plt-pymacs.png"</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-10-19-Using-Pymacs-to-integrate-Python-into-Emacs/plt-pymacs.png"> 
</p>
</div>

<p>
This was a little subtle. It was necessary to save the lists as variables, and use the variables in the plot command.
</p>

<p>
I am not sure what this offers over just having a Python block present in org-mode though. Maybe it is more useful in emacs-lisp libraries where you want to bring in some numerical analysis. Or if you have some custom library of Python you would like to use in elisp. Here is a highly contrived example. Suppose we have a Python module with this special function that converts an argument to "J":
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">special_func</span>(x):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">"J"</span>
</pre>
</div>

<p>
In Python, we might use it like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> my_python <span style="color: #8b0000;">as</span> mp
<span style="color: #8b0000;">print</span> [mp.special_func(x) <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>]]
</pre>
</div>

<pre class="example">
['J', 'J', 'J']
</pre>

<p>
We can import the module, and use the function in emacs-lisp too. The underscore in the function name is turned into a dash, which is a little confusing, but it works otherwise.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"my_python"</span> <span style="color: #228b22;">"mp-"</span>)
(mapcar 'mp-special-func '(1 2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">J</td>
<td class="left">J</td>
<td class="left">J</td>
</tr>
</tbody>
</table>


<p>
It does not seem possible to do everything though. For example, It is not clear how to pass functions through either side. For example, this does not work for fsolve, although it seems like it should. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"scipy.optimize"</span> <span style="color: #228b22;">"so-"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">objective</span> (x)
  (- x 5))

(so-fsolve 'objective 3)
</pre>
</div>

<p>
I get an error like this:
</p>
<pre class="example">
Pymacs loading scipy.optimize...done
pymacs-report-error: Python: Emacs: "(wrong-type-argument number-or-marker-p (pymacs-python . 47))"
</pre>

<p>
The Python equivalent is here:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(x):
    <span style="color: #8b0000;">return</span> x - <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>

<span style="color: #8b0000;">print</span> fsolve(objective, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
</pre>
</div>

<pre class="example">
[ 5.]
</pre>

<p>
There is an open question on StackOverflow <a href="http://stackoverflow.com/questions/25471580/can-you-use-a-function-as-an-argument-to-a-python-function-in-pymacs">here</a> on this issue. Overall, I find the project very interesting. It would be awesome if you could extend emacs more easily in other languages, especially scripting languages such as Python that have numerical and plotting capabilities. Right now, this is possible in limited ways. For example, Xah Lee describes an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">approach</a> where an arbitrary script can take data on stdin, process it, and output the results to stdout. Emacs can capture this and use it to modify the buffer. This uses the <code>shell-command</code> features in Emacs. These scripts could be written in Python, Perl, Ruby, etc&#x2026; This seems like a simpler and more flexible approach, except that it requires creating the shell commands and putting them on the executable path (as opposed to having Python modules on a PYTHONPATH). These lack the deep integration of documentation you get with emacs-lisp and Python functions.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A git status Emacs modeline</title>
      <link>http://jkitchin.github.io/blog/2014/09/19/A-git-status-Emacs-modeline</link>
      <pubDate>Fri, 19 Sep 2014 09:36:21 EDT</pubDate>
      <category><![CDATA[git]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">YrJ_PS59YtLxhRMSSv_j0REI7SU=</guid>
      <description>A git status Emacs modeline</description>
      <content:encoded><![CDATA[


<p>
I am using git more and more in Emacs, and I would like a way to know the status of the git repo I am working in by looking at the modeline. I know about <a href="https://github.com/magit/magit">magit</a> , and other git modes, but none of them provide something as easy as useful as say <a href="https://github.com/magicmonty/bash-git-prompt">bash-git-prompt</a> in the bash shell, which is to say I do not want to run a command to see the status (I might as well be in the shell then). Part of this need comes from a project with hundreds of git repos in it, and I want convenient status when I open any one of them.
</p>

<p>
Here, I want to emulate the bash-git-prompt feature in the Emacs modeline where it will show you when you are in a git repo, and then some basic information like what branch you are on, the number of untracked, modified files, and the commit status with respect to a remote. First, we only want this when we are in a git repo. We can check for that like this. The command in this block returns a string that starts with fatal when not in a git repo.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(not (string-match <span style="color: #228b22;">"^fatal"</span> (shell-command-to-string <span style="color: #228b22;">"git rev-parse --git-dir"</span>)))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Let us wrap that in a nice function so we can use it later..
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">in-git-p</span> ()
  (not (string-match <span style="color: #228b22;">"^fatal"</span> (shell-command-to-string <span style="color: #228b22;">"git rev-parse --git-dir"</span>))))

(in-git-p)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Next, we would like to know how many untracked, modified and other (e.g. unmerged, deleted, etc&#x2026;) files we have. We can get this from  <code>git status --porcelain</code>. I am going to set these to be red if they are not zero, so they stand out, and be green otherwise. We will also store a list of each file type so we can make a tooltip on the counter to see what is there.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">git-parse-status</span> ()
  (interactive)
  (<span style="color: #8b0000;">let</span> ((U 0)   ; <span style="color: #ff0000; font-weight: bold;">untracked files</span>
        (M 0)   ; <span style="color: #ff0000; font-weight: bold;">modified files</span>
        (O 0)   ; <span style="color: #ff0000; font-weight: bold;">other files</span>
        (U-files <span style="color: #228b22;">""</span>)
        (M-files <span style="color: #228b22;">""</span>)
        (O-files <span style="color: #228b22;">""</span>))
    (<span style="color: #8b0000;">dolist</span> (line (split-string
                   (shell-command-to-string <span style="color: #228b22;">"git status --porcelain"</span>)
                   <span style="color: #228b22;">"\n"</span>))
      (<span style="color: #8b0000;">cond</span>

       ;; <span style="color: #ff0000; font-weight: bold;">ignore empty line at end</span>
       ((string= <span style="color: #228b22;">""</span> line) nil)

       ((string-match <span style="color: #228b22;">"^\\?\\?"</span> line)
        (setq U (+ 1 U))
        (setq U-files (concat U-files <span style="color: #228b22;">"\n"</span> line)))

       ((string-match <span style="color: #228b22;">"^ M"</span> line)
        (setq M (+ 1 M))
        (setq M-files (concat M-files <span style="color: #228b22;">"\n"</span> line))
        )

       (t
        (message <span style="color: #228b22;">"detected other in %s"</span> line)
        (setq O (+ 1 O))
        (setq O-files (concat O-files <span style="color: #228b22;">"\n"</span> line)))))
      
    ;; <span style="color: #ff0000; font-weight: bold;">construct propertized string</span>
    (concat
     <span style="color: #228b22;">"("</span>
     (propertize 
      (format <span style="color: #228b22;">"M:%d"</span> M)
      'face (list '<span style="color: #cd0000;">:foreground</span> (<span style="color: #8b0000;">if</span> (&gt; M 0)
                                   <span style="color: #228b22;">"red"</span>
                                 <span style="color: #228b22;">"forest green"</span>))
      'help-echo M-files)
     <span style="color: #228b22;">"|"</span>
     (propertize 
      (format <span style="color: #228b22;">"U:%d"</span> U)
      'face (list '<span style="color: #cd0000;">:foreground</span> (<span style="color: #8b0000;">if</span> (&gt; U 0)
                                   <span style="color: #228b22;">"red"</span>
                                 <span style="color: #228b22;">"forest green"</span>))
      'help-echo U-files)
     <span style="color: #228b22;">"|"</span>
     (propertize 
      (format <span style="color: #228b22;">"O:%d"</span> O)
      'face (list '<span style="color: #cd0000;">:foreground</span> (<span style="color: #8b0000;">if</span> (&gt; O 0)
                                   <span style="color: #228b22;">"red"</span>
                                 <span style="color: #228b22;">"forest green"</span>))
      'help-echo O-files)                   
      <span style="color: #228b22;">") "</span>)))

(git-parse-status)
</pre>
</div>

<pre class="example">
(M:1|U:2|O:0) 
</pre>

<p>
Finally, let us get the branch we are on, and the commits with respect to a remote. We can do that like this. We use some unicode characters to indicate what direction things go, e.g. an up arrow to indicate you need to push, and a down arrow to indicate you should pull.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">git-remote-status</span> ()
  (interactive)
  (<span style="color: #8b0000;">let*</span> (;; <span style="color: #ff0000; font-weight: bold;">get the branch we are on.</span>
         (branch (s-trim
                  (shell-command-to-string
                   <span style="color: #228b22;">"git rev-parse --abbrev-ref HEAD"</span>)))
         ;; <span style="color: #ff0000; font-weight: bold;">get the remote the branch points to.</span>
         (remote (s-trim
                  (shell-command-to-string
                   (format <span style="color: #228b22;">"git config branch.%s.remote"</span> branch))))
         (remote-branch (s-trim
                         (shell-command-to-string
                          <span style="color: #228b22;">"git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)"</span>)))
         (commits (split-string
                   (s-trim
                    (shell-command-to-string
                     (format
                      <span style="color: #228b22;">"git rev-list --count --left-right HEAD...%s"</span>
                      remote-branch)))))
         (local (nth 0 commits))
         (remotes (nth 1 commits)))
    (concat
     <span style="color: #228b22;">"["</span>
     (propertize
      (format <span style="color: #228b22;">"%s"</span> branch)
      'face (list <span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"magenta"</span>))
     <span style="color: #228b22;">"|"</span>
     (format <span style="color: #228b22;">"&#8593;%s|&#8595;%s"</span> local remotes)
     <span style="color: #228b22;">"]"</span>))) 

(git-remote-status)
</pre>
</div>

<pre class="example">
[source|↑0|↓0]
</pre>

<p>
Now, we can finally put this together in a little minor mode. We add an element to the mode-line-format variable that evaluates those functions. When we turn off the minor mode, we remove the element from the modeline.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">define-minor-mode</span> <span style="color: #8b2323;">git-mode</span>
  <span style="color: #228b22;">"minor mode to put git repo status in modeline"</span>
  nil nil nil
  (<span style="color: #8b0000;">let</span> ((git-modeline '(<span style="color: #cd0000;">:eval</span> (<span style="color: #8b0000;">if</span> (not (in-git-p))
                                  <span style="color: #228b22;">""</span>
                                (concat 
                                 (git-remote-status)
                                 (git-parse-status))))))
    (<span style="color: #8b0000;">if</span> git-mode
        ;; <span style="color: #ff0000; font-weight: bold;">put in modeline</span>
        (push git-modeline mode-line-format)
      ;; <span style="color: #ff0000; font-weight: bold;">remove from modeline</span>
      (setq mode-line-format
            (-remove (<span style="color: #8b0000;">lambda</span> (x)
                       (equal x git-modeline))                                  
                     mode-line-format)))))
</pre>
</div>

<p>
This leads to a modeline that looks like this (when my mouse is hovered over the M):
</p>


<div class="figure">
<p><img src="/media/2014-09-19-A-git-status-Emacs-modeline/git-modeline.png"> 
</p>
</div>

<p>
This seems to have some performance issue, since pretty much everytime I type a key, it updates the modeline, and runs git. That is too often. Let us redefine the mode here so we have a minimum time between updates, say 15 seconds. We will store the last time updated, and the last value of the mode-line. Then each time the modeline updates, if the time since the last update is greater than our interval, then we will run the git commands. Otherwise, we just use the old modeline value.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">git-modeline-last-update</span> (float-time) <span style="color: #228b22;">"Last time we updated"</span>)
(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">git-modeline-update-interval</span> 15 <span style="color: #228b22;">"Minimum time between update in seconds"</span>)
(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">git-modeline</span> <span style="color: #228b22;">""</span> <span style="color: #228b22;">"Last value of the modeline"</span>)

(<span style="color: #8b0000;">define-minor-mode</span> <span style="color: #8b2323;">git-mode</span>
  <span style="color: #228b22;">"minor mode to put git repo status in modeline"</span>
  nil nil nil
  (<span style="color: #8b0000;">let</span> ((git-modeline '(<span style="color: #cd0000;">:eval</span> (<span style="color: #8b0000;">if</span>
                                  (&gt; (- (float-time) git-modeline-last-update)
                                     git-modeline-update-interval)
                                  ;; <span style="color: #ff0000; font-weight: bold;">we are updating                              </span>
                                  (setq git-modeline
                                        (<span style="color: #8b0000;">if</span> (not (in-git-p))
                                            <span style="color: #228b22;">""</span>                                   
                                          (setq  git-modeline-last-update (float-time))
                                          (concat 
                                           (git-remote-status)
                                           (git-parse-status))))
                                
                              ;; <span style="color: #ff0000; font-weight: bold;">use last value of the modeline</span>
                              git-modeline))))
    (<span style="color: #8b0000;">if</span> git-mode
        ;; <span style="color: #ff0000; font-weight: bold;">put in modeline</span>
        (push git-modeline mode-line-format)
      ;; <span style="color: #ff0000; font-weight: bold;">remove from modeline</span>
      (setq mode-line-format
            (-remove (<span style="color: #8b0000;">lambda</span> (x)
                       (equal x git-modeline))                                  
                     mode-line-format)))))
</pre>
</div>

<p>
That does it I think. I don't have any performance issues here now. I have not tested this super thoroughly on many git repos, but it seems to be pretty consistent and correct so far. The remote status code is where there is the most probability for issues. I still do not know that part of git very well.  I wonder if there is a more elegant solution than this, perhaps an idle timer. I notice a little lag in updating the data when I switch to another git repo. That might be a little confusing one day.
</p>


<p>
Otherwise, this seems like a pretty nice solution so far. There are still some things that would be nice to see on here. For example, a pop-up menu on the modeline to switch branches, push or pull, and with actions for the files, e.g. add/commit, etc&#x2026; Those do not seem to hard to </p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/19/A-git-status-Emacs-modeline.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Colorized text in Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/09/14/Colorized-text-in-Emacs</link>
      <pubDate>Sun, 14 Sep 2014 14:23:05 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">fSrISou9pi-V23dDzBL8uo2sAvs=</guid>
      <description>Colorized text in Emacs</description>
      <content:encoded><![CDATA[



<p>
As I continue investigating Emacs + org-mode as a platform for creating applications, it has come up a few times that it would be useful to display colored text. For example, in a summary report of a git repo, you might want to see some information in red, e.g. if you have uncommitted changes, and some information in green, e.g. the repo is clean and consistent with a remote.
</p>

<p>
We can set colors on a string in Emacs like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(propertize <span style="color: #228b22;">"Red Text"</span> 'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>))
</pre>
</div>

<p>
The only tricky part is that we need to insert the text into a font-locked buffer to see it. That is also a tad tricky to illustrate in a code block, so here is a way to try it:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(re-search-forward <span style="color: #228b22;">"-&gt; "</span>)
(insert
  (propertize <span style="color: #228b22;">"Red Text"</span> 'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>)))
</pre>
</div>

<p>
-&gt; Red Text
</p>

<p>
The red text does not show in the HTML post, so this is a screenshot of what it looks like in my buffer:
</p>


<div class="figure">
<p><img src="/media/2014-09-14-Colorized-text-in-Emacs/red-text.png"> 
</p>
</div>

<p>
Now, here is how we might use this in a summary report. Say we have a git repo, and we want to know various facts about it. We can get information about tracked/ untracked and modified files like this:
</p>

<div class="org-src-container">

<pre class="src src-sh">git status --porcelain
</pre>
</div>
<pre class="example">
 M _blog/blog.html
 M _blog/blog.org
A  _blog/images/red-text.png
</pre>

<p>
This shows we have two tracked, but modified files, and on added but not committed file. We can use this code to show if we have any untracked files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((n 0) s)
  (<span style="color: #8b0000;">dolist</span> (line (split-string
                 (shell-command-to-string <span style="color: #228b22;">"git status --porcelain"</span>)
                 <span style="color: #228b22;">"\n"</span>))
    (<span style="color: #8b0000;">when</span> (string-match <span style="color: #228b22;">"^\\?\\?"</span> line)
      (setq n (+ 1 n))))
  (<span style="color: #8b0000;">if</span> (&gt; n 0)
      (setq s (propertize (format <span style="color: #228b22;">"%s untracked files"</span> n)
                          'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>)))
    (setq s (propertize <span style="color: #228b22;">"No untracked files"</span> 
                        'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"forest green"</span>))))
  (re-search-forward <span style="color: #228b22;">"-&gt;"</span>)
  (insert s))
</pre>
</div>

<p>
-&gt;No untracked files
</p>

<p>
In HTML (i.e. the blog post) you cannot really see the green text, so here is a screenshot illustrating it.
<img src="/media/2014-09-14-Colorized-text-in-Emacs/git-untracked-files.png"> 
</p>

<p>
Similarly, we can check for modified files. We add a wrinkle and add a tooltip like text that shows the output of the git command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((n 0)
      (output (shell-command-to-string <span style="color: #228b22;">"git status --porcelain"</span>))
      s)
  (<span style="color: #8b0000;">dolist</span> (line (split-string
                 output
                 <span style="color: #228b22;">"\n"</span>))
    (<span style="color: #8b0000;">when</span> (string-match <span style="color: #228b22;">"^ M"</span> line)
      (setq n (+ 1 n))))
  (<span style="color: #8b0000;">if</span> (&gt; n 0)
      (setq s (propertize (format <span style="color: #228b22;">"%s modified files"</span> n)
                          'help-echo output
                          'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>)))
    (setq s (propertize <span style="color: #228b22;">"No modified files"</span> 
                        'font-lock-face '(<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"forest green"</span>))))
  (re-search-forward <span style="color: #228b22;">"-&gt; "</span>)
  (insert s))
</pre>
</div>

<p>
-&gt; 2 modified files
</p>

<p>
That looks like this in emacs:
</p>


<div class="figure">
<p><img src="/media/2014-09-14-Colorized-text-in-Emacs/git-modified.png"> 
</p>
</div>


<p>
That is the main idea in this post. You can create strings with properties, and use code to determine what they e.g. what color the text is, etc&#x2026; There are lots of properties listed at <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html">http://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html</a> that might be helpful in an application. Here are some previous posts that examined similar ideas.
</p>

<ul class="org-ul">
<li>Read-only text <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/09/13/Make-some-org-sections-read-only/">http://kitchingroup.cheme.cmu.edu/blog/2014/09/13/Make-some-org-sections-read-only/</a> 
</li>

<li>Tool tips: <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/04/12/Tool-tips-on-text-in-Emacs/">http://kitchingroup.cheme.cmu.edu/blog/2013/04/12/Tool-tips-on-text-in-Emacs/</a> 
</li>

<li>Invisible text (this is not exactly a property, but it is similar)
</li>
</ul>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2014/02/06/Invisible-text-in-emacs/">http://kitchingroup.cheme.cmu.edu/blog/2014/02/06/Invisible-text-in-emacs/</a> </p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/14/Colorized-text-in-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Make some org-sections read-only</title>
      <link>http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only</link>
      <pubDate>Sat, 13 Sep 2014 13:50:49 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">YoG-EzN7q1VyNWIKbahjx_Zo5Zk=</guid>
      <description>Make some org-sections read-only</description>
      <content:encoded><![CDATA[


<p>
There are times where I want an org-file to be <i>partly</i> read-only. For example, there might be instructions that should not be modified. In this post we consider how to implement that. For now, we only want an org-section to be read-only, and we will designate those sections by a tag read<sub>only</sub>. Then, the idea is that a hook function would be run when the org-file is loaded, and mark regions of text as read-only before the user can do anything.
</p>

<p>
In Emacs, you can mark a section of text, and set it to have a property of read-only. So, we can just map over the entries, and any heading that is tagged as read<sub>only</sub> can be made read-only!
</p>

<p>
Here we set the first few characters of this buffer to be read-only.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-text-properties 1 8 '(read-only t))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Emacs is semi-serious about what read-only means. You cannot even change properties of read-only text, unless you set inhibit-read-only as a variable.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((inhibit-read-only t))
 (remove-text-properties 1 8 '(read-only t)))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Now, we can map over the entries in this buffer, and set any heading tagged read<sub>only</sub> to actually be that way like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-map-entries (<span style="color: #8b0000;">lambda</span> ()
                   (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
                          (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
                          (end (org-element-property <span style="color: #cd0000;">:end</span> element)))
                     (add-text-properties begin end '(read-only t))))
                 <span style="color: #228b22;">"read_only"</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">t</td>
</tr>
</tbody>
</table>

<p>
To get this to work when org-mode is turned on, we just wrap it in a function, add the function to a hook, and a function to undo the read-only behavior. I found that if I use the end reported by org-element-at-point, it includes the first character of the next section, we take one away from the end to avoid that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-mark-readonly</span> ()
  (interactive)
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
            (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
            (end (org-element-property <span style="color: #cd0000;">:end</span> element)))
       (add-text-properties begin (- end 1) '(read-only t))))
   <span style="color: #228b22;">"read_only"</span>)
 (message <span style="color: #228b22;">"Made readonly!"</span>))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-remove-readonly</span> ()
  (interactive)
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
            (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
            (end (org-element-property <span style="color: #cd0000;">:end</span> element))
            (inhibit-read-only t))
         (remove-text-properties begin (- end 1) '(read-only t))))
     <span style="color: #228b22;">"read_only"</span>))

(add-hook 'org-mode-hook 'org-mark-readonly)
</pre>
</div>

<p>
That seem to be all there is. After executing the code above, when I open this file, the next section is read-only! I can use the other function to remove that if I need to edit it. Score one for Emacs + org-mode!
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Read-only section&#xa0;&#xa0;&#xa0;<span class="tag"><span class="read_only">read_only</span></span></h2>
<div class="outline-text-2" id="text-1">
<p>
This text is so important, it should be read-only.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Editable section</h2>
<div class="outline-text-2" id="text-2">
<p>
You can do what you want here. Like add text.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/13/Make-some-org-sections-read-only.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Mac gestures in Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/08/31/Using-Mac-gestures-in-Emacs</link>
      <pubDate>Sun, 31 Aug 2014 10:20:46 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">OJUjnKxSv6m7jZo7YopUkZFCTas=</guid>
      <description>Using Mac gestures in Emacs</description>
      <content:encoded><![CDATA[



<p>
I recently got a MacBook Air, and I have been exploring what you can do with it and Emacs. The Mac trackpad has some interesting gestures that are useful in Emacs. For example, you can scroll the buffer by moving two fingers up or down the trackpad. Or tap the trackpad with two fingers to get the equivalent of a right click. I was curious what other gestures could be used effectively in Emacs. Emacs does not capture all of the trackpad gestures, but it does capture the two finger swipe left and right as a triple-wheel-left or right key. We can use that to switch buffers. Normally one uses C-x leftarrow or right arrow to do that, but with the trackpack we can use a gesture!
</p>

<p>
The gesture triggers a triple-wheel key, which we can bind to an function. This code does that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(global-set-key [triple-wheel-left] 'previous-buffer)
(global-set-key [triple-wheel-right] 'next-buffer)
</pre>
</div>
<pre class="example">
next-buffer
</pre>

<p>
This scrolls through buffers blazingly fast! Almost unusably fast. If you move very slow, you can get some control and switch one buffer at a time. Interestingly, I see these messages while gesturing slowly:
</p>

<pre class="example">
&lt;wheel-left&gt; is undefined
&lt;double-wheel-left&gt; is undefined
&lt;wheel-right&gt; is undefined
&lt;double-wheel-right&gt; is undefined
&lt;wheel-right&gt; is undefined [2 times]
&lt;double-wheel-right&gt; is undefined
</pre>

<p>
We need a custom function that has some kind of delay to slow down the buffer switching. Here is an idea. We will store a value in a global variable, and only switch buffers when it is true. After we switch the buffer we set the variable to nil, and activate a timer to reset the variable to t after a short delay. say one second. Here it is.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">*my-previous-buffer*</span> t
  <span style="color: #228b22;">"can we switch?"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">my-previous-buffer</span> ()
  (interactive)
  (message <span style="color: #228b22;">"custom prev: *my-previous-buffer*=%s"</span> *my-previous-buffer*)
  (<span style="color: #8b0000;">when</span> *my-previous-buffer*
    (previous-buffer)
    (setq *my-previous-buffer* nil)
    (run-at-time <span style="color: #228b22;">"1 sec"</span> nil (<span style="color: #8b0000;">lambda</span> ()
                               (setq *my-previous-buffer* t)))))

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">*my-next-buffer*</span> t
  <span style="color: #228b22;">"can we switch?"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">my-next-buffer</span> ()
  (interactive)
  (message <span style="color: #228b22;">"custom prev: *my-next-buffer*=%s"</span> *my-next-buffer*)
  (<span style="color: #8b0000;">when</span> *my-next-buffer*
    (next-buffer)
    (setq *my-next-buffer* nil)
    (run-at-time <span style="color: #228b22;">"1 sec"</span> nil (<span style="color: #8b0000;">lambda</span> ()
                               (setq *my-next-buffer* t)))))

(global-set-key [triple-wheel-right] 'my-previous-buffer)
(global-set-key [triple-wheel-left] 'my-next-buffer)
</pre>
</div>

<pre class="example">
my-next-buffer
</pre>

<p>
Note I reversed the left/right order. It seems that swiping left triggers the triple-wheel-right key. Go figure. Anyway, this makes the gesture actually usable, as it only changes one buffer at a time, with a short delay before you can change the buffer again. It is not a groundbreaking addition to Emacs, but it satisfied a curiousity itch for the day for me.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/31/Using-Mac-gestures-in-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Creating a dynamic menu for Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/08/20/Creating-a-dynamic-menu-for-Emacs</link>
      <pubDate>Wed, 20 Aug 2014 20:26:18 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">Sb4fmu3MPRWcc8rhMb3LgsHPMHY=</guid>
      <description>Creating a dynamic menu for Emacs</description>
      <content:encoded><![CDATA[


<p>
I have an application where I want a dynamic menu in Emacs, e.g. the menu auto-updates as things change on your computer. Here is a prototype example. We will make a menu that shows entries for each file in the current directory, and opens that entry.
</p>

<p>
We start by creating a menu that is initially empty like this. This menu will be called "My Files" in the menu.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(easy-menu-define jrk-menu global-map <span style="color: #228b22;">"MyMenu"</span>
  '(<span style="color: #228b22;">"My Files"</span>))
</pre>
</div>

<p>
Next, we create this function which will create a submenu with a vector entry for each file in this directory.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">get-menu</span> ()
  (easy-menu-create-menu
   <span style="color: #228b22;">"Files"</span>
   (mapcar (<span style="color: #8b0000;">lambda</span> (x)
             (vector (file-name-nondirectory x)
                     `(<span style="color: #8b0000;">lambda</span> () (interactive) (find-file ,x) t)))
           (f-glob <span style="color: #228b22;">"*"</span>))))
</pre>
</div>

<pre class="example">
get-menu
</pre>

<p>
Next, we add the submenu. This is a one-time addition, which reflects the files in the directory at the time I ran this block.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(easy-menu-add-item jrk-menu '() (get-menu))
</pre>
</div>

<p>
After you do that, the menu looks like this:
</p>


<div class="figure">
<p><img src="/media/2014-08-20-Creating-a-dynamic-menu-for-Emacs/Screen Shot 2014-08-20 at 8.14.00 PM.png"> 
</p>
</div>

<p>
This menu is not yet dynamic. We need to create a function that can update the menu, and then add the function to a hook that runs each time the menu opens. Here is the code. The easy-menu-add-item function will replace the contents of an item by the same name, which we use here to update the menu.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">update-my-file-menu</span> ()
  (easy-menu-add-item jrk-menu '() (get-menu)))

(add-hook 'menu-bar-update-hook 'update-my-file-menu)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">update-my-file-menu</td>
<td class="left">undo-tree-update-menu-bar</td>
<td class="left">menu-bar-update-buffers</td>
</tr>
</tbody>
</table>


<p>
Now, if we run this block to create a file:
</p>

<div class="org-src-container">

<pre class="src src-sh">touch newfile
</pre>
</div>

<p>
Then, after saving this buffer the menu looks like this:
</p>



<div class="figure">
<p><img src="/media/2014-08-20-Creating-a-dynamic-menu-for-Emacs/Screen Shot 2014-08-20 at 8.17.50 PM.png"> 
</p>
</div>

<p>
Now, every time a new file appears in this directory, a new menu item will appear every time you check the menu. That is really dynamic.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/20/Creating-a-dynamic-menu-for-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Using org-mode outside of Emacs - sort of</title>
      <link>http://jkitchin.github.io/blog/2014/08/11/Using-org-mode-outside-of-Emacs-sort-of</link>
      <pubDate>Mon, 11 Aug 2014 20:22:43 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">zpTE43vN-BGGOHHf6Pn3qvcVx6Y=</guid>
      <description>Using org-mode outside of Emacs - sort of</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Extracting tables from an org-file</a></li>
<li><a href="#sec-2">2. Running code in an org-file</a></li>
</ul>
</div>
</div>
<p>
I recently posted about using Emacs for scripts (<a href="http://kitchingroup.cheme.cmu.edu/blog/2014/08/06/Writing-scripts-in-Emacs-lisp/">http://kitchingroup.cheme.cmu.edu/blog/2014/08/06/Writing-scripts-in-Emacs-lisp/</a> ). Someone was probably wondering, why would you do that, when you could use shell, python or perl? A good reason is to write scripts that can access data or code inside an org-file! This would allow you to leverage the extensive support for org-mode in Emacs, without a user necessarily even needing to use Emacs. Let us consider some examples. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Extracting tables from an org-file</h2>
<div class="outline-text-2" id="text-1">
<p>
If tables are named in org-mode, it is possible to extract the contents. Here is a table:
</p>

<table id="data-1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">4</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">9</td>
</tr>
</tbody>
</table>

<p>
Another table might look like
</p>

<table id="data-2" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">a</td>
<td class="right">b</td>
</tr>

<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">8</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">27</td>
</tr>
</tbody>
</table>


<p>
It would be convenient to have a command-line utility that could extract the data from that table with a syntax like:
</p>

<div class="org-src-container">

<pre class="src src-sh">extract-org-table tblname orgfile --format lisp|csv|tab
</pre>
</div>


<p>
Here is one way to do it:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">;; org-table tblname orgfile lisp|csv|tab

(let ((tblname (pop command-line-args-left))
      (org-file (pop command-line-args-left))
      (format)
      (table)
      (content))
  (when command-line-args-left
    (setq format (pop command-line-args-left)))
  (find-file org-file)
  (setq table 
	(org-element-map (org-element-parse-buffer) 'table 
	  (lambda (element)
	    (when (string= tblname (org-element-property :name element))
	      element))
	  nil ;info
	  t )) ; first-match

  (unless table
    (error "no table found for %s" tblname))

  (when table
    (goto-char (org-element-property :contents-begin table))
    (let ((contents (org-table-to-lisp)))
      (if (string= format "lisp")
	  (print contents)
	;else      
	(dolist (row contents)
	  (unless (eq row 'hline)
	    (cond
	     ((string= format "csv")
	      (princ (mapconcat 'identity row ",")))
	     ((string= format "tab")
	      (princ (mapconcat 'identity row "\t")))
	     (t
	      (error "unsupported format: %s" format)))
	    (princ "\n")))))))
</pre>
</div>

<p>
Let us try it out. <a href="org-babel-tangle">org-babel-tangle</a>
</p>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-2 org-outside-emacs.org lisp
</pre>
</div>

<pre class="example">
(("a" "b") ("1" "1") ("2" "8") ("3" "27"))
</pre>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-1 org-outside-emacs.org csv
</pre>
</div>

<pre class="example">
x,y
1,1
2,4
3,9
</pre>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-2 org-outside-emacs.org tab
</pre>
</div>

<pre class="example">
a       b
1       1
2       8
3       27
</pre>

<p>
That looks pretty reasonable, and you could even pipe the output to another classic unix command like cut to get a single column. Let us get the second column here.
</p>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-1 org-outside-emacs.org csv | cut -d , -f 2
</pre>
</div>

<pre class="example">
y
1
4
9
</pre>

<p>
That is starting to look like using data from an org-file, but outside of org. Of course, we are using org-mode, via emacs, but the point is a user might not have to know that, as long as a fairly recent Emacs and org-mode was installed on their system.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Running code in an org-file</h2>
<div class="outline-text-2" id="text-2">
<p>
It may be that there is code in an org-file that you might want to use, but for some reason choose not to cut and paste from the org-file to some script. Here is a simple code block:
</p>

<div class="org-src-container">

<pre class="src src-python" id="python-block">import time
with open('results.dat', 'w') as f:
    f.write(time.asctime())
</pre>
</div>

<p>
To call this externally we have to find the block and then run it.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp">;; org-run blockname org-file
;; run a code block in an org file
(let ((blockname (pop command-line-args-left))
      (org-file (pop command-line-args-left))
      (src))
  (find-file org-file)
  (setq src
	(org-element-map (org-element-parse-buffer) 'src-block
	  (lambda (element)
	    (when (string= blockname (org-element-property :name element))
	      element))
	  nil ;info
	  t )) ; first-match
  (when src
     (goto-char (org-element-property :begin src))
     ;; since we start with a fresh emacs, we have to configure some things.
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)))
     (let ((org-confirm-babel-evaluate nil))
       (org-babel-execute-src-block))))
</pre>
</div>

<p>
<a href="org-babel-tangle">org-babel-tangle</a>
</p>

<div class="org-src-container">

<pre class="src src-sh">./org-call.el python-block org-outside-emacs.org
cat results.dat
</pre>
</div>

<pre class="example">
Mon Aug 11 20:17:01 2014
</pre>

<p>
That demonstrates it is possible to call source blocks, but this is pretty limited in capability. You can only call a block; we did not capture any output from the block, only its side effects, e.g. it changed a file that we can examine. We have limited capability to set data into the block, other than through files. It might be possible to hack up something that runs org-babel-execute-src-block with constructed arguments that enables something like a var to be passed in. That is beyond today's post. When I get around to it, here is a reminder of how it might be possible to feed stdin to an emacs script: <a href="http://stackoverflow.com/questions/2879746/idomatic-batch-processing-of-text-in-emacs">http://stackoverflow.com/questions/2879746/idomatic-batch-processing-of-text-in-emacs</a> .
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/11/Using-org-mode-outside-of-Emacs---sort-of.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
  </channel>
</rss>
