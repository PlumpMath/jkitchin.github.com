<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-02-28T20:52:44Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Fitting a numerical ODE solution to data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/18/Fitting-a-numerical-ODE-solution-to-data" />
    <id>http://jkitchin.github.io/blog/2013/02/18/Fitting-a-numerical-ODE-solution-to-data</id>
    <updated>2013-02-27T14:39:41Z</updated>
    <published>2013-02-18T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="nonlinear regression" />
    <summary type="html"><![CDATA[Fitting a numerical ODE solution to data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/18/Fitting-a-numerical-ODE-solution-to-data"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/09/29/fitting-a-numerical-ode-solution-to-data/" >Matlab post</a>
</p>

<p>
Suppose we know the concentration of A follows this differential equation: \(\frac{dC_A}{dt} = -k C_A\), and we have data we want to fit to it. Here is an example of doing that.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> curve_fit
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #ff0000; font-weight: bold;"># given data we want to fit</span>
tspan = [0, 0.1, 0.2, 0.4, 0.8, 1]
Ca_data = [2.0081,  1.5512,  1.1903,  0.7160,  0.2562,  0.1495]

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">fitfunc</span>(t, k):
    <span style="color: #228b22;">'Function that returns Ca computed from an ODE for a k'</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">myode</span>(Ca, t):
        <span style="color: #8b0000;">return</span> -k * Ca

    Ca0 = Ca_data[0]
    Casol = odeint(myode, Ca0, t)
    <span style="color: #8b0000;">return</span> Casol[:,0]

k_fit, kcov = curve_fit(fitfunc, tspan, Ca_data, p0=1.3)
<span style="color: #8b0000;">print</span> k_fit

tfit = np.linspace(0,1);
fit = fitfunc(tfit, k_fit)

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(tspan, Ca_data, <span style="color: #228b22;">'ro'</span>, label=<span style="color: #228b22;">'data'</span>)
plt.plot(tfit, fit, <span style="color: #228b22;">'b-'</span>, label=<span style="color: #228b22;">'fit'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/ode-fit.png'</span>)
</pre>
</div>

<pre class="example">
[ 2.58893455]
</pre>

<p><img src="/img/./images/ode-fit.png"><p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Fitting-a-numerical-ODE-solution-to-data.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Nonlinear curve fitting]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/18/Nonlinear-curve-fitting" />
    <id>http://jkitchin.github.io/blog/2013/02/18/Nonlinear-curve-fitting</id>
    <updated>2013-02-27T14:40:05Z</updated>
    <published>2013-02-18T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="nonlinear regression" />
    <summary type="html"><![CDATA[Nonlinear curve fitting]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/18/Nonlinear-curve-fitting"><![CDATA[


<p>
Here is a typical nonlinear function fit to data. you need to provide an initial guess. In this example we fit the Birch-Murnaghan equation of state to energy vs. volume data from density functional theory calculations.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> leastsq
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

vols = np.array([13.71, 14.82, 16.0, 17.23, 18.52])

energies = np.array([-56.29, -56.41, -56.46, -56.463, -56.41])

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">Murnaghan</span>(parameters, vol):
    <span style="color: #228b22;">'From Phys. Rev. B 28, 5480 (1983)'</span>
    E0, B0, BP, V0 = parameters

    E = E0 + B0 * vol / BP * (((V0 / vol)**BP) / (BP - 1) + 1) - V0 * B0 / (BP - 1.0)

    <span style="color: #8b0000;">return</span> E

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(pars, y, x):
    <span style="color: #ff0000; font-weight: bold;">#we will minimize this function</span>
    err =  y - Murnaghan(pars, x)
    <span style="color: #8b0000;">return</span> err

x0 = [ -56.0, 0.54, 2.0, 16.5] <span style="color: #ff0000; font-weight: bold;">#initial guess of parameters</span>

plsq = leastsq(objective, x0, args=(energies, vols))

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'Fitted parameters = {0}'</span>.format(plsq[0])

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(vols,energies, <span style="color: #228b22;">'ro'</span>)

<span style="color: #ff0000; font-weight: bold;">#plot the fitted curve on top</span>
x = np.linspace(<span style="color: #8b0000;">min</span>(vols), <span style="color: #8b0000;">max</span>(vols), 50)
y = Murnaghan(plsq[0], x)
plt.plot(x, y, <span style="color: #228b22;">'k-'</span>)
plt.xlabel(<span style="color: #228b22;">'Volume'</span>)
plt.ylabel(<span style="color: #228b22;">'Energy'</span>)
plt.savefig(<span style="color: #228b22;">'images/nonlinear-curve-fitting.png'</span>)
</pre>
</div>

<pre class="example">
Fitted parameters = [-56.46839641   0.57233217   2.7407944   16.55905648]
</pre>

<p><img src="/img/./images/nonlinear-curve-fitting.png"><p>

<p>
See additional examples at \url{http://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html}.</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Nonlinear-curve-fitting.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
