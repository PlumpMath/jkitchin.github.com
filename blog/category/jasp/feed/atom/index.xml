<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-02-08T14:15:56Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Serializing jasp calculations as json data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/10/19/Serializing-jasp-calculations-as-json-data" />
    <id>http://jkitchin.github.io/blog/2013/10/19/Serializing-jasp-calculations-as-json-data</id>
    <updated>2013-10-19T15:10:21Z</updated>
    <published>2013-10-19T14:33:51Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="vasp" />
    <category scheme="http://jkitchin.github.io/blog" term="ase" />
    <category scheme="http://jkitchin.github.io/blog" term="jasp" />
    <summary type="html"><![CDATA[Serializing jasp calculations as json data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/10/19/Serializing-jasp-calculations-as-json-data"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. The simplest case of a simple calculation</a></li>
<li><a href="#sec-2">2. Including extra information in the JSON file</a></li>
<li><a href="#sec-3">3. Limitations?</a></li>
</ul>
</div>
</div>

<p>
We use <a href="http://www.vasp.at/">VASP</a>to calculate materials properties in our research We use the <a href="https://github.com/jkitchin/jasp/tree/dev">jasp</a>python module we have developed to setup, run and analyze those calculations. One of the things we have worked on developing recently is to more transparently share how do this kind of work by using org-mode supporting information files. Doing this should make our research more reproducible, and allow others to build off of it more easily.
</p>

<p>
We have run into the following problem trying to share VASP results however. The VASP license prohibits us from sharing the POTCAR files that are used to run the calculations. That is unfortunate, but since these files are also what give VASP some competitive advantage, they are protected, and we agreed to that when we bought the license. The problem is that the <code>jasp</code> module requires the POTCAR files to work, so without them, our scripts are not reproducible by researchers without a VASP license. 
</p>

<p>
So, we have been looking at new ways to share the data from our calculations. In this post, we consider representing the calculation as a JSON file. We will look at a couple of new features built into the development branch of <code>jasp</code>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The simplest case of a simple calculation</h2>
<div class="outline-text-2" id="text-1">
<p>
Here we setup and run a simple calculation, and output the JSON file.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase <span style="color: #8b0000;">import</span> Atoms, Atom
<span style="color: #8b0000;">from</span> jasp <span style="color: #8b0000;">import</span> *
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
np.set_printoptions(precision=3, suppress=<span style="color: #cd0000;">True</span>)

<span style="color: #8b008b;">co</span> = Atoms([Atom(<span style="color: #228b22;">'C'</span>,[0,   0, 0]),
            Atom(<span style="color: #228b22;">'O'</span>,[1.2, 0, 0])],
            cell=(6., 6., 6.))

<span style="color: #8b0000;">with</span> jasp(<span style="color: #228b22;">'molecules/simple-co'</span>, <span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">output dir</span>
          xc=<span style="color: #228b22;">'PBE'</span>,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the exchange-correlation functional</span>
          nbands=6,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">number of bands</span>
          encut=350, <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">planewave cutoff</span>
          ismear=1,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Methfessel-Paxton smearing</span>
          sigma=0.01,<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">very small smearing factor for a molecule</span>
          atoms=co) <span style="color: #8b0000;">as</span> calc:
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'energy = {0} eV'</span>.<span style="color: #cd0000;">format</span>(co.get_potential_energy())
    <span style="color: #8b0000;">print</span> co.get_forces()
    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'JSON'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
        f.write(calc.json)
</pre>
</div>

<pre class="example">
energy = -14.687906 eV
[[ 5.095  0.     0.   ]
 [-5.095  0.     0.   ]]
</pre>

<p>
Now, we can analyze the JSON file independently of jasp. The json data contains all the inputs we used for the VASP calculation, the atomic geometry, and many of the outputs of the calculation. Here is the <a href="/media/2013-10-19-Serializing-jasp-calculations-as-json-data/JSON">JSON</a>file.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> json
<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'molecules/simple-co/JSON'</span>, <span style="color: #228b22;">'rb'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">d</span> = json.loads(f.read())

<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'The energy is {0}'</span>.<span style="color: #cd0000;">format</span>(d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'total_energy'</span>]))
<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'The forces are {0}'</span>.<span style="color: #cd0000;">format</span>(d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'forces'</span>]))
</pre>
</div>

<pre class="example">
The energy is -14.687906
The forces are [[5.095488, 0.0, 0.0], [-5.095488, 0.0, 0.0]]
</pre>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Including extra information in the JSON file</h2>
<div class="outline-text-2" id="text-2">
<p>
If we use a slightly different syntax, we can also include the total DOS in the JSON file.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> jasp <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">with</span> jasp(<span style="color: #228b22;">'molecules/simple-co'</span>) <span style="color: #8b0000;">as</span> calc:
    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'JSON-DOS'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
        f.write(calc_to_json(calc, dos=<span style="color: #cd0000;">True</span>))
</pre>
</div>

<p>
To illustrate that we have done that, let us plot the DOS without using <code>jasp</code> from the <a href="/media/2013-10-19-Serializing-jasp-calculations-as-json-data/JSON-DOS">JSON-DOS</a>file.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> json
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'molecules/simple-co/JSON-DOS'</span>, <span style="color: #228b22;">'rb'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">d</span> = json.loads(f.read())

<span style="color: #8b008b;">energies</span> = d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'dos'</span>][<span style="color: #228b22;">'e'</span>]
<span style="color: #8b008b;">dos</span> = d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'dos'</span>][<span style="color: #228b22;">'dos'</span>]
plt.plot(energies, dos)
plt.savefig(<span style="color: #228b22;">'molecules/simple-co/dos.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2013-10-19-Serializing-jasp-calculations-as-json-data/dos.png">
</p>
</div>

<p>
We are still working on getting atom-projected DOS into the json file, and ensuring that all the spin cases are handled (e.g. the spin-up and spin-down DOS).
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Limitations?</h2>
<div class="outline-text-2" id="text-3">
<p>
JSON is flexible, and can store text and numeric data. It does not store numpy arrays, but rather it is limited to storing lists of data. You would have to convert them back to arrays if you want to do array math. You probably wouldn't want to store a 3d array of electron density in this format, although it probably isn't worse than a CUBE file format. We haven't tested these files very significantly yet at a large scale to see how fast it is to read from lots of them.
</p>

<p>
Nonetheless, this looks like a reasonable format to share data in human and machine readable form, without violating the VASP licence conditions.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/10/19/Serializing-jasp-calculations-as-json-data.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
