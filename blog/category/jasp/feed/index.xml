<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sun, 23 Mar 2014 19:37:26 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>yasnippets for jasp, ase and python</title>
      <link>http://jkitchin.github.io/blog/2014/02/17/yasnippets-for-jasp-ase-and-python</link>
      <pubDate>Mon, 17 Feb 2014 09:03:50 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[ase]]></category>
      <category><![CDATA[jasp]]></category>
      <guid isPermaLink="false">5IQtbu_TyyiAG1EcGdlxi4IDXtc=</guid>
      <description>yasnippets for jasp, ase and python</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tangle the snippets, and add them to yasnippet</a></li>
<li><a href="#sec-2">2. Using the snippets</a></li>
<li><a href="#sec-3">3. Appendix</a>
<ul>
<li><a href="#sec-3-1">3.1. jasp snippets</a></li>
<li><a href="#sec-3-2">3.2. ase snippets</a></li>
<li><a href="#sec-3-3">3.3. python snippets</a></li>
</ul>
</li>
</ul>
</div>
</div>

<p>
In using [[<a href="http://github.com/jkitchin/jasp">http://github.com/jkitchin/jasp</a> for calculations, I find there are lots of small python phrases I use over and over. Today I will examine using <a href="http://capitaomorte.github.io/yasnippet/index.html">yasnippet</a> to save time and keystrokes. yasnippet is a template expansion module, where you type a small set of characters, press <code>Tab</code>, and the
characters "expand" to the full text. It is pretty sophisticated, and allows you to define "tab-stops" which you interactively fill in, and tab between like filling in a form.
</p>

<p>
All the snippets are defined in the <pre>*Appendix</pre> .
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tangle the snippets, and add them to yasnippet</h2>
<div class="outline-text-2" id="text-1">
<p>
Each snippet definition belongs in a file in a directory. The main directory is called "snippets". Since I anticipate using these snippets in org-mode, each snippet is defined in a directory within snippets called "org-mode". First, we make the directory here. I also want to use the snippets in python mode, so we also create a python-mode directory here. We do not have to duplicate the snippets. We can create a file called <a href="http://capitaomorte.github.io/yasnippet/snippet-organization.html">.yas-parents</a> , with one line in it containing "org-mode".
</p>

<div class="org-src-container">

<pre class="src src-sh">mkdir -p snippets/org-mode
mkdir -p snippets/python-mode
<span style="color: #cd0000;">echo</span> <span style="color: #228b22;">"org-mode"</span> &gt; snippets/python-mode/.yas-parents
</pre>
</div>

<p>
Each snippet is defined in a src block with  a <code>:tangle</code> header. So, we can extract them all in one command here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">snippets/org-mode/iase</td>
<td class="left">snippets/org-mode/imp</td>
<td class="left">snippets/org-mode/inp</td>
<td class="left">snippets/org-mode/ij</td>
<td class="left">snippets/org-mode/pl</td>
<td class="left">snippets/org-mode/pyl</td>
<td class="left">snippets/org-mode/pxl</td>
<td class="left">snippets/org-mode/pp</td>
<td class="left">snippets/org-mode/npa</td>
<td class="left">snippets/org-mode/awt</td>
<td class="left">snippets/org-mode/avw</td>
<td class="left">snippets/org-mode/agf</td>
<td class="left">snippets/org-mode/ape</td>
<td class="left">snippets/org-mode/atms</td>
<td class="left">snippets/org-mode/atm</td>
<td class="left">snippets/org-mode/cga</td>
<td class="left">snippets/org-mode/cc</td>
<td class="left">snippets/org-mode/wjn</td>
<td class="left">snippets/org-mode/wjl</td>
</tr>
</tbody>
</table>

<p>
We also need to add our new directory to yasnippets. This is done by adding the directory to the <code>yas-snippet-dirs</code> variable. You could add this to your init.el file to permanently add these snippets.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'yas-snippet-dirs <span style="color: #228b22;">"c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/snippets"</span>)
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/snippets</td>
<td class="left">~/.emacs.d/snippets</td>
<td class="left">c:/users/jkitchin/Dropbox/kitchingroup/jmax/elpa/yasnippet-20140106.1009/snippets</td>
</tr>
</tbody>
</table>

<p>
Finally, we reload all the snippet definitions, so our new definitions are ready to use.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(yas-reload-all)
</pre>
</div>

<pre class="example">
[yas] Reloaded everything (snippets will load just-in-time)... (some errors, check *Messages*).
</pre>

<p>
Alternatively, you might just load this directory.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(yas-load-directory <span style="color: #228b22;">"./snippets"</span>)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Using the snippets</h2>
<div class="outline-text-2" id="text-2">
<p>
Each of these snippets is for a python phrase, but I usually write my python blocks in org-mode. You would use these by typing the shortcut name, and then pressing tab. Below I show what each shortcut expands to.
</p>

<p>
wjl &rarr; <code>with jasp('') as calc:</code>
</p>

<p>
wjn &rarr; <code>with jasp('',) as calc:</code>
    <code>calc.calculate(atoms)</code>
</p>

<p>
cc  &rarr; <code>calc.calculate(atoms)</code>
</p>

<p>
cga &rarr; <code>atoms = calc.get_atoms()</code>
</p>

<p>
atm &rarr; <code>Atom('', )</code>
</p>

<p>
atms &rarr; <code>atoms = Atoms([], cell</code>)=
</p>

<p>
ape &rarr; <code>atoms.get_potential_energy()</code>
</p>

<p>
agf &rarr; <code>atoms.get_forces()</code>
</p>

<p>
avw &rarr; <code>from ase.visualize import view</code>
<code>view(atoms)</code>
</p>

<p>
awt &rarr; <code>from ase.io import write</code>
<code>write('.png', atoms, show_unit_cell=2)</code>
</p>

<p>
npa &rarr; <code>np.array()</code>
</p>

<p>
pp &rarr; <code>plt.plot(, )</code>
</p>

<p>
pxl &rarr; <code>plt.xlabel()</code>
</p>

<p>
pyl &rarr; <code>plt.ylabel()</code>
</p>

<p>
pl &rarr; <code>plt.legend()</code>
</p>

<p>
ij &rarr; <code>from jasp import *</code>
</p>

<p>
inp &rarr; <code>import numpy as np</code>
</p>

<p>
imp &rarr; <code>import matplotlib.pyplot as plt</code>
</p>

<p>
iase &rarr; <code>from ase import Atom, Atoms</code>
</p>

<p>
What other snippets would be handy?
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Appendix</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> jasp snippets</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
with jasp('$1') as calc:
    $0
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
with jasp('$1',$0) as calc:
    calc.calculate(atoms)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
calc.calculate(atoms)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
atoms = calc.get_atoms()
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> ase snippets</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Template for an ase.Atom
</p>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
Atom('$1', $2)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
atoms = Atoms([$1], cell=$2)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
atoms.get_potential_energy()
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
atoms.get_forces()
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
from ase.visualize import view
view(${1:atoms})
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
from ase.io import write
write('$1.png', ${2:atoms}, show_unit_cell=${3:2})
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> python snippets</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
import numpy as np
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
import matplotlib.pyplot as plt
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
from ase import Atom, Atoms
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
np.array($0)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
plt.plot($1, $2)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
plt.xlabel($1)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
plt.ylabel($1)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
plt.legend($1)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-snippet"># -*- mode: snippet -*-
# --
from jasp import *
</pre>
</div>
</div>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/17/yasnippets-for-jasp,-ase-and-python.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Serializing jasp calculations as json data</title>
      <link>http://jkitchin.github.io/blog/2013/10/19/Serializing-jasp-calculations-as-json-data</link>
      <pubDate>Sat, 19 Oct 2013 14:33:51 EDT</pubDate>
      <category><![CDATA[vasp]]></category>
      <category><![CDATA[ase]]></category>
      <category><![CDATA[jasp]]></category>
      <guid isPermaLink="false">7Iyi5XdH1nYlzbMyfxMdYcLjqEg=</guid>
      <description>Serializing jasp calculations as json data</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. The simplest case of a simple calculation</a></li>
<li><a href="#sec-2">2. Including extra information in the JSON file</a></li>
<li><a href="#sec-3">3. Limitations?</a></li>
</ul>
</div>
</div>

<p>
We use <a href="http://www.vasp.at/">VASP</a>to calculate materials properties in our research We use the <a href="https://github.com/jkitchin/jasp/tree/dev">jasp</a>python module we have developed to setup, run and analyze those calculations. One of the things we have worked on developing recently is to more transparently share how do this kind of work by using org-mode supporting information files. Doing this should make our research more reproducible, and allow others to build off of it more easily.
</p>

<p>
We have run into the following problem trying to share VASP results however. The VASP license prohibits us from sharing the POTCAR files that are used to run the calculations. That is unfortunate, but since these files are also what give VASP some competitive advantage, they are protected, and we agreed to that when we bought the license. The problem is that the <code>jasp</code> module requires the POTCAR files to work, so without them, our scripts are not reproducible by researchers without a VASP license. 
</p>

<p>
So, we have been looking at new ways to share the data from our calculations. In this post, we consider representing the calculation as a JSON file. We will look at a couple of new features built into the development branch of <code>jasp</code>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The simplest case of a simple calculation</h2>
<div class="outline-text-2" id="text-1">
<p>
Here we setup and run a simple calculation, and output the JSON file.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase <span style="color: #8b0000;">import</span> Atoms, Atom
<span style="color: #8b0000;">from</span> jasp <span style="color: #8b0000;">import</span> *
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
np.set_printoptions(precision=3, suppress=<span style="color: #cd0000;">True</span>)

<span style="color: #8b008b;">co</span> = Atoms([Atom(<span style="color: #228b22;">'C'</span>,[0,   0, 0]),
            Atom(<span style="color: #228b22;">'O'</span>,[1.2, 0, 0])],
            cell=(6., 6., 6.))

<span style="color: #8b0000;">with</span> jasp(<span style="color: #228b22;">'molecules/simple-co'</span>, <span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">output dir</span>
          xc=<span style="color: #228b22;">'PBE'</span>,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the exchange-correlation functional</span>
          nbands=6,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">number of bands</span>
          encut=350, <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">planewave cutoff</span>
          ismear=1,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Methfessel-Paxton smearing</span>
          sigma=0.01,<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">very small smearing factor for a molecule</span>
          atoms=co) <span style="color: #8b0000;">as</span> calc:
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'energy = {0} eV'</span>.<span style="color: #cd0000;">format</span>(co.get_potential_energy())
    <span style="color: #8b0000;">print</span> co.get_forces()
    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'JSON'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
        f.write(calc.json)
</pre>
</div>

<pre class="example">
energy = -14.687906 eV
[[ 5.095  0.     0.   ]
 [-5.095  0.     0.   ]]
</pre>

<p>
Now, we can analyze the JSON file independently of jasp. The json data contains all the inputs we used for the VASP calculation, the atomic geometry, and many of the outputs of the calculation. Here is the <a href="/media/2013-10-19-Serializing-jasp-calculations-as-json-data/JSON">JSON</a>file.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> json
<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'molecules/simple-co/JSON'</span>, <span style="color: #228b22;">'rb'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">d</span> = json.loads(f.read())

<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'The energy is {0}'</span>.<span style="color: #cd0000;">format</span>(d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'total_energy'</span>]))
<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'The forces are {0}'</span>.<span style="color: #cd0000;">format</span>(d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'forces'</span>]))
</pre>
</div>

<pre class="example">
The energy is -14.687906
The forces are [[5.095488, 0.0, 0.0], [-5.095488, 0.0, 0.0]]
</pre>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Including extra information in the JSON file</h2>
<div class="outline-text-2" id="text-2">
<p>
If we use a slightly different syntax, we can also include the total DOS in the JSON file.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> jasp <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">with</span> jasp(<span style="color: #228b22;">'molecules/simple-co'</span>) <span style="color: #8b0000;">as</span> calc:
    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'JSON-DOS'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
        f.write(calc_to_json(calc, dos=<span style="color: #cd0000;">True</span>))
</pre>
</div>

<p>
To illustrate that we have done that, let us plot the DOS without using <code>jasp</code> from the <a href="/media/2013-10-19-Serializing-jasp-calculations-as-json-data/JSON-DOS">JSON-DOS</a>file.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> json
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'molecules/simple-co/JSON-DOS'</span>, <span style="color: #228b22;">'rb'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">d</span> = json.loads(f.read())

<span style="color: #8b008b;">energies</span> = d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'dos'</span>][<span style="color: #228b22;">'e'</span>]
<span style="color: #8b008b;">dos</span> = d[<span style="color: #228b22;">'data'</span>][<span style="color: #228b22;">'dos'</span>][<span style="color: #228b22;">'dos'</span>]
plt.plot(energies, dos)
plt.savefig(<span style="color: #228b22;">'molecules/simple-co/dos.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2013-10-19-Serializing-jasp-calculations-as-json-data/dos.png">
</p>
</div>

<p>
We are still working on getting atom-projected DOS into the json file, and ensuring that all the spin cases are handled (e.g. the spin-up and spin-down DOS).
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Limitations?</h2>
<div class="outline-text-2" id="text-3">
<p>
JSON is flexible, and can store text and numeric data. It does not store numpy arrays, but rather it is limited to storing lists of data. You would have to convert them back to arrays if you want to do array math. You probably wouldn't want to store a 3d array of electron density in this format, although it probably isn't worse than a CUBE file format. We haven't tested these files very significantly yet at a large scale to see how fast it is to read from lots of them.
</p>

<p>
Nonetheless, this looks like a reasonable format to share data in human and machine readable form, without violating the VASP licence conditions.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/10/19/Serializing-jasp-calculations-as-json-data.org">org-mode source</a><p>]]></content:encoded>
    </item>
  </channel>
</rss>
