<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-08-25T18:09:54Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Expanding orgmode.py to get better org-python integration]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration" />
    <id>http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration</id>
    <updated>2016-05-29T15:51:52Z</updated>
    <published>2016-05-29T14:03:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Expanding orgmode.py to get better org-python integration]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. A Figure from Python</a></li>
<li><a href="#sec-2">2. An example table.</a></li>
<li><a href="#sec-3">3. Miscellaneous outputs</a></li>
<li><a href="#sec-4">4. Summary</a></li>
</ul>
</div>
</div>

<p>
I have only ever been about 80% satisfied with Python/org-mode integration. I have developed a particular workflow that I like a lot, and works well for solving scientific and engineering problems. I typically use stand-alone Python blocks, i.e. not sessions. I tend to use print statements to create output that I want to see, e.g. the value of a calculation. I also tend to create multiple figures in a single block, which I want to display in the buffer. This workflow is represented extensively in <a href="http://kitchingroup.cheme.cmu.edu/pycse/">PYCSE</a> and <a href="https://github.com/jkitchin/dft-book">dft-book</a> which collectively have 700+ src blocks! So I use it alot ;)
</p>

<p>
There are some deficiencies though. For one, I have had to hand build any figures/tables that are generated from the code blocks. That means duplicating filenames, adding the captions, etc&#x2026; It is not that easy to update captions from the code blocks, and there has been limited ability to use markup in the output.
</p>

<p>
Well finally I had some ideas to change this. The ideas are:
</p>

<ol class="org-ol">
<li>Patch matplotlib so that savefig actually returns a figure link that can be printed to the output. savefig works the same otherwise.
</li>

<li>Patch matplotlib.pyplot.show to save the figure, and print a figure link in thhe output.
</li>

<li>Create special functions to generate org tables and figures.
</li>

<li>Create some other functions to generate some blocks and elements.
</li>
</ol>

<p>
Then we could just import the library in our Python scripts (or add it as a prologue) and get this nice functionality. You can find the code for this here:
</p>

<p>
<a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py">https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py</a> 
</p>

<p>
Finally, it seems like a good idea to specify that we want our results to be an org drawer. This makes the figures/tables export, and allows us to generate math and other markup in our programs. That has the downside of making exported results not be in the "verbatim" markup I am used to, but that may be solvable in other ways. We can make the org drawer output the default like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> org-babel-default-header-args:python
      (cons '(<span style="color: #006FE0;">:results</span> . <span style="color: #008000;">"output org drawer replace"</span>)
            (assq-delete-all <span style="color: #006FE0;">:results</span> org-babel-default-header-args)))
</pre>
</div>

<p>
With these, using Python blocks in org-mode gets quite a bit better!
</p>

<p>
Here is the first example, with savefig. I have the savefig function return the link, so we have to print it. We use this feature later. The figure is automatically inserted to the buffer. Like magic!
</p>

<p>
Here is a fun figure from <a href="http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html">http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html</a> 
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode

<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.xkcd()

<span style="color: #BA36A5;">N</span> = 150
<span style="color: #BA36A5;">r</span> = 2 * np.random.rand(N)
<span style="color: #BA36A5;">theta</span> = 2 * np.pi * np.random.rand(N)
<span style="color: #BA36A5;">area</span> = 200 * r**2 * np.random.rand(N)
<span style="color: #BA36A5;">colors</span> = theta

<span style="color: #BA36A5;">ax</span> = plt.subplot(111, polar=<span style="color: #D0372D;">True</span>)
<span style="color: #BA36A5;">c</span> = plt.scatter(theta, r, c=colors, s=area, cmap=plt.cm.hsv)
c.set_alpha(0.75)

<span style="color: #0000FF;">print</span>(plt.savefig(<span style="color: #008000;">'test.png'</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/test.png"> 
</p>
</div>

<p>
How about another example with show. This just prints the link directly. It seems to make sense to do it that way. This is from <a href="http://matplotlib.org/xkcd/examples/showcase/xkcd.html">http://matplotlib.org/xkcd/examples/showcase/xkcd.html</a> .
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

<span style="color: #0000FF;">from</span> matplotlib <span style="color: #0000FF;">import</span> pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

plt.xkcd()

<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(1, 1, 1)
ax.spines[<span style="color: #008000;">'right'</span>].set_color(<span style="color: #008000;">'none'</span>)
ax.spines[<span style="color: #008000;">'top'</span>].set_color(<span style="color: #008000;">'none'</span>)
plt.xticks([])
plt.yticks([])
ax.set_ylim([-30, 10])

<span style="color: #BA36A5;">data</span> = np.ones(100)
<span style="color: #BA36A5;">data</span>[70:] -= np.arange(30)

plt.annotate(
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'THE DAY I REALIZED\nI COULD COOK BACON\nWHENEVER I WANTED'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xy=(70, 1), arrowprops=<span style="color: #006FE0;">dict</span>(arrowstyle=<span style="color: #008000;">'-&gt;'</span>), xytext=(15, -10))

plt.plot(data)

plt.xlabel(<span style="color: #008000;">'time'</span>)
plt.ylabel(<span style="color: #008000;">'my overall health'</span>)
plt.show()

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">An intermediate result</span>
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Some intermediate result for x - 4 = 6:'</span>)
<span style="color: #BA36A5;">x</span> = 6 + 4
org.fixed_width(<span style="color: #008000;">'x = {}'</span>.<span style="color: #006FE0;">format</span>(x))

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">And another figure</span>
<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(1, 1, 1)
ax.bar([-0.125, 1.0-0.125], [0, 100], 0.25)
ax.spines[<span style="color: #008000;">'right'</span>].set_color(<span style="color: #008000;">'none'</span>)
ax.spines[<span style="color: #008000;">'top'</span>].set_color(<span style="color: #008000;">'none'</span>)
ax.xaxis.set_ticks_position(<span style="color: #008000;">'bottom'</span>)
ax.set_xticks([0, 1])
ax.set_xlim([-0.5, 1.5])
ax.set_ylim([0, 110])
ax.set_xticklabels([<span style="color: #008000;">'CONFIRMED BY\nEXPERIMENT'</span>, <span style="color: #008000;">'REFUTED BY\nEXPERIMENT'</span>])
plt.yticks([])

plt.title(<span style="color: #008000;">"CLAIMS OF SUPERNATURAL POWERS"</span>)

plt.show()
</pre>
</div>

<p>
<img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/56bc77cfebd90f8a1cb22421c1c4f2c4a05fedeb.png"> 
Some intermediate result for x - 4 = 6:
</p>
<pre class="example">
x = 10
</pre>

<div class="figure">
<p><img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/2daee706d3b906a25914a6ca975906047af7fa35.png"> 
</p>
</div>

<p>
See, the figures show where they belong, with intermediate results that have some formatting, and they export correctly. Nice.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> A Figure from Python</h2>
<div class="outline-text-2" id="text-1">
<p>
It has been a long desire of mine to generate full figures with captions from code blocks, and to get them where I want like this one:
</p>


<div id="fig:1" class="figure">
<p><img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/smarts.png"> 
</p>
<p><span class="figure-number">Figure 3:</span> An italicized <i>histogram</i> of 10000 points</p>
</div>

<p>
Here is the code to generate the full figure. Note we use the output of savefig as the filename. That lets us save some intermediate variable construction. That seems nice.
</p>

<div class="org-src-container">

<pre class="src src-python" id="fig-1"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.xkcd()

<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.mlab <span style="color: #0000FF;">as</span> mlab
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">example data</span>
<span style="color: #BA36A5;">mu</span> = 100 <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">mean of distribution</span>
<span style="color: #BA36A5;">sigma</span> = 15 <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">standard deviation of distribution</span>
<span style="color: #BA36A5;">x</span> = mu + sigma * np.random.randn(10000)

<span style="color: #BA36A5;">num_bins</span> = 50
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the histogram of the data</span>
<span style="color: #BA36A5;">n</span>, <span style="color: #BA36A5;">bins</span>, <span style="color: #BA36A5;">patches</span> = plt.hist(x, num_bins, normed=1, facecolor=<span style="color: #008000;">'green'</span>, alpha=0.5)
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">add a 'best fit' line</span>
<span style="color: #BA36A5;">y</span> = mlab.normpdf(bins, mu, sigma)
plt.plot(bins, y, <span style="color: #008000;">'r--'</span>)
plt.xlabel(<span style="color: #008000;">'Smarts'</span>)
plt.ylabel(<span style="color: #008000;">'Probability'</span>)
plt.title(r<span style="color: #008000;">'Histogram of IQ: $\mu=100$, $\sigma=15$'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Tweak spacing to prevent clipping of ylabel</span>
plt.subplots_adjust(left=0.15)

org.figure(plt.savefig(<span style="color: #008000;">'smarts.png'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  label=<span style="color: #008000;">'fig:1'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  caption=<span style="color: #008000;">'An italicized /histogram/ of {} points'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">len</span>(x)),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  attributes=[(<span style="color: #008000;">'LATEX'</span>, <span style="color: #008000;">':width 3in'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  (<span style="color: #008000;">'HTML'</span>, <span style="color: #008000;">':width 300'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  (<span style="color: #008000;">'ORG'</span>, <span style="color: #008000;">':width 300'</span>)])
</pre>
</div>

<p>
That is pretty awesome. You cannot put figures in more than one place like this, and you might not want to mix results with this, but it is still pretty awesome!
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> An example table.</h2>
<div class="outline-text-2" id="text-2">
<p>
Finally, I have wanted the same thing for tables. Here is the resulting table.
</p>

<table id="table-1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> Dependence of the energy on the encut value.</caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">ENCUT</th>
<th scope="col" class="right">Energy (eV)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">100</td>
<td class="right">11.233</td>
</tr>

<tr>
<td class="right">200</td>
<td class="right">21.233</td>
</tr>

<tr>
<td class="right">300</td>
<td class="right">31.233</td>
</tr>

<tr>
<td class="right">400</td>
<td class="right">41.233</td>
</tr>

<tr>
<td class="right">500</td>
<td class="right">51.233</td>
</tr>
</tbody>
</table>

<p>
Here is the code block that generated it.
</p>

<div class="org-src-container">

<pre class="src src-python" id="table-1"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

<span style="color: #BA36A5;">data</span> = [[<span style="color: #008000;">'&lt;5&gt;'</span>, <span style="color: #008000;">'&lt;11&gt;'</span>],  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Column aligners</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   [<span style="color: #008000;">'ENCUT'</span>, <span style="color: #008000;">'Energy (eV)'</span>],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #D0372D;">None</span>]

<span style="color: #0000FF;">for</span> encut <span style="color: #0000FF;">in</span> [100, 200, 300, 400, 500]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> += [[encut, 1.233 + 0.1 * encut]]

org.table(data,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> name=<span style="color: #008000;">'table-1'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> caption=<span style="color: #008000;">'Dependence of the energy on the encut value.'</span>)
</pre>
</div>


<p>
The only obvious improvement on this is similar to getting images to redisplay after running a code block, it might be nice to reformat tables to make sure they are pretty looking. Otherwise this is good.
</p>


<p>
Let's go ahead and try that. Here we narrow down to the results, and align the tables in that region.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-align-visible-tables</span> ()
  <span style="color: #036A07;">"Align all the tables in the results."</span>
  (<span style="color: #0000FF;">let</span> ((location (org-babel-where-is-src-block-result)) start)
    (<span style="color: #0000FF;">when</span> location
      (<span style="color: #0000FF;">setq</span> start (- location 1))
      (<span style="color: #0000FF;">save-restriction</span>
        (<span style="color: #0000FF;">save-excursion</span>
          (goto-char location) (forward-line 1)
          (narrow-to-region start (org-babel-result-end))
          (goto-char (point-min))
          (<span style="color: #0000FF;">while</span> (re-search-forward org-table-any-line-regexp nil t)
            (<span style="color: #0000FF;">save-excursion</span> (org-table-align))
            (<span style="color: #0000FF;">or</span> (looking-at org-table-line-regexp)
                (forward-char 1)))
          (re-search-forward org-table-any-border-regexp nil 1))))))

(add-hook 'org-babel-after-execute-hook
          (<span style="color: #0000FF;">lambda</span> () (org-align-visible-tables)))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">nil</td>
<td class="left">(org-align-visible-tables)</td>
</tr>

<tr>
<td class="left">lambda</td>
<td class="left">nil</td>
<td class="left">(org-refresh-images)</td>
</tr>
</tbody>
</table>

<p>
And that seems to solve that problem now too!
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Miscellaneous outputs</h2>
<div class="outline-text-2" id="text-3">
<p>
Here are some examples of getting org-output from the pycse.orgmode module.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

org.verbatim(<span style="color: #008000;">'One liner verbatim'</span>)

org.verbatim(<span style="color: #008000;">'''multiline</span>
<span style="color: #008000;">output</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  with indentation</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  at a few levels</span>
<span style="color: #008000;">that is verbatim.'''</span>)

org.fixed_width(<span style="color: #008000;">'your basic result'</span>)

org.fixed_width(<span style="color: #008000;">'''your</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> basic</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   result</span>
<span style="color: #008000;">on a few lines.'''</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">A latex block</span>
org.latex(<span style="color: #008000;">'\(e^{i\pi} - 1 = 0\)'</span>)

org.org(r<span style="color: #008000;">'The equation is \(E = h \nu\).'</span>)
</pre>
</div>
<p>
<code>One liner</code>
</p>

<pre class="example">
multiline
output
   with indentation
       at a few levels
that is verbatim.
</pre>

<pre class="example">
your basic result
your
  basic
    result
on a few lines.
</pre>

<p>
The equation is \(E = h \nu\).
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Summary</h2>
<div class="outline-text-2" id="text-4">
<p>
This looks promising to me. There are a few things to get used to, like always having org output, and some minor differences in making figures. On the whole this looks like a big improvement though! I look forward to working with it more.</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/05/29/Expanding-orgmode.py-to-get-better-org-python-integration.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[ob-hy.el - or better integration of hylang in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode</id>
    <updated>2016-04-01T19:31:37Z</updated>
    <published>2016-04-01T19:31:37Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[ob-hy.el - or better integration of hylang in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tests</a>
<ul>
<li><a href="#sec-1-1">1.1. Simple</a></li>
<li><a href="#sec-1-2">1.2. vars in header</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Summary</a></li>
</ul>
</div>
</div>
<p>
The point of this post is to develop and test a more substantial integration of Hy into org-mode. We develop ob-hy.el here. This is based off of ob-clojure.el.
</p>

<p>
The next few blocks will get tangled to ob-hy.el. First, some variables.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">ob</span>)

(add-to-list 'org-structure-template-alist
             '(<span style="color: #008000;">"hy"</span> <span style="color: #008000;">"#+BEGIN_SRC hy\n?\n#+END_SRC"</span> <span style="color: #008000;">"&lt;src lang=\"hy\"&gt;\n?\n&lt;/src&gt;"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-tangle-lang-exts</span>)
(add-to-list 'org-babel-tangle-lang-exts '(<span style="color: #008000;">"hy"</span> . <span style="color: #008000;">"hy"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-default-header-args:hy</span> '())
(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-header-args:hy</span> '((<span style="color: #006FE0;">:results</span> . <span style="color: #008000;">"output"</span>)))
</pre>
</div>

<pre class="example">
org-babel-header-args:hy
</pre>

<p>
Next a function to expand the code body. This will allow us to pass vars in the header.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-expand-body:hy</span> (body params)
  <span style="color: #036A07;">"Expand BODY according to PARAMS, return the expanded body."</span>
  (<span style="color: #0000FF;">let*</span> ((vars (mapcar #'cdr (org-babel-get-header params <span style="color: #006FE0;">:var</span>)))
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (print-level nil)
         (print-length nil)
         (body (org-babel-trim
                (<span style="color: #0000FF;">if</span> (&gt; (length vars) 0)
                    (concat <span style="color: #008000;">"(let ["</span>
                            (mapconcat
                             (<span style="color: #0000FF;">lambda</span> (var)
                               (format
                                <span style="color: #008000;">"%S (quote %S)"</span>
                                (car var)
                                (cdr var)))
                             vars <span style="color: #008000;">"\n      "</span>)
                            <span style="color: #008000;">"]\n"</span> body <span style="color: #008000;">")"</span>)
                  body))))
    (<span style="color: #0000FF;">when</span> (not (member <span style="color: #008000;">"output"</span> result-params))
      (<span style="color: #0000FF;">setq</span> body (format <span style="color: #008000;">"(print (do  %s\n))"</span> body)))
    body))
</pre>
</div>

<pre class="example">
org-babel-expand-body:hy
</pre>

<p>
And a function to execute the body. We still use a simple approach to write the code to a temp-file, execute it, capture the output, and delete the file. This limits things to
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  <span style="color: #036A07;">"Execute a block of hy code with Babel."</span>
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>))
         result
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (body (org-babel-expand-body:hy body params)))

    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))

    (<span style="color: #0000FF;">unwind-protect</span>
        (<span style="color: #0000FF;">progn</span>
          (<span style="color: #0000FF;">cond</span>
           ((member <span style="color: #008000;">"body"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result body))
           ((member <span style="color: #008000;">"python"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py %s"</span> tempfile))))
           ((member <span style="color: #008000;">"ast"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py -a -np %s"</span> tempfile))))
           (t
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy %s"</span> tempfile)))))

          (<span style="color: #0000FF;">org-babel-result-cond</span> result-params
            result
            (<span style="color: #0000FF;">condition-case</span> nil (org-babel-script-escape result)
              (<span style="color: #ff0000; font-weight: bold;">error</span> result))))
      (delete-file tempfile))))

(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">ob-hy</span>)
</pre>
</div>

<pre class="example">
ob-hy
</pre>

<p>
Now we tangle and load those blocks.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(load-file <span style="color: #008000;">"ob-hy.el"</span>)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Next, we do some tests. They are all simple tests.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tests</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Simple</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
We can see how this turns into Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
print(u'Hy world')
</pre>

<p>
or the AST:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Module(
    body=[Expr(value=Call(func=Name(id='print'), args=[Str(s=u'Hy world')], keywords=[], starargs=None, kwargs=None))])
</pre>

<p>
Let's test :results value. It is not quite the value since we seem to get everything that is output from the script, but if you don't print stuff, it seems to get it right.
</p>

<div class="org-src-container">

<pre class="src src-hy"><span style="color: #008000;">"test"</span>
(<span style="color: #006FE0;">+</span> 1 2 3)
</pre>
</div>

<pre class="example">
6
</pre>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> vars in header</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Here we test out adding variables to the header lines.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="hy-world">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Interesting, I am not sure where the space between them comes from. Let's check out the :results body option. It will show us the hy script that gets run.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "world")]
(print "Hy" data))
</pre>

<p>
Nothing obvious about the space there. We can test out passing block results in here.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
Hy  world
</pre>

<p>
Here is the body of that:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "Hy world
")]
(print data))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary</h2>
<div class="outline-text-2" id="text-2">
<p>
It works well enough to make testing in org-mode pretty convenient. I can't think of anything else it "needs" right now, although communication with a repl might make it faster, and sessions are not supported at the moment. Saving that for another day ;)
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/01/ob-hy.el---or-better-integration-of-hylang-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Jump to a tagged src block]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block" />
    <id>http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block</id>
    <updated>2016-03-30T14:26:35Z</updated>
    <published>2016-03-30T14:26:35Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Jump to a tagged src block]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block"><![CDATA[


<p>
If you have a lot of src-blocks in your org-file, it might be nice to "tag" them and be able to jump around between them using tag expressions, or by the name of the block, language etc&#x2026; Here we develop a way to do that and create a handy function to jump to blocks in the current buffer.
</p>

<p>
First, we look at how to "tag" a src-block. One way is to use a header like this:
</p>

<pre class="example">
#+header: :tags cool idiom two
</pre>

<p>
These are not tags in the usual org-mode sense, they are just a space separated list of words we will later treat as tags. We can get the tags on a src-block with this function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-block-tags</span> (src-block)
  <span style="color: #036A07;">"Return tags for SRC-BLOCK (an org element)."</span>
  (<span style="color: #0000FF;">let*</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                   (mapcar 'org-babel-parse-header-arguments
                           (org-element-property <span style="color: #006FE0;">:header</span> src-block))))
         (tags (cdr (assoc <span style="color: #006FE0;">:tags</span> headers))))
    (<span style="color: #0000FF;">when</span> tags
      (split-string tags))))
</pre>
</div>

<pre class="example">
src-block-tags
</pre>

<p>
Now, we make a src-block with the tags "test" "one" and "idiom", and see how to tell if the block matches the tag expression "test+idiom".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp" id="tag-matcher">(<span style="color: #0000FF;">let*</span> ((lexical-binding nil)
       (todo-only nil)
       (tags-list (src-block-tags (org-element-context)))
       (tag-expression <span style="color: #008000;">"test+idiom"</span>))
  (eval (cdr (org-make-tags-matcher tag-expression))))
</pre>
</div>
<pre class="example">
t
</pre>

<p>
It does, so we wrap that up into a function that tells us if a src-block matches some tag expression.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-block-match-tag-expression-p</span> (src-block tag-expression)
  <span style="color: #036A07;">"Determine if SRC-BLOCK matches TAG-EXPRESSION."</span>
  (<span style="color: #0000FF;">let*</span> ((lexical-binding nil)
         (todo-only nil)
         (tags-list (src-block-tags src-block)))
    (eval (cdr (org-make-tags-matcher tag-expression)))))
</pre>
</div>
<pre class="example">
src-block-match-tag-expression-p
</pre>

<p>
Here we test that on a block tagged "one three" on the expression "one-two" which means tagged one and not two.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(src-block-match-tag-expression-p (org-element-context) <span style="color: #008000;">"one-two"</span>)
</pre>
</div>
<pre class="example">
t
</pre>

<p>
Those are the main pieces we need to jump around. We just need a selection tool with a list of filtered candidates. We get a list of src-block candidates to choose from in the next block as an example. Here we get blocks tagged one but not two. We can incorporate this into a selection backend like helm or ivy.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) 'src-block
  (<span style="color: #0000FF;">lambda</span> (src-block)
    (<span style="color: #0000FF;">when</span> (src-block-match-tag-expression-p src-block <span style="color: #008000;">"one-two"</span>)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Get a string and marker</span>
      (cons
       (format <span style="color: #008000;">"%15s|%15s|%s"</span>
               (org-element-property <span style="color: #006FE0;">:name</span> src-block)
               (org-element-property <span style="color: #006FE0;">:language</span> src-block)
               (org-element-property <span style="color: #006FE0;">:header</span> src-block))
       (org-element-property <span style="color: #006FE0;">:begin</span> src-block)))))
</pre>
</div>
<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #008000;">"    tag-matcher|     emacs-lisp|(:tags test one idiom)"</span> . 1222)
 (<span style="color: #008000;">"            nil|     emacs-lisp|(:tags one)"</span> . 1641)
 (<span style="color: #008000;">"            nil|     emacs-lisp|(:tags one three)"</span> . 2120))
</pre>
</div>

<p>
Now let us put that into ivy. We will ask for an expression to filter the blocks on, and then use ivy to narrow what is left, and the only action is to jump to the position of the selected block. You can start with a tag expression, or press enter to get all the tags. Then you can use ivy to further narrow by language, block name, or other tags.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-jump-to-src</span> (tag-expression)
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"sTag expression: "</span>)
  (ivy-read <span style="color: #008000;">"Select: "</span>
            (org-element-map (org-element-parse-buffer) 'src-block
              (<span style="color: #0000FF;">lambda</span> (src-block)
                (<span style="color: #0000FF;">when</span> (src-block-match-tag-expression-p src-block tag-expression)
                  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Get a string and marker</span>
                  (cons
                   (format <span style="color: #008000;">"%15s|%15s|%s"</span>
                           (org-element-property <span style="color: #006FE0;">:name</span> src-block)
                           (org-element-property <span style="color: #006FE0;">:language</span> src-block)
                           (org-element-property <span style="color: #006FE0;">:header</span> src-block))
                   (org-element-property <span style="color: #006FE0;">:begin</span> src-block)))))
            <span style="color: #006FE0;">:require-match</span> t
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"j"</span> (<span style="color: #0000FF;">lambda</span> (pos) (<span style="color: #0000FF;">interactive</span>) (goto-char pos))))))
</pre>
</div>

<pre class="example">
ivy-jump-to-src
</pre>

<p>
For fun, here is a python block just for testing.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(42)
</pre>
</div>

<pre class="example">
42
</pre>

<p>
That is it! It seems to work ok. There are some variations that might be preferrable, like putting the tags in as params in the src-block header to avoid needing a separate header line. It isn't clear how much I would use this, and it is slow if you have <i>a lot</i> of src blocks in a /large/org-file because of the parsing. (how large? I noticed a notable lag on my 22,800 line org-file this is in ;).
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/30/Jump-to-a-tagged-src-block.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another approach to embedded molecular data in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode</id>
    <updated>2016-03-28T11:28:27Z</updated>
    <published>2016-03-28T11:25:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="chemistry" />
    <summary type="html"><![CDATA[Another approach to embedded molecular data in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Summary thoughts</a></li>
<li><a href="#sec-2">2. Appendix of molecules</a>
<ul>
<li><a href="#sec-2-1">2.1. Water</a></li>
<li><a href="#sec-2-2">2.2. Caffeine</a></li>
</ul>
</li>
</ul>
</div>
</div>
<style>.molecule {background-color:LightSkyBlue;}</style>
<p>
In the <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/">last post</a> we examined a molecule link to a src-block defining a molecule in some format. We blurred the distinction between program and data there. Here we re-separate them to try out some different ideas. We will use an <a href="http://orgmode.org/manual/Special-blocks.html">org-mode special block</a> to contain the "data" which is a molecular representation in some format. Then, we will use open-babel to convert the format to various other formats to explore using the data.
</p>

<p>
Here is a methane molecule (with 4 implicit hydrogens in the SMILES format). We put it in a named special block in org-mode, and even put a header on it to indicate the format and a display name!
</p>

<div class="molecule" id="methane-smiles">
<p>
C
</p>

</div>

<p>
We can use the SMILES representation block as input to a new command that converts it to the CML format, with coordinates. We use a simple shell command here and pass the contents of the molecule in as a variable. That is nice because in SMILES methane is represented by a single "C", and this CML is <i>much</i> more verbose.
</p>

<div class="org-src-container">

<pre class="src src-sh" id="methane-cml"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">input</span> | obabel -ismi -o cml --gen3d
</pre>
</div>

<pre class="example">
&lt;?xml version="1.0"?&gt;
&lt;molecule xmlns="http://www.xml-cml.org/schema"&gt;
 &lt;atomArray&gt;
  &lt;atom id="a1" elementType="C" x3="1.047517" y3="-0.064442" z3="0.060284"/&gt;
  &lt;atom id="a2" elementType="H" x3="2.139937" y3="-0.064341" z3="0.059898"/&gt;
  &lt;atom id="a3" elementType="H" x3="0.683568" y3="-0.799429" z3="-0.661322"/&gt;
  &lt;atom id="a4" elementType="H" x3="0.683566" y3="0.927794" z3="-0.216100"/&gt;
  &lt;atom id="a5" elementType="H" x3="0.683669" y3="-0.321317" z3="1.056822"/&gt;
 &lt;/atomArray&gt;
 &lt;bondArray&gt;
  &lt;bond atomRefs2="a1 a2" order="1"/&gt;
  &lt;bond atomRefs2="a1 a3" order="1"/&gt;
  &lt;bond atomRefs2="a1 a4" order="1"/&gt;
  &lt;bond atomRefs2="a1 a5" order="1"/&gt;
 &lt;/bondArray&gt;
&lt;/molecule&gt;
</pre>

<p>
We can also use the CML output as input to a command that generates an SVG image, again, passing the CML in via a variable in the header.
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">cml</span> | obabel -icml -o svg
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-28-Another-approach-to-embedded-molecular-data-in-org-mode/methane.svg"> 
</p>
</div>

<p>
With our previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/">molecule link</a> we can refer to these in our text now as <a href="#methane-smiles">methane-smiles</a> and <a href="#methane-cml">methane-cml</a>.
</p>

<p>
So far it all looks good. Let us do something new. We will use the SMILES representation to create an <a href="https://wiki.fysik.dtu.dk/ase/ase/atoms.html">ase.atoms</a> object in Python. First, we create an xyz format that <code>ase</code> can read. Rather than clutter up our document with the output, we silence it.
</p>

<div class="org-src-container">

<pre class="src src-sh" id="methane-xyz"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">input</span> | obabel -ismi -o xyz --gen3d
</pre>
</div>

<p>
Now, we can use the string generated in a Python file to generate a tempfile (or you could have saved the result above to a file and just read it in here). I was too lazy to make the file link to the image myself, so I setup a :file header and just print the result to stdout in this block. Although all we do here is create a new image, this demonstrates you can use data from a MOLECULE block and pass it into a Python script where other kinds of calculations might occur.
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> ase.io <span style="color: #0000FF;">import</span> read, write

<span style="color: #0000FF;">from</span> tempfile <span style="color: #0000FF;">import</span> mkstemp
<span style="color: #BA36A5;">fd</span>, <span style="color: #BA36A5;">fname</span> = mkstemp(suffix=<span style="color: #008000;">".xyz"</span>)
<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(xyz)

<span style="color: #BA36A5;">atoms</span> = read(fname)
write(<span style="color: #008000;">'-'</span>, atoms, <span style="color: #006FE0;">format</span>=<span style="color: #008000;">"png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-28-Another-approach-to-embedded-molecular-data-in-org-mode/methane.png"> 
</p>
</div>


<p>
The last point to discuss is discoverability. It would be helpful if we could use a program to "extract" molecular information about the molecules we use in our work. Here is a block that will map over the MOLECULE blocks and summarize what is found with a common format (SMILES again). We generate a table of clickable links to each molecule found in the documents. There is a small appendix in this document containing <a href="#h2o">h2o</a> and <a href="#caffeine">caffeine</a> that will show in this table.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">mlc-to-smiles</span> (blk)
  <span style="color: #036A07;">"Convert a molecule BLK to smiles format using openbabel."</span>
  (<span style="color: #0000FF;">let*</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                   (mapcar 'org-babel-parse-header-arguments
                           (org-element-property <span style="color: #006FE0;">:header</span> blk))))
         (format (cdr (assoc <span style="color: #006FE0;">:format</span> headers)))
         (content (buffer-substring-no-properties
                   (org-element-property <span style="color: #006FE0;">:contents-begin</span> blk)
                   (org-element-property <span style="color: #006FE0;">:contents-end</span> blk)))
         (tempfile (make-temp-file <span style="color: #008000;">"obabel-"</span>)))
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert content))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">convert to smiles. This outputs a smiles string and the file it was</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">generated from. I don't know how to suppress the file, so we use awk to</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">just get the SMILEs strings. It is not pretty. I know.</span>
    (<span style="color: #0000FF;">prog1</span>
        (s-trim (shell-command-to-string
                 (format  <span style="color: #008000;">"obabel %s %s -osmi 2&gt; /dev/null | awk '{print $1}'"</span>
                          (format <span style="color: #008000;">"-i%s"</span> format) tempfile)))
      (delete-file tempfile))))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Generate the table of molecules</span>
(append '((<span style="color: #008000;">"Display name"</span> <span style="color: #008000;">"Name"</span> <span style="color: #008000;">"format"</span> <span style="color: #008000;">"SMILES representation"</span>))
        '(hline)
        (org-element-map (org-element-parse-buffer) 'special-block
          (<span style="color: #0000FF;">lambda</span> (sb)
            (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"MOLECULE"</span> (org-element-property <span style="color: #006FE0;">:type</span> sb))
              (<span style="color: #0000FF;">let</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                              (mapcar 'org-babel-parse-header-arguments
                                      (org-element-property <span style="color: #006FE0;">:header</span> sb)))))

                (list
                 (format <span style="color: #008000;">"[[molecule:%s][%s]]"</span> (org-element-property <span style="color: #006FE0;">:name</span> sb)
                         (cdr (assoc <span style="color: #006FE0;">:display-name</span> headers)))
                 (org-element-property <span style="color: #006FE0;">:name</span> sb)
                 (cdr (assoc <span style="color: #006FE0;">:format</span> headers))
                 (mlc-to-smiles sb)))))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Display name</th>
<th scope="col" class="left">Name</th>
<th scope="col" class="left">format</th>
<th scope="col" class="left">SMILES representation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><a href="#methane-smiles">methane-smiles</a></td>
<td class="left">methane-smiles</td>
<td class="left">smiles</td>
<td class="left">C</td>
</tr>

<tr>
<td class="left"><a href="#h2o">h2o</a></td>
<td class="left">h2o</td>
<td class="left">cml</td>
<td class="left">OO</td>
</tr>

<tr>
<td class="left"><a href="#caffeine">caffeine</a></td>
<td class="left">caffeine</td>
<td class="left">xyz</td>
<td class="left">Cn1cnc2n(C)c(=O)n(C)c(=O)c12</td>
</tr>
</tbody>
</table>

<p>
That seems pretty discoverable to me. We not only can discover the molecules in this post, but can pretty easily convert them to other formats (SMILES) in this case. Since we can run any code we want on them, we could just as well import them to a database, or do subsequent calculations on them.
</p>

<p>
The MOLECULE block is not standard, and I have only demonstrated here that it is suitable for this purpose. But, it looks like we could extend it and deal with a variety of formats. We can use headers to add metadata, format, etc&#x2026; Some features I find missing are similar to those in code blocks where we can type C-c ' to edit them in special modes, and the nice syntax highlighting that often comes with that.
</p>

<p>
It might be helpful to make the export of MOLECULE blocks nicer looking and more functional. The default export, for example doesn't put an id attribute in the block. First, we rewrite an org-function to add the id attribute to the exported blocks so our molecule links will work.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-html-special-block</span> (special-block contents info)
  <span style="color: #036A07;">"Transcode a SPECIAL-BLOCK element from Org to HTML.</span>
<span style="color: #036A07;">CONTENTS holds the contents of the block.  INFO is a plist</span>
<span style="color: #036A07;">holding contextual information."</span>
  (<span style="color: #0000FF;">let*</span> ((block-type (downcase
                      (org-element-property <span style="color: #006FE0;">:type</span> special-block)))
         (contents (<span style="color: #0000FF;">or</span> contents <span style="color: #008000;">""</span>))
         (html5-fancy (<span style="color: #0000FF;">and</span> (org-html-html5-p info)
                           (plist-get info <span style="color: #006FE0;">:html-html5-fancy</span>)
                           (member block-type org-html-html5-elements)))
         (attributes (org-export-read-attribute <span style="color: #006FE0;">:attr_html</span> special-block)))
    (<span style="color: #0000FF;">unless</span> html5-fancy
      (<span style="color: #0000FF;">let</span> ((class (plist-get attributes <span style="color: #006FE0;">:class</span>)))
        (<span style="color: #0000FF;">setq</span> attributes (plist-put attributes <span style="color: #006FE0;">:class</span>
                                    (<span style="color: #0000FF;">if</span> class (concat class <span style="color: #008000;">" "</span> block-type)
                                      block-type)))
        (<span style="color: #0000FF;">when</span> (org-element-property <span style="color: #006FE0;">:name</span> special-block)
          (<span style="color: #0000FF;">setq</span> attributes (plist-put
                            attributes <span style="color: #006FE0;">:id</span>
                            (org-element-property <span style="color: #006FE0;">:name</span> special-block))))))
    (<span style="color: #0000FF;">setq</span> attributes (org-html--make-attribute-string attributes))
    (<span style="color: #0000FF;">when</span> (not (equal attributes <span style="color: #008000;">""</span>))
      (<span style="color: #0000FF;">setq</span> attributes (concat <span style="color: #008000;">" "</span> attributes)))
    (<span style="color: #0000FF;">if</span> html5-fancy
        (format <span style="color: #008000;">"&lt;%s%s&gt;\n%s&lt;/%s&gt;"</span> block-type attributes
                contents block-type)
      (format <span style="color: #008000;">"&lt;div%s&gt;\n%s\n&lt;/div&gt;"</span> attributes contents))))
</pre>
</div>

<pre class="example">
org-html-special-block
</pre>

<p>
It would be nice to add some additional information around the block, e.g. that it is a molecule, maybe some tooltip about the format, etc&#x2026;, but we leave that to another day. These should probably be handled specially with a dedicated export function. You will note that MOLECULE blocks don't export too well, they should probably be wrapped in &lt;pre&gt; for HTML export. We will at least make them stand out with this bit of css magic.
</p>

<pre class="example">
#+HTML_HEAD_EXTRA:  &lt;style&gt;.molecule {background-color:LightSkyBlue;}&lt;/style&gt;
</pre>



<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
This looks pretty promising as a way to embed molecular data into org-files so that the data is reusable and discoverable. If there is metadata that cannot go into the MOLECULE format we can put it in headers instead. This seems like it could be useful.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Appendix of molecules</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Water</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Here is water in the CML format.
</p>

<div class="molecule" id="h2o">
<p>
&lt;?xml version="1.0"?&gt;
&lt;molecule xmlns="<a href="http://www.xml-cml.org/schema">http://www.xml-cml.org/schema</a>"&gt;
 &lt;atomArray&gt;
  &lt;atom id="a1" elementType="O"/&gt;
  &lt;atom id="a2" elementType="O"/&gt;
 &lt;/atomArray&gt;
 &lt;bondArray&gt;
  &lt;bond atomRefs2="a1 a2" order="1"/&gt;
 &lt;/bondArray&gt;
&lt;/molecule&gt;
</p>

</div>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Caffeine</h3>
<div class="outline-text-3" id="text-2-2">
<p>
This is a simple xyz format of caffeine.
</p>

<div class="molecule" id="caffeine">
<p>
24
</p>

<p>
C          1.02887       -0.01688       -0.03460
N          2.46332        0.11699       -0.03522
C          3.33799       -0.94083       -0.03530
N          4.59156       -0.53767       -0.03594
C          4.50847        0.82120       -0.03623
N          5.57252        1.69104       -0.03687
C          6.93040        1.17620       -0.03898
C          5.33446        3.06602       -0.03685
O          6.26078        3.88171       -0.03594
N          3.98960        3.48254       -0.03830
C          3.70813        4.90531       -0.04199
C          2.87287        2.63769       -0.03747
O          1.71502        3.04777       -0.03830
C          3.21603        1.25723       -0.03610
H          0.54478        0.95872       -0.03440
H          0.73663       -0.56946        0.86233
H          0.73584       -0.56959       -0.93118
H          3.00815       -1.97242       -0.03493
H          7.67209        1.97927       -0.03815
H          7.07929        0.56516       -0.93486
H          7.08112        0.56135        0.85404
H          4.61163        5.51902       -0.04152
H          3.11230        5.15092        0.84340
H          3.11643        5.14660       -0.93127
</p>

</div>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A molecule link for org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode</id>
    <updated>2016-03-26T15:33:10Z</updated>
    <published>2016-03-26T15:28:17Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="chemistry" />
    <summary type="html"><![CDATA[A molecule link for org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Appendix of molecules</a></li>
<li><a href="#sec-2">2. smiles major mode</a></li>
</ul>
</div>
</div>
<p>
Here I am exploring some ideas on compact and functional representations of molecules in org-mode. We will use some functionality from OpenBabel (<a href="https://openbabel.org/docs/dev/index.html">https://openbabel.org/docs/dev/index.html</a> ) for conversion of formats.
</p>

<p>
One approach we could use is the <a href="https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system">SMILES</a> representation. OpenBabel provides tools to convert SMILES to a visualization like this. Let's check out an old favorite: caffeine.
</p>

<div class="org-src-container">

<pre class="src src-sh">obabel -:<span style="color: #008000;">"Cn1cnc2n(C)c(=O)n(C)c(=O)c12"</span> -osvg
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/out.svg"> 
</p>
</div>

<p>
We can imagine the SMILES string is a program, and use an org-mode src block to contain it.  It isn't quite a program, as it is more like data, but we can make the block executable if we define how to "execute" the block, and for that we will just have obabel generate the svg representation of the molecule. Here is our execute function. It simply generates the svg to stdout. We can use a :file header to capture it in a file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:smiles</span> (body params)
  (shell-command-to-string
   (format <span style="color: #008000;">"obabel -:\"%s\" -osvg 2&gt; /dev/null"</span> body)))
</pre>
</div>

<pre class="example">
org-babel-execute:smiles
</pre>

<p>
You can find a smiles block in <a href="#sec-1">Appendix of molecules</a> that was adapted from <a href="http://www.daylight.com/dayhtml_tutorials/languages/smiles/smiles_examples.html">here</a> .
</p>

<p>
Now, we need a link to refer to our molecule. We want the follow action to jump to our src block which should have a name. We will have it export as the name of the block linked to the molecule definition. This should work fine for definitions in the document. It is not robust to link to molecules in other org-files in the export. That would require those files to be exported too. For now we just define an HTML export.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">molecule-jump</span> (name)
  (org-mark-ring-push)
  (org-open-link-from-string (format <span style="color: #008000;">"[[%s]]"</span> path)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">molecule-export</span> (path desc backend)
  (<span style="color: #0000FF;">let</span> ((name (<span style="color: #0000FF;">save-window-excursion</span>
                (molecule-jump path)
                (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context)))))
    (<span style="color: #0000FF;">cond</span>
     ((eq 'html backend)
      (format <span style="color: #008000;">"&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;"</span> name name)))))

(org-add-link-type
 <span style="color: #008000;">"molecule"</span>
 'molecule-jump
 'molecule-export)
</pre>
</div>

<p>
Now we link to <a href="#LSD">LSD</a> and <a href="#ethanol">ethanol</a> that allows us to navigate to the definition. We can also refer to a molecule in another file like <a href="#ethanol">ethanol</a>. The links are clickable, and should jump to the molecule definition. On export to HTML they will be links to the definition.
</p>

<p>
Our link provides some limited functionality. We can provide more by making the follow action open a menu for example. Instead, we created a major mode <a href="#sec-2">here</a>. It provides a function to convert smiles to CML. It is readily extensible to do other conversions.
</p>

<p>
One of the reasons we want to have molecules as "data" is so we can find them in our papers. Here is an example of that. We defined two molecules in the Appendix, and we find them here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer)
    'src-block
  (<span style="color: #0000FF;">lambda</span> (src)
    (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"smiles"</span> (org-element-property <span style="color: #006FE0;">:language</span> src))
      (org-element-property <span style="color: #006FE0;">:name</span> src))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">LSD</td>
<td class="left">ethanol</td>
</tr>
</tbody>
</table>

<p>
There is still a lot to do to make this really functional. For example, we might want to use the molecules to write reactions. We might also want more advanced conversion or lookup functions, and more export options. It might be desirable to have tooltips on the links to see the molecules too. No doubt one might want to fine-tune the way the blocks run, so that options could be passed as header args.
Maybe I will work on that another day.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-1CD759B4-E276-4990-982C-E98CCE5B0517" name="ID-1CD759B4-E276-4990-982C-E98CCE5B0517"></a><span class="section-number-2">1</span> Appendix of molecules</h2>
<div class="outline-text-2" id="text-1">

<p>
Here is an example smiles block.
</p>
<div class="org-src-container">
<label class="org-src-name">A lysergic acid diethylamide molecule</label>
<pre class="src src-smiles" id="LSD">CCN(CC)C(=O)[C@H]1CN(C)[C@@H]2Cc3c[nH]c4cccc(C2=C1)c34
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/lsd.svg"> 
</p>
</div>

<div class="org-src-container">
<label class="org-src-name">An ethanol molecule.</label>
<pre class="src src-smiles" id="ethanol">CCO
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/ethanol.svg"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a id="ID-7978044B-CB2F-4AB3-8142-34A28B3DB201" name="ID-7978044B-CB2F-4AB3-8142-34A28B3DB201"></a><span class="section-number-2">2</span> smiles major mode</h2>
<div class="outline-text-2" id="text-2">
<p>
It would be nice to have a language mode to do special edits of SMILES src blocks. This mode does very little but provide a function that converts SMILES to CML using obabel and open it in a buffer. We redirect stderr to /dev/null to avoid seeing the messages from obabel. We also provide another function that opens a browser to names of the molecule.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">easymenu</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">smiles-cml</span> ()
  <span style="color: #036A07;">"Convert the smiles string in the buffer to CML."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((smiles (buffer-string)))
    (switch-to-buffer (get-buffer-create <span style="color: #008000;">"SMILES-CML"</span>))
    (erase-buffer)
    (insert
     (shell-command-to-string
      (format <span style="color: #008000;">"obabel -:\"%s\" -ocml 2&gt; /dev/null"</span>
              smiles)))
    (goto-char (point-min))
    (xml-mode)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">smiles-names</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (browse-url
   (format <span style="color: #008000;">"http://cactus.nci.nih.gov/chemical/structure/%s/names"</span>
           (buffer-string))))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">smiles-mode-map</span>
  nil
  <span style="color: #036A07;">"Keymap for smiles-mode."</span>)

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">adapted from http://ergoemacs.org/emacs/elisp_menu_for_major_mode.html</span>
(<span style="color: #0000FF;">define-derived-mode</span> <span style="color: #006699;">smiles-mode</span> fundamental-mode <span style="color: #008000;">"smiles-mode"</span>
  <span style="color: #036A07;">"Major mode for SMILES code."</span>
  (<span style="color: #0000FF;">setq</span> buffer-invisibility-spec '(t)
        mode-name <span style="color: #008000;">" &#9786;"</span>)

  (<span style="color: #0000FF;">when</span> (not smiles-mode-map)
    (<span style="color: #0000FF;">setq</span> smiles-mode-map (make-sparse-keymap)))
  (define-key smiles-mode-map (kbd <span style="color: #008000;">"C-c C-c"</span>) 'smiles-cml)
  (define-key smiles-mode-map (kbd <span style="color: #008000;">"C-c C-n"</span>) 'smiles-names)

  (define-key smiles-mode-map [menu-bar] (make-sparse-keymap))

  (<span style="color: #0000FF;">let</span> ((menuMap (make-sparse-keymap <span style="color: #008000;">"SMILES"</span>)))
    (define-key smiles-mode-map [menu-bar smiles] (cons <span style="color: #008000;">"SMILES"</span> menuMap))

    (define-key menuMap [cml]
      '(<span style="color: #008000;">"CML"</span> . smiles-cml))
    (define-key menuMap [names]
      '(<span style="color: #008000;">"Names"</span> . smiles-names))))
</pre>
</div>

<pre class="example">
smiles-mode
</pre>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/26/A-molecule-link-for-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Displaying image overlays on image filenames in Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs" />
    <id>http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs</id>
    <updated>2016-03-21T11:21:19Z</updated>
    <published>2016-03-21T11:21:19Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Displaying image overlays on image filenames in Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tooltip approach</a></li>
<li><a href="#sec-2">2. The overlay approach</a></li>
</ul>
</div>
</div>
<p>
It has always bothered me a little that I have to add a file image after code blocks in org-mode to see the results. That extra work&#x2026; I also don't like having to explicitly print the figure in the code, since that is the extra work, just in a different place. Today I look into two approaches to this. First, we consider something like tooltips, and second just putting overlays of image files right on the file name. The plus side of this is no extra work. The downside is they won't export; that will still take the extra work, but you needed that for the caption anyway for now.
</p>

<p>
Here is a video illustrating the code in this post: <a href="https://www.youtube.com/watch?v=VuAnwCERM0U">https://www.youtube.com/watch?v=VuAnwCERM0U</a> 
</p>

<p>
Here is a test.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([0, 1, 2, 4, 16])
plt.savefig(<span style="color: #008000;">"test-fig.png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-21-Displaying-image-overlays-on-image-filenames-in-Emacs/test-fig.png"> 
</p>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tooltip approach</h2>
<div class="outline-text-2" id="text-1">
<p>
Building on our <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs/">previous approach</a> of graphical tooltips, we try that here to show the images. I have solved the issue of why the images didn't show in the tooltips before; it was related to how Emacs was built. I used to build it with "cocoa" support so it integrates well in OSX. Here, I have build it with gtk3, and the tooltips work with images.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">image-tooltip-re</span> (concat  <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?3:</span><span style="color: #008000;">'</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?1:</span><span style="color: #008000;">.*\\."</span>
                                  (regexp-opt '(<span style="color: #008000;">"png"</span> <span style="color: #008000;">"PNG"</span> <span style="color: #008000;">"JPG"</span> <span style="color: #008000;">"jpeg"</span>
                                                <span style="color: #008000;">"jpg"</span> <span style="color: #008000;">"JPEG"</span> <span style="color: #008000;">"eps"</span> <span style="color: #008000;">"EPS"</span>))
                                  <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?:</span><span style="color: #008000;">\\3</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
  <span style="color: #036A07;">"Regexp to match image filenames in quotes"</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">image-tooltip</span> (window object position)
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char position)
    (<span style="color: #0000FF;">let</span> (beg end imgfile img s)
      (<span style="color: #0000FF;">while</span> (not (looking-at image-tooltip-re))
        (forward-char -1))
      (<span style="color: #0000FF;">setq</span> imgfile (match-string-no-properties 1))
      (<span style="color: #0000FF;">when</span> (file-exists-p imgfile)
        (<span style="color: #0000FF;">setq</span> img (create-image (expand-file-name imgfile)
                                'imagemagick nil <span style="color: #006FE0;">:width</span> 200))
        (propertize <span style="color: #008000;">"Look in the minibuffer"</span>
                    'display img)))))

(font-lock-add-keywords
 nil
 `((,image-tooltip-re
    0 '(face font-lock-keyword-face
             help-echo image-tooltip))))

(font-lock-fontify-buffer)
</pre>
</div>

<p>
Now these both have tooltips on them: "test-fig.png"  and  'test-fig.png'.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> The overlay approach</h2>
<div class="outline-text-2" id="text-2">
<p>
We might alternatively prefer to put overlays in the buffer. Here we make that happen.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">next-image-overlay</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  (<span style="color: #0000FF;">when</span> (re-search-forward image-tooltip-re limit t)
    (<span style="color: #0000FF;">setq</span> beg (match-beginning 0)
          end (match-end 0)
          imgfile (match-string 1))
    (<span style="color: #0000FF;">when</span> (file-exists-p imgfile)
      (<span style="color: #0000FF;">setq</span> img (create-image (expand-file-name imgfile)
                              'imagemagick nil <span style="color: #006FE0;">:width</span> 300))
      (<span style="color: #0000FF;">setq</span> ov (make-overlay beg end))
      (overlay-put ov 'display img)
      (overlay-put ov 'face 'default)
      (overlay-put ov 'org-image-overlay t)
      (overlay-put ov 'modification-hooks
                   (list 'org-display-inline-remove-overlay)))))

(font-lock-add-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t)))
 t)
</pre>
</div>


<p>
Here is the example we looked at before.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([-0, 1, 2, 4, 16])
plt.savefig(<span style="color: #008000;">"test-fig.png"</span>)
</pre>
</div>

<p>
You may want to remove those overlays. Here is one way. Note they come back if you don't disable the font-lock keywords though.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(ov-clear 'org-image-overlay)
</pre>
</div>
<p>
I know you want to do that so here is:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(font-lock-remove-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t))))

(ov-clear 'org-image-overlay)
</pre>
</div>


<p>
Note you still have to clear the overlays. Font lock doesn't seem to do that for you I think.
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Org teleport headlines]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines" />
    <id>http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines</id>
    <updated>2016-03-18T08:48:14Z</updated>
    <published>2016-03-18T08:47:14Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Org teleport headlines]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines"><![CDATA[


<p>
I often want to rearrange org headlines.  There are super convenient shortcuts for some things, like Alt-up/down to move up and down, and Alt-left/right to change levels, and shift variants of that when there are nested headlines. There is also refile for some use cases. The case these don't handle for me is when I have a headline at the bottom and I want to move it a distance. To cut down on key strokes, I usually kill the headline, jump to where I want, and paste it.
</p>

<p>
In lispy, there is a teleport command for this! I am going to adapt this here for reorganizing org-headlines. This version allows you to move headlines around on the visible area. You need another strategy for the candidates to jump to if you want to move a headline off the screen. Note though that ivy is really smart, you can have one file in a split view and it will jump to any headline in any window! I use ivy for the navigation here, but you could also use helm to select headlines, for example. This function puts your headline after the selected headline, unless you use a prefix arg, and then it goes before.
</p>

<p>
Check out the video to see this in action: <a href="https://www.youtube.com/watch?v=Vv-2888rpyc">https://www.youtube.com/watch?v=Vv-2888rpyc</a> 
</p>

<p>
Note: this code is a little more advanced than what is in the video; I added a numeric prefix to change the headline level.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-teleport</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Teleport the current heading to after a headline selected with avy.</span>
<span style="color: #036A07;">With a prefix ARG move the headline to before the selected</span>
<span style="color: #036A07;">headline. With a numeric prefix, set the headline level. If ARG</span>
<span style="color: #036A07;">is positive, move after, and if negative, move before."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Kill current headline</span>
  (org-mark-subtree)
  (kill-region (region-beginning) (region-end))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Jump to a visible headline</span>
  (<span style="color: #0000FF;">avy-with</span> avy-goto-line (avy--generic-jump <span style="color: #008000;">"^\\*+"</span> nil avy-style))
  (<span style="color: #0000FF;">cond</span>
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Move before  and change headline level</span>
   ((<span style="color: #0000FF;">and</span> (numberp arg) (&gt; 0 arg))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">arg is what we want, second is what we have</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if n is positive, we need to demote (increase level)</span>
    (<span style="color: #0000FF;">let</span> ((n (- (abs arg) (car (org-heading-components)))))
      (<span style="color: #0000FF;">cl-loop</span> for i from 1 to (abs n)
               do
               (<span style="color: #0000FF;">if</span> (&gt; 0 n)
                   (org-promote-subtree)
                 (org-demote-subtree)))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Move after and change level</span>
   ((<span style="color: #0000FF;">and</span> (numberp arg) (&lt; 0 arg))
    (org-mark-subtree)
    (goto-char (region-end))
    (<span style="color: #0000FF;">when</span> (eobp) (insert <span style="color: #008000;">"\n"</span>))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">n is what we want and second is what we have</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if n is positive, we need to demote</span>
    (<span style="color: #0000FF;">let</span> ((n (- (abs arg) (car (org-heading-components)))))
      (<span style="color: #0000FF;">cl-loop</span> for i from 1 to (abs n)
               do
               (<span style="color: #0000FF;">if</span> (&gt; 0 n) (org-promote-subtree)
                 (org-demote-subtree)))))

   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">move to before selection</span>
   ((equal arg '(4))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank)))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">move to after selection</span>
   (t
    (org-mark-subtree)
    (goto-char (region-end))
    (<span style="color: #0000FF;">when</span> (eobp) (insert <span style="color: #008000;">"\n"</span>))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))))
  (outline-hide-leaves))
</pre>
</div>

<pre class="example">
org-teleport
</pre>

<p>
Now we add some new speed commands to help us out. I think we should be able to mark subtrees ("@" is bound to this, but I like "m" better) and kill them with a key stroke, in addition to teleporting them. Since we figured out the nice way to jump to a headline up there, we bind that to "q" which isn't used so far, and maps to a similar concept in lispy. The lowercase "t" is already bound to changing the TODO state, so we use capital "T" for the speed key to teleport. Note it is possible to "compose" the same effect by typing "k" to kill a headline, then "q" to jump somewhere else (or navigate where you want,  and then "C-y" to paste it at the new location. Or, "T".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"m"</span> 'org-mark-subtree))
(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"k"</span> (<span style="color: #0000FF;">lambda</span> ()
                                                  (org-mark-subtree)
                                                  (kill-region
                                                   (region-beginning)
                                                   (region-end)))))
(add-to-list 'org-speed-commands-user
             (cons <span style="color: #008000;">"q"</span> (<span style="color: #0000FF;">lambda</span> ()
                         (<span style="color: #0000FF;">avy-with</span> avy-goto-line
                           (avy--generic-jump <span style="color: #008000;">"^\\*+"</span> nil avy-style)))))

(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"T"</span> 'org-teleport))
<span style="color: #008000;">"done"</span>
</pre>
</div>

<pre class="example">
done
</pre>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/18/Org-teleport-headlines.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Adding captions and attributes to figures and tables from code blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/02/26/Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/02/26/Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode</id>
    <updated>2016-02-26T12:43:37Z</updated>
    <published>2016-02-26T12:43:37Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Adding captions and attributes to figures and tables from code blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/02/26/Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode"><![CDATA[



<p>
I have wanted for a long time to be able to add captions and attributes to figures and tables generated from code blocks. I brought this up on the mailing list (<a href="https://lists.gnu.org/archive/html/emacs-orgmode/2015-11/msg00544.html">https://lists.gnu.org/archive/html/emacs-orgmode/2015-11/msg00544.html</a> ) and finally, I have figured out a way to do it that seems ok. It is based on the :wrap feature of org-babel.
</p>

<p>
The idea is to use a function that will wrap the results in additional text. We use this function that will add a caption and attributes.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-decorate</span> (<span style="color: #6434A3;">&amp;optional</span> caption attributes)
  <span style="color: #036A07;">"A wrap function for src blocks."</span>
  (concat
   <span style="color: #008000;">"ORG\n"</span>
   (<span style="color: #0000FF;">when</span> attributes
     (concat (mapconcat 'identity attributes <span style="color: #008000;">"\n"</span>) <span style="color: #008000;">"\n"</span>))
   (<span style="color: #0000FF;">when</span> caption
     (format <span style="color: #008000;">"#+caption: %s"</span> caption))))
</pre>
</div>

<pre class="example">
src-decorate
</pre>

<p>
Now, we try it out on a figure:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #BA36A5;">x</span> = np.linspace(0, 2 * np.pi)
<span style="color: #BA36A5;">y</span> = np.sin(x)

plt.plot(x, y)
plt.savefig(<span style="color: #008000;">'images/sin.png'</span>)
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'[[./images/sin.png'</span> + <span style="color: #008000;">']]'</span>)
</pre>
</div>

<div class="org">

<div class="figure">
<p><img src="/media/2016-02-26-Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode/sin.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A sin wave. <div id="fig-sin"></p>
</div>

</div>

<p>
Success. We can even refer to Fig. <a href="#fig-sin">fig-sin</a>. Next, we try it on a table.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #BA36A5;">x</span> = np.linspace(0, 2 * np.pi, 5)
<span style="color: #BA36A5;">y</span> = np.sin(x)

<span style="color: #0000FF;">return</span> [[<span style="color: #008000;">'x'</span>, <span style="color: #008000;">'y'</span>], <span style="color: #D0372D;">None</span>] + <span style="color: #006FE0;">list</span>(<span style="color: #006FE0;">zip</span>(x, y))
</pre>
</div>

<div class="org">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A table of sin data. <div id="tab-sin"></caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">0.0</td>
<td class="right">0.0</td>
</tr>

<tr>
<td class="right">1.5707963267948966</td>
<td class="right">1.0</td>
</tr>

<tr>
<td class="right">3.141592653589793</td>
<td class="right">1.2246467991473532e-16</td>
</tr>

<tr>
<td class="right">4.71238898038469</td>
<td class="right">-1.0</td>
</tr>

<tr>
<td class="right">6.283185307179586</td>
<td class="right">-2.4492935982947064e-16</td>
</tr>
</tbody>
</table>

</div>

<p>
Sweet.  We can refer to Tab. <a href="#tab-sin">tab-sin</a> too. I have wanted this for a long time.  Perseverance wins again! and org-mode gets better. Hopefully this works with org 8.3 too!
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/02/26/Adding-captions-and-attributes-to-figures-and-tables-from-code-blocks-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Calling remote code-blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/02/09/Calling-remote-code-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/02/09/Calling-remote-code-blocks-in-org-mode</id>
    <updated>2016-02-09T20:40:59Z</updated>
    <published>2016-02-09T20:40:59Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="plotting" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="interactive" />
    <summary type="html"><![CDATA[Calling remote code-blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/02/09/Calling-remote-code-blocks-in-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. References</a></li>
</ul>
</div>
</div>

<p>
We often write code in supporting information files that generates figures or tables in a scientific manuscript. Today, we explore how to call those code blocks remotely but get the output in the file we call it from. We will write code in <a href="/media/2016-02-09-Calling-remote-code-blocks-in-org-mode/si.org">si.org</a> that generates an interactive figure that is presented in this file. We will use data published in <a class='org-ref-reference' href="#hallenbeck-2015-compar-co2">hallenbeck-2015-compar-co2</a>. You can find the data we used in the SI for that paper, or more conveniently <a href="https://github.com/KitchinHUB/kitchingroup-62">here</a> .
</p>

<p>
So, we make a named code block in the <a href="/media/2016-02-09-Calling-remote-code-blocks-in-org-mode/si.org">si.org</a> file called "figure-1". Then we call it like this:
</p>

<pre class="example">
#+call: si.org:figure-1() :wrap html
</pre>

<p>
That executes the code block in the other file, and wraps the output in an HTML block <i>in this file</i>! I do not like my code blocks to execute when I export because they are usually expensive calculations, so I have to manually run the line with C-c C-c, but you can override that behavior with a local setting of org-export-babel-evaluate. So, without further delay, here is the result. Now we have a nice, neat blog post file, with code in an <a href="/media/2016-02-09-Calling-remote-code-blocks-in-org-mode/si.org">si.org</a> file!
</p>

<iframe id="igraph" scrolling="no" style="border:none;"seamless="seamless" src="https://plot.ly/~jkitchin/6.embed" height="525" width="100%"></iframe>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> References</h2>
<div class="outline-text-2" id="text-1">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="hallenbeck-2015-compar-co2">[hallenbeck-2015-compar-co2] "Alexander Hallenbeck, Adefemi Egbebi, Kevin Resnik, , David Hopkinson, Shelley Anna & John Kitchin", Comparative Microfluidic Screening of Amino Acid Salt  Solutions for Post-Combustion \ceCO2 Capture, <i>"International Journal of Greenhouse Gas Control "</i>, <b>43</b>, 189 - 197 (2015). <a href="http://www.sciencedirect.com/science/article/pii/S1750583615301134">link</a>. <a href="http://dx.doi.org/10.1016/j.ijggc.2015.10.026">doi</a>.</a></li>
</ul>
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/09/Calling-remote-code-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Side by side figures in org-mode for different export outputs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/01/17/Side-by-side-figures-in-org-mode-for-different-export-outputs" />
    <id>http://jkitchin.github.io/blog/2016/01/17/Side-by-side-figures-in-org-mode-for-different-export-outputs</id>
    <updated>2016-01-17T21:18:18Z</updated>
    <published>2016-01-17T21:03:13Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Side by side figures in org-mode for different export outputs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/01/17/Side-by-side-figures-in-org-mode-for-different-export-outputs"><![CDATA[


<p>
Occasionally, someone wants side by side figures with subcaptions that have individually referenceable labels. This is not too hard in LaTeX, and there is a solution here:  <a href="http://www.johndcook.com/blog/2009/01/14/how-to-display-side-by-side-figurs-in-latex/">http://www.johndcook.com/blog/2009/01/14/how-to-display-side-by-side-figurs-in-latex/</a> .
</p>

<p>
We can create side by side figures in raw LaTeX like this (note however, this will not show up in html export):
</p>

<p>
And in our text we can refer to the overall Figure <a href="#fig12">fig12</a>, or the subfigures Figure <a href="#fig:a">fig:a</a> or Figure <a href="#fig:b">fig:b</a>. This works fine if your end goal is LaTeX export. It does not work fine if you want to consider HTML or some other output.
</p>

<p>
So, here we consider how we could remove the LaTeX dependency by representing the figures in a sexp data structure, for example something like this. I change the labels and captions a bit so they are actually distinguishable.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(figure ()
 (subfigure '(<span style="color: #008000;">"Left graph from sexp."</span> (label <span style="color: #008000;">"fig:sa"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/cos-plot.png"</span>))
 (enskip)
 (subfigure '(<span style="color: #008000;">"Right graph from sexp"</span> (label <span style="color: #008000;">"fig:sb"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
 (caption
  <span style="color: #008000;">"Text pertaining to both graphs from a sexp, "</span> (ref <span style="color: #008000;">"fig:sa"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:sb"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"figs12"</span>)))
</pre>
</div>

<pre class="example">
"emacs-lisp"
</pre>

<p>
This doesn't look much worse than the LaTeX code itself. It might not seem useful right away, but imagine if this was really code that could evaluate to the format we want. Remember the <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry/">sexp bibtex entry</a> that could evaluate to bibtex, json or xml? Let's look at this here. What we consider is kind of like <a href="http://oremacs.com/2015/01/23/eltex/">http://oremacs.com/2015/01/23/eltex/</a> , but we could include other kinds of exports if we wanted.
</p>

<p>
Here is our special block in org-mode. It should render roughly as side by side images in LaTeX and HTML.
</p>

<div class="sexp">
<p>
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:sa"))
            (includegraphics '((width . "3in"))
                             "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:sb"))
            (includegraphics '((width . "3in"))
                             "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:sa")
  " and " (ref "fig:sb") "." (label "figs12")))
</p>

</div>

<p>
Now, we need a function to format the sexp block for export. It is easy, we just eval the contents of the block. We do assume here there is just one sexp to evaluate. This function will handle all special blocks, but we only want to do something different for the sexp blocks.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">sb-format</span> (sb contents info)
  (<span style="color: #0000FF;">cond</span>
     ((string= <span style="color: #008000;">"SEXP"</span> (org-element-property <span style="color: #006FE0;">:type</span> sb))
      (eval (read (buffer-substring
                   (org-element-property <span style="color: #006FE0;">:contents-begin</span> sb)
                   (org-element-property <span style="color: #006FE0;">:contents-end</span> sb)))))
     (t
      contents)))))
</pre>
</div>

<pre class="example">
sb-format
</pre>

<p>
All that is left is to define the functions. We do that next.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Latex export</h2>
<div class="outline-text-2" id="text-1">
<p>
We do LaTeX export first because we know what it should look like. We need to define a function for each piece of the data structure that will evaluate to a string. Here are three easy ones.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">label</span> (arg)
  (format <span style="color: #008000;">"\\label{%s}"</span> arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ref</span> (arg)
  (format <span style="color: #008000;">"\\ref{%s}"</span> arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">caption</span> (<span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"\\caption{%s}"</span>
         (mapconcat 'eval body <span style="color: #008000;">""</span>)))

(caption
  <span style="color: #008000;">"Text pertaining to both graphs, "</span> (ref <span style="color: #008000;">"fig:a"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:b"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"fig12"</span>))
</pre>
</div>
<pre class="example">
\caption{Text pertaining to both graphs, \ref{fig:a} and \ref{fig:b}.\label{fig12}}
</pre>

<p>
Now, for includegraphics, we allow options and a path. The options we assume are in an a-list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">includegraphics</span> (options path)
  (format <span style="color: #008000;">"\\includegraphics%s{%s}"</span>
          (<span style="color: #0000FF;">if</span> options
              (format <span style="color: #008000;">"[%s]"</span>
                      (mapconcat (<span style="color: #0000FF;">lambda</span> (ccell)
                                   (format <span style="color: #008000;">"%s=%s"</span>
                                           (car ccell)
                                           (cdr ccell)))
                                 options
                                 <span style="color: #008000;">","</span>))
            <span style="color: #008000;">""</span>)
          path))

(includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                 <span style="color: #008000;">"images/eos-uncertainty.png"</span>)
</pre>
</div>
<pre class="example">
\includegraphics[width=3in]{images/eos-uncertainty.png}
</pre>

<p>
Similarly for subfigure, we have options, and then a body of expressions. The options here are just expressions that should evaluate to strings. This is not consistent with the way we do options in includegraphics. This is just proof of concept work, so I don't know if this inconsistency is really problematic yet, or insufficient for all options.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">subfigure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"\\subfigure%s{%s}"</span>
          (<span style="color: #0000FF;">if</span> options
              (format <span style="color: #008000;">"[%s]"</span>
                      (mapconcat 'eval options <span style="color: #008000;">""</span>))
            <span style="color: #008000;">""</span>)
          (mapconcat 'eval body <span style="color: #008000;">""</span>)))

(subfigure '(<span style="color: #008000;">"Right graph"</span> (label <span style="color: #008000;">"fig:b"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
</pre>
</div>
<pre class="example">
\subfigure[Right graph\label{fig:b}]{\includegraphics[width=3in]{images/eos-uncertainty.png}}
</pre>

<p>
Now, we put the whole figure together.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">figure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"\\begin{figure}</span>
<span style="color: #008000;">%s</span>
<span style="color: #008000;">\\end{figure}"</span>
(mapconcat 'eval body <span style="color: #008000;">"\n"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">enskip</span> () <span style="color: #036A07;">"\\enskip"</span>)
</pre>
</div>
<pre class="example">
enskip
</pre>

<p>
Now, we would have a block like this, and we can evaluate it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(figure ()
 (subfigure '(<span style="color: #008000;">"Left graph from sexp."</span> (label <span style="color: #008000;">"fig:ssa"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/cos-plot.png"</span>))
 (enskip)
 (subfigure '(<span style="color: #008000;">"Right graph from sexp"</span> (label <span style="color: #008000;">"fig:ssb"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
 (caption
  <span style="color: #008000;">"Text pertaining to both graphs from a sexp, "</span> (ref <span style="color: #008000;">"fig:ssa"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:ssb"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"figss12"</span>)))
</pre>
</div>

<p>
Not the most beautiful LaTeX ever, but it works. Now, to get this to work, we need to handle our special sexp blocks differently. We do that with a new derived backend.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-export-define-derived-backend 'my-latex 'latex
  <span style="color: #006FE0;">:translate-alist</span> '((special-block . sb-format)))

(org-latex-compile (org-export-to-file 'my-latex <span style="color: #008000;">"custom-sb-export.tex"</span>))
(org-open-file <span style="color: #008000;">"custom-sb-export.pdf"</span>)
</pre>
</div>

<p>
It works, and here is the pdf: <a href="/media/2016-01-17-Side-by-side-figures-in-org-mode-for-different-export-outputs/custom-sb-export.pdf">custom-sb-export.pdf</a> .
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> HTML functions</h2>
<div class="outline-text-2" id="text-2">
<p>
We can use the same sexp block to get figures side-by-side in HTML. We need to redefine each element and its HTML output.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">label</span> (arg)
  (format <span style="color: #008000;">"&lt;a name=\"%s\"&gt;&lt;/a&gt;"</span> arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ref</span> (arg)
  (format <span style="color: #008000;">"&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;"</span> arg arg))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">caption</span> (<span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"&lt;caption&gt;%s&lt;/caption&gt;"</span>
         (mapconcat 'eval body <span style="color: #008000;">""</span>)))

(caption
  <span style="color: #008000;">"Text pertaining to both graphs, "</span> (ref <span style="color: #008000;">"fig:a"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:b"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"fig12"</span>))
</pre>
</div>

<pre class="example">
&lt;caption&gt;Text pertaining to both graphs, &lt;a href="#fig:a"&gt;fig:a&lt;/a&gt; and &lt;a href="#fig:b"&gt;fig:b&lt;/a&gt;.&lt;a name="fig12"&gt;&lt;/a&gt;&lt;/caption&gt;
</pre>


<p>
We will ignore options for the includegraphics html output. We would need to specify some way to do unit conversions for html. Here we fix the width.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">includegraphics</span> (options path)
  (format <span style="color: #008000;">"&lt;img src=\"/media/%s\" width=\"300\"&gt;"</span>
          path))

(includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                 <span style="color: #008000;">"images/eos-uncertainty.png"</span>)
</pre>
</div>

<pre class="example">
&lt;img src="/media/images/eos-uncertainty.png" width="300"&gt;
</pre>

<p>
We wrap a subfigure in a table cell.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">subfigure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"&lt;td&gt;%s%s&lt;/td&gt;"</span>
          (mapconcat 'eval body <span style="color: #008000;">""</span>)
          (<span style="color: #0000FF;">when</span> options
            (concat <span style="color: #008000;">"&lt;br&gt;"</span>
                    (mapconcat 'eval options <span style="color: #008000;">""</span>)))))

(subfigure '(<span style="color: #008000;">"Right graph"</span> (label <span style="color: #008000;">"fig:b"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
</pre>
</div>

<pre class="example">
&lt;td&gt;&lt;img src="/media/images/eos-uncertainty.png" width="300"&gt;&lt;br&gt;Right graph&lt;a name="fig:b"&gt;&lt;/a&gt;&lt;/td&gt;
</pre>

<p>
We assume we can put the images in a single row.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">figure</span> (options <span style="color: #6434A3;">&amp;rest</span> body)
  (format <span style="color: #008000;">"&lt;span class=\"image\"&gt;&lt;table&gt;</span>
<span style="color: #008000;">&lt;tr&gt;%s&lt;/tr&gt;</span>
<span style="color: #008000;">&lt;/table&gt;&lt;/span&gt;"</span>
(mapconcat 'eval body <span style="color: #008000;">"\n"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">enskip</span> () <span style="color: #036A07;">""</span>)
</pre>
</div>

<pre class="example">
enskip
</pre>

<p>
Now, here is our specification.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(figure ()
 (subfigure '(<span style="color: #008000;">"Left graph"</span> (label <span style="color: #008000;">"fig:ha"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/cos-plot.png"</span>))
 (enskip)
 (subfigure '(<span style="color: #008000;">"Right graph"</span> (label <span style="color: #008000;">"fig:hb"</span>))
            (includegraphics '((width . <span style="color: #008000;">"3in"</span>))
                             <span style="color: #008000;">"images/eos-uncertainty.png"</span>))
 (caption
  <span style="color: #008000;">"Text pertaining to both graphs, "</span> (ref <span style="color: #008000;">"fig:ha"</span>)
  <span style="color: #008000;">" and "</span> (ref <span style="color: #008000;">"fig:hb"</span>) <span style="color: #008000;">"."</span> (label <span style="color: #008000;">"figh12"</span>)))
</pre>
</div>

<span class="image"><table>
<tr><td><img src="/media/images/cos-plot.png" width="300"><br>Left graph<a name="fig:ha"></a></td>

<td><img src="/media/images/eos-uncertainty.png" width="300"><br>Right graph<a name="fig:hb"></a></td>
<caption>Text pertaining to both graphs, <a href="#fig:ha">fig:ha</a> and <a href="#fig:hb">fig:hb</a>.<a name="figh12"></a></caption></tr>
</table></span>


<p>
And our derived backend for HTML.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-export-define-derived-backend 'my-html 'html
  <span style="color: #006FE0;">:translate-alist</span> '((special-block . sb-format)))

(browse-url (org-export-to-file 'my-html <span style="color: #008000;">"custom-sb-export.html"</span>))
</pre>
</div>

<pre class="example">
#&lt;process open custom-sb-export.html&gt;
</pre>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-3">
<p>
I think I like the idea. Obviously there are differences between what is possible between LaTeX and HTML, notably the attributes that may or may not be supported between them, including the units of the width, labels, and references. I still have not figured out an elegant way to switch between LaTeX and HTML exports since there is basically one set of functions that need different outputs under different conditions; maybe each function could have backend specific output.
</p>

<p>
For small things, you could achieve this with inline emacs-lisp src blocks, but I think those are limited to one liners. Alternatively, you could probably get by with output from an actual src block, but you would have to make sure it executed during export (I turn this off by default), and that it have backend specific output.
</p>

<p>
Finally, the only other alternative is a preprocessor that finds the sexps that define the data and replaces them with output.
</p>

<p>
The sexp block I described above is basically like a domain specific language (DSL). Something like this is described in "Practical Common Lisp" (<a href="http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html">http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html</a> ). My version is not as sophisticated as the one there.  Notably, mine uses eval which has some limitations, such as no communication between sexp blocks.</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/01/17/Side-by-side-figures-in-org-mode-for-different-export-outputs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
