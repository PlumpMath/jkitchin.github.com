<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-03-11T21:34:10Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Updating Multiple RESULTS blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode</id>
    <updated>2015-03-11T17:33:51Z</updated>
    <published>2015-03-11T17:33:51Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Updating Multiple RESULTS blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode"><![CDATA[



<p>
There was a recent question on the org-mode mailing list about getting multiple named block results to update when a named code block is run. I suppose you might want to do this if you need to see the results in more than one place. org-mode (at the moment) only updates the first named block that it finds from the beginning of the buffer. Challenge accepted ;)
</p>

<p>
Here is a function that will update all the named RESULTS blocks. The idea is to make a hook function that runs after you run a block. The hook function will get the block name, and if there is one, find all the named results in the buffer and update them.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">update-results</span> ()
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get name of src block</span>
  (<span style="color: #0000FF;">let</span> ((name (org-element-property <span style="color: #006FE0;">:name</span> (org-element-at-point)))
        (results)
        (begin))
    (<span style="color: #0000FF;">when</span> name
      (setq results
            (<span style="color: #0000FF;">save-excursion</span>
              (goto-char (org-babel-find-named-result name))
              (forward-line)
              (buffer-substring
               (point) (org-element-property <span style="color: #006FE0;">:end</span> (org-element-at-point)))))
      (<span style="color: #0000FF;">save-excursion</span>
        (goto-char (point-min))
        (<span style="color: #0000FF;">while</span> (setq begin (org-babel-find-named-result name (point)))
          (goto-char begin)
          (forward-line)
          (setf (buffer-substring
                 (point)
                 (org-element-property <span style="color: #006FE0;">:end</span> (org-element-at-point)))
                results))))))

(add-hook 'org-babel-after-execute-hook 'update-results)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">update-results</td>
<td class="left">(lambda nil (org-refresh-images))</td>
</tr>
</tbody>
</table>

<p>
Now let us test it out. Here is an unnamed block that should be ignored.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> 4
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Here we have a named results block from a code block we will see later.
</p>
<pre class="example">
[0.0825119635983067, 0.12793443834890417, 0.5235765147357154]
</pre>

<p>
Here is our named code block that just prints three random numbers.
</p>

<div class="org-src-container">

<pre class="src src-python" id="testcode"><span style="color: #0000FF;">import</span> random

<span style="color: #0000FF;">print</span> [random.random() <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(3)]
</pre>
</div>

<pre class="example">
[0.0825119635983067, 0.12793443834890417, 0.5235765147357154]
</pre>

<p>
Swell, everytime I run the block, the named results get updated everywhere! It isn't tested more than this post, so I would spend some time trying out your use cases before doing anything mission critical. Your mileage might vary. For example, if you have a named block outside a narrowed region it is not clear to me it would update. In other words, there might be other corners where this doesn't update like you thing.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[org-mode links meet hydra]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra" />
    <id>http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra</id>
    <updated>2015-02-22T19:06:41Z</updated>
    <published>2015-02-22T19:06:41Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="hydra" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[org-mode links meet hydra]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra"><![CDATA[


<p>
I have played with a lot of options to give org-mode links extra functionality. Here are a few of the ideas I have looked at so far.
</p>

<ol class="org-ol">
<li><a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/21/Enabling-right-clicks-in-org-mode-links/">Enabling right clicks on links</a> 
</li>
<li>A home made minibuffer menu in org-ref
</li>
<li>A helm buffer in org-ref
</li>
</ol>

<p>
Here, I want to explore a hydra menu for a link. The idea is pretty simple, we need functions that do something with the link at point, and a hydra interface to call them. This turned out to be a little tricky. I could not get the path from the link in the link lambda function, and we need a way to pass the path to the function. I use a global variable for that. I wish there was another way to do that, but this does actually work. We illustrate it here with a more functional doi link.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">doi-crossref</span> ()
  <span style="color: #036A07;">"Search DOI in CrossRef."</span>
  (interactive)
  (browse-url
   (format
    <span style="color: #008000;">"http://search.crossref.org/?q=%s"</span> *doi-hydra-path*)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">doi-google-scholar</span> ()
  <span style="color: #036A07;">"Google scholar the doi."</span>
  (interactive)
  (browse-url
   (format
    <span style="color: #008000;">"http://scholar.google.com/scholar?q=%s"</span> *doi-hydra-path*)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">doi-pubmed</span> ()
  <span style="color: #036A07;">"Pubmed the doi."</span>
  (interactive)
  (browse-url
   (format
    <span style="color: #008000;">"http://www.ncbi.nlm.nih.gov/pubmed/?term=%s"</span>
    (url-hexify-string *doi-hydra-path*))))

 (defhydra doi-hydra ()
   <span style="color: #008000;">"org-ref"</span>
   (<span style="color: #008000;">"c"</span> doi-crossref <span style="color: #008000;">"Crossref"</span>)
   (<span style="color: #008000;">"g"</span> doi-google-scholar <span style="color: #008000;">"Google Scholar"</span>)
   (<span style="color: #008000;">"p"</span> doi-pubmed <span style="color: #008000;">"Pubmed"</span>))

(org-add-link-type <span style="color: #008000;">"doi"</span>
  (<span style="color: #0000FF;">lambda</span> (path) (setq *doi-hydra-path* path) (doi-hydra/body)))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">(path)</td>
<td class="left">(setq <b>doi-hydra-path</b> path)</td>
<td class="left">(doi-hydra/body)</td>
</tr>
</tbody>
</table>

<p>
Now for a test, <a href="10.1021/jp047349j">10.1021/jp047349j</a>.
</p>

<p>
It works fine, when you click on a link, you get a minibuffer menu with context hints, and pressing any other key than is defined simply cancels the command.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/22/org-mode-links-meet-hydra.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Extending the org-mode link syntax with attributes]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes" />
    <id>http://jkitchin.github.io/blog/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes</id>
    <updated>2015-02-05T10:06:25Z</updated>
    <published>2015-02-05T10:06:25Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Extending the org-mode link syntax with attributes]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes"><![CDATA[


<p>
I make super heavy use of links in org-mode. I use them extensively in org-ref to create functional citations. One detail that has never been very satisfactory is the need for pre/post text in citations. I don't need that capability often, but it seems important to some. I have implemented a kind of clunky solution where I use the description part of a link with the pre/post text separated by a ::. Although that works, I dislike the way it looks, the need to parse it, and that the description covers the link.
</p>

<pre class="example">
[[cite:key][pre text::post text]]
</pre>

<p>
Some <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2010-08/msg00404.html">time ago</a> there was a suggestion of how to extend the link syntax, which was to my knowledge never implemented. Here is the proposed syntax:
</p>
<pre class="example">
$[link http://google.com
         :last-followed [2009-02-25 Wed 02:00]
         :label "click here for evil search engine"
         :export-label "click here for nice search engine"]
</pre>

<p>
This is interesting because this syntax suggests the link has attributes which can be updated.
</p>

<p>
We will show here how to implement part of this idea with the existing link syntax. We will make a link that has attributes like that. The basic idea is to simply incorporate the attributes into the path, and use lisp to read them. We will wrap the link path in parentheses and read that as a lisp data structure. So, a link like <i>link:key :pre "some pre text" :post "some post text"</i> will be parsed as:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(read <span style="color: #008000;">"(key :pre \"some pre text\" :post \"some post text\")"</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">key</td>
<td class="left">:pre</td>
<td class="left">some pre text</td>
<td class="left">:post</td>
<td class="left">some post text</td>
</tr>
</tbody>
</table>

<p>
The car of that list is the key, and the cdr contains the attributes. The quotes are necessary here to make sure all the text is correctly parsed as a single element for each attribute. So, here is an example link
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #008000;">"slink"</span>
 <span style="color: #8D8D84;">;;  </span><span style="color: #8D8D84; font-style: italic;">follow function</span>
 (<span style="color: #0000FF;">lambda</span> (path)
   (<span style="color: #0000FF;">let*</span> ((data (read (format <span style="color: #008000;">"(%s)"</span> path)))
          (head (car data))
          (plist (cdr data))
          (link (org-element-context))
          (begin (org-element-property <span style="color: #006FE0;">:begin</span> link))
          (end (org-element-property <span style="color: #006FE0;">:end</span> link)))
     (setq plist (plist-put plist <span style="color: #006FE0;">:last-clicked</span> (current-time-string)))
     (<span style="color: #0000FF;">save-excursion</span>
     (setf (buffer-substring begin end) <span style="color: #008000;">""</span>)
     (goto-char begin)
     (insert (format <span style="color: #008000;">"[[slink:%s %s]]"</span> head
         (substring (format <span style="color: #008000;">"%S"</span> plist) 1 -1))))))
 <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">format function</span>
 (<span style="color: #0000FF;">lambda</span> (path description backend)
   (<span style="color: #0000FF;">let*</span> ((data (read (concat <span style="color: #008000;">"("</span> path <span style="color: #008000;">")"</span>)))
          (head (car data))
          (plist (cadr data)))
     (format <span style="color: #008000;">"\\%s[%s][%s]{%s}"</span>
             (plist-get plist <span style="color: #006FE0;">:type</span>)
             (plist-get plist <span style="color: #006FE0;">:pre</span>)
             (plist-get plist <span style="color: #006FE0;">:post</span>)
             head))))
</pre>
</div>

<p>
Now, each time I click on this link, the time stamp gets updated.
</p>

<p>
\nil[nil][nil]{kitchin-2010}
</p>

<pre class="example">
[[slink:kitchin-2010 :pre "See for example" :post "page 47" :type "cite" :last-clicked "Thu Feb  5 09:31:15 2015"]]
</pre>


<p>
And, the generic export of this link is:
</p>

<pre class="example">
\cite[See for example][page 47]{kitchin-2010}
</pre>

<p>
Is this a good idea? I am not using this for anything right now. Sometimes my version of org-mode has trouble recognizing that is a link. It is strange, as I am typing, sometimes it flashes in and out of being recognized as a link. Anyway, it is an interesting idea!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Export org-mode to docx with citations via pandoc]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc" />
    <id>http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc</id>
    <updated>2015-01-29T07:34:14Z</updated>
    <published>2015-01-29T07:34:14Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="docx" />
    <summary type="html"><![CDATA[Export org-mode to docx with citations via pandoc]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc"><![CDATA[


<p>
Pandoc continues to develop, and since <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/07/17/Pandoc-does-org-mode-now/">the last time</a> I wrote about it there is improved support for citations. We will use that to convert org documents to Word documents that actually have citations and a bibliography in them. This post explores using helm-bibtex to insert pandoc compatible citations, and then using pandoc to convert the org file to a word document (docx). We can define the format of citations that helm-bibtex inserts in a function, and tell helm-bibtex to use it when in org mode.
</p>

<p>
Here is that code. This is just to give me a convenient tool to insert citations with searching in my bibtex file. I think you could just as easily use reftex for this, or an ido-completing function on bibtex keys. See <a href="http://johnmacfarlane.net/pandoc/README.html">Pandoc - Pandoc User’s Guide</a> for directions on citation format. The key is to format the cite links to the pandoc format.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-bibtex-format-pandoc-citation</span> (keys)
  (concat <span style="color: #008000;">"["</span> (mapconcat (<span style="color: #0000FF;">lambda</span> (key) (concat <span style="color: #008000;">"@"</span> key)) keys <span style="color: #008000;">"; "</span>) <span style="color: #008000;">"]"</span>))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">inform helm-bibtex how to format the citation in org-mode</span>
(setf (cdr (assoc 'org-mode helm-bibtex-format-citation-functions))
  'helm-bibtex-format-pandoc-citation)
</pre>
</div>
<pre class="example">
helm-bibtex-format-pandoc-citation
</pre>

<p>
Now, we can cite the org-mode book [@dominik-2010-org-mode], and some interesting papers on using org-mode [@schulte-2011-activ-docum; @schulte-2012-multi-languag]. You could pretty easily add pre and post text manually to these, after selecting and inserting them.
</p>

<p>
We need a bibliography file for pandoc to work. I will use a bibtex file, since I already have it and am using helm-bibtex to select keys. I found pandoc could not read my massive bibtex file, perhaps it does not support all the types yet, so I made a special small bibtex file for this. So, now all we need to do is convert this file to a docx. I use a function like this to do that. It uses an org-ref function to get the bibliography defined in this file, derives some file names, and then runs pandoc.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ox-export-to-docx-and-open</span> ()
 <span style="color: #036A07;">"Export the current org file as a docx via markdown."</span>
 (interactive)
 (<span style="color: #0000FF;">let*</span> ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is probably a full path</span>
        (current-file (buffer-file-name))
        (basename (file-name-sans-extension current-file))
        (docx-file (concat basename <span style="color: #008000;">".docx"</span>)))
   (save-buffer)
   (<span style="color: #0000FF;">when</span> (file-exists-p docx-file) (delete-file docx-file))
   (shell-command (format
                   <span style="color: #008000;">"pandoc -s -S --bibliography=%s %s -o %s"</span>
                   bibfile current-file docx-file))
   (org-open-file docx-file '(16))))
</pre>
</div>

<p>
And now we run it to get our docx.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(ox-export-to-docx-and-open)
</pre>
</div>

<p>
Here is the result: <a href="/media/2015-01-29-Export-org-mode-to-docx-with-citations-via-pandoc/org-to-docx-pandoc.docx">org-to-docx-pandoc.docx</a> 
</p>

<p>
It is not too bad. Not all the equations showed up below, and the figure did not appear for some reason. But, the citations went through fine.  A downside of this is the citation links are not clickable (but see <a href="#sec-7">Making pandoc links</a> for a way to do this), so they lack all the awesome features that org-ref gives them. Maybe pandoc can convert these to LaTeX links, but we already have such a good framework for that I do not see why you would want to do it. A better option is to figure out how to export the org file to an org file, and transform the org citation links to pandoc citations, then use pandoc on the temporarily transformed buffer. That way, you keep the cite links and their functionality, and ability to export to many formats, <i>and</i> get export to docx via pandoc.
</p>

<p>
There are other options in pandoc to fine tune the reference format (you need a csl file). That can be included in the org-file via file tags pretty easily. These citations are not links in the word document, and it does not look like they can be converted to footnotes, endnotes or interact with Endnote or Zotero at this time, but it is a step forward in getting a passable word document with references out of org-mode!
</p>

<p>
Since we are testing, let us try it some other typical features in an org-file.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Numbered list</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Item 1
</li>
<li>Item 2
</li>
<li>Item 3
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Bulleted list</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>item 1
</li>
<li>item 2
</li>
<li>item 3
<ul class="org-ul">
<li>subitem
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> definitions</h2>
<div class="outline-text-2" id="text-3">
<dl class="org-dl">
<dt> org-mode </dt><dd>tool for awesomeness
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Math</h2>
<div class="outline-text-2" id="text-4">
<p>
One equation:
<img src="ltxpng/org-to-docx-pandoc_71dd900d7f17a20875918a89a10eb146fccdd464.png" alt="\(e^{i\pi} - 1 = 0\)" />
</p>

<p>
A second equation:
</p>


<div class="figure">
<p><img src="ltxpng/org-to-docx-pandoc_fb56117cdd3c3ac81c363d24325cfc6b5a530420.png" alt="\begin{equation}
e^{i\pi} - 1 = 0
\end{equation}" /></p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> An image</h2>
<div class="outline-text-2" id="text-5">

<div id="icon" class="figure">
<p><img src="/media/2015-01-29-Export-org-mode-to-docx-with-citations-via-pandoc/emacs.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A little icon.</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> A table</h2>
<div class="outline-text-2" id="text-6">
<table id="my-table" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A little table.</caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>


<p>
a plain table
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><a id="ID-2958EFDC-CC33-4E2A-8A92-D2BE06EBB3F2" name="ID-2958EFDC-CC33-4E2A-8A92-D2BE06EBB3F2"></a><span class="section-number-2">7</span> Making pandoc links</h2>
<div class="outline-text-2" id="text-7">
<p>
Here I show a way to get clickable text on pandoc links. I found a nice library called <a href="https://github.com/rolandwalker/button-lock">button-lock</a> that uses a regular expression to attach text properties to matching text.
</p>

<p>
Below I repeat the citations so it is easy to see the effect after running the code block. Indeed, you get clickable text, even org-ref like capability. I think you could even add the idle-timer messages, and the org-ref menu.
</p>

<p>
Now, we can cite the org-mode book [@dominik-2010-org-mode], and some interesting papers on using org-mode [@schulte-2011-activ-docum; @schulte-2012-multi-languag]. You could pretty easily add pre and post text manually to these, after selecting and inserting them.
</p>

<p>
You would need to make this code run in when you open an org-file to get it to work every time.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">button-lock</span>)
(global-button-lock-mode)

(button-lock-set-button
 <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>
 (<span style="color: #0000FF;">lambda</span> ()
   (interactive)
   (re-search-backward <span style="color: #008000;">"@"</span>)
   (re-search-forward  <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
   (<span style="color: #0000FF;">let*</span> ((key (match-string-no-properties 1))
          (bibfile (cdr (org-ref-get-bibtex-key-and-file key))))
     (<span style="color: #0000FF;">if</span> bibfile
        (<span style="color: #0000FF;">save-excursion</span>
          (<span style="color: #0000FF;">with-temp-buffer</span>
            (insert-file-contents bibfile)
            (bibtex-search-entry key)
            (message (org-ref-bib-citation))))
       (message <span style="color: #008000;">"No entry found"</span>))))
 <span style="color: #006FE0;">:face</span> (list 'org-link))
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> References</h2>
<div class="outline-text-2" id="text-8">
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Redirecting stderr in org-mode shell blocks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks" />
    <id>http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks</id>
    <updated>2015-01-11T11:39:47Z</updated>
    <published>2015-01-04T08:59:04Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Redirecting stderr in org-mode shell blocks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks"><![CDATA[


<p>
Org-mode shell source blocks do not capture stderr. For example, in this block, with the default setup:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>

<pre class="example">
testing stdout
</pre>

<p>
You can see the second line is not in the output.
</p>

<p>
If you run this command, you get an <b>Org-Babel Error Output</b> buffer saying it is an illegal option.
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
</pre>
</div>

<p>
It would be nice to just capture that error, and show it.
</p>

<p>
We solved this problem in <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2/">Python</a> by redirecting stderr at runtime. It is not that simple in shell blocks, but we can do a similar thing. The code block is executed (I think) by saving the block to a temporary file, and then running org-babel-sh-command on the file. That magic happens inside the command shell-command-on-region. We just need to make that command redirect stderr. Here is a new shell command that does this. This next block can be tangled out to an executable command. This script takes one argument, which I believe is a filename (the temporary file containing the source block region).
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">!/bin/</span><span style="color: #0000FF;">bash</span>
{
bash $<span style="color: #BA36A5;">1</span>
} 2&gt;&amp;1
</pre>
</div>

<p>
Now, we set org-babel-sh-command to our new shell command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-sh-command <span style="color: #008000;">"./sh_stderr.sh"</span>)
</pre>
</div>

<pre class="example">
./sh_stderr.sh
</pre>

<p>
Now, it appears we get what we want:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
</pre>

<p>
And, with the bad option to date, we get:
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
<span style="color: #006FE0;">echo</span>
</pre>
</div>
<pre class="example">
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>

<p>
Not bad! I have not tested this very thoroughly, i.e. beyond these little examples, but it seems like it could work.
</p>

<p>
Achim Gratz suggested this simpler approach that does not involve any external scripts. The : at the end is important!
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #0000FF;">exec</span> 2&gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
date -g
:
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Capturing stderr from Python in org-mode - take 2]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2" />
    <id>http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2</id>
    <updated>2014-12-21T11:46:11Z</updated>
    <published>2014-12-21T11:46:11Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Capturing stderr from Python in org-mode - take 2]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2"><![CDATA[


<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/09/27/Capturing-stderr-and-exceptions-from-python-in-org-mode/">post</a> I wrote about a sandbox module to help capture stderr in Python code blocks in org-mode. That module worked, but ran as a script. 
</p>

<p>
stderr is not captured in the output of a code block in org-mode. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
</pre>

<p>
The messages to stderr just disappears. Not good for code like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
[[ 1.]
 [ 1.]]
</pre>

<p>
There is an error in that code, k is not defined. If you run that as a script, you get this output:
</p>
<pre class="example">
&gt;&gt;&gt; Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
</pre>

<p>
But, that is evidently going to stderr, and not getting captured in org-mode. Boo. A silent error that returns a value! This behavior of odeint may be <a href="https://github.com/scipy/scipy/pull/4052">fixed</a> in scipy 0.15, but it is a general deficiency of org-mode babel code blocks. So, today I am looking back into a way to fix it. We try something as mundane as just redefining stderr in Python at runtime.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
testing stderr
</pre>

<p>
That works fine. Let us test it with the other block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
[[ 1.]
 [ 1.]]
</pre>

<p>
Sweet, we get the errors. We still get the returned value, but it is immediately obvious something is wrong. I have wrapped that little tidbit into a Python module in <a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py">pycse.orgmode</a> , which you can import to get the same effect.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pycse.orgmode

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Finally, you can avoid the import by setting your org-babel Python command like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-python-command <span style="color: #228b22;">"python -i -c \"import pycse.orgmode\""</span>)
</pre>
</div>

<pre class="example">
python -i -c "import pycse.orgmode"
</pre>

<p>
Now, we run our faulty block again:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Excellent. The stderr is captured.
</p>

<p>
And we get basically the same output as before for regular code blocks. There is an extra line before and after the output for some reason. I can live with that!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> + <span style="color: #000000; background-color: #cccccc; font-weight: bold;">7</span>
</pre>
</div>

<pre class="example">
13
</pre>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/21/Capturing-stderr-from-Python-in-org-mode---take-2.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[org-mode + Python + git in a graduate engineering course]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course" />
    <id>http://jkitchin.github.io/blog/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course</id>
    <updated>2014-12-19T11:19:51Z</updated>
    <published>2014-12-18T21:10:30Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="education" />
    <summary type="html"><![CDATA[org-mode + Python + git in a graduate engineering course]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course"><![CDATA[



<p>
The Fall 2014 semester is over! I thought I would summarize here what we did. I taught a Master's course in Chemical Reaction Engineering for the second time. This time we had 58 students from around the world. What is remarkable about this course is that this time it was taught completely from Emacs. Every lecture was given from Emacs, every assignment completed in Emacs, turned in from Emacs, graded in Emacs, returned in Emacs. 
</p>

<p>
Students came to class, opened Emacs, and ran a command that downloaded the latest syllabus and opened it. They opened the day's lecture notes from a link in the syllabus. I lectured from the notes in Emacs, editing them on the screen live, running Python code to illustrate engineering concepts. Students did exercises in class in Emacs, and ran an Emacs command to "turn it in" which pushed their work to a git server. Later, I ran an Emacs command to collect and grade the work, then return it. Students could run a menu command in Emacs to see their grade report.
</p>

<p>
Techela provided a menu of commands to turn in assignments, check grade reports, send me feedback, open the syllabus, etc&#x2026; The notes were written in org-mode, and we used org-latex-fragments to see the equations. We used code-blocks to show Python examples of problem solving, every day in class.  It was awesome!
</p>

<p>
The way this worked is that most of my students got laptops as part of the MS program they enrolled in. I had my <a href="http://github.com/jkitchin/jmax">jmax</a> repo installed on those computers, along with git, TexLive and Canopy Python. jmax provided a starter-kit for emacs that gave it the functionality I use on a regular basis. In jmax, I created a package of code I call techela, which interfaces Emacs with git, and which provides commands to download and turn in assignments, and to control permissions on each repo. This enabled me to change repos to read-only after they were due, and to grant read access when I wanted students to see them. About 15% of the class had their own computer, and we had to help them get this software installed. This got done in the first week of class, thanks to the help of my teaching assistants.
</p>

<p>
I ran a <a href="http://gitolite.com/gitolite/index.html">gitolite</a> server that served the course materials, and a repo for each assignment for each student. When students first ran techela, it created a set of ssh keys which were used to authenticate each student in the gitolite server. Techela automates creation of the repos, and the permissions on each repo. Grading of assignments was done in Emacs. Every assignment turned in was an org-file, and we stored grades in the assignments as file tags.  Techela constructed a dynamic gradebook on demand, among other things.
</p>

<p>
Org-mode played a central role in the success of this course! It enabled the distribution of the notes in a readable, functional form. The programmable aspects of org-mode made it possible to create custom links for machine-gradable multiple choice questions, assignments, and solutions. It made it possible to use the assignments as a data storage source for grades, and later to pull the grades out for analysis.
</p>

<p>
Overall, the experience was just awesome. Techela has a few edges that need smoothed out, but I look forward to using it again this spring, this time on a course on Molecular Simulation!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Selective auto-capitalization in org-buffers]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers" />
    <id>http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers</id>
    <updated>2014-12-03T12:20:24Z</updated>
    <published>2014-12-03T12:20:24Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Selective auto-capitalization in org-buffers]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers"><![CDATA[



<p>
I have been using auto-capitalize.el for a short time to automatically capitalize the beginning of sentences. I mostly like what it does, but in org-mode I tend to write short code blocks while still in org-mode, and it is pretty irritating for auto-capitalize to "fix" the capitalization of your code. Of course, I can type C-c ' to edit the block in its native mode, but I do not always want to do that.
</p>

<p>
Below, I illustrate an approach to turn off auto-capitalize-mode when the cursor is inside a code-block. Basically, we write a function that checks if you are in a src-block, and if auto-capitalize is on, turn it off. If you are not in the code-block, we turn auto-capitalize on if it is not on. Then we hook the function into post-command-hook, which will run it after every emacs command, including cursor movements.
</p>

<p>
Here is that code:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">dwiw-auto-capitalize</span> ()
  (<span style="color: #8b0000;">if</span> (org-in-block-p '(<span style="color: #228b22;">"src"</span>))
      (<span style="color: #8b0000;">when</span> auto-capitalize
        (auto-capitalize-mode -1))
    (<span style="color: #8b0000;">unless</span> auto-capitalize
      (auto-capitalize-mode 1))))

(add-hook 'post-command-hook 'dwiw-auto-capitalize)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">dwiw-auto-capitalize</td>
</tr>
</tbody>
</table>

<p>
It works! Now the minor mode turns on and off depending on where the cursor is in my org document.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/03/Selective-auto-capitalization-in-org-buffers.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Accessing web of science entry, citing and related articles from a doi in emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs" />
    <id>http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</id>
    <updated>2014-11-05T10:55:03Z</updated>
    <published>2014-11-04T21:18:10Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="org-ref" />
    <summary type="html"><![CDATA[Accessing web of science entry, citing and related articles from a doi in emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs"><![CDATA[



<p>
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with <a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=4DwqzHSXl8YdqGjGQ2z&preferencesSaved=">Web Of Science</a> , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API <a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf">http://wokinfo.com/media/pdf/OpenURL-guide.pdf</a> to make links to the things I am interested in here. Based on that document, here are three links based on a <a href="10.1021/jp047349j">10.1021/jp047349j</a> that take you to different Web Of Science (WOS) pages.
</p>


<ol class="org-ol">
<li>go to article in WOS: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j</a> 
</li>
<li>citing articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes</a> 
</li>
<li>related articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes</a> 
</li>
</ol>

<p>
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos</span> (doi)
  <span style="color: #228b22;">"Open Web of Science entry for DOI"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (format
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/%s"</span> doi)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-citing</span> (doi)
  <span style="color: #228b22;">"Open Web of Science citing articles entry. May be empty if none are found"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
    doi
    <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"</span>)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-related</span> (doi)
  <span style="color: #228b22;">"Open Web of Science related articles page."</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
           doi
           <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"</span>)))
</pre>
</div>

<pre class="example">
doi-utils-wos-related
</pre>

<p>
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things <a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/">here</a> about Scopus and issues with ISI that I note for reference to future me.
</p>

<p>
Some of these are now included in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">jmax-bibtex.el</a> and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Editing org-mode python source blocks in an external editor (Canopy)]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy" />
    <id>http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy</id>
    <updated>2014-09-28T14:41:49Z</updated>
    <published>2014-09-28T14:41:49Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Editing org-mode python source blocks in an external editor (Canopy)]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy"><![CDATA[


<p>
Continuing on the <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode/">last post</a> about leveraging org-mode and python syntax checkers, here we consider using (heresy alert&#x2026;) an external editor for Python src blocks in org-mode. Why would we consider such insanity? Because, for beginners, environments such as Canopy are (IMHO) easier to use, and better than anything I have used in Emacs. And, I still want the framework of org-mode for content, just a better Python code writing environment.
</p>

<p>
This problem has some interesting challenges. I would like a command that opens a code block with its contents in the Canopy editor, or that creates a code block if needed. We need to figure out that context based on the cursor position. We will use the same temporary file strategy as used before, so Canopy has something to read and save to. We need to wait for Canopy to finish, which will be tricky because it returns as soon as you run it. Finally, I want the code block to run after it is put back in the org-file, so that the results are captured. 
</p>

<p>
This code block implements the idea, and the comments in the code explain what each section is doing.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">edit-in-canopy</span> ()
  (interactive)
  (<span style="color: #8b0000;">let*</span> ((eop (org-element-at-point))
         ;; <span style="color: #ff0000; font-weight: bold;">use current directory for temp file so relative paths work</span>
         (temporary-file-directory <span style="color: #228b22;">"."</span>)
         (tempfile))

    ;; <span style="color: #ff0000; font-weight: bold;">create a tempfile. </span>
    (setq tempfile (make-temp-file <span style="color: #228b22;">"canopy"</span> nil <span style="color: #228b22;">".py"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">figure out what to do</span>
    (<span style="color: #8b0000;">when</span>
        ;; <span style="color: #ff0000; font-weight: bold;">in an existing source block. we want to edit it.</span>
        (and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
          
      ;; <span style="color: #ff0000; font-weight: bold;">put code into tempfile</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop))))

    ;; <span style="color: #ff0000; font-weight: bold;">open tempfile in canopy</span>
    (shell-command (concat <span style="color: #228b22;">"canopy "</span> tempfile))
    (sleep-for 2) ;; <span style="color: #ff0000; font-weight: bold;">startup time. canopy is slow to showup in</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">ps. This gives it some time to do that. Canopy</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">returns right away, so we sleep while there is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">evidence that it is open. We get that evidence</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">from ps by searching for canopy.app.main, which</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">seems to exist in the output while Canopy is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">open.</span>
    (<span style="color: #8b0000;">while</span>
        (string-match <span style="color: #228b22;">"canopy\.app\.main"</span>
                      (shell-command-to-string <span style="color: #228b22;">"ps aux"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">pause a while, then check again.</span>
      (sleep-for 1))

    ;; <span style="color: #ff0000; font-weight: bold;">Canopy has closed, so we get the new script contents</span>
    (<span style="color: #8b0000;">let</span> ((new-contents (<span style="color: #8b0000;">with-temp-buffer</span>
                          (insert-file-contents tempfile)
                          (buffer-string))))
      (<span style="color: #8b0000;">cond</span>
       ;; <span style="color: #ff0000; font-weight: bold;">replace existing code block contents</span>
       ((and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
        (goto-char (org-element-property <span style="color: #cd0000;">:begin</span> eop))
        (search-forward (org-element-property <span style="color: #cd0000;">:value</span> eop))
        (replace-match (concat new-contents <span style="color: #228b22;">"\n"</span>)))
       ;; <span style="color: #ff0000; font-weight: bold;">create new code block</span>
       (t
        (insert
         (format <span style="color: #228b22;">"\n#+BEGIN_SRC python</span>
<span style="color: #228b22;">%s</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span> new-contents))
        ;; <span style="color: #ff0000; font-weight: bold;">go into new block so we can run it.</span>
        (previous-line 2))))

    ;; <span style="color: #ff0000; font-weight: bold;">delete the tempfile so they do not accumulate</span>
    (delete-file tempfile)
    ;; <span style="color: #ff0000; font-weight: bold;">and run the new block to get the results</span>
    (org-babel-execute-src-block)))
</pre>
</div>

<pre class="example">
edit-in-canopy
</pre>

<p>
That seems to work. It is difficult to tell from this post the function works as advertised. You can see it in action here: <a href="http://www.youtube.com/watch?v=-noKrT1dfFE">http://www.youtube.com/watch?v=-noKrT1dfFE</a> .
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">dydx</span>(y, x):
    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">k</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>
    <span style="color: #8b0000;">return</span> -k * y

<span style="color: #8b0000;">print</span> odeint(dydx, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>])

<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.exp(-<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)
</pre>
</div>

<pre class="example">
[[ 1.        ]
 [ 0.36787947]]
0.367879441171
</pre>



<p>
We created this code block externally.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello'</span>
</pre>
</div>

<pre class="example">
hello
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
Opening Canopy is a little slow (and that is coming from someone who opens Emacs ;). But, once it is open it is pretty nice for writing code, with the interactive Ipython console, and integrated help. Yes, it is probably possible to get Emacs to do that too, and maybe it will do that one day. Canopy does it today.
</p>

<p>
Unfortunately, this code will not work on Windows, most likely, since it relies on the ps program. There does seem to be a tasklist function in Windows that is similar, but it seems that Canopy runs as pythonw in that function, which is not very specific.</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-(Canopy).org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
</feed>
