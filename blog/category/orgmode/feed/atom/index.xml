<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-01-24T17:05:26Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Redirecting stderr in org-mode shell blocks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks" />
    <id>http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks</id>
    <updated>2015-01-11T11:39:47Z</updated>
    <published>2015-01-04T08:59:04Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Redirecting stderr in org-mode shell blocks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks"><![CDATA[


<p>
Org-mode shell source blocks do not capture stderr. For example, in this block, with the default setup:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>

<pre class="example">
testing stdout
</pre>

<p>
You can see the second line is not in the output.
</p>

<p>
If you run this command, you get an <b>Org-Babel Error Output</b> buffer saying it is an illegal option.
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
</pre>
</div>

<p>
It would be nice to just capture that error, and show it.
</p>

<p>
We solved this problem in <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2/">Python</a> by redirecting stderr at runtime. It is not that simple in shell blocks, but we can do a similar thing. The code block is executed (I think) by saving the block to a temporary file, and then running org-babel-sh-command on the file. That magic happens inside the command shell-command-on-region. We just need to make that command redirect stderr. Here is a new shell command that does this. This next block can be tangled out to an executable command. This script takes one argument, which I believe is a filename (the temporary file containing the source block region).
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">!/bin/</span><span style="color: #0000FF;">bash</span>
{
bash $<span style="color: #BA36A5;">1</span>
} 2&gt;&amp;1
</pre>
</div>

<p>
Now, we set org-babel-sh-command to our new shell command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-sh-command <span style="color: #008000;">"./sh_stderr.sh"</span>)
</pre>
</div>

<pre class="example">
./sh_stderr.sh
</pre>

<p>
Now, it appears we get what we want:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
</pre>

<p>
And, with the bad option to date, we get:
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
<span style="color: #006FE0;">echo</span>
</pre>
</div>
<pre class="example">
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>

<p>
Not bad! I have not tested this very thoroughly, i.e. beyond these little examples, but it seems like it could work.
</p>

<p>
Achim Gratz suggested this simpler approach that does not involve any external scripts. The : at the end is important!
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #0000FF;">exec</span> 2&gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
date -g
:
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Capturing stderr from Python in org-mode - take 2]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2" />
    <id>http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2</id>
    <updated>2014-12-21T11:46:11Z</updated>
    <published>2014-12-21T11:46:11Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Capturing stderr from Python in org-mode - take 2]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2"><![CDATA[


<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/09/27/Capturing-stderr-and-exceptions-from-python-in-org-mode/">post</a> I wrote about a sandbox module to help capture stderr in Python code blocks in org-mode. That module worked, but ran as a script. 
</p>

<p>
stderr is not captured in the output of a code block in org-mode. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
</pre>

<p>
The messages to stderr just disappears. Not good for code like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
[[ 1.]
 [ 1.]]
</pre>

<p>
There is an error in that code, k is not defined. If you run that as a script, you get this output:
</p>
<pre class="example">
&gt;&gt;&gt; Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
</pre>

<p>
But, that is evidently going to stderr, and not getting captured in org-mode. Boo. A silent error that returns a value! This behavior of odeint may be <a href="https://github.com/scipy/scipy/pull/4052">fixed</a> in scipy 0.15, but it is a general deficiency of org-mode babel code blocks. So, today I am looking back into a way to fix it. We try something as mundane as just redefining stderr in Python at runtime.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
testing stderr
</pre>

<p>
That works fine. Let us test it with the other block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
[[ 1.]
 [ 1.]]
</pre>

<p>
Sweet, we get the errors. We still get the returned value, but it is immediately obvious something is wrong. I have wrapped that little tidbit into a Python module in <a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py">pycse.orgmode</a> , which you can import to get the same effect.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pycse.orgmode

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Finally, you can avoid the import by setting your org-babel Python command like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-python-command <span style="color: #228b22;">"python -i -c \"import pycse.orgmode\""</span>)
</pre>
</div>

<pre class="example">
python -i -c "import pycse.orgmode"
</pre>

<p>
Now, we run our faulty block again:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Excellent. The stderr is captured.
</p>

<p>
And we get basically the same output as before for regular code blocks. There is an extra line before and after the output for some reason. I can live with that!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> + <span style="color: #000000; background-color: #cccccc; font-weight: bold;">7</span>
</pre>
</div>

<pre class="example">
13
</pre>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/21/Capturing-stderr-from-Python-in-org-mode---take-2.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[org-mode + Python + git in a graduate engineering course]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course" />
    <id>http://jkitchin.github.io/blog/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course</id>
    <updated>2014-12-19T11:19:51Z</updated>
    <published>2014-12-18T21:10:30Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="education" />
    <summary type="html"><![CDATA[org-mode + Python + git in a graduate engineering course]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course"><![CDATA[



<p>
The Fall 2014 semester is over! I thought I would summarize here what we did. I taught a Master's course in Chemical Reaction Engineering for the second time. This time we had 58 students from around the world. What is remarkable about this course is that this time it was taught completely from Emacs. Every lecture was given from Emacs, every assignment completed in Emacs, turned in from Emacs, graded in Emacs, returned in Emacs. 
</p>

<p>
Students came to class, opened Emacs, and ran a command that downloaded the latest syllabus and opened it. They opened the day's lecture notes from a link in the syllabus. I lectured from the notes in Emacs, editing them on the screen live, running Python code to illustrate engineering concepts. Students did exercises in class in Emacs, and ran an Emacs command to "turn it in" which pushed their work to a git server. Later, I ran an Emacs command to collect and grade the work, then return it. Students could run a menu command in Emacs to see their grade report.
</p>

<p>
Techela provided a menu of commands to turn in assignments, check grade reports, send me feedback, open the syllabus, etc&#x2026; The notes were written in org-mode, and we used org-latex-fragments to see the equations. We used code-blocks to show Python examples of problem solving, every day in class.  It was awesome!
</p>

<p>
The way this worked is that most of my students got laptops as part of the MS program they enrolled in. I had my <a href="http://github.com/jkitchin/jmax">jmax</a> repo installed on those computers, along with git, TexLive and Canopy Python. jmax provided a starter-kit for emacs that gave it the functionality I use on a regular basis. In jmax, I created a package of code I call techela, which interfaces Emacs with git, and which provides commands to download and turn in assignments, and to control permissions on each repo. This enabled me to change repos to read-only after they were due, and to grant read access when I wanted students to see them. About 15% of the class had their own computer, and we had to help them get this software installed. This got done in the first week of class, thanks to the help of my teaching assistants.
</p>

<p>
I ran a <a href="http://gitolite.com/gitolite/index.html">gitolite</a> server that served the course materials, and a repo for each assignment for each student. When students first ran techela, it created a set of ssh keys which were used to authenticate each student in the gitolite server. Techela automates creation of the repos, and the permissions on each repo. Grading of assignments was done in Emacs. Every assignment turned in was an org-file, and we stored grades in the assignments as file tags.  Techela constructed a dynamic gradebook on demand, among other things.
</p>

<p>
Org-mode played a central role in the success of this course! It enabled the distribution of the notes in a readable, functional form. The programmable aspects of org-mode made it possible to create custom links for machine-gradable multiple choice questions, assignments, and solutions. It made it possible to use the assignments as a data storage source for grades, and later to pull the grades out for analysis.
</p>

<p>
Overall, the experience was just awesome. Techela has a few edges that need smoothed out, but I look forward to using it again this spring, this time on a course on Molecular Simulation!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/18/org-mode-+-Python-+-git-in-a-graduate-engineering-course.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Selective auto-capitalization in org-buffers]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers" />
    <id>http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers</id>
    <updated>2014-12-03T12:20:24Z</updated>
    <published>2014-12-03T12:20:24Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Selective auto-capitalization in org-buffers]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/12/03/Selective-auto-capitalization-in-org-buffers"><![CDATA[



<p>
I have been using auto-capitalize.el for a short time to automatically capitalize the beginning of sentences. I mostly like what it does, but in org-mode I tend to write short code blocks while still in org-mode, and it is pretty irritating for auto-capitalize to "fix" the capitalization of your code. Of course, I can type C-c ' to edit the block in its native mode, but I do not always want to do that.
</p>

<p>
Below, I illustrate an approach to turn off auto-capitalize-mode when the cursor is inside a code-block. Basically, we write a function that checks if you are in a src-block, and if auto-capitalize is on, turn it off. If you are not in the code-block, we turn auto-capitalize on if it is not on. Then we hook the function into post-command-hook, which will run it after every emacs command, including cursor movements.
</p>

<p>
Here is that code:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">dwiw-auto-capitalize</span> ()
  (<span style="color: #8b0000;">if</span> (org-in-block-p '(<span style="color: #228b22;">"src"</span>))
      (<span style="color: #8b0000;">when</span> auto-capitalize
        (auto-capitalize-mode -1))
    (<span style="color: #8b0000;">unless</span> auto-capitalize
      (auto-capitalize-mode 1))))

(add-hook 'post-command-hook 'dwiw-auto-capitalize)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">dwiw-auto-capitalize</td>
</tr>
</tbody>
</table>

<p>
It works! Now the minor mode turns on and off depending on where the cursor is in my org document.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/03/Selective-auto-capitalization-in-org-buffers.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Accessing web of science entry, citing and related articles from a doi in emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs" />
    <id>http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</id>
    <updated>2014-11-05T10:55:03Z</updated>
    <published>2014-11-04T21:18:10Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="org-ref" />
    <summary type="html"><![CDATA[Accessing web of science entry, citing and related articles from a doi in emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs"><![CDATA[



<p>
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with <a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=4DwqzHSXl8YdqGjGQ2z&preferencesSaved=">Web Of Science</a> , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API <a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf">http://wokinfo.com/media/pdf/OpenURL-guide.pdf</a> to make links to the things I am interested in here. Based on that document, here are three links based on a <a href="10.1021/jp047349j">10.1021/jp047349j</a> that take you to different Web Of Science (WOS) pages.
</p>


<ol class="org-ol">
<li>go to article in WOS: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j</a> 
</li>
<li>citing articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes</a> 
</li>
<li>related articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes</a> 
</li>
</ol>

<p>
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos</span> (doi)
  <span style="color: #228b22;">"Open Web of Science entry for DOI"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (format
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/%s"</span> doi)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-citing</span> (doi)
  <span style="color: #228b22;">"Open Web of Science citing articles entry. May be empty if none are found"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
    doi
    <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"</span>)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-related</span> (doi)
  <span style="color: #228b22;">"Open Web of Science related articles page."</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
           doi
           <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"</span>)))
</pre>
</div>

<pre class="example">
doi-utils-wos-related
</pre>

<p>
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things <a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/">here</a> about Scopus and issues with ISI that I note for reference to future me.
</p>

<p>
Some of these are now included in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">jmax-bibtex.el</a> and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Editing org-mode python source blocks in an external editor (Canopy)]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy" />
    <id>http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy</id>
    <updated>2014-09-28T14:41:49Z</updated>
    <published>2014-09-28T14:41:49Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Editing org-mode python source blocks in an external editor (Canopy)]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy"><![CDATA[


<p>
Continuing on the <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode/">last post</a> about leveraging org-mode and python syntax checkers, here we consider using (heresy alert&#x2026;) an external editor for Python src blocks in org-mode. Why would we consider such insanity? Because, for beginners, environments such as Canopy are (IMHO) easier to use, and better than anything I have used in Emacs. And, I still want the framework of org-mode for content, just a better Python code writing environment.
</p>

<p>
This problem has some interesting challenges. I would like a command that opens a code block with its contents in the Canopy editor, or that creates a code block if needed. We need to figure out that context based on the cursor position. We will use the same temporary file strategy as used before, so Canopy has something to read and save to. We need to wait for Canopy to finish, which will be tricky because it returns as soon as you run it. Finally, I want the code block to run after it is put back in the org-file, so that the results are captured. 
</p>

<p>
This code block implements the idea, and the comments in the code explain what each section is doing.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">edit-in-canopy</span> ()
  (interactive)
  (<span style="color: #8b0000;">let*</span> ((eop (org-element-at-point))
         ;; <span style="color: #ff0000; font-weight: bold;">use current directory for temp file so relative paths work</span>
         (temporary-file-directory <span style="color: #228b22;">"."</span>)
         (tempfile))

    ;; <span style="color: #ff0000; font-weight: bold;">create a tempfile. </span>
    (setq tempfile (make-temp-file <span style="color: #228b22;">"canopy"</span> nil <span style="color: #228b22;">".py"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">figure out what to do</span>
    (<span style="color: #8b0000;">when</span>
        ;; <span style="color: #ff0000; font-weight: bold;">in an existing source block. we want to edit it.</span>
        (and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
          
      ;; <span style="color: #ff0000; font-weight: bold;">put code into tempfile</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop))))

    ;; <span style="color: #ff0000; font-weight: bold;">open tempfile in canopy</span>
    (shell-command (concat <span style="color: #228b22;">"canopy "</span> tempfile))
    (sleep-for 2) ;; <span style="color: #ff0000; font-weight: bold;">startup time. canopy is slow to showup in</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">ps. This gives it some time to do that. Canopy</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">returns right away, so we sleep while there is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">evidence that it is open. We get that evidence</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">from ps by searching for canopy.app.main, which</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">seems to exist in the output while Canopy is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">open.</span>
    (<span style="color: #8b0000;">while</span>
        (string-match <span style="color: #228b22;">"canopy\.app\.main"</span>
                      (shell-command-to-string <span style="color: #228b22;">"ps aux"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">pause a while, then check again.</span>
      (sleep-for 1))

    ;; <span style="color: #ff0000; font-weight: bold;">Canopy has closed, so we get the new script contents</span>
    (<span style="color: #8b0000;">let</span> ((new-contents (<span style="color: #8b0000;">with-temp-buffer</span>
                          (insert-file-contents tempfile)
                          (buffer-string))))
      (<span style="color: #8b0000;">cond</span>
       ;; <span style="color: #ff0000; font-weight: bold;">replace existing code block contents</span>
       ((and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
        (goto-char (org-element-property <span style="color: #cd0000;">:begin</span> eop))
        (search-forward (org-element-property <span style="color: #cd0000;">:value</span> eop))
        (replace-match (concat new-contents <span style="color: #228b22;">"\n"</span>)))
       ;; <span style="color: #ff0000; font-weight: bold;">create new code block</span>
       (t
        (insert
         (format <span style="color: #228b22;">"\n#+BEGIN_SRC python</span>
<span style="color: #228b22;">%s</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span> new-contents))
        ;; <span style="color: #ff0000; font-weight: bold;">go into new block so we can run it.</span>
        (previous-line 2))))

    ;; <span style="color: #ff0000; font-weight: bold;">delete the tempfile so they do not accumulate</span>
    (delete-file tempfile)
    ;; <span style="color: #ff0000; font-weight: bold;">and run the new block to get the results</span>
    (org-babel-execute-src-block)))
</pre>
</div>

<pre class="example">
edit-in-canopy
</pre>

<p>
That seems to work. It is difficult to tell from this post the function works as advertised. You can see it in action here: <a href="http://www.youtube.com/watch?v=-noKrT1dfFE">http://www.youtube.com/watch?v=-noKrT1dfFE</a> .
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">dydx</span>(y, x):
    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">k</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>
    <span style="color: #8b0000;">return</span> -k * y

<span style="color: #8b0000;">print</span> odeint(dydx, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>])

<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.exp(-<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)
</pre>
</div>

<pre class="example">
[[ 1.        ]
 [ 0.36787947]]
0.367879441171
</pre>



<p>
We created this code block externally.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello'</span>
</pre>
</div>

<pre class="example">
hello
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
Opening Canopy is a little slow (and that is coming from someone who opens Emacs ;). But, once it is open it is pretty nice for writing code, with the interactive Ipython console, and integrated help. Yes, it is probably possible to get Emacs to do that too, and maybe it will do that one day. Canopy does it today.
</p>

<p>
Unfortunately, this code will not work on Windows, most likely, since it relies on the ps program. There does seem to be a tasklist function in Windows that is similar, but it seems that Canopy runs as pythonw in that function, which is not very specific.</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-(Canopy).org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Improved debugging of Python code blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode</id>
    <updated>2014-09-27T15:27:40Z</updated>
    <published>2014-09-27T15:27:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Improved debugging of Python code blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode"><![CDATA[


<p>
Writing and running code blocks in org-mode is awesome, when it works. I find as the code blocks get past a certain size though, it can be tedious to debug, especially for new users. Since I am teaching 59 students to use Python in org-mode, I see this issue a lot! They lack experience to avoid many simple errors, and to find and fix them. Even in my hands, I do not always want to be switching to Python mode to run and debug blocks. 
</p>

<p>
org-mode src-blocks offer a unique challenge for the usual tools like pylint and pychecker, because the code does not exist in a file. In this post, I will explore developing some functions that do syntax checking on a src block. We will use a simple method which will write the block to a temporary file, and to the checking on that block. Then, we will create temporary buffers with the output.
</p>

<p>
Here is the first idea. We create a temp file in the working directory, write the code to it, and run pychecker, pyflakes and pep8 on the file. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-pychecker</span> ()
  <span style="color: #228b22;">"Run pychecker on a source block"</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((eop (org-element-at-point))
        (temporary-file-directory <span style="color: #228b22;">"."</span>)
        (tempfile))
    (<span style="color: #8b0000;">when</span> (and (eq 'src-block (car eop))
               (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
      (setq tempfile (make-temp-file <span style="color: #228b22;">"pychecker"</span> nil <span style="color: #228b22;">".py"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">create code file</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop)))
      (switch-to-buffer <span style="color: #228b22;">"*pychecker*"</span>)
      (erase-buffer)
      (insert <span style="color: #228b22;">"pychecker\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pychecker %s"</span> (file-name-nondirectory tempfile))))
      (insert <span style="color: #228b22;">"\npyflakes\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pyflakes %s"</span> (file-name-nondirectory tempfile))))
      (insert <span style="color: #228b22;">"\npep8\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pep8 %s"</span> (file-name-nondirectory tempfile))))
      (delete-file tempfile))))
</pre>
</div>

<p>
Here is a sample code block with some errors in it.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">a</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>  <span style="color: #ff0000; font-weight: bold;"># a variable we do not use</span>


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x, y):  <span style="color: #ff0000; font-weight: bold;"># unused argument</span>
    <span style="color: #8b0000;">return</span> x - b <span style="color: #ff0000; font-weight: bold;"># undefined variable</span>

<span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> * c
</pre>
</div>

<p>
On the code block above, that function leads to this output.
</p>

<pre class="example">
pychecker
=================
Processing module pychecker63858xo0 (pychecker63858xo0.py)...
  Caught exception importing module pychecker63858xo0:
    File "/Users/jkitchin/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/pychecker/pcmodules.py", line 540, in setupMainCode()
      module = imp.load_module(self.moduleName, handle, filename, smt)
    File "pychecker63858xo0.py", line 7, in &lt;module&gt;()
      print 6 * c
  NameError: name 'c' is not defined

Warnings...

pychecker63858xo0:1: NOT PROCESSED UNABLE TO IMPORT

pyflakes
=================
pychecker63858xo0.py:5: undefined name 'b'
pychecker63858xo0.py:7: undefined name 'c'

pep8
=================
pychecker63858xo0.py:5:17: E261 at least two spaces before inline comment
</pre>

<p>
That is pretty helpful, but it gives us line numbers we cannot directly access in our code block. We can open the code block in Python mode, and then navigate to them, but that is likely to make the buffer with this information disappear. It would be better if we could just click on a link and go to the right place. Let us explore what we need for that. 
</p>

<p>
We need to parse the output to get the line numbers, and then we can construct org-links to those places in the src block. pyflakes, pep8 and pylint look like the easiest to get. A way to get to the line would be a lisp function that moves to the beginning of the code block, and then moves forward n lines. We will use a regular expression on each line of the output of pyflakes and pep8 to get the line number. We will construct an org-link to go to the source block at the line. 
</p>

<p>
In this long code block, we create a function that will run pyflakes, pep8 and pylint, and create a new buffer with links to the issues it finds. Finally, we apply this as advice on executing org-babel-execute:python so it only runs when we execute a python block in org-mode. This is a long block, because I have made it pretty feature complete. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-py-check</span> ()
  <span style="color: #228b22;">"Run python check programs on a source block.</span>
<span style="color: #228b22;">Opens a buffer with links to what is found."</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((eop (org-element-at-point))
        (temporary-file-directory <span style="color: #228b22;">"."</span>)
        (cb (current-buffer))
        (n) ; <span style="color: #ff0000; font-weight: bold;">for line number</span>
        (content) ; <span style="color: #ff0000; font-weight: bold;">error on line</span>
        (pb <span style="color: #228b22;">"*org pycheck*"</span>)
        (pyflakes-status nil)
        (link)
        (tempfile))

    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pyflakes"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pyflakes is not installed."</span>))
    
    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pep8"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pep8 not installed"</span>))

    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pylint"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pylint not installed"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">rm buffer if it exists</span>
    (<span style="color: #8b0000;">when</span> (get-buffer pb) (kill-buffer pb))
    
    ;; <span style="color: #ff0000; font-weight: bold;">only run if in a python code-block</span>
    (<span style="color: #8b0000;">when</span> (and (eq 'src-block (car eop))
               (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))

      ;; <span style="color: #ff0000; font-weight: bold;">tempfile for the code</span>
      (setq tempfile (make-temp-file <span style="color: #228b22;">"pychecker"</span> nil <span style="color: #228b22;">".py"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">create code file</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop)))
      
      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pyflakes %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (setq pyflakes-status status)
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n* pyflakes output (status=%s)</span>
<span style="color: #228b22;">pyflakes checks your code for errors. You should probably fix all of these.</span>

<span style="color: #228b22;">"</span> status))
          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">get the line number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match (format <span style="color: #228b22;">"^%s:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>
                                      (file-name-nondirectory tempfile))
                              line)
                (<span style="color: #8b0000;">progn</span>
                  (setq n (match-string 1 line))
                  (setq content (match-string 2 line))
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     n
                                     (format <span style="color: #228b22;">"Line %s: %s"</span> n content))))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))

      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pep8 %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n\n* pep8 output (status = %s)\n"</span> status))
          (insert <span style="color: #228b22;">"pep8 is the [[http://legacy.python.org/dev/peps/pep-0008][officially recommended style]] for writing Python code. Fixing these will usually make your code more readable and beautiful. Your code will probably run if you do not fix them, but, it will be ugly.</span>

<span style="color: #228b22;">"</span>)
          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">get the line number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match (format <span style="color: #228b22;">"^%s:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>
                                      (file-name-nondirectory tempfile))
                              line)
                (<span style="color: #8b0000;">progn</span>
                  (setq n (match-string 1 line))
                  (setq content (match-string 2 line))
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     n
                                     (format <span style="color: #228b22;">"Line %s: %s"</span> n content))))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))

      ;; <span style="color: #ff0000; font-weight: bold;">pylint</span>
      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pylint -r no %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n\n* pylint (status = %s)\n"</span> status))
          (insert <span style="color: #228b22;">"pylint checks your code for errors, style and convention. It is complementary to pyflakes and pep8, and usually more detailed.</span>

<span style="color: #228b22;">"</span>)

          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">pylint gives a line and column number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match <span style="color: #228b22;">"[A-Z]:\\s-+</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">,\\s-*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>                            
                              line)
                (<span style="color: #8b0000;">let</span> ((line-number (match-string 1 line))
                      (column-number (match-string 2 line))
                      (content (match-string 3 line)))
                     
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s)(forward-line 0)(forward-char %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     line-number
                                     column-number
                                     line)))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))
    
      (<span style="color: #8b0000;">when</span> (get-buffer pb)
        (switch-to-buffer-other-window pb)
        (goto-char (point-min))
        (insert <span style="color: #228b22;">"Press q to close the window\n"</span>)
        (org-mode)       
        (org-cycle '(64))
        ;; <span style="color: #ff0000; font-weight: bold;">make read-only and press q to quit</span>
        (setq buffer-read-only t)
        (use-local-map (copy-keymap org-mode-map))
        (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer))))

      (<span style="color: #8b0000;">unless</span> (= 0 pyflakes-status)
        (forward-line 4)
        (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pyflakes exited non-zero. please fix errors"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">final cleanup and delete file</span>
      (delete-file tempfile)
      (switch-to-buffer-other-window cb))))


(<span style="color: #8b0000;">defadvice</span> <span style="color: #8b2323;">org-babel-execute:python</span> (before pychecker)
  (org-py-check))

(ad-activate 'org-babel-execute:python)
</pre>
</div>

<pre class="example">
org-babel-execute:python
</pre>

<p>
Now, when I try to run this code block, which has some errors in it:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">a</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>  <span style="color: #ff0000; font-weight: bold;"># a variable we do not use</span>


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x, y):  <span style="color: #ff0000; font-weight: bold;"># unused argument</span>
    <span style="color: #8b0000;">return</span> x - b <span style="color: #ff0000; font-weight: bold;"># undefined</span>

<span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> * c
</pre>
</div>

<p>
I get a new buffer with approximately these contents:
</p>

<div class="org-src-container">

<pre class="src src-org">Press q to close the window

<span style="color: #8b2323;">* pyflakes output (status=1)</span>
pyflakes checks your code for errors. You should probably fix all of these.

<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5))">Line 5:  undefined name 'b'</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 7))">Line 7:  undefined name 'c'</a></span>


<span style="color: #8b2323;">* pep8 output (status = 1)</span>
pep8 is the <span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="http://legacy.python.org/dev/peps/pep-0008">officially recommended style</a></span> for writing Python code. Fixing these will usually make your code more readable and beautiful. Your code will probably run if you do not fix them, but, it will be ugly.

<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5))">Line 5: 17: E261 at least two spaces before inline comment</a></span>


<span style="color: #8b2323;">* pylint (status = 22)pylint checks your code for errors, style and convention. It is complementary to pyflakes and pep8, and usually more detailed.</span>

No config file found, using default configuration
<span style="color: #4682b4;">************* Module pychecker68224dkX</span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Invalid module name "pychecker68224dkX" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Missing module docstring (missing-docstring)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Invalid constant name "a" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid function name "f" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid argument name "x" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid argument name "y" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Missing function docstring (missing-docstring)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5)(forward-line 0)(forward-char 15))">E:  5,15: Undefined variable 'b' (undefined-variable)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 9))">W:  4, 9: Unused argument 'y' (unused-argument)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 7)(forward-line 0)(forward-char 10))">E:  7,10: Undefined variable 'c' (undefined-variable)</a></span>
</pre>
</div>

<p>
Each of those links takes me to either the line, or the position of the error (in the case of pylint)! I have not tested this on more than a handful of code blocks, but it has worked pretty nicely on them so far!
</p>

<p>
Of course, you must have pyflakes, pep8 and pylint installed. But those are all easily installed with pip as far as I can tell.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Showing what data went into a code block on export]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/22/Showing-what-data-went-into-a-code-block-on-export" />
    <id>http://jkitchin.github.io/blog/2014/09/22/Showing-what-data-went-into-a-code-block-on-export</id>
    <updated>2014-09-22T12:33:51Z</updated>
    <published>2014-09-22T12:25:29Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Showing what data went into a code block on export]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/22/Showing-what-data-went-into-a-code-block-on-export"><![CDATA[


<p>
Sometimes I define variables in the header of a code block and then use the code to analyze the data. In org-mode this is super, and you can read the file and easily see what is going on. 
</p>

<p>
When you export the file, however, the information is lost, and in the exported result you cannot see what data went into a code block, or figure out where it is from. 
</p>

<p>
Today we examine how to get that information into exported code. First, we setup a simple example that will do what need.
</p>

<table id="tbl-data" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">4</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">9</td>
</tr>
</tbody>
</table>

<p>
Now a code block that has a defined variable in the header that uses data from the table defined above.
</p>

<div class="org-src-container">

<pre class="src src-python" id="print-table"><span style="color: #8b0000;">return</span> data
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">4</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">9</td>
</tr>
</tbody>
</table>

<p>
During export, org-mode does some interesting things to the document, including removing the headers from the code blocks, which makes it impossible to access them inside the export. The headers are apparently removed during org-babel-exp-process-buffer. It does not appear possible to advise this function because it processes the whole buffer at once, and we need to save data for each code block.  
</p>

<p>
So, we will have to preprocess the buffer to get the parameters on each block, and then put the parameters in the export afterwards. For this, we can use a filter. We will preprocess the buffer to get names of tables, and parameters of src-blocks. (I suppose we could put this preprocessing in the advice function, but I tend to avoid advice when possible).
</p>

<p>
Here is how we can get a list of the table-names indicating their name or that they are results (results are enclosed in ()).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) 'table
  (<span style="color: #8b0000;">lambda</span> (element)     
    (or (org-element-property <span style="color: #cd0000;">:name</span> element) (org-element-property <span style="color: #cd0000;">:results</span> element))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">tbl-data</td>
<td class="left">(print-table)</td>
<td class="left">()</td>
<td class="left">()</td>
</tr>
</tbody>
</table>

<p>
Similarly, here is the list of parameters for each block.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) 'src-block
  (<span style="color: #8b0000;">lambda</span> (element)     
    (org-element-property <span style="color: #cd0000;">:parameters</span> element)))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">:var data=tbl-data :results value</td>
</tr>
</tbody>
</table>

<p>
Now, we combine them with filters to modify the output. First, we preprocess to get each list, and then in the filter, we will pop off each value and insert the data. We will also get the language for each code block, and add that in the export. We use a filter because we are not modified the transcoded text, simply adding some new text in front of it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ox-mrkup-filter-table</span> (text back-end info)
  (<span style="color: #8b0000;">let</span> ((tblname (pop tblnames)))
    (message <span style="color: #228b22;">"tblname is \"%s\""</span> tblname)
    ; <span style="color: #ff0000; font-weight: bold;">pop does not remove nil from the list, so we do it here.</span>
    (<span style="color: #8b0000;">when</span> (null tblname) (setq tblnames (cdr tblnames)))
    (<span style="color: #8b0000;">cond</span>
     ((listp tblname)  ; <span style="color: #ff0000; font-weight: bold;">from results</span>
      (concat (format <span style="color: #228b22;">"&lt;br&gt;Results: %s"</span> (car tblname)) text))
     ((null tblname)   ; <span style="color: #ff0000; font-weight: bold;">no name</span>
      text)
     (t ; <span style="color: #ff0000; font-weight: bold;">everything else</span>
      (concat (format <span style="color: #228b22;">"&lt;br&gt;Table name: %s"</span> tblname) text)))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ox-mrkup-filter-src-block</span> (text back-end info)
  (<span style="color: #8b0000;">let</span> ((params (pop src-params))
        (lang (pop src-langs)))
    (<span style="color: #8b0000;">when</span> (null params) (setq src-params (cdr src-params)))
    (<span style="color: #8b0000;">if</span> params  
        (concat (format <span style="color: #228b22;">"&lt;pre&gt;Language = %s\nParameters = %s&lt;/pre&gt;"</span> lang params) text)
      text)))

;; <span style="color: #ff0000; font-weight: bold;">preprocess to get table names, src parameters and languages.</span>
(<span style="color: #8b0000;">let</span> ((tblnames (org-element-map (org-element-parse-buffer) 'table
                  (<span style="color: #8b0000;">lambda</span> (element)     
                    (or (org-element-property <span style="color: #cd0000;">:name</span> element)                    
                        (org-element-property <span style="color: #cd0000;">:results</span> element)))))

      (src-params (org-element-map (org-element-parse-buffer) 'src-block
                    (<span style="color: #8b0000;">lambda</span> (element)     
                      (org-element-property <span style="color: #cd0000;">:parameters</span> element))))

      (src-langs (org-element-map (org-element-parse-buffer) 'src-block
                    (<span style="color: #8b0000;">lambda</span> (element)     
                      (org-element-property <span style="color: #cd0000;">:language</span> element))))

      ;; <span style="color: #ff0000; font-weight: bold;">register the filters</span>
      (org-export-filter-table-functions '(ox-mrkup-filter-table))
      (org-export-filter-src-block-functions '(ox-mrkup-filter-src-block)))

  ;; <span style="color: #ff0000; font-weight: bold;">and export the result</span>
  (browse-url (org-export-to-file 'html <span style="color: #228b22;">"custom-src-table-export-3.html"</span>)))
</pre>
</div>

<pre class="example">
#&lt;process open custom-src-table-export-3.html&gt;
</pre>


<p>
Here is the resulting html file: <a href="/media/2014-09-22-Showing-what-data-went-into-a-code-block-on-export/custom-src-table-export-3.html">custom-src-table-export-3.html</a> which shows the new export behavior. It might not be too difficult to make links between the parameters and the tables, but it would require parsing the :parameters string. For now, this makes it easy enough to read in HTML where the data is coming from (assuming fluency in org-mode header arguments!).
</p>

<p>
Special thanks to Aaron Ecay, and Charles Berry on the org-mode mailing list for pointing me towards a solution. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/22/Showing-what-data-went-into-a-code-block-on-export.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Getting information about named tables in exported org-files]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/21/Getting-information-about-named-tables-in-exported-org-files" />
    <id>http://jkitchin.github.io/blog/2014/09/21/Getting-information-about-named-tables-in-exported-org-files</id>
    <updated>2014-09-21T14:34:50Z</updated>
    <published>2014-09-21T14:34:50Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Getting information about named tables in exported org-files]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/21/Getting-information-about-named-tables-in-exported-org-files"><![CDATA[


<p>
I have found that the names of tables typically get lost when you export an org-file to another format like html or pdf. Since we may use named tables as data sources, it can become unclear in the exported file what has happened, or which table data came from. In this post, we examine how to include the name of a table in exported html. Here are two named tables <code>tbl-1</code> and <code>tbl-2</code> that will form the beginning of our effort. 
</p>

<table id="tbl-1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">3</td>
</tr>
</tbody>
</table>

<p>
Another table, so we have something to work with later.
</p>

<table id="tbl-2" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">a</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">5</td>
</tr>

<tr>
<td class="right">3</td>
</tr>
</tbody>
</table>


<p>
Org-buffers get parsed into nested lists, with properties usually in plists. It will be convenient to get a list of the keys for an element, so we can tell what information we have on each element. Some code for this can be found here: <a href="http://www.emacswiki.org/emacs/mon-plist-utils.el">http://www.emacswiki.org/emacs/mon-plist-utils.el</a> . Rather than use that recursive approach, here we just loop through the plist and accumulate the keys.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp" id="elisp-keys">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">plist-get-keys</span> (plist)
  (interactive)
  (<span style="color: #8b0000;">let</span> ((keys))
    (<span style="color: #8b0000;">while</span> (car plist)
      (add-to-list 'keys (car plist) t)
      (setq plist (cddr plist)))
    keys))

; <span style="color: #ff0000; font-weight: bold;">example of use</span>
(plist-get-keys '(<span style="color: #cd0000;">:a</span> 1 <span style="color: #cd0000;">:b</span> 3 <span style="color: #cd0000;">:parent</span> '(another plist)))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">:a</td>
<td class="left">:b</td>
<td class="left">:parent</td>
</tr>
</tbody>
</table>


<p>
Now, when we parse a buffer for elements, we get a nested lisp data structure, and the best I can tell is we need the cadr of that list to get to the relevant plist of properties. So, here, we map over the tables, and see what properties are available.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map
    (org-element-parse-buffer) 'table
  (<span style="color: #8b0000;">lambda</span> (element)  (plist-get-keys (cadr element))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">:begin</td>
<td class="left">:end</td>
<td class="left">:type</td>
<td class="left">:tblfm</td>
<td class="left">:contents-begin</td>
<td class="left">:contents-end</td>
<td class="left">:value</td>
<td class="left">:post-blank</td>
<td class="left">:post-affiliated</td>
<td class="left">:name</td>
<td class="left">:parent</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">:begin</td>
<td class="left">:end</td>
<td class="left">:type</td>
<td class="left">:tblfm</td>
<td class="left">:contents-begin</td>
<td class="left">:contents-end</td>
<td class="left">:value</td>
<td class="left">:post-blank</td>
<td class="left">:post-affiliated</td>
<td class="left">:name</td>
<td class="left">:parent</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">:begin</td>
<td class="left">:end</td>
<td class="left">:type</td>
<td class="left">:tblfm</td>
<td class="left">:contents-begin</td>
<td class="left">:contents-end</td>
<td class="left">:value</td>
<td class="left">:post-blank</td>
<td class="left">:post-affiliated</td>
<td class="left">:results</td>
<td class="left">:parent</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">:begin</td>
<td class="left">:end</td>
<td class="left">:type</td>
<td class="left">:tblfm</td>
<td class="left">:contents-begin</td>
<td class="left">:contents-end</td>
<td class="left">:value</td>
<td class="left">:post-blank</td>
<td class="left">:post-affiliated</td>
<td class="left">:caption</td>
<td class="left">:parent</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">:begin</td>
<td class="left">:end</td>
<td class="left">:type</td>
<td class="left">:tblfm</td>
<td class="left">:contents-begin</td>
<td class="left">:contents-end</td>
<td class="left">:value</td>
<td class="left">:post-blank</td>
<td class="left">:post-affiliated</td>
<td class="left">:name</td>
<td class="left">:caption</td>
<td class="left">:parent</td>
</tr>

<tr>
<td class="left">:begin</td>
<td class="left">:end</td>
<td class="left">:type</td>
<td class="left">:tblfm</td>
<td class="left">:contents-begin</td>
<td class="left">:contents-end</td>
<td class="left">:value</td>
<td class="left">:post-blank</td>
<td class="left">:post-affiliated</td>
<td class="left">:results</td>
<td class="left">:parent</td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
Depending on when you run the codeblock above (i.e. I ran it at different stages of development of this document, so some tables after this point are shown), you see different results; some of the tables are RESULTS from code blocks with no names, and two tables have a caption.  
</p>

<p>
Let us now map over the tables and see if they have names. We add an unnamed table, and a named table, both with captions.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> an unnamed table of category counts.</caption>

<colgroup>
<col  class="left" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">category</th>
<th scope="col" class="right">count</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">emacs</td>
<td class="right">4</td>
</tr>

<tr>
<td class="left">orgmode</td>
<td class="right">3</td>
</tr>
</tbody>
</table>

<table id="python-table" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 2:</span> an named table of category counts on python.</caption>

<colgroup>
<col  class="left" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">category</th>
<th scope="col" class="right">count</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Python</td>
<td class="right">4</td>
</tr>

<tr>
<td class="left">pep8</td>
<td class="right">3</td>
</tr>
</tbody>
</table>

<p>
Here we get the names of the tables. Only three tables have names, and several are unnamed.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map
    (org-element-parse-buffer) 'table
  (<span style="color: #8b0000;">lambda</span> (element)  (plist-get (cadr element) <span style="color: #cd0000;">:name</span>)))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">tbl-1</td>
<td class="left">tbl-2</td>
<td class="left">python-table</td>
</tr>
</tbody>
</table>


<p>
If you think that is a little awkward, I agree. Here is probably a better way to get that information using features in org-mode..
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map
    (org-element-parse-buffer) 'table
  (<span style="color: #8b0000;">lambda</span> (element)  (org-element-property <span style="color: #cd0000;">:name</span> element)))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">tbl-1</td>
<td class="left">tbl-2</td>
<td class="left">python-table</td>
</tr>
</tbody>
</table>


<p>
I had thought we could use a <a href="http://orgmode.org/manual/Advanced-configuration.html">filter</a> to add the name to each table. The issue with filtering is that we get the transcoded text directly, and no practical way to get back to the element it came from (at least none I could find). I have previously used filters (e.g. for <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/09/28/Changing-links-to-files-so-they-work-in-a-blog/">changing links on export</a> ) for something like this, but it involved parsing the document once, then exporting, and iterating through the results to change the output. I want to do something different here, and fix the issue on the export. 
</p>

<p>
That requires us to derive a new backend for export, with our new function for formatting. This will give us access to the actual table element, and we can use the original transcoding function to get most of the table, and our own code to modify that before it is exported.
</p>

<p>
Basically, we just want to add an HTML anchor to the table with some text to indicate the table name. With the anchor we can then link to it elsewhere like this:
</p>

<a href="#tbl-2"> See tbl-2</a>

<p>
We just define a function that satisfies the transcoding function signature (element contents info), and if our element has a :name property, we will prepend it onto the usual table output for html. We will go ahead and code in some conditional code for different backends, although for now only handle the html backend.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">my-table-format</span> (table contents info)
  (<span style="color: #8b0000;">let</span> ((tblname (org-element-property <span style="color: #cd0000;">:name</span> table)))    
    (<span style="color: #8b0000;">cond</span>
     ((eq (elt (plist-get info <span style="color: #cd0000;">:back-end</span>) 2) 'html)  
      (concat
       (<span style="color: #8b0000;">when</span> tblname
         (format <span style="color: #228b22;">"&lt;br&gt;TBLNAME: &lt;a name=\"%s\"&gt;&lt;/a&gt;%s&lt;br&gt;"</span> tblname tblname))
       (org-html-table table contents info))))))

(org-export-define-derived-backend 'my-html 'html
  <span style="color: #cd0000;">:translate-alist</span> '((table . my-table-format)))


(browse-url (org-export-to-file 'my-html <span style="color: #228b22;">"custom-src-table-export.html"</span>))
</pre>
</div>

<pre class="example">
#&lt;process open custom-src-table-export.html&gt;
</pre>

<p>
That seems to do it. You may need to see <a href="/media/2014-09-21-Getting-information-about-named-tables-in-exported-org-files/custom-src-table-export.html">custom-src-table-export.html</a> to see the newly annotated tables, since they probably do not show up in the blog post.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/21/Getting-information-about-named-tables-in-exported-org-files.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Make some org-sections read-only]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only" />
    <id>http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only</id>
    <updated>2014-09-13T13:50:49Z</updated>
    <published>2014-09-13T13:50:49Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Make some org-sections read-only]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/13/Make-some-org-sections-read-only"><![CDATA[


<p>
There are times where I want an org-file to be <i>partly</i> read-only. For example, there might be instructions that should not be modified. In this post we consider how to implement that. For now, we only want an org-section to be read-only, and we will designate those sections by a tag read<sub>only</sub>. Then, the idea is that a hook function would be run when the org-file is loaded, and mark regions of text as read-only before the user can do anything.
</p>

<p>
In Emacs, you can mark a section of text, and set it to have a property of read-only. So, we can just map over the entries, and any heading that is tagged as read<sub>only</sub> can be made read-only!
</p>

<p>
Here we set the first few characters of this buffer to be read-only.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-text-properties 1 8 '(read-only t))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Emacs is semi-serious about what read-only means. You cannot even change properties of read-only text, unless you set inhibit-read-only as a variable.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((inhibit-read-only t))
 (remove-text-properties 1 8 '(read-only t)))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Now, we can map over the entries in this buffer, and set any heading tagged read<sub>only</sub> to actually be that way like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-map-entries (<span style="color: #8b0000;">lambda</span> ()
                   (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
                          (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
                          (end (org-element-property <span style="color: #cd0000;">:end</span> element)))
                     (add-text-properties begin end '(read-only t))))
                 <span style="color: #228b22;">"read_only"</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">t</td>
</tr>
</tbody>
</table>

<p>
To get this to work when org-mode is turned on, we just wrap it in a function, add the function to a hook, and a function to undo the read-only behavior. I found that if I use the end reported by org-element-at-point, it includes the first character of the next section, we take one away from the end to avoid that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-mark-readonly</span> ()
  (interactive)
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
            (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
            (end (org-element-property <span style="color: #cd0000;">:end</span> element)))
       (add-text-properties begin (- end 1) '(read-only t))))
   <span style="color: #228b22;">"read_only"</span>)
 (message <span style="color: #228b22;">"Made readonly!"</span>))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-remove-readonly</span> ()
  (interactive)
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let*</span> ((element (org-element-at-point))
            (begin (org-element-property <span style="color: #cd0000;">:begin</span> element))
            (end (org-element-property <span style="color: #cd0000;">:end</span> element))
            (inhibit-read-only t))
         (remove-text-properties begin (- end 1) '(read-only t))))
     <span style="color: #228b22;">"read_only"</span>))

(add-hook 'org-mode-hook 'org-mark-readonly)
</pre>
</div>

<p>
That seem to be all there is. After executing the code above, when I open this file, the next section is read-only! I can use the other function to remove that if I need to edit it. Score one for Emacs + org-mode!
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Read-only section&#xa0;&#xa0;&#xa0;<span class="tag"><span class="read_only">read_only</span></span></h2>
<div class="outline-text-2" id="text-1">
<p>
This text is so important, it should be read-only.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Editable section</h2>
<div class="outline-text-2" id="text-2">
<p>
You can do what you want here. Like add text.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/13/Make-some-org-sections-read-only.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
</feed>
