<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-12-11T23:05:58Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A short example]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/12/11/A-short-example" />
    <id>http://jkitchin.github.io/blog/2015/12/11/A-short-example</id>
    <updated>2015-12-11T18:05:43Z</updated>
    <published>2015-12-11T18:05:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="citations" />
    <category scheme="http://jkitchin.github.io/blog" term="orgref" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[A short example]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/12/11/A-short-example"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Reference types</a></li>
<li><a href="#sec-2">2. Citation types</a></li>
<li><a href="#sec-3">3. Multiple citations and sorting within citation</a></li>
<li><a href="#sec-4">4. Space chomping and punctuation testing</a></li>
<li><a href="#sec-5">5. Building</a></li>
<li><a href="#sec-6">6. Summary thoughts</a></li>
<li><a href="#sec-7">7. Bibliography</a></li>
</ul>
</div>
</div>

<p>
As a potential solution for citions in org-mode for non-LaTeX export, here we introduce csl (citation syntax lisp). The idea is heavily influenced by the xml-based Citation Syntax Language, but uses lisp sexps instead.
</p>

<p>
Briefly, there is a csl file that contains two variables: citation-style and bibliography-style. The citation-style defines how the in-text citations are represented for different types of citations. The bibliography-style defines how the bibliography is constructed.
</p>

<p>
What do we gain by this?
</p>
<ol class="org-ol">
<li>No need for external citeproc program, and hackability by org-mode experts.
</li>
<li>Punctuation transposition and space chomping, i.e. put superscripts on the right side of punctuation if you want it, and remove whitespace before superscripts if you want it.
</li>
<li>Total tunability of the citation format to different backends.
</li>
<li>Easy to change bibliography format with the bibliographystyle link.
</li>
</ol>

<p>
The real code for this is too long to blog about. Instead, you should check it out here: <a href="https://github.com/jkitchin/org-ref/tree/master/citeproc">https://github.com/jkitchin/org-ref/tree/master/citeproc</a> 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Reference types</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>A book <a class='org-ref-reference' href="#kittel-2005-introd-solid">kittel-2005-introd-solid</a>.
</li>

<li>An article <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</li>

<li>A miscellaneous bibtex type <a class='org-ref-reference' href="#xu-suppor">xu-suppor</a>.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Citation types</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>Regular citation:  <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</li>
<li>citeauthor:  <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</li>
<li>citeyear:   <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Multiple citations and sorting within citation</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>a,b: <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>,<a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a>
</li>
<li>b,a: <a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a>,<a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Space chomping and punctuation testing</h2>
<div class="outline-text-2" id="text-4">
<ul class="org-ul">
<li>Citation at end of sentence <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>.
</li>
<li>Citation in clause <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>,<a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a>, with a comma.
</li>
<li>Citation in middle of <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>,<a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a> a sentence.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Building</h2>
<div class="outline-text-2" id="text-5">

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'load-path <span style="color: #008000;">"."</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">org-ref-citeproc</span>)

(<span style="color: #0000FF;">when</span> (file-exists-p <span style="color: #008000;">"readme.html"</span>) (delete-file <span style="color: #008000;">"readme.html"</span>))
(<span style="color: #0000FF;">let</span> ((org-export-before-parsing-hook '(orcp-citeproc)))
  (browse-url (org-html-export-to-html)))
</pre>
</div>

<pre class="example">
#&lt;process open ./readme.html&gt;
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-hook 'org-export-before-parsing-hook 'orcp-citeproc)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">orcp-citeproc</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-6">
<ol class="org-ol">
<li>Other bibtex entries need to be tested out.
</li>
<li>Remaining bibtex fields need to be defined.
</li>
<li>Standardization of styling that can be done. Not all features described in my csl are supported, e.g. et. al. and probably others.
</li>
<li>The author-year style needs name disambiguation somehow.
</li>
<li>Next step, hyperlinking in html.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Bibliography</h2>
<div class="outline-text-2" id="text-7">
<p>

<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="kittel-2005-introd-solid">[kittel-2005-introd-solid] Charles Kittel, Introduction to Solid State Physics, Wiley (2005).</a></li>
<li><a id="kitchin-2015-examp">[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, <i>ACS Catalysis</i>, <b>5(6)</b>, 3894-3899 (2015). <a href=" http://dx.doi.org/10.1021/acscatal.5b00538 ">link</a>. <a href="http://dx.doi.org/10.1021/acscatal.5b00538">doi</a>.</a></li>
<li><a id="xu-suppor">[xu-suppor] @miscxu-suppor,
  author =	 Zhongnan Xu and Jan Rossmeisl and John R. Kitchin,
  title =	 Supporting data for: A linear response, DFT+U study of trends
                  in the oxygen evolution activity of transition metal rutile
                  dioxides. doi:10.5281/zenodo.12635,
  keywords =	 DESC0004031, early-career, ,
  year =         2015,
  url =		 https://zenodo.org/record/12635,
  doi =		 10.5281/zenodo.12635
</a></li>
<li><a id="kitchin-2015-data-surfac-scien">[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, <i>"Surface Science "</i>, <b>N/A</b>, in press (2015). <a href="http://www.sciencedirect.com/science/article/pii/S0039602815001326">link</a>. <a href="http://dx.doi.org/10.1016/j.susc.2015.05.007">doi</a>.</a></li>
</ul>
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/12/11/A-short-example.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Post-processing an org-buffer on export]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/12/01/Post-processing-an-org-buffer-on-export" />
    <id>http://jkitchin.github.io/blog/2015/12/01/Post-processing-an-org-buffer-on-export</id>
    <updated>2015-12-01T21:01:27Z</updated>
    <published>2015-12-01T13:58:46Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Post-processing an org-buffer on export]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/12/01/Post-processing-an-org-buffer-on-export"><![CDATA[



<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/11/22/Adding-emacs-command-key-bindings-and-help-functionality-to-org-mode/">post</a> we examined getting tooltips on emacs keybindings and command syntax in an org-buffer. Someone asked in a comment if we could get that to export to html, or LaTeX. The short answer is not directly, org-mode doesn't recognize our functionalized syntax as an element, and there is no direct way to modify their appearance on export.
</p>

<p>
There is, however, a hook function that runs before parsing, and we can use that to transform these patterns to what we want. Here, I illustrate how to make the key-bindings and commands bold with a tooltip on them for an html export. Basically, we do an export, and then post-process the html output to put what we want in. I found this easier than pre-processing because the documentation for the command tooltip was too big to fit into an html snippet, and an html block causes carriage returns in the html. I didn't find a more elegant solution to that problem.
</p>

<p>
Here we replace the key-binding syntax with the actual keybinding in bold, and a tooltip of the command, and the command syntax we replace with bold command and a tooltip for the documentation. It works pretty well. The documentation for helm is pretty extensive, and gets cutoff in the tooltip. Otherwise, this seems pretty satisfactory.
</p>

<p>
This won't show in the blog post, so you will have to checkout the exported html here: <a href="/media/2015-12-01-Post-processing-an-org-buffer-on-export/blog.html">blog.html</a> .
</p>

<p>
Try \<b title="The command is helm-find-files.">C-x C-f</b> to open a file. You might enjoy using <b title="Main function to execute helm sources.

Keywords supported:
:sources :input :prompt :resume :preselect
:buffer :keymap :default :history :allow-nest

Extra LOCAL-VARS keywords are supported, see below.

PLIST is a list like (:key1 val1 :key2 val2 ...) or
(&optional sources input prompt resume
            preselect buffer keymap default history).

Basic keywords are the following:

:sources

A list of sources used for this session.  It also accepts a
symbol, interpreted as a variable of a helm source
i.e (a symbol can be passed instead of a list of sources).
It also accepts an alist representing a helm source, which is
detected by (assq 'name ANY-SOURCES).
NOTE: In this case the source is embedded in the helm command and
have no symbol name, so it is not reachable from outside.
It will be referenced in `helm-sources' as a whole alist.

:input

Temporary value of `helm-pattern', ie. initial input of minibuffer.

:prompt

Prompt other than "pattern: ".

:resume

If t, Resurrect previously instance of `helm'.  Skip the initialization.
If 'noresume, this instance of `helm' cannot be resumed.

:preselect

Initially selected candidate.  Specified by exact candidate or a regexp.

:buffer

`helm-buffer' instead of *helm*.

:keymap

`helm-map' for current `helm' session.

:default

A default argument that will be inserted in minibuffer with M-n.
When nil or not present `thing-at-point' will be used instead.
If `helm--maybe-use-default-as-input' is non--nil display will be
updated using :default arg as input unless :input is specified,
which in this case will take precedence on :default
This is a string or a list, in this case the car of the list will
be used as initial default input, but you will be able to cycle in this
list with M-n.

:history

By default all minibuffer input is pushed to `minibuffer-history',
if an argument HISTORY is provided, input will be pushed to HISTORY.
History element should be a symbol.

:allow-nest

Allow running this helm command within a running helm session.

Of course, conventional arguments are supported, the two are same.

(helm :sources sources :input input :prompt prompt :resume resume
       :preselect preselect :buffer buffer :keymap keymap :default default
       :history history)

and

(helm sources input prompt resume preselect buffer keymap default history)

are the same.

However the use of non keyword args is deprecated and should not be used.

Other keywords are interpreted as local variables of this helm session.
The `helm-' prefix can be omitted.  For example,

(helm :sources 'helm-source-buffers-list
       :buffer "*buffers*" :candidate-number-limit 10)

means starting helm session with `helm-source-buffers'
source in *buffers* buffer and set variable `helm-candidate-number-limit'
to 10 as session local variable.

(fn &key SOURCES INPUT PROMPT RESUME PRESELECT BUFFER KEYMAP DEFAULT HISTORY ALLOW-NEST OTHER-LOCAL-VARS)">helm</b> too. Or this variable <b title="Get the list of agenda files.
Optional UNRESTRICTED means return the full list even if a restriction
is currently in place.
When ARCHIVES is t, include all archive files that are really being
used by the agenda files.  If ARCHIVE is `ifmode', do this only if
`org-agenda-archives-mode' is t.">org-agenda-files</b>.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">rx</span>)

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">elisp-symbol-keybinding-re</span>
  (<span style="color: #0000FF;">rx</span>
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">opening \\[</span>
   (eval <span style="color: #008000;">"\\["</span>)
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">one or more characters that are not ]</span>
   (group (one-or-more (not (any <span style="color: #008000;">"]"</span>))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">The closing ]</span>
   <span style="color: #008000;">"]"</span>)
<span style="color: #036A07;">"Regexp for an elisp command keybinding syntax. \\[</span><span style="color: #D0372D;">some-command</span><span style="color: #036A07;">]</span>
<span style="color: #036A07;">Regexp group 1 matches src_emacs-lisp[:results html]{(command-html "</span>some-command<span style="color: #008000;">")}."</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-process-key-bindings</span> (backend)
  (goto-char (point-min))
  (<span style="color: #0000FF;">while</span> (re-search-forward elisp-symbol-keybinding-re nil t)
    (replace-match
     (<span style="color: #0000FF;">cond</span>
      ((eq backend 'html)
       (format <span style="color: #008000;">"&lt;b title=\"The command is %s.\"&gt;%s&lt;/b&gt;"</span>
               (match-string 1)
               (substitute-command-keys (match-string 0))))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-process-emacs-commands</span> (backend)
  (goto-char (point-min))
  (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"`</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">']+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">'"</span> nil t)
    (replace-match
     (<span style="color: #0000FF;">cond</span>
      ((eq backend 'html)
       (format <span style="color: #008000;">"&lt;b title=\"%s\"&gt;%s&lt;/b&gt;"</span>
          (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">or</span> (fboundp (intern (match-string 1)))
                  (boundp (intern (match-string 1))))
              (documentation (intern (match-string 1)))
            <span style="color: #008000;">"No command found."</span>)
          (match-string 1)))))))

(<span style="color: #0000FF;">with-current-buffer</span> (org-html-export-as-html)
  (org-process-key-bindings 'html)
  (org-process-emacs-commands 'html)
  (write-file <span style="color: #008000;">"blog.html"</span>)
  (browse-url <span style="color: #008000;">"blog.html"</span>))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">org-process-emacs-commands</td>
</tr>
</tbody>
</table>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Update: A filter approach to exporting</h2>
<div class="outline-text-2" id="text-1">
<p>
Our patterns are all in org-paragraphs. We can use a filter to modify the paragraph after it is "transcoded". Here is the filter function. It basically does the same thing, through another mechanism.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">my-paragraph-filter</span> (data backend info)
  (<span style="color: #0000FF;">cond</span>
   ((eq 'html backend)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">emacs commands</span>
    (<span style="color: #0000FF;">setq</span> data (replace-regexp-in-string
                <span style="color: #008000;">"`</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">']+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">'"</span>
                (<span style="color: #0000FF;">lambda</span> (x)
                  (string-match <span style="color: #008000;">"`</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">']+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">'"</span> x)
                  (<span style="color: #0000FF;">when</span> (match-string 1 x)
                    (format <span style="color: #008000;">"&lt;b title=\"%s\"&gt;%s&lt;/b&gt;"</span>
                            (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">or</span> (fboundp (intern (match-string 1 x)))
                                    (boundp (intern (match-string 1 x))))
                                (documentation (intern (match-string 1 x)))
                              <span style="color: #008000;">"No command found."</span>)
                            (match-string 1 x))))
                data))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">keybindings</span>
    (<span style="color: #0000FF;">setq</span> data (replace-regexp-in-string
                <span style="color: #008000;">"\\\\\\[</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">]]+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">]"</span>
                (<span style="color: #0000FF;">lambda</span> (x)
                  (string-match <span style="color: #008000;">"\\\\\\[</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">]]+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">]"</span> x)
                  (<span style="color: #0000FF;">when</span> (fboundp  (intern (match-string-no-properties 1 x)))
                    (format <span style="color: #008000;">"&lt;b title=\"The command is %s.\"&gt;%s&lt;/b&gt;"</span>
                            (match-string 1 x)
                            (substitute-command-keys (match-string 0 x)))))
                data)))))

(add-to-list 'org-export-filter-paragraph-functions 'my-paragraph-filter)
(browse-url (org-html-export-to-html))
</pre>
</div>

<pre class="example">
#&lt;process open ./blog.html&gt;
</pre>

<p>
Try the command <b title="Opens a helm interface to actions for org-ref.
Shows bad citations, ref links and labels">org-ref</b> to check your document for issues.  Insert a citation with org-ref using \<b title="The command is org-ref-insert-cite-link.">M-ESC C</b>.
</p>

<p>
Now, this should show up in the blog!</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/12/01/Post-processing-an-org-buffer-on-export.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Contextual help in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/24/Contextual-help-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/11/24/Contextual-help-in-org-mode</id>
    <updated>2015-11-24T10:08:41Z</updated>
    <published>2015-11-24T10:08:41Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Contextual help in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/24/Contextual-help-in-org-mode"><![CDATA[


<p>
org-mode is great, plain text and all, but it can be difficult to figure out all the things you can do at any particular place in the buffer. Here, we explore some ideas on making org-mode a bit more discoverable. One way to do this that we explore here is to create a help function that you run, and it tells you about the element that `org-element-context' knows about, then gives you some hints of what you can do there. To do this, we create a series of functions for each kind of element we provide help on.
</p>

<p>
You may want to see the video: <a href="https://www.youtube.com/watch?v=99uxJWqZGzA">https://www.youtube.com/watch?v=99uxJWqZGzA</a> 
</p>

<p>
The kind of help we want is a description of the element, some commands we can run on the element and what they do, and if there are some key-bindings. We also want to make sure if the user has changed the key-bindings, the right values get shown. Finally, it would be nice to allow users to add their own documentation if they want.
</p>

<p>
So, here is the lengthy block of code we use for this purpose. We create a function for each element type that we provide documentation for. We also provide a mechanism for users to add their own notes for future reference. I leverage the help-buffer here to simplify some functional text, e.g. the key commands and clickable functions, as well as history navigation. I could also do most of that in org-mode buffers, with different functionality, but I save that for another day.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ore-user-directory</span> <span style="color: #008000;">"~/.emacs.d/ore/"</span>
  <span style="color: #036A07;">"Directory to store user additions to the notes."</span>)


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-user-documentation</span> (type)
  <span style="color: #036A07;">"Return user documentation for org element TYPE if it exists.</span>
<span style="color: #036A07;">Notes are returned as plain text, and will be rendered in `</span><span style="color: #D0372D;">help-mode</span><span style="color: #036A07;">'."</span>
  (<span style="color: #0000FF;">let</span> ((fname (expand-file-name (format <span style="color: #008000;">"%s.org"</span> type) ore-user-directory)))
    (concat
     <span style="color: #008000;">"User documentation:\n"</span>
     (<span style="color: #0000FF;">if</span> (file-exists-p fname)
         (<span style="color: #0000FF;">with-temp-buffer</span>
           (insert <span style="color: #008000;">"\n"</span>)
           (insert-file-contents fname)
           (indent-rigidly (point-min) (point-max) 5)
           (buffer-string))
       <span style="color: #008000;">"None defined."</span>)
     (format  <span style="color: #008000;">"\n\nEdit [[file:%s]]"</span> fname))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-latex</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for latex fragment."</span>
  (concat
   (substitute-command-keys <span style="color: #008000;">"You are on a LaTeX fragment or environment.</span>

<span style="color: #008000;">\\[</span><span style="color: #D0372D;">org-toggle-latex-overlays</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-toggle-latex-overlays</span><span style="color: #008000;">' to toggle LaTeX images on it.</span>

<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'latex)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-link</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for org links."</span>
  (<span style="color: #0000FF;">let*</span> ((link (org-element-context))
         (type (org-element-property <span style="color: #006FE0;">:type</span> link))
         (protocols (assoc type org-link-protocols))
         (follow-func (cadr protocols))
         (export-func (caddr protocols)))
    (concat
     (format
      (substitute-command-keys <span style="color: #008000;">"You are on a %s link.</span>

<span style="color: #008000;">Link path: %s</span>
<span style="color: #008000;">%s</span>

<span style="color: #008000;">Clicking on the link will run `</span><span style="color: #D0372D;">%s</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">This link uses this function for export: `</span><span style="color: #D0372D;">%s</span><span style="color: #008000;">'</span>

<span style="color: #008000;">If you are on an image link, you can toggle it with \\[</span><span style="color: #D0372D;">org-toggle-inline-images</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-toggle-inline-images</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">You can toggle the link display with `</span><span style="color: #D0372D;">org-toggle-link-display</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">See Info node `(org) Hyperlinks'.</span>

<span style="color: #008000;">%s</span>

<span style="color: #008000;">%s\n\n"</span>)
      type
      (org-element-property <span style="color: #006FE0;">:path</span> link)
      (format <span style="color: #008000;">"Whole link: %s"</span> (buffer-substring
                                (org-element-property <span style="color: #006FE0;">:begin</span> link)
                                (org-element-property <span style="color: #006FE0;">:end</span> link)))
      (pp-to-string follow-func)
      (pp-to-string export-func)
      (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
      (ore-user-documentation 'link)))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-src-block-header-p</span> (element)
  <span style="color: #036A07;">"Return whether point is in a src-block header."</span>
  (<span style="color: #0000FF;">and</span> (eq 'src-block (car element))
       (<span style="color: #0000FF;">save-excursion</span>
         (<span style="color: #0000FF;">let</span> ((cp (point))
               (lp (line-number-at-pos)))
           (goto-char (org-element-property <span style="color: #006FE0;">:begin</span> element))
           (= lp (line-number-at-pos))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-src-block-header</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for src-block header."</span>
  (concat
   <span style="color: #008000;">"You are in a src-block header.</span>

<span style="color: #008000;">This line tells org-mode that</span>
<span style="color: #008000;">it is a src-block, and language of the src-block. There are</span>
<span style="color: #008000;">also optional header arguments. See Info node `(org) Header arguments'</span>

<span style="color: #008000;">"</span>
   (format <span style="color: #008000;">"The default headers are described here: `</span><span style="color: #D0372D;">org-babel-default-header-args:%s</span><span style="color: #008000;">'</span>

<span style="color: #008000;">"</span> (org-element-property <span style="color: #006FE0;">:language</span> element))
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'src-block-header)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-src-block</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for a src-block."</span>
  (concat
   (substitute-command-keys <span style="color: #008000;">"You are in a src-block.</span>

<span style="color: #008000;">C-c C-c to execute this block.</span>
<span style="color: #008000;">\\[</span><span style="color: #D0372D;">org-babel-tangle</span><span style="color: #008000;">]  org-babel-tangle</span>

<span style="color: #008000;">You can edit the block with \\[</span><span style="color: #D0372D;">org-edit-special</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-edit-special</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">See Info node `(org) Working with source code' for more details.\n\n"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'src-block)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-headline</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for a headline."</span>
  (concat
   (<span style="color: #0000FF;">when</span> (bolp)
     (format  <span style="color: #008000;">"You are at the beginning of a headline.</span>

<span style="color: #008000;">\\[</span><span style="color: #D0372D;">org-cycle</span><span style="color: #008000;">] to cycle Info node `(org) Global and local cycling'.</span>

<span style="color: #008000;">Check `</span><span style="color: #D0372D;">org-use-speed-commands</span><span style="color: #008000;">'\n\n"</span>))

   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">in a headline</span>
   (substitute-command-keys
    <span style="color: #008000;">"You are in a headline. You can change:</span>

<span style="color: #008000;"> Visibility with \\[</span><span style="color: #D0372D;">org-cycle</span><span style="color: #008000;">]</span>

<span style="color: #008000;"> TODO state \\[</span><span style="color: #D0372D;">org-shiftleft</span><span style="color: #008000;">] and \\[</span><span style="color: #D0372D;">org-shiftright</span><span style="color: #008000;">] or</span>
<span style="color: #008000;"> `</span><span style="color: #D0372D;">org-todo</span><span style="color: #008000;">'.</span>

<span style="color: #008000;"> Your current todo sets can be found in `</span><span style="color: #D0372D;">org-todo-sets</span><span style="color: #008000;">'.</span>

<span style="color: #008000;"> Priority \\[</span><span style="color: #D0372D;">org-shiftup</span><span style="color: #008000;">] (`</span><span style="color: #D0372D;">org-priority-up</span><span style="color: #008000;">') and</span>
<span style="color: #008000;"> \\[</span><span style="color: #D0372D;">org-shiftdown</span><span style="color: #008000;">] (`</span><span style="color: #D0372D;">org-priority-down</span><span style="color: #008000;">')</span>

<span style="color: #008000;"> Tags  \\[</span><span style="color: #D0372D;">org-ctrl-c-ctrl-c</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-set-tags</span><span style="color: #008000;">'</span>

<span style="color: #008000;"> Set a property with \\[</span><span style="color: #D0372D;">org-set-property</span><span style="color: #008000;">] `</span><span style="color: #D0372D;">org-set-property</span><span style="color: #008000;">'.</span>

<span style="color: #008000;"> Delete a property with \\[</span><span style="color: #D0372D;">org-delete-property</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-delete-property</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'headline)))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">timestamp</span>
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-timestamp</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for timestamps."</span>
  (concat
   (substitute-command-keys <span style="color: #008000;">"You are on a timestamp.</span>

<span style="color: #008000;">If you click on it, you will see the date in the agenda. With the</span>
<span style="color: #008000;">cursor on the &lt;&gt; or [] \\[</span><span style="color: #D0372D;">org-shiftup</span><span style="color: #008000;">] and \\[</span><span style="color: #D0372D;">org-shiftdown</span><span style="color: #008000;">] will</span>
<span style="color: #008000;">switch from active to inactive timestamps.</span>

<span style="color: #008000;">You can change the date by putting the cursor on a date part and</span>
<span style="color: #008000;">using \\[</span><span style="color: #D0372D;">org-shiftup</span><span style="color: #008000;">] and \\[</span><span style="color: #D0372D;">org-shiftdown</span><span style="color: #008000;">] or \\[</span><span style="color: #D0372D;">org-shiftleft</span><span style="color: #008000;">]</span>
<span style="color: #008000;">and \\[</span><span style="color: #D0372D;">org-shiftright</span><span style="color: #008000;">]</span>

<span style="color: #008000;">See Info node `(org) Dates and times'.</span>

<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'timestamp)))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">table table-row table-cell</span>
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-table</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for tables."</span>
  (concat
   <span style="color: #008000;">"You are in a table.</span>

<span style="color: #008000;">Move cell to cell with [TAB]. When you are in the last cell, TAB adds a new row.</span>

<span style="color: #008000;">Move rows up and down with \\[</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">] and \\[</span><span style="color: #D0372D;">org-metadown</span><span style="color: #008000;">].</span>
<span style="color: #008000;">Move columns left and right with \\[</span><span style="color: #D0372D;">org-metaleft</span><span style="color: #008000;">] and \\[</span><span style="color: #D0372D;">org-metaright</span><span style="color: #008000;">].</span>

<span style="color: #008000;">Sort a column with \\[</span><span style="color: #D0372D;">org-sort</span><span style="color: #008000;">] `</span><span style="color: #D0372D;">org-sort</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">Insert a row with `</span><span style="color: #D0372D;">org-table-insert-row</span><span style="color: #008000;">'.</span>
<span style="color: #008000;">Delete a row with `</span><span style="color: #D0372D;">org-table-kill-row</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">Insert a column with `</span><span style="color: #D0372D;">org-table-insert-column</span><span style="color: #008000;">'.</span>
<span style="color: #008000;">Delete a column with `</span><span style="color: #D0372D;">org-table-delete-column</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">`C-c -     (`</span><span style="color: #D0372D;">org-table-insert-hline</span><span style="color: #008000;">')'</span>
<span style="color: #008000;">     Insert a horizontal line below current row.  With a prefix</span>
<span style="color: #008000;">     argument, the line is created above the current line.</span>

<span style="color: #008000;">`C-c &lt;RET&gt;     (`</span><span style="color: #D0372D;">org-table-hline-and-move</span><span style="color: #008000;">')'</span>
<span style="color: #008000;">     Insert a horizontal line below current row, and move the cursor</span>
<span style="color: #008000;">     into the row below that line.</span>

<span style="color: #008000;">You can transpose a table with `</span><span style="color: #D0372D;">org-table-transpose-table-at-point</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">Info node `(org) Tables'.</span>

<span style="color: #008000;">"</span>
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'table)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-plain-list</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' doucmentation for plain lists."</span>
  (concat
   (substitute-command-keys
    <span style="color: #008000;">"You are on a plain list.</span>
<span style="color: #008000;">See Info node `(org) Plain lists'.</span>

<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'plain-list)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-item</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for items in a list"</span>
  (concat
   (substitute-command-keys
    <span style="color: #008000;">"You are on an item in a list.</span>

<span style="color: #008000;">You can move items up and down with \\[</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">' and \\[</span><span style="color: #D0372D;">org-meta-down</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metadown</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">You can add a new item with \\[</span><span style="color: #D0372D;">org-meta-return</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-meta-return</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">You can change the indentation of an item with  \\[</span><span style="color: #D0372D;">org-metaleft</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metaleft</span><span style="color: #008000;">' and \\[</span><span style="color: #D0372D;">org-meta-right</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-meta-right</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">You can change the bullet of the item with  \\[</span><span style="color: #D0372D;">org-shiftleft</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-shiftleft</span><span style="color: #008000;">' and \\[</span><span style="color: #D0372D;">org-shiftright</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-shiftright</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">See Info node `(org) Plain lists' for other things like sorting, cycling, checkboxes, etc...</span>

<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'item)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-keyword</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for a keyword."</span>
  (concat
   (substitute-command-keys
    <span style="color: #008000;">"You are on a keyword.</span>

<span style="color: #008000;">You may need to run \\[</span><span style="color: #D0372D;">org-ctrl-c-ctrl-c</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-ctrl-c-ctrl-c</span><span style="color: #008000;">' to refresh its value if you change it.</span>

<span style="color: #008000;">You can move keywords up and down with \\[</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">' and \\[</span><span style="color: #D0372D;">org-metadown</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metadown</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'keyword)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore-paragraph</span> (element)
  <span style="color: #036A07;">"`</span><span style="color: #D0372D;">ore</span><span style="color: #036A07;">' documentation for a paragraph."</span>
  (concat
   (substitute-command-keys
    <span style="color: #008000;">"You are in a paragraph.</span>

<span style="color: #008000;">You can move a paragraph up with \\[</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metaup</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">You can move a paragraph up with \\[</span><span style="color: #D0372D;">org-metadown</span><span style="color: #008000;">] or `</span><span style="color: #D0372D;">org-metadown</span><span style="color: #008000;">'.</span>

<span style="color: #008000;">You can mark the paragraph with `</span><span style="color: #D0372D;">mark-paragraph</span><span style="color: #008000;">'.</span>


<span style="color: #008000;">"</span>)
   (format  <span style="color: #008000;">"\nClick for details on the face [[face:%s]]\n"</span> (face-at-point))
   (ore-user-documentation 'paragraph)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ore</span> ()
  <span style="color: #036A07;">"Help function for the org-mode element at point."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">with-help-window</span>
      (help-buffer)
    (<span style="color: #0000FF;">let*</span> ((oeap (org-element-context))
           (ore-func (intern (format <span style="color: #008000;">"ore-%s"</span> (car oeap))))
           (s (<span style="color: #0000FF;">if</span> (fboundp ore-func)
                  (funcall ore-func oeap)
                (format
                 <span style="color: #008000;">"No documentation found for %s.</span>

<span style="color: #008000;">%s"</span>
                 (car oeap)
                 (ore-user-documentation (car oeap))))))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">There are some special cases.</span>
      (<span style="color: #0000FF;">cond</span>
       ((<span style="color: #0000FF;">and</span>  (eq 'src-block (car oeap))
              (ore-src-block-header-p oeap))
        (<span style="color: #0000FF;">setq</span> s (ore-src-block-header oeap)))

       ((<span style="color: #0000FF;">or</span> (eq 'table (car oeap))
            (eq 'table-row (car oeap))
            (eq 'table-cell (car oeap)))
        (<span style="color: #0000FF;">setq</span> s (ore-table oeap)))

       ((<span style="color: #0000FF;">or</span> (eq 'latex-fragment (car oeap))
            (eq 'latex-environment (car oeap)))
        (<span style="color: #0000FF;">setq</span> s (ore-latex oeap))))

      (princ s)
      (princ <span style="color: #008000;">"\n\nHere is how org-mode sees the element.\n\n"</span>)
      (pp oeap))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">match-next-ore-file</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  <span style="color: #036A07;">"Font-lock function to make file links clickable in help-mode."</span>
  (<span style="color: #0000FF;">when</span>  (re-search-forward <span style="color: #008000;">"\\[\\[file:</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">]]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">\\]\\]"</span> limit t)
    (<span style="color: #0000FF;">let*</span> ((fname (expand-file-name
                   (match-string 1)
                   ore-user-directory))
           (beg (match-beginning 0))
           (end (match-end 0))
           (find-func `(<span style="color: #0000FF;">lambda</span> ()
                         (<span style="color: #0000FF;">interactive</span>)
                         (find-file ,fname))))

      (add-text-properties
       beg
       end
       `(mouse-face
         highlight
         display <span style="color: #008000;">"User documentation"</span>
         local-map ,(<span style="color: #0000FF;">let</span> ((map (copy-keymap help-mode-map)))
                      (define-key map [mouse-1] find-func)
                      map)
         help-echo (format
                    <span style="color: #008000;">"Click to edit User documentation.\n%s"</span>
                    fname))))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">match-next-ore-face</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  <span style="color: #036A07;">"Font-lock function to make face links clickable in help-mode."</span>
  (<span style="color: #0000FF;">when</span>  (re-search-forward <span style="color: #008000;">"\\[\\[face:</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">]]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">\\]\\]"</span> limit t)
    (<span style="color: #0000FF;">let*</span> ((face (match-string 1))
           (beg (match-beginning 0))
           (end (match-end 0))
           (func `(<span style="color: #0000FF;">lambda</span> ()
                    (<span style="color: #0000FF;">interactive</span>)
                    (describe-face ,face))))

      (add-text-properties
       beg
       end
       `(mouse-face
         highlight
         local-map ,(<span style="color: #0000FF;">let</span> ((map (copy-keymap help-mode-map)))
                      (define-key map [mouse-1] func)
                      map)
         display ,face
         help-echo (format
                    <span style="color: #008000;">"Click to show face information.\n%s"</span>
                    face))))))

(add-hook 'help-mode-hook
          (<span style="color: #0000FF;">lambda</span> ()
            (font-lock-add-keywords
             nil
             '((match-next-ore-file . font-lock-keyword-face)
               (match-next-ore-face . font-lock-keyword-face)))))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Let's add to the org menu for "Help at point"</span>
(easy-menu-change
 '(<span style="color: #008000;">"Org"</span>)
 <span style="color: #008000;">"Help"</span>
 '([<span style="color: #008000;">"Help at point"</span> ore])
 <span style="color: #008000;">"Show/Hide"</span>)
</pre>
</div>

<p>
<a class='org-ref-reference' href="#xu-suppor">xu-suppor</a>   \(e^x\)
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> <span class="todo TODO">TODO</span> elements</h2>
<div class="outline-text-2" id="text-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">a</td>
<td class="right">b</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>

<p>
list (plain/numbered)
</p>
<ul class="org-ul">
<li>add element
<ul class="org-ul">
<li>move elements (up/down indent/outdent)
</li>
</ul>
</li>
<li>
</li>

<li>item 1
</li>
<li>item 2
</li>
<li>item 3
</li>
</ul>

<p>
checkbox
</p>
<ul class="org-ul">
<li><code>[&#xa0;]</code> check it
</li>
</ul>


<div class="figure">
<p><img src="/media/2015-11-24-Contextual-help-in-org-mode/11-eos.png"> 
</p>
</div>

<p>
<a href="org#External links">org#External links</a>
</p>

<p>
<a class='org-ref-reference' href="#lizzit-2001-surfac-ru">lizzit-2001-surfac-ru</a>
</p>


<p>

</p>

<p>
\(latex_fragment\)
</p>

<p>
\(latex fragment\)
</p>

\begin{equation}
2-3
\end{equation}

<div class="org-src-container">

<pre class="src src-emacs-lisp">(+ 3 4 5)
</pre>
</div>

<pre class="example">
12
</pre>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2015-10-18 Sun&gt;</span></span>   <span class="timestamp-wrapper"><span class="timestamp">[2015-10-18 Sun]</span></span></p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/24/Contextual-help-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Improving org-ref cite links with tooltips]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/23/Improving-org-ref-cite-links-with-tooltips" />
    <id>http://jkitchin.github.io/blog/2015/11/23/Improving-org-ref-cite-links-with-tooltips</id>
    <updated>2015-11-23T07:03:06Z</updated>
    <published>2015-11-23T07:03:06Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="orgref" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Improving org-ref cite links with tooltips]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/23/Improving-org-ref-cite-links-with-tooltips"><![CDATA[


<p>
Org-ref uses timers to give you messages about the cite link at point. I am not so crazy about the timer, there is always a (short) delay, and I have had trouble debugging timers in the past, and you have to put the point on the link. Since I wrote that code, I have learned some new things about Emacs, including dynamic tooltips. This will allow me to use the mouse to see what a cite link refers to. While reading documents, I am more likely to use a mouse than when typing a document, and getting a tooltip by hovering sounds like a good idea.
</p>

<p>
Here, we explore using dynamic tooltips on cite links. The idea is pretty simple, we tie into font-lock to add a function to the :help-echo property of a cite link. The function will go to point, and compute the citation string at point, which will be displayed as a tooltip when the mouse hovers over the citation.
</p>

<p>
Font-lock allows you to specify a function that sets match-data and that can have other side-effects, e.g. setting text properties. Org-ref has a regexp that defines cite links, which we use here, and a function that gets the citation string at point. We just go to the mouse position, and get that string, wrapped in a save-excursion macro so that point does not actually move. Then, we add the function to font-lock keywords, and we are done!
</p>

<p>
Here are some papers we wrote on using org-mode
<a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>,<a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a> and some other references
in my bibliography <a class='org-ref-reference' href="#zou-2014-cobal-embed">zou-2014-cobal-embed</a>,<a class='org-ref-reference' href="#zlotea-2014-nanoal">zlotea-2014-nanoal</a> and one final
example <a class='org-ref-reference' href="#zhu-2015">zhu-2015</a>.
</p>


<p>
Here is the short code required to do this. You can see the tooltips in action here: <a href="https://www.youtube.com/watch?v=ifSmlId2rk0">https://www.youtube.com/watch?v=ifSmlId2rk0</a> 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-ref-match-next-cite-link</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  (<span style="color: #0000FF;">when</span> (re-search-forward org-ref-cite-re limit t)
    (add-text-properties
     (match-beginning 0) (match-end 0)
     (list
      'help-echo (<span style="color: #0000FF;">lambda</span> (window object position)
                   (<span style="color: #0000FF;">save-excursion</span>
                     (goto-char position)
                     (<span style="color: #0000FF;">let</span> ((s (org-ref-get-citation-string-at-point)))
                       (<span style="color: #0000FF;">with-temp-buffer</span>
                         (insert s)
                         (fill-paragraph)
                         (buffer-string)))))))))

<span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">do this for this buffer</span>
(font-lock-add-keywords
    nil
    '((org-ref-match-next-cite-link (0  'org-ref-cite-face t)))
    t)
(font-lock-fontify-buffer)

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">do this for every org file</span>
(add-hook
 'org-mode-hook
 (<span style="color: #0000FF;">lambda</span> ()
   (font-lock-add-keywords
    nil
    '((org-ref-match-next-cite-link (0  'org-ref-cite-face t)))
    t)))
</pre>
</div>


<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="kitchin-2015-data-surfac-scien">[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, <i>"Surface Science "</i>, <b>(0)</b>,  -  (2015). <a href="http://www.sciencedirect.com/science/article/pii/S0039602815001326">link</a>. <a href="http://dx.doi.org/10.1016/j.susc.2015.05.007">doi</a>.</a></li>
<li><a id="kitchin-2015-examp">[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, <i>ACS Catalysis</i>, <b>5(6)</b>, 3894-3899 (2015). <a href=" http://dx.doi.org/10.1021/acscatal.5b00538 ">link</a>. <a href="http://dx.doi.org/10.1021/acscatal.5b00538">doi</a>.</a></li>
<li><a id="zhu-2015">[zhu-2015] Yinlong Zhu, Wei Zhou, Zhi-Gang Chen, Yubo Chen, , Chao Su, Moses Tad\'e & Zongping Shao, \ceSrNb_0.1Co_0.7Fe_0.2 O_3-$\delta$ Perovskite As a  Next-Generation Electrocatalyst for Oxygen Evolution in  Alkaline Solution, <i>Angew. Chem. Int. Ed.</i>, <b>54(13)</b>, 3897-3901 (2015). <a href="http://dx.doi.org/10.1002/anie.201408998">link</a>. <a href="http://dx.doi.org/10.1002/anie.201408998">doi</a>.</a></li>
<li><a id="zlotea-2014-nanoal">[zlotea-2014-nanoal] Zlotea, Morfin, Nguyen, Nguyen, , Nelayah, Ricolleau, Latroche & Piccolo, Nanoalloying Bulk-Immiscible Iridium and Palladium Inhibits  Hydride Formation and Promotes Catalytic Performances, <i>Nanoscale</i>, <b>6(17)</b>, 9955 (2014). <a href="http://dx.doi.org/10.1039/C4NR02836H">link</a>. <a href="http://dx.doi.org/10.1039/c4nr02836h">doi</a>.</a></li>
<li><a id="zou-2014-cobal-embed">[zou-2014-cobal-embed] Zou, Huang, Goswami, , Silva, Sathe, Mikmekov\'a, ska & Asefa, Cobalt-Embedded Nitrogen-Rich Carbon Nanotubes Efficiently  Catalyze Hydrogen Evolution Reaction At All pH Values, <i>Angewandte Chemie</i>, <b></b>, 4461-4465 (2014). <a href="http://dx.doi.org/10.1002/ange.201311111">link</a>. <a href="http://dx.doi.org/10.1002/ange.201311111">doi</a>.</a></li>
</ul>
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/23/Improving-org-ref-cite-links-with-tooltips.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Adding emacs command key-bindings and help functionality to org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/22/Adding-emacs-command-key-bindings-and-help-functionality-to-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/11/22/Adding-emacs-command-key-bindings-and-help-functionality-to-org-mode</id>
    <updated>2015-11-22T10:08:18Z</updated>
    <published>2015-11-22T10:08:18Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Adding emacs command key-bindings and help functionality to org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/22/Adding-emacs-command-key-bindings-and-help-functionality-to-org-mode"><![CDATA[


<p>
The documentation of functions in emacs allows you to put some light markup into function doc strings that will render as the key sequence required to run the command when you look up the help on the function. I would like to have something like that in org-mode. You can look up the key-binding to a command like this:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(substitute-command-keys <span style="color: #008000;">"\\[</span><span style="color: #D0372D;">org-agenda</span><span style="color: #008000;">]"</span>)
</pre>
</div>

<pre class="example">
C-c a
</pre>

<p>
We are going to explore a way to recognize the syntax shown above, change its appearance to alert us that we are looking at an emacs command, add a tooltip, and make it clickable to open the documentation, and s (super) clickable to find the function code. Font lock is the tool we will use for this. Basically, we need a regular expression to match the syntax, and a function to find the next instance, and put some properties on the matched text.
</p>

<p>
I made a video (<a href="https://www.youtube.com/watch?v=VLUMW0sR4Vk">https://www.youtube.com/watch?v=VLUMW0sR4Vk</a> ) showing what this post is all about. It isn't easy to see in the post ☺.
</p>

<p>
Here we use the `rx' library to build up a regular expression for this. It is a bit easier to document than a raw regexp. Since we are matching \ in the pattern, there are some obligatory escaping \ characters in there too. All we need is to integrate this into font-lock. We define a function that will move the point to the end of the next match, and put properties on the match. We will go ahead and make the text clickable so we can access documentation and code easily. The tooltip will show the key-binding to run the command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">rx</span>)

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">elisp-symbol-keybinding-re</span>
  (<span style="color: #0000FF;">rx</span>
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">opening \\[</span>
   (eval <span style="color: #008000;">"\\["</span>)
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">one or more characters that are not ]</span>
   (group (one-or-more (not (any <span style="color: #008000;">"]"</span>))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">The closing ]</span>
   <span style="color: #008000;">"]"</span>)
<span style="color: #036A07;">"Regexp for an elisp command keybinding syntax. \\[</span><span style="color: #D0372D;">some-command</span><span style="color: #036A07;">]</span>
<span style="color: #036A07;">Regexp group 1 matches `</span><span style="color: #D0372D;">some-command</span><span style="color: #036A07;">'."</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">match-next-keybinding</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  <span style="color: #036A07;">"Move point to the end of the next expression matching</span>
<span style="color: #036A07;">`</span><span style="color: #D0372D;">elisp-symbol-keybinding-re</span><span style="color: #036A07;">', and put properties on the match</span>
<span style="color: #036A07;">that shows the key sequence. Non-bound commands are not</span>
<span style="color: #036A07;">fontified."</span>
  (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> (re-search-forward
              elisp-symbol-keybinding-re
              limit t)
             (fboundp (intern (match-string 1))))
    (<span style="color: #0000FF;">let*</span> ((beg (match-beginning 0))
           (end (match-end 0))
           (s (match-string 0))
           (command (match-string 1))
           (describe-func `(<span style="color: #0000FF;">lambda</span> ()
                    <span style="color: #036A07;">"Run `</span><span style="color: #D0372D;">describe-function</span><span style="color: #036A07;">' on the command."</span>
                    (<span style="color: #0000FF;">interactive</span>)
                    (describe-function (intern ,command))))
           (find-func `(<span style="color: #0000FF;">lambda</span> ()
                     <span style="color: #036A07;">"Run `</span><span style="color: #D0372D;">find-function</span><span style="color: #036A07;">' on the command."</span>
                     (<span style="color: #0000FF;">interactive</span>)
                     (find-function (intern ,command))))
           (map (make-sparse-keymap)))

      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is what gets run when you click on it.</span>
      (define-key map [mouse-1] describe-func)
      (define-key map [s-mouse-1] find-func)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here we define the text properties</span>
      (add-text-properties
       beg end
       `(local-map ,map
         mouse-face highlight
         help-echo ,(format
                     <span style="color: #008000;">"%s\n\nClick for documentation.\ns-mouse-1 to find function."</span>
                     (substitute-command-keys s))
         keybinding t)))))
</pre>
</div>

<p>
Let's go ahead and make syntax for `some-command' too. This one seems simple enough we just write a regexp for it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">match-next-emacs-command</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  <span style="color: #036A07;">"Move point to the end of the next expression matching</span>
<span style="color: #036A07;">`</span><span style="color: #D0372D;">this-syntax</span><span style="color: #036A07;">', and put a tooltip on the match</span>
<span style="color: #036A07;">that shows the key sequence. Works on commands and variables."</span>
  (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> (re-search-forward
              <span style="color: #008000;">"`</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">']+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">'"</span>
              limit t)
             (<span style="color: #0000FF;">or</span> (boundp (intern (match-string 1)))
                 (fboundp (intern (match-string 1)))))
    (<span style="color: #0000FF;">let*</span> ((beg (match-beginning 0))
           (end (match-end 0))
           (s (match-string 0))
           (command (match-string 1))
           (describe-func
            `(<span style="color: #0000FF;">lambda</span> ()
               <span style="color: #036A07;">"Run `</span><span style="color: #D0372D;">describe-function/variable</span><span style="color: #036A07;">' on the command."</span>
               (<span style="color: #0000FF;">interactive</span>)
               (<span style="color: #0000FF;">cond</span> ((fboundp (intern ,command))
                      (describe-function (intern ,command)))
                     ((boundp (intern ,command))
                      (describe-variable (intern ,command))))))
           (find-func `(<span style="color: #0000FF;">lambda</span> ()
                     <span style="color: #036A07;">"Run `</span><span style="color: #D0372D;">find-function</span><span style="color: #036A07;">' on the command."</span>
                     (<span style="color: #0000FF;">interactive</span>)
                     (find-function (intern ,command))))
           (map (make-sparse-keymap)))

      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is what gets run when you click on it.</span>
      (define-key map [mouse-1] describe-func)
      (define-key map [s-mouse-1] find-func)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here we define the text properties</span>
      (add-text-properties
       beg end
       `(local-map ,map
         mouse-face highlight
         help-echo ,(format
                     <span style="color: #008000;">"%s\n\nClick for documentation.%s"</span>
                     (<span style="color: #0000FF;">if</span> (fboundp (intern command))
                         (substitute-command-keys (format <span style="color: #008000;">"\\[</span><span style="color: #D0372D;">%s</span><span style="color: #008000;">]"</span> command))
                       <span style="color: #008000;">"Variable"</span>)
                     (<span style="color: #0000FF;">if</span> (fboundp (intern command))
                         <span style="color: #008000;">"\ns-mouse-1 to find function."</span>
                       <span style="color: #008000;">""</span>))
         keybinding t)))))
</pre>
</div>

<p>
Now we need a way to turn them on and off. We do that here with a minor mode.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">define-minor-mode</span> <span style="color: #006699;">emacs-keybinding-command-tooltip-mode</span>
  <span style="color: #036A07;">"Fontify on emacs keybinding syntax. Adds a tooltip for</span>
<span style="color: #036A07;">keybinding, and make the command clickable to get to the</span>
<span style="color: #036A07;">documentation."</span>
  <span style="color: #006FE0;">:lighter</span> <span style="color: #008000;">" KB"</span>
  (<span style="color: #0000FF;">if</span> emacs-keybinding-command-tooltip-mode
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">turn them on</span>
      (font-lock-add-keywords
       nil
       '((match-next-keybinding 1 font-lock-constant-face)
         (match-next-emacs-command 1 font-lock-constant-face)))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">turn them off</span>
    (font-lock-remove-keywords
     nil
     '((match-next-keybinding 1 font-lock-constant-face)
       (match-next-emacs-command 1 font-lock-constant-face))))
  (font-lock-fontify-buffer))
</pre>
</div>

<p>
Here we turn it on:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(emacs-keybinding-command-tooltip-mode -1)
</pre>
</div>

<p>
Here are some sample uses. You can use  \\[org-toggle-latex-overlays] to toggle latex overlays.
</p>

<p>
You can use \\[org-ref-helm-insert-cite-link]  to insert citations.
</p>

<p>
That more or less does it! I don't know if this is the canonical way to do this, but it works nicely here. You can also use overlays, but I found them a little confusing because they are not editable, and you have to toggle the minor mode to see them. Here we have unobtrusive tooltips. One downside is these won't export in any fashion in org-mode since it is not part of the syntax. It might be a good idea to adjust `font-lock-extra-managed-props' for this
</p>

<p>
It works for this syntax too: `helm', which is also commonly used in doc strings. This should be pretty handy in org-mode documents about Emacs!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/22/Adding-emacs-command-key-bindings-and-help-functionality-to-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Insert org-entities into org-mode with helm]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/21/Insert-org-entities-into-org-mode-with-helm" />
    <id>http://jkitchin.github.io/blog/2015/11/21/Insert-org-entities-into-org-mode-with-helm</id>
    <updated>2015-11-21T11:37:33Z</updated>
    <published>2015-11-21T11:37:33Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="helm" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Insert org-entities into org-mode with helm]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/21/Insert-org-entities-into-org-mode-with-helm"><![CDATA[


<p>
org-mode has a lot of pre-defined entities (see <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/03/Exporting-accented-characters-to-latex-from-org-mode/">http://kitchingroup.cheme.cmu.edu/blog/2013/10/03/Exporting-accented-characters-to-latex-from-org-mode/</a> ), otherwise known to me as non-ascii characters. I rarely remember what these are, and occasionally want to insert the LaTeX or HTML code, so here we build a helm command to show them to me, and allow me to select one for insertion. We generate the helm sources from org-entities below. It works pretty well!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-insert-org-entity</span> ()
  <span style="color: #036A07;">"Helm interface to insert an entity from `</span><span style="color: #D0372D;">org-entities</span><span style="color: #036A07;">'.</span>
<span style="color: #036A07;">F1 inserts utf-8 character</span>
<span style="color: #036A07;">F2 inserts entity code</span>
<span style="color: #036A07;">F3 inserts LaTeX code (does not wrap in math-mode)</span>
<span style="color: #036A07;">F4 inserts HTML code"</span>
  (<span style="color: #0000FF;">interactive</span>)
  (helm <span style="color: #006FE0;">:sources</span> (reverse
                  (<span style="color: #0000FF;">let</span> ((sources '())
                        toplevel
                        secondlevel)
                    (<span style="color: #0000FF;">dolist</span> (element (append
                                      '(<span style="color: #008000;">"* User"</span> <span style="color: #008000;">"** User entities"</span>)
                                      org-entities-user org-entities))
                      (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> (stringp element)
                                 (s-starts-with? <span style="color: #008000;">"* "</span> element))
                        (<span style="color: #0000FF;">setq</span> toplevel element))
                      (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> (stringp element)
                                 (s-starts-with? <span style="color: #008000;">"** "</span> element))
                        (<span style="color: #0000FF;">setq</span> secondlevel element)
                        (add-to-list
                         'sources
                         `((name . ,(concat
                                     toplevel
                                     (replace-regexp-in-string
                                      <span style="color: #008000;">"\\*\\*"</span> <span style="color: #008000;">" - "</span> secondlevel)))
                           (candidates . nil)
                           (action . ((<span style="color: #008000;">"insert utf-8 char"</span> . (<span style="color: #0000FF;">lambda</span> (candidate)
                                                               (insert (nth 6 candidate))))
                                      (<span style="color: #008000;">"insert org entity"</span> . (<span style="color: #0000FF;">lambda</span> (candidate)
                                                           (insert (concat <span style="color: #008000;">"\\"</span> (car candidate)))))
                                      (<span style="color: #008000;">"insert latex"</span> . (<span style="color: #0000FF;">lambda</span> (candidate)
                                                          (insert (nth 1 candidate))))
                                      (<span style="color: #008000;">"insert html"</span> . (<span style="color: #0000FF;">lambda</span> (candidate)
                                                         (insert (nth 3 candidate)))))))))
                      (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> element (listp element))
                        (<span style="color: #0000FF;">setf</span> (cdr (assoc 'candidates (car sources)))
                              (append
                               (cdr (assoc 'candidates (car sources)))
                               (list (cons
                                      (format <span style="color: #008000;">"%10s %s"</span> (nth 6 element) element)
                                      element))))))
                    sources))))
</pre>
</div>

<pre class="example">
helm-insert-org-entity
</pre>

<p>
Now I can write things like the particle was 60 Å in diameter at a temperature of 600°C, leading to an expansion coefficient of α=0.2 ± 0.01. It isn't quite as fast as knowing the keyboard shortcuts for those symbols, but a lot faster than looking them up then copy and pasting them. So far it seems like these export to HTML and LaTeX just fine, and they are more convenient and better looking than using the org-entities codes. This will make its way into jmax soon.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/21/Insert-org-entities-into-org-mode-with-helm.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Asynchronously running python blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode</id>
    <updated>2015-11-20T19:30:57Z</updated>
    <published>2015-11-20T11:46:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Asynchronously running python blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode"><![CDATA[


<p>
If you run long Python blocks from org-mode, you might want to keep working while it runs. Currently Emacs gets blocked and you have to wait patiently.  In this post we consider some ways to avoid this that run our code asynchronously, but still put results where they belong in the org-buffer.
</p>

<p>
This is a long post. You may want to see the video: <a href="https://www.youtube.com/watch?v=VDyoN8yipSE">https://www.youtube.com/watch?v=VDyoN8yipSE</a> , or skip to the <a href="#sec-3">end</a> where the best and final version is shown.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The async module</h2>
<div class="outline-text-2" id="text-1">
<p>
Here we consider an approach that uses <a href="https://github.com/jwiegley/emacs-async">https://github.com/jwiegley/emacs-async</a> module. The idea is to tangle the Python block at point to a temp file, then asynchronously run it. We capture the output and put it back in the buffer. We use a uuid to find the place to put the results in org-mode format. Here is the code that implements this idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">async</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute</span> ()
  <span style="color: #036A07;">"Run a python block at point asynchrously."</span>
  (<span style="color: #0000FF;">interactive</span>)

  (<span style="color: #0000FF;">let</span> ((current-file (buffer-file-name))
        (uuid (org-id-uuid))
        (temporary-file-directory <span style="color: #008000;">"./"</span>)
        (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>)))

    (org-babel-tangle '(4) tempfile)
    (org-babel-remove-result)
    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    (<span style="color: #0000FF;">async-start</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">what to start</span>
     `(<span style="color: #0000FF;">lambda</span> ()
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">now we run the command then cleanup</span>
        (<span style="color: #0000FF;">prog1</span>
            (shell-command-to-string (format <span style="color: #008000;">"python %s"</span> ,tempfile))
          (delete-file ,tempfile)))

     `(<span style="color: #0000FF;">lambda</span> (result)
        <span style="color: #036A07;">"Code that runs when the async function finishes."</span>
        (<span style="color: #0000FF;">save-window-excursion</span>
          (<span style="color: #0000FF;">save-excursion</span>
            (<span style="color: #0000FF;">save-restriction</span>
              (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                (goto-char (point-min))
                (re-search-forward ,uuid)
                (beginning-of-line)
                (kill-line)
                (insert (mapconcat
                         (<span style="color: #0000FF;">lambda</span> (x)
                           (format <span style="color: #008000;">": %s"</span> x))
                         (butlast (s-split <span style="color: #008000;">"\n"</span> result))
                         <span style="color: #008000;">"\n"</span>))))))))))
</pre>
</div>

<pre class="example">
org-babel-async-execute
</pre>

<p>
Here is a block to test it on. We can run the block, and keep on working while the code runs. The results seem to get inserted correctly at the right point even if I am in another window or frame! We don't get easy access to continuous output of the command. This wouldn't work if we close Emacs, but who does that?
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(5)

<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()
</pre>
</div>

<pre class="example">
hello world
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 10:17:53 2015
</pre>

<p>
There are some limitations to this approach. One of them is it assumes the src block is a stand-alone block that will run on its own. That is usually how I run mine, but I could see having other modules that should be tangled out of a file too. I think the script is being run in the current working directory, so it probably will find any local imports it needs.
</p>

<p>
You don't get any intermediate feedback on this process. It seems to be possible to do that with a different approach that puts some output in a new buffer, e.g. with start-process. But, you still need some clever code like the async model to know when to insert the results back into this buffer. We consider Emacs processes and sentinels next.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Emacs process approach with tangling</h2>
<div class="outline-text-2" id="text-2">
<p>
We can start a process in Emacs, and attach a sentinel function to it that runs after the process completes. Here is an example of that. We still tangle the src-block here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((current-file (buffer-file-name))
        (uuid (org-id-uuid))
        (temporary-file-directory <span style="color: #008000;">"./"</span>)
        (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>))
        (pbuffer (format <span style="color: #008000;">"*%s*"</span> uuid))
        process)

    (org-babel-tangle '(4) tempfile)
    (org-babel-remove-result)

    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    (<span style="color: #0000FF;">setq</span> process (start-process
                   uuid
                   pbuffer
                   <span style="color: #008000;">"python"</span>
                   tempfile))

    (set-process-sentinel
     process
     `(<span style="color: #0000FF;">lambda</span> (process event)
        (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"finished\n"</span> event)
          (delete-file ,tempfile)
          (<span style="color: #0000FF;">save-window-excursion</span>
            (<span style="color: #0000FF;">save-excursion</span>
              (<span style="color: #0000FF;">save-restriction</span>
                (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                  (goto-char (point-min))
                  (re-search-forward ,uuid)
                  (beginning-of-line)
                  (kill-line)
                  (insert (mapconcat
                           (<span style="color: #0000FF;">lambda</span> (x)
                             (format <span style="color: #008000;">": %s"</span> x))
                           (split-string
                            (<span style="color: #0000FF;">with-current-buffer</span> ,pbuffer (buffer-string))
                            <span style="color: #008000;">"\n"</span>)
                           <span style="color: #008000;">"\n"</span>)))))))
        (kill-buffer ,pbuffer)))))
</pre>
</div>

<pre class="example">
org-babel-async-execute
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(10)

<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()
</pre>
</div>

<pre class="example">
hello world
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 10:20:01 2015
</pre>

<p>
That works well from what I can see. There are some limitations. I doubt this will work if you use variables in the src block header. Next we consider an approach that does not do the tangling, and that will show us code output as it goes.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a id="ID-D8F2CBB5-31B2-4477-A363-E3C0063214DE" name="ID-D8F2CBB5-31B2-4477-A363-E3C0063214DE"></a><span class="section-number-2">3</span> Emacs process approach with no tangling</h2>
<div class="outline-text-2" id="text-3">
<p>
As an alternative to tangling to a file, here we just copy the code to a file and then run it. This allows us to use :var in the header to pass data in at run time. At the moment, this code only supports printed output from code blocks, not the value for :results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute:python</span> ()
  <span style="color: #036A07;">"Execute the python src-block at point asynchronously.</span>
<span style="color: #036A07;">:var headers are supported.</span>
<span style="color: #036A07;">:results output is all that is supported for output.</span>

<span style="color: #036A07;">A new window will pop up showing you the output as it appears,</span>
<span style="color: #036A07;">and the output in that window will be put in the RESULTS section</span>
<span style="color: #036A07;">of the code block."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((current-file (buffer-file-name))
         (uuid (org-id-uuid))
         (code (org-element-property <span style="color: #006FE0;">:value</span> (org-element-context)))
         (temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>))
         (pbuffer (format <span style="color: #008000;">"*%s*"</span> uuid))
         (varcmds (org-babel-variable-assignments:python
                   (nth 2 (org-babel-get-src-block-info))))
         process)

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get rid of old results, and put a place-holder for the new results to</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">come.</span>
    (org-babel-remove-result)

    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">open the results buffer to see the results in.</span>
    (switch-to-buffer-other-window pbuffer)

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Create temp file containing the code.</span>
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if there are :var headers insert them.</span>
      (<span style="color: #0000FF;">dolist</span> (cmd varcmds)
        (insert cmd)
        (insert <span style="color: #008000;">"\n"</span>))
      (insert code))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">run the code</span>
    (<span style="color: #0000FF;">setq</span> process (start-process
                   uuid
                   pbuffer
                   <span style="color: #008000;">"python"</span>
                   tempfile))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">when the process is done, run this code to put the results in the</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">org-mode buffer.</span>
    (set-process-sentinel
     process
     `(<span style="color: #0000FF;">lambda</span> (process event)
        (<span style="color: #0000FF;">save-window-excursion</span>
          (<span style="color: #0000FF;">save-excursion</span>
            (<span style="color: #0000FF;">save-restriction</span>
              (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                (goto-char (point-min))
                (re-search-forward ,uuid)
                (beginning-of-line)
                (kill-line)
                (insert
                 (mapconcat
                  (<span style="color: #0000FF;">lambda</span> (x)
                    (format <span style="color: #008000;">": %s"</span> x))
                  (butlast (split-string
                            (<span style="color: #0000FF;">with-current-buffer</span>
                                ,pbuffer
                              (buffer-string))
                            <span style="color: #008000;">"\n"</span>))
                  <span style="color: #008000;">"\n"</span>))))))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete the results buffer then delete the tempfile.</span>
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">finally, delete the process.</span>
        (<span style="color: #0000FF;">when</span> (get-buffer ,pbuffer)
          (kill-buffer ,pbuffer)
          (delete-window))
        (delete-file ,tempfile)
        (delete-process process)))))
</pre>
</div>

<pre class="example">
org-babel-async-execute:python
</pre>

<p>
Let us try it out again.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(1)

<span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(5):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> i

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(0.5)


<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()

<span style="color: #0000FF;">print</span> data

<span style="color: #0000FF;">raise</span> <span style="color: #6434A3;">IOError</span>(<span style="color: #008000;">'No file!'</span>)
</pre>
</div>

<pre class="example">
hello world
0
1
2
3
4
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 19:30:16 2015
[1, 3]
Traceback (most recent call last):
  File "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/py-84344aa1", line 18, in &lt;module&gt;
    raise IOError('No file!')
IOError: No file!
</pre>

<p>
It works fine for this simple example. We get to see the output as the code executes, which is a pleasant change from the usual way of running python blocks. There is some support for some header arguments, notably the :var header. I don't use :results value in Python, so for now only output is supported. We even support Exceptions in the output finally!
</p>

<p>
Maybe some org-moder's out there can try this and run it through some more rigorous paces?
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/20/Asynchronously-running-python-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Functional and display math in technical documents]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/19/Functional-and-display-math-in-technical-documents" />
    <id>http://jkitchin.github.io/blog/2015/11/19/Functional-and-display-math-in-technical-documents</id>
    <updated>2015-11-19T14:43:12Z</updated>
    <published>2015-11-19T06:07:15Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Functional and display math in technical documents]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/19/Functional-and-display-math-in-technical-documents"><![CDATA[


<p>
I have been thinking about a way to have functional and readable mathematics in technical documents. It has always bothered me that I have to write a LaTeX version of an equation, and then a separate implementation of the equation in code somewhere. At least twice in my life these separate representations have not agreed!
</p>

<p>
One solution might be if my functional code could be converted to LaTeX easily. I explore one simple approach to this here. It is somewhat inspired by this work here <a href="http://oremacs.com/2015/01/23/eltex/">http://oremacs.com/2015/01/23/eltex/</a> on writing LaTeX in emacs-lisp, and from my work with org-mode in mixing narrative text, LaTeX and code.
</p>

<p>
The idea is to use emacs-lisp for the code, so it is functional, but provide an alternative output for the <i>same code</i> for a document conversion. In other words, we accept there is more than one version we need: a functional version for working, and a consumption version for presentation. We will generate the consumption version from the functional version.
</p>

<p>
I know emacs-lisp is not ideal for mathematics the way we are accustomed to seeing it, but it enables the idea I want to explore here so we will try it.
</p>

<p>
Here is the simplest example I could come up with for functional math. We can run it ourselves, and verify it is correct.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(+ 1 2 3)
</pre>
</div>

<pre class="example">
6
</pre>

<p>
Now, I can change the meaning of this code temporarily, so that it not only evaluates the form, but also represents the equation and result in LaTeX code. If this was incorporated into a preprocessor of the document, we could have a functional version representing our equations, in code form, and a presentation version generated from this version. The code that follows isn't how I would do this is in some production setting; it is only to show that you can <i>temporarily</i> change the meaning of "+". In a production setting, there would just be (+ 1 2 3) in the text, and a preprocessor would find all the sexps in the text, and replace them with the export format using code like this. At least, that is what I am imagining. It might be feasible to do this already with inline org-babel calls and an org-mode export filter, but I didn't try it here. So, here is the proof of concept code.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">cl-flet</span> ((+ (<span style="color: #0000FF;">lambda</span> (<span style="color: #6434A3;">&amp;rest</span> args)
               (format
                <span style="color: #008000;">"$%s = %s$"</span>
                (mapconcat #'number-to-string args <span style="color: #008000;">" + "</span>)
                (eval `(+ ,@args))))))
  (+ 1 2 3))
</pre>
</div>

<p>
\(1 + 2 + 3 = 6\)
</p>



<p>
Here is an example that generates a fraction from a division.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">cl-flet</span> ((/ (<span style="color: #0000FF;">lambda</span> (<span style="color: #6434A3;">&amp;rest</span> args)
               (format
                <span style="color: #008000;">"$\\frac{%s}{%s} = %s$"</span>
                (car args)
                (mapconcat 'number-to-string (cdr args) <span style="color: #008000;">" \\cdot "</span>)
                (eval `(/ ,@args))))))
  (/ 1.0 2.0 3.0))
</pre>
</div>

<p>
\(\frac{1.0}{2.0 \cdot 3.0} = 0.16666666666666666\)
</p>

<p>
As a proof of concept, this idea looks feasible, but this implementation has some limitations. Getting this to a complete workable approach would require a lot of work, basically creating transformation functions for many, many kinds of mathematical functions, and a lot of other kinds of logic. For example, (+ 1 2 (+ 3 4)) would not render correctly with the codes above. It isn't even clear what it should render to. I think you want 1 + 2 + (3 + 4) as the rendered output.
</p>

<p>
Anyway, it is an interesting idea, one that blurs the lines between code and mathematics. We are so used to the equation representation of mathematics, rather than the code representation that being able to go back and forth seems like a good idea, especially when one is derived from the other.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/19/Functional-and-display-math-in-technical-documents.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[YAT - yet another template strategy]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/01/YAT-yet-another-template-strategy" />
    <id>http://jkitchin.github.io/blog/2015/11/01/YAT-yet-another-template-strategy</id>
    <updated>2015-11-01T14:12:34Z</updated>
    <published>2015-11-01T14:12:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[YAT - yet another template strategy]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/01/YAT-yet-another-template-strategy"><![CDATA[



<p>
I have another need for a template that is dynamically evaluated. I previously wrote about this <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/01/26/Another-alternative-to-string-templates/">here</a> , and today I am going to do a variation of the theme. We will still use a syntax of $(expression), but a new approach to evaluating the expression. I saw this interesting function to evaluate and replace an s-expression in a buffer <a href="http://emacsredux.com/blog/2013/06/21/eval-and-replace/">Eval and Replace - Emacs Redux</a> . I am going use that to replace a template expression in a string, with a little variation to avoid replacing non-sexp variations, e.g. $(. Here we go.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">eval-and-replace</span> ()
  <span style="color: #036A07;">"Replace the preceding sexp with its value."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (backward-kill-sexp)
  (<span style="color: #0000FF;">condition-case</span> nil
      (princ (eval (read (current-kill 0)))
             (current-buffer))
    (<span style="color: #ff0000; font-weight: bold;">error</span> (message <span style="color: #008000;">"Invalid expression"</span>)
           (insert (concat <span style="color: #008000;">"$"</span> (current-kill 0))))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">j-format</span> (s)
  <span style="color: #036A07;">"Replace all instances of $(expression) in S with the evaluated</span>
<span style="color: #036A07;">expression."</span>
  (<span style="color: #0000FF;">with-temp-buffer</span>
    (insert s)
    (goto-char (point-min))
    (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"$("</span> nil t)
      (backward-char)
      (<span style="color: #0000FF;">when</span> (sexp-at-point)
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get rid of the $</span>
        (delete-char -1)
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">go to the end of the sexp and then eval-and-replace it.</span>
        (end-of-sexp)
        (eval-and-replace)))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return the formatted text.</span>
    (buffer-string)))


(<span style="color: #0000FF;">let</span> ((some-var <span style="color: #008000;">"You got me"</span>))
  (j-format <span style="color: #008000;">"Test of 4 + 5 = $(+ 4 5). $(  $(foobar). $(progn (setq x 5) \"\")</span>
<span style="color: #008000;">and then we have 2x=$(prin1 (* 2 x)).</span>

<span style="color: #008000;">some-var = $(print some-var)"</span>))
</pre>
</div>

<pre class="example">
Test of 4 + 5 = 9. $(  $(foobar).
and then we have 2x=10.

some-var = You got me
</pre>

<p>
That seems pretty ok. I obviously have not tested it extensively, but it looks pretty promising.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/01/YAT---yet-another-template-strategy.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Saving the current restriction and restoring it while following links]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/10/24/Saving-the-current-restriction-and-restoring-it-while-following-links" />
    <id>http://jkitchin.github.io/blog/2015/10/24/Saving-the-current-restriction-and-restoring-it-while-following-links</id>
    <updated>2015-10-25T07:09:15Z</updated>
    <published>2015-10-24T13:41:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Saving the current restriction and restoring it while following links]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/10/24/Saving-the-current-restriction-and-restoring-it-while-following-links"><![CDATA[



<p>
On the org-mode mailing list there has been some discussion about following id links. The issue is that if your buffer is narrowed, clicking on the link does not change the restriction to actually take you to the entry. This is debatably desirable. If I click on a link, I want it to go where it points. But, I might also like to go back to my narrowed view. So here consider how to save the state of narrowing, and restore it. We modify the function that opens an id link to save the restriction, and widen the buffer if necessary.
</p>

<p>
Saving the restriction seems easy, we just save a marker to point, and the point-min and point-max. We save the marker for a convenient way to get the buffer, and perhaps the actual point. We advise the C-c &amp; function to restore the restriction after we leave it. This should fix the restriction in whatever buffer we undid it in.
</p>

<p>
Here is the code that seems to work for me. Thanks to Rasmus for the idea on saving the restriction data.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">*saved-restriction*</span> nil
 <span style="color: #036A07;">"A global var containing the current restriction.</span>
<span style="color: #036A07;">Returns (current-buffer point-min point-max"</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">save-current-restriction</span> ()
  <span style="color: #036A07;">"Save the current restriction at point."</span>
  (<span style="color: #0000FF;">setq</span> *saved-restriction*
        (<span style="color: #0000FF;">if</span> (buffer-narrowed-p)
            (list (current-buffer) (point-min) (point-max))
          nil)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">restore-saved-restriction</span> ()
  <span style="color: #036A07;">"Restore the last saved restriction."</span>
  (<span style="color: #0000FF;">when</span> *saved-restriction*
    (set-buffer (car *saved-restriction*))
    (narrow-to-region (nth 1 *saved-restriction*)
                      (nth 2 *saved-restriction*)))
  (<span style="color: #0000FF;">setq</span> *saved-restriction* nil))

<span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">' actually modify this function to save the restriction, and widen if needed.</span>
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-id-open</span> (id)
  <span style="color: #036A07;">"Go to the entry with id ID."</span>
  (org-mark-ring-push)
  (<span style="color: #0000FF;">let</span> ((m (org-id-find id 'marker))
        cmd)
    (<span style="color: #0000FF;">unless</span> m
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"Cannot find entry with ID \"%s\""</span> id))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Use a buffer-switching command in analogy to finding files</span>
    (<span style="color: #0000FF;">setq</span> cmd
          (<span style="color: #0000FF;">or</span>
           (cdr
            (assq
             (cdr (assq 'file org-link-frame-setup))
             '((find-file . switch-to-buffer)
               (find-file-other-window . switch-to-buffer-other-window)
               (find-file-other-frame . switch-to-buffer-other-frame))))
           'switch-to-buffer-other-window))
    (<span style="color: #0000FF;">if</span> (not (equal (current-buffer) (marker-buffer m)))
        (funcall cmd (marker-buffer m)))
    (save-current-restriction)
    (<span style="color: #0000FF;">when</span> (&gt; m (point-max))
      (widen))
    (goto-char m)
    (move-marker m nil)
    (org-show-context)))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">And we advise the function going back to restore the restriction.</span>
(<span style="color: #0000FF;">defadvice</span> <span style="color: #006699;">org-mark-ring-goto</span> (after restore-my-restriction () activate)
  <span style="color: #036A07;">"Restore narrowing."</span>
  (restore-saved-restriction))
</pre>
</div>

<pre class="example">
org-mark-ring-goto
</pre>

<p>
This seems to preserve restrictions in the current buffer and in other buffers, as long as I use C-c &amp; to invoke org-mark-ring goto. I am not sure how easy it would be to make this work for all links. Each link has its own function for following so I am not sure we can easily get them all to do this unless there is some high level function to advise like org-mouse-down-mouse or something similar. It also has the limitation that the restoration only occurs using org-mark-ring-goto, unless you specifically run the  (restore-saved-restriction) function yourself. That could be made an interactive function for that purpose. Otherwise, this seems like a reasonable approach.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/24/Saving-the-current-restriction-and-restoring-it-while-following-links.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
