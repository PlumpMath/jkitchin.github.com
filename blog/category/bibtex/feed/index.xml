<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Tue, 24 Nov 2015 15:08:58 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>A python version of the s-exp bibtex entry</title>
      <link>http://jkitchin.github.io/blog/2015/06/11/A-python-version-of-the-s-exp-bibtex-entry</link>
      <pubDate>Thu, 11 Jun 2015 10:02:33 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[bibtex]]></category>
      <category><![CDATA[ref]]></category>
      <guid isPermaLink="false">wiSIiOPCsb2TZCwk1GsyFwgTiFw=</guid>
      <description>A python version of the s-exp bibtex entry</description>
      <content:encoded><![CDATA[



<p>
In this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry/">post</a> we explored representing a bibtex entry in lisp s-exp notation, and showed interesting things that enables. Here, I explore something similar in Python. The s-exp notation in Python is really more like tuples. It looks almost identical, except we need a lot of commas for the Python syntax. One significant difference in Python is we need to define the functions in advance because otherwise the function symbols are undefined. Similar to lisp, we can define the field functions at run-time in a loop. We have to use an eval statement, which some Pythonistas find distasteful, but it is not that different to me than what we did in lisp.
</p>

<p>
The syntax for "executing" the data structure is quite different than in lisp, because this data is <i>not</i> code in Python. Instead, we have to deconstruct the data, knowing that the function is the first object, and it takes the remaining arguments in the tuple.
</p>

<p>
Here is the proof of concept:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">article</span>(bibtex_key, *args):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Return the bibtex formatted entry"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">',\n'</span>.join([<span style="color: #008000;">'@article{{{0}}}'</span>.<span style="color: #006FE0;">format</span>(bibtex_key)] +[arg[0](arg[1]) <span style="color: #0000FF;">for</span> arg <span style="color: #0000FF;">in</span> args[0]] + [<span style="color: #008000;">'}'</span>])

<span style="color: #BA36A5;">fields</span> = (<span style="color: #008000;">"author"</span>, <span style="color: #008000;">"title"</span>, <span style="color: #008000;">"journal"</span>, <span style="color: #008000;">"pages"</span>, <span style="color: #008000;">"number"</span>, <span style="color: #008000;">"doi"</span>, <span style="color: #008000;">"url"</span>, <span style="color: #008000;">"eprint"</span>, <span style="color: #008000;">"year"</span>)

<span style="color: #0000FF;">for</span> f <span style="color: #0000FF;">in</span> fields:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">locals</span>()[f] = <span style="color: #006FE0;">eval</span> (<span style="color: #008000;">'lambda x: "  {0} = {{{1}}}".format("'</span> + f + <span style="color: #008000;">'", x)'</span>)

<span style="color: #BA36A5;">entry</span> = (article, <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (author, <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>),
         (title, <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>),
         (journal, <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>),
         (pages, <span style="color: #008000;">"10788-10794"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (year, 2013),
         (number, 31),
         (doi, <span style="color: #008000;">"10.1021/ie400582a"</span>),
         (url, <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>),
         (eprint, <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))


<span style="color: #0000FF;">print</span> entry[0](entry[1], entry[2:])
</pre>
</div>

<pre class="example">
@article{hallenbeck-2013-effec-o2},
  author = {Hallenbeck, Alexander P. and Kitchin, John R.},
  title = {Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent},
  journal = {Industrial \&amp; Engineering Chemistry Research},
  pages = {10788-10794},
  year = {2013},
  number = {31},
  doi = {10.1021/ie400582a},
  url = {http://pubs.acs.org/doi/abs/10.1021/ie400582a},
  eprint = {http://pubs.acs.org/doi/pdf/10.1021/ie400582a},
}
</pre>

<p>
We can still get specific fields out. Since we used a tuple here, it is not quite as nice as using a dictionary, but it is neither too bad, and it can be wrapped in a reasonably convenient function.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">article</span>(bibtex_key, *args):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Return the bibtex formatted entry"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">',\n'</span>.join([<span style="color: #008000;">'@article{{{0}}}'</span>.<span style="color: #006FE0;">format</span>(bibtex_key)] +[arg[0](arg[1]) <span style="color: #0000FF;">for</span> arg <span style="color: #0000FF;">in</span> args[0]] + [<span style="color: #008000;">'}'</span>])

<span style="color: #BA36A5;">fields</span> = (<span style="color: #008000;">"author"</span>, <span style="color: #008000;">"title"</span>, <span style="color: #008000;">"journal"</span>, <span style="color: #008000;">"pages"</span>, <span style="color: #008000;">"number"</span>, <span style="color: #008000;">"doi"</span>, <span style="color: #008000;">"url"</span>, <span style="color: #008000;">"eprint"</span>, <span style="color: #008000;">"year"</span>)

<span style="color: #0000FF;">for</span> f <span style="color: #0000FF;">in</span> fields:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">locals</span>()[f] = <span style="color: #006FE0;">eval</span> (<span style="color: #008000;">'lambda x: "  {0} = {{{1}}}".format("'</span> + f + <span style="color: #008000;">'", x)'</span>)

<span style="color: #BA36A5;">entry</span> = (article, <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (author, <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>),
         (title, <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>),
         (journal, <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>),
         (pages, <span style="color: #008000;">"10788-10794"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (year, 2013),
         (number, 31),
         (doi, <span style="color: #008000;">"10.1021/ie400582a"</span>),
         (url, <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>),
         (eprint, <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))


<span style="color: #0000FF;">for</span> field <span style="color: #0000FF;">in</span> entry[2:]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> field[0] == author:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> field

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_field</span>(entry, field):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> element <span style="color: #0000FF;">in</span> entry[2:]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> element[0] == field:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> element[1]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #D0372D;">None</span>

<span style="color: #0000FF;">print</span> get_field(entry, title)
<span style="color: #0000FF;">print</span> get_field(entry, <span style="color: #008000;">"bad"</span>)
</pre>
</div>

<pre class="example">
(&lt;function &lt;lambda&gt; at 0x1005975f0&gt;, 'Hallenbeck, Alexander P. and Kitchin, John R.')
Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent
None
</pre>

<p>
So, it seems Python can do some things like lisp in treating functions like first-class objects that can be used as functions, or keys. I still like the lisp s-exp better, but this is an interesting idea for Python too.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/11/A-python-version-of-the-s-exp-bibtex-entry.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A sexp version of a bibtex entry</title>
      <link>http://jkitchin.github.io/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry</link>
      <pubDate>Wed, 10 Jun 2015 08:54:00 EDT</pubDate>
      <category><![CDATA[lisp]]></category>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">BmILlGfMZSWZ6HJprHCTM4MR6zA=</guid>
      <description>A sexp version of a bibtex entry</description>
      <content:encoded><![CDATA[



<p>
Below you see a typical bibtex entry. Today we explore an alternate approach to represent the information (data) in that entry as s-expressions, i.e. as a lisp data structure. Why? because it seems like an interesting exploration!
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">hallenbeck-2013-effec-o2</span>,
  <span style="color: #BA36A5;">author</span> =       "Hallenbeck, Alexander P. and Kitchin, John R.",
  <span style="color: #BA36A5;">title</span> =        {Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a
                  primary-amine based polymeric \ce{CO_2} sorbent},
  <span style="color: #BA36A5;">keywords</span> =     {RUA, orgmode},
  <span style="color: #BA36A5;">journal</span> =      "Industrial \&amp; Engineering Chemistry Research",
  <span style="color: #BA36A5;">pages</span> =        "10788-10794",
  <span style="color: #BA36A5;">year</span> =         2013,
  <span style="color: #BA36A5;">volume</span> =       {52},
  <span style="color: #BA36A5;">number</span> =       {31},
  <span style="color: #BA36A5;">doi</span> =          "<span style="color: #006DAF; text-decoration: underline;">10.1021/ie400582a</span>",
  <span style="color: #BA36A5;">url</span> =          "<span style="color: #006DAF; text-decoration: underline;">http://pubs.acs.org/doi/abs/10.1021/ie400582a</span>",
  <span style="color: #BA36A5;">eprint</span> =       "http://pubs.acs.org/doi/pdf/10.1021/ie400582a",
}
</pre>
</div>

<p>
Here is what that same data structure might look like as a sexp-based lisp data structure.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(article <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>
         (author <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>)
         (title <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>)
         (journal <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>)
         (pages <span style="color: #008000;">"10788-10794"</span>)
         (year 2013)
         (number 31)
         (doi <span style="color: #008000;">"10.1021/ie400582a"</span>)
         (url <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>)
         (eprint <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))
</pre>
</div>

<p>
We can retrieve data from the sexp form pretty easily. Here we get the authors.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((art '(article <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>
                      (author <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>)
                      (title <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>)
                      (journal <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>)
                      (pages <span style="color: #008000;">"10788-10794"</span>)
                      (year 2013)
                      (number 31)
                      (doi <span style="color: #008000;">"10.1021/ie400582a"</span>)
                      (url <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>)
                      (eprint <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>)))
       (fields (cddr art)))
  (cadr (assoc 'author fields)))
</pre>
</div>

<pre class="example">
Hallenbeck, Alexander P. and Kitchin, John R.
</pre>

<p>
That is simple enough you might just write a little function to streamline it like this, and return a formatted string.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">get-article-field</span> (article field)
  <span style="color: #036A07;">"Return value of FIELD in ARTICLE."</span>
  (cadr (assoc field (cddr article))))

(<span style="color: #0000FF;">let</span> ((art '(article <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>
                     (author <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>)
                     (title <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>)
                     (journal <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>)
                     (pages <span style="color: #008000;">"10788-10794"</span>)
                     (year 2013)
                     (number 31)
                     (doi <span style="color: #008000;">"10.1021/ie400582a"</span>)
                     (url <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>)
                     (eprint <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))))
  (format <span style="color: #008000;">"%s, doi:%s (%s)"</span>
          (get-article-field art 'author)
          (get-article-field art 'doi)
          (get-article-field art 'year)))
</pre>
</div>

<pre class="example">
Hallenbeck, Alexander P. and Kitchin, John R., doi:10.1021/ie400582a (2013)
</pre>

<p>
You might be wondering, why is that even a little bit interesting? One reason is that it looks a little like what lisp returns after parsing an xml file. Another is, the data structure looks kind of like data, but it is also some code, if article was defined as a function!  Let us consider what this might look like. I use a macro to define the field functions since in this case they all do the same thing, and these simply return a string with the field-name and value in curly brackets. We eval the macro to make sure it defines the function. I define an article function that wraps the fields in @bibtex-key{fields}, which defines a bibtex entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">make-field</span> (field-name)
  <span style="color: #036A07;">"define a field that returns a string"</span>
  `(<span style="color: #0000FF;">defun</span> ,(intern field-name) (content)
     (format <span style="color: #008000;">"  %s = {%s}"</span> ,field-name content)))

(<span style="color: #0000FF;">loop</span> for field in '(<span style="color: #008000;">"author"</span> <span style="color: #008000;">"title"</span> <span style="color: #008000;">"journal"</span> <span style="color: #008000;">"pages"</span> <span style="color: #008000;">"number"</span> <span style="color: #008000;">"doi"</span> <span style="color: #008000;">"url"</span> <span style="color: #008000;">"eprint"</span> <span style="color: #008000;">"year"</span>)
  do (eval `(make-field ,field)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">article</span> (bibtex-key <span style="color: #6434A3;">&amp;rest</span> fields)
  (concat
   (format <span style="color: #008000;">"@article{%s,\n"</span> bibtex-key)
   (mapconcat (<span style="color: #0000FF;">lambda</span> (field) (eval field)) fields <span style="color: #008000;">",\n"</span>)
   <span style="color: #008000;">"\n}\n"</span>))

(article <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>
         (author <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>)
         (title <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>)
         (journal <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>)
         (pages <span style="color: #008000;">"10788-10794"</span>)
         (number 31)
         (year 2013)
         (doi <span style="color: #008000;">"10.1021/ie400582a"</span>)
         (url <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>)
         (eprint <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))
</pre>
</div>

<pre class="example">
@article{hallenbeck-2013-effec-o2,
  author = {Hallenbeck, Alexander P. and Kitchin, John R.},
  title = {Effects of ce{O_2} and ce{SO_2} on the capture capacity of a primary-amine based polymeric ce{CO_2} sorbent},
  journal = {Industrial &amp; Engineering Chemistry Research},
  pages = {10788-10794},
  number = {31},
  year = {2013},
  doi = {10.1021/ie400582a},
  url = {http://pubs.acs.org/doi/abs/10.1021/ie400582a},
  eprint = {http://pubs.acs.org/doi/pdf/10.1021/ie400582a}
}
</pre>

<p>
Wow. We <i>executed</i> our data structure, and got a bibtex entry! That seems moderately interesting to me. Next is an example of taking the same data structure and rendering it as xml. This is some lispy wizardry, rather than use a macro to define functions, I temporarily define functions within a cl-flet macro, which I have to collect as a list of code. Then, I eval the list. This feels pretty odd, but seems like a lispy kind of thing to do.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(eval
 (list 'cl-flet
       (append (<span style="color: #0000FF;">loop</span> for field in '(<span style="color: #008000;">"author"</span> <span style="color: #008000;">"title"</span> <span style="color: #008000;">"journal"</span> <span style="color: #008000;">"pages"</span>
                                      <span style="color: #008000;">"number"</span> <span style="color: #008000;">"doi"</span> <span style="color: #008000;">"url"</span> <span style="color: #008000;">"eprint"</span> <span style="color: #008000;">"year"</span>)
                       collect (list (intern field)
                                     '(content)
                                     `(format <span style="color: #008000;">"  &lt;%s&gt;%s&lt;/%s&gt;"</span> ,field content ,field)))
               '((article (bibtex-key <span style="color: #6434A3;">&amp;rest</span> fields)
                          (concat
                           (format
                            <span style="color: #008000;">"&lt;article bibtex-key=\"%s\"&gt;\n"</span> bibtex-key)
                           (mapconcat (<span style="color: #0000FF;">lambda</span> (field) (eval field)) fields <span style="color: #008000;">"\n"</span>)
                           <span style="color: #008000;">"\n&lt;/article&gt;"</span>)))
               )
       <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">body of cl-flet</span>
       '(article <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>
                (author <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>)
                (title <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>)
                (journal <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>)
                (pages <span style="color: #008000;">"10788-10794"</span>)
                (number 31)
                (year 2013)
                (doi <span style="color: #008000;">"10.1021/ie400582a"</span>)
                (url <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>)
                (eprint <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))))
</pre>
</div>

<pre class="example">
&lt;article bibtex-key="hallenbeck-2013-effec-o2"&gt;
  &lt;author&gt;Hallenbeck, Alexander P. and Kitchin, John R.&lt;/author&gt;
  &lt;title&gt;Effects of ce{O_2} and ce{SO_2} on the capture capacity of a primary-amine based polymeric ce{CO_2} sorbent&lt;/title&gt;
  &lt;journal&gt;Industrial &amp; Engineering Chemistry Research&lt;/journal&gt;
  &lt;pages&gt;10788-10794&lt;/pages&gt;
  &lt;number&gt;31&lt;/number&gt;
  &lt;year&gt;2013&lt;/year&gt;
  &lt;doi&gt;10.1021/ie400582a&lt;/doi&gt;
  &lt;url&gt;http://pubs.acs.org/doi/abs/10.1021/ie400582a&lt;/url&gt;
  &lt;eprint&gt;http://pubs.acs.org/doi/pdf/10.1021/ie400582a&lt;/eprint&gt;
&lt;/article&gt;
</pre>

<p>
Prefer json? No problem, just reformat the functions!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(eval
 (list 'cl-flet
       (append (<span style="color: #0000FF;">loop</span> for field in '(<span style="color: #008000;">"author"</span> <span style="color: #008000;">"title"</span> <span style="color: #008000;">"journal"</span> <span style="color: #008000;">"pages"</span>
                                      <span style="color: #008000;">"number"</span> <span style="color: #008000;">"doi"</span> <span style="color: #008000;">"url"</span> <span style="color: #008000;">"eprint"</span> <span style="color: #008000;">"year"</span>)
                       collect (list (intern field)
                                     '(content)
                                     `(format <span style="color: #008000;">"   \"%s\": \"%s\""</span> ,field content)))
               '((article (bibtex-key <span style="color: #6434A3;">&amp;rest</span> fields)
                          (concat
                           (format
                            <span style="color: #008000;">"{\"article\":\n  {\"bibtex-key\": \"%s\",\n"</span> bibtex-key)
                           (mapconcat (<span style="color: #0000FF;">lambda</span> (field) (eval field)) fields <span style="color: #008000;">",\n"</span>)
                           <span style="color: #008000;">"}\n}"</span>))))
       <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">body of cl-flet</span>
       '(article <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>
                (author <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>)
                (title <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>)
                (journal <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>)
                (pages <span style="color: #008000;">"10788-10794"</span>)
                (number 31)
                (year 2013)
                (doi <span style="color: #008000;">"10.1021/ie400582a"</span>)
                (url <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>)
                (eprint <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))))
</pre>
</div>

<pre class="example">
{"article":
  {"bibtex-key": "hallenbeck-2013-effec-o2",
   "author": "Hallenbeck, Alexander P. and Kitchin, John R.",
   "title": "Effects of ce{O_2} and ce{SO_2} on the capture capacity of a primary-amine based polymeric ce{CO_2} sorbent",
   "journal": "Industrial &amp; Engineering Chemistry Research",
   "pages": "10788-10794",
   "number": "31",
   "year": "2013",
   "doi": "10.1021/ie400582a",
   "url": "http://pubs.acs.org/doi/abs/10.1021/ie400582a",
   "eprint": "http://pubs.acs.org/doi/pdf/10.1021/ie400582a"}
}
</pre>

<p>
Is this useful? Great question. I don't plan to convert by bibtex files to sexp format anytime soon ;) The format I used above is just a simple one. It might be desirable to include individual authors instead of an author string, and maybe support attributes to establish an author order. An author structure might be more complex to include scientific ids like an orcid, alternative names, etc&#x2026; Finally, the s-exp data structure is super easy to use in lisp, but other languages would have parse it into some native structure the way they parse json or xml. There is limited support for s-expressions in most other non-lispy languages.
</p>

<p>
I like the idea of data representation as code, and its conversion to some other kind of format. It is subtle here, but notice we <i>never</i> had to write a parser for the sexp notation. That <i>already exists as the lisp interpreter</i>. We did write code to use the data, and convert the data. The sexp notation is pretty easy to write, in contrast to the xml or json representations. Some interesting issues might be what to do with fields that are not defined, perhaps a macro would be used on the fly, or in the cl-flet definition. It is hard to imagine doing these things in another language than lisp!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/10/A-sexp-version-of-a-bibtex-entry.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Bibtex Entries from Arxiv.org</title>
      <link>http://jkitchin.github.io/blog/2015/03/09/Bibtex-Entries-from-Arxiv-org</link>
      <pubDate>Mon, 09 Mar 2015 15:14:52 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">HE-BdWxxqUIs7VAhvRQXrqoIpes=</guid>
      <description>Bibtex Entries from Arxiv.org</description>
      <content:encoded><![CDATA[



<p>
<a href="http://arxiv.org">http://arxiv.org</a> is an open-source physics preprint server where copies of scientific manuscripts can be found. For example, <a href="http://arxiv.org/abs/0801.1144">http://arxiv.org/abs/0801.1144</a> is a paper I wrote, and you can find the PDF for that paper here: <a href="http://arxiv.org/pdf/0801.1144v1">http://arxiv.org/pdf/0801.1144v1</a> . Each entry at Arxiv has an arxiv number, and for this paper the number is "0801.1144". In this post, we explore some capabilities of the <a href="https://github.com/jkitchin/org-ref/blob/master/arxiv.el">arxiv.el</a> library which is part of org-ref (<a href="https://github.com/jkitchin/org-ref">https://github.com/jkitchin/org-ref</a> ).
</p>

<p>
To use this library, get the org-ref distribution, make sure it is on your path, and then require the library:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">arxiv</span>)
</pre>
</div>

<p>
First, there is a new org-link:  <a href="http://arxiv.org/abs/0801.1144">arxiv:0801.1144</a>. This is a clickable link that simply opens arxiv.org at the URL for an arxiv number, and exports as a link to that entry in arxiv.
</p>

<p>
On the right hand side of the arxiv page, there is a link under References &amp; Citations that takes you to a page where you can get a bibtex entry. The link for this entry is <a href="http://adsabs.harvard.edu/cgi-bin/bib_query?arXiv:0801.1144">http://adsabs.harvard.edu/cgi-bin/bib_query?arXiv:0801.1144</a> . On that page, there is a link to a bibtex entry (<a href="http://adsabs.harvard.edu/cgi-bin/nph-bib_query?bibcode=2008PhRvB..77g5437K&data_type=BIBTEX&db_key=PHY&nocookieset=1">http://adsabs.harvard.edu/cgi-bin/nph-bib_query?bibcode=2008PhRvB..77g5437K&data_type=BIBTEX&db_key=PHY&nocookieset=1</a> ).  We can construct this link pretty easily, we just need the bibcode for that entry. arxiv.el provides a function for that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(arxiv-get-bibliographic-code <span style="color: #008000;">"0801.1144"</span>)
</pre>
</div>

<pre class="example">
2008PhRvB..77g5437K
</pre>

<p>
Next, once we have a url, we can get the text of the bibtex entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(arxiv-get-bibtex-entry <span style="color: #008000;">"2008PhRvB..77g5437K"</span>)
</pre>
</div>

<pre class="example">
@ARTICLE{2008PhRvB..77g5437K,
   author = {{Kitchin}, J.~R. and {Reuter}, K. and {Scheffler}, M.},
    title = "{Alloy surface segregation in reactive environments: First-principles atomistic thermodynamics study of Ag$_{3}$Pd(111) in oxygen atmospheres}",
  journal = {\prb},
archivePrefix = "arXiv",
   eprint = {0801.1144},
 primaryClass = "cond-mat.mtrl-sci",
 keywords = {Ab initio calculations of adsorbate structure and reactions, Density functional theory local density approximation gradient and other corrections, Oxidation},
     year = 2008,
    month = feb,
   volume = 77,
   number = 7,
      eid = {075437},
    pages = {075437},
      doi = {10.1103/PhysRevB.77.075437},
   adsurl = {http://adsabs.harvard.edu/abs/2008PhRvB..77g5437K},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}
</pre>

<p>
Finally, arxiv.el wraps those to functions together into an interactive function <code>arxiv-add-bibtex-entry</code> which prompts you for an arxiv number, and then a bibtex file, and then adds the text above to your bibtex file. You can then clean the entry as you see fit. It is also possible to get the pdf for an arxiv entry via <code>arxiv-get-pdf</code>. This is an interactive function that will prompt you for an arxiv number and a pdf file name, and it will then get the pdf for you and open it. I have not integrated this with the bibtex entry function yet, but one would ideally clean the bibtex entry to get a uniform key, and then get the pdf and name it according to the key like we do in org-ref.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(arxiv-get-pdf <span style="color: #008000;">"0801.1144"</span> <span style="color: #008000;">"0801.1144.pdf"</span>)
</pre>
</div>

<p>
If you use <a href="https://github.com/jkitchin/jmax/blob/master/words.el">words.el</a> you will find a new function <code>words-arxiv</code> which allows you to search the selected text or word at point on arxiv.org.
</p>

<p>
I do not use arxiv.org a lot, so this is not super well tested on many articles in arxiv.org, but it has worked on the few examples I have tested so far.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/09/Bibtex-Entries-from-Arxiv.org.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Turn an ISBN to a bibtex entry</title>
      <link>http://jkitchin.github.io/blog/2015/01/31/Turn-an-ISBN-to-a-bibtex-entry</link>
      <pubDate>Sat, 31 Jan 2015 15:48:39 EST</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">r4J6MnDJgujiwuNPEsngAyRriio=</guid>
      <description>Turn an ISBN to a bibtex entry</description>
      <content:encoded><![CDATA[


<p>
Occasionally, I need a bibtex entry for a book. Books are often identified by an ISBN number. Similar to using Crossref to get metadata about a DOI, we can use a web service to get metadata about an ISBN. From that, we might be able to construct a bibtex entry.
</p>

<p>
Here is an example of what we can get for ISBN 9780309095211. It does not seem to matter if there are dashes in the ISBN or not.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span>
        (url-retrieve-synchronously
<span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/9780309095211?method=getMetadata&amp;format=json&amp;fl=*"</span>)
      (buffer-substring url-http-end-of-headers (point-max)))
</pre>
</div>

<pre class="example">
{
 "stat":"ok",
 "list":[{
	"url":["http://www.worldcat.org/oclc/224969280?referer=xid"],
	"publisher":"National Academies Press",
	"form":["BC"],
	"lccn":["2006016786"],
	"lang":"eng",
	"city":"Washington, D.C.",
	"author":"Committee on the Guide to Recruiting and Advancing Women Scientists and Engineers in Academia, Committee on Women in Science and Engineering, Policy and Global Affairs, National Research Council of the National Academies.",
	"ed":"[Online-Ausg.]",
	"year":"2006",
	"isbn":["9780309095211"],
	"title":"To recruit and advance women students and faculty in science and engineering",
	"oclcnum":["224969280",
	 "70060944",
	 "756709329",
	 "804792476",
	 "817950524",
	 "833420290",
	 "836338922",
	 "704551455"]}]}
</pre>

<p>
We get a nice json data string back. We can parst that to get an actual data structure.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span>
        (url-retrieve-synchronously
<span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/9780309095211?method=getMetadata&amp;format=json&amp;fl=*"</span>)
      (json-read-from-string
        (buffer-substring url-http-end-of-headers (point-max))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((list .
       [((oclcnum .
                  [<span style="color: #008000;">"224969280"</span> <span style="color: #008000;">"70060944"</span> <span style="color: #008000;">"756709329"</span> <span style="color: #008000;">"804792476"</span> <span style="color: #008000;">"817950524"</span> <span style="color: #008000;">"833420290"</span> <span style="color: #008000;">"836338922"</span> <span style="color: #008000;">"704551455"</span>])
         (title . <span style="color: #008000;">"To recruit and advance women students and faculty in science and engineering"</span>)
         (isbn .
               [<span style="color: #008000;">"9780309095211"</span>])
         (year . <span style="color: #008000;">"2006"</span>)
         (ed . <span style="color: #008000;">"[Online-Ausg.]"</span>)
         (author . <span style="color: #008000;">"Committee on the Guide to Recruiting and Advancing Women Scientists and Engineers in Academia, Committee on Women in Science and Engineering, Policy and Global Affairs, National Research Council of the National Academies."</span>)
         (city . <span style="color: #008000;">"Washington, D.C."</span>)
         (lang . <span style="color: #008000;">"eng"</span>)
         (lccn .
               [<span style="color: #008000;">"2006016786"</span>])
         (form .
               [<span style="color: #008000;">"BC"</span>])
         (publisher . <span style="color: #008000;">"National Academies Press"</span>)
         (url .
              [<span style="color: #008000;">"http://www.worldcat.org/oclc/224969280?referer=xid"</span>]))])
 (stat . <span style="color: #008000;">"ok"</span>))
</pre>
</div>

<p>
Ok, so we should check that stat is ok, then build the bibtex entry. Accessing the metadata below seems pretty hacky; but it works, and I don't understand the deep nesting of results, and there seems to be a vector in there.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((results  (<span style="color: #0000FF;">with-current-buffer</span>
                    (url-retrieve-synchronously
                     <span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/9780309095211?method=getMetadata&amp;format=json&amp;fl=*"</span>)
                  (json-read-from-string
                   (buffer-substring url-http-end-of-headers (point-max)))))
       (status (cdr (nth 1 results)))
       (metadata (aref (cdar results) 0)))

  (<span style="color: #0000FF;">unless</span> (string= <span style="color: #008000;">"ok"</span> status)
    (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"Status is %s"</span> status))

  (concat <span style="color: #008000;">"@book{,\n"</span>
          (mapconcat (<span style="color: #0000FF;">lambda</span> (x)
                       (format <span style="color: #008000;">"  %s={%s},"</span> (car x) (cdr x)))
                     metadata <span style="color: #008000;">"\n"</span>)
          <span style="color: #008000;">"}\n"</span>))
</pre>
</div>

<pre class="example">
@book{,
  oclcnum={[224969280 70060944 756709329 804792476 817950524 833420290 836338922 704551455]},
  title={To recruit and advance women students and faculty in science and engineering},
  isbn={[9780309095211]},
  year={2006},
  ed={[Online-Ausg.]},
  author={Committee on the Guide to Recruiting and Advancing Women Scientists and Engineers in Academia, Committee on Women in Science and Engineering, Policy and Global Affairs, National Research Council of the National Academies.},
  city={Washington, D.C.},
  lang={eng},
  lccn={[2006016786]},
  form={[BC]},
  publisher={National Academies Press},
  url={[http://www.worldcat.org/oclc/224969280?referer=xid]},}
</pre>

<p>
That looks good to me. Let us finally wrap it into a function that will take an ISBN and bibtex file interactively, create a bibtex entry, and insert it if there is not an entry with a key like that already. If we have selected region, lI should note this code uses some functionality from my org-ref package (and when I am done here, I am adding it to the doi-utils package inside org-ref). This is a fancy function, built from the experience I have from writing doi-utils.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">isbn-to-bibtex</span> (isbn bibfile)
  <span style="color: #036A07;">"Get bibtex entry for ISBN and insert it into BIBFILE unless an</span>
<span style="color: #036A07;">entry with the generated key already exists in the file."</span>
  (interactive
   (list
    (read-input
     <span style="color: #008000;">"ISBN: "</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">now set initial input</span>
     (<span style="color: #0000FF;">cond</span>
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">If region is active and it starts with a number, we use it</span>
      ((and  (region-active-p)
             (s-match <span style="color: #008000;">"^[0-9]"</span> (buffer-substring (region-beginning) (region-end))))
       (buffer-substring (region-beginning) (region-end)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if first entry in kill ring starts with a number assume it is an isbn</span>
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and use it as the guess</span>
      ((<span style="color: #0000FF;">if</span> (s-match <span style="color: #008000;">"^[0-9]"</span> (car kill-ring))
           (car kill-ring)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">type or paste it in</span>
      (t
       nil)))
    (ido-completing-read
     <span style="color: #008000;">"Bibfile: "</span>
     (append (f-entries <span style="color: #008000;">"."</span> (<span style="color: #0000FF;">lambda</span> (f) (f-ext? f <span style="color: #008000;">"bib"</span>)))
             org-ref-default-bibliography))))

  (<span style="color: #0000FF;">let*</span> ((results (<span style="color: #0000FF;">with-current-buffer</span>
                      (url-retrieve-synchronously
                       (format
                        <span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/%s?method=getMetadata&amp;format=json&amp;fl=*"</span>
                        isbn))
                    (json-read-from-string
                     (buffer-substring url-http-end-of-headers (point-max)))))
         (status (cdr (nth 1 results)))
         (metadata (aref (cdar results) 0))
         (new-entry)
         (new-key))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">check if we got something</span>
    (<span style="color: #0000FF;">unless</span> (string= <span style="color: #008000;">"ok"</span> status)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"Status is %s"</span> status))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">construct an alphabetically sorted bibtex entry. I assume ISBN numbers go</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">with book entries.</span>
    (setq new-entry
          (concat <span style="color: #008000;">"\n@book{,\n"</span>
                  (mapconcat
                   'identity
                   (loop for field in (-sort 'string-lessp (mapcar 'car metadata))
                         collect
                         (format <span style="color: #008000;">"  %s={%s},"</span> field (cdr (assoc field metadata))))
                   <span style="color: #008000;">"\n"</span>)
                  <span style="color: #008000;">"\n}\n"</span>))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">build entry in temp buffer to get the key so we can check for duplicates</span>
    (setq new-entry (<span style="color: #0000FF;">with-temp-buffer</span>
                      (insert new-entry)
                      (org-ref-clean-bibtex-entry)
                      (setq new-key (bibtex-key-in-head))
                      (buffer-string)))
    (find-file bibfile)
    (goto-char (point-min))
    (<span style="color: #0000FF;">when</span> (search-forward new-key nil t)
      (beep)
      (setq new-key (read-input
                     (format  <span style="color: #008000;">"%s already exists. Enter new key (C-g to cancel): "</span> new-key)
                     new-key)))
    (goto-char (point-max))
    (insert new-entry)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">set key. It is simplest to just replace it, even if it is the same.</span>
    (bibtex-beginning-of-entry)
    (re-search-forward bibtex-entry-maybe-empty-head)
    (<span style="color: #0000FF;">if</span> (match-beginning bibtex-key-in-head)
        (delete-region (match-beginning bibtex-key-in-head)
                       (match-end bibtex-key-in-head)))
    (insert new-key)
    (bibtex-fill-entry)
    (save-buffer)))
</pre>
</div>

<pre class="example">
isbn-to-bibtex
</pre>

<p>
That is it, for the one ISBN I have tested it on, I get a nicely sorted bibtex entry in the file I select! Hopefully that means no more tedious bibtex entry entering for books! If you use org-ref, just update to the latest version and you should be able to use this function.
</p>

<p>
Now, back to that proposal I am writing that needs a lot of citations to books that are not in my bibtex file yet, but will be soon ;)
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/31/Turn-an-ISBN-to-a-bibtex-entry.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Generating your bibliography in another file</title>
      <link>http://jkitchin.github.io/blog/2014/10/30/Generating-your-bibliography-in-another-file</link>
      <pubDate>Thu, 30 Oct 2014 19:42:35 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">oztog6TAGyeAKMDvrygUnGjA-7k=</guid>
      <description>Generating your bibliography in another file</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Getting the references in another file</a></li>
</ul>
</div>
</div>

<p>
It has been proposal season. This particular round of proposals had a requirement to print the references in a separate file from the proposal. Usually I just build a pdf from org-mode, and then manually separate the references. That is not very fun if you have to do it several times. Here we examine a way to avoid this issue by using a new nobibliography link from org-ref with the bibentry LaTeX package.
</p>

<p>
We wrote this paper <a href="#mehta-2014-ident-poten">mehta-2014-ident-poten</a> and this one <a href="#xu-2014-relat">xu-2014-relat</a>.
</p>

<p>

<h1>Bibliography</h1>
<ul><li><a id="mehta-2014-ident-poten">[mehta-2014-ident-poten] Prateek Mehta, Paul Salvador, John \& Kitchin, Identifying Potential \ce{BO2} Oxide Polymorphs for  Epitaxial Growth Candidates, <i>ACS Appl. Mater. Interfaces</i>, <b>6(5)</b>, 3630-3639 (2014). <a href="http://dx.doi.org/10.1021/am4059149">link</a>. <a href="http://dx.doi.org/10.1021/am4059149">doi</a>.</a></li>
<li><a id="xu-2014-relat">[xu-2014-relat] Zhongnan Xu \& John Kitchin, Relating the Electronic Structure and Reactivity of  the 3d Transition Metal Monoxide Surfaces, <i>Catalysis Communications</i>, <b>52()</b>, 60-64 (2014). <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">link</a>. <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi</a>.</a></li>
</ul>
</p>

<p>
Here is the resulting pdf, with no references: <a href="separate-bib.pdf">separate-bib.pdf</a>.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Getting the references in another file</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, we need to get the reference file. We create a new file, in org-mode, mostly for the convenience of exporting that to a pdf. Here is the code that does that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((base (file-name-sans-extension
              (file-name-nondirectory (buffer-file-name))))
       (bbl (concat base <span style="color: #228b22;">".bbl"</span>))
       (orgfile (concat base <span style="color: #228b22;">"-references.org"</span>))
       (pdffile (concat base <span style="color: #228b22;">"-references.pdf"</span>)))
  (<span style="color: #8b0000;">with-temp-file</span> orgfile
    (insert 
     (format <span style="color: #228b22;">"#+LATEX_CLASS: cmu-article</span>
<span style="color: #228b22;">#+OPTIONS: toc:nil</span>

<span style="color: #228b22;">#+BEGIN_LaTeX</span>
<span style="color: #228b22;">\\input{%s}</span>
<span style="color: #228b22;">#+END_LaTeX</span>
<span style="color: #228b22;">"</span> bbl)))

  (find-file orgfile)
  (org-latex-export-to-pdf)
  (org-open-file pdffile))
</pre>
</div>

<p>
And, here is the reference file: <a href="/media/2014-10-30-Generating-your-bibliography-in-another-file/separate-bib.pdf">separate-bib.pdf</a> 
</p>

<p>
I think this would be integrated into a noexport build section of a document that would generate the pdf and references. 
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/30/Generating-your-bibliography-in-another-file.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Navigating your bibtex file</title>
      <link>http://jkitchin.github.io/blog/2014/10/13/Navigating-your-bibtex-file</link>
      <pubDate>Mon, 13 Oct 2014 10:22:27 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">KaBIqwpzObifsEczKwvSTdV_ZrU=</guid>
      <description>Navigating your bibtex file</description>
      <content:encoded><![CDATA[



<p>
You may be able to tell I am spending some time cleaning up bibtex files these days. One of the things I need to do is navigate around a bibtex file easily. There are some built-in navigation keys within an entry.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">navigation</th>
<th scope="col" class="left">key strokes</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">next field</td>
<td class="left">C-j</td>
</tr>

<tr>
<td class="left">end of field</td>
<td class="left">TAB</td>
</tr>

<tr>
<td class="left">beginning of entry</td>
<td class="left">C-M-a</td>
</tr>

<tr>
<td class="left">end of entry</td>
<td class="left">C-M-e</td>
</tr>
</tbody>
</table>

<p>
I am not aware of an easy way to navigate to the next or previous entry though. I would like something simple to do that. There is a regexp defined in bibtex "bibtex-entry-head", to search for the next or previous entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">bibtex-entry-head
</pre>
</div>

<pre class="example">
^[      ]*\(@[  ]*\(?:\(?:Article\|Book\(?:let\)?\|In\(?:Book\|Collection\|Proceedings\)\|M\(?:a\(?:nual\|stersThesis\)\|isc\)\|P\(?:\(?:hdThesi\|roceeding\)s\)\|TechReport\|Unpublished\)\)\)[        ]*[({][         
]*\([][[:alnum:].:;?!`'/*@+|()&lt;&gt;&amp;_^$-]+\)
</pre>

<p>
Here are two functions that do it. This was a little more subtle than I anticipated.  The subtlety comes about if you are at the beginning of the entry, we need to move the cursor by a character, and then search forward because of the way re-search-forward works. I also wrote in an option for a prefix argument, so you can go forward or backward several entries.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">bibtex-next-entry</span> (<span style="color: #4682b4;">&amp;optional</span> n)
  <span style="color: #228b22;">"Jump to the beginning of the next bibtex entry. N is a prefix</span>
<span style="color: #228b22;">argument. If it is numeric, jump that many entries</span>
<span style="color: #228b22;">forward. Negative numbers do nothing."</span>
  (interactive <span style="color: #228b22;">"P"</span>)
  ;; <span style="color: #ff0000; font-weight: bold;">Note if we start at the beginning of an entry, nothing</span>
  ;; <span style="color: #ff0000; font-weight: bold;">happens. We need to move forward a char, and call again.</span>
  (<span style="color: #8b0000;">when</span> (= (point) (<span style="color: #8b0000;">save-excursion</span>
                     (bibtex-beginning-of-entry)))
    (forward-char)
    (bibtex-next-entry))

  ;; <span style="color: #ff0000; font-weight: bold;">search forward for an entry </span>
  (<span style="color: #8b0000;">when</span> 
      (re-search-forward bibtex-entry-head nil t (and (numberp n) n))
    ;; <span style="color: #ff0000; font-weight: bold;">go to beginning of the entry</span>
    (bibtex-beginning-of-entry)))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">bibtex-previous-entry</span> (<span style="color: #4682b4;">&amp;optional</span> n)
  <span style="color: #228b22;">"Jump to beginning of the previous bibtex entry. N is a prefix</span>
<span style="color: #228b22;">argument. If it is numeric, jump that many entries back."</span>
  (interactive <span style="color: #228b22;">"P"</span>)
  (bibtex-beginning-of-entry)
 (<span style="color: #8b0000;">when</span> 
     (re-search-backward bibtex-entry-head nil t (and (numberp n) n))
   (bibtex-beginning-of-entry)))
</pre>
</div>

<pre class="example">
bibtex-previous-entry
</pre>

<p>
That is pretty simple. Let us go ahead and bind these to M-n, and M-p, but only in bibtex-mode. Thanks to <a href="http://ergoemacs.org/emacs/emacs_set_keys_for_major_mode.html">Xah Lee</a> for this idea. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-mode-keys</span> ()
  <span style="color: #228b22;">"Modify keymaps used by `</span><span style="color: #cd0000;">bibtex-mode</span><span style="color: #228b22;">'."</span>
  (local-set-key (kbd <span style="color: #228b22;">"M-n"</span>) 'bibtex-next-entry)
  (local-set-key (kbd <span style="color: #228b22;">"M-p"</span>) 'bibtex-previous-entry))

;; <span style="color: #ff0000; font-weight: bold;">add to bibtex-mode-hook</span>
(add-hook 'bibtex-mode-hook 'jmax-bibtex-mode-keys)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">jmax-bibtex-mode-keys</td>
</tr>
</tbody>
</table>

<p>
Now, C-n moves forward an entry, C-u 2 C-n moves you two entries, etc&#x2026; and C-p moves you back an entry, while C-u 2 C-p moves you back two entries. 
</p>

<p>
Finally, I sometimes want to jump to a field in an entry. Basically, I want a completion enabled function that lists the fields in the current entry, and then jumps to the selected field. Yes, you could simply do an incremental search forward or backward that is about as simple. But, then I would not get to remind myself how to do a completion command ;)
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-get-fields</span> ()
  <span style="color: #228b22;">"Get a list of fields in a bibtex entry."</span>
  (bibtex-beginning-of-entry)
  (remove <span style="color: #228b22;">"=type="</span>
          (remove <span style="color: #228b22;">"=key="</span>
                  (mapcar 'car (bibtex-parse-entry)))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-jump-to-field</span> (field)
  <span style="color: #228b22;">"Jump to FIELD in the current bibtex entry"</span>
  (interactive
   (list
    (ido-completing-read <span style="color: #228b22;">"Field: "</span> (jmax-bibtex-get-fields))))
  (<span style="color: #8b0000;">save-restriction</span>
    (bibtex-narrow-to-entry)
    (bibtex-beginning-of-entry)
    (<span style="color: #8b0000;">when</span>
        ;; <span style="color: #ff0000; font-weight: bold;">fields start with spaces, a field name, possibly more</span>
        ;; <span style="color: #ff0000; font-weight: bold;">spaces, then =</span>
        (re-search-forward (format <span style="color: #228b22;">"^\\s-*%s\\s-*="</span> field) nil t))))
</pre>
</div>

<pre class="example">
jmax-bibtex-jump-to-field
</pre>

<p>
These functions live in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> , which is the version we use on a regular basis.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/13/Navigating-your-bibtex-file.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Title casing bibtex entry journal titles</title>
      <link>http://jkitchin.github.io/blog/2014/10/12/Title-casing-bibtex-entry-journal-titles</link>
      <pubDate>Sun, 12 Oct 2014 09:23:17 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">m94rowIK5jHo6S-Aoj10V0fKTr8=</guid>
      <description>Title casing bibtex entry journal titles</description>
      <content:encoded><![CDATA[



<p>
I mostly love bibtex. You keep bibliographic entries in a central file, and you can cite them in your writing. Bibtex takes care of <i>most</i> of the formatting for you, but not always all of it. Lately, we have been writing some manuscripts for submission to ACS journals. They want the titles of journal articles included in the bibliography, preferrably in title-case, or in sentence case, but all the same format either way. Unfortunately, the achemso.bst bibtex format does not make this happen. You have to title-case or sentence case the titles themselves in your bibtex file. Well, at least we can get Emacs to do the heavy lifting on that for us. 
</p>

<p>
First, the manual approach. Open your bibtex file, navigate to a title field, put your cursor on the first letter of the title, and press M-c until you get to the end of the title. That runs (capitalize-word). For a few titles, you might just do this. It does not take long.
</p>

<p>
For a lot of entries though, you might prefer some code to do it. Here we consider how to convert all article titles to Title case. The current code can be found at <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> .
</p>

<p>
First, we need to decide on some rules. We will capitalize every word in a title except for words like a, an, the, &#x2026; unless they start the title. We do not want to change words with $, {} in them, or \, because these are either protected or LaTeX commands and we probably do not want to change them. The gist of our idea is to get the title, split it into words, capitalize each word that needs to be,  join the words together, and then set the entry title to the new capitalized title. 
</p>

<p>
We use functions from <a href="https://github.com/magnars/s.el">s.el</a> , and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">jmax-lower-case-words</span>
  '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"an"</span> <span style="color: #228b22;">"on"</span> <span style="color: #228b22;">"and"</span> <span style="color: #228b22;">"for"</span>
    <span style="color: #228b22;">"the"</span> <span style="color: #228b22;">"of"</span> <span style="color: #228b22;">"in"</span>)
  <span style="color: #228b22;">"List of words to keep lowercase"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-title-case-article</span> (<span style="color: #4682b4;">&amp;optional</span> key start end)
  <span style="color: #228b22;">"Convert a bibtex entry article title to title-case. The</span>
<span style="color: #228b22;">arguments are optional, and are only there so you can use this</span>
<span style="color: #228b22;">function with `</span><span style="color: #cd0000;">bibtex-map-entries</span><span style="color: #228b22;">' to change all the title</span>
<span style="color: #228b22;">entries in articles."</span>
  (interactive)
  (bibtex-beginning-of-entry)

  (<span style="color: #8b0000;">let*</span> ((title (bibtex-autokey-get-field <span style="color: #228b22;">"title"</span>))
         (words (split-string title))
         (lower-case-words '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"an"</span> <span style="color: #228b22;">"on"</span> <span style="color: #228b22;">"and"</span> <span style="color: #228b22;">"for"</span>
                             <span style="color: #228b22;">"the"</span> <span style="color: #228b22;">"of"</span> <span style="color: #228b22;">"in"</span>)))
    (<span style="color: #8b0000;">when</span>
        (string= <span style="color: #228b22;">"article"</span> (downcase (cdr (assoc <span style="color: #228b22;">"=type="</span> (bibtex-parse-entry)))))
      (setq words (mapcar
                   (<span style="color: #8b0000;">lambda</span> (word)
                     (<span style="color: #8b0000;">if</span> (or
                          ;; <span style="color: #ff0000; font-weight: bold;">match words containing {} or \ which are probably</span>
                          ;; <span style="color: #ff0000; font-weight: bold;">LaTeX or protected words</span>
                          (string-match <span style="color: #228b22;">"\\$</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">{</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">}</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">\\\\"</span> word)
                          ;; <span style="color: #ff0000; font-weight: bold;">these words should not be capitalized, unless they</span>
                          ;; <span style="color: #ff0000; font-weight: bold;">are the first word</span>
                          (-contains? lower-case-words (s-downcase word)))
                         word
                       (s-capitalize word)))
                   words))

      ;; <span style="color: #ff0000; font-weight: bold;">Check if first word should be capitalized</span>
      (<span style="color: #8b0000;">when</span> (-contains? jmax-lower-case-words (car words))
        (setf (car words) (s-capitalize (car words))))
            
      ;; <span style="color: #ff0000; font-weight: bold;">this is defined in doi-utils</span>
      (bibtex-set-field
       <span style="color: #228b22;">"title"</span>
       (mapconcat 'identity words <span style="color: #228b22;">" "</span>))
      (bibtex-fill-entry))))
</pre>
</div>

<pre class="example">
jmax-title-case-article
</pre>


<p>
Now, a single command converts this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">campbell-2013-enthal-entrop</span>,
  <span style="color: #8b008b;">author</span> =       {Charles T. Campbell and Jason R. V. Sellers},
  <span style="color: #8b008b;">title</span> =        {Enthalpies and entropies of adsorption on
                  well-defined oxide surfaces: experimental
                  measurements},
  <span style="color: #8b008b;">journal</span> =      CR,
  <span style="color: #8b008b;">volume</span> =       113,
  <span style="color: #8b008b;">number</span> =       6,
  <span style="color: #8b008b;">pages</span> =        {4106-4135},
  <span style="color: #8b008b;">year</span> =         2013,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cr300329s</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1021/cr300329s</span>},
  <span style="color: #8b008b;">month</span> =        6,
}
</pre>
</div>

<p>
to this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">campbell-2013-enthal-entrop</span>,
  <span style="color: #8b008b;">author</span> =       {Charles T. Campbell and Jason R. V. Sellers},
  <span style="color: #8b008b;">title</span> =        {Enthalpies and Entropies of Adsorption on
                  Well-defined Oxide Surfaces: Experimental
                  Measurements},
  <span style="color: #8b008b;">journal</span> =      CR,
  <span style="color: #8b008b;">volume</span> =       113,
  <span style="color: #8b008b;">number</span> =       6,
  <span style="color: #8b008b;">pages</span> =        {4106-4135},
  <span style="color: #8b008b;">year</span> =         2013,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cr300329s</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1021/cr300329s</span>},
  <span style="color: #8b008b;">month</span> =        6,
}
</pre>
</div>

<p>
We wrote the title case function so we can use it with bibtex-map-entries. That means we can fix every entry in a file by putting a comment at the top like this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #ff0000; font-weight: bold;">% (bibtex-map-entries 'jmax-title-case-article)  &lt;- put cursor here. C-x C-e</span>
</pre>
</div>

<p>
The function is not perfect, and does not include every word that should not be capitalized. You will still want to review your entries, but hopefully this saves some typing in the end.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/12/Title-casing-bibtex-entry-journal-titles.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Abbreviated journal names in bibtex</title>
      <link>http://jkitchin.github.io/blog/2014/10/11/Abbreviated-journal-names-in-bibtex</link>
      <pubDate>Sat, 11 Oct 2014 17:31:59 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">hIlJ3pTaapHY6Y7BGGC1XcWOeo8=</guid>
      <description>Abbreviated journal names in bibtex</description>
      <content:encoded><![CDATA[



<p>
Some journals require abbreviated journal names in the bibliography, and some require full names. Unfortunately, it is not possible to have both in your bibtex file. Or is it&#x2026;
</p>

<p>
It is possible to define a <a href="http://www.bibtex.org/Format/">@string</a> that is replaced in your bibtex file. If we have the definition of the @string in a separate file, we can specify its definition there, e.g. as an abbreviation, or as the full name. To make this useful, we need a simple way to add new journals, and to generate the definitions. 
</p>

<p>
First, you can find accepted journal name abbreviations here: <a href="http://cassi.cas.org/search.jsp">http://cassi.cas.org/search.jsp</a> . 
</p>

<p>
We are going to define a variable to hold the string definition, journal full name and an abbreviation. You can find our production version of what follows here: <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">jmax-bibtex-abbreviations</span>
  '((<span style="color: #228b22;">"ACAT"</span> <span style="color: #228b22;">"ACS Catalysis"</span> <span style="color: #228b22;">"ACS Catal."</span>)
    (<span style="color: #228b22;">"AM"</span> <span style="color: #228b22;">"Acta Materialia"</span> <span style="color: #228b22;">"Acta Mater."</span>)
    (<span style="color: #228b22;">"AMM"</span> <span style="color: #228b22;">"Acta Metallurgica et Materialia"</span> <span style="color: #228b22;">"Acta Metall. Mater."</span>)
    (<span style="color: #228b22;">"AMiner"</span> <span style="color: #228b22;">"American Mineralogist"</span> <span style="color: #228b22;">"Am. Mineral."</span>)
    (<span style="color: #228b22;">"AngC"</span> <span style="color: #228b22;">"Angewandte Chemie-International Edition"</span> <span style="color: #228b22;">"Angew. Chem. Int. Edit."</span>)
    (<span style="color: #228b22;">"APLM"</span> <span style="color: #228b22;">"APL Materials"</span> <span style="color: #228b22;">"APL Mat."</span>)
    (<span style="color: #228b22;">"ACBE"</span> <span style="color: #228b22;">"Applied Catalysis B: Environmental"</span> <span style="color: #228b22;">"Appl. Catal. B-Environ."</span>)
    (<span style="color: #228b22;">"APL"</span> <span style="color: #228b22;">"Applied Physics Letters"</span> <span style="color: #228b22;">"Appl. Phys. Lett."</span>)
    (<span style="color: #228b22;">"ASS"</span> <span style="color: #228b22;">"Applied Surface Science"</span> <span style="color: #228b22;">"Appl. Surf. Sci."</span>)
    (<span style="color: #228b22;">"CL"</span> <span style="color: #228b22;">"Catalysis Letters"</span> <span style="color: #228b22;">"Catal. Lett."</span>)
    (<span style="color: #228b22;">"CT"</span> <span style="color: #228b22;">"Catalysis Today"</span> <span style="color: #228b22;">"Catal. Today"</span>)
    (<span style="color: #228b22;">"CPL"</span> <span style="color: #228b22;">"Chemical Physics Letters"</span> <span style="color: #228b22;">"Chem. Phys. Lett"</span>)
    (<span style="color: #228b22;">"CR"</span> <span style="color: #228b22;">"Chemical Reviews"</span> <span style="color: #228b22;">"Chem. Rev."</span>)
    (<span style="color: #228b22;">"CSR"</span> <span style="color: #228b22;">"Chemical Society Reviews"</span> <span style="color: #228b22;">"Chem. Soc. Rev."</span>)
    (<span style="color: #228b22;">"CSR"</span> <span style="color: #228b22;">"Chemical Society Reviews"</span> <span style="color: #228b22;">"Chem. Soc. Rev."</span>)
    (<span style="color: #228b22;">"CM"</span> <span style="color: #228b22;">"Chemistry of Materials"</span> <span style="color: #228b22;">"Chem. Mater."</span>)
    (<span style="color: #228b22;">"CSA"</span> <span style="color: #228b22;">"Colloids and Surfaces, A: Physicochemical and Engineering Aspects"</span> <span style="color: #228b22;">"Colloids Surf., A"</span>)
    (<span style="color: #228b22;">"CPMS"</span> <span style="color: #228b22;">"Computational Materials Science"</span> <span style="color: #228b22;">"Comp. Mater. Sci."</span>)
    (<span style="color: #228b22;">"CPC"</span> <span style="color: #228b22;">"Computer Physics Communications"</span> <span style="color: #228b22;">"Comput. Phys. Commun."</span>)
    (<span style="color: #228b22;">"CGD"</span> <span style="color: #228b22;">"Crystal Growth \\&amp; Design"</span> <span style="color: #228b22;">"Cryst. Growth Des."</span>)
    (<span style="color: #228b22;">"CEC"</span> <span style="color: #228b22;">"CrystEngComm"</span> <span style="color: #228b22;">"CrystEngComm"</span>)
    (<span style="color: #228b22;">"ECST"</span> <span style="color: #228b22;">"ECS Transactions"</span> <span style="color: #228b22;">"ECS Trans."</span>)
    (<span style="color: #228b22;">"EES"</span> <span style="color: #228b22;">"Energy \\&amp; Environmental Science"</span> <span style="color: #228b22;">"Energy Environ. Sci."</span>)
    (<span style="color: #228b22;">"HPR"</span> <span style="color: #228b22;">"High Pressure Research"</span> <span style="color: #228b22;">"High Pressure Res."</span>)
    (<span style="color: #228b22;">"IC"</span> <span style="color: #228b22;">"Inorganic Chemistry"</span> <span style="color: #228b22;">"Inorg. Chem."</span>)
    (<span style="color: #228b22;">"IECR"</span> <span style="color: #228b22;">"Industrial \\&amp; Engineering Chemistry Research"</span> <span style="color: #228b22;">"Ind. Eng. Chem. Res."</span>)
    (<span style="color: #228b22;">"JJAP"</span> <span style="color: #228b22;">"Japanese Journal of Applied Physics"</span> <span style="color: #228b22;">"Jpn. J. Appl. Phys."</span>)
    (<span style="color: #228b22;">"JMatR"</span> <span style="color: #228b22;">"Journal of  Materials Research"</span> <span style="color: #228b22;">"J. Mater. Res."</span>)
    (<span style="color: #228b22;">"JALC"</span> <span style="color: #228b22;">"Journal of Alloys and Compounds"</span> <span style="color: #228b22;">"J. Alloy Compd."</span>)
    (<span style="color: #228b22;">"JAC"</span> <span style="color: #228b22;">"Journal of Applied Crystallography"</span> <span style="color: #228b22;">"J. Appl. Crystallogr."</span>)
    (<span style="color: #228b22;">"JAP"</span> <span style="color: #228b22;">"Journal of Applied Physics"</span> <span style="color: #228b22;">"J. Appl. Phys."</span>)
    (<span style="color: #228b22;">"JC"</span> <span style="color: #228b22;">"Journal of Catalysis"</span> <span style="color: #228b22;">"J. Catal."</span>)
    (<span style="color: #228b22;">"JCP"</span> <span style="color: #228b22;">"Journal of Chemical Physics"</span> <span style="color: #228b22;">"J. Chem. Phys."</span>)
    (<span style="color: #228b22;">"JCG"</span> <span style="color: #228b22;">"Journal of Crystal Growth"</span> <span style="color: #228b22;">"J. Crys. Growth"</span>)
    (<span style="color: #228b22;">"JMC"</span> <span style="color: #228b22;">"Journal of Materials Chemistry"</span> <span style="color: #228b22;">"J. Mater. Chem."</span>)
    (<span style="color: #228b22;">"JMC"</span> <span style="color: #228b22;">"Journal of Materials Chemistry"</span> <span style="color: #228b22;">"J. Mater. Chem."</span>)
    (<span style="color: #228b22;">"JMSL"</span> <span style="color: #228b22;">"Journal of Materials Science Letters"</span> <span style="color: #228b22;">"J. Mater. Sci. Lett."</span>)
    (<span style="color: #228b22;">"JMS"</span> <span style="color: #228b22;">"Journal of Membrane Science"</span> <span style="color: #228b22;">"J. Memb. Sci."</span>)
    (<span style="color: #228b22;">"JPE"</span> <span style="color: #228b22;">"Journal of Phase Equilibria"</span> <span style="color: #228b22;">"J. Phase Equilib."</span>)
    (<span style="color: #228b22;">"JPCS"</span> <span style="color: #228b22;">"Journal of Physics and Chemistry of Solids"</span> <span style="color: #228b22;">"J. Phys. Chem. Solids"</span>)
    (<span style="color: #228b22;">"JPCM"</span> <span style="color: #228b22;">"Journal of Physics: Condensed Matter"</span> <span style="color: #228b22;">"J. Phys.: Condens. Matter"</span>)
    (<span style="color: #228b22;">"JSSC"</span> <span style="color: #228b22;">"Journal of Solid State Chemistry"</span> <span style="color: #228b22;">"J. Solid State Chem."</span>)
    (<span style="color: #228b22;">"JACerS"</span> <span style="color: #228b22;">"Journal of the American Ceramic Society"</span> <span style="color: #228b22;">"J. Am. Ceram. Soc."</span>)
    (<span style="color: #228b22;">"JACS"</span> <span style="color: #228b22;">"Journal of the American Chemical Society"</span> <span style="color: #228b22;">"J. Am. Chem. Soc."</span>)
    (<span style="color: #228b22;">"JES"</span> <span style="color: #228b22;">"Journal of The Electrochemical Society"</span> <span style="color: #228b22;">"J. Electrochem. Soc."</span>)
    (<span style="color: #228b22;">"JES"</span> <span style="color: #228b22;">"Journal of The Electrochemical Society"</span> <span style="color: #228b22;">"J. Electrochem. Soc."</span>)
    (<span style="color: #228b22;">"JMS"</span> <span style="color: #228b22;">"Journal of Membrane Science"</span> <span style="color: #228b22;">"J. Memb. Sci."</span>)
    (<span style="color: #228b22;">"JVST"</span> <span style="color: #228b22;">"Journal of Vacuum Science \\&amp; Technology A"</span> <span style="color: #228b22;">"J. Vac. Sci. Technol. A"</span>)
    (<span style="color: #228b22;">"ML"</span> <span style="color: #228b22;">"Materials Letters"</span> <span style="color: #228b22;">"Mater. Lett."</span>)
    (<span style="color: #228b22;">"MSE-BS"</span> <span style="color: #228b22;">"Materials Science and Engineering B"</span> <span style="color: #228b22;">"Mat. Sci. Eng. B-Solid"</span>)
    (<span style="color: #228b22;">"MOLSIM"</span> <span style="color: #228b22;">"Molecular Simulation"</span> <span style="color: #228b22;">"Mol. Sim."</span>)
    (<span style="color: #228b22;">"Nature"</span> <span style="color: #228b22;">"Nature"</span> <span style="color: #228b22;">"Nature"</span>)
    (<span style="color: #228b22;">"NM"</span> <span style="color: #228b22;">"Nature Materials"</span> <span style="color: #228b22;">"Nat. Mater."</span>)
    (<span style="color: #228b22;">"PML"</span> <span style="color: #228b22;">"Philosophical Magazine Letters"</span> <span style="color: #228b22;">"Phil. Mag. Lett."</span>)
    (<span style="color: #228b22;">"PMA"</span> <span style="color: #228b22;">"Philosophical Magazine A"</span> <span style="color: #228b22;">"Phil. Mag. A"</span>)
    (<span style="color: #228b22;">"PA"</span> <span style="color: #228b22;">"Physica A: Statistical Mechanics and its Applications"</span> <span style="color: #228b22;">"Physica A"</span>)
    (<span style="color: #228b22;">"PB"</span> <span style="color: #228b22;">"Physica B-Condensed Matter"</span> <span style="color: #228b22;">"Physica B"</span>)
    (<span style="color: #228b22;">"PCCP"</span> <span style="color: #228b22;">"Physical Chemistry Chemical Physics"</span> <span style="color: #228b22;">"Phys. Chem. Chem. Phys."</span>)
    (<span style="color: #228b22;">"PSSB"</span> <span style="color: #228b22;">"physica status solidi (b)"</span> <span style="color: #228b22;">"Phys. Status Solidi B"</span>)
    (<span style="color: #228b22;">"PRA"</span> <span style="color: #228b22;">"Physical Review A"</span> <span style="color: #228b22;">"Phys. Rev. A"</span>)
    (<span style="color: #228b22;">"PRB"</span> <span style="color: #228b22;">"Physical Review B"</span> <span style="color: #228b22;">"Phys. Rev. B"</span>)
    (<span style="color: #228b22;">"PRL"</span> <span style="color: #228b22;">"Physical Review Letters"</span> <span style="color: #228b22;">"Phys. Rev. Lett."</span>)
    (<span style="color: #228b22;">"PCM"</span> <span style="color: #228b22;">"Physics and Chemistry of Minerals"</span> <span style="color: #228b22;">"Phys. Chem. Miner."</span>)
    (<span style="color: #228b22;">"PSurfSci"</span> <span style="color: #228b22;">"Progress in Surface Science"</span> <span style="color: #228b22;">"Prog. Surf. Sci."</span>)
    (<span style="color: #228b22;">"Science"</span> <span style="color: #228b22;">"Science"</span> <span style="color: #228b22;">"Science"</span>)
    (<span style="color: #228b22;">"SABC"</span> <span style="color: #228b22;">"Sensors and Actuators B: Chemical"</span> <span style="color: #228b22;">"Sensor. Actuat. B-Chem."</span>)
    (<span style="color: #228b22;">"SS"</span> <span style="color: #228b22;">"Surface Science"</span> <span style="color: #228b22;">"Surf. Sci."</span>)
    (<span style="color: #228b22;">"EPJB"</span> <span style="color: #228b22;">"The European Physical Journal B"</span> <span style="color: #228b22;">"Eur. Phys. J. B"</span>)
    (<span style="color: #228b22;">"JPC"</span> <span style="color: #228b22;">"The Journal of Physical Chemistry"</span> <span style="color: #228b22;">"J. Phys. Chem."</span>)
    (<span style="color: #228b22;">"JPCB"</span> <span style="color: #228b22;">"The Journal of Physical Chemistry  B"</span> <span style="color: #228b22;">"J. Phys. Chem. B"</span>)
    (<span style="color: #228b22;">"JPCC"</span> <span style="color: #228b22;">"The Journal of Physical Chemistry C"</span> <span style="color: #228b22;">"J. Phys. Chem. C"</span>)
    (<span style="color: #228b22;">"JCP"</span> <span style="color: #228b22;">"The Journal of Chemical Physics"</span> <span style="color: #228b22;">"J. Chem. Phys."</span>)
    (<span style="color: #228b22;">"TSF"</span> <span style="color: #228b22;">"Thin Solid Films"</span> <span style="color: #228b22;">"Thin Solid Films"</span>)
    (<span style="color: #228b22;">"TC"</span> <span style="color: #228b22;">"Topics in Catalysis"</span> <span style="color: #228b22;">"Top. Catal."</span>)
    (<span style="color: #228b22;">"WR"</span> <span style="color: #228b22;">"Water Research"</span> <span style="color: #228b22;">"Water Res."</span>))
  <span style="color: #228b22;">"List of (string journal-full-name journal-abbreviation)"</span>)
</pre>
</div>

<pre class="example">
bibtex-abbreviations
</pre>

<p>
This data structure will serve a few purposes.
</p>

<ol class="org-ol">
<li>We will generate the bib files that define the @string definitions
</li>
<li>We will use it to modify bibtex files to use those strings.
</li>
</ol>

<p>
First, here are some simple functions to generate the @string definitions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-generate-longtitles</span> ()
  (interactive)
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"longtitles.bib"</span>
    (<span style="color: #8b0000;">dolist</span> (row bibtex-abbreviations)
      (insert (format <span style="color: #228b22;">"@string{%s=\"%s\"}\n"</span>
                      (nth 0 row)
                      (nth 1 row))))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-generate-shorttitles</span> ()
  (interactive)
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"shorttitles.bib"</span>
    (<span style="color: #8b0000;">dolist</span> (row bibtex-abbreviations)
      (insert (format <span style="color: #228b22;">"@string{%s=\"%s\"}\n"</span>
                      (nth 0 row)
                      (nth 2 row))))))
</pre>
</div>

<pre class="example">
jmax-bibtex-generate-shorttitles
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(jmax-bibtex-generate-longtitles)
(jmax-bibtex-generate-shorttitles)
</pre>
</div>

<p>
Here are the results of running that code: <a href="/media/2014-10-11-Abbreviated-journal-names-in-bibtex/shorttitles.bib">shorttitles.bib</a> and <a href="/media/2014-10-11-Abbreviated-journal-names-in-bibtex/longtitles.bib">longtitles.bib</a> . This is the first step. We have the @strings defined. Now, we need to convert the names in a bibtex entry to use our string. We want to replace full names and abbreviated names with the @string.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-stringify-journal-name</span> (<span style="color: #4682b4;">&amp;optional</span> key start end)
  <span style="color: #228b22;">"replace journal name with a string. The strings are defined in `</span><span style="color: #cd0000;">bibtex-abbreviations</span><span style="color: #228b22;">'."</span>
  (interactive)
  (bibtex-beginning-of-entry)
  (<span style="color: #8b0000;">when</span>
      (string= <span style="color: #228b22;">"article"</span>
               (downcase
                (cdr (assoc <span style="color: #228b22;">"=type="</span> (bibtex-parse-entry)))))
    (<span style="color: #8b0000;">let*</span> ((full-names (mapcar
                        (<span style="color: #8b0000;">lambda</span> (row)
                          (cons  (nth 1 row) (nth 0 row)))
                        bibtex-abbreviations))
           (abbrev-names (mapcar
                          (<span style="color: #8b0000;">lambda</span> (row)
                            (cons  (nth 2 row) (nth 0 row)))
                          bibtex-abbreviations))
           (journal (s-trim (bibtex-autokey-get-field <span style="color: #228b22;">"journal"</span>)))
           (bstring (or
                     (cdr (assoc journal full-names))
                     (cdr (assoc journal abbrev-names)))))
      (<span style="color: #8b0000;">when</span> bstring
        (bibtex-set-field <span style="color: #228b22;">"journal"</span> bstring t)
        (bibtex-fill-entry)))))
</pre>
</div>

<pre class="example">
jmax-stringify-journal-name
</pre>

<p>
Now, with a single command, we can convert this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">lizzit-2001-surfac-ru</span>,
  <span style="color: #8b008b;">author</span> =       {S. Lizzit and A. Baraldi and A. Groso and K. Reuter
                  and M. Ganduglia-Pirovano and C. Stampfl and
                  M. Scheffler and M. Stichler and C. Keller and
                  W. Wurth and D. Menzel},
  <span style="color: #8b008b;">title</span> =        {Surface Core-level Shifts of Clean and
                  Oxygen-covered {R}u(0001)},
  <span style="color: #8b008b;">journal</span> =      {Physical Review B,
  <span style="color: #8b008b;">volume</span> =       63,
  <span style="color: #8b008b;">number</span> =       20,
  <span style="color: #8b008b;">pages</span> =        {nil},
  <span style="color: #8b008b;">year</span> =         2001,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1103/physrevb.63.205419</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1103/PhysRevB.63.205419</span>},
  <span style="color: #8b008b;">month</span> =        5,
}
</pre>
</div>

<p>
into this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">lizzit-2001-surfac-ru</span>,
  <span style="color: #8b008b;">author</span> =       {S. Lizzit and A. Baraldi and A. Groso and K. Reuter
                  and M. Ganduglia-Pirovano and C. Stampfl and
                  M. Scheffler and M. Stichler and C. Keller and
                  W. Wurth and D. Menzel},
  <span style="color: #8b008b;">title</span> =        {Surface Core-level Shifts of Clean and
                  Oxygen-covered {R}u(0001)},
  <span style="color: #8b008b;">journal</span> =      PRB,
  <span style="color: #8b008b;">volume</span> =       63,
  <span style="color: #8b008b;">number</span> =       20,
  <span style="color: #8b008b;">pages</span> =        {nil},
  <span style="color: #8b008b;">year</span> =         2001,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1103/physrevb.63.205419</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1103/PhysRevB.63.205419</span>},
  <span style="color: #8b008b;">month</span> =        5,
}
</pre>
</div>

<p>
If you have a lot of entries you want to modify, you can use bibtex-map-entries like this. Basically, put the elisp form in a comment, and then execute the elisp form
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #ff0000; font-weight: bold;">%% (bibtex-map-entries 'jmax-stringify-journal-name)  &lt;- put cursor here. C-x C-e</span>
</pre>
</div>

<p>
This saves some effort. Over time, I will keep adding entries to the abbreviation table. As long as a standard journal name or abbreviation is in your bibtex file, this approach should work pretty well. After you replace the journal names with @string entries, you have to generate the string file, either shorttitles.bib or longtitles.bib, and in your LaTeX file, change your bibliography line to:
</p>

<div class="org-src-container">

<pre class="src src-latex"><span style="color: #8b0000;">\bibliography</span>{<span style="color: #cd0000;">shorttitles,references</span>}
</pre>
</div>

<p>
The order is important. The @string definitions are in shorttitles.bib, and your bibtex entries in references.bib.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/11/Abbreviated-journal-names-in-bibtex.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Automatic downloading of a pdf from a journal site</title>
      <link>http://jkitchin.github.io/blog/2014/05/23/Automatic-downloading-of-a-pdf-from-a-journal-site</link>
      <pubDate>Fri, 23 May 2014 11:44:11 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">UWmVnxHyixLN3IL5WLWxQNP6n_g=</guid>
      <description>Automatic downloading of a pdf from a journal site</description>
      <content:encoded><![CDATA[


<p>
Many bibliography software packages can automatically download a pdf for you. In this post, we explore how that can be done from emacs. The principle idea is that the pdf is obtained from a url, and that you can calculate the url by some method. Then you can download the file. 
</p>

<p>
For example, consider this article in Phys. Rev. Lett. <a href="http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.99.016105">http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.99.016105</a> . There is a link to get the pdf for this article at <a href="http://journals.aps.org/prl/pdf/10.1103/PhysRevLett.99.016105">http://journals.aps.org/prl/pdf/10.1103/PhysRevLett.99.016105</a> . It is not difficult to construct that url; you just replace <code>/abstract/</code> with <code>/pdf/</code>.
</p>

<p>
The trick is how to get the first url. We have previously seen that we can construct a bibtex entry from a doi. In fact, we can use the doi to get the url above. If you visit <a href="http://dx.doi.org/10.1103/PhysRevLett.99.016105">http://dx.doi.org/10.1103/PhysRevLett.99.016105</a> , you will be redirected to the url. It so happens that you can use code to get the redirected url. In emacs-lisp it is a little convoluted; you have to use url-retrieve, and provide a callback that sets the redirect. Here is an example. It appears you need to run this block twice to get the right variable setting. That seems like some kind of error in what I have set up, but I cannot figure out why.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defvar *doi-utils-redirect*)

(defun callback (&amp;optional status)
 (when status ;  is nil if there none
   (setq *doi-utils-redirect* (plist-get status :redirect))))

(url-retrieve 
  "http://dx.doi.org/10.1103/PhysRevLett.99.016105"
  'callback)

(print *doi-utils-redirect*)
</pre>
</div>

<pre class="example">
"http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.99.016105"
</pre>

<p>
From there, creating the pdf url is as simple as
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(replace-regexp-in-string "prl/abstract" "prl/pdf" "http://journals.aps.org/prl/abstract/10.1103/PhysRevLett.99.016105")
</pre>
</div>

<pre class="example">
http://journals.aps.org/prl/pdf/10.1103/PhysRevLett.99.016105
</pre>

<p>
And finally we download the file with
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(url-copy-file "http://journals.aps.org/prl/pdf/10.1103/PhysRevLett.99.016105" "PhysRevLett.99.016105.pdf" nil)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
So that is the gist of automating pdf downloads. You do these steps:
</p>
<ol class="org-ol">
<li>Get the DOI
</li>
<li>Get the url that the DOI redirects to
</li>
<li>Calculate the link to the pdf
</li>
<li>Download the pdf
</li>
</ol>

<p>
Each publisher does something a little bit different, so you have to work this out for each one. I have worked alot of them out at <a href="https://github.com/jkitchin/jmax/blob/master/user/doi-utils.el">https://github.com/jkitchin/jmax/blob/master/user/doi-utils.el</a> . That file is a work in progress, but it is a project I intend to use on a regular basis.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/05/23/Automatic-downloading-of-a-pdf-from-a-journal-site.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
    <item>
      <title>Converting a doi to a bibtex entry</title>
      <link>http://jkitchin.github.io/blog/2014/05/22/Converting-a-doi-to-a-bibtex-entry</link>
      <pubDate>Thu, 22 May 2014 16:22:31 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">qyqvfhXJMg-F_CObJnHY22xS968=</guid>
      <description>Converting a doi to a bibtex entry</description>
      <content:encoded><![CDATA[


<p>
Many citation management packages allow you to download a bibliography entry from a doi. I want to be able to do that in emacs. I found this <a href="http://homepages.see.leeds.ac.uk/~eeaol/notes/2013/02/doi-metadata/">page</a> that shows it is possible to get metadata about a doi with an http request, and from that data, we can create a bibtex entry. So, here is the basic code for getting metadata about a doi. We specify that we want json code, and then use <a href="http://edward.oconnor.cx/2006/03/json.el">json.el</a> to view the results.
</p>

<p>
We temporarily set a few url-* variables with affect the url-retrieve results. And we rely on url-http-end-of-headers which tells us the end of the headers that get returned, so we can use the remaining text as the data.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(require 'json)

(let ((url-request-method "GET") 
      (url-mime-accept-string "application/citeproc+json")
      (json-object-type 'plist)
      (results))
  (setq results 
	(with-current-buffer (url-retrieve-synchronously "http://dx.doi.org/10.1016/S0022-0248(97)00279-0")
	  (json-read-from-string (buffer-substring url-http-end-of-headers (point-max))))))
</pre>
</div>

<p>
(:volume 181 :indexed (:timestamp 1389218884442 :date-parts <i>2014 1 8</i>) :publisher Elsevier BV :source CrossRef :URL <a href="http://dx.doi.org/10.1016/S0022-0248(97)">http://dx.doi.org/10.1016/S0022-0248(97)</a> 00279-0 :ISSN [0022-0248] :DOI 10.1016/s0022-0248(97)00279-0 :type journal-article :title Effect of growth conditions on formation of TiO2-II thin films in atomic layer deposition process :issue 3 :deposited (:timestamp 1386028800000 :date-parts <i>2013 12 3</i>) :page 259-264 :reference-count nil :container-title Journal of Crystal Growth :author [(:given Jaan :family Aarik) (:given Aleks :family Aidla) (:given Väino :family Sammelselg) (:given Teet :family Uustare)] :prefix <a href="http://id.crossref.org/prefix/10.1016">http://id.crossref.org/prefix/10.1016</a> :score 1.0 :issued (:date-parts <i>1997 11</i>) :subject [Condensed Matter Physics Inorganic Chemistry Materials Chemistry] :subtitle [])
</p>

<p>
That data is now sufficient for us to consider constructing a bibtex entry. For an article, a prototypical entry looks like:
</p>

<pre class="example">
@Article{,
  author = 	 {},
  title = 	 {},
  journal = 	 {},
  year = 	 {},
  OPTkey = 	 {},
  OPTvolume = 	 {},
  OPTnumber = 	 {},
  OPTpages = 	 {},
  OPTmonth = 	 {},
  OPTnote = 	 {},
  OPTannote = 	 {}
}
</pre>

<p>
Let us create a function that takes a doi and constructs a bibtex entry. I do not use all the metadata, so I just store the json data in the annote field. Maybe I should use another field for that, but annote seems ok since I do not use if for anything. I am going to use a template expansion function I developed earlier to make the bibtex entry template easier to write and read. Here is the code.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(require 'json)

(defun expand-template (s)
  "expand a template containing %{} with the eval of its contents"
  (replace-regexp-in-string "%{\\([^}]+\\)}"
                            (lambda (arg)
                              (let ((sexp (substring arg 2 -1)))
                                (format "%s" (eval (read sexp))))) s))

(defun doi-to-bibtex-article (doi)
 "insert a bibtex entry for doi at point"
 (interactive "sDOI: ")
 (let ((url-request-method "GET") 
       (url-mime-accept-string "application/citeproc+json")
       (json-object-type 'plist)
       type
       results
       author
       title
       journal
       year
       volume
       number
       pages
       month
       url json-data)
   
   (setq results 
	 (with-current-buffer
	     (url-retrieve-synchronously
	      (concat "http://dx.doi.org/" doi))
	 (json-read-from-string (buffer-substring url-http-end-of-headers (point-max))))
         type (plist-get results :type)
	 author (mapconcat (lambda (x) (concat (plist-get x :given) " " (plist-get x :family)))
		     (plist-get results :author) " and ")
	 title (plist-get results :title)
	 journal (plist-get results :container-title)
	 volume (plist-get results :volume)
	 issue (plist-get results :issue)
	 year (elt (elt (plist-get (plist-get results :issued) :date-parts) 0) 0)
	 month (elt (elt (plist-get (plist-get results :issued) :date-parts) 0) 1)
	 pages (plist-get results :page)
	 doi (plist-get results :DOI)
	 url (plist-get results :URL)
	 json-data (format "%s" results))

   (when (string= type "journal-article")

     (expand-template "@article{,
  author = 	 {%{author}},
  title = 	 {%{title}},
  journal = 	 {%{journal}},
  year = 	 {%{year}},
  volume = 	 {%{volume}},
  number = 	 {%{issue}},
  pages = 	 {%{pages}},
  doi =          {%{doi}},
  url =          {%{url}},
  month = 	 {%{month}},
  json = 	 {%{json-data}}
}"))))
   
(doi-to-bibtex-article "10.1016/s0022-0248(97)00279-0")
</pre>
</div>

<pre class="example">
@article{,
  author = 	 {Jaan Aarik and Aleks Aidla and Väino Sammelselg and Teet Uustare},
  title = 	 {Effect of growth conditions on formation of TiO2-II thin films in atomic layer deposition process},
  journal = 	 {Journal of Crystal Growth},
  year = 	 {1997},
  volume = 	 {181},
  number = 	 {3},
  pages = 	 {259-264},
  doi =          {10.1016/s0022-0248(97)00279-0},
  url =          {http://dx.doi.org/10.1016/s0022-0248(97)00279-0},
  month = 	 {11},
  json = 	 {(:volume 181 :indexed (:timestamp 1389218884442 :date-parts [[2014 1 8]]) :publisher Elsevier BV :source CrossRef :URL http://dx.doi.org/10.1016/s0022-0248(97)00279-0 :ISSN [0022-0248] :DOI 10.1016/s0022-0248(97)00279-0 :type journal-article :title Effect of growth conditions on formation of TiO2-II thin films in atomic layer deposition process :issue 3 :deposited (:timestamp 1386028800000 :date-parts [[2013 12 3]]) :page 259-264 :reference-count nil :container-title Journal of Crystal Growth :author [(:given Jaan :family Aarik) (:given Aleks :family Aidla) (:given Väino :family Sammelselg) (:given Teet :family Uustare)] :prefix http://id.crossref.org/prefix/10.1016 :score 1.0 :issued (:date-parts [[1997 11]]) :subject [Condensed Matter Physics Inorganic Chemistry Materials Chemistry] :subtitle [])}
}
</pre>

<p>
That looks excellent. Note there are some non-ascii characters in it, which would have to be fixed. Let us try it on an ASAP article.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(doi-to-bibtex-article "10.1021/ie403744u")
</pre>
</div>

<pre class="example">
@article{,
  author = 	 {José A. Delgado and V. I. Águeda and M. A. Uguina and J. L. Sotelo and P. Brea and Carlos A. Grande},
  title = 	 { Adsorption and Diffusion of H 2 , CO, CH 4 , and CO 2 in BPL Activated Carbon and 13X Zeolite: Evaluation of Performance in Pressure Swing Adsorption Hydrogen Purification by Simulation },
  journal = 	 {Industrial &amp; Engineering Chemistry Research},
  year = 	 {2014},
  volume = 	 {nil},
  number = 	 {nil},
  pages = 	 {140117091024005},
  doi =          {10.1021/ie403744u},
  url =          {http://dx.doi.org/10.1021/ie403744u},
  month = 	 {1},
  json = 	 {(:indexed (:timestamp 1392935578089 :date-parts [[2014 2 20]]) :publisher American Chemical Society (ACS) :source CrossRef :URL http://dx.doi.org/10.1021/ie403744u :ISSN [0888-5885 1520-5045] :DOI 10.1021/ie403744u :type journal-article :title  Adsorption and Diffusion of H 2 , CO, CH 4 , and CO 2 in BPL Activated Carbon and 13X Zeolite: Evaluation of Performance in Pressure Swing Adsorption Hydrogen Purification by Simulation  :deposited (:timestamp 1389916800000 :date-parts [[2014 1 17]]) :page 140117091024005 :reference-count nil :container-title Industrial &amp; Engineering Chemistry Research :author [(:given José A. :family Delgado) (:given V. I. :family Águeda) (:given M. A. :family Uguina) (:given J. L. :family Sotelo) (:given P. :family Brea) (:given Carlos A. :family Grande)] :prefix http://id.crossref.org/prefix/10.1021 :score 1.0 :issued (:date-parts [[2014 1 17]]) :subject [Chemistry(all) Industrial and Manufacturing Engineering Chemical Engineering(all)] :subtitle [])}
}
</pre>

<p>
You see that nil is put in for missing entries. That is probably ok. There is an &amp; in the journal that needs to be cleaned up, but that is easily done with org-ref-clean-bibtex-entry. In summary, this looks like a very convenient way to get bibtex entries inside emacs. I should probably have the function insert that string to a buffer at point, but that is not difficult to do.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/05/22/Converting-a-doi-to-a-bibtex-entry.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
  </channel>
</rss>
