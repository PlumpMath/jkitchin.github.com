<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sun, 04 Jan 2015 13:59:33 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>A helm interface to ps</title>
      <link>http://jkitchin.github.io/blog/2014/11/22/A-helm-interface-to-ps</link>
      <pubDate>Sat, 22 Nov 2014 12:57:42 EST</pubDate>
      <category><![CDATA[helm emacs]]></category>
      <guid isPermaLink="false">TOW03ZNV4izP7X9RRqp2zb-jvsI=</guid>
      <description>A helm interface to ps</description>
      <content:encoded><![CDATA[


<p>
Occassionally, I need to find the PID of a process to kill it or do something else. Usually I do the old-school unix thing  of piping the output of one command (ps) to another command (grep) to filter out interesting lines. Then, I can do something with that output.
</p>

<div class="org-src-container">

<pre class="src src-sh">ps aux | grep emacs
</pre>
</div>

<pre class="example">
jkitchin         4781   3.1  0.8  2639316  70432 s002  S    12:45PM   0:06.68 /usr/local/Cellar/emacs/HEAD/Emacs.app/Contents/MacOS/Emacs
jkitchin         4777   0.0  0.0  2433364    932 s002  S    12:45PM   0:00.00 /bin/bash /usr/local/bin/emacs
jkitchin         4874   0.0  0.0  2432784    604   ??  S    12:46PM   0:00.00 grep emacs
</pre>

<p>
Today, I will explore using helm in emacs to do something like that. The idea is to create a helm command that uses the output of ps as candidates, and then you select the process you want through the helm interface, and then select an action.
</p>

<p>
It is easy enough to get the output of the ps command in emacs like this. Here, we just get the first three results, and specify the output we want.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((results (split-string
                (shell-command-to-string
                 <span style="color: #228b22;">"ps x -o ruser,pid,command"</span>) <span style="color: #228b22;">"\n"</span>)))
  (loop for i from 1 to 3
        collect (elt results i)))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #228b22;">"jkitchin   139 /sbin/launchd"</span> <span style="color: #228b22;">"jkitchin   151 /usr/libexec/UserEventAgent (Aqua)"</span> <span style="color: #228b22;">"jkitchin   152 /usr/sbin/distnoted agent"</span>)
</pre>
</div>

<p>
These will be the candidates for the helm command. We will create a few actions. One will provide details about the pid, and one could in principle kill the pid or send some signal to it. We will just have these actions create message boxes for us to see helm in action. We will make the kill function interactive, so it allows an arbitrary signal to be sent. The other actions are placeholders for future actions, and so we can show off some shortcuts in helm later.
</p>

<p>
For the candidates, we will construct a list of cons cells where the car is a line from ps, and that is what will show in the helm selection interface, and the cdr will be the pid which we get by parsing the line to get the second element. When you select an entry in helm, the cdr of that entry (if it exists) is passed to the action function selected.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-candidates</span> ()
  <span style="color: #228b22;">"return a list of cons cells (line . pid) for the output of ps"</span>
  (loop for line in
        ;; <span style="color: #ff0000; font-weight: bold;">skip the first line which is a header</span>
        (cdr (split-string
              (shell-command-to-string
               <span style="color: #228b22;">"ps ax -o ruser,pid,command"</span>) <span style="color: #228b22;">"\n"</span>))
        collect
        (cons
         line
         (elt (split-string line) 1))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-details</span> (pid)
  <span style="color: #228b22;">"give details of PID."</span>
  (message-box <span style="color: #228b22;">"%s"</span> (shell-command-to-string (format <span style="color: #228b22;">"ps ux %s"</span> pid))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-kill</span> (pid)
  <span style="color: #228b22;">"Message box instead of killing PID."</span>
  (<span style="color: #8b0000;">let</span> ((SIG (read-string <span style="color: #228b22;">"Kill with signal: "</span>)))
    (message-box <span style="color: #228b22;">"Killing pid %s with signal %s"</span> pid SIG)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-hello</span> (pid)
  (message-box <span style="color: #228b22;">"Silly 3rd action for %s"</span> pid))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-bye</span> (pid)
  (message-box <span style="color: #228b22;">"Silly 4th action for %s"</span> pid))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-byebye</span> (pid)
  (message-box <span style="color: #228b22;">"Silly 5th action for %s"</span> pid))

;; <span style="color: #ff0000; font-weight: bold;">the source variable for helm</span>
(setq helm-source-ps '((name . <span style="color: #228b22;">"ps output"</span>)
                       ;; <span style="color: #ff0000; font-weight: bold;">these are the entries you can select</span>
                       (candidates . ps-candidates)
                       ;; <span style="color: #ff0000; font-weight: bold;">these are the actions available for the</span>
                       ;; <span style="color: #ff0000; font-weight: bold;">selected entry. each function gets the cdr</span>
                       ;; <span style="color: #ff0000; font-weight: bold;">of the entry selected.</span>
                       (action . ((<span style="color: #228b22;">"details"</span> . ps-details)
                                  (<span style="color: #228b22;">"kill"</span> . ps-kill)
                                  (<span style="color: #228b22;">"hello"</span> . ps-hello)
                                  (<span style="color: #228b22;">"bye"</span> . ps-bye)
                                  (<span style="color: #228b22;">"byb-bye"</span> . ps-byebye)))))

;; <span style="color: #ff0000; font-weight: bold;">now we run the helm command</span>
(helm <span style="color: #cd0000;">:sources</span> '(helm-source-ps))
</pre>
</div>


<p>
You can navigate the helm interface with the arrows, or C-n (next/down) C-p (previous/up), or by typing in the pattern you want to match. There are only two actions here. The first one is the default action, which you can run by pressing tab or enter. The subtle difference between them is that tab leaves the helm window open, while enter runs the default action and closes the helm window. You can get it back with C-c h r (or M-x helm-resume). 
</p>

<p>
To get the kill function, you can press C-z to get the action menu, and then press enter. Helm provides a shortcut for this. C-e selects the second action, so when you remember what the second action is and you want it, you can skip the C-z activity. You can access the third action with C-j. There is a command like helm-select-4th-action, but it is not bound to a key, so we have to make one like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-key helm-map (kbd <span style="color: #228b22;">"C-k"</span>) 'helm-select-4th-action)
</pre>
</div>

<p>
You can also define a 5th action like this. It does not seem possible to define an arbitrary nth action, because you cannot get an input for n while helm uses the minibuffer. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">5th-action</span> ()
 (interactive)
 (<span style="color: #8b0000;">let</span> ((n 5))
   ;; <span style="color: #ff0000; font-weight: bold;">actions start at 0, so the 5th action is actually indexed at 4</span>
   (helm-select-nth-action (- n 1))))

(define-key helm-map (kbd <span style="color: #228b22;">"C-l"</span>) '5th-action)
</pre>
</div>

<p>
That is the proof of concept in using a helm interface to interact with unix commands. There are other actions you might choose, like renice, or maybe it is possible to suspend a job by pid. The real application for this I had in mind was interaction with the Torque queue system, where you might want to modify, kill jobs in the queue system this way. I could also see applications in user management, where you have some well defined functions to run, e.g. checking quotas, changing passwords, etc&#x2026; Clearly the utility of this approach rests heavily on there being a set of actions you do regularly enough to justify coding them into functions, and often enough you would remember to use your helm command! It is an interesting approach as an alternative to writing shell scripts to do this though.
</p>

<p>
This post might make more sense if you watch this video of the helm interface in action: <a href="http://www.youtube.com/watch?v=3FImB6OwHI0">http://www.youtube.com/watch?v=3FImB6OwHI0</a> </p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/22/A-helm-interface-to-ps.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
  </channel>
</rss>
