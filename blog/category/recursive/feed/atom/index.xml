<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-03-08T12:56:16Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Lather, rinse and repeat]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/02/Lather-rinse-and-repeat" />
    <id>http://jkitchin.github.io/blog/2013/02/02/Lather-rinse-and-repeat</id>
    <updated>2013-02-27T14:45:06Z</updated>
    <published>2013-02-02T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="recursive" />
    <category scheme="http://jkitchin.github.io/blog" term="math" />
    <summary type="html"><![CDATA[Lather, rinse and repeat]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/02/Lather-rinse-and-repeat"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2012/05/28/lather-rinse-and-repeat/" >Matlab post</a>
</p>

<p>
Recursive functions are functions that call themselves repeatedly until some exit condition is met. Today we look at a classic example of recursive function for computing a factorial. The factorial of a non-negative integer n is denoted n!, and is defined as the product of all positive integers less than or equal to n.
</p>

<p>
The key ideas in defining a recursive function is that there needs to be some logic to identify when to terminate the function. Then, you need logic that calls the function again, but with a smaller part of the problem. Here we recursively call the function with n-1 until it gets called with n=0. 0! is defined to be 1.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">recursive_factorial</span>(n):
    <span style="color: #228b22;">'''compute the factorial recursively. Note if you put a negative</span>
<span style="color: #228b22;">    number in, this function will never end. We also do not check if</span>
<span style="color: #228b22;">    n is an integer.'''</span>
    <span style="color: #8b0000;">if</span> n == 0:
        <span style="color: #8b0000;">return</span> 1
    <span style="color: #8b0000;">else:</span>
        <span style="color: #8b0000;">return</span> n * recursive_factorial(n - 1)

<span style="color: #8b0000;">print</span> recursive_factorial(5)
</pre>
</div>

<pre class="example">
120
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.misc <span style="color: #8b0000;">import</span> factorial
<span style="color: #8b0000;">print</span> factorial(5)
</pre>
</div>

<pre class="example">
120.0
</pre>

<div id="outline-container-0-1" class="outline-3">
<h3 id="sec-0-1"><span class="section-number-3">0.1</span> Compare to a loop solution</h3>
<div class="outline-text-3" id="text-0-1">
<p>
This example can also be solved by a loop. This loop is easier to read and understand than the recursive function. Note the recursive nature of defining the variable as itself times a number.
</p>

<div class="org-src-container">

<pre class="src src-python">n = 5
factorial_loop = 1
<span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(1, n + 1):
    factorial_loop *= i

<span style="color: #8b0000;">print</span> factorial_loop
</pre>
</div>

<pre class="example">
120
</pre>

<p>
There are some significant differences in this example than in Matlab. 
</p>

<ol>
<li>the syntax of the for loop is quite different with the use of the <code>in</code> operator.
</li>
<li>python has the nice *= operator to replace a = a * i
</li>
<li>We have to loop from 1 to n+1 because the last number in the range is not returned.
</li>
</ol>
</div>
</div>
<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Conclusions</h2>
<div class="outline-text-2" id="text-1">
<p>
Recursive functions have a special niche in mathematical programming. There is often another way to accomplish the same goal. That is not always true though, and in a future post we will examine cases where recursion is the only way to solve a problem.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/02/Lather,-rinse-and-repeat.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Some of this, sum of that]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/02/Some-of-this-sum-of-that" />
    <id>http://jkitchin.github.io/blog/2013/02/02/Some-of-this-sum-of-that</id>
    <updated>2013-02-27T14:44:46Z</updated>
    <published>2013-02-02T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="miscellaneous" />
    <category scheme="http://jkitchin.github.io/blog" term="recursive" />
    <summary type="html"><![CDATA[Some of this, sum of that]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/02/Some-of-this-sum-of-that"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2012/05/29/some-of-this-sum-of-that/" >Matlab plot</a>
</p>

<p>
Python provides a sum function to compute the sum of a list. However, the sum function does not work on every arrangement of numbers, and it certainly does not work on nested lists. We will solve this problem with recursion.
</p>

<p>
Here is a simple example.
</p>

<div class="org-src-container">

<pre class="src src-python">v = [1, 2, 3, 4, 5, 6, 7, 8, 9] <span style="color: #ff0000; font-weight: bold;"># a list</span>
<span style="color: #8b0000;">print</span> sum(v)

v = (1, 2, 3, 4, 5, 6, 7, 8, 9)  <span style="color: #ff0000; font-weight: bold;"># a tuple</span>
<span style="color: #8b0000;">print</span> sum(v)
</pre>
</div>

<pre class="example">
45
45
</pre>

<p>
If you have data in a dictionary, sum works by default on the keys. You can give the sum function the values like this.
</p>

<div class="org-src-container">

<pre class="src src-python">v = {<span style="color: #228b22;">'a'</span>:1, <span style="color: #228b22;">'b'</span>:3, <span style="color: #228b22;">'c'</span>:4}
<span style="color: #8b0000;">print</span> sum(v.values())
</pre>
</div>

<pre class="example">
8
</pre>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Nested lists</h2>
<div class="outline-text-2" id="text-1">
<p>
Suppose now we have nested lists. This kind of structured data might come up if you had grouped several things together. For example, suppose we have 5 departments, with 1, 5, 15, 7 and 17 people in them, and in each department they are divided into groups.
</p>

<p>
Department 1: 1 person
Department 2: group of 2 and group of 3
Department 3: group of 4 and 11, with a subgroups of 5 and 6 making
              up the group of 11.
Department 4: 7 people
Department 5: one group of 8 and one group of 9.
</p>

<p>
We might represent the data like this nested list. Now, if we want to compute the total number of people, we need to add up each group. We cannot simply sum the list, because some elements are single numbers, and others are lists, or lists of lists. We need to recurse through each entry until we get down to a number, which we can add to the running sum. 
</p>
<div class="org-src-container">

<pre class="src src-python">v = [1, 
    [2, 3],
    [4, [5, 6]],
    7,
    [8,9]]

<span style="color: #8b0000;">def</span> recursive_<span style="color: #8b0000;">sum</span>(X):
    <span style="color: #228b22;">'compute sum of arbitrarily nested lists'</span>
    s = 0 <span style="color: #ff0000; font-weight: bold;"># initial value of the sum</span>

    <span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(len(X)):
        <span style="color: #8b0000;">import</span> types  <span style="color: #ff0000; font-weight: bold;"># we use this to test if we got a number</span>
        <span style="color: #8b0000;">if</span> <span style="color: #8b0000;">isinstance</span>(X[i], (types.IntType,
                             types.LongType,
                             types.FloatType,
                             types.ComplexType)):
            <span style="color: #ff0000; font-weight: bold;"># this is the terminal step</span>
            s += X[i]
        <span style="color: #8b0000;">else:</span>
            <span style="color: #ff0000; font-weight: bold;"># we did not get a number, so we recurse</span>
            s += recursive_<span style="color: #8b0000;">sum</span>(X[i])
    <span style="color: #8b0000;">return</span> s

<span style="color: #8b0000;">print</span> recursive_<span style="color: #8b0000;">sum</span>(v)
<span style="color: #8b0000;">print</span> recursive_<span style="color: #8b0000;">sum</span>([1,2,3,4,5,6,7,8,9]) <span style="color: #ff0000; font-weight: bold;"># test on non-nested list</span>
</pre>
</div>

<pre class="example">
45
45
</pre>

<p>
In <a href="http://matlab.cheme.cmu.edu/2012/05/28/lather-rinse-and-repeat/" >Post 1970</a> we examined recursive functions that could be replaced by loops. Here we examine a function that can only work with recursion because the nature of the nested data structure is arbitrary. There are arbitary branches and depth in the data structure. Recursion is nice because you do not have to define that structure in advance.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/02/Some-of-this,-sum-of-that.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
