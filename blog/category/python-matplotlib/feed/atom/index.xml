<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-06-30T15:27:11Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Annotating matplotlib figures]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/11/01/Annotating-matplotlib-figures" />
    <id>http://jkitchin.github.io/blog/2014/11/01/Annotating-matplotlib-figures</id>
    <updated>2014-11-01T10:35:15Z</updated>
    <published>2014-11-01T10:35:15Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python matplotlib" />
    <summary type="html"><![CDATA[Annotating matplotlib figures]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/11/01/Annotating-matplotlib-figures"><![CDATA[




<p>
There is a nice picture of an ethanolamine molecule <a href="http://en.wikipedia.org/wiki/Ethanolamine">here</a> . The first thing we consider is embedding this figure in a matplotlib figure. It is a little tricky because we have to create a special axes to put the image in. The axes are created in a fractional coordinate systems that is defined by [left, bottom, width, height]. Placing the figure where you want it is an iterative process that involves changing those values to get the image where you want.
</p>

<p>
So, note that (0, 0) is the bottome left corner of the figure, and (1, 1) is the upper right corner. So, to make an axes for the main figure that takes up 75% of the width and 80% of the height, and starts 20% from the left, 15% from the bottom, we use [0.2, 0.15, 0.75, 0.8]. That covers most of the space, and leaves room for labels.
</p>

<p>
The axes for the image is about the same, but it is a little trickier to figure out the width and height. In this example these arguments appear to just rescale the image.
</p>

<p>
Here is some code that puts the image near the upper left-corner of the plot.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">from</span> scipy.misc <span style="color: #8b0000;">import</span> imread
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">im</span> = imread(<span style="color: #228b22;">'images/Ethanolamine-2D-skeletal-B.png'</span>)

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">fig</span> = plt.figure(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">figsize</span>=(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>))
#                    <span style="color: #ff0000; font-weight: bold;">left bottom width height</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">f_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">15</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">75</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)

# <span style="color: #ff0000; font-weight: bold;">plot some function</span>
f_ax.plot(np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>), <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span> * np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>))
plt.xlabel(<span style="color: #228b22;">'some xlabel'</span>)
plt.ylabel(<span style="color: #228b22;">'Y'</span>)

# <span style="color: #ff0000; font-weight: bold;">axes for the image</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">i_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">22</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">frameon</span>=<span style="color: #8b0000;">False</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">xticks</span>=[], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">yticks</span>=[],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>)

# <span style="color: #ff0000; font-weight: bold;">add the image. zorder&gt;1 makes sure it is on top</span>
i_ax.imshow(im)

# <span style="color: #ff0000; font-weight: bold;">print dir(i_ax)</span>

plt.savefig(<span style="color: #228b22;">'images/fig-in-plot-2.png'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">dpi</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">300</span>)
</pre>
</div>

<div class="figure">
<p><img src="/media/2014-11-01-Annotating-matplotlib-figures/fig-in-plot-2.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A matplotlib figure with an embedded images.</p>
</div>


<p>
There it is.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/01/Annotating-matplotlib-figures.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
</feed>
