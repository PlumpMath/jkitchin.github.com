<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-08-27T13:01:52Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Solving the Blasius equation]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/03/11/Solving-the-Blasius-equation" />
    <id>http://jkitchin.github.io/blog/2013/03/11/Solving-the-Blasius-equation</id>
    <updated>2013-03-11T16:34:47Z</updated>
    <published>2013-03-11T10:44:56Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bvp" />
    <summary type="html"><![CDATA[Solving the Blasius equation]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/03/11/Solving-the-Blasius-equation"><![CDATA[


<p>
In fluid mechanics the Blasius equation comes up (<a href="http://en.wikipedia.org/wiki/Blasius_boundary_layer" >http://en.wikipedia.org/wiki/Blasius_boundary_layer</a>) to describe the boundary layer that forms near a flat plate with fluid moving by it. The nonlinear differential equation is:
</p>

\begin{eqnarray}
f''' + \frac{1}{2} f f'' &=& 0 \\
f(0) &=& 0 \\
f'(0) &=& 0 \\
f'(\infty) &=& 1
\end{eqnarray}

<p>
This is a nonlinear, boundary value problem. The point of solving this equation is to get the value of \(f''(0)\) to evaluate the shear stress at the plate. 
</p>

<p>
We have to convert this to a system of first-order differential equations. Let \(f_1 = f\), \(f_2 = f_1'\) and \(f_3 = f_2'\). This leads to:
</p>

\begin{eqnarray}
f_1' = f_2 \\
f_2' = f_3 \\
f_3' = -\frac{1}{2} f_1 f_3 \\
f_1(0) = 0 \\
f_2(0) = 0 \\
f_2(\infty) = 1
\end{eqnarray}

<p>
It is not possible to specify a boundary condition at \(\infty\) numerically, so we will have to use a large number, and verify it is &ldquo;large enough&rdquo;. From the solution, we evaluate the derivatives at \(\eta=0\), and we have \(f''(0) = f_3(0)\).
</p>

<p>
We have to provide initial guesses for f_1, f_2 and f_3. This is the hardest part about this problem. We know that f_1 starts at zero, and is flat there (f'(0)=0), but at large eta, it has a constant slope of one. We will guess a simple line of slope = 1 for f_1. That is correct at large eta, and is zero at &eta;=0. If the slope of the function is constant at large \(\eta\), then the values of higher derivatives must tend to zero. We choose an exponential decay as a guess. 
</p>

<p>
Finally, we let a solver iteratively find a solution for us, and find the answer we want. The solver is in the pycse module.
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> bvp

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">odefun</span>(F, x):
    f1, f2, f3 = F
    <span style="color: #8b0000;">return</span> [f2,  
            f3,             
            -0.5 * f1 * f3] 

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">bcfun</span>(Fa, Fb):
    <span style="color: #8b0000;">return</span> [Fa[0],        <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">f1(0) =  0</span>
            Fa[1],        <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">f2(0) = 0</span>
            1.0 - Fb[1]]  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">f2(inf) = 1</span>

eta = np.linspace(0, 6, 100)
f1init = eta
f2init = np.exp(-eta)
f3init = np.exp(-eta)

Finit = np.vstack([f1init, f2init, f3init])

sol = bvp(odefun, bcfun, eta, Finit)

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">"f''(0) = f_3(0) = {0}"</span>.format(sol[2, 0])

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(eta, sol[0])
plt.xlabel(<span style="color: #228b22;">'$\eta$'</span>)
plt.ylabel(<span style="color: #228b22;">'$f(\eta)$'</span>)
plt.savefig(<span style="color: #228b22;">'images/blasius.png'</span>)
</pre>
</div>

<pre class="example">
f''(0) = f_3(0) = 0.332491109552
</pre>

<p><img src="/img/./images/blasius.png"><p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/03/11/Solving-the-Blasius-equation.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another look at nonlinear BVPs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/03/11/Another-look-at-nonlinear-BVPs" />
    <id>http://jkitchin.github.io/blog/2013/03/11/Another-look-at-nonlinear-BVPs</id>
    <updated>2013-03-11T16:31:34Z</updated>
    <published>2013-03-11T10:44:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bvp" />
    <summary type="html"><![CDATA[Another look at nonlinear BVPs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/03/11/Another-look-at-nonlinear-BVPs"><![CDATA[


<p>
Adapted from <a href="http://www.mathworks.com/help/matlab/ref/bvp4c.html" >http://www.mathworks.com/help/matlab/ref/bvp4c.html</a>

</p>

<p>
Boundary value problems may have more than one solution. Let us consider the BVP:
</p>

\begin{eqnarray}
y'' + |y| &=& 0 \\
y(0) &=& 0 \\
y(4) &=& -2
\end{eqnarray}

<p>
We will see this equation has two answers, depending on your initial guess. We convert this to the following set of coupled equations:
</p>

\begin{eqnarray}
y_1' &=& y_2 \\
y_2' &=& -|y_1| \\
y_1(0)&=& 0\\
y_1(4) &=& -2
\end{eqnarray}

<p>
This BVP is nonlinear because of the absolute value. We will have to guess solutions to get started. We will guess two different solutions, both of which will be constant values.  We will use pycse.bvp to solve the equation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> bvp
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">odefun</span>(Y, x):
    y1, y2 = Y
    dy1dx = y2
    dy2dx = -np.abs(y1)
    <span style="color: #8b0000;">return</span> [dy1dx, dy2dx]

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">bcfun</span>(Ya, Yb):
    y1a, y2a = Ya
    y1b, y2b = Yb

    <span style="color: #8b0000;">return</span> [y1a, -2 - y1b]

x = np.linspace(0, 4, 100)

y1 = 1.0 * np.ones(x.shape)
y2 = 0.0 * np.ones(x.shape)

Yinit = np.vstack([y1, y2])

sol = bvp(odefun, bcfun, x, Yinit)

plt.plot(x, sol[0])

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">another initial guess</span>
y1 = -1.0 * np.ones(x.shape)
y2 = 0.0 * np.ones(x.shape)

Yinit = np.vstack([y1, y2])

sol = bvp(odefun, bcfun, x, Yinit)

plt.plot(x, sol[0])
plt.legend([<span style="color: #228b22;">'guess 1'</span>, <span style="color: #228b22;">'guess 2'</span>])
plt.savefig(<span style="color: #228b22;">'images/bvp-another-nonlin-1.png'</span>)
plt.show()
</pre>
</div>


<p><img src="/img/./images/bvp-another-nonlin-1.png"><p>

<p>
This example shows that a nonlinear BVP may have different solutions, and which one you get depends on the guess you make for the solution. This is analogous to solving nonlinear algebraic equations (which is what is done in solving this problem!).
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/03/11/Another-look-at-nonlinear-BVPs.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Boundary value problem in heat conduction]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/03/06/Boundary-value-problem-in-heat-conduction" />
    <id>http://jkitchin.github.io/blog/2013/03/06/Boundary-value-problem-in-heat-conduction</id>
    <updated>2013-03-06T19:37:37Z</updated>
    <published>2013-03-06T19:35:39Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bvp" />
    <summary type="html"><![CDATA[Boundary value problem in heat conduction]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/03/06/Boundary-value-problem-in-heat-conduction"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/08/11/boundary-value-problem-in-heat-conduction/" >Matlab post</a>
</p>

<p>
For steady state heat conduction the temperature distribution in one-dimension is governed by the Laplace equation:
</p>

<p>
$$ \nabla^2 T = 0$$
</p>

<p>
with boundary conditions that at \(T(x=a) = T_A\) and \(T(x=L) = T_B\).
</p>

<p>
The analytical solution is not difficult here: \(T = T_A-\frac{T_A-T_B}{L}x\), but we will solve this by finite differences.
</p>

<p>
For this problem, lets consider a slab that is defined by x=0 to x=L, with \(T(x=0) = 100\), and \(T(x=L) = 200\). We want to find the function T(x) inside the slab.
</p>

<p>
We approximate the second derivative by finite differences as
</p>

<p>
\( f''(x) \approx \frac{f(x-h) - 2 f(x) + f(x+h)}{h^2} \)
</p>

<p>
Since the second derivative in this case is equal to zero, we have at each discretized node \(0 = T_{i-1} - 2 T_i + T_{i+1}\). We know the values of \(T_{x=0} = \alpha\) and \(T_{x=L} = \beta\).
</p>

<p>
\[A = \left [ \begin{array}{ccccc} %
 -2         & 1 & 0                    & 0 & 0 \\
1           & -2& 1 & 0 & 0 \\
0                    & \ddots               & \ddots               & \ddots & 0 \\
0                    & 0                    & 1 & -2 & 1 \\
0                    & 0                    & 0  & 1  & -2  \end{array} \right ] \]
</p>

<p>
\[ x = \left [ \begin{array}{c} T_1 \\ \vdots \\ T_N \end{array} \right ] \]
</p>

<p>
\[ b = \left [ \begin{array}{c} -T(x=0) \\
0 \\
\vdots \\
0 \\
-T(x=L) \end{array} \right] \]
</p>

<p>
These are linear equations in the unknowns \(x\) that we can easily solve. Here, we evaluate the solution.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">we use the notation T(x1) = alpha and T(x2) = beta</span>
x1 = 0; alpha = 100
x2 = 5; beta = 200

npoints = 100

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">preallocate and shape the b vector and A-matrix</span>
b = np.zeros((npoints, 1));
b[0] = -alpha
b[-1] = -beta

A = np.zeros((npoints, npoints));

<span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">now we populate the A-matrix and b vector elements</span>
<span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(npoints ):
    <span style="color: #8b0000;">for</span> j <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(npoints):
        <span style="color: #8b0000;">if</span> j == i: <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the diagonal</span>
            A[i,j] = -2
        <span style="color: #8b0000;">elif</span> j == i - 1: <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">left of the diagonal</span>
            A[i,j] = 1
        <span style="color: #8b0000;">elif</span> j == i + 1: <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">right of the diagonal</span>
            A[i,j] = 1
 
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">solve the equations A*y = b for Y</span>
Y = np.linalg.solve(A,b)

x = np.linspace(x1, x2, npoints + 2)
y = np.hstack([alpha, Y[:,0], beta])

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

plt.plot(x, y)

plt.plot(x, alpha + (beta - alpha)/(x2 - x1) * x, <span style="color: #228b22;">'r--'</span>)

plt.xlabel(<span style="color: #228b22;">'X'</span>)
plt.ylabel(<span style="color: #228b22;">'T(X)'</span>)
plt.legend((<span style="color: #228b22;">'finite difference'</span>, <span style="color: #228b22;">'analytical soln'</span>), loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/bvp-heat-conduction-1d.png'</span>)
</pre>
</div>

<p><img src="/img/./images/bvp-heat-conduction-1d.png"><p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/03/06/Boundary-value-problem-in-heat-conduction.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Plane Poiseuille flow - BVP solve by shooting method]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/15/Plane-Poiseuille-flow-BVP-solve-by-shooting-method" />
    <id>http://jkitchin.github.io/blog/2013/02/15/Plane-Poiseuille-flow-BVP-solve-by-shooting-method</id>
    <updated>2013-03-08T10:08:42Z</updated>
    <published>2013-02-15T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bvp" />
    <summary type="html"><![CDATA[Plane Poiseuille flow - BVP solve by shooting method]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/15/Plane-Poiseuille-flow-BVP-solve-by-shooting-method"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/09/08/plane-poiseuille-flow-bvp-solve-by-shooting-method/" >Matlab post</a>
</p>

<p>
One approach to solving BVPs is to use the shooting method. The reason we cannot use an initial value solver for a BVP is that there is not enough information at the initial value to start. In the shooting method, we take the function value at the initial point, and guess what the function derivatives are so that we can do an integration. If our guess was good, then the solution will go through the known second boundary point. If not, we guess again, until we get the answer we need. In this example we repeat the pressure driven flow example, but illustrate the shooting method.
</p>

<p>
In the pressure driven flow of a fluid with viscosity \(\mu\) between two stationary plates separated by distance \(d\) and driven by a pressure drop \(\Delta P/\Delta x\), the governing equations on the velocity \(u\) of the fluid are (assuming flow in the x-direction with the velocity varying only in the y-direction):
</p>

<p>
$$\frac{\Delta P}{\Delta x} = \mu \frac{d^2u}{dy^2}$$
</p>

<p>
with boundary conditions \(u(y=0) = 0\) and \(u(y=d) = 0\), i.e. the no-slip condition at the edges of the plate.
</p>

<p>
we convert this second order BVP to a system of ODEs by letting \(u_1 = u\), \(u_2 = u_1'\) and then \(u_2' = u_1''\). This leads to:
</p>

<p>
\(\frac{d u_1}{dy} = u_2\)
</p>

<p>
\(\frac{d u_2}{dy} = \frac{1}{\mu}\frac{\Delta P}{\Delta x}\)
</p>

<p>
with boundary conditions \(u_1(y=0) = 0\) and \(u_1(y=d) = 0\).
</p>

<p>
for this problem we let the plate separation be d=0.1, the viscosity \(\mu = 1\), and \(\frac{\Delta P}{\Delta x} = -100\).
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> First guess</h2>
<div class="outline-text-2" id="text-1">
<p>
We need u_1(0) and u_2(0), but we only have u_1(0). We need to guess a value for u_2(0) and see if the solution goes through the u_2(d)=0 boundary value.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

d = 0.1 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plate thickness</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">odefun</span>(U, y):
    u1, u2 = U
    mu = 1
    Pdrop = -100
    du1dy = u2
    du2dy = 1.0 / mu * Pdrop
    <span style="color: #8b0000;">return</span> [du1dy, du2dy]

u1_0 = 0 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">known</span>
u2_0 = 1 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">guessed</span>

dspan = np.linspace(0, d)

U = odeint(odefun, [u1_0, u2_0], dspan)

plt.plot(dspan, U[:,0])
plt.plot([d],[0], <span style="color: #228b22;">'ro'</span>)
plt.xlabel(<span style="color: #228b22;">'d'</span>)
plt.ylabel(<span style="color: #228b22;">'$u_1$'</span>)
plt.savefig(<span style="color: #228b22;">'images/bvp-shooting-1.png'</span>)
</pre>
</div>

<p><img src="/img/./images/bvp-shooting-1.png"><p>

<p>
Here we have undershot the boundary condition. Let us try a larger guess.
</p>
</div>
</div>

<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Second guess</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

d = 0.1 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plate thickness</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">odefun</span>(U, y):
    u1, u2 = U
    mu = 1
    Pdrop = -100
    du1dy = u2
    du2dy = 1.0 / mu * Pdrop
    <span style="color: #8b0000;">return</span> [du1dy, du2dy]

u1_0 = 0 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">known</span>
u2_0 = 10 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">guessed</span>

dspan = np.linspace(0, d)

U = odeint(odefun, [u1_0, u2_0], dspan)

plt.plot(dspan, U[:,0])
plt.plot([d],[0], <span style="color: #228b22;">'ro'</span>)
plt.xlabel(<span style="color: #228b22;">'d'</span>)
plt.ylabel(<span style="color: #228b22;">'$u_1$'</span>)
plt.savefig(<span style="color: #228b22;">'images/bvp-shooting-2.png'</span>)
</pre>
</div>

<p><img src="/img/./images/bvp-shooting-2.png"><p>

<p>
Now we have clearly overshot. Let us now make a function that will iterate for us to find the right value.
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Let fsolve do the work</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

d = 0.1 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plate thickness</span>
Pdrop = -100
mu = 1

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">odefun</span>(U, y):
    u1, u2 = U
    du1dy = u2
    du2dy = 1.0 / mu * Pdrop
    <span style="color: #8b0000;">return</span> [du1dy, du2dy]

u1_0 = 0 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">known</span>
dspan = np.linspace(0, d)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(u2_0):
    dspan = np.linspace(0, d)
    U = odeint(odefun, [u1_0, u2_0], dspan)
    u1 = U[:,0]
    <span style="color: #8b0000;">return</span> u1[-1]

u2_0, = fsolve(objective, 1.0)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">now solve with optimal u2_0</span>
U = odeint(odefun, [u1_0, u2_0], dspan)

plt.plot(dspan, U[:,0], label=<span style="color: #228b22;">'Numerical solution'</span>)
plt.plot([d],[0], <span style="color: #228b22;">'ro'</span>)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plot an analytical solution</span>
u = -(Pdrop) * d**2 / 2 / mu * (dspan / d - (dspan / d)**2)
plt.plot(dspan, u, <span style="color: #228b22;">'r--'</span>, label=<span style="color: #228b22;">'Analytical solution'</span>)


plt.xlabel(<span style="color: #228b22;">'d'</span>)
plt.ylabel(<span style="color: #228b22;">'$u_1$'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/bvp-shooting-3.png'</span>)
</pre>
</div>

<p><img src="/img/./images/bvp-shooting-3.png"><p>

<p>
You can see the agreement is excellent!
</p>

<p>
This also seems like a useful bit of code to not have to reinvent regularly, so it has been added to pycse as BVP_sh. Here is an example usage.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> BVP_sh
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

d = 0.1 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plate thickness</span>
Pdrop = -100
mu = 1

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">odefun</span>(U, y):
    u1, u2 = U
    du1dy = u2
    du2dy = 1.0 / mu * Pdrop
    <span style="color: #8b0000;">return</span> [du1dy, du2dy]

x1 = 0.0; alpha = 0.0
x2 = 0.1; beta = 0.0
init = 2.0 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">initial guess of slope at x=0</span>

X,Y = BVP_sh(odefun, x1, x2, alpha, beta, init)
plt.plot(X, Y[:,0])
plt.ylim([0, 0.14])

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plot an analytical solution</span>
u = -(Pdrop) * d**2 / 2 / mu * (X / d - (X / d)**2)
plt.plot(X, u, <span style="color: #228b22;">'r--'</span>, label=<span style="color: #228b22;">'Analytical solution'</span>)
plt.savefig(<span style="color: #228b22;">'images/bvp-shooting-4.png'</span>)
plt.show()
</pre>
</div>

<p><img src="/img/./images/bvp-shooting-4.png"><p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/15/Plane-Poiseuille-flow---BVP-solve-by-shooting-method.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Plane poiseuelle flow solved by finite difference]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/14/Plane-poiseuelle-flow-solved-by-finite-difference" />
    <id>http://jkitchin.github.io/blog/2013/02/14/Plane-poiseuelle-flow-solved-by-finite-difference</id>
    <updated>2013-03-06T18:32:14Z</updated>
    <published>2013-02-14T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bvp" />
    <summary type="html"><![CDATA[Plane poiseuelle flow solved by finite difference]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/14/Plane-poiseuelle-flow-solved-by-finite-difference"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/09/30/plane-poiseuelle-flow-solved-by-finite-difference/" >Matlab post</a>
</p>

<p>
Adapted from <a href="http://www.physics.arizona.edu/~restrepo/475B/Notes/sourcehtml/node24.html" >http://www.physics.arizona.edu/~restrepo/475B/Notes/sourcehtml/node24.html</a>
</p>

<p>
We want to solve a linear boundary value problem of the form: y'' = p(x)y' + q(x)y + r(x) with boundary conditions y(x1) = alpha and y(x2) = beta.
</p>

<p>
For this example, we solve the plane poiseuille flow problem using a finite difference approach. An advantage of the approach we use here is we do not have to rewrite the second order ODE as a set of coupled first order ODEs, nor do we have to provide guesses for the solution. We do, however, have to discretize the derivatives and formulate a linear algebra problem.
</p>

<p>
we want to solve u'' = 1/mu*DPDX with u(0)=0 and u(0.1)=0. for this problem we let the plate separation be d=0.1, the viscosity \(\mu = 1\), and \(\frac{\Delta P}{\Delta x} = -100\).
</p>

<p>
The idea behind the finite difference method is to approximate the derivatives by finite differences on a grid. See here for details. By discretizing the ODE, we arrive at a set of linear algebra equations of the form \(A y = b\), where \(A\) and \(b\) are defined as follows.
</p>

<p>
\[A = \left [ \begin{array}{ccccc} %
 2 + h^2 q_1         & -1 + \frac{h}{2} p_1 & 0                    & 0 & 0 \\
-1 - \frac{h}{2} p_2 & 2 + h^2 q_2          & -1 + \frac{h}{2} p_2 & 0 & 0 \\
0                    & \ddots               & \ddots               & \ddots & 0 \\
0                    & 0                    & -1 - \frac{h}{2} p_{N-1} & 2 + h^2 q_{N-1} & -1 + \frac{h}{2} p_{N-1} \\
0                    & 0                    & 0  & -1 - \frac{h}{2} p_N & 2 + h^2 q_N \end{array} \right ] \]
</p>

<p>
\[ y = \left [ \begin{array}{c} y_i \\ \vdots \\ y_N \end{array} \right ] \]
</p>

<p>
\[ b = \left [ \begin{array}{c} -h^2 r_1 + ( 1 + \frac{h}{2} p_1) \alpha \\
-h^2 r_2 \\
\vdots \\
-h^2 r_{N-1} \\
-h^2 r_N + (1 - \frac{h}{2} p_N) \beta \end{array} \right] \]
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">we use the notation for y'' = p(x)y' + q(x)y + r(x)</span>
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">p</span>(x): <span style="color: #8b0000;">return</span> 0
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">q</span>(x): <span style="color: #8b0000;">return</span> 0
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">r</span>(x): <span style="color: #8b0000;">return</span> -100

<span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">we use the notation y(x1) = alpha and y(x2) = beta</span>

x1 = 0; alpha = 0.0
x2 = 0.1; beta = 0.0

npoints = 100

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">compute interval width</span>
h = (x2-x1)/npoints;

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">preallocate and shape the b vector and A-matrix</span>
b = np.zeros((npoints - 1, 1));
A = np.zeros((npoints - 1, npoints - 1));
X = np.zeros((npoints - 1, 1));

<span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">now we populate the A-matrix and b vector elements</span>
<span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(npoints - 1):
    X[i,0] = x1 + (i + 1) * h

    <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">get the value of the BVP Odes at this x</span>
    pi = p(X[i])
    qi = q(X[i])
    ri = r(X[i])

    <span style="color: #8b0000;">if</span> i == 0:
        <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">first boundary condition</span>
        b[i] = -h**2 * ri + (1 + h / 2 * pi)*alpha; 
    <span style="color: #8b0000;">elif</span> i == npoints - 1:
        <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">second boundary condition</span>
        b[i] = -h**2 * ri + (1 - h / 2 * pi)*beta; 
    <span style="color: #8b0000;">else:</span>
        b[i] = -h**2 * ri <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">intermediate points</span>
    
    <span style="color: #8b0000;">for</span> j <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(npoints - 1):
        <span style="color: #8b0000;">if</span> j == i: <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the diagonal</span>
            A[i,j] = 2 + h**2 * qi
        <span style="color: #8b0000;">elif</span> j == i - 1: <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">left of the diagonal</span>
            A[i,j] = -1 - h / 2 * pi
        <span style="color: #8b0000;">elif</span> j == i + 1: <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">right of the diagonal</span>
            A[i,j] = -1 + h / 2 * pi
        <span style="color: #8b0000;">else:</span>
            A[i,j] = 0 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">off the tri-diagonal</span>
 
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">solve the equations A*y = b for Y</span>
Y = np.linalg.solve(A,b)

x = np.hstack([x1, X[:,0], x2])
y = np.hstack([alpha, Y[:,0], beta])

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

plt.plot(x, y)

mu = 1
d = 0.1
x = np.linspace(0,0.1);
Pdrop = -100 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">this is DeltaP/Deltax</span>
u = -(Pdrop) * d**2 / 2.0 / mu * (x / d - (x / d)**2)
plt.plot(x,u,<span style="color: #228b22;">'r--'</span>)

plt.xlabel(<span style="color: #228b22;">'distance between plates'</span>)
plt.ylabel(<span style="color: #228b22;">'fluid velocity'</span>)
plt.legend((<span style="color: #228b22;">'finite difference'</span>, <span style="color: #228b22;">'analytical soln'</span>))
plt.savefig(<span style="color: #228b22;">'images/pp-bvp-fd.png'</span>)
plt.show()
</pre>
</div>

<p><img src="/img/./images/pp-bvp-fd.png"><p>

<p>
You can see excellent agreement here between the numerical and analytical solution.</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/14/Plane-poiseuelle-flow-solved-by-finite-difference.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Numerically calculating an effectiveness factor for a porous catalyst bead]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/13/Numerically-calculating-an-effectiveness-factor-for-a-porous-catalyst-bead" />
    <id>http://jkitchin.github.io/blog/2013/02/13/Numerically-calculating-an-effectiveness-factor-for-a-porous-catalyst-bead</id>
    <updated>2015-01-05T09:59:14Z</updated>
    <published>2013-02-13T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bvp" />
    <summary type="html"><![CDATA[Numerically calculating an effectiveness factor for a porous catalyst bead]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/13/Numerically-calculating-an-effectiveness-factor-for-a-porous-catalyst-bead"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/11/18/numerically-calculating-an-effectiveness-factor-for-a-porous-catalyst-bead/">Matlab post</a> 
</p>

<p>
If reaction rates are fast compared to diffusion in a porous catalyst pellet, then the observed kinetics will appear to be slower than they really are because not all of the catalyst surface area will be effectively used. For example, the reactants may all be consumed in the near surface area of a catalyst bead, and the inside of the bead will be unutilized because no reactants can get in due to the high reaction rates.
</p>

<p>
References: Ch 12. Elements of Chemical Reaction Engineering, Fogler, 4th edition.
</p>

<p>
A mole balance on the particle volume in spherical coordinates with a first order reaction leads to: <img src="ltxpng/pycse_583fc34e02e0dfd7da742eac8e08f28fed0361fb.png" alt="$\frac{d^2Ca}{dr^2} + \frac{2}{r}\frac{dCa}{dr}-\frac{k}{D_e}C_A=0$" /> with boundary conditions <img src="ltxpng/pycse_4866f4778622517d6c40909af5ddee8dd88e4e4b.png" alt="$C_A(R) = C_{As}$" /> and <img src="ltxpng/pycse_c6b9758ef2d8da94f97a02ad3267e4546ed89545.png" alt="$\frac{dCa}{dr}=0$" /> at <img src="ltxpng/pycse_bf76d476f1b6de028534649c02962bb23035ae13.png" alt="$r=0$" />. We convert this equation to a system of first order ODEs by letting <img src="ltxpng/pycse_cfb3bc1cb2bda6ef332c07d9817aeac44dea4a8b.png" alt="$W_A=\frac{dCa}{dr}$" />. Then, our two equations become:
</p>

<p>
<img src="ltxpng/pycse_2a2b847add5fa85ab01423d270fe3702f9eafe38.png" alt="\(\frac{dCa}{dr} = W_A\)" />
</p>

<p>
and
</p>

<p>
<img src="ltxpng/pycse_d57c97774a37a7ef56fbf47b93b687c9f5d6725e.png" alt="\(\frac{dW_A}{dr} = -\frac{2}{r} W_A + \frac{k}{D_E} C_A\)" />
</p>

<p>
We have a condition of no flux (<img src="ltxpng/pycse_f8e519b8e68d9b04fdd5ceee6a4c5b1ce76f1a7c.png" alt="$W_A=0$" />) at r=0 and Ca(R) = CAs, which makes this a boundary value problem. We use the shooting method here, and guess what Ca(0) is and iterate the guess to get Ca(R) = CAs.
</p>

<p>
The value of the second differential equation at r=0 is tricky because at this place we have a 0/0 term. We use L'Hopital's rule to evaluate it. The derivative of the top is <img src="ltxpng/pycse_092ea3e2d18ee85c9af99247db455c8cccce06d5.png" alt="$\frac{dW_A}{dr}$" /> and the derivative of the bottom is 1. So, we have 
<img src="ltxpng/pycse_5460cdb1bbc54e713c3a2f9bb18a2126a0575198.png" alt="\(\frac{dW_A}{dr} = -2\frac{dW_A}{dr} + \frac{k}{D_E} C_A\)" />
</p>

<p>
Which leads to:
</p>

<p>
<img src="ltxpng/pycse_195ccf4fd71c1883fbc31726cb636c64719b6ddf.png" alt="\(3 \frac{dW_A}{dr} =  \frac{k}{D_E} C_A\)" />
</p>

<p>
or <img src="ltxpng/pycse_2d1800a78e5c0ef322ba22f10481b52c3b6bc358.png" alt="\(\frac{dW_A}{dr} =  \frac{3k}{D_E} C_A\)" /> at <img src="ltxpng/pycse_bf76d476f1b6de028534649c02962bb23035ae13.png" alt="$r=0$" />.
</p>

<p>
Finally, we implement the equations in Python and solve.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">from</span> scipy.integrate <span style="color: #0000FF;">import</span> odeint
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">De</span> = <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>    <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># diffusivity cm^2/s</span>
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">R</span> = <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">5</span>    <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># particle radius, cm</span>
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">k</span> = <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">6</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">4</span>    <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># rate constant (1/s)</span>
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">CAs</span> = <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">2</span>   <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># concentration of A at outer radius of particle (mol/L)</span>


<span style="color: #0000FF;">def</span> <span style="color: #006699;">ode</span>(Y, r):
    <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">Wa</span> = Y[<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>]  <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># molar rate of delivery of A to surface of particle</span>
    <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">Ca</span> = Y[<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>]  <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># concentration of A in the particle at r</span>
    <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># this solves the singularity at r = 0</span>
    <span style="color: #0000FF;">if</span> <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">r</span> == <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>:
        <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">dWadr</span> = k / <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">3</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span> * De * Ca
    <span style="color: #0000FF;">else</span>:
        <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">dWadr</span> = -<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">2</span> * Wa / r + k / De * Ca
    <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">dCadr</span> = Wa
    <span style="color: #0000FF;">return</span> [dWadr, dCadr]

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-weight: bold; font-style: italic;">Initial conditions</span>
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">Ca0</span> = <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">029315</span>  <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># Ca(0) (mol/L) guessed to satisfy Ca(R) = CAs</span>
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">Wa0</span> = <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>         <span style="color: #8D8D84; font-weight: bold; font-style: italic;"># no flux at r=0 (mol/m^2/s)</span>

<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">rspan</span> = np.linspace(<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span>, R, <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">500</span>)

<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">Y</span> = odeint(ode, [Wa0, Ca0], rspan)

<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">Ca</span> = Y[:, <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>]

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-weight: bold; font-style: italic;">here we check that Ca(R) = Cas</span>
<span style="color: #0000FF;">print</span> <span style="color: #036A07;">'At r={0} Ca={1}'</span>.format(rspan[-<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>], Ca[-<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>])

plt.plot(rspan, Ca)
plt.xlabel(<span style="color: #036A07;">'Particle radius'</span>)
plt.ylabel(<span style="color: #036A07;">'$C_A$'</span>)
plt.savefig(<span style="color: #036A07;">'images/effectiveness-factor.png'</span>)

<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">r</span> = rspan
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">eta_numerical</span> = (np.trapz(k * Ca * <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">4</span> * np.pi * (r**<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">2</span>), r)
                 / np.trapz(k * CAs * <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">4</span> * np.pi * (r**<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">2</span>), r))

<span style="color: #0000FF;">print</span>(eta_numerical)

<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">phi</span> = R * np.sqrt(k / De)
<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">eta_analytical</span> = (<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">3</span> / phi**<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">2</span>) * (phi * (<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>.<span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">0</span> / np.tanh(phi)) - <span style="color: #333333; background-color: #FFFFFF; font-weight: bold;">1</span>)
<span style="color: #0000FF;">print</span>(eta_analytical)
</pre>
</div>

<pre class="example">
At r=0.5 Ca=0.200001488652
[&lt;matplotlib.lines.Line2D object at 0x114275550&gt;]
&lt;matplotlib.text.Text object at 0x10d5fe890&gt;
&lt;matplotlib.text.Text object at 0x10d5ff890&gt;
0.563011348314

0.563003362801
</pre>


<div class="figure">
<p><img src="/media/2013-02-13-Numerically-calculating-an-effectiveness-factor-for-a-porous-catalyst-bead/effectiveness-factor.png"> 
</p>
</div>

<p>
You can see the concentration of A inside the particle is significantly lower than outside the particle. That is because it is reacting away faster than it can diffuse into the particle. Hence, the overall reaction rate in the particle is lower than it would be without the diffusion limit.
</p>

<p>
The effectiveness factor is the ratio of the actual reaction rate in the particle with diffusion limitation to the ideal rate in the particle if there was no concentration gradient:
</p>

<p>
<img src="ltxpng/pycse_e4d91f15d6b5776f2048ac79e7be69f850f309e0.png" alt="$$\eta = \frac{\int_0^R k'' a C_A(r) 4 \pi r^2 dr}{\int_0^R k'' a C_{As} 4 \pi r^2 dr}$$" />
</p>

<p>
We will evaluate this numerically from our solution and compare it to the analytical solution. The results are in good agreement, and you can make the numerical estimate better by increasing the number of points in the solution so that the numerical integration is more accurate.
</p>

<p>
Why go through the numerical solution when an analytical solution exists? The analytical solution here is only good for 1st order kinetics in a sphere. What would you do for a complicated rate law? You might be able to find some limiting conditions where the analytical equation above is relevant, and if you are lucky, they are appropriate for your problem. If not, it is a good thing you can figure this out numerically!
</p>

<p>
Thanks to Radovan Omorjan for helping me figure out the ODE at r=0!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/13/Numerically-calculating-an-effectiveness-factor-for-a-porous-catalyst-bead.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
