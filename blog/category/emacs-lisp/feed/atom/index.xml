<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-06-16T17:08:14Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Collecting entries from files in a directory]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/08/25/Collecting-entries-from-files-in-a-directory" />
    <id>http://jkitchin.github.io/blog/2014/08/25/Collecting-entries-from-files-in-a-directory</id>
    <updated>2014-08-25T21:44:51Z</updated>
    <published>2014-08-25T21:42:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <summary type="html"><![CDATA[Collecting entries from files in a directory]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/08/25/Collecting-entries-from-files-in-a-directory"><![CDATA[



<p>
I am running a class where students will be generating files that contain their answers. I want to quickly get a list of counts of all the answers. For example, six students will create a file called animal.dat in a directory called example/&lt;studentid&gt;, and that file will contain their favorite animal. I made some example files to test this idea out. Here are the contents.
</p>

<div class="org-src-container">

<pre class="src src-sh">cat example/*/animal.dat
</pre>
</div>

<pre class="example">
dog
cat
dog
bird
dog
bird
</pre>

<p>
You can see there are three dogs, two birds and a cat. I want code to do this counting, because in my real application there will be 58 of these files, and lots of times I need to aggregate them. Let us start with a simple example that counts the elements in a list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((animals '(dog cat dog bird dog bird))
      (counts '())
      place)
  (<span style="color: #8b0000;">dolist</span> (animal animals)
    (setq place (assoc animal counts))
    (message <span style="color: #228b22;">"place = %s"</span> place)
    (<span style="color: #8b0000;">if</span> place
        (setf (cdr place) (+ 1 (cdr place)))
      (setq counts (cons `(,animal . 1) counts))))
  counts)
</pre>
</div>

<p>
((bird . 2) (cat . 1) (dog . 3))
</p>

<p>
Let us turn that into a function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">counts</span> (list)
  (<span style="color: #8b0000;">let</span> ((counts '())
        place)
    (<span style="color: #8b0000;">dolist</span> (el list)   
      (setq place (assoc el  counts))
    (message <span style="color: #228b22;">"place = %s"</span> place)
    (<span style="color: #8b0000;">if</span> place
        (setf (cdr place) (+ 1 (cdr place)))
      (setq counts (cons `(,el . 1) counts))))
    counts))

(counts '(dog cat dog bird dog bird))
</pre>
</div>

<p>
((bird . 2) (cat . 1) (dog . 3))
</p>

<p>
Nice. Now we need a simple way to get that list. We need to glob the files to find them, then open them and read the value. Here is a way to get the files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(f-entries <span style="color: #228b22;">"example"</span>
           (<span style="color: #8b0000;">lambda</span> (f)
             (string= (file-name-nondirectory f) <span style="color: #228b22;">"animal.dat"</span>))
           t)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">/Users/jkitchin/blogofile-jkitchin.github.com/<sub>blog</sub>/collect-entries/example/s1/animal.dat</td>
<td class="left">/Users/jkitchin/blogofile-jkitchin.github.com/<sub>blog</sub>/collect-entries/example/s2/animal.dat</td>
<td class="left">/Users/jkitchin/blogofile-jkitchin.github.com/<sub>blog</sub>/collect-entries/example/s3/animal.dat</td>
<td class="left">/Users/jkitchin/blogofile-jkitchin.github.com/<sub>blog</sub>/collect-entries/example/s4/animal.dat</td>
<td class="left">/Users/jkitchin/blogofile-jkitchin.github.com/<sub>blog</sub>/collect-entries/example/s5/animal.dat</td>
<td class="left">/Users/jkitchin/blogofile-jkitchin.github.com/<sub>blog</sub>/collect-entries/example/s6/animal.dat</td>
</tr>
</tbody>
</table>

<p>
Now we just need to run a mapcar over this list of files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(mapcar
 (<span style="color: #8b0000;">lambda</span> (f)
   (<span style="color: #8b0000;">with-temp-buffer</span>
     (insert-file-contents f)
     (s-trim (buffer-string))))
 (f-entries <span style="color: #228b22;">"example"</span>
            (<span style="color: #8b0000;">lambda</span> (f)
              (string= (file-name-nondirectory f) <span style="color: #228b22;">"animal.dat"</span>))
            t))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">dog</td>
<td class="left">cat</td>
<td class="left">dog</td>
<td class="left">bird</td>
<td class="left">dog</td>
<td class="left">bird</td>
</tr>
</tbody>
</table>


<p>
Finally, putting this together, we have some code that maps over the files, and counts the entries.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(counts
 (mapcar
  (<span style="color: #8b0000;">lambda</span> (f)
    (<span style="color: #8b0000;">with-temp-buffer</span>
      (insert-file-contents f)
      (s-trim (buffer-string))))
  (f-entries <span style="color: #228b22;">"example"</span>
             (<span style="color: #8b0000;">lambda</span> (f)
               (string= (file-name-nondirectory f) <span style="color: #228b22;">"animal.dat"</span>))
             t)))
</pre>
</div>

<p>
((bird . 2) (cat . 1) (dog . 3))
</p>

<p>
This will be helpful in dealing with 58 entries during my class!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/25/Collecting-entries-from-files-in-a-directory.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Autogenerating functions in emacs-lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/05/12/Autogenerating-functions-in-emacs-lisp" />
    <id>http://jkitchin.github.io/blog/2014/05/12/Autogenerating-functions-in-emacs-lisp</id>
    <updated>2014-05-12T18:05:54Z</updated>
    <published>2014-05-12T18:05:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Autogenerating functions in emacs-lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/05/12/Autogenerating-functions-in-emacs-lisp"><![CDATA[



<p>
I have a need to generate a lot of similar functions, and I do not want to cut and paste the code. I want to generate the functions with code. This seems to be what macros are for in emacs lisp. 
</p>

<p>
As a prototype example, we will make functions that raise a number to a power. We want functions like power-3 and power-4 that raise numbers to the third and fourth powers. We will define functions like this for the numbers 0-9.
</p>

<p>
Here we define the macro. i do not want to get into the nitty gritty details of macro definitions here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defmacro make-power-n (n)
 `(defun ,(intern (format "power-%s" n)) (arg) (expt arg ,n)))

(make-power-n 4)

(power-4 4)
</pre>
</div>

<pre class="example">
256
</pre>

<p>
Now we use the macro and mapcar on it onto a list of numbers. We have to eval the macro in the mapcar lambda function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defmacro make-power-n (n)
 `(defun ,(intern (format "power-%s" n)) (arg) (expt arg ,n)))

(mapcar (lambda (x) (eval `(make-power-n ,x))) '(0 1 2 3 4 5 6 7 8 9))
 
;; example of a few functions
(list (power-0 3) (power-1 3) (power-2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">3</td>
<td class="right">9</td>
</tr>
</tbody>
</table>

<p>
It works! We created 10 functions in a little bit of code. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/05/12/Autogenerating-functions-in-emacs-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Language specific default headers for code blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode</id>
    <updated>2014-01-26T12:06:12Z</updated>
    <published>2014-01-26T12:06:12Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Language specific default headers for code blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode"><![CDATA[


<p>
I use code blocks in org-mode <i>a lot</i>. I usually code in Python, and
in Python I usually write code that prints output which I want to see. So I almost always
want the code blocks to return the output, and not the value of the
last function. I have set my default header args like this:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">org-babel-default-header-args
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">(:exports . both)</td>
<td class="left">(:results . replace output)</td>
<td class="left">(:session . none)</td>
<td class="left">(:cache . no)</td>
<td class="left">(:noweb . no)</td>
<td class="left">(:hlines . no)</td>
<td class="left">(:tangle . no)</td>
</tr>
</tbody>
</table>

<p>
However, I would prefer that emacs-lisp blocks use value for the
results. I know I can get that by putting  <code>:results value</code>  in the
code block header, but that annoys me. I learned today from
<a href="http://orgmode.org/worg/org-contrib/babel/header-args.html">http://orgmode.org/worg/org-contrib/babel/header-args.html</a> that you
can make language specific default headers!
</p>

<p>
This code in my init file sets emacs-lisp specific default headers:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-default-header-args:emacs-lisp 
      (cons '(<span style="color: #cd0000;">:results</span> . <span style="color: #228b22;">"value"</span>)
            (assq-delete-all <span style="color: #cd0000;">:results</span> org-babel-default-header-args)))
</pre>
</div>

<p>
That way I do not have type <code>:results value</code> at the top of every elisp
block. Of course, if I want the output I could specify <code>:results
output</code> in the block.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">org-babel-default-header-args:emacs-lisp
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">(:results . value)</td>
<td class="left">(:exports . both)</td>
<td class="left">(:session . none)</td>
<td class="left">(:cache . no)</td>
<td class="left">(:noweb . no)</td>
<td class="left">(:hlines . no)</td>
<td class="left">(:tangle . no)</td>
</tr>
</tbody>
</table>

<p>
Problem solved!
</p>

<p>
On a related note, I find I write so many blocks of python and elisp I
added these templates:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">add &lt;p for python expansion</span>
(add-to-list 'org-structure-template-alist
             '(<span style="color: #228b22;">"p"</span> <span style="color: #228b22;">"#+BEGIN_SRC python\n?\n#+END_SRC"</span> <span style="color: #228b22;">"&lt;src lang=\"python\"&gt;\n?\n&lt;/src&gt;"</span>))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">add &lt;el for emacs-lisp expansion</span>
(add-to-list 'org-structure-template-alist
             '(<span style="color: #228b22;">"el"</span> <span style="color: #228b22;">"#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"</span> <span style="color: #228b22;">"&lt;src lang=\"emacs-lisp\"&gt;\n?\n&lt;/src&gt;"</span>))
</pre>
</div>

<p>
I probably could have also coded the :results header into those
too. They add a tidbit of convenience so I do not have to type python
or emacs-lisp after expanding a source block with &lt;s.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another alternative to string templates]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/01/26/Another-alternative-to-string-templates" />
    <id>http://jkitchin.github.io/blog/2014/01/26/Another-alternative-to-string-templates</id>
    <updated>2014-01-26T09:56:45Z</updated>
    <published>2014-01-26T09:56:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <summary type="html"><![CDATA[Another alternative to string templates]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/01/26/Another-alternative-to-string-templates"><![CDATA[


<p>
In the <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/01/20/Alternatives-to-long-complex-format-statements-in-emacs-lisp/">last post</a> I explored a way to expand a string template that was
more readable than the usual format. Today I look at another approach
where I use sexp expansions to accomplish the same thing. The idea is
to embed lisp expressions and replace them by what they evaluate to.
</p>

<p>
In emacs-lisp, if we have a command in a string, we can "read" it, and
then eval it. 
</p>

<p>
Here we get the user-full-name:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(eval (read <span style="color: #228b22;">"user-full-name"</span>))
</pre>
</div>

<pre class="example">
John Kitchin
</pre>

<p>
We can use this on variables too.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq some-variable <span style="color: #228b22;">"test"</span>)
(eval (read <span style="color: #228b22;">"some-variable"</span>))
</pre>
</div>

<pre class="example">
test
</pre>

<p>
So, if we use a syntax to identify what to replace, we can substitute
in the values. Let us try %() as the syntax.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">expand-template</span> (s)
  <span style="color: #228b22;">"expand a template containing %() with the eval of its contents"</span>
  (replace-regexp-in-string <span style="color: #228b22;">"%(</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">)]+</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">)"</span>
                            (<span style="color: #8b0000;">lambda</span> (arg)
                              (format <span style="color: #228b22;">"%s"</span> (eval (read (substring arg 2 -1))))) s))


(<span style="color: #8b0000;">let</span> ((key <span style="color: #228b22;">"kitchin-2014"</span>)
      (author <span style="color: #228b22;">"Kitchin, J. R."</span>)
      (journal <span style="color: #228b22;">"HACS"</span>)
      (year <span style="color: #228b22;">"2014"</span>)
      (volume <span style="color: #228b22;">"1"</span>)
      (pages <span style="color: #228b22;">"1--10"</span>)
      (doi <span style="color: #228b22;">"10.1.1.109/hacs.1.10"</span>)
      (url <span style="color: #228b22;">"http://hacs.org/10.1.1.109/hacs.1.10"</span>)
      (pdf-dir <span style="color: #228b22;">"/home/jkitchin/pdfs"</span>)
      (template <span style="color: #228b22;">"</span>
<span style="color: #228b22;"> :PROPERTIES:</span>
<span style="color: #228b22;">  :Custom_ID: %(key)</span>
<span style="color: #228b22;">  :AUTHOR: %(author</span>
<span style="color: #228b22;">  :JOURNAL: %(journal)</span>
<span style="color: #228b22;">  :YEAR: %(year)</span>
<span style="color: #228b22;">  :VOLUME: %(volume)</span>
<span style="color: #228b22;">  :PAGES: %(pages)</span>
<span style="color: #228b22;">  :DOI: %(doi)</span>
<span style="color: #228b22;">  :URL: %(url)</span>
<span style="color: #228b22;"> :END:</span>
<span style="color: #ff0000; font-weight: bold;">[</span><span style="color: #228b22;">[cite:%(key)]] [[file:%(pdf-dir)/%(key).pdf][pdf]]\n\n"</span>))

(expand-template template))
</pre>
</div>

<pre class="example">
 :PROPERTIES:
  :Custom_ID: kitchin-2014
  :AUTHOR: Kitchin, J. R.
  :YEAR: 2014
  :VOLUME: 1
  :PAGES: 1--10
  :DOI: 10.1.1.109/hacs.1.10
  :URL: http://hacs.org/10.1.1.109/hacs.1.10
 :END:
[[cite:kitchin-2014]] [[file:/home/jkitchin/pdfs/kitchin-2014.pdf][pdf]]
</pre>

<p>
That is pretty nice. I like it better than the plist expansion I used
before. Presumably these variables would already be defined somewhere
in your code.
</p>

<p>
I thought of trying this on a more complex expansion, and discovered a
weakness in the regexp that finds the expansion values. It turns out
to be simpler to use %{} as the delimiter than %(), because you may
want nested parentheses. The regexp above does not correctly match
sets of parentheses.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">expand-template</span> (s)
  <span style="color: #228b22;">"expand a template containing %{} with the eval of its contents"</span>
  (replace-regexp-in-string <span style="color: #228b22;">"%{</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">}]+</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">}"</span>
                            (<span style="color: #8b0000;">lambda</span> (arg)
                              (<span style="color: #8b0000;">let</span> ((sexp (substring arg 2 -1)))
                                (format <span style="color: #228b22;">"%s"</span> (eval (read sexp))))) s))

(expand-template <span style="color: #228b22;">"2 * 2 = %{(* 2 2)}"</span>)
</pre>
</div>

<pre class="example">
2 * 2 = 4
</pre>


<p>
I am not sure this is a desirable way to make a template, with
multiline code to be expanded, but at least this works!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">expand-template</span> (s)
  <span style="color: #228b22;">"expand a template containing %{} with the eval of its contents"</span>
  (replace-regexp-in-string <span style="color: #228b22;">"%{</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">}]+</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">}"</span>
                            (<span style="color: #8b0000;">lambda</span> (arg)
                              (<span style="color: #8b0000;">let</span> ((sexp (substring arg 2 -1)))
                                (format <span style="color: #228b22;">"%s"</span> (eval (read sexp))))) s))

(expand-template <span style="color: #228b22;">"The result is %{(progn</span>
<span style="color: #228b22;">  (if (&gt; 4 3)</span>
<span style="color: #228b22;">      'true</span>
<span style="color: #228b22;">    'false))}"</span>)
</pre>
</div>

<pre class="example">
The result is true
</pre>

<p>
The regexp used in the expansion is not very robust. In particular if
there is a } in the code, it will probably fail because the regexp
does not match closing } correctly. Fixing that is beyond me right
now!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/26/Another-alternative-to-string-templates.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Alternatives to long complex format statements in emacs-lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/01/20/Alternatives-to-long-complex-format-statements-in-emacs-lisp" />
    <id>http://jkitchin.github.io/blog/2014/01/20/Alternatives-to-long-complex-format-statements-in-emacs-lisp</id>
    <updated>2014-01-20T09:50:26Z</updated>
    <published>2014-01-20T09:50:26Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <summary type="html"><![CDATA[Alternatives to long complex format statements in emacs-lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/01/20/Alternatives-to-long-complex-format-statements-in-emacs-lisp"><![CDATA[


<p>
At one point I had a string I wanted to fill in with a bunch of variables. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(insert (format<span style="color: #228b22;">"</span>
<span style="color: #228b22;"> :PROPERTIES:</span>
<span style="color: #228b22;">  :Custom_ID: %s</span>
<span style="color: #228b22;">  :AUTHOR: %s</span>
<span style="color: #228b22;">  :JOURNAL: %s</span>
<span style="color: #228b22;">  :YEAR: %s</span>
<span style="color: #228b22;">  :VOLUME: %s</span>
<span style="color: #228b22;">  :PAGES: %s</span>
<span style="color: #228b22;">  :DOI: %s</span>
<span style="color: #228b22;">  :URL: %s</span>
<span style="color: #228b22;"> :END:</span>
<span style="color: #228b22; font-weight: bold;">[</span><span style="color: #228b22;">[cite:%s]] [[file:%s/%s.pdf][pdf]]\n\n"</span>
key author journal year volume pages doi url key jorg-bib-pdf-directory key ))
</pre>
</div>

<p>
I find that very difficult to use, because it is tedious to make sure all the variables are in the right order, and it is difficult to change later. In Python, you would be able to put named expansions in, e.g. {author} and then used named arguments. That does not exist as far as I know in emacs-lisp.
</p>

<p>
Below is an alternatme approach that uses concat to construct this string.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((key <span style="color: #228b22;">"kitchin-2014"</span>)
      (author <span style="color: #228b22;">"Kitchin, J. R."</span>)
      (journal <span style="color: #228b22;">"HACS"</span>)
      (year <span style="color: #228b22;">"2014"</span>)
      (volume <span style="color: #228b22;">"1"</span>)
      (pages <span style="color: #228b22;">"1--10"</span>)
      (doi <span style="color: #228b22;">"10.1.1.109/hacs.1.10"</span>)
      (url <span style="color: #228b22;">"http://hacs.org/10.1.1.109/hacs.1.10"</span>)
      (jorg-bib-pdf-directory <span style="color: #228b22;">"/home/jkitchin/pdfs"</span>))

(concat <span style="color: #228b22;">"</span>
<span style="color: #228b22;"> :PROPERTIES:</span>
<span style="color: #228b22;">  :Custom_ID: "</span> key <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :AUTHOR: "</span> author <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :JOURNAL: "</span> journal <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :YEAR: "</span> year <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :VOLUME: "</span> volume <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :PAGES: "</span> pages <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :DOI: "</span> doi <span style="color: #228b22;">"</span>
<span style="color: #228b22;">  :URL: "</span> url <span style="color: #228b22;">"</span>
<span style="color: #228b22;"> :END:</span>
<span style="color: #228b22; font-weight: bold;">[</span><span style="color: #228b22;">[cite:"</span> key <span style="color: #228b22;">"]] [[file:"</span> jorg-bib-pdf-directory <span style="color: #228b22;">"/"</span> key <span style="color: #228b22;">".pdf][pdf]]\n\n"</span>))
</pre>
</div>

<pre class="example">
 :PROPERTIES:
  :Custom_ID: kitchin-2014
  :AUTHOR: Kitchin, J. R.
  :JOURNAL: HACS
  :YEAR: 2014
  :VOLUME: 1
  :PAGES: 1--10
  :DOI: 10.1.1.109/hacs.1.10
  :URL: http://hacs.org/10.1.1.109/hacs.1.10
 :END:
[[cite:kitchin-2014]] [[file:/home/jkitchin/pdfs/kitchin-2014.pdf][pdf]]
</pre>

<p>
That is kind of interesting. It is a little tedious to use all the quotes. It seems like there should be soemthing like named expansions. Let us write one of our own. We will use a regular expression to find {:keyword} and a plist. There is a regexp to match this, and then we can take the characters from position 1 to the second to last character as the keyword. That is not beautiful to me, but it works here. Then we just get the keyword from the plist. The keywords in a plist are symbols, and we will have strings. We have to use the <code>intern</code> function to convert them to symbols.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">expand-template</span> (s plist)
  <span style="color: #228b22;">"expand a template containing {:keyword} with the definitions in plist"</span>
  (replace-regexp-in-string <span style="color: #228b22;">"{</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">:[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">}]+</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">}"</span> 
                            (<span style="color: #8b0000;">lambda</span> (arg) 
                              (<span style="color: #8b0000;">let</span> ((keyword (intern (substring arg 1 -1))))
                                (format <span style="color: #228b22;">"%s"</span> (plist-get plist keyword)))) s))

(<span style="color: #8b0000;">let</span> ((template <span style="color: #228b22;">"</span>
<span style="color: #228b22;"> :PROPERTIES:</span>
<span style="color: #228b22;">  :Custom_ID: {:key}</span>
<span style="color: #228b22;">  :AUTHOR: {:author}</span>
<span style="color: #228b22;">  :JOURNAL: {:journal}</span>
<span style="color: #228b22;">  :YEAR: {:year}</span>
<span style="color: #228b22;">  :VOLUME: {:volume}</span>
<span style="color: #228b22;">  :PAGES: {:pages}</span>
<span style="color: #228b22;">  :DOI: {:doi}</span>
<span style="color: #228b22;">  :URL: {:url}</span>
<span style="color: #228b22;"> :END:</span>
<span style="color: #228b22; font-weight: bold;">[</span><span style="color: #228b22;">[cite:{:key}]] [[file:{:pdf-dir}/{:key}.pdf][pdf]]\n\n"</span>))

(expand-template template
                 '(<span style="color: #cd0000;">:key</span> <span style="color: #228b22;">"kitchin-2014"</span>
                        <span style="color: #cd0000;">:author</span> <span style="color: #228b22;">"Kitchin, J. R."</span>
                        <span style="color: #cd0000;">:journal</span> <span style="color: #228b22;">"HACS"</span>
                        <span style="color: #cd0000;">:year</span> 2014
                        <span style="color: #cd0000;">:volume</span> 1
                        <span style="color: #cd0000;">:pages</span> <span style="color: #228b22;">"1--10"</span>
                        <span style="color: #cd0000;">:doi</span> <span style="color: #228b22;">"10.1.1.109/hacs.1.10"</span>
                        <span style="color: #cd0000;">:url</span> <span style="color: #228b22;">"http://hacs.org/10.1.1.109/hacs.1.10"</span>
                        <span style="color: #cd0000;">:pdf-dir</span> <span style="color: #228b22;">"/home/jkitchin/pdfs"</span>)))
</pre>
</div>

<pre class="example">
 :PROPERTIES:
  :Custom_ID: kitchin-2014
  :AUTHOR: Kitchin, J. R.
  :JOURNAL: HACS
  :YEAR: 2014
  :VOLUME: 1
  :PAGES: 1--10
  :DOI: 10.1.1.109/hacs.1.10
  :URL: http://hacs.org/10.1.1.109/hacs.1.10
 :END:
[[cite:kitchin-2014]] [[file:/home/jkitchin/pdfs/kitchin-2014.pdf][pdf]]
</pre>

<p>
That is pretty close to what I am used to from python! I am surprised there aren't other solutions for this around. I looked, and couldn't find them.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/20/Alternatives-to-long-complex-format-statements-in-emacs-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.5f</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Send email to a list of users]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/01/13/Send-email-to-a-list-of-users" />
    <id>http://jkitchin.github.io/blog/2014/01/13/Send-email-to-a-list-of-users</id>
    <updated>2014-01-13T18:42:59Z</updated>
    <published>2014-01-13T18:41:55Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Send email to a list of users]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/01/13/Send-email-to-a-list-of-users"><![CDATA[


<p>
I have a need to send a lot of emails to users in my class. I have to send each student an email containing there userid and a password assigned to them. I have a list of these, so the strategy is to create a function that will email that information to one user, and then use mapcar to apply the function to each pair in a list.  First, we work out a function that will send one email to one user.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">send-mail</span> (userid password)
  <span style="color: #228b22;">"send email to userid@andrew.cmu.edu containing their password"</span>
  (interactive)
  (mail)
  (mail-to)
  (insert (format <span style="color: #228b22;">"%s@andrew.cmu.edu"</span> userid))
  (mail-subject)
  (insert <span style="color: #228b22;">"[06-640] account information"</span>)
  (mail-text)
  (insert (format <span style="color: #228b22;">"</span>
<span style="color: #228b22;">An account has been created on gilgamesh.cheme.cmu.edu</span>
<span style="color: #228b22;">userid: %s</span>
<span style="color: #228b22;">password: %s"</span> userid password))
  (mail-send-and-exit))

(send-mail <span style="color: #228b22;">"jkitchin"</span> <span style="color: #228b22;">"trustme99"</span>)
</pre>
</div>

<p>
That worked well. I ran the block and got the email. 
</p>

<p>
Now, suppose I have this data:
</p>
<table id="users" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">userid</th>
<th scope="col" class="left">password</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">user1</td>
<td class="left">trustme99</td>
</tr>

<tr>
<td class="left">user2</td>
<td class="left">foolme99</td>
</tr>

<tr>
<td class="left">user3</td>
<td class="left">blameme99</td>
</tr>
</tbody>
</table>

<p>
We can pass that to a source block as a list of lists that will look like this:
</p>
<pre class="example">
 ((user1 trustme99) (user2 foolme99) (user3 blameme99))
</pre>

<p>
Then, we can use a mapcar to process each element. Here I use a dummy function with two arguments. If I substitute the function above, each of these users would get an email.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">fun</span> (a b)
  (princ (format <span style="color: #228b22;">"user: %s\npassword: %s\n"</span> a b)))

(mapcar (<span style="color: #8b0000;">lambda</span> (x) (fun (car x) (cadr x))) data)
</pre>
</div>

<pre class="example">
user: user1
password: trustme99
user: user2
password: foolme99
user: user3
password: blameme99
</pre>

<p>
I am not sure that is the best way to get the first and second elements in the list element. It looks funny to me, but it works fine. the alternative is not much prettier:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">fun</span> (a b)
  (princ (format <span style="color: #228b22;">"user: %s\npassword: %s\n"</span> a b)))

(mapcar (<span style="color: #8b0000;">lambda</span> (x) (fun (nth 0 x) (nth 1 x))) data)
</pre>
</div>

<pre class="example">
user: user1
password: trustme99
user: user2
password: foolme99
user: user3
password: blameme99
</pre>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/13/Send-email-to-a-list-of-users.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[An improved index function for emacs-lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/12/22/An-improved-index-function-for-emacs-lisp" />
    <id>http://jkitchin.github.io/blog/2013/12/22/An-improved-index-function-for-emacs-lisp</id>
    <updated>2013-12-22T12:02:06Z</updated>
    <published>2013-12-22T12:01:48Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <summary type="html"><![CDATA[An improved index function for emacs-lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/12/22/An-improved-index-function-for-emacs-lisp"><![CDATA[


<p>
I previously worked out an <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/03/05/An-index-function-for-strings-in-emacs-lisp/">index</a> function for a list of strings in emacs-lisp, but at the end I showed it would not work for arbitrary elements of a list. Here is an exercise to improve on that. The goal is a function that looks like this:
</p>
<pre class="example">
(index 1 '("a" 2 1 "b"))
</pre>
<p>
that would return 2 in this case. Last time I used string=, which is why I could not find a number in the list. This time, we will use <code>equal</code> (see <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html">http://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html</a> ) which compares components of objects for equality. That should let us find arbitrary objects in a list. 
</p>

<p>
Here is our improved function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">index</span> (object list)
  <span style="color: #228b22;">"return the index of object in list"</span>
  (<span style="color: #8b0000;">let</span> ((counter 0)
        (found nil))
    (<span style="color: #8b0000;">catch</span> '<span style="color: #cd0000;">finished</span>
      (<span style="color: #8b0000;">dolist</span> (listelement list counter)
        (<span style="color: #8b0000;">if</span> (equal object listelement)
            (<span style="color: #8b0000;">progn</span>
              (setq found t)
              (<span style="color: #8b0000;">throw</span> '<span style="color: #cd0000;">finished</span> counter))
          <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">else increment counter</span>
          (incf counter)))
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">if we found it return counter otherwise return nil</span>
    (<span style="color: #8b0000;">if</span> found counter nil))))
</pre>
</div>

<p>
Now, let us test some examples:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(index 1 '(<span style="color: #228b22;">"a"</span> 2 1 <span style="color: #228b22;">"b"</span>))
</pre>
</div>

<pre class="example">
2
</pre>

<p>
No problem finding a number in a list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(index <span style="color: #228b22;">"b"</span> '(<span style="color: #228b22;">"a"</span> 2 1 <span style="color: #228b22;">"b"</span>))
</pre>
</div>

<pre class="example">
3
</pre>

<p>
How about something more complicated, like a list in a list?
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(index '(1 2) '(<span style="color: #228b22;">"a"</span> 2 1 (1 2) <span style="color: #228b22;">"b"</span>))
</pre>
</div>

<pre class="example">
3
</pre>

<p>
That looks good.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(princ (index '(1 2) '(<span style="color: #228b22;">"a"</span> 2 1 (2 (1 2)) <span style="color: #228b22;">"b"</span>)))
</pre>
</div>

<pre class="example">
nil
</pre>

<p>
Note, we do not find the nested object. That is ok, the location of that object would require two indices, which this function is not designed for. 
</p>

<p>
Here we consider an object of an a-list
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(index '(<span style="color: #228b22;">"nut"</span> . <span style="color: #228b22;">"acorn"</span>) '((<span style="color: #228b22;">"nut"</span> . <span style="color: #228b22;">"acorn"</span>) (<span style="color: #228b22;">"fruit"</span> . <span style="color: #228b22;">"apple"</span>)))
</pre>
</div>

<pre class="example">
0
</pre>

<p>
I am not quite sure how you would use that, but it does illustrate the generality of the index function!
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/12/22/An-improved-index-function-for-emacs-lisp.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Summarizing org-files in a report]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/04/30/Summarizing-org-files-in-a-report" />
    <id>http://jkitchin.github.io/blog/2013/04/30/Summarizing-org-files-in-a-report</id>
    <updated>2013-04-30T09:49:38Z</updated>
    <published>2013-04-30T08:30:01Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Summarizing org-files in a report]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/04/30/Summarizing-org-files-in-a-report"><![CDATA[


<p>
This is an example of using emacs-lisp to extract pieces of information about a bunch of org-files into a single report, as well as aggregating data from those files. The scenario where this would likely be useful is if you have a set of org-files that contain information, e.g. from a bunch of different calculations, or from documents turned in by different students, and you want to aggregate the results into a report.
</p>

<p>
In this example, I have a set of org-files in this directory that contain simulated homework assignments turned in. The files in this example all look something like this. Each heading corresponds to a problem, and there is a properties drawer for each heading that contains the grade. 
</p>

<p>
We will create a navigation document that facilitates reviewing each of the files, as well as collecting the grades from the files. Here is what a typical file looks like:
</p>

<pre class="example">
#+PROPERTY: NAME Ellen Donnte
* 1a
  :PROPERTIES:
  :lettergrade: A
  :END:
* 1b
  :PROPERTIES:
  :lettergrade: R
  :END:
* 2
  :PROPERTIES:
  :lettergrade: A
  :END:
#+BEGIN_SRC emacs-lisp
(prin1 42)
#+END_SRC

#+RESULTS:
: 42

* 3
  :PROPERTIES:
  :lettergrade: C
  :END:
</pre>


<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Creating a navigation document</h2>
<div class="outline-text-2" id="text-1">
<p>
In this section we write some code that creates text with a link to each file we need to review. This is something I imagine we would do after all the files have been turned in and collected. This buffer would facilitate navigating all the files, and checking them off. First we create checkboxes. All this does is create an easy to use navigation document that facilitates opening the files, grading them, and marking them as done.<sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">find-lisp</span>)

(<span style="color: #8b0000;">dolist</span> (fname (find-lisp-find-files <span style="color: #228b22;">"."</span> <span style="color: #228b22;">"\\HW1.org$"</span>) nil)
  (princ (format <span style="color: #228b22;">"- [ ] [[file:%s][%s]]\n"</span> fname (file-name-nondirectory fname))))
</pre>
</div>

<ul>
<li><code>[X]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Slim-Shady-HW1.html" >Slim-Shady-HW1.org</a>
</li>
<li><code>[&nbsp;]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/John-Doe-HW1.html" >John-Doe-HW1.org</a>
</li>
<li><code>[&nbsp;]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Jim-Vicious-HW1.html" >Jim-Vicious-HW1.org</a>
</li>
<li><code>[&nbsp;]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Ellen-Donnte-HW1.html" >Ellen-Donnte-HW1.org</a>
</li>
</ul>


<p>
In the results above I have marked one entry as completed.
</p>

<p>
It might be preferrable to have links to places in the file, e.g. to problem 2.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">find-lisp</span>)

(<span style="color: #8b0000;">dolist</span> (fname (find-lisp-find-files <span style="color: #228b22;">"."</span> <span style="color: #228b22;">"\\HW1.org$"</span>) nil)
  (princ (format <span style="color: #228b22;">"- [ ] [[file:%s::*2][%s - problem 2]]\n"</span> fname (file-name-nondirectory fname))))
</pre>
</div>

<ul>
<li><code>[&nbsp;]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Slim-Shady-HW1.html" >Slim-Shady-HW1.org - problem 2</a>
</li>
<li><code>[&nbsp;]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/John-Doe-HW1.html" >John-Doe-HW1.org - problem 2</a>
</li>
<li><code>[X]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Jim-Vicious-HW1.html" >Jim-Vicious-HW1.org - problem 2</a>
</li>
<li><code>[&nbsp;]</code> <a href="file://c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Ellen-Donnte-HW1.html" >Ellen-Donnte-HW1.org - problem 2</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Aggregating properties</h2>
<div class="outline-text-2" id="text-2">
<p>
Our goal here is to use emacs-lisp to aggregate the letter grades from all the assignments into a table. This would be done after all the files have been reviewed. First, we write a function that gets the data we want. The function should take a filename, and return the letter grade for a problem, e.g. (get-letter-grade filename problem) -&gt; lettergrade. Then, we will map that function onto a list of files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">find-lisp</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">get-letter-grade</span> (filename problem-name)
  <span style="color: #228b22;">"Open filename, get the grade associated with the heading of problem-name."</span>
  (<span style="color: #8b0000;">with-temp-buffer</span>
    (insert-file-contents filename)
    (<span style="color: #8b0000;">let</span> ((studentname nil)
           (lettergrade nil))
      (org-ctrl-c-ctrl-c) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">this is needed to read the NAME property!</span>
      (setq studentname (org-entry-get (point) <span style="color: #228b22;">"NAME"</span> t))
      (goto-char (point-min))
      (search-forward problem-name)
      (setq lettergrade (org-entry-get (point) <span style="color: #228b22;">"lettergrade"</span>))
      
      (princ (format <span style="color: #228b22;">"|%s|%s|%s|\n"</span> studentname problem-name lettergrade)))))

(princ <span style="color: #228b22;">"#+ATTR_HTML: :border 2 :rules all :frame border\n"</span>)
(princ <span style="color: #228b22;">"#+tblname: GRADES\n"</span>)
(princ <span style="color: #228b22;">"| Name | Problem | Grade |\n|-\n"</span>)

(<span style="color: #8b0000;">dolist</span> (problem-name '(<span style="color: #228b22;">"1a"</span> <span style="color: #228b22;">"1b"</span> <span style="color: #228b22;">"2"</span> <span style="color: #228b22;">"3"</span>) nil)
  (mapcar (<span style="color: #8b0000;">lambda</span> (fname) (get-letter-grade fname problem-name)) 
      (find-lisp-find-files <span style="color: #228b22;">"."</span> <span style="color: #228b22;">"\\HW1.org$"</span>)))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides" id="GRADES">
<caption></caption>

<colgroup>
<col class="left"/>

<col class="left"/>

<col class="left"/>
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Name</th>
<th scope="col" class="left">Problem</th>
<th scope="col" class="left">Grade</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Slim Shady</td>
<td class="left">1a</td>
<td class="left">A</td>
</tr>

<tr>
<td class="left">John Doe</td>
<td class="left">1a</td>
<td class="left">B</td>
</tr>

<tr>
<td class="left">Jim Vicious</td>
<td class="left">1a</td>
<td class="left">B</td>
</tr>

<tr>
<td class="left">Ellen Donnte</td>
<td class="left">1a</td>
<td class="left">A</td>
</tr>

<tr>
<td class="left">Slim Shady</td>
<td class="left">1b</td>
<td class="left">B</td>
</tr>

<tr>
<td class="left">John Doe</td>
<td class="left">1b</td>
<td class="left">A</td>
</tr>

<tr>
<td class="left">Jim Vicious</td>
<td class="left">1b</td>
<td class="left">C</td>
</tr>

<tr>
<td class="left">Ellen Donnte</td>
<td class="left">1b</td>
<td class="left">R</td>
</tr>

<tr>
<td class="left">Slim Shady</td>
<td class="left">2</td>
<td class="left">R</td>
</tr>

<tr>
<td class="left">John Doe</td>
<td class="left">2</td>
<td class="left">B</td>
</tr>

<tr>
<td class="left">Jim Vicious</td>
<td class="left">2</td>
<td class="left">R</td>
</tr>

<tr>
<td class="left">Ellen Donnte</td>
<td class="left">2</td>
<td class="left">A</td>
</tr>

<tr>
<td class="left">Slim Shady</td>
<td class="left">3</td>
<td class="left">R</td>
</tr>

<tr>
<td class="left">John Doe</td>
<td class="left">3</td>
<td class="left">B</td>
</tr>

<tr>
<td class="left">Jim Vicious</td>
<td class="left">3</td>
<td class="left">D</td>
</tr>

<tr>
<td class="left">Ellen Donnte</td>
<td class="left">3</td>
<td class="left">C</td>
</tr>
</tbody>
</table>


<p>
You could imagine some other kind of aggregating or analysis here too. Now that we have that table, we can use it in other analysis. Let us count the number of A's. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">save-excursion</span>
  (goto-char (point-min))
  (search-forward-regexp <span style="color: #228b22;">"^#\\+tblname: GRADES"</span>)
  (next-line)
  (<span style="color: #8b0000;">let</span> ((A-COUNT 0)
        (letter-grade nil)
        <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">cddr is used to remove the first two rows of the table</span>
        (data (cddr (org-table-to-lisp))))
    (<span style="color: #8b0000;">dolist</span> (entry data nil)
      (setq letter-grade (nth 2 entry))
      (<span style="color: #8b0000;">if</span> (equal  letter-grade <span style="color: #228b22;">"A"</span>)
          (incf A-COUNT)))
    (princ (format <span style="color: #228b22;">"%s A's counted"</span> A-COUNT))))
</pre>
</div>

<pre class="example">
4 A's counted
</pre>

<p>
Since we are in org-mode, we can use the table directly! Let us do that and count the number of R's.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((COUNT 0)
      (letter-grade nil))
    (<span style="color: #8b0000;">dolist</span> (entry (cddr data) nil)
      (setq letter-grade (nth 2 entry))
      (<span style="color: #8b0000;">if</span> (equal  letter-grade <span style="color: #228b22;">"R"</span>)
          (incf COUNT)))
    (princ (format <span style="color: #228b22;">"%s R's counted"</span> COUNT))))
</pre>
</div>

<pre class="example">
4 R's counted
</pre>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Aggregating sections of org-files into one file</h2>
<div class="outline-text-2" id="text-3">
<p>
Another scenario that may be interesting is to collect all of the responses in a single document. This might be useful to show examples in class, or to review all the problems to see if there are common errors. Here we collect Problem 2.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">find-lisp</span>)

(generate-new-buffer <span style="color: #228b22;">"Problem 2"</span>)
(set-buffer <span style="color: #228b22;">"Problem 2"</span>)
(insert <span style="color: #228b22;">"#+TITLE: Summary of problem 2\n"</span>)

(<span style="color: #8b0000;">dolist</span> (fname (find-lisp-find-files <span style="color: #228b22;">"."</span> <span style="color: #228b22;">"\\HW1.org$"</span>) nil)
  (<span style="color: #8b0000;">save-excursion</span>
    (goto-char (point-max))
    (org-mode)
    (<span style="color: #8b0000;">with-temp-buffer</span> 
      (insert-file-contents fname)
      (org-mode)
      (goto-char (point-min))
      (setq studentname (org-entry-get nil <span style="color: #228b22;">"NAME"</span> t))
      (search-forward <span style="color: #228b22;">"* 2"</span>)
      (org-narrow-to-subtree)
      (forward-line) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">skip heading</span>
      (setq text (buffer-substring (point) (point-max))))
    (insert (format <span style="color: #228b22;">"* 2 - %s\n"</span> studentname))
    (insert text <span style="color: #228b22;">"\n"</span>)
          
    (search-backward <span style="color: #228b22;">"* 2"</span>)
    (org-entry-put nil <span style="color: #228b22;">"NAME"</span> studentname)
    (org-entry-put nil <span style="color: #228b22;">"source"</span> (format <span style="color: #228b22;">"[[%s][link]]"</span> fname))
))

(switch-to-buffer <span style="color: #228b22;">"Problem 2"</span>)
(org-mode) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">switch to org-mode in that buffer</span>

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">print the lines to see what we got</span>
(<span style="color: #8b0000;">dolist</span> (line (split-string (buffer-string) <span style="color: #228b22;">"\n"</span>) nil) (princ (format <span style="color: #228b22;">": %s\n"</span> line)))
</pre>
</div>

<pre class="example">
: #+TITLE: Summary of problem 2
: * 2 - Slim Shady
:   :PROPERTIES:
:   :lettergrade: R
:   :NAME:     Slim Shady
:   :source:   [[c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Slim-Shady-HW1.org][link]]
:   :END:
: #+BEGIN_SRC python
: print 3
: 
: #+END_SRC
: 
: #+RESULTS:
: : 3
: 
: * 2 - John Doe
:   :PROPERTIES:
:   :lettergrade: B
:   :NAME:     John Doe
:   :source:   [[c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/John-Doe-HW1.org][link]]
:   :END:
: Here is my solution
: #+BEGIN_SRC python
: print 4
: #+END_SRC
: 
: #+RESULTS:
: : 4
: 
: * 2 - Jim Vicious
:   :PROPERTIES:
:   :lettergrade: R
:   :NAME:     Jim Vicious
:   :source:   [[c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Jim-Vicious-HW1.org][link]]
:   :END:
: I could not figure this out
: * 2 - Ellen Donnte
:   :PROPERTIES:
:   :lettergrade: A
:   :NAME:     Ellen Donnte
:   :source:   [[c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/org-report/Ellen-Donnte-HW1.org][link]]
:   :END:
: #+BEGIN_SRC emacs-lisp
: (prin1 42)
: #+END_SRC
: 
: #+RESULTS:
: : 42
</pre>






<p>
I am not super thrilled with this approach. It feels too much like hand-crafting a result, but it does show some possibilities!
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/04/30/Summarizing-org-files-in-a-report.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[An index function for strings in emacs-lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/03/05/An-index-function-for-strings-in-emacs-lisp" />
    <id>http://jkitchin.github.io/blog/2013/03/05/An-index-function-for-strings-in-emacs-lisp</id>
    <updated>2013-03-05T19:28:31Z</updated>
    <published>2013-03-05T19:28:30Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs-lisp" />
    <summary type="html"><![CDATA[An index function for strings in emacs-lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/03/05/An-index-function-for-strings-in-emacs-lisp"><![CDATA[



<p>
I could not find an index function for strings in emacs-lisp. The <code>position</code> function seems to work for numbers, but not strings. Here is a version that works on strings.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">index</span> (item list)
  <span style="color: #228b22;">"return index of item in list or nil"</span>
  (<span style="color: #8b0000;">let</span> ((counter 0)
        (found nil))
    (<span style="color: #8b0000;">dolist</span> (listelement list counter)
      (<span style="color: #8b0000;">if</span> (string= item listelement)
        (<span style="color: #8b0000;">progn</span> 
          (setq found t)
          (<span style="color: #8b0000;">return</span> counter)) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">exit the loop</span>
        <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">else increment counter</span>
        (incf counter)))
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">if we found it return counter otherwise return nil</span>
    (<span style="color: #8b0000;">if</span> found counter nil)))
</pre>
</div>

<pre class="example">
index
</pre>

<p>
Here are some example uses:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(index <span style="color: #228b22;">"test"</span> '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"test"</span> <span style="color: #228b22;">"y"</span>))
</pre>
</div>

<pre class="example">
1
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(index <span style="color: #228b22;">"z"</span> '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"b"</span> <span style="color: #228b22;">"z"</span>))
</pre>
</div>

<pre class="example">
2
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(index <span style="color: #228b22;">"testy"</span> '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"test"</span> <span style="color: #228b22;">"y"</span>))
</pre>
</div>

<pre class="example">
nil
</pre>

<p>
This raises an error because we use string=.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(index 1 '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"test"</span> <span style="color: #228b22;">"y"</span> 1))
</pre>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/03/05/An-index-function-for-strings-in-emacs-lisp.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
