<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Tue, 11 Feb 2014 16:17:47 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Separating code blocks from results in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/02/08/Separating-code-blocks-from-results-in-org-mode</link>
      <pubDate>Sat, 08 Feb 2014 08:54:57 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">dFO-whe_7X7Ue6HD96_pX_PL9bo=</guid>
      <description>Separating code blocks from results in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Appendix of code</a>
<ul>
<li><a href="#sec-1-1">1.1. Area of a circle</a></li>
<li><a href="#sec-1-2">1.2. Hello function</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
I often put my code blocks right where I need them in my org documents. It usually has a section explaining what I want to do, then the code block that implements the idea, following by the output. Sometimes the code blocks are long, however, and it might be desirable for that code to be in an appendix. <sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Org-mode enables this with #+CALL. For example, I have a function named <code>circle-area</code> in the appendix of this post that calculates the area of a circle given its radius. The function is "named" by a line like this:
</p>

<pre class="example">
#+name: function-name
</pre>

<p>
I can use the function like this:
</p>

<pre class="example">
#+CALL: circle-area(1)
</pre>

<pre class="example">
3.14159265359
</pre>

<p>
That is pretty nice. You can separate the code out from the main document. You still have to put the #+CALL: line in though. It may be appropriate to put a call inline with your text. If you add the following sentence, and put your cursor on the call<sub>circle</sub>-area and press C-c C-c, the output is put in verbatim markers right after it. 
</p>

<pre class="example">
The area of a circle with unit radius is call_circle-area(1).
</pre>

<p>
The area of a circle with unit radius is <code>3.14159265359</code>. 
</p>

<p>
Here is another interesting way to do it. We can specify a named results block. Let us consider another function named <code>hello-block</code> that prints output. We specify a named results block like this:
</p>

<pre class="example">
#+RESULTS: function-name
</pre>

<p>
Now, whenever you execute that block, the results will get put where this line is like this.
</p>

<pre class="example">
hello John
</pre>

<p>
These could be useful approaches to making the "top" of your document cleaner, with less code in it. The code of course is still in the document, but at the end, in an appendix for example. This kind of separation might make it a little harder to find the code, and to reevaluate it,<sup><a id="fnr.2" name="fnr.2" class="footref" href="#fn.2">2</a></sup> but it might improve the readability for others. 
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Appendix of code</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Area of a circle</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-python" id="circle-area"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">return</span> np.pi * r**2
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Hello function</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-python" id="hello-block"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello '</span> + name
</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p>
I know I can pretty conveniently collapse a code block by pressing tab on the header. Sometimes that is not enough.
</p></div>

<div class="footdef"><sup><a id="fn.2" name="fn.2" class="footnum" href="#fnr.2">2</a></sup> <p>
It is not much harder, C-s will let you search for the named block. I do not know if there are nice convenient navigation commands for this.
</p></div>


</div>
</div><p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/08/Separating-code-blocks-from-results-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Add time to a deadline</title>
      <link>http://jkitchin.github.io/blog/2014/02/05/Add-time-to-a-deadline</link>
      <pubDate>Wed, 05 Feb 2014 09:41:04 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">aZTTxoU6iiw0yoXhYnvYpHZepkU=</guid>
      <description>Add time to a deadline</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. s1</a></li>
<li><a href="#sec-2">2. s1</a></li>
<li><a href="#sec-3">3. s1</a></li>
</ul>
</div>
</div>
<p>
I have an application where an org-file is a template with some due dates in it. I would like to update the deadlines to make them all relative to today. In this post I explore a way to do that. The strategy is to find deadlines, parse the time out of the time stamp, add an appropriate amount of time, and replace the time stamp. For this exercise, we use this org-file, which has one DEADLINE of "2014-01-13 Mon", and I want to add 60 days to the time stamp. 
</p>

<p>
Amazingly, emacs can parse time strings into a format that it can understand. I do not claim to understand what this function returns, but it is some representation of time that emacs understands.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>)
</pre>
</div>

<p>
(21203 11392)
</p>

<p>
Now, we can add time to that format. Let us say I want to add 60 days. In emacs, we add seconds to a time, so 60 days is 60 days * 24 hours * 60 minutes * 60 seconds, or in elisp: (* 60 24 60 60).
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((sixty-days (seconds-to-time (* 60 24 60 60))))
  (time-add (date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>) sixty-days))
</pre>
</div>

<p>
(21282 18048 0 0)
</p>

<p>
That does not make too much sense, so we can use another function to format it like a new time stamp.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((sixty-days (seconds-to-time (* 60 24 60 60))))
  (format-time-string <span style="color: #228b22;">"&lt;%Y-%m-%d %a&gt;"</span>
                      (time-add (date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>) sixty-days)))
</pre>
</div>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2014-03-13 Thu&gt;</span></span>
</p>

<p>
Beautiful. We just got a timestamp that is 60 days later than the original timestamp. Now we just search forward to find deadline, get the time stamp, add the time to it, and replace the line. I specifically want to change deadlines, so we will develop a regular expression for that. Here is a block that searches forward for a DEADLINE, parses it, adds 60 days to it, and replaces the deadline. The regular expression is limited to timestamps that look like &lt;yyyy-mm-dd day&gt;, i.e. no warnings or repeaters are found. In this post, there is subheading that looks like this initially:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> s1</h2>
<div class="outline-text-2" id="text-1">
<p>
#+END<sub>EXAMPLE</sub>
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">progn</span>
  (<span style="color: #8b0000;">save-excursion</span>
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">go to timestamp</span>
    (re-search-forward <span style="color: #228b22;">"DEADLINE:\\s-*&lt;</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{4\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{2\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{2\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">\\s-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">Mon</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Tue</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Wed</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Thu</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Fri</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Sat</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Sun</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">&gt;"</span>)
    (<span style="color: #8b0000;">let</span> ((ts (match-string 1)) <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">this is the timestamp</span>
          (sixty-days (seconds-to-time (* 60 24 60 60)))
          (new-ts))
      (setq new-ts (format-time-string <span style="color: #228b22;">"    DEADLINE: &lt;%Y-%m-%d %a&gt;"</span>
                                       (time-add (date-to-time ts) sixty-days)))
      <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">now we kill the old time stamp, and insert the new one</span>
      (beginning-of-line)
      (kill-line)
      (insert new-ts))))
</pre>
</div>

<p>
After we run the code above, the deadline looks like this:
#+BEGIN<sub>EXAMPLE</sub>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> s1</h2>
<div class="outline-text-2" id="text-2">
<p>
#+END<sub>EXAMPLE</sub>
</p>

<p>
We succeeded in moving it by 60 days. An interesting application of this would be to make all the deadlines in an org-file relative to some baseline date. For example, you have a series of deadlines for assignments throughout a semester, and it would be tedious to update these by hand. Suppose you could just establish a new beginning date, and make all deadlines relative to that date with a command. That seems useful. 
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> s1</h2>
<div class="outline-text-2" id="text-3">
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/05/Add-time-to-a-deadline.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Literate programming example with Fortran and org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode</link>
      <pubDate>Tue, 04 Feb 2014 10:22:00 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[literate-programming]]></category>
      <guid isPermaLink="false">OrewfEby-EkWfWYRcNHp2BNoFwg=</guid>
      <description>Literate programming example with Fortran and org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. A slightly more complicated example.</a></li>
<li><a href="#sec-2">2. Summary key points</a></li>
</ul>
</div>
</div>
<p>
Update: see a short video of how this post works here: <a href="/media/2014-02-04-Literate-programming-example-with-Fortran-and-org-mode/literate-programming.swf">video</a> 
</p>

<p>
I want to illustrate the literate programming capabilities of org-mode. One idea in literate programming is to have code in blocks surrounded by explanatory text. There is a process called "tangling", which extracts the code, and possibly compiles and runs it. I have typically used python and emacs-lisp in org-mode, but today we look at using Fortran. 
</p>

<p>
The first simple example is a hello world fortran program. Typically you create a file containing code like this:
</p>

<div class="org-src-container">

<pre class="src src-fortran"><span style="color: #8b0000;">PROGRAM</span> <span style="color: #8b2323;">hello</span>

<span style="color: #8b0000;">PRINT</span> *, <span style="color: #228b22;">"Hello world"</span>

<span style="color: #8b0000;">END</span> <span style="color: #8b0000;">PROGRAM</span> <span style="color: #8b2323;">hello</span>
</pre>
</div>

<p>
That file can be named something like hello.f90. We specify that in the source block header like this:
</p>

<pre class="example">
:tangle hello.f90
</pre>

<p>
There are a variety of ways to build your program. Let us create a makefile to do it. We will specify that this block is tangled to a Makefile like this:
</p>
<pre class="example">
:tangle Makefile
</pre>

<p>
Our Makefile will have three targets: 
</p>
<ol class="org-ol">
<li>hello, which compiles our program to an executable called a.out. 
</li>
<li>execute, which depends on hello, and runs the executable
</li>
<li>clean, which deletes a.out if it exists
</li>
</ol>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #8b2323;">hello</span>:  hello.f90
        gfortran hello.f90

<span style="color: #8b2323;">execute</span>: hello
        ./a.out

<span style="color: #8b2323;">clean</span>:
        rm -f a.out *.o
</pre>
</div>

<p>
Now, we can run <pre>elisp:(org-babel-tangle)</pre> , which will extract these files to the current directory. Here is evidence that the files exist.
</p>

<div class="org-src-container">

<pre class="src src-sh">ls
</pre>
</div>

<pre class="example">
hello.f90
literate.org
Makefile
</pre>

<p>
Let us go a step further, and use the makefile to execute our program. The first time you run this, you will see that the 
</p>

<div class="org-src-container">

<pre class="src src-sh">make clean execute
</pre>
</div>

<pre class="example">
rm -f a.out *.o
gfortran hello.f90
./a.out
 Hello world
</pre>

<p>
That works well! The only really inconvenient issue is that if you update the Fortran code above, you have to manually rerun  <pre>elisp:(org-babel-tangle)</pre> , then run the <code>make execute</code> command. We can combine that in a single block, where you do both things at once. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(shell-command-to-string <span style="color: #228b22;">"make clean execute"</span>)
</pre>
</div>

<pre class="example">
rm -f a.out *.o
gfortran hello.f90
./a.out
 Hello world
</pre>

<p>
That is it in a nutshell. We had a source block for a Fortran program, and a source block for the Makefile. After tangling the org-file, we have those files available for us to use. Next, let us consider a little more complicated example.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> A slightly more complicated example.</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, let us consider a Fortran code with two files. We will define a module file, and a program file. The module file contains a function to compute the area of a circle as a function of its radius. Here is our module file, which is tangled to circle.f90.
</p>

<div class="org-src-container">

<pre class="src src-fortran">MODULE Circle
      <span style="color: #4682b4;">implicit None</span>
      public :: area
<span style="color: #ff0000; font-weight: bold;">c</span><span style="color: #ff0000; font-weight: bold;">ontains</span>
      <span style="color: #8b0000;">function</span> <span style="color: #8b2323;">area</span>(r) 
      <span style="color: #4682b4;">implicit none</span>
      <span style="color: #4682b4;">real</span>, intent(in) :: r
      <span style="color: #4682b4;">real</span> :: area
      area = 3.14159 * r**2
      <span style="color: #8b0000;">return</span>
      <span style="color: #8b0000;">end</span> <span style="color: #8b0000;">function</span> <span style="color: #8b2323;">area</span>
<span style="color: #8b0000;">END</span> MODULE Circle
</pre>
</div>

<p>
Now, we write a program that will print a table of circle areas. Here we hard-code an array of 5 radius values, then loop through the values and get the area of the circle with that radius. We will print some output that generates an org-mode <a href="http://orgmode.org/manual/Tables.htm">table</a> . In this program, we <code>use</code> our module defined above.
</p>

<div class="org-src-container">

<pre class="src src-fortran"><span style="color: #8b0000;">program</span> <span style="color: #8b2323;">main</span>
      
use circle, only: area

<span style="color: #4682b4;">implicit none</span>
<span style="color: #4682b4;">integer</span> :: i
<span style="color: #4682b4;">REAL</span>, <span style="color: #4682b4;">DIMENSION</span>(<span style="color: #8b008b;">5</span>) :: R
R = (/1.0, 2.0, 3.0, 4.0, 5.0 /)

<span style="color: #8b0000;">print</span> *, <span style="color: #228b22;">"#+tblname: circle-area"</span>
<span style="color: #ff0000; font-weight: bold;">d</span><span style="color: #ff0000; font-weight: bold;">o i = 1, 5</span>
  <span style="color: #8b0000;">print</span> *, <span style="color: #228b22;">"|"</span>, R(i), <span style="color: #228b22;">"|"</span>, area(R(i)), <span style="color: #228b22;">"|"</span>
<span style="color: #8b0000;">end</span> <span style="color: #8b0000;">do</span>

<span style="color: #8b0000;">end</span> <span style="color: #8b0000;">program</span> <span style="color: #8b2323;">main</span>
</pre>
</div>

<p>
Now, we make a makefile that will build this program. I use a different name for the file, since we already have a Makefile in this directory from the last example.  I also put @ at the front of each command in the makefile to suppress it from being echoed when we run it. Later, we will use the makefile to compile the program, and then run it, and we only want the output of the program. 
</p>

<p>
The compiling instructions are more complex. We have to compile the circle module first, and then the main program. Here is our makefile. 
</p>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #8b2323;">circle</span>:
        <span style="color: #4682b4;">@</span>gfortran -c circle.f90

<span style="color: #8b2323;">main</span>: circle
        <span style="color: #4682b4;">@</span>gfortran -c main.f90
        <span style="color: #4682b4;">@</span>gfortran circle.o main.o -o main

<span style="color: #8b2323;">clean</span>:
        <span style="color: #4682b4;">@</span>rm -f *.o main
</pre>
</div>

<p>
Now, we run this block, which tangles out our new files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">main.f90</td>
<td class="left">circle.f90</td>
<td class="left">hello.f90</td>
<td class="left">makefile-main</td>
<td class="left">Makefile</td>
</tr>
</tbody>
</table>

<p>
Note that results above show we have tangled <i>all</i> the source blocks in this file. You can limit the scope of tangling, by narrowing to a subtree, but that is beyond our aim for today.
</p>

<p>
Finally, we are ready to build our program. We specify the new makefile with the <code>-f</code> option to make. We use the clean target to get rid of old results, and then the main target with builds the program. Since main depends on circle, the circle file is compiled first. 
</p>

<p>
Note in this block I use this header:
</p>
<pre class="example">
#+BEGIN_SRC sh :results raw
</pre>

<p>
That will tell the block to output the results directly in the buffer. I have the fortran code prename the table, and put | around the entries, so this entry is output directly as an org table. 
</p>

<div class="org-src-container">

<pre class="src src-sh">make -f makefile-main clean main
./main
</pre>
</div>

<table id="circle-area" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1.000000</td>
<td class="right">3.141590</td>
</tr>

<tr>
<td class="right">2.000000</td>
<td class="right">12.56636</td>
</tr>

<tr>
<td class="right">3.000000</td>
<td class="right">28.27431</td>
</tr>

<tr>
<td class="right">4.000000</td>
<td class="right">50.26544</td>
</tr>

<tr>
<td class="right">5.000000</td>
<td class="right">78.53975</td>
</tr>
</tbody>
</table>



<p>
It takes some skill getting used to using <code>:results raw</code>. The results are not replaced if you run the code again. That can be inconvenient if you print a very large table, which you must manually delete. 
</p>


<p>
Now that we have a named org table, I can use that table as data in other source blocks, e.g. here in python. You define variables in the header name by referring to the tblname like this.
</p>

<pre class="example">
#+BEGIN_SRC python :var data=circle-area
</pre>

<p>
Then, data is available as a variable in your code. Let us try it and plot the area vs. radius here. For more fun, we will make the plot <a href="http://xkcd.com/">xkcd</a> , so it looks like I sketched it by hand.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.xkcd()

<span style="color: #8b0000;">print</span> data <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">data is a list </span>
<span style="color: #8b008b;">data</span> = np.array(data)
plt.plot(data[:, 0], data[:, 1])
plt.xlabel(<span style="color: #228b22;">'radius'</span>)
plt.ylabel(<span style="color: #228b22;">'area'</span>)
plt.savefig(<span style="color: #228b22;">'circle-area.png'</span>)
</pre>
</div>

<pre class="example">
[[1.0, 3.14159], [2.0, 12.56636], [3.0, 28.27431], [4.0, 50.26544], [5.0, 78.53975]]
</pre>


<div class="figure">
<p><img src="/media/2014-02-04-Literate-programming-example-with-Fortran-and-org-mode/circle-area.png"> 
</p>
</div>

<p>
It appears the area increases quadratically with radius. No surprise there! For fun, let us show that. If we divide each area by \(r^2\), we should get back &pi;. Let us do this in emacs-lisp, just to illustrate how flexibly we can switch between languages. In lisp, the data structure will be a list of items like ((radius1 area1) (radius2 area2)&#x2026;). So, we just map a function that divides the area (the second element of an entry) by the square of the first element. My lisp-fu is only average, so I use the <code>nth</code> function to get those elements. We also load the calc library to get the math-pow function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">calc</span>)
(mapcar (<span style="color: #8b0000;">lambda</span> (x) (/ (nth 1 x) (math-pow (nth 0 x) 2))) data)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
</tr>
</tbody>
</table>


<p>
Indeed, we get &pi; for each element, which shows in fact that the area does increase quadratically with radius.
</p>

<p>
You can learn more about tangling source code from org-mode here <a href="http://orgmode.org/manual/Extracting-source-code.html">http://orgmode.org/manual/Extracting-source-code.html</a> .
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary key points</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>You can organize source files in org-mode as source blocks which can be "tangled" to "real" source code.
</li>
<li>You can build into your org-file(s) even the Makefile, or other building instructions.
</li>
<li>You can even run the build program, and the resulting programs from org-mode to capture data.
</li>
<li>Once that data is in org-mode, you can reuse it in other source blocks, including other languages. 
</li>
</ol>

<p>
What benefits could there be for this? One is you work in org-mode, which allows you to structure a document in different ways than code does. You can use headings to make the hierarchy you want. You can put links in places that allow you to easily navigate the document. Second, you can build in the whole workflow into your document, from building to execution. Third, you could have a self-contained file that extracts what someone else needs, but which has documentation and explanation built into it, <i>which you wrote as you developed the program</i>, rather than as an afterthought. You can still edit each block in its native emacs-mode, and have org-mode too. That is something like having cake, <i>and eating it too</i>!
</p>

<p>
Downsides? Probably. Most IDE/project type environments are designed for code. These tools offer nice navigation between functions and files. I don't use those tools, but I imagine if you are hooked on them, you might have to learn something new this way.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Reproducing the research</title>
      <link>http://jkitchin.github.io/blog/2014/02/04/Reproducing-the-research</link>
      <pubDate>Tue, 04 Feb 2014 07:26:18 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">OtEchNZxX4zEo1pJFGOWFSZWqOs=</guid>
      <description>Reproducing the research</description>
      <content:encoded><![CDATA[


<p>
We have over the past year published a few papers using org-mode. You can find one of them here: <a href="http://pubs.acs.org/doi/abs/10.1021/ie400582a">http://pubs.acs.org/doi/abs/10.1021/ie400582a</a> . There is a corresponding <a href="http://pubs.acs.org/doi/suppl/10.1021/ie400582a/suppl_file/ie400582a_si_001.pdf">supporting information</a> file that is freely available, which contains within it an org-mode file that documents our work, and that contains the data in it. In this post, I want to explore how easy it is to access that data, and use it. First, download the file:
</p>

<div class="org-src-container">

<pre class="src src-sh">wget http://pubs.acs.org/doi/suppl/10.1021/ie400582a/suppl_file/ie400582a_si_001.pdf
</pre>
</div>

<p>
Then, open it in Acrobat Reader, and extract the org-file. I saved it as <a href="/media/2014-02-04-Reproducing-the-research/supporting-information.org">supporting-information.org</a> . In that file, there is a table of data that is the SO<sub>2</sub> adsorption and desorption capacity of a resin as a function of cycles. The table is named <code>so2-capacity-1</code>.
</p>

<p>
Here is how simple it is to grab that data, and use it. We need to use this header in our source block:
</p>
<pre class="example">
#+BEGIN_SRC python :var data=supporting-information.org:so2-capacity-1
</pre>

<p>
In the block, <code>data</code> will be a list of lists. I like to convert it into a numpy array, so that indexing it is simple to extract out the data.  
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b008b;">data</span> = np.array(data)
<span style="color: #8b008b;">cycles</span> = data[:, 0]
<span style="color: #8b008b;">ads_cap</span> = data[:, 1]
<span style="color: #8b008b;">des_cap</span> = data[:, 2]

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(cycles, ads_cap, cycles, des_cap)
plt.legend([<span style="color: #228b22;">'Ads. capacity'</span>, <span style="color: #228b22;">'Des. capacity'</span>])
plt.xlabel(<span style="color: #228b22;">'# Cycles'</span>)
plt.ylabel(<span style="color: #228b22;">'Capacity (mol/kg)'</span>)
plt.savefig(<span style="color: #228b22;">'images/si-image.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-02-04-Reproducing-the-research/si-image.png"> 
</p>
</div>

<p>
That is pretty easy. There are also Excel sheets embedded in that supporting information file, along with scripts that illustrate how to use the data in the Excel sheets for further analysis. How about that for data sharing!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/04/Reproducing-the-research.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Clocking your time in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/01/27/Clocking-your-time-in-org-mode</link>
      <pubDate>Mon, 27 Jan 2014 13:46:21 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">eul_-PiKB2MjvXvWY-xZnvloul8=</guid>
      <description>Clocking your time in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. work in subheadings</a></li>
<li><a href="#sec-2">2. Clock in to the right task</a></li>
<li><a href="#sec-3">3. Using clocking effectively</a></li>
</ul>
</div>
</div>
<p>
I have some need for tracking how much time I spend on certain jobs,
e.g. committees, etc&#x2026; because 1) I have to report this
information, 2) I need a better idea of how much time some things
take.  Org-mode supports the idea of "clocking in to a task". You run
(org-clock-in) in a heading, and it stores a time stamp. You do your
work in that heading, and when done, you (org-clock-out).
</p>

<p>
You can summarize your time with (org-clock-report) which puts a dynamic block in your file like this.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> Clock summary at <span class="timestamp-wrapper"><span class="timestamp">[2014-01-26 Sun 13:36]</span></span></caption>

<colgroup>
<col  class="left" />

<col  class="right" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Headline</th>
<th scope="col" class="right">Time</th>
<th scope="col" class="left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><b>Total time</b></td>
<td class="right"><b>0:24</b></td>
<td class="left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left"><a href="/media/2014-01-27-Clocking-your-time-in-org-mode/blog.org">Clocking your time in org-mode</a> </td>
<td class="right">0:24</td>
<td class="left">&#xa0;</td>
</tr>

<tr>
<td class="left">\__ <a href="/media/2014-01-27-Clocking-your-time-in-org-mode/blog.org">work in subheadings</a> </td>
<td class="right">&#xa0;</td>
<td class="left">0:06</td>
</tr>

<tr>
<td class="left">\__ <a href="/media/2014-01-27-Clocking-your-time-in-org-mode/blog.org">Using clocking effectively</a> </td>
<td class="right">&#xa0;</td>
<td class="left">0:05</td>
</tr>
</tbody>
</table>

<p>
You can update it by putting your cursor in the #+BEGIN line, and pressing C-c C-c.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> work in subheadings</h2>
<div class="outline-text-2" id="text-1">
<p>
It seems that the clock-in mechanism works on the heading you are
in. So whenever you clock in, it is specific to that heading. If you
clock-in more than once, multiple CLOCK entries are stored, unless you
modify org-clock-into-drawer. It seems like you probably want these CLOCK entries in a drawer, so you should put this in your init.el file:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-clock-into-drawer t)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Clock in to the right task</h2>
<div class="outline-text-2" id="text-2">
<p>
By default, (org-clock-in) creates clocks-in to the current headline. Org-mode seems to store a list of recently clocked tasks. You can access them by typing C-u C-c C-x C-i. You will be given some choices of which task to clock in to. You can switch to another task by doing this too.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Using clocking effectively</h2>
<div class="outline-text-2" id="text-3">
<p>
It will take some discipline and practice to use this effectively. It appears you can clock in any heading, and then use the clock report to aggregate all the times into one summary. That report can have a variety of scopes, from subtree to file. In that case, if you keep all relevant task information to a project in a file, you just clock in wherever you work in that file, and let the report keep track of it for you.
</p>

<p>
You could use this to track the amount of time you spend reviewing manuscripts, or doing work for a committee. You just need to remember to actually use it!
</p>

<p>
It might be interesting to setup code that would automatically clock in when you open a file, and then clock out when  you close it. Probably this would be done with hooks.
</p>

<p>
There is a nice <a href="http://sachachua.com/blog/wp-content/uploads/2014/01/2014-01-06-Tracking-time-with-Org-mode.png">map</a> of using org-mode for clocking time <a href="http://sachachua.com/blog/wp-content/uploads/2014/01/2014-01-06-Tracking-time-with-Org-mode.png">here</a> .
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/27/Clocking-your-time-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content:encoded>
    </item>
    <item>
      <title>Language specific default headers for code blocks in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode</link>
      <pubDate>Sun, 26 Jan 2014 12:06:12 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[emacs-lisp]]></category>
      <guid isPermaLink="false">dxG8WRpnI2O4piZWvxZ4X0zp34o=</guid>
      <description>Language specific default headers for code blocks in org-mode</description>
      <content:encoded><![CDATA[


<p>
I use code blocks in org-mode <i>a lot</i>. I usually code in Python, and
in Python I usually write code that prints output which I want to see. So I almost always
want the code blocks to return the output, and not the value of the
last function. I have set my default header args like this:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">org-babel-default-header-args
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">(:exports . both)</td>
<td class="left">(:results . replace output)</td>
<td class="left">(:session . none)</td>
<td class="left">(:cache . no)</td>
<td class="left">(:noweb . no)</td>
<td class="left">(:hlines . no)</td>
<td class="left">(:tangle . no)</td>
</tr>
</tbody>
</table>

<p>
However, I would prefer that emacs-lisp blocks use value for the
results. I know I can get that by putting  <code>:results value</code>  in the
code block header, but that annoys me. I learned today from
<a href="http://orgmode.org/worg/org-contrib/babel/header-args.html">http://orgmode.org/worg/org-contrib/babel/header-args.html</a> that you
can make language specific default headers!
</p>

<p>
This code in my init file sets emacs-lisp specific default headers:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-default-header-args:emacs-lisp 
      (cons '(<span style="color: #cd0000;">:results</span> . <span style="color: #228b22;">"value"</span>)
            (assq-delete-all <span style="color: #cd0000;">:results</span> org-babel-default-header-args)))
</pre>
</div>

<p>
That way I do not have type <code>:results value</code> at the top of every elisp
block. Of course, if I want the output I could specify <code>:results
output</code> in the block.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">org-babel-default-header-args:emacs-lisp
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">(:results . value)</td>
<td class="left">(:exports . both)</td>
<td class="left">(:session . none)</td>
<td class="left">(:cache . no)</td>
<td class="left">(:noweb . no)</td>
<td class="left">(:hlines . no)</td>
<td class="left">(:tangle . no)</td>
</tr>
</tbody>
</table>

<p>
Problem solved!
</p>

<p>
On a related note, I find I write so many blocks of python and elisp I
added these templates:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">add &lt;p for python expansion</span>
(add-to-list 'org-structure-template-alist
             '(<span style="color: #228b22;">"p"</span> <span style="color: #228b22;">"#+BEGIN_SRC python\n?\n#+END_SRC"</span> <span style="color: #228b22;">"&lt;src lang=\"python\"&gt;\n?\n&lt;/src&gt;"</span>))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">add &lt;el for emacs-lisp expansion</span>
(add-to-list 'org-structure-template-alist
             '(<span style="color: #228b22;">"el"</span> <span style="color: #228b22;">"#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"</span> <span style="color: #228b22;">"&lt;src lang=\"emacs-lisp\"&gt;\n?\n&lt;/src&gt;"</span>))
</pre>
</div>

<p>
I probably could have also coded the :results header into those
too. They add a tidbit of convenience so I do not have to type python
or emacs-lisp after expanding a source block with &lt;s.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content:encoded>
    </item>
    <item>
      <title>Making org-mode links to files in Emacs packages</title>
      <link>http://jkitchin.github.io/blog/2014/01/19/Making-org-mode-links-to-files-in-Emacs-packages</link>
      <pubDate>Sun, 19 Jan 2014 12:42:27 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">z8Kq_lVzx94dz_gdyi9gEF6DJH0=</guid>
      <description>Making org-mode links to files in Emacs packages</description>
      <content:encoded><![CDATA[


<p>
Today I will make a new org-mode link that lets me make links to files inside of Emacs packages. These files may be installed in different places on different systems (e.g. in the system directory, in ELPA directories, or in custom directories), so we need a way to construct paths to them. The application of this is eventually I hope to have some emacs packages of documentation, and I would like to have links between the packages that work no matter how they are installed.
</p>

<p>
I want a syntax that looks like pkg:rainbow-mode==rainbow-mode-pkg.el. We will have a function that parses that to get the package, and the path to the file in the package. Emacs has a function to find the path to the file that defines a library. I chose == because it seems unlikely that would be a string in a package or path. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(locate-library <span style="color: #228b22;">"rainbow-mode"</span>)
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/rainbow-mode-0.9/rainbow-mode.elc
</pre>

<p>
We can use that to construct the path to where we want. Say we want the file named "rainbow-mode-pkg.el"
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(expand-file-name
 <span style="color: #228b22;">"rainbow-mode-pkg.el"</span>
 (file-name-directory (locate-library <span style="color: #228b22;">"rainbow-mode"</span>)))
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/rainbow-mode-0.9/rainbow-mode-pkg.el
</pre>

<p>
In org-mode links, the link path gets passed to a function. We can split the string like this to get the package and relative path we are referring to.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(split-string <span style="color: #228b22;">"rainbow-mode==rainbow-mode-pkg.el"</span> <span style="color: #228b22;">"=="</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">rainbow-mode</td>
<td class="left">rainbow-mode-pkg.el</td>
</tr>
</tbody>
</table>

<p>
That is all of the pieces we need to construct the link function. Here it is.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"pkg"</span>
 (<span style="color: #8b0000;">lambda</span> (path)
   (<span style="color: #8b0000;">let</span> ((pkg) (relpath)
         (splitpath (split-string path <span style="color: #228b22;">"=="</span>)))
     (setq pkg (car splitpath))
     (setq relpath (nth 1 splitpath))
     (find-file (expand-file-name 
                 relpath 
                 (file-name-directory (locate-library pkg)))))))
</pre>
</div>

<p>
pkg:rainbow-mode==rainbow-mode-pkg.el  
</p>

<p>
This works too, but you have to use auctex-pkg as the package name. 
</p>

<p>
pkg:auctex-pkg==doc/intro.texi 
</p>

<p>
I think that is because locate-library looks for the <i>file</i> a library is defined in. That is not quite the same as the root directory of a package. It turns out to be a little more complicated to find that. Below is some code I hacked up looking at the package.el code. First let us examine some pieces.
</p>

<p>
This gives us information about an installed package. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(assq 'auctex package-alist)
</pre>
</div>

<pre class="example">
(auctex . [(11 87 2) nil Integrated environment for *TeX*])
</pre>

<p>
We can get the version of the package like this
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(package-version-join (package-desc-vers (cdr (assq 'auctex package-alist))))
</pre>
</div>

<pre class="example">
11.87.2
</pre>

<p>
Ok, finally, we get the directory where it is installed like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(package--dir <span style="color: #228b22;">"auctex"</span> <span style="color: #228b22;">"11.87.2"</span>)
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/auctex-11.87.2
</pre>

<p>
Note that in some places we use a package symbol, and in other places a string name.Putting that together, we have this block to get the install-dir of a package. If we have a package symbol we can get the path like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((pkg 'auctex)
       (pkg-name (symbol-name pkg)) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">convert symbol to string</span>
       (desc (cdr (assq pkg package-alist)))
       (version (package-version-join (package-desc-vers desc)))
       (pkg-dir (package--dir pkg-name version)))
  pkg-dir)
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/auctex-11.87.2
</pre>

<p>
Usually, we will have a string though. We just have to make it a symbol with the <code>intern</code> function. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq pkg-name <span style="color: #228b22;">"auctex"</span>)
(setq pkg (intern pkg-name))
(setq desc (cdr (assq pkg package-alist)))
</pre>
</div>

<pre class="example">
[(11 87 2) nil "Integrated environment for *TeX*"]
</pre>

<p>
Now, we have all the pieces to get the path from a package name in a string:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((pkg-name <span style="color: #228b22;">"auctex"</span>)
       (pkg (intern pkg-name))
       (desc (cdr (assq pkg package-alist)))
       (version (package-version-join (package-desc-vers desc)))
       (pkg-dir (package--dir pkg-name version)))
  pkg-dir)
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/auctex-11.87.2
</pre>

<p>
Let us use that to rewrite the link, and address a few other limitations. We will  use <code>org-open-link-from-string</code> so we can use org-link syntax in the path part of the link, e.g. to open a file at a line, or headline. Here is our new link.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"pkg2"</span>
 (<span style="color: #8b0000;">lambda</span> (path)
   (<span style="color: #8b0000;">let</span> ((pkg) (relpath) (pkg-dir) (link-string)
         (splitpath (split-string path <span style="color: #228b22;">"=="</span>)))
     (setq pkg-name (car splitpath))
     (setq relpath (nth 1 splitpath))
     (setq pkg-dir (<span style="color: #8b0000;">let*</span> ((pkg-symbol (intern pkg-name)) <span style="color: #ff0000; font-weight: bold;">;</span><span style="color: #ff0000; font-weight: bold;">convert string to pkg                   </span>
                          (desc (cdr (assq pkg-symbol package-alist)))
                          (version (package-version-join (package-desc-vers desc)))
                          (pkg-dir (package--dir pkg-name version)))
                     pkg-dir))
     (setq link-string (format <span style="color: #228b22;">"[[file:%s/%s]]"</span> pkg-dir relpath))
     (message <span style="color: #228b22;">"link: %s"</span> link-string)
     (org-open-link-from-string link-string))))
</pre>
</div>

<p>
Now, we can do all of these: 
pkg2:auctex==doc/faq.texi   
pkg2:auctex==doc/faq.texi::should 
pkg2:auctex==doc/faq.texi::10 
<pre>pkg2:auctex==doc/faq.texi::first place</pre> 
</p>

<p>
Awesome!
</p>

<p>
Just for fun, I made a toy package called <code>package1</code> in my elpa directory. That package has an org file in it. Now, I can test out the following links:
</p>

<p>
pkg2:package1==intro.org 
</p>

<p>
pkg2:package1==intro.org::*Miscellaneous
</p>

<p>
<pre>pkg2:package1==intro.org::*subheading with words</pre> 
</p>

<p>
pkg2:package1==intro.org::#install-section
</p>

<p>
pkg2:package1==intro.org::intro-target
</p>

<p>
They all work! That works for packages installed via the package manager. However, when I try this with my custom installed org-mode, it does not work. If I run (describe-package 'org) I see that org is a build in package, and that there is an alternate version available. It does not point to my org-installation.
</p>

<p>
pkg2:org==doc/library-of-babel.org 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(princ (locate-library <span style="color: #228b22;">"org"</span>))
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/org-mode/lisp/org.elc
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(princ (package-installed-p <span style="color: #228b22;">"org"</span>))
</pre>
</div>

<pre class="example">
nil
</pre>

<p>
Obviously, we need to check if the package is installed via package.el, or if we should look somewhere else. Let us take a final stab at this. Let us review the challenge. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(print (locate-library <span style="color: #228b22;">"auctex"</span>))
(print (locate-library <span style="color: #228b22;">"auctex-autoloads"</span>))
</pre>
</div>

<pre class="example">
nil

"c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/auctex-11.87.2/auctex-autoloads.el"
</pre>

<p>
We may have to check for a package-autoloads. Ww can wrap that in an <code>or</code> macro, which will return the first non-nil result.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((pkg-name <span style="color: #228b22;">"auctex"</span>))
   (file-name-directory 
    (or (locate-library pkg-name)
        (locate-library (format <span style="color: #228b22;">"%s-autoloads"</span> pkg-name)))))
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/elpa/auctex-11.87.2/
</pre>

<p>
Doing this on the org package shows that this points to a lisp directory. 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((pkg-name <span style="color: #228b22;">"org"</span>))
   (file-name-directory 
    (or (locate-library pkg-name)
        (locate-library (format <span style="color: #228b22;">"%s-autoloads"</span> pkg-name)))))
</pre>
</div>

<pre class="example">
c:/Users/jkitchin/Dropbox/kitchingroup/jmax/org-mode/lisp/
</pre>

<p>
So, let's try a final link function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"pkg3"</span>
 (<span style="color: #8b0000;">lambda</span> (path)
   (<span style="color: #8b0000;">let</span> ((pkg-name) (relpath)(pkg-dir) (link-string)
         (splitpath (split-string path <span style="color: #228b22;">"=="</span>)))
     (setq pkg-name (car splitpath))
     (setq relpath (nth 1 splitpath))
     (setq pkg-dir (file-name-directory 
                    (or (locate-library pkg-name)
                        (locate-library (format <span style="color: #228b22;">"%s-autoloads"</span> pkg-name)))))
(setq link-string (format <span style="color: #228b22;">"[[file:%s/%s]]"</span> pkg-dir relpath))
     (message <span style="color: #228b22;">"link: %s"</span> link-string)
     (org-open-link-from-string link-string))))
</pre>
</div>

<p>
Now, we just have to make sure to use the right relative path. This link opens up an org-file in my installed version of org-mode: <pre>pkg3:org==../doc/library-of-babel.org</pre> 
</p>

<p>
I don't know if there is a more clever way to create these links. There are two parts to them: 1) the package, and 2) the relative path. The link syntax isn't that rich to do it without parsing the linkpath.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/19/Making-org-mode-links-to-files-in-Emacs-packages.org">org-mode source</a><p><p>Org-mode version = 8.2.5f</p>]]></content:encoded>
    </item>
    <item>
      <title>A function to save an org-file for submitting assignments in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/01/01/A-function-to-save-an-org-file-for-submitting-assignments-in-org-mode</link>
      <pubDate>Wed, 01 Jan 2014 14:55:33 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">E9aWzp8HRO9mHYQzqjZOD8Fnlrs=</guid>
      <description>A function to save an org-file for submitting assignments in org-mode</description>
      <content:encoded><![CDATA[



<p>
I am going to be assigning homeworks and quizzes in org-mode next semester, and it would be nice if there was a function that would save the file with the right name in the right place. The file will have some keywords at the top to identify the student, course and assignment. Those look like:
</p>
<pre class="example">
#+NAME: John Kitchin
#+ANDREWID: jkitchin
#+COURSE: 06-640
#+ASSIGNMENT: quiz1
</pre>

<p>
I would like a function that saves the current buffer to a file like /some-path/ANDREWID-COURSE-ASSIGNMENT.org. That will be "turning the assignment in" so I can do some analysis of the files. I previously wrote about getting keywords from org-files <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/05/05/Getting-keyword-options-in-org-files/">here</a> . We will build on that to accomplish this goal. Here is the function that seems to do what I want. For now it saves the file in the same directory, with the correct name.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">submit-assignment</span> ()
  <span style="color: #228b22;">"Save current buffer to assignment. You must set #+ANDREWID, #+COURSE and #+ASSIGNMENT. There is no checking for this."</span>
  (interactive)
  (save-buffer)
  (<span style="color: #8b0000;">let</span> ((org-keywords (org-element-map (org-element-parse-buffer 'element) 'keyword
                        (<span style="color: #8b0000;">lambda</span> (keyword) (cons (org-element-property <span style="color: #cd0000;">:key</span> keyword)
                                                (org-element-property <span style="color: #cd0000;">:value</span> keyword)))))
        (assignment-content (buffer-string)) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">store contents to write to file later</span>
        (assignment-filename))
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">create the filename we will save the buffer in</span>
    (setq assignment-filename (concat (cdr (assoc <span style="color: #228b22;">"ANDREWID"</span> org-keywords))
                                      <span style="color: #228b22;">"-"</span>
                                      (cdr (assoc <span style="color: #228b22;">"COURSE"</span> org-keywords))
                                      <span style="color: #228b22;">"-"</span>
                                      (cdr (assoc <span style="color: #228b22;">"ASSIGNMENT"</span> org-keywords))
                                      <span style="color: #228b22;">".org"</span>))
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">now write out contents to filename</span>
    (<span style="color: #8b0000;">with-temp-file</span> assignment-filename
      (insert assignment-content))
    (message <span style="color: #228b22;">"%s was submitted"</span> assignment-filename)))

(submit-assignment)
</pre>
</div>

<pre class="example">
jkitchin-06-640-quiz1.org was submitted
</pre>

<p>
Now, we have a nice function that can be put as a link in the org-file: <pre>elisp:submit-assignment</pre> , or <pre>elisp:submit-assignment</pre> . The assignment will be copied to a location specified, and I can grade it, assess it, etc&#x2026; from there. That function will have to be loaded by students, but since I provide them with lisp files that are loaded at startup that should not be an issue. 
</p>

<p>
This solution lacks some features I have to think about. For example, if the path where everyone submits to is common, everyone will be able to read the file, which is not desirable. It is also not feasible to make the submitted files read-only to the students this way (so they cannot modify the files after they turn them in). I could have the submit function do something like submit to box.com by email.
</p>

<p>
I am not sure how grading of these files would go. In the past, I have preferred PDF files (which you can export org to) because I could grade them using a tablet without modifying the actual content in the files. However it would not be simple at all to export an org-file to PDF with that data in a machine readable way. One point of having them in org-mode is that I could collect statistics from the headings of many files pretty easily. I have written code to annotate org-files in the past, which I might have to dig out. 
</p>

<p>
There is a limitation of the submit function, and that is if the org-file references images or other files (I would expect many of my assignments would have plots in them). Those would not be copied to the right place. I handle those when I publish the blog, so it could be done. But, it would require creating a new directory, and writing all the files to it (including making sure the relative paths are handled correctly), or creating some kind of zip-archive that contains everything. That sounds like a project for another day!
</p>

<div class="inlinetask">
<b><span class="todo TODO">TODO</span> rewrite the submit-assignment function to copy any images or files it links to into the submission directory</b><br  />
nil</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/01/A-function-to-save-an-org-file-for-submitting-assignments-in-org-mode.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Interactive quizzes with feedback in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/01/01/Interactive-quizzes-with-feedback-in-org-mode</link>
      <pubDate>Wed, 01 Jan 2014 12:58:23 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">Goqt9MyRGsIYDPJ-kMPHADFOtV8=</guid>
      <description>Interactive quizzes with feedback in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. What is 2 + 4?</a></li>
<li><a href="#sec-2">2. Lets make a custom link for this</a></li>
<li><a href="#sec-3">3. Storing quiz answers and number of attempts</a></li>
<li><a href="#sec-4">4. Using inline tasks instead of headings</a></li>
<li><a href="#sec-5">5. Concluding thoughts</a></li>
</ul>
</div>
</div>

<p>
I have been exploring ways to facilitate learning and grading. One way I like is to provide quizzes inline with text
Here are some examples of "interactive" quizzes with feedback to the user in org-mode. The principle idea is to use a headline for the question, and use properties to hold the answer. The answers are coded into links that run lisp code to check if the link text matches the correct answer. The properties are folded, so you have to willfully cheat to look at the answer. For getting instant feedback, this isn't such an issue. These aren't for formal assessment, but for knowledge checkpoints in active learning.
</p>

<p>
Blog alert: The links may only work in the actual org-file in Emacs, they will not function in html.  
</p>

<p>
Here is an example in a subheading. These links play an amusing sound (crowd cheers for correct answer, a buzzer for a wrong answer). The sounds are stored locally with the file. This gives students immediate feedback on their answer. These might be incorporated into reading assignments.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> What is 2 + 4?</h2>
<div class="outline-text-2" id="text-1">
<p>
a) <pre>elisp:(if (string= "4" (org-entry-get (point) "CORRECT-ANSWER"))  (play-sound-file "sounds/99636__tomlija__small-crowd-yelling-yeah.wav" 0.91 nil) (play-sound-file "sounds/fail-buzzer-01.wav" 0.91 nil))</pre> 
</p>

<p>
b) <pre>elisp:(if (string= "6" (org-entry-get (point) "CORRECT-ANSWER"))  (play-sound-file "sounds/99636__tomlija__small-crowd-yelling-yeah.wav" 0.91 nil) (play-sound-file "sounds/fail-buzzer-01.wav" 0.91 nil))</pre> 
</p>

<p>
c) <pre>elisp:(if (string= "-2" (org-entry-get (point) "CORRECT-ANSWER"))  (play-sound-file "sounds/99636__tomlija__small-crowd-yelling-yeah.wav" 0.91 nil) (play-sound-file "sounds/fail-buzzer-01.wav" 0.91 nil))</pre> 
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Lets make a custom link for this</h2>
<div class="outline-text-2" id="text-2">
<p>
Hand coding the links isn't very convenient. Let us write an org-link function that is more convenient. This new function will also record the number of correct and incorrect attempts. You could hard code some sound into them, but I did not do that here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"ans"</span> 
 (<span style="color: #8b0000;">lambda</span> (path) 
   (<span style="color: #8b0000;">let*</span> ((correct-answer (org-entry-get (point) <span style="color: #228b22;">"CORRECT-ANSWER"</span>))
          (ncorrect (org-entry-get (point) <span style="color: #228b22;">"NUM-CORRECT"</span>))
          (num-correct (<span style="color: #8b0000;">if</span> ncorrect (string-to-number ncorrect) 0))
          (nincorrect (org-entry-get (point) <span style="color: #228b22;">"NUM-INCORRECT"</span>))
          (num-incorrect (<span style="color: #8b0000;">if</span> nincorrect (string-to-number nincorrect) 0)))
     (<span style="color: #8b0000;">if</span> (string= path correct-answer) 
         (<span style="color: #8b0000;">progn</span>
          (org-entry-put (point) <span style="color: #228b22;">"NUM-CORRECT"</span> (number-to-string (+ num-correct 1)))
          (message <span style="color: #228b22;">"correct"</span>))
       (org-entry-put (point) <span style="color: #228b22;">"NUM-INCORRECT"</span> (number-to-string (+ num-incorrect 1)))
       (message <span style="color: #228b22;">"incorrect"</span>)))))
</pre>
</div>

<p>
That function was a bit trickier than I thought it would be. First, I used let* because the first time you click on a link the correct answer counters may not exist, so getting the property would return nil. If it is nil, then we should initialize to 0. If it is not nil, we need to convert the string that is returned to an integer so we can add to it later. Then, we need to convert that integer back to a string to store it as a property, otherwise it is stored as some strange control character. 
</p>

<p>
Now, we can put our question in.
question: Is 3 greater than 2?
</p>

<p>
Here are the new links:  <pre>ans:yes</pre> <pre>ans:no</pre> 
</p>


<p>
That function goes along way to making it pretty easy to write the answers. One limitation here is that you can only put one question per section. We address that later. It is still easy to cheat if you want. We could do a few things to make that harder. One idea would be to encrypt the answers, and compare the hash of the answers. Another is to just record what was clicked on, and then grade it later. In the next section we try that out.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a id="ID-fa6cc63f-e2da-47a7-9721-cb970dde335e" name="ID-fa6cc63f-e2da-47a7-9721-cb970dde335e"></a><span class="section-number-2">3</span> Storing quiz answers and number of attempts</h2>
<div class="outline-text-2" id="text-3">

<p>
Here, we store the answer, and number of attempts. Students won't get feedback from this approach, but they cannot cheat either. They could just type answers in to the org-file, but this approach is like a Scantron multiple choice exam that could be automatically graded later. You could use something like this as an electronic clicker to quickly assess everyone's understanding of some concepts.
</p>

<p>
Here is our new link function.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"ans2"</span> 
 (<span style="color: #8b0000;">lambda</span> (path) 
   (org-entry-put (point) <span style="color: #228b22;">"ANSWER"</span> path)
   (<span style="color: #8b0000;">let*</span> ((nattempts (org-entry-get (point) <span style="color: #228b22;">"NUM-ATTEMPTS"</span>))
          (num-attempts (<span style="color: #8b0000;">if</span> nattempts (string-to-number nattempts) 0)))
     (org-entry-put (point) <span style="color: #228b22;">"NUM-ATTEMPTS"</span> (number-to-string (+ num-attempts 1))))
   (message <span style="color: #228b22;">"You selected %s for your answer"</span> path)))
</pre>
</div>

<p>
And now a question: Is 3 greater than 2?
<pre>ans2:yes</pre> <pre>ans2:no</pre> 
</p>

<p>
This way works very well. It might also be a good idea to give each question a unique id (org-id-get-create) so you can collect specific results. 
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Using inline tasks instead of headings</h2>
<div class="outline-text-2" id="text-4">
<p>
If you were integrating these into a book, it would be inconvenient to use headings because they would mess up the outline. We can use inline tasks instead.
</p>

<div class="inlinetask">
<b>Is 3 greater than 2?</b><br  />
<p>
<pre>ans2:yes</pre> <pre>ans2:no</pre> 
</p>
</div>

<p>
This adds some additional lines, but does not change the heading level. We can put multiple questions in then.
</p>

<div class="inlinetask">
<b>What is 4*4?</b><br  />
<p>
<pre>ans2:16</pre> <pre>ans2:18</pre> <pre>ans2:8</pre> 
</p>
</div>

<p>
Interesing, I noticed in this last example that a link path must have at least two characters to be automatically recognized by org-mode. I had to put double square brackets to make it a link!
</p>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Concluding thoughts</h2>
<div class="outline-text-2" id="text-5">
<p>
This seems like a pretty promising approach to getting structured input from students. You would have to invest some time training them to use emacs and org-mode, and not modify the file in ways they are not supposed to.  You would also have to invest some time in writing analysis code to collect all the answers and analyze them somehow. I do not think that would be too hard though, and the payoff could be large. By giving students quick feedback they could have a better understanding of what they know, and might ask better questions. This could be a useful approach to active learning activities that students work on while reading.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/01/Interactive-quizzes-with-feedback-in-org-mode.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Using data in a table in another org-file</title>
      <link>http://jkitchin.github.io/blog/2013/12/22/Using-data-in-a-table-in-another-org-file</link>
      <pubDate>Sun, 22 Dec 2013 13:42:20 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">aeIM97NA8yqsLEfD__mDwVe0aBE=</guid>
      <description>Using data in a table in another org-file</description>
      <content:encoded><![CDATA[


<p>
I have found using tables in an org-file as data sources to code blocks very convenient for documenting work. A typical work flow might go like this:
</p>
<ol class="org-ol">
<li>Use a code block to generate some data in an org-table.
</li>
<li>Use another code block to analyze the data.
</li>
</ol>

<p>
For example, here is a code block that prints data in a table <sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'#+tblname: cos-data'</span>
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'| x | cos(x)|'</span>
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'|-'</span>

<span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> np.linspace(0, 2*np.pi, 10):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'|{0}|{1}|'</span>.<span style="color: #cd0000;">format</span>(x, np.cos(x))
</pre>
</div>

<table id="cos-data" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">cos(x)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">0.0</td>
<td class="right">1.0</td>
</tr>

<tr>
<td class="right">0.698131700798</td>
<td class="right">0.766044443119</td>
</tr>

<tr>
<td class="right">1.3962634016</td>
<td class="right">0.173648177667</td>
</tr>

<tr>
<td class="right">2.09439510239</td>
<td class="right">-0.5</td>
</tr>

<tr>
<td class="right">2.79252680319</td>
<td class="right">-0.939692620786</td>
</tr>

<tr>
<td class="right">3.49065850399</td>
<td class="right">-0.939692620786</td>
</tr>

<tr>
<td class="right">4.18879020479</td>
<td class="right">-0.5</td>
</tr>

<tr>
<td class="right">4.88692190558</td>
<td class="right">0.173648177667</td>
</tr>

<tr>
<td class="right">5.58505360638</td>
<td class="right">0.766044443119</td>
</tr>

<tr>
<td class="right">6.28318530718</td>
<td class="right">1.0</td>
</tr>
</tbody>
</table>

<p>
Now, we use that table in a code block to plot the data. We do this by using some header arguments to the code block:
</p>

<pre class="example">
#+BEGIN_SRC python :var data=cos-data
</pre>

<p>
Then we can use the <code>data</code> variable inside the code block like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b008b;">data</span> = np.array(data) <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">data is a list coming in</span>
<span style="color: #8b008b;">x</span> = data[:, 0]
<span style="color: #8b008b;">y</span> = data[:, 1]
plt.plot(x, y)
plt.xlabel(<span style="color: #228b22;">'x'</span>)
plt.ylabel(<span style="color: #228b22;">'cos(x)'</span>)
plt.savefig(<span style="color: #228b22;">'images/cos-plot.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2013-12-22-Using-data-in-a-table-in-another-org-file/cos-plot.png"> 
</p>
</div>

<p>
That is pretty awesome, but what if we have data in a table from another org-file? It turns out we can use it too. I have data for the sin(x) stored in a table called <code>sin-data</code> in <a href="/media/2013-12-22-Using-data-in-a-table-in-another-org-file/sin.org">sin.org</a> , which I now want to use. We can access that table like this in a header arg:
</p>

<pre class="example">
#+BEGIN_SRC python :var data=sin.org:sin-data
</pre>

<p>
And now use the data variable just like before!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b008b;">data</span> = np.array(data) <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">data is a list coming in</span>
<span style="color: #8b008b;">x</span> = data[:, 0]
<span style="color: #8b008b;">y</span> = data[:, 1]
plt.plot(x, y)
plt.xlabel(<span style="color: #228b22;">'x'</span>)
plt.ylabel(<span style="color: #228b22;">'sin(x)'</span>)
plt.savefig(<span style="color: #228b22;">'images/sin-plot.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2013-12-22-Using-data-in-a-table-in-another-org-file/sin-plot.png"> 
</p>
</div>

<p>
This is a powerful capability, as it allows you to pull data from other files into your current analysis. For example, the supporting information files from some of our recent publications have org-files embedded in them with data stored in org-tables. You could use that data in your own analysis without having to type it in yourself. The only thing you need to do is make sure each table in a document is uniquely named.
</p>

<p>
Special thanks to Eric Schulte for pointing out the syntax for using external tables!
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p>
You will have to read the raw org-source to see how the code-block arguments look.
</p></div>


</div>
</div><p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/12/22/Using-data-in-a-table-in-another-org-file.org">org-mode source</a><p><p>Org-mode version = 8.2.5c</p>]]></content:encoded>
    </item>
  </channel>
</rss>
