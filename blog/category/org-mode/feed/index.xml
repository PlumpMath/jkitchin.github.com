<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Tue, 13 May 2014 15:26:19 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Using org-ref for citations and references</title>
      <link>http://jkitchin.github.io/blog/2014/05/13/Using-org-ref-for-citations-and-references</link>
      <pubDate>Tue, 13 May 2014 11:25:24 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">0cXdRm9M5p4qE915ukRqSAsoI98=</guid>
      <description>Using org-ref for citations and references</description>
      <content:encoded><![CDATA[



<p>
<a href="https://github.com/jkitchin/jmax/blob/master/org-ref.org">org-ref</a> is an emacs-lisp module to handle bibliographic citations, and references to figures, tables and sections in org-mode. It was written first for use in org-mode, and for reasonable export to LaTeX. It does not work well for any other export (eg HTML) for now. The goal of org-ref is to make it easy to add citations, and that the citations be useful, clickable links. Below, I illustrate some of those features.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Installation</h2>
<div class="outline-text-2" id="text-1">
<p>
You can get the source here: <a href="https://github.com/jkitchin/jmax/blob/master/org-ref.org">https://github.com/jkitchin/jmax/blob/master/org-ref.org</a> . This is an org-mode file, and you can load it with
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-load-file "org-ref.org")
</pre>
</div>

<p>
That should be all you need for basic usage.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Basic usage for citations</h2>
<div class="outline-text-2" id="text-2">
<p>
org-ref was written with bibtex in mind. We will discuss customization to use biblatex later.
</p>

<p>
The first thing you should do is add a <pre>bibliography</pre> link to your document. This link is usually put at the end of the document, where you want the bibliography to be printed in a LaTeX export. Use the filename of the bibliography with its extension in the link, and you can use multiple files if they are separated by commas. The bibliography link is clickable, and it will open the bibliography that you clicked on. Depending on the LaTeX class you are exporting to, you may also need to set a bibliographystye.
</p>

<p>
Out of the box, org-ref binds the key "C-c ]" to insert a citation. That key runs the command org-ref-insert-cite-link, which will prompt you for a regular expression to search your bibliographies for. The search is done using reftex, so you can mark several entries at once, and they will be added as a citation link. The actual kind of link used is dependent on the value of org-ref-default-citation-link, which defaults to cite. 
</p>

<p>
If your cursor is on a citation link, or at the end of the link, you can run the command again to append new citations to the link. The new entries are separated by commas. The links are clickable, and when you click on them you will see a message in the minibuffer with the citation, and options to open the entry, open a pdf (if you have it), open the url (if the entry has one), or to open notes about the entry. You get this menu for the entry that you clicked on.
</p>

<p>
If you want a different type of citation, type C-u C-c ]. You will be prompted for a format, and you can choose a different type of link format. Most bibtex formats are supported, and some biblatex formats are supported.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Basic usage for references</h2>
<div class="outline-text-2" id="text-3">
<p>
The other use of org-ref is for references to labels in your document. You can put labels in figure and table captions, and then reference them in your document. The label link is clickable, and when you click on it there will be a message in the minibuffer telling you how many labels of that name were found (it should be one).
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> An uninteresting table. <pre>ref:tab-boring</pre> </caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">0</td>
<td class="right">3</td>
</tr>

<tr>
<td class="right">4</td>
<td class="right">7</td>
</tr>
</tbody>
</table>

<p>
You can then refer to Table <pre>eqref:eq-exp</pre> . The ref links are also clickable, and they take you to the spot where the label is defined. You can enter ref links with completion. Press C-c C-l, type ref, press enter, and then press tab. You will get a list of the labels defined in the buffer you can choose from. There are many things you can make a ref to including a tblname, a label link, an explicit \label{}, and an org-mode #+label: line.
</p>

<p>
There is an eqref link that is used for equations. You must use LaTeX labels in the equation for this.
</p>

<p>
\[e^x = 4 \label{eq-exp} \]
</p>

<p>
You can see in <pre>list-of-tables:lot</pre> the problem to solve.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Miscellaneous links</h2>
<div class="outline-text-2" id="text-4">
<p>
There are two link types for generating a LateX list of tables and list of figures. These links are clickable, and they open a temporary buffer with a list of the tables or figures that you can click on. They export to \listoftables and \listoffigures
</p>

<p>

</p>

<p>

</p>

<p>
You can run these as commands, <pre>list-of-figures:lof</pre> and <pre>elisp:org-ref-list-of-tables</pre> if you do not want a list of those things in your exported document.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Customization</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Default bibliography, pdf directory,</h3>
<div class="outline-text-3" id="text-5-1">
<p>
This is an optional configuration, but it is handy to define a default bibliography so that you can add citations to an org-file without defining a bibliography link. I store all pdfs of bibtex entries in the directory defined by org-ref-pdf-directory, and by the name of the bibtex entry label. This enables org-ref to open the pdf if it can find it. The notes file is optional, I create org-entries for each bibtex entry, which I have experimented with various ways of organizing them with tags, and in topical headings.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
      org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
      org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> New key binding</h3>
<div class="outline-text-3" id="text-5-2">
<p>
The default key binding to insert a citation is C-c ]. I chose that because I do not like pressing shift to get ). However, this key binding usurps an org-mode agenda file command. To change this, set this variable
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-ref-insert-cite-key "C-c )")
</pre>
</div>

<ul class="org-ul">
<li>You may have to restart emacs to get C-c ] back.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> Default link type</h3>
<div class="outline-text-3" id="text-5-3">
<p>
If you use another citation type alot, you may change the default link type. For example, you may prefer autocite links by default. Just set it like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-ref-default-citation-link "autocite")
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> New citation types</h3>
<div class="outline-text-3" id="text-5-4">
<p>
There are so many citation types between bibtex and biblatex. I did not try to add them all. You can add new citation links yourself in your init file. Here, we add a new cite link called citez, and assign a reftex menu key of z to it. This function automatically adds the new link to org-mode, with the citation menu functionality, creates the completion function, and adds the citation to the list of known types.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-ref-define-citation-link "citez" ?z)
</pre>
</div>

<p>
It is assumed that this will be exported as \citez[optional stuff]{label}. If you need more flexibility than that, you will have to define everything manually.
</p>

<p>
For example, the original cite link was defined like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun org-ref-cite-link-format (keyword desc format)
   (cond
    ((eq format 'html) (format "(&lt;cite&gt;%s&lt;/cite&gt;)" path))
    ((eq format 'latex)
     (concat "\\cite" (when desc (format "[%s]" desc)) "{"
	     (mapconcat (lambda (key) key) (org-ref-split-and-strip-string keyword) ",")
	     "}"))))

(org-add-link-type
 "cite"
 'org-ref-cite-onclick-minibuffer-menu ;; clicking function
 'org-ref-cite-link-format) ;; formatting function
</pre>
</div>

<p>
You should also add your new citation type to the list of org-ref-cite-types.
</p>
</div>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Summary</h2>
<div class="outline-text-2" id="text-6">
<p>
This covers most of the basic org-ref functionality. There are also several utility functions for interacting with org-buffers and bibtex files that will be described later.
</p>


<p>

</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/05/13/Using-org-ref-for-citations-and-references.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
    <item>
      <title>Finding missing citation entries in an org-file</title>
      <link>http://jkitchin.github.io/blog/2014/04/29/Finding-missing-citation-entries-in-an-org-file</link>
      <pubDate>Tue, 29 Apr 2014 10:37:51 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[bibtes]]></category>
      <guid isPermaLink="false">w1ZsdzsG-Q0zDmB-YyEtI5sFYcA=</guid>
      <description>Finding missing citation entries in an org-file</description>
      <content:encoded><![CDATA[



<p>
Today we consider how to find citations in a document that have no corresponding entries in a bibtex file. There are a couple of pieces to this which we work out in stages below. First, we specify the bibtex file using a bibliography link defined in jorg-bib.el. 
</p>


<p>

</p>

<p>
jorg-bib provides a function that gives us the relevant bibliography files found in this file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(cite-find-bibliography)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">bib1.bib</td>
<td class="left">bib2.bib</td>
</tr>
</tbody>
</table>

<p>
We can get a list of keys in these files 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(let ((bibtex-files (cite-find-bibliography)))
(bibtex-global-key-alist))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">(adams-1993-orien-imagin . t)</td>
<td class="left">(aarik-1997-effec-tio2 . t)</td>
<td class="left">(aruga-1985-struc-iron . t)</td>
</tr>
</tbody>
</table>


<p>
Now, here are some citations that we want to include in this document.
</p>

<p>
<pre>cite:aruga-1985-struc-iron,aarik-1997-effec-tio2</pre> 
</p>

<p>
Here is a citation that is not in the bibtex file <pre>cite:kitchin-2016-nobel-lecture</pre> 
</p>


<p>
To find out if any of these are missing, we need a list of the citation keys in this document. We first get all the content from the cite links.  We parse the buffer, and for each cite link, we get the path of the link, which contains our keys.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(let ((parsetree (org-element-parse-buffer)))
  (org-element-map parsetree 'link
    (lambda (link)       
      (let ((type (nth 0 link))
            (plist (nth 1 link))
            (content (nth 2 link)))
	(when (equal (plist-get plist ':type) "cite")
	  (plist-get plist ':path))))))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">aruga-1985-struc-iron,aarik-1997-effec-tio2</td>
<td class="left">kitchin-2016-nobel-lecture</td>
</tr>
</tbody>
</table>

<p>
That is almost what we need, but we need to separate the keys that are joined by commas. That function already exists in jorg-bib as cite-split-keys. We need to make a slight variation to get a list of all the entries, since the cite-split-keys returns a list of entries for each link. Here is on approach to that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(let ((parsetree (org-element-parse-buffer))
      (results '()))
  (org-element-map parsetree 'link
    (lambda (link)       
      (let ((plist (nth 1 link)))
	(when (equal (plist-get plist ':type) "cite")
	  (setq results (append results (cite-split-keys (plist-get plist ':path))))))))
results)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">aruga-1985-struc-iron</td>
<td class="left">aarik-1997-effec-tio2</td>
<td class="left">kitchin-2016-nobel-lecture</td>
</tr>
</tbody>
</table>

<p>
Ok, now we just need to check each entry of that list against the list of entries in the bibtex files, and highlight any that are not good. We use an index function below to tell us if an element is in a list. This index function works for strings. We use the strange remove-if-not function, which requires something like triple negative logic to get the list of keys that are not in the bibtex files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(require 'cl)

(defun index (substring list)
  "return the index of string in a list of strings"
  (let ((i 0)
	(found nil))
    (dolist (arg list i)
      (if (string-match substring arg)
	  (progn 
	    (setq found t)
	    (return i)))
      (setq i (+ i 1)))
    ;; return counter if found, otherwise return nil
    (if found i nil)))

;; generate the list of bibtex-keys and cited keys
(let* ((bibtex-files (cite-find-bibliography))
       (bibtex-keys (mapcar (lambda (x) (car x)) (bibtex-global-key-alist)))
       (parsetree (org-element-parse-buffer))
       (cited-keys))
  (org-element-map parsetree 'link
    (lambda (link)       
      (let ((plist (nth 1 link)))			     
	(when (equal (plist-get plist ':type) "cite")
	  (setq cited-keys (append cited-keys (cite-split-keys (plist-get plist ':path))))))))

(princ (remove-if-not (lambda (arg) (not (index arg bibtex-keys))) cited-keys))
)
</pre>
</div>

<pre class="example">
(kitchin-2016-nobel-lecture)
</pre>


<p>
The only improvement from here would be if this generated a temporary buffer with clickable links to find that bad entry! Let us take a different approach here, and print this to a temporary buffer of clickable links. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(require 'cl)

(defun index (substring list)
  "return the index of string in a list of strings"
  (let ((i 0)
	(found nil))
    (dolist (arg list i)
      (if (string-match substring arg)
	  (progn 
	    (setq found t)
	    (return i)))
      (setq i (+ i 1)))
    ;; return counter if found, otherwise return nil
    (if found i nil)))

;; generate the list of bibtex-keys and cited keys
(let* ((bibtex-files (cite-find-bibliography))
       (bibtex-keys (mapcar (lambda (x) (car x)) (bibtex-global-key-alist)))
       (bad-citations '()))

  (org-element-map (org-element-parse-buffer) 'link
    (lambda (link)       
      (let ((plist (nth 1 link)))			     
	(when (equal (plist-get plist ':type) "cite")
	  (dolist (key (cite-split-keys (plist-get plist ':path)) )
	    (when (not (index key bibtex-keys))
	      (setq bad-citations (append bad-citations
			    `(,(format "%s [[elisp:(progn (find-file \"%s\")(goto-char %s))][not found here]]\n"
		      key (buffer-file-name)(plist-get plist ':begin)))))
			    ))))))

(mapconcat 'identity bad-citations ""))
</pre>
</div>

<p>
kitchin-2016-nobel-lecture <pre>elisp:(progn (find-file "/home-research/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org")(goto-char 1052))</pre> 
</p>

<p>
That is likely to come in handy. I have put a variation of this code in jorb-bib, in the function called jorg-bib-find-bad-citations.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/29/Finding-missing-citation-entries-in-an-org-file.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
    <item>
      <title>A popup menu for citation links in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/04/28/A-popup-menu-for-citation-links-in-org-mode</link>
      <pubDate>Mon, 28 Apr 2014 10:13:17 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">D_eQK5m79Ys7SO6BCAnHlUecTBM=</guid>
      <description>A popup menu for citation links in org-mode</description>
      <content:encoded><![CDATA[



<p>
I have been exploring ways to get more information out of links in org-mode. I have considered <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/04/12/Popup-tips-on-bibtex-links-in-org-mode/">popups</a> , and <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/21/Enabling-right-clicks-in-org-mode-links/">right-clicking</a> . Here I show how to get a popup menu on a citation link. The idea is that clicking or opening the ditation link should give you a menu. The menu should give you some context, e.g. if the bibtex key even exists. If it does, you should be able to get a quick view of the citation in the minibuffer. You should be able to open the entry in the bibtex file from the menu. If you have a pdf of the reference, you should have an option to open it. You should be able to open the url associated with the entry from the menu too.
</p>

<p>
Here is the function. We use <a href="https://github.com/auto-complete/popup-el">https://github.com/auto-complete/popup-el</a> , and some code from <a href="https://github.com/jkitchin/jmax/blob/master/jorg-bib.el">https://github.com/jkitchin/jmax/blob/master/jorg-bib.el</a> .
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 "cite"
 ;; this function is run when you click on the link
 (lambda (link-string) 
   (let* ((menu-choice)
         ;; this is in jorg-bib.el
         (results (get-bibtex-key-and-file))
	 (key (car results))
	 (cb (current-buffer))
         (pdf-file (format (concat jorg-bib-pdf-directory "%s.pdf") key))
         (bibfile (cdr results)))
     (setq menu-choice
	   (popup-menu* 
	    (list (popup-make-item (if 
				       (progn
					 (let ((cb (current-buffer)) result)					
					   (find-file bibfile)
					   (setq result (bibtex-search-entry key))
					   (switch-to-buffer cb)
					   result))
				       "Simple citation"
				     "No key found")  :value "cite")
		  (popup-make-item (if
				       (progn
					 (let ((cb (current-buffer)) result)					  
					   (find-file bibfile)
					   (setq result (bibtex-search-entry key))
					   (switch-to-buffer cb)
					   result))
				       (format "Open %s in %s" key bibfile)
				     "No key found") :value "bib")
		  (popup-make-item 
		   ;; check if pdf exists.jorg-bib-pdf-directory is a user defined directory.
                   ;; pdfs are stored by bibtex key in that directory
		   (if (file-exists-p pdf-file)
		       (format "Open PDF for %s" key)
		     "No pdf found") :value "pdf")
		  (popup-make-item "Open URL" :value "web")
		  (popup-make-item "Open Notes" :value "notes")
		  )))

     (cond
      ;; goto entry in bibfile
      ((string= menu-choice "bib")       
       (find-file bibfile)
       (bibtex-search-entry key))

      ;; goto entry and try opening the url
      ((string= menu-choice "web")   
       (let ((cb (current-buffer)))
	 (save-excursion
	   (find-file bibfile)
	   (bibtex-search-entry key)
	   (bibtex-url))
	 (switch-to-buffer cb)))
       
      ;; goto entry and open notes, create notes entry if there is none
      ((string= menu-choice "notes")   
       (find-file bibfile)
       (bibtex-search-entry key)       
       (jorg-bib-open-bibtex-notes))

     ;; open the pdf file if it exists
     ((string= menu-choice "pdf")
      (when (file-exists-p pdf-file)
	  (org-open-file pdf-file)))

     ;; print citation to minibuffer
     ((string= menu-choice "cite")
      (let ((cb (current-buffer)))	
	(message "%s" (save-excursion (find-file bibfile)
				      (bibtex-search-entry key)  
				      (jorg-bib-citation)))
	(switch-to-buffer cb))))))
 ;; formatting
(lambda (keyword desc format)
   (cond
    ((eq format 'html) (format "(&lt;cite&gt;%s&lt;/cite&gt;)" path))
    ((eq format 'latex)
     (concat "\\cite{"
	     (mapconcat (lambda (key) key) (cite-split-keys keyword) ",")
	     "}")))))
</pre>
</div>


<p>
<pre>cite:daza-2014-carbon-dioxid,mehta-2014-ident-poten,test,ahuja-2001-high-ruo2</pre> 
</p>


<p>

</p>



<p>
Here you can see an example of a menu where I have the PDF:
</p>


<div class="figure">
<p><img src="/media/2014-04-28-A-popup-menu-for-citation-links-in-org-mode/cite-menu-1.png"> 
</p>
</div>

<p>
Here is an example menu of a key with no entry:
<img src="/media/2014-04-28-A-popup-menu-for-citation-links-in-org-mode/cite-menu-2.png"> 
</p>

<p>
And, and entry with no PDF:
<img src="/media/2014-04-28-A-popup-menu-for-citation-links-in-org-mode/cite-menu-3.png"> 
</p>

<p>
Here is the simple citation:
</p>


<div class="figure">
<p><img src="/media/2014-04-28-A-popup-menu-for-citation-links-in-org-mode/cite-menu-4.png"> 
</p>
</div>

<p>
And a reference from the other bibliography:
</p>


<div class="figure">
<p><img src="/media/2014-04-28-A-popup-menu-for-citation-links-in-org-mode/cite-menu-5.png"> 
</p>
</div>

<p>
Not bad! I will probably replace the cite link in jorg-bib with something like this.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/28/A-popup-menu-for-citation-links-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
    <item>
      <title>A better insert citation function for org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/04/27/A-better-insert-citation-function-for-org-mode</link>
      <pubDate>Sun, 27 Apr 2014 14:40:45 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">Qfs4wMjjmBPuieOYzteNJS_L0KQ=</guid>
      <description>A better insert citation function for org-mode</description>
      <content:encoded><![CDATA[



<p>
I have setup a reftex citation format that inserts a cite link using reftex like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(eval-after-load 'reftex-vars
  '(progn
      (add-to-list 'reftex-cite-format-builtin
                   '(org "Org-mode citation"
                         ((?\C-m . "cite:%l"))))))
</pre>
</div>

<p>
I mostly like this, but it does not let me add citations to an existing citation; doing that leads to the insertion of an additional cite within the citation, which is an error. One way to make this simple is to add another cite format which simple returns the selected keys. You would use this with the cursor at the end of the link, and it will just append the results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'reftex-cite-format-builtin
                   '(org "Org-mode citation"
                         ((?\C-m . "cite:%l")
			  (?a . ",%l"))))
</pre>
</div>

<p>
That actually works nicely. I would like a better approach though, that involves less keywork. Ideally, a single function that does what I want, which is when on a link, append to it, and otherwise insert a new citation link. Today I will develop a function that fixes that problem. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun insert-cite-link ()
  (interactive)
  (let* ((object (org-element-context))
	 (link-string-beginning (org-element-property :begin object))
	 (link-string-end (org-element-property :end object))
	 (path (org-element-property :path object)))    
    (if (and (equal (org-element-type object) 'link) 
               (equal (org-element-property :type object) "cite"))
	(progn
	  (goto-char link-string-end)
	  (insert (concat "," (mapconcat 'identity (reftex-citation t ?a) ","))))
      (insert (concat "cite:" (mapconcat 'identity (reftex-citation t) ",")))
      )))
</pre>
</div>

<p>
That function is it! Org-mode just got a lot better. That function only puts a cite link in, but since that is all I use 99.99+% of the time, it works fine for me!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/27/A-better-insert-citation-function-for-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content:encoded>
    </item>
    <item>
      <title>Putting link references to lines of code in a source block</title>
      <link>http://jkitchin.github.io/blog/2014/04/22/Putting-link-references-to-lines-of-code-in-a-source-block</link>
      <pubDate>Tue, 22 Apr 2014 20:59:30 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">Dn0cJ1FsBueWb1xV5dIyjGY0LwE=</guid>
      <description>Putting link references to lines of code in a source block</description>
      <content:encoded><![CDATA[


<p>
I keep forgetting about this interesting gem of a feature in org-mode code blocks. You can put references to specific lines of code outside the block!
<a href="http://orgmode.org/manual/Literal-examples.html#Literal-examples">http://orgmode.org/manual/Literal-examples.html#Literal-examples</a> 
</p>

<p>
The following code block has some references in it that we can refer to later:
</p>
<pre class="example">
#+BEGIN_SRC emacs-lisp -n -r
<span id="coderef-sc" class="coderef-off">(save-excursion (sc)</span>
<span id="coderef-jump" class="coderef-off">  (goto-char (point-min))) (jump)</span>
#+END_SRC
</pre>


<div class="org-src-container">

<pre class="src src-emacs-lisp"><span id="coderef-sc" class="coderef-off"><span class="linenr">1: </span>(<span style="color: #8b0000;">save-excursion</span></span>
<span id="coderef-jump" class="coderef-off"><span class="linenr">2: </span>  (goto-char (point-min)))</span>
</pre>
</div>


<p>
In line <pre>(sc)</pre> we remember the current position. <pre>(jump)</pre> jumps to point-min.
</p>

<p>
To make this work with python we have to make a slight change to the reference format in the header.
</p>

<pre class="example">
#+BEGIN_SRC python -n -r -l "#(ref:%s)"
<span id="coderef-for" class="coderef-off">for i in range(5):                # (for)</span>
<span id="coderef-body" class="coderef-off">    print i                       # (body)</span>
#+END_SRC
</pre>

<div class="org-src-container">

<pre class="src src-python"><span id="coderef-for" class="coderef-off"><span class="linenr">1: </span><span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">range</span>(5):</span>
<span id="coderef-body" class="coderef-off"><span class="linenr">2: </span>    <span style="color: #8b0000;">print</span> i</span>
</pre>
</div>

<pre class="example">
0
1
2
3
4
</pre>


<p>
In line <pre>(for)</pre> we initialize the loop, and in line <pre>(body)</pre> we run it.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/22/Putting-link-references-to-lines-of-code-in-a-source-block.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Literate programming in python with org-mode and noweb</title>
      <link>http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb</link>
      <pubDate>Thu, 27 Mar 2014 10:46:55 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">dtkACJfbM4IcXFlFpOD99wiXUng=</guid>
      <description>Literate programming in python with org-mode and noweb</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. imports</a></li>
<li><a href="#sec-2">2. utility function</a></li>
<li><a href="#sec-3">3. class definition</a>
<ul>
<li><a href="#sec-3-1">3.1. some class function</a></li>
</ul>
</li>
<li><a href="#sec-4">4. The main function</a></li>
<li><a href="#sec-5">5. Tangle and run the code</a></li>
<li><a href="#sec-6">6. Summary thoughts</a></li>
</ul>
</div>
</div>
<p>
This post examines a different approach to literate programming with org-mode that uses <a href="http://www.cs.tufts.edu/~nr/noweb/">noweb</a> . I have adapted an example from <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html</a> which has some pretty cool ideas in it. 
</p>

<p>
The gist of using noweb is that in your source blocks you have labels like <code>&lt;&lt;imports&gt;&gt;</code>, that refer to other named code blocks that get substituted in place of the label. In the example below, we put labels for a code block of imports, for a function definition, a class definition, and a main function. This code block will get tangled to <a href="/media/2014-03-27-Literate-programming-in-python-with-org-mode-and-noweb/main.py">main.py</a> . The noweb expansion happens at export, so here is the literal code block:
</p>
<pre class="example">
#+BEGIN_SRC python :noweb yes :tangle main.py
&lt;&lt;imports&gt;&gt;

&lt;&lt;some-func&gt;&gt;

&lt;&lt;class-dfn&gt;&gt;

&lt;&lt;main-func&gt;&gt;

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+END_SRC
</pre>

<p>
You may want to just check out the org-mode source link at the bottom of the post to see all the details.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">from</span> argparse <span style="color: #8b0000;">import</span> ArgumentParser

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">utility_func</span>(arg=<span style="color: #cd0000;">None</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'you called a utility function with this arg: {0}'</span>.<span style="color: #cd0000;">format</span>(arg)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">HelloWorld</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, who):
        <span style="color: #8b0000;">self</span>.who = who

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__call__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'Hello {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.who)

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">main</span>():
    <span style="color: #8b008b;">parser</span> = ArgumentParser(description=<span style="color: #228b22;">"Say hi"</span>)
    parser.add_argument(<span style="color: #228b22;">"-w"</span>, <span style="color: #228b22;">"--who"</span>, 
                        <span style="color: #cd0000;">type</span>=<span style="color: #cd0000;">str</span>,
                        default=<span style="color: #228b22;">"world"</span>,
                        <span style="color: #cd0000;">help</span>=<span style="color: #228b22;">"Who to say hello to"</span>)
    <span style="color: #8b008b;">args</span> = parser.parse_args()
  
    <span style="color: #8b008b;">who</span> = args.who
  
    <span style="color: #8b008b;">greeter</span> = HelloWorld(who)
    greeter()

    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'test func = '</span>, greeter.test()
  
    <span style="color: #8b0000;">print</span> utility_func()
    <span style="color: #8b0000;">print</span> utility_func(5)

    <span style="color: #8b0000;">return</span> 0

<span style="color: #8b0000;">if</span> <span style="color: #cd0000;">__name__</span> == <span style="color: #228b22;">'__main__'</span>:
    status = main()
    sys.<span style="color: #cd0000;">exit</span>(status)
</pre>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> imports</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, we define a block that gives us the imports. We do not have to use any tangle headers here because noweb will put it in where it belongs.
</p>

<div class="org-src-container">

<pre class="src src-python" id="imports"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">from</span> argparse <span style="color: #8b0000;">import</span> ArgumentParser
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> utility function</h2>
<div class="outline-text-2" id="text-2">
<p>
Now we define a function we will want imported from the main file. 
</p>

<div class="org-src-container">

<pre class="src src-python" id="some-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">utility_func</span>(arg=<span style="color: #cd0000;">None</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'you called a utility function with this arg: {0}'</span>.<span style="color: #cd0000;">format</span>(arg)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> class definition</h2>
<div class="outline-text-2" id="text-3">
<p>
Finally, let us define a class. Note we use noweb here too, and we get the indentation correct!
</p>

<div class="org-src-container">

<pre class="src src-python" id="class-dfn"><span style="color: #8b0000;">class</span> <span style="color: #4682b4;">HelloWorld</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, who):
        <span style="color: #8b0000;">self</span>.who = who

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__call__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'Hello {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.who)

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>
</pre>
</div>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> some class function</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Now, let us make the some-other-func. This block is not indented, but with the noweb syntax above, it seems to get correctly indented. Amazing.
</p>

<div class="org-src-container">

<pre class="src src-python" id="some-other-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> The main function</h2>
<div class="outline-text-2" id="text-4">
<p>
This is a typical function that could be used to make your module into a script, and is only run when the module is used as a script.. 
</p>

<div class="org-src-container">

<pre class="src src-python" id="main-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">main</span>():
    <span style="color: #8b008b;">parser</span> = ArgumentParser(description=<span style="color: #228b22;">"Say hi"</span>)
    parser.add_argument(<span style="color: #228b22;">"-w"</span>, <span style="color: #228b22;">"--who"</span>, 
                        <span style="color: #cd0000;">type</span>=<span style="color: #cd0000;">str</span>,
                        default=<span style="color: #228b22;">"world"</span>,
                        <span style="color: #cd0000;">help</span>=<span style="color: #228b22;">"Who to say hello to"</span>)
    <span style="color: #8b008b;">args</span> = parser.parse_args()
  
    <span style="color: #8b008b;">who</span> = args.who
  
    <span style="color: #8b008b;">greeter</span> = HelloWorld(who)
    greeter()

    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'test func = '</span>, greeter.test()
  
    <span style="color: #8b0000;">print</span> utility_func()
    <span style="color: #8b0000;">print</span> utility_func(5)

    <span style="color: #8b0000;">return</span> 0
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Tangle and run the code</h2>
<div class="outline-text-2" id="text-5">
<p>
This link will extract the code to main.py: <pre>elisp:org-babel-tangle</pre> 
</p>

<p>
We can run the code like this (linux):
</p>
<div class="org-src-container">

<pre class="src src-sh" id="bashrun-helloworld">python main.py --w John 2&gt;&amp;1
true
</pre>
</div>
<pre class="example">
test func =  True
you called a utility function with this arg: None
you called a utility function with this arg: 5
</pre>

<p>
or this (windows, which as no sh)
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> main <span style="color: #8b0000;">import</span> *

main()
</pre>
</div>

<pre class="example">
test func =  True
you called a utility function with this arg: None
you called a utility function with this arg: 5
</pre>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-6">
<p>
The use of noweb syntax is pretty cool. I have not done anything serious with it, but it looks like you could pretty easily create a sophisticated python module this way that is documented in org-mode. </p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Make a list of org-files in all the subdirectories of the current working directory</title>
      <link>http://jkitchin.github.io/blog/2014/03/23/Make-a-list-of-org-files-in-all-the-subdirectories-of-the-current-working-directory</link>
      <pubDate>Sun, 23 Mar 2014 15:36:56 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[recursive]]></category>
      <guid isPermaLink="false">ol_gYLGLHCsyZ025rQ_qIKwXg34=</guid>
      <description>Make a list of org-files in all the subdirectories of the current working directory</description>
      <content:encoded><![CDATA[



<p>
It would be helpful to get a listing of org-files in a directory tree in the form of clickable links. This would be useful, for example, to find all files associated with a project in a directory with a particular extension, or to do some action on all files that match a pattern. To do this, we will have to recursively walk through the directories and examine their contents. 
</p>

<p>
Let us examine some of the commands we will need to use. One command is to get the contents of a directory. We will explore the contents of a directory called <code>literate</code> in my computer.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">list contents of the directory</span>
(<span style="color: #8b0000;">let</span> ((abspath nil)
      (match nil)
      (nosort t))
  (directory-files <span style="color: #228b22;">"literate"</span> abspath match nosort))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">makefile-main</td>
<td class="left">Makefile</td>
<td class="left">main.o</td>
<td class="left">main.f90</td>
<td class="left">main</td>
<td class="left">literate.org</td>
<td class="left">hello.f90</td>
<td class="left">circle.o</td>
<td class="left">circle.mod</td>
<td class="left">circle.f90</td>
<td class="left">circle-area.png</td>
<td class="left">archive</td>
<td class="left">a.out</td>
<td class="left">..</td>
<td class="left">.</td>
</tr>
</tbody>
</table>

<p>
Note the presence of <code>.</code> and <code>..</code>. Those stand for current directory and one directory up. We should remove those from the list. We can do that like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">remove . and ..</span>
(<span style="color: #8b0000;">let</span> ((abspath nil)
      (match nil)
      (nosort t))
  (remove <span style="color: #228b22;">"."</span> 
          (remove <span style="color: #228b22;">".."</span> 
                  (directory-files <span style="color: #228b22;">"literate"</span> abspath match nosort))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">makefile-main</td>
<td class="left">Makefile</td>
<td class="left">main.o</td>
<td class="left">main.f90</td>
<td class="left">main</td>
<td class="left">literate.org</td>
<td class="left">hello.f90</td>
<td class="left">circle.o</td>
<td class="left">circle.mod</td>
<td class="left">circle.f90</td>
<td class="left">circle-area.png</td>
<td class="left">archive</td>
<td class="left">a.out</td>
</tr>
</tbody>
</table>

<p>
Next, we need to know if a given entry in the directory files is a file or a directory. Emacs-lisp has a few functions for that. We use absolute filenames here since the paths are relative to the  "molecules" directory. Note we could use absolute paths in directory-files, but that makes it hard to remove "." and "..".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">print types of files in the directory</span>
(<span style="color: #8b0000;">let</span> ((root <span style="color: #228b22;">"literate"</span>)
      (abspath nil)
      (match nil)
      (nosort t))
  (mapcar (<span style="color: #8b0000;">lambda</span> (x)
            (<span style="color: #8b0000;">cond</span>
             ((file-directory-p (expand-file-name x root))
              (print (format <span style="color: #228b22;">"%s is a directory"</span> x)))
             ((file-regular-p (expand-file-name x root))
              (print (format <span style="color: #228b22;">"%s is a regular file"</span> x)))))
          (remove <span style="color: #228b22;">"."</span> 
                  (remove <span style="color: #228b22;">".."</span> 
                          (directory-files root abspath match nosort)))))
</pre>
</div>

<pre class="example">
"makefile-main is a regular file"

"Makefile is a regular file"

"main.o is a regular file"

"main.f90 is a regular file"

"main is a regular file"

"literate.org is a regular file"

"hello.f90 is a regular file"

"circle.o is a regular file"

"circle.mod is a regular file"

"circle.f90 is a regular file"

"circle-area.png is a regular file"

"archive is a directory"

"a.out is a regular file"
</pre>

<p>
Now, we are at the crux of this problem. We can differentiate between files and directories. For each directory in this directory, we need to recurse into it, and list the contents. There is some code at <a href="http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html">http://turingmachine.org/bl/2013-05-29-recursively-listing-directories-in-elisp.html</a> which does this, but I found that I had to modify the code to not list directories, and here I want to show a simpler recursive code. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">os-walk</span> (root)
  <span style="color: #228b22;">"recursively walks through directories getting list of absolute paths of files"</span>
  (<span style="color: #8b0000;">let</span> ((files '()) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">empty list to store results</span>
        (current-list (directory-files root t)))
    <span style="color: #ff0000; font-weight: bold;">;;</span><span style="color: #ff0000; font-weight: bold;">process current-list</span>
    (<span style="color: #8b0000;">while</span> current-list
      (<span style="color: #8b0000;">let</span> ((fn (car current-list))) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">get next entry</span>
        (<span style="color: #8b0000;">cond</span> 
         <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">regular files</span>
         ((file-regular-p fn)
          (add-to-list 'files fn))
         <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">directories</span>
         ((and
           (file-directory-p fn)
           <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">ignore . and ..</span>
           (not (string-equal <span style="color: #228b22;">".."</span> (substring fn -2)))
           (not (string-equal <span style="color: #228b22;">"."</span> (substring fn -1))))
          <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">we have to recurse into this directory</span>
          (setq files (append files (os-walk fn))))
        )
      <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">cut list down by an element</span>
      (setq current-list (cdr current-list)))
      )
    files))

(os-walk <span style="color: #228b22;">"literate"</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/makefile-main</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/main.o</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/main.f90</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/main</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/literate.org</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/hello.f90</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/circle.o</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/circle.mod</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/circle.f90</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/circle-area.png</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/a.out</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/Makefile</td>
<td class="left">c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/<sub>blog</sub>/literate/archive/empty-text-file.txt</td>
</tr>
</tbody>
</table>

<p>
Nice, that gives us a recursive listing of all the files in this directory tree. Let us take this a step further, and apply a function to that list to filter out a list of the org files. We will also create org-links out of these files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">os-walk</span> (root)
  (<span style="color: #8b0000;">let</span> ((files '()) <span style="color: #ff0000; font-weight: bold;">;</span><span style="color: #ff0000; font-weight: bold;">empty list to store results</span>
        (current-list (directory-files root t)))
    <span style="color: #ff0000; font-weight: bold;">;;</span><span style="color: #ff0000; font-weight: bold;">process current-list</span>
    (<span style="color: #8b0000;">while</span> current-list
      (<span style="color: #8b0000;">let</span> ((fn (car current-list))) <span style="color: #ff0000; font-weight: bold;">; </span><span style="color: #ff0000; font-weight: bold;">get next entry</span>
        (<span style="color: #8b0000;">cond</span> 
         <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">regular files</span>
         ((file-regular-p fn)
          (add-to-list 'files fn))
         <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">directories</span>
         ((and
           (file-directory-p fn)
           <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">ignore . and ..</span>
           (not (string-equal <span style="color: #228b22;">".."</span> (substring fn -2)))
           (not (string-equal <span style="color: #228b22;">"."</span> (substring fn -1))))
          <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">we have to recurse into this directory</span>
          (setq files (append files (os-walk fn))))
        )
      <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">cut list down by an element</span>
      (setq current-list (cdr current-list)))
      )
    files))

(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">cl</span>)

(mapcar 
 (<span style="color: #8b0000;">lambda</span> (x) (princ (format <span style="color: #228b22;">"[[%s][%s]]\n"</span> x (file-relative-name x <span style="color: #228b22;">"."</span>))))
 (remove-if-not 
  (<span style="color: #8b0000;">lambda</span> (x) (string= (file-name-extension x) <span style="color: #228b22;">"org"</span>))
  (os-walk <span style="color: #228b22;">"literate"</span>)))
</pre>
</div>

<p>
<a href="/media/2014-03-23-Make-a-list-of-org-files-in-all-the-subdirectories-of-the-current-working-directory/literate.org">literate/literate.org</a> 
</p>


<p>
That is certainly functional. It might be nice to format the links a bit nicer to show their structure in a table of contents way, or to sort them in a nice order if there were many of these files. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/23/Make-a-list-of-org-files-in-all-the-subdirectories-of-the-current-working-directory.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Using yasnippet to get completion in ref links</title>
      <link>http://jkitchin.github.io/blog/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links</link>
      <pubDate>Sat, 08 Mar 2014 07:55:54 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">o-a0VyUQdRLKKR9sLjtLpupUsO8=</guid>
      <description>Using yasnippet to get completion in ref links</description>
      <content:encoded><![CDATA[



<p>
This post illustrates an alternative approach to completion in creating ref links compared to the approach shown <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/06/Using-completion-in-ref-links/">here</a> . In this approach we use a dynamic yasnippet to do the completion. We start with similar code that I used before to get a list of labels from the buffer. I used a slightly different regexp to recognize links in this version.
</p>

<p>
<pre>label:code-example</pre> 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">get-labels</span> ()
  (interactive)
  (<span style="color: #8b0000;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #8b0000;">let</span> ((matches '()))
      (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[a-zA-z0-9:-]*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-max) t)
        (add-to-list 'matches (match-string-no-properties 1) t))
      matches)))
</pre>
</div>

<pre class="example">
get-labels
</pre>

<p>
Let us see that in action:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(get-labels)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">code-example</td>
<td class="left">\\</td>
<td class="left">code:ref-snippet</td>
<td class="left">load-snippets</td>
</tr>
</tbody>
</table>

<p>
I think the <code>\\</code> link is an artifact of the regexp in my get-labels code, and it would not appear in other examples. 
</p>

<p>
Now, we are going to create a yasnippet that uses the list returned from <code>get-labels</code> to provide your choices. See <a href="http://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-8">http://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-8</a> for some details. We will tangle this code block into a local snippets directory.
</p>

<p>
<pre>label:code:ref-snippet</pre> 
</p>
<div class="org-src-container">

<pre class="src src-snippet"><span style="color: #ff0000; font-weight: bold;"># -*- mode: snippet -*-</span>
<span style="color: #ff0000; font-weight: bold;"># --</span>
ref:<span style="color: #8b0000;">${</span><span style="color: #ff0000; font-weight: bold;">1</span><span style="color: #8b0000;">:</span>$<span style="color: #0000cd; font-weight: bold;">$(</span>yas-choose-value (get-labels))<span style="color: #8b0000;">}</span> <span style="color: #8b0000;">$</span><span style="color: #228b22;">0</span>
</pre>
</div>

<p>
Now we load the snippets directory.
</p>

<p>
<pre>label:load-snippets</pre> 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(yas-load-directory <span style="color: #228b22;">"./snippets"</span>)
</pre>
</div>

<p>
Finally, we can type ref, press tab to complete it, and then select the label you want from a list. Here are some examples:
</p>

<p>
<pre>ref:code-example</pre> 
</p>

<p>
<pre>ref:code:ref-snippet</pre> 
</p>

<p>
That also works! I cannot decide if I like this better than the Emacs completion. yasnippet gives a popup menu, which is not as easy to navigate as the Emacs completion mechanism. It also requires a working yasnippet, which has not made it into my regular work flows too often. I think I like the Emacs completion better (which actually goes through Icicles since I have that installed). I like it better because I do not have to leave the keyboard or use the arrow buttons to choose a label. However, I do need to bind that function to some key to use it, or type in the command name. It turns out I do not use ref links too often, so it is not too burdensome.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Storing label links in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/03/07/Storing-label-links-in-org-mode</link>
      <pubDate>Fri, 07 Mar 2014 16:13:39 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">NpP6aGRkBlN4BqSNugVcqHPVOog=</guid>
      <description>Storing label links in org-mode</description>
      <content:encoded><![CDATA[



<p>
I am continuing to evolve how I can use org-mode. I have created a label link, which if clicked on checks to see that the label is unique in the buffer. It would be nice to be able to be on a <pre>label:some-label</pre> link, and to store it so we could create a <pre>ref:some-label</pre> later. That ref link is also clickable, and it jumps to the label it refers to, and provides a C-c &amp; option to get back to the ref link. org-mode allows you to create <code>org-PREFIX-store-link</code> functions which store the link information. These functions must determine if they are responsible for storing the link and return nil if not. The first challenge is figuring out if the cursor is on a label link. Here is a function that does that.
</p>

<p>
This was a little challenging. The strategy to determine if the cursor is in a link is to search backward for a regular expression matching a label link. I found this was not sufficient, because it appeared to me that the matched string was only between the beginning of the label link and the point where the cursor was. So, after finding the beginning of the first label link before the cursor, then we search forward to find the whole link. Then we determine if the cursor is between the beginning and end of the match. If it is, then we are on a label link. Here is the code.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">in-label-link</span> ()
  <span style="color: #228b22;">"return label if in a label link, or return nil</span>

<span style="color: #228b22;">we store point, search forward to the first space, and backward to the previous space. then make sure label: is between them."</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((current-point (point)))
    (<span style="color: #8b0000;">save-excursion</span>
      (re-search-backward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[a-zA-z0-9:-]*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-min) t)
      (re-search-forward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[a-zA-Z0-9-:]*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-max) t)   
      (<span style="color: #8b0000;">if</span> (and (&gt; current-point (match-beginning 0))
               (&lt; current-point (match-end 0)))
          t
        nil))))
</pre>
</div>

<p>
This code works for these kinds of links as far as I can tell. Interestingly, it only works when the cursor is to the right of label:. I am not sure if that is because of the regular expression or not.
</p>

<p>
<pre>label:plain-beginning</pre> 
</p>

<p>
<pre>label:telabel</pre> 
</p>

<p>
<pre>label:fig:test</pre> 
</p>

<p>
<pre>label:bracket-in-line</pre> 
</p>


<p>
Now, we create the code that stores the link. We only execute the code if we pass the function that checks if we are on a label link. If we are, then the label is stored in <code>(match-string 1)</code>, and we create the link and store it. Finally, we add the function to <code>org-store-link-functions</code> so that it will be used when C-c l is pressed.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-label-store-link</span> ()
  <span style="color: #228b22;">"store a link to a label. The output will be a ref to that label"</span>
  <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">First we have to make sure we are on a label link. </span>
  (<span style="color: #8b0000;">when</span> (in-label-link)
    (org-store-link-props
     <span style="color: #cd0000;">:type</span> <span style="color: #228b22;">"ref"</span>
     <span style="color: #cd0000;">:link</span> (concat <span style="color: #228b22;">"ref:"</span> (match-string 1)))))

(add-hook 'org-store-link-functions 'org-label-store-link)
</pre>
</div>

<p>
So, here is the evidence that it worked:
</p>

<p>
<pre>ref:plain-beginning</pre> 
</p>

<p>
<pre>ref:telabel</pre> 
</p>

<p>
<pre>ref:fig:test</pre> 
</p>

<p>
<pre>ref:bracket-in-line</pre> 
</p>

<p>
For each of these, I put the cursor on the labels, pressed C-c l, and then moved the cursor down here and pressed C-c C-l, and pressed enter and PRESTO! I had the reference that I wanted! That seems like a handy trick.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/07/Storing-label-links-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Using completion in ref links</title>
      <link>http://jkitchin.github.io/blog/2014/03/06/Using-completion-in-ref-links</link>
      <pubDate>Thu, 06 Mar 2014 19:11:07 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">BYDh83A1U3X7fdTRJp_0i4quNyc=</guid>
      <description>Using completion in ref links</description>
      <content:encoded><![CDATA[



<p>
I came across this interesting post on using completion in links: <a href="http://draketo.de/light/english/free-software/custom-link-completion-org-mode-25-lines-emacs">http://draketo.de/light/english/free-software/custom-link-completion-org-mode-25-lines-emacs</a> . I like the idea, but the type-flow for is not how I usually insert links. For the method there to work, you have to enter a link with C-c C-l, partially enter the link type, press enter, and then partially enter the description, which can be completed with tab. That is a lot of typing to me, compared to what I usually do which is type the link in directly. That habit does not work too well in large documents, and always has the possibility of a typo in the link, which then does not work or export correctly.
</p>

<p>
Here I explore how to make a <pre>ref:label</pre> link using a function that provides all the options available as labels. The idea is to write a function that generates a list of labels in the buffer, which you can make a link to. Let us try an interactive function with a list of arguments. We are first going to generate a list of labels from the buffer. We use this code to get a list of labels in the buffer. You will get to choose which label you want a link to, and the function will insert it for you. Here it is:
</p>

<p>
<pre>label:code-example</pre> 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">get-labels</span> ()
  (interactive)
  (<span style="color: #8b0000;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #8b0000;">let</span> ((matches '()))
      (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-max) t)
        (add-to-list 'matches (match-string-no-properties 1) t))
      matches)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-insert-ref-link</span> (<span style="color: #4682b4;">&amp;optional</span> arg)
  (interactive (list (completing-read <span style="color: #228b22;">"label: "</span> (get-labels))))
  (insert (format <span style="color: #228b22;">"ref:%s"</span> arg)))
</pre>
</div>

<pre class="example">
org-insert-ref-link
</pre>

<p>
So, here you run the command with M-x org-insert-ref-link, press tab, and select the label you want to use. A link like this gets inserted in your buffer <pre>ref:code-example</pre> . This is pretty nice. It should reduce the number of ref link mistakes, and make it easier to find the labels in the whole buffer.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/06/Using-completion-in-ref-links.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
  </channel>
</rss>
