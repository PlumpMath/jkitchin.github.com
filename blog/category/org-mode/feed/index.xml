<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Wed, 12 Mar 2014 18:10:51 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Using yasnippet to get completion in ref links</title>
      <link>http://jkitchin.github.io/blog/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links</link>
      <pubDate>Sat, 08 Mar 2014 07:55:54 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">o-a0VyUQdRLKKR9sLjtLpupUsO8=</guid>
      <description>Using yasnippet to get completion in ref links</description>
      <content:encoded><![CDATA[



<p>
This post illustrates an alternative approach to completion in creating ref links compared to the approach shown <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/06/Using-completion-in-ref-links/">here</a> . In this approach we use a dynamic yasnippet to do the completion. We start with similar code that I used before to get a list of labels from the buffer. I used a slightly different regexp to recognize links in this version.
</p>

<p>
<pre>label:code-example</pre> 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">get-labels</span> ()
  (interactive)
  (<span style="color: #8b0000;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #8b0000;">let</span> ((matches '()))
      (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[a-zA-z0-9:-]*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-max) t)
        (add-to-list 'matches (match-string-no-properties 1) t))
      matches)))
</pre>
</div>

<pre class="example">
get-labels
</pre>

<p>
Let us see that in action:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(get-labels)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">code-example</td>
<td class="left">\\</td>
<td class="left">code:ref-snippet</td>
<td class="left">load-snippets</td>
</tr>
</tbody>
</table>

<p>
I think the <code>\\</code> link is an artifact of the regexp in my get-labels code, and it would not appear in other examples. 
</p>

<p>
Now, we are going to create a yasnippet that uses the list returned from <code>get-labels</code> to provide your choices. See <a href="http://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-8">http://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-8</a> for some details. We will tangle this code block into a local snippets directory.
</p>

<p>
<pre>label:code:ref-snippet</pre> 
</p>
<div class="org-src-container">

<pre class="src src-snippet"><span style="color: #ff0000; font-weight: bold;"># -*- mode: snippet -*-</span>
<span style="color: #ff0000; font-weight: bold;"># --</span>
ref:<span style="color: #8b0000;">${</span><span style="color: #ff0000; font-weight: bold;">1</span><span style="color: #8b0000;">:</span>$<span style="color: #0000cd; font-weight: bold;">$(</span>yas-choose-value (get-labels))<span style="color: #8b0000;">}</span> <span style="color: #8b0000;">$</span><span style="color: #228b22;">0</span>
</pre>
</div>

<p>
Now we load the snippets directory.
</p>

<p>
<pre>label:load-snippets</pre> 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(yas-load-directory <span style="color: #228b22;">"./snippets"</span>)
</pre>
</div>

<p>
Finally, we can type ref, press tab to complete it, and then select the label you want from a list. Here are some examples:
</p>

<p>
<pre>ref:code-example</pre> 
</p>

<p>
<pre>ref:code:ref-snippet</pre> 
</p>

<p>
That also works! I cannot decide if I like this better than the Emacs completion. yasnippet gives a popup menu, which is not as easy to navigate as the Emacs completion mechanism. It also requires a working yasnippet, which has not made it into my regular work flows too often. I think I like the Emacs completion better (which actually goes through Icicles since I have that installed). I like it better because I do not have to leave the keyboard or use the arrow buttons to choose a label. However, I do need to bind that function to some key to use it, or type in the command name. It turns out I do not use ref links too often, so it is not too burdensome.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/08/Using-yasnippet-to-get-completion-in-ref-links.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Storing label links in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/03/07/Storing-label-links-in-org-mode</link>
      <pubDate>Fri, 07 Mar 2014 16:13:39 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">NpP6aGRkBlN4BqSNugVcqHPVOog=</guid>
      <description>Storing label links in org-mode</description>
      <content:encoded><![CDATA[



<p>
I am continuing to evolve how I can use org-mode. I have created a label link, which if clicked on checks to see that the label is unique in the buffer. It would be nice to be able to be on a <pre>label:some-label</pre> link, and to store it so we could create a <pre>ref:some-label</pre> later. That ref link is also clickable, and it jumps to the label it refers to, and provides a C-c &amp; option to get back to the ref link. org-mode allows you to create <code>org-PREFIX-store-link</code> functions which store the link information. These functions must determine if they are responsible for storing the link and return nil if not. The first challenge is figuring out if the cursor is on a label link. Here is a function that does that.
</p>

<p>
This was a little challenging. The strategy to determine if the cursor is in a link is to search backward for a regular expression matching a label link. I found this was not sufficient, because it appeared to me that the matched string was only between the beginning of the label link and the point where the cursor was. So, after finding the beginning of the first label link before the cursor, then we search forward to find the whole link. Then we determine if the cursor is between the beginning and end of the match. If it is, then we are on a label link. Here is the code.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">in-label-link</span> ()
  <span style="color: #228b22;">"return label if in a label link, or return nil</span>

<span style="color: #228b22;">we store point, search forward to the first space, and backward to the previous space. then make sure label: is between them."</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((current-point (point)))
    (<span style="color: #8b0000;">save-excursion</span>
      (re-search-backward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[a-zA-z0-9:-]*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-min) t)
      (re-search-forward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[a-zA-Z0-9-:]*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-max) t)   
      (<span style="color: #8b0000;">if</span> (and (&gt; current-point (match-beginning 0))
               (&lt; current-point (match-end 0)))
          t
        nil))))
</pre>
</div>

<p>
This code works for these kinds of links as far as I can tell. Interestingly, it only works when the cursor is to the right of label:. I am not sure if that is because of the regular expression or not.
</p>

<p>
<pre>label:plain-beginning</pre> 
</p>

<p>
<pre>label:telabel</pre> 
</p>

<p>
<pre>label:fig:test</pre> 
</p>

<p>
<pre>label:bracket-in-line</pre> 
</p>


<p>
Now, we create the code that stores the link. We only execute the code if we pass the function that checks if we are on a label link. If we are, then the label is stored in <code>(match-string 1)</code>, and we create the link and store it. Finally, we add the function to <code>org-store-link-functions</code> so that it will be used when C-c l is pressed.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-label-store-link</span> ()
  <span style="color: #228b22;">"store a link to a label. The output will be a ref to that label"</span>
  <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">First we have to make sure we are on a label link. </span>
  (<span style="color: #8b0000;">when</span> (in-label-link)
    (org-store-link-props
     <span style="color: #cd0000;">:type</span> <span style="color: #228b22;">"ref"</span>
     <span style="color: #cd0000;">:link</span> (concat <span style="color: #228b22;">"ref:"</span> (match-string 1)))))

(add-hook 'org-store-link-functions 'org-label-store-link)
</pre>
</div>

<p>
So, here is the evidence that it worked:
</p>

<p>
<pre>ref:plain-beginning</pre> 
</p>

<p>
<pre>ref:telabel</pre> 
</p>

<p>
<pre>ref:fig:test</pre> 
</p>

<p>
<pre>ref:bracket-in-line</pre> 
</p>

<p>
For each of these, I put the cursor on the labels, pressed C-c l, and then moved the cursor down here and pressed C-c C-l, and pressed enter and PRESTO! I had the reference that I wanted! That seems like a handy trick.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/07/Storing-label-links-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Using completion in ref links</title>
      <link>http://jkitchin.github.io/blog/2014/03/06/Using-completion-in-ref-links</link>
      <pubDate>Thu, 06 Mar 2014 19:11:07 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">BYDh83A1U3X7fdTRJp_0i4quNyc=</guid>
      <description>Using completion in ref links</description>
      <content:encoded><![CDATA[



<p>
I came across this interesting post on using completion in links: <a href="http://draketo.de/light/english/free-software/custom-link-completion-org-mode-25-lines-emacs">http://draketo.de/light/english/free-software/custom-link-completion-org-mode-25-lines-emacs</a> . I like the idea, but the type-flow for is not how I usually insert links. For the method there to work, you have to enter a link with C-c C-l, partially enter the link type, press enter, and then partially enter the description, which can be completed with tab. That is a lot of typing to me, compared to what I usually do which is type the link in directly. That habit does not work too well in large documents, and always has the possibility of a typo in the link, which then does not work or export correctly.
</p>

<p>
Here I explore how to make a <pre>ref:label</pre> link using a function that provides all the options available as labels. The idea is to write a function that generates a list of labels in the buffer, which you can make a link to. Let us try an interactive function with a list of arguments. We are first going to generate a list of labels from the buffer. We use this code to get a list of labels in the buffer. You will get to choose which label you want a link to, and the function will insert it for you. Here it is:
</p>

<p>
<pre>label:code-example</pre> 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">get-labels</span> ()
  (interactive)
  (<span style="color: #8b0000;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #8b0000;">let</span> ((matches '()))
      (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"label:</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">"</span> (point-max) t)
        (add-to-list 'matches (match-string-no-properties 1) t))
      matches)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-insert-ref-link</span> (<span style="color: #4682b4;">&amp;optional</span> arg)
  (interactive (list (completing-read <span style="color: #228b22;">"label: "</span> (get-labels))))
  (insert (format <span style="color: #228b22;">"ref:%s"</span> arg)))
</pre>
</div>

<pre class="example">
org-insert-ref-link
</pre>

<p>
So, here you run the command with M-x org-insert-ref-link, press tab, and select the label you want to use. A link like this gets inserted in your buffer <pre>ref:code-example</pre> . This is pretty nice. It should reduce the number of ref link mistakes, and make it easier to find the labels in the whole buffer.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/06/Using-completion-in-ref-links.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Creating a transportable zip-archive of an org-file</title>
      <link>http://jkitchin.github.io/blog/2014/03/05/Creating-a-transportable-zip-archive-of-an-org-file</link>
      <pubDate>Wed, 05 Mar 2014 10:49:14 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">JHmvc5iQPy-52jQTSAudfK1pe_E=</guid>
      <description>Creating a transportable zip-archive of an org-file</description>
      <content:encoded><![CDATA[



<p>
This post explores a method to save an org-buffer to a zip archive, with all the referencing files. The challenge is that you may want to share the org-file with someone, but the links break if you send them the file, and it is not that trivial to find all the links and change them, and to copy the files to a place where the new links work. 
</p>

<p>
The idea is to export the buffer to an org-file and process all the links to copy the files to a new directory, and change the links to point to these new files. For example, <a href="/media/2014-03-05-Creating-a-transportable-zip-archive-of-an-org-file/blog.pdf">blog.pdf</a> would be copied to the temporary directory, given a unique name, and then relinked. The text below includes some examples of the links that need to be modified.
</p>

<p>
A figure looks like:
</p>


<div class="figure">
<p><img src="/media/2014-03-05-Creating-a-transportable-zip-archive-of-an-org-file/cos-plot.png"> 
</p>
</div>

<p>
Alternatively, we might use a <img src="/media/2014-03-05-Creating-a-transportable-zip-archive-of-an-org-file/eos.png"> to a file. We do not want to change urls, such as this one: <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/09/28/Changing-links-to-files-so-they-work-in-a-blog/">http://kitchingroup.cheme.cmu.edu/blog/2013/09/28/Changing-links-to-files-so-they-work-in-a-blog/</a> . As in that example, we will create a list of all the links in the buffer, but only modify the links that are files. We can parse the buffer and get the links like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((parsetree (org-element-parse-buffer))
      (counter 0))
  (org-element-map parsetree 'link
    (<span style="color: #8b0000;">lambda</span> (link) 
      (<span style="color: #8b0000;">let</span> ((type (nth 0 link))
            (plist (nth 1 link))
            (content (nth 2 link)))
        (princ (format <span style="color: #228b22;">"%s %s: %s %s\n"</span> 
                       counter 
                       (plist-get plist '<span style="color: #cd0000;">:type</span>) 
                       (plist-get plist <span style="color: #cd0000;">:path</span>) 
                       content))
        (setq counter (+ counter 1))))))
</pre>
</div>
<pre class="example">
0 file: ./blog.pdf nil
1 file: ./images/cos-plot.png nil
2 file: ./images/eos.png link
3 http: //kitchingroup.cheme.cmu.edu/blog/2013/09/28/Changing-links-to-files-so-they-work-in-a-blog/ nil
</pre>

<p>
So, our overall strategy will be to create a new directory to store the new versions of the files in. Then, we will copy the files that links point to into that directory, and give them new unique names. We will rename the links to point to these new names. We do this because you may, for some reason have links to files with the same name but in different directories. We want to make sure we do not clobber the files by overwriting them. We use a simple method here, based on unique, temporary filenames. There are other ways to do it to, this way worked first. Finally, we will zip that new directory, and delete the new directory.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">directory to save all exports in, using the current date</span>
(setq org-archive (concat <span style="color: #228b22;">"org-archive-"</span> (format-time-string <span style="color: #228b22;">"%Y-%m-%d"</span> (current-time))))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">delete directory and zip file if it exists</span>
(<span style="color: #8b0000;">when</span> (file-exists-p (concat org-archive <span style="color: #228b22;">".zip"</span>)) 
    (delete-file (concat org-archive <span style="color: #228b22;">".zip"</span>) t))

(<span style="color: #8b0000;">when</span> (file-exists-p org-archive) 
    (delete-directory org-archive t))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">make directory</span>
(make-directory org-archive t)

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">get list of links, copy files and save names</span>
(setq link-list (<span style="color: #8b0000;">let</span> ((parsetree (org-element-parse-buffer))
                     (counter 0))
                 (org-element-map parsetree 'link
                   (<span style="color: #8b0000;">lambda</span> (link) 
                     (<span style="color: #8b0000;">let*</span> ((type (nth 0 link))
                            (plist (nth 1 link))
                            (content (nth 2 link))
                            (path (plist-get plist <span style="color: #cd0000;">:path</span>))
                            (type (plist-get plist '<span style="color: #cd0000;">:type</span>))
                            (fname (car (last (split-string path <span style="color: #228b22;">"/"</span>))))
                            (temporary-file-directory org-archive)
                            (new-file)
                            )     
                       (<span style="color: #8b0000;">cond</span>
                        <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">regular file with content</span>
                        ((and (string= type <span style="color: #228b22;">"file"</span>)  content)
                         (setq new-file  (make-temp-file (file-name-sans-extension fname) nil 
                                                         (concat <span style="color: #228b22;">"."</span> (file-name-extension fname))))
                         (<span style="color: #8b0000;">with-temp-file</span> new-file
                           (insert-file-contents path))
                         (format <span style="color: #228b22;">"[[./%s][%s]] "</span> (file-name-nondirectory new-file) content))
                        <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">regular file with no content</span>
                        ((and (string= type <span style="color: #228b22;">"file"</span>))
                         (setq new-file  (make-temp-file (file-name-sans-extension fname) nil 
                                                         (concat <span style="color: #228b22;">"."</span> (file-name-extension fname))))
                         (<span style="color: #8b0000;">with-temp-file</span> new-file
                           (insert-file-contents path))
                         (format <span style="color: #228b22;">"[[./%s]] "</span> (file-name-nondirectory new-file)))
                        (t nil)))))))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">save current buffer name</span>
(setq current-name (buffer-name))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">create filter for links and export org buffer</span>
(<span style="color: #8b0000;">let</span> ((counter 0))
  (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ox-mrkup-filter-link</span> (text back-end info)
    (<span style="color: #8b0000;">let</span> ((link (nth counter link-list)))
      (<span style="color: #8b0000;">if</span> (not (string= link <span style="color: #228b22;">"nil"</span>)) (setq output   (format <span style="color: #228b22;">"%s"</span> link))
        (setq output (format <span style="color: #228b22;">"%s"</span> text)))
      (setq counter (+ counter 1))
      output))

  (<span style="color: #8b0000;">let</span> ((org-export-filter-link-functions '(ox-mrkup-filter-link)))
    (org-org-export-as-org)))

(switch-to-buffer <span style="color: #228b22;">"*Org ORG Export*"</span>)
(write-file (expand-file-name current-name org-archive))
(shell-command (concat <span style="color: #228b22;">"zip -R "</span> org-archive <span style="color: #228b22;">".zip  *"</span>))
(rename-file (concat org-archive <span style="color: #228b22;">".zip"</span>) (concat <span style="color: #228b22;">"../"</span>org-archive <span style="color: #228b22;">".zip"</span>))
(kill-buffer)

(switch-to-buffer current-name)
(delete-directory org-archive t)  <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">get rid of temp-dir</span>
</pre>
</div>



<p>
This example works fine! The result is here: <a href="/media/2014-03-05-Creating-a-transportable-zip-archive-of-an-org-file/org-archive-2014-03-05.zip">org-archive-2014-03-05.zip</a> This code would ideally be put into a function, and cleaned up a little so there are not global variables being set here and there. A subsequent function might make it easy to attach this file to an email. That code might look something like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(mail)
(mail-to)
(insert <span style="color: #228b22;">"jkitchin@andrew.cmu.edu"</span>)
(mml-attach-file <span style="color: #228b22;">"./org-archive-2014-03-05.zip"</span>)
</pre>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/05/Creating-a-transportable-zip-archive-of-an-org-file.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Getting a list of figures in an org-buffer</title>
      <link>http://jkitchin.github.io/blog/2014/03/02/Getting-a-list-of-figures-in-an-org-buffer</link>
      <pubDate>Sun, 02 Mar 2014 10:03:00 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">mG7o_GpUxz5PFXAl6lRCneMNgec=</guid>
      <description>Getting a list of figures in an org-buffer</description>
      <content:encoded><![CDATA[



<p>
Similar to the previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/01/Getting-a-list-of-tables-in-an-org-buffer/">example</a> of getting a list of tables, here we examine getting a list of figures. Here are two figure links, one with a label, and one with a caption.
</p>


<div id="fig:cos" class="figure">
<p><img src="/media/2014-03-02-Getting-a-list-of-figures-in-an-org-buffer/cos-plot.png"> 
</p>
</div>


<div class="figure">
<p><img src="/media/2014-03-02-Getting-a-list-of-figures-in-an-org-buffer/eos-uncertainty.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> An equation of state. this is the caption of the figure.</p>
</div>


<div class="figure">
<p><img src="/media/2014-03-02-Getting-a-list-of-figures-in-an-org-buffer/implicit-uncertainty.png"> 
</p>
<p><span class="figure-number">Figure 2:</span> another figure</p>
</div>

<p>
We define a link that will parse the buffer, and create links in a new buffer to the figures. We define a figure as a  link with a :type of "file" that has a path that points to a file ending with png or pdf.  We will improve on the list of tables by making the buffer read-only, and making a local key binding to kill the buffer by pressing "q". Here is our attempted code. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">http://www.emacswiki.org/emacs/ElispCookbook#toc4</span>
(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">string/ends-with</span> (s ending)
  <span style="color: #228b22;">"return non-nil if string S ends with ENDING."</span>
  (<span style="color: #8b0000;">cond</span> ((&gt;= (length s) (length ending))
         (<span style="color: #8b0000;">let</span> ((elength (length ending)))
           (string= (substring s (- 0 elength)) ending)))
        (t nil)))

(org-add-link-type 
 <span style="color: #228b22;">"list-of-figures"</span>
 (<span style="color: #8b0000;">lambda</span> (link-string)
   (<span style="color: #8b0000;">let*</span> ((c-b (buffer-name))
          (counter 0)
          (list-of-figures 
           (org-element-map (org-element-parse-buffer) 'link
             (<span style="color: #8b0000;">lambda</span> (link) 
               <span style="color: #228b22;">"create a link for to the figure"</span>
               (<span style="color: #8b0000;">when</span> 
                   (and (string= (org-element-property <span style="color: #cd0000;">:type</span> link) <span style="color: #228b22;">"file"</span>)
                        (string-match-p  
                         <span style="color: #228b22;">"[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">.]*\\.</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">png</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">jpg</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">$"</span>
                         (org-element-property <span style="color: #cd0000;">:path</span> link)))                   
                 (incf counter)
                 
                 (<span style="color: #8b0000;">let*</span> ((start (org-element-property <span style="color: #cd0000;">:begin</span> link))
                        (parent (car (cdr (org-element-property <span style="color: #cd0000;">:parent</span> link))))
                        (caption (caaar (plist-get parent <span style="color: #cd0000;">:caption</span>)))
                        (name (plist-get parent <span style="color: #cd0000;">:name</span>)))
                   (<span style="color: #8b0000;">if</span> caption 
                       (format 
                        <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer \"%s\")(goto-char %s))][figure %s: %s]] %s\n"</span> 
                        c-b start counter (or name <span style="color: #228b22;">""</span>) caption)
                     (format 
                      <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer \"%s\")(goto-char %s))][figure %s: %s]]\n"</span> 
                      c-b start counter (or name <span style="color: #228b22;">""</span>)))))))))
          (switch-to-buffer <span style="color: #228b22;">"*List of Figures*"</span>)
          (org-mode)
          (erase-buffer)
          (insert (mapconcat 'identity list-of-figures <span style="color: #228b22;">""</span>))
          (setq buffer-read-only t)
          (use-local-map (copy-keymap org-mode-map))
          (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer)))))
   (<span style="color: #8b0000;">lambda</span> (keyword desc format)
     (<span style="color: #8b0000;">cond</span>
      ((eq format 'latex)
       (format <span style="color: #228b22;">"\\listoffigures"</span>)))))
</pre>
</div>



<p>
This is a test to see if our function works for other image types.
<a href="/media/2014-03-02-Getting-a-list-of-figures-in-an-org-buffer/smiley.jpg">smiley.jpg</a> 
</p>

<p>
And a link to test it out: 
</p>

<p>

</p>

<p>
This works too. I am not sure I am getting the figure name and caption in a bulletproof way. They seem to be buried in the :parent of the element, which is a paragraph element. The caption seems to be buried in a few sets of parentheses, hence the use of <code>caaar</code> to get the caption out. I am not sure if the caption is always at that depth or not. As a proof of concept though, this is not too bad. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/02/Getting-a-list-of-figures-in-an-org-buffer.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Getting a list of tables in an org-buffer</title>
      <link>http://jkitchin.github.io/blog/2014/03/01/Getting-a-list-of-tables-in-an-org-buffer</link>
      <pubDate>Sat, 01 Mar 2014 18:12:15 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">P9YWx2BJKQvg3Ywadkpg2rtXkVI=</guid>
      <description>Getting a list of tables in an org-buffer</description>
      <content:encoded><![CDATA[



<p>
In a large document it might be nice to quickly get a list of tables. Preferrably by clicking on a link that generates the list, and exports appropriately, e.g. <code>listoftables</code> for LaTeX. A link like this:
</p>

<p>

</p>

<p>
Before getting to the code that does what we need, let us make some tables. We make three different kinds of tables for fun. A named table, an unnamed table, and a table with a caption. 
</p>

<table id="first-table" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">a</td>
<td class="right">b</td>
</tr>
</tbody>
</table>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">t</td>
<td class="right">y</td>
</tr>

<tr>
<td class="right">5</td>
<td class="right">6</td>
</tr>
</tbody>
</table>


<table id="tbl-with-caption" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> column of numbers</caption>

<colgroup>
<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">34</td>
</tr>

<tr>
<td class="right">6</td>
</tr>

<tr>
<td class="right">6</td>
</tr>
</tbody>
</table>


<p>
We would like a function that creates a buffer with a list of the tables, and links to them. We include the table name, and caption if there is one. We will create an org-buffer, and use org-links to the tables. Here is a link definition that will do that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"list-of-tables"</span>
 (<span style="color: #8b0000;">lambda</span> (link-string)
   (<span style="color: #8b0000;">let*</span> ((c-b (buffer-name))
          (counter 0)
          (list-of-tables 
           (org-element-map (org-element-parse-buffer 'element) 'table
             (<span style="color: #8b0000;">lambda</span> (table) 
               <span style="color: #228b22;">"create a link for to the table"</span>
               (incf counter)
               (<span style="color: #8b0000;">let</span> ((start (org-element-property <span style="color: #cd0000;">:begin</span> table))
                     (name  (org-element-property <span style="color: #cd0000;">:name</span> table))
                     (caption (caaar (org-element-property <span style="color: #cd0000;">:caption</span> table))))
                 (<span style="color: #8b0000;">if</span> caption 
                     (format 
                      <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer \"%s\")(goto-char %s))][table %s: %s]] %s\n"</span> 
                      c-b start counter (or name <span style="color: #228b22;">""</span>) caption)
                   (format 
                    <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer \"%s\")(goto-char %s))][table %s: %s]]\n"</span> 
                    c-b start counter (or name <span style="color: #228b22;">""</span>))))))))
     (switch-to-buffer <span style="color: #228b22;">"*List of Tables*"</span>)
     (org-mode)
     (erase-buffer)
     (insert (mapconcat 'identity list-of-tables <span style="color: #228b22;">""</span>))))
 (<span style="color: #8b0000;">lambda</span> (keyword desc format)
   (<span style="color: #8b0000;">cond</span>
    ((eq format 'latex)
     (format <span style="color: #228b22;">"\\listoftables"</span>)))))
</pre>
</div>

<p>
A list of figures would only be a little trickier. You would map over the links, and find the file type links that have a select number of extensions, e.g. png, jpg, etc&#x2026;
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/01/Getting-a-list-of-tables-in-an-org-buffer.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Extracting bibtex file from an org-buffer</title>
      <link>http://jkitchin.github.io/blog/2014/02/19/Extracting-bibtex-file-from-an-org-buffer</link>
      <pubDate>Wed, 19 Feb 2014 18:45:27 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">jz3xuLa5C0MBw0T0i0IyS7UbM7U=</guid>
      <description>Extracting bibtex file from an org-buffer</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Bibtex entries</a></li>
</ul>
</div>
</div>

<p>
We use citation links a lot in our org-files, like this: <pre>cite:thompson-2014-co2-react</pre> . Sometimes there are multiple citations like this <pre>cite:mehta-2014-ident-poten,hallenbeck-2013-effec-o2</pre> . It would be convenient at times to extract a bibtex file from these citations. That way we could easily share files. This is possible in RefTeX from a LaTeX file. Org makes it easy to export to LaTeX, so this seems like it should be easy. It would be easy, if I always put the bibliography link in the file. I usually do not, so let us check if that is the case, and if it is not add the bibliography to the end before we export. Then, with the LaTeX file in hand, we open it, and call the RefTeX functions to get the bibliography. Finally, we will create a link to the actual created file, and add it as a source block that can be tangled at the end of the file.
</p>

<p>
Here is a function that does the extraction and some house cleaning. We actually take the contents of the buffer and save it in a temporary file, so that we do not accidentally clobber a tex or bibtex file here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">kg-extract-bibtex</span> ()
  <span style="color: #228b22;">"create bibtex file of entries cited in this buffer"</span>

  (<span style="color: #8b0000;">let*</span> ((tempname (make-temp-file <span style="color: #228b22;">"extract-bib"</span>))
         (contents (buffer-string))
         (cb (current-buffer))
         basename texfile bibfile results)
    
    (find-file tempname)
    (insert contents)
    (setq basename (file-name-sans-extension 
                    (file-name-nondirectory buffer-file-name))
          texfile (concat basename <span style="color: #228b22;">".tex"</span>)
          bibfile (concat basename <span style="color: #228b22;">".bib"</span>))

  (<span style="color: #8b0000;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #8b0000;">unless</span> (re-search-forward <span style="color: #228b22;">"^bibliography:"</span> (point-max) 'end)
      (insert (format <span style="color: #228b22;">"\nbibliography:%s"</span> (mapconcat 'identity reftex-default-bibliography <span style="color: #228b22;">","</span>)))))

    (org-latex-export-to-latex)
    (find-file texfile)
    (reftex-parse-all)
    (reftex-create-bibtex-file bibfile)
    (setq results (buffer-string))
    (kill-buffer bibfile)
    (kill-buffer texfile)
    (delete-file texfile)
    (delete-file tempname)

    (switch-to-buffer cb)
    (<span style="color: #8b0000;">save-excursion</span>
      (goto-char (point-max))
      (insert (format <span style="color: #228b22;">"</span>

<span style="color: #228b22;">** Bibtex entries</span>

<span style="color: #228b22;">#+BEGIN_EXAMPLE: </span>
<span style="color: #228b22;">%s</span>
<span style="color: #228b22;">#+END_EXAMPLE"</span> results)))))

(kg-extract-bibtex)
</pre>
</div>

<p>
There it is! The src block does not render in HTML very well, since it appears to be simple text. It looks fine in the org file though.
</p>

<p>
It might be a good idea to replace the bibliography line with the new file, but I will leave that as an exercise for later.
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Bibtex entries</h2>
<div class="outline-text-2" id="text-1">
<p>
#+BEGIN<sub>EXAMPLE</sub>: 
@article{hallenbeck-2013-effec-o2,
  author =         "Hallenbeck, Alexander P. and Kitchin, John R.",
  title =         "Effects of \ce{O_2} and \ce{SO_2} on the Capture
                  Capacity of a Primary-Amine Based Polymeric
                  \ce{CO_2} Sorbent",
  year =         2013,
  doi =                 "10.1021/ie400582a",
  eprint =         "<a href="http://pubs.acs.org/doi/pdf/10.1021/ie400582a">http://pubs.acs.org/doi/pdf/10.1021/ie400582a</a> ",
  journal =         "Industrial \&amp; Engineering Chemistry Research",
  pages =         "10788-10794",
  url =                 "<a href="http://pubs.acs.org/doi/abs/10.1021/ie400582a">http://pubs.acs.org/doi/abs/10.1021/ie400582a</a> ",
}
</p>

<p>
@article{mehta-2014-ident-poten,
  author =         {Mehta, Prateek and Salvador, Paul A. and Kitchin,
                  John R.},
  title =         {Identifying Potential BO2 Oxide Polymorphs for
                  Epitaxial Growth Candidates},
  journal =         {ACS Applied Materials \&amp; Interfaces},
  volume =         0,
  number =         0,
  pages =         {null},
  year =         2014,
  doi =                 {10.1021/am4059149},
  URL =                 {<a href="http://pubs.acs.org/doi/abs/10.1021/am4059149">http://pubs.acs.org/doi/abs/10.1021/am4059149</a> },
  eprint =         {<a href="http://pubs.acs.org/doi/pdf/10.1021/am4059149">http://pubs.acs.org/doi/pdf/10.1021/am4059149</a> }
}
</p>

<p>
@Article{thompson-2014-co2-react,
  author =         {Thompson, Robert L. and Albenze, Erik and Shi, Wei
                  and Hopkinson, David and Damodaran, Krishnan and
                  Lee, Anita and Kitchin, John and Luebke, David
                  Richard and Nulwala, Hunaid},
  title =         {\ce{CO_2} Reactive Ionic Liquids: Effects of
                  functional groups on the anion and its influence on
                  the physical properties},
  journal =         {RSC Adv.},
  year =         2014,
  pages =         "-",
  publisher =         {The Royal Society of Chemistry},
  doi =                 {10.1039/C3RA47097K},
  url =                 {<a href="http://dx.doi.org/10.1039/C3RA47097K">http://dx.doi.org/10.1039/C3RA47097K</a> },
  abstract =         "Next generation of gas separation materials are
                  needed to alleviate issues faced in energy and
                  environmental area. Ionic liquids (ILs) are
                  promising class of material for CO2 separations. In
                  this work{,} CO2 reactive triazolides ILs were
                  synthesized and characterized with the aim of
                  developing deeper understanding on how structural
                  changes affect the overall properties for CO2
                  separation. Important insights were gained
                  illustrating the effects of substituents on the
                  anion. It was found that substituents play a crucial
                  role in dictating the overall physical properties of
                  reactive ionic liquids. Depending upon the
                  electronic and steric nature of the substituent{,}
                  CO2 capacities between 0.07-0.4 mol CO2/mol IL were
                  observed. Detailed spectroscopic{,} CO2
                  absorption{,} rheological{,} and simulation studies
                  were carried out to understand the nature and
                  influence of these substituents. The effect of water
                  content was also evaluated{,} and it was found that
                  water had an unexpected impact on the properties of
                  these materials{,} resulting in an increased
                  viscosity{,} but little change in the CO2
                  reactivity."
}
#+END<sub>EXAMPLE</sub></p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/19/Extracting-bibtex-file-from-an-org-buffer.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>A dynamic snippet for a task due 7 days from now</title>
      <link>http://jkitchin.github.io/blog/2014/02/16/A-dynamic-snippet-for-a-task-due-7-days-from-now</link>
      <pubDate>Sun, 16 Feb 2014 13:50:27 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">Tx9jFOYH5plEncsdx7wUpo9okjg=</guid>
      <description>A dynamic snippet for a task due 7 days from now</description>
      <content:encoded><![CDATA[



<p>
I have been playing with yasnippets. A pretty cool feature is that you can run elisp code in the template to generate text. Below, I define a snippet that will create a todo item due 7 days from the time you define it. This is an unconventional way to define a snippet, but I did not want to save it to a file just to try it out. So, I put it in a temporary buffer, and load it from there. When you run this block, it will note it is a new snippet, and ask if you want to save it. You can say no. 
</p>

<p>
We will use the code we developed <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/02/05/Add-time-to-a-deadline/">here</a> to create a timestamp from the
current time plus seven days.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(yas-global-mode)
(<span style="color: #8b0000;">with-temp-buffer</span>
  (insert <span style="color: #228b22;">"# name : todo-followup</span>
<span style="color: #228b22;"># --</span>

<span style="color: #228b22;">*************** TODO $1</span>
<span style="color: #228b22;">${2:             DEADLINE: `(let ((seven-days (seconds-to-time (* 7 24 60 60))))</span>
<span style="color: #228b22;">  (format-time-string \"&lt;%Y-%m-%d %a&gt;\" (time-add (current-time) seven-days)))`}$0</span>
<span style="color: #228b22;">*************** END </span>
<span style="color: #228b22;">"</span>)
  (yas-load-snippet-buffer-and-close 'org-mode))
</pre>
</div>

<p>
Now, you will have a new entry in the YASnippet menu that is called todo-followup. If you put the cursor on a blank line, and select that entry you get this below (after you fill in the text for the headline, of course!):
</p>

<pre class="example">
*************** TODO see how many times this was viewed
		DEADLINE: &lt;2014-02-23 Sun&gt;
*************** END
</pre>



<p>
That is pretty nice, as it saves a lot of keystrokes for that
particular kind of task. Let us up the ante, and see if we can make it
interactive so you can enter the number of days from now the task is
due.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(yas-global-mode)
(<span style="color: #8b0000;">with-temp-buffer</span>
  (insert <span style="color: #228b22;">"# name : todo-followup</span>
<span style="color: #228b22;"># --</span>

<span style="color: #228b22;">*************** TODO $1</span>
<span style="color: #228b22;">${2:             DEADLINE: `(let ((ndays (seconds-to-time (* (string-to-int (read-from-minibuffer \"Days until due: \")) 24 60 60))))</span>
<span style="color: #228b22;">  (format-time-string \"&lt;%Y-%m-%d %a&gt;\" (time-add (current-time) ndays)))`}$0</span>
<span style="color: #228b22;">*************** END </span>
<span style="color: #228b22;">"</span>)
  (yas-load-snippet-buffer-and-close 'org-mode))
</pre>
</div>

<pre class="example">
*************** TODO sweet!
		DEADLINE: &lt;2014-02-26 Wed&gt;
*************** END
</pre>
<p>
Well, that made it just a bit sweeter! I was prompted for the "Days
until due:", entered 10 days, and a date 10 days from now was
automatically entered!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/16/A-dynamic-snippet-for-a-task-due-7-days-from-now.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Separating code blocks from results in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/02/08/Separating-code-blocks-from-results-in-org-mode</link>
      <pubDate>Sat, 08 Feb 2014 08:54:57 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">dFO-whe_7X7Ue6HD96_pX_PL9bo=</guid>
      <description>Separating code blocks from results in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Appendix of code</a>
<ul>
<li><a href="#sec-1-1">1.1. Area of a circle</a></li>
<li><a href="#sec-1-2">1.2. Hello function</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
I often put my code blocks right where I need them in my org documents. It usually has a section explaining what I want to do, then the code block that implements the idea, following by the output. Sometimes the code blocks are long, however, and it might be desirable for that code to be in an appendix. <sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Org-mode enables this with #+CALL. For example, I have a function named <code>circle-area</code> in the appendix of this post that calculates the area of a circle given its radius. The function is "named" by a line like this:
</p>

<pre class="example">
#+name: function-name
</pre>

<p>
I can use the function like this:
</p>

<pre class="example">
#+CALL: circle-area(1)
</pre>

<pre class="example">
3.14159265359
</pre>

<p>
That is pretty nice. You can separate the code out from the main document. You still have to put the #+CALL: line in though. It may be appropriate to put a call inline with your text. If you add the following sentence, and put your cursor on the call<sub>circle</sub>-area and press C-c C-c, the output is put in verbatim markers right after it. 
</p>

<pre class="example">
The area of a circle with unit radius is call_circle-area(1).
</pre>

<p>
The area of a circle with unit radius is <code>3.14159265359</code>. 
</p>

<p>
Here is another interesting way to do it. We can specify a named results block. Let us consider another function named <code>hello-block</code> that prints output. We specify a named results block like this:
</p>

<pre class="example">
#+RESULTS: function-name
</pre>

<p>
Now, whenever you execute that block, the results will get put where this line is like this.
</p>

<pre class="example">
hello John
</pre>

<p>
These could be useful approaches to making the "top" of your document cleaner, with less code in it. The code of course is still in the document, but at the end, in an appendix for example. This kind of separation might make it a little harder to find the code, and to reevaluate it,<sup><a id="fnr.2" name="fnr.2" class="footref" href="#fn.2">2</a></sup> but it might improve the readability for others. 
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Appendix of code</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Area of a circle</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-python" id="circle-area"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">return</span> np.pi * r**2
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Hello function</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-python" id="hello-block"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello '</span> + name
</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p>
I know I can pretty conveniently collapse a code block by pressing tab on the header. Sometimes that is not enough.
</p></div>

<div class="footdef"><sup><a id="fn.2" name="fn.2" class="footnum" href="#fnr.2">2</a></sup> <p>
It is not much harder, C-s will let you search for the named block. I do not know if there are nice convenient navigation commands for this.
</p></div>


</div>
</div><p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/08/Separating-code-blocks-from-results-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
    <item>
      <title>Add time to a deadline</title>
      <link>http://jkitchin.github.io/blog/2014/02/05/Add-time-to-a-deadline</link>
      <pubDate>Wed, 05 Feb 2014 09:41:04 EST</pubDate>
      <category><![CDATA[org-mode]]></category>
      <guid isPermaLink="false">aZTTxoU6iiw0yoXhYnvYpHZepkU=</guid>
      <description>Add time to a deadline</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. s1</a></li>
<li><a href="#sec-2">2. s1</a></li>
<li><a href="#sec-3">3. s1</a></li>
</ul>
</div>
</div>
<p>
I have an application where an org-file is a template with some due dates in it. I would like to update the deadlines to make them all relative to today. In this post I explore a way to do that. The strategy is to find deadlines, parse the time out of the time stamp, add an appropriate amount of time, and replace the time stamp. For this exercise, we use this org-file, which has one DEADLINE of "2014-01-13 Mon", and I want to add 60 days to the time stamp. 
</p>

<p>
Amazingly, emacs can parse time strings into a format that it can understand. I do not claim to understand what this function returns, but it is some representation of time that emacs understands.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>)
</pre>
</div>

<p>
(21203 11392)
</p>

<p>
Now, we can add time to that format. Let us say I want to add 60 days. In emacs, we add seconds to a time, so 60 days is 60 days * 24 hours * 60 minutes * 60 seconds, or in elisp: (* 60 24 60 60).
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((sixty-days (seconds-to-time (* 60 24 60 60))))
  (time-add (date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>) sixty-days))
</pre>
</div>

<p>
(21282 18048 0 0)
</p>

<p>
That does not make too much sense, so we can use another function to format it like a new time stamp.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((sixty-days (seconds-to-time (* 60 24 60 60))))
  (format-time-string <span style="color: #228b22;">"&lt;%Y-%m-%d %a&gt;"</span>
                      (time-add (date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>) sixty-days)))
</pre>
</div>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2014-03-13 Thu&gt;</span></span>
</p>

<p>
Beautiful. We just got a timestamp that is 60 days later than the original timestamp. Now we just search forward to find deadline, get the time stamp, add the time to it, and replace the line. I specifically want to change deadlines, so we will develop a regular expression for that. Here is a block that searches forward for a DEADLINE, parses it, adds 60 days to it, and replaces the deadline. The regular expression is limited to timestamps that look like &lt;yyyy-mm-dd day&gt;, i.e. no warnings or repeaters are found. In this post, there is subheading that looks like this initially:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> s1</h2>
<div class="outline-text-2" id="text-1">
<p>
#+END<sub>EXAMPLE</sub>
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">progn</span>
  (<span style="color: #8b0000;">save-excursion</span>
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">go to timestamp</span>
    (re-search-forward <span style="color: #228b22;">"DEADLINE:\\s-*&lt;</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{4\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{2\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{2\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">\\s-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">Mon</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Tue</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Wed</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Thu</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Fri</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Sat</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Sun</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">&gt;"</span>)
    (<span style="color: #8b0000;">let</span> ((ts (match-string 1)) <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">this is the timestamp</span>
          (sixty-days (seconds-to-time (* 60 24 60 60)))
          (new-ts))
      (setq new-ts (format-time-string <span style="color: #228b22;">"    DEADLINE: &lt;%Y-%m-%d %a&gt;"</span>
                                       (time-add (date-to-time ts) sixty-days)))
      <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">now we kill the old time stamp, and insert the new one</span>
      (beginning-of-line)
      (kill-line)
      (insert new-ts))))
</pre>
</div>

<p>
After we run the code above, the deadline looks like this:
#+BEGIN<sub>EXAMPLE</sub>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> s1</h2>
<div class="outline-text-2" id="text-2">
<p>
#+END<sub>EXAMPLE</sub>
</p>

<p>
We succeeded in moving it by 60 days. An interesting application of this would be to make all the deadlines in an org-file relative to some baseline date. For example, you have a series of deadlines for assignments throughout a semester, and it would be tedious to update these by hand. Suppose you could just establish a new beginning date, and make all deadlines relative to that date with a command. That seems useful. 
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> s1</h2>
<div class="outline-text-2" id="text-3">
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/05/Add-time-to-a-deadline.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content:encoded>
    </item>
  </channel>
</rss>
