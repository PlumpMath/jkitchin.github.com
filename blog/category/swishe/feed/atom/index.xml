<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-04-03T23:42:31Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Indexing headlines in org files with swish-e with laser-sharp results]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results" />
    <id>http://jkitchin.github.io/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results</id>
    <updated>2015-07-06T11:04:43Z</updated>
    <published>2015-07-06T11:04:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="swishe" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Indexing headlines in org files with swish-e with laser-sharp results]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results"><![CDATA[



<p>
So far, it looks like swish-e is able to do some pretty focused searches on specific content types. However, the return results are not actually that sharp; in the way we have been using swish-e, it can only tell us the document path that matches, not where in the document the match is. To fix that, we need a new approach to what a "document" is, and a new approach to indexing. We will finally use the "-s prog" option in swish-e which runs an external program that prints stuff to stdout for swish-e to index. We will treat each headline in an org file as a "document" but rather than have the path to the file, we will put an org-mode link there that will take us right to the point of interest.
</p>

<p>
You can see this in action here: <a href="https://www.youtube.com/watch?v=bTwXtEb5Ng8">https://www.youtube.com/watch?v=bTwXtEb5Ng8</a> 
</p>

<p>
Basically, we need a program to output chunks like this for each headline in an org-file:
</p>
<pre class="example">
Path-Name: [[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/ase-db.org") (goto-char 1))]]
Content-Length: 247
Document-Type: XML*

&lt;headline&gt;&lt;title&gt;Using the ase database module&lt;/title&gt;&lt;properties&gt;&lt;FILE&gt;/Users/jkitchin/blogofile-jkitchin.github.com/_blog/ase-db.org&lt;/FILE&gt;&lt;BLOCKED&gt;&lt;/BLOCKED&gt;&lt;categories&gt;python, ase&lt;/categories&gt;&lt;CATEGORY&gt;ase-db&lt;/CATEGORY&gt;&lt;/properties&gt;&lt;/headline&gt;
</pre>

<p>
Then we need to tell swish-e to run the program and index its output. Here is the program to do that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">:<span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">exec emacs -batch -l $0 "$@"</span>
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">org</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">xml</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">cl</span>)

(add-to-list 'load-path <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax/elpa/f-20140828.716"</span>)
(add-to-list 'load-path <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax/elpa/s-20140910.334"</span>)
(add-to-list 'load-path <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax/elpa/dash-20141201.2206"</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">f</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">print-tag</span> (name attrs <span style="color: #6434A3;">&amp;optional</span> closingp)
  <span style="color: #036A07;">"Print an xml tag with symbol NAME and ATTRS (a cons list of (attribute . value)).</span>
<span style="color: #036A07;">if CLOSINGP print the closing tag instead."</span>
  (format
   <span style="color: #008000;">"&lt;%s%s%s&gt;"</span>
   (<span style="color: #0000FF;">if</span> closingp <span style="color: #008000;">"/"</span> <span style="color: #008000;">""</span>)
   name
   (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">and</span> attrs (not closingp))
       (concat
        <span style="color: #008000;">" "</span>
        (mapconcat
         (<span style="color: #0000FF;">lambda</span> (x)
           (format <span style="color: #008000;">"%s=\"%s\""</span>
                   (car x)
                   (xml-escape-string (cdr x))))
         attrs
         <span style="color: #008000;">" "</span>))
     <span style="color: #008000;">""</span>)))

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">tag</span> (name attributes <span style="color: #6434A3;">&amp;rest</span> body)
  <span style="color: #036A07;">"macro to create an xml tag with NAME, ATTRIBUTES. BODY is executed in the tag."</span>
  `(format <span style="color: #008000;">"%s%s%s"</span>
           (print-tag ,name ,attributes nil)
           (concat
            ,@body)
           (print-tag ,name nil t)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">headline-xml</span> (headline)
  <span style="color: #036A07;">"Return xml representation of an element HEADLINE."</span>
  (<span style="color: #0000FF;">let</span> ((title (org-element-property <span style="color: #006FE0;">:title</span> headline))
        (properties (<span style="color: #0000FF;">save-excursion</span>
                      (goto-char
                       (org-element-property <span style="color: #006FE0;">:begin</span> headline))
                      (org-entry-properties))))
    (tag 'headline ()
         (tag 'title () (xml-escape-string (mapconcat 'identity title <span style="color: #008000;">" "</span>)))
         (<span style="color: #0000FF;">when</span> properties
           (tag 'properties ()
                (mapconcat
                 'identity
                 (<span style="color: #0000FF;">loop</span> for (p . v) in properties
                       collect (tag p () (xml-escape-string v)))
                 <span style="color: #008000;">""</span>))))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">headline-document</span> (headline)
  <span style="color: #036A07;">"Return the headline \"document\" for swish-e to index."</span>
  (<span style="color: #0000FF;">let</span> ((xml (replace-regexp-in-string
              <span style="color: #008000;">"[</span><span style="color: #008000;">^</span><span style="color: #008000;">[:ascii:]]"</span> <span style="color: #008000;">""</span>
              (headline-xml headline))))
    (format <span style="color: #008000;">"Path-Name: [[elisp:(progn (find-file \"%s\") (goto-char %s) (show-children))][link]]</span>
<span style="color: #008000;">Content-Length: %s</span>
<span style="color: #008000;">Document-Type: XML*</span>

<span style="color: #008000;">%s"</span> (buffer-file-name)
(org-element-property <span style="color: #006FE0;">:begin</span> headline)
(length xml)
xml)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">process-file</span> (fname)
  <span style="color: #036A07;">"Print the `</span><span style="color: #D0372D;">headline-document</span><span style="color: #036A07;">' for each headline in FNAME."</span>
  (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect fname)
    (mapconcat 'identity
               (org-element-map (org-element-parse-buffer)
                   'headline
                 (<span style="color: #0000FF;">lambda</span> (headline)
                   (princ (headline-document headline))))
               <span style="color: #008000;">""</span>)))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here is the main work in the script.</span>
(<span style="color: #0000FF;">loop</span> for dir in '(<span style="color: #008000;">"/Users/jkitchin/blogofile-jkitchin.github.com/_blog"</span>)
      do
      (<span style="color: #0000FF;">loop</span> for fname in (f-entries
                          dir
                          (<span style="color: #0000FF;">lambda</span> (x)
                            (string=  <span style="color: #008000;">"org"</span>  (file-name-extension x)))
                          t)
            do (<span style="color: #0000FF;">ignore-errors</span>
                 (princ (process-file fname)))))
</pre>
</div>

<p>
Now we need a configuration file:
</p>

<div class="org-src-container">

<pre class="src src-text"># Example configuration file

# where to save the index
IndexFile /Users/jkitchin/blogofile-jkitchin.github.com/_blog/index-org-headlines.swish-e

# index all tags for searching
UndefinedMetaTags auto
UndefinedXMLAttributes auto
</pre>
</div>


<p>
And we run the indexer, I did this in an actual shell. For some reason, it was not possible to run here. The output is pretty useful though, as it tells you what MetaNames are searchable.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -c swish-org-headlines.conf -S prog -i ./swish-org-headlines.el
</pre>
</div>

<pre class="example">
10:17 $ swish-e -c swish-org-headlines.conf -S prog -i ./swish-org-headlines.el
Indexing Data Source: "External-Program"
Indexing "./swish-org-headlines.el"
External Program found: ./swish-org-headlines.el
**Adding automatic MetaName 'headline' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'title' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'properties' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'file' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'blocked' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'categories' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'date' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'updated' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'category' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'points' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 1391) (show-children))][link]]'
**Adding automatic MetaName 'tags' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 25) (show-children))][link]]'
**Adding automatic MetaName 'alltags' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 25) (show-children))][link]]'
**Adding automatic MetaName 'todo' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 1733) (show-children))][link]]'
**Adding automatic MetaName 'closed' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 1733) (show-children))][link]]'
**Adding automatic MetaName 'timestamp_ia' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/pdfsync.org") (goto-char 28) (show-children))][link]]'
**Adding automatic MetaName 'id' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-to-docx-pandoc.org") (goto-char 5056) (show-children))][link]]'
**Adding automatic MetaName 'custom_id' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'calculation' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'volume' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'total_energy' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'stress' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'priority' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 15327) (show-children))][link]]'
**Adding automatic MetaName 'export_title' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'export_author' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'export_file_name' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'export_date' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'scheduled' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 516502) (show-children))][link]]'
**Adding automatic MetaName 'deadline' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 516502) (show-children))][link]]'
**Adding automatic MetaName 'votes' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 532031) (show-children))][link]]'
**Adding automatic MetaName 'timestamp' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 571125) (show-children))][link]]'
**Adding automatic MetaName 'clock' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 21059) (show-children))][link]]'
**Adding automatic MetaName 'level' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 46582) (show-children))][link]]'
**Adding automatic MetaName 'correct' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 46582) (show-children))][link]]'
**Adding automatic MetaName 'permalink' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61814) (show-children))][link]]'
**Adding automatic MetaName 'hint' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 340534) (show-children))][link]]'
**Adding automatic MetaName 'answer' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 355206) (show-children))][link]]'
**Adding automatic MetaName 'correct-answer' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 377210) (show-children))][link]]'
**Adding automatic MetaName 'post_filename' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 415454) (show-children))][link]]'
**Adding automatic MetaName 'ordered' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 423900) (show-children))][link]]'
**Adding automatic MetaName 'grade' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/add-subheadings-to-headings.org") (goto-char 2822) (show-children))][link]]'
**Adding automatic MetaName ':export_file_name:' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/add-properties-to-headings.org") (goto-char 2) (show-children))][link]]'
**Adding automatic MetaName 'firstname' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'lastname' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'email' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'affiliation' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'lettergrade' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-report/Slim-Shady-HW1.org") (goto-char 29) (show-children))][link]]'
**Adding automatic MetaName 'difficulty' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/problem-selection/problem-selection.org") (goto-char 1) (show-children))][link]]'
Removing very common words...
no words removed.
Writing main index...
Sorting words ...
Sorting 6,044 words alphabetically
Writing header ...
Writing index entries ...
  Writing word text: Complete
  Writing word hash: Complete
  Writing word data: Complete
6,044 unique words indexed.
4 properties sorted.
5,084 files indexed.  1,760,249 total bytes.  368,569 total words.
Elapsed time: 00:00:37 CPU time: 00:00:01
Indexing done!
</pre>


<p>
Ok, now for the proof in the approach!
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org-headlines.swish-e -w <span style="color: #BA36A5;">headline</span>=generating
</pre>
</div>

<p>
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/separate-bib.org") (goto-char 1) (show-children))">link</a> "separate-bib.org") (goto-char 1) (show-children))][link]]" 393
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 158456) (show-children))">link</a> "blog-2014.org") (goto-char 158456) (show-children))][link]]" 229
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 272383) (show-children))">link</a> "blog-2014.org") (goto-char 272383) (show-children))][link]]" 400
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 158456) (show-children))">link</a> "blog-2014.org") (goto-char 158456) (show-children))][link]]" 229
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 448965) (show-children))">link</a> "blog.org") (goto-char 448965) (show-children))][link]]" 389
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 575) (show-children))">link</a> "org-db.org") (goto-char 575) (show-children))][link]]" 204
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 575) (show-children))">link</a> "org-db.org") (goto-char 575) (show-children))][link]]" 204
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/separate-bib.org") (goto-char 1) (show-children))">link</a> "separate-bib.org") (goto-char 1) (show-children))][link]]" 393
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 272383) (show-children))">link</a> "blog-2014.org") (goto-char 272383) (show-children))][link]]" 400
.
</p>


<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org-headlines.swish-e -w <span style="color: #BA36A5;">todo</span>=TODO
</pre>
</div>

<p>
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 16933) (show-children))">link</a> "blog.org") (goto-char 16933) (show-children))][link]]" 342
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61231) (show-children))">link</a> "blog-2014.org") (goto-char 61231) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60802) (show-children))">link</a> "blog-2014.org") (goto-char 60802) (show-children))][link]]" 274
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60289) (show-children))">link</a> "blog-2014.org") (goto-char 60289) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61568) (show-children))">link</a> "blog-2014.org") (goto-char 61568) (show-children))][link]]" 246
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61231) (show-children))">link</a> "blog-2014.org") (goto-char 61231) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60802) (show-children))">link</a> "blog-2014.org") (goto-char 60802) (show-children))][link]]" 274
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60289) (show-children))">link</a> "blog-2014.org") (goto-char 60289) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 632875) (show-children))">link</a> "blog.org") (goto-char 632875) (show-children))][link]]" 266
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 529123) (show-children))">link</a> "blog.org") (goto-char 529123) (show-children))][link]]" 202
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 529087) (show-children))">link</a> "blog.org") (goto-char 529087) (show-children))][link]]" 206
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 518108) (show-children))">link</a> "blog.org") (goto-char 518108) (show-children))][link]]" 280
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 30559) (show-children))">link</a> "blog.org") (goto-char 30559) (show-children))][link]]" 337
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61568) (show-children))">link</a> "blog-2014.org") (goto-char 61568) (show-children))][link]]" 246
.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
This could be super useful for a lot of different elements: headlines, src-blocks, links, tables, paragraphs are the main ones that come to mind. You could have pretty focused searches that go straight to the matches!</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
