<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Wed, 05 Nov 2014 15:59:46 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>A generalized org-link with an extendable menu of actions</title>
      <link>http://jkitchin.github.io/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions</link>
      <pubDate>Sun, 02 Nov 2014 19:33:14 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">Cf0O5RZ6zgyMNAxFnpLeAp2Dm7Q=</guid>
      <description>A generalized org-link with an extendable menu of actions</description>
      <content:encoded><![CDATA[


<p>
In org-ref the cite links are actually a menu of options. Here I want to explore generalizing the concept, and enable users to add new menu items. When you click on a cite link, it calls a function that constructs the menu as a string. Then, we read something from the minibuffer to say what should be done. We could store these things in variables, so that a user could add their own things. We need a list of characters, menu strings, and functions to run when to create the menu. Here we put together a little example code that shows the idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-a</span> (link)
  (message <span style="color: #228b22;">"You picked option A for %s"</span> link))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-b</span> (link)
  (message <span style="color: #228b22;">"You picked option B for %s"</span> link))

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">menu-funcs</span>
 '((<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"Option 1"</span> option-a)
   (<span style="color: #228b22;">"b"</span> <span style="color: #228b22;">"Option 2"</span> option-b)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">menu-click</span> (path)
  (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     menu-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
  (setq input (read-char-exclusive))
  (funcall
   (elt 
    (assoc
     (char-to-string input) menu-funcs)
    2)
   path))

(org-add-link-type
 <span style="color: #228b22;">"menu"</span>
 'menu-click)
</pre>
</div>

<p>
<a href="element">element</a>  Clicking on that link in Emacs gives me the desired menu!
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu.png"> 
</p>
</div>

<p>
and 
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu-response.png"> 
</p>
</div>

<p>
Now, we test adding a new function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-c</span> (link)
  (message <span style="color: #228b22;">"You picked option C for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"c"</span> <span style="color: #228b22;">"Option C"</span> option-c))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>
</tbody>
</table>

<p>
Well, that worked fine! You might want to append to the list instead of put it at the beginning, but that is really your choice.  
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-4</span> (link)
  (message <span style="color: #228b22;">"You picked option 4 for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"4"</span> <span style="color: #228b22;">"Option 4"</span> option-4) t)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>

<tr>
<td class="left">4</td>
<td class="left">Option 4</td>
<td class="left">option-4</td>
</tr>
</tbody>
</table>

<p>
I think this example more or less shows the basic idea here. These external functions may do a variety of things, like look up something on google, or some other web service, search for something on your hard drive, etc&#x2026; For example in org-ref, clicking on a cite link gives you options to open the bibtex file, a pdf, a url or notes. This would allow you to open other things too, if you felt like it. For better or worse, you can modify the behavior of the link after it is defined.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Org-mode is awesome</title>
      <link>http://jkitchin.github.io/blog/2014/07/12/Org-mode-is-awesome</link>
      <pubDate>Sat, 12 Jul 2014 16:12:48 EDT</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">_45SimKxhFSfQ9d5P8nYlNpi24o=</guid>
      <description>Org-mode is awesome</description>
      <content:encoded><![CDATA[



<p>
I made a video on Youtube (<a href="https://www.youtube.com/watch?v=fgizHHd7nOo">https://www.youtube.com/watch?v=fgizHHd7nOo</a> ) demonstrating how we use Emacs and org-mode. The source for that file can be found <a href="/media/2014-07-12-Org-mode-is-awesome/why-org-mode.org">here</a> .
</p>

<p>
There are some other good org-mode videos out there. Here are few:
</p>

<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">Emacs Org-mode - a system for note-taking and project planning</a> (Carsten Dominik)
</li>
<li><a href="https://www.youtube.com/watch?v=6W82EdwQhxU">Hack Emacs - An Overview of Org Mode</a> 
</li>
<li><a href="https://www.youtube.com/watch?v=nsGYet02bEk">Hack Emacs - Org Mode In Depth: Managing Structure</a> 
</li>
<li><a href="http://www.youtube.com/watch?v=1-dUkyn_fZA">Emacs + org-mode + python in reproducible research; SciPy 2013 Presentation</a> 
</li>
<li><a href="http://www.youtube.com/watch?v=JyvpSVl4_dg">Using org-ref</a> 
</li>
<li><a href="http://vimeo.com/99167082">Emacs Org-mode Bibtex Screencast</a> 
</li>
</ul>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/07/12/Org-mode-is-awesome.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
