<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-12-17T14:01:31Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using Pymacs to integrate Python into Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs" />
    <id>http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs</id>
    <updated>2014-10-19T09:33:08Z</updated>
    <published>2014-10-19T09:33:08Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Using Pymacs to integrate Python into Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs"><![CDATA[


<p>
<a href="https://github.com/pinard/Pymacs">Pymacs</a> is a project that aims to integrate Python into Emacs, and vice versa. In this post, I am going to examine the Python into Emacs integration. I cloned the git repository, ran make install, and setup my init.el file like this, as suggested in the manual.
</p>

<pre class="example">
(add-to-list 'load-path (expand-file-name "Pymacs" starter-kit-dir))
(require 'pymacs)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
</pre>

<p>
Pymacs provides some mapping of Python modules to emacs-lisp functions. You load modules in emacs-lisp, and then a dash-mangled version of the Python functions are available, <i>in emacs lisp</i>. Here is an example. We will load numpy, and find the maximum element of an array. For comparison, here is the Python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.max(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Now, the corresponding emacs version using Pymacs.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(np-max (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Neat! The dot notation is basically replaced with dash notation, and we use a lisp list as the argument instead of an array. Otherwise, this looks almost identical. Now, let us consider something more complicated, and get the determinant of the array. We add a PREFIX to the load statement for numpy.linalg similar to what we would do in Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> numpy.linalg <span style="color: #8b0000;">as</span> la
<span style="color: #8b0000;">print</span> la.det(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
And in emacs-lisp:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(pymacs-load <span style="color: #228b22;">"numpy.linalg"</span> <span style="color: #228b22;">"la-"</span>)
(la-det (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
We can call functions from matplotlib to make a figure. For example:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"matplotlib.pyplot"</span> <span style="color: #228b22;">"plt-"</span>)
(<span style="color: #8b0000;">let*</span> ((x  '(1 2 3 4))
       (y  (mapcar (<span style="color: #8b0000;">lambda</span> (z) (* z z)) x)))
  (plt-plot x y)
  (plt-xlabel <span style="color: #228b22;">"x values"</span>)
  (plt-ylabel <span style="color: #228b22;">"x$^2$"</span>)
  (plt-savefig <span style="color: #228b22;">"plt-pymacs.png"</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-10-19-Using-Pymacs-to-integrate-Python-into-Emacs/plt-pymacs.png"> 
</p>
</div>

<p>
This was a little subtle. It was necessary to save the lists as variables, and use the variables in the plot command.
</p>

<p>
I am not sure what this offers over just having a Python block present in org-mode though. Maybe it is more useful in emacs-lisp libraries where you want to bring in some numerical analysis. Or if you have some custom library of Python you would like to use in elisp. Here is a highly contrived example. Suppose we have a Python module with this special function that converts an argument to "J":
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">special_func</span>(x):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">"J"</span>
</pre>
</div>

<p>
In Python, we might use it like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> my_python <span style="color: #8b0000;">as</span> mp
<span style="color: #8b0000;">print</span> [mp.special_func(x) <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>]]
</pre>
</div>

<pre class="example">
['J', 'J', 'J']
</pre>

<p>
We can import the module, and use the function in emacs-lisp too. The underscore in the function name is turned into a dash, which is a little confusing, but it works otherwise.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"my_python"</span> <span style="color: #228b22;">"mp-"</span>)
(mapcar 'mp-special-func '(1 2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">J</td>
<td class="left">J</td>
<td class="left">J</td>
</tr>
</tbody>
</table>


<p>
It does not seem possible to do everything though. For example, It is not clear how to pass functions through either side. For example, this does not work for fsolve, although it seems like it should. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"scipy.optimize"</span> <span style="color: #228b22;">"so-"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">objective</span> (x)
  (- x 5))

(so-fsolve 'objective 3)
</pre>
</div>

<p>
I get an error like this:
</p>
<pre class="example">
Pymacs loading scipy.optimize...done
pymacs-report-error: Python: Emacs: "(wrong-type-argument number-or-marker-p (pymacs-python . 47))"
</pre>

<p>
The Python equivalent is here:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(x):
    <span style="color: #8b0000;">return</span> x - <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>

<span style="color: #8b0000;">print</span> fsolve(objective, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
</pre>
</div>

<pre class="example">
[ 5.]
</pre>

<p>
There is an open question on StackOverflow <a href="http://stackoverflow.com/questions/25471580/can-you-use-a-function-as-an-argument-to-a-python-function-in-pymacs">here</a> on this issue. Overall, I find the project very interesting. It would be awesome if you could extend emacs more easily in other languages, especially scripting languages such as Python that have numerical and plotting capabilities. Right now, this is possible in limited ways. For example, Xah Lee describes an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">approach</a> where an arbitrary script can take data on stdin, process it, and output the results to stdout. Emacs can capture this and use it to modify the buffer. This uses the <code>shell-command</code> features in Emacs. These scripts could be written in Python, Perl, Ruby, etc&#x2026; This seems like a simpler and more flexible approach, except that it requires creating the shell commands and putting them on the executable path (as opposed to having Python modules on a PYTHONPATH). These lack the deep integration of documentation you get with emacs-lisp and Python functions.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Editing org-mode python source blocks in an external editor (Canopy)]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy" />
    <id>http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy</id>
    <updated>2014-09-28T14:41:49Z</updated>
    <published>2014-09-28T14:41:49Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Editing org-mode python source blocks in an external editor (Canopy)]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy"><![CDATA[


<p>
Continuing on the <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode/">last post</a> about leveraging org-mode and python syntax checkers, here we consider using (heresy alert&#x2026;) an external editor for Python src blocks in org-mode. Why would we consider such insanity? Because, for beginners, environments such as Canopy are (IMHO) easier to use, and better than anything I have used in Emacs. And, I still want the framework of org-mode for content, just a better Python code writing environment.
</p>

<p>
This problem has some interesting challenges. I would like a command that opens a code block with its contents in the Canopy editor, or that creates a code block if needed. We need to figure out that context based on the cursor position. We will use the same temporary file strategy as used before, so Canopy has something to read and save to. We need to wait for Canopy to finish, which will be tricky because it returns as soon as you run it. Finally, I want the code block to run after it is put back in the org-file, so that the results are captured. 
</p>

<p>
This code block implements the idea, and the comments in the code explain what each section is doing.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">edit-in-canopy</span> ()
  (interactive)
  (<span style="color: #8b0000;">let*</span> ((eop (org-element-at-point))
         ;; <span style="color: #ff0000; font-weight: bold;">use current directory for temp file so relative paths work</span>
         (temporary-file-directory <span style="color: #228b22;">"."</span>)
         (tempfile))

    ;; <span style="color: #ff0000; font-weight: bold;">create a tempfile. </span>
    (setq tempfile (make-temp-file <span style="color: #228b22;">"canopy"</span> nil <span style="color: #228b22;">".py"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">figure out what to do</span>
    (<span style="color: #8b0000;">when</span>
        ;; <span style="color: #ff0000; font-weight: bold;">in an existing source block. we want to edit it.</span>
        (and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
          
      ;; <span style="color: #ff0000; font-weight: bold;">put code into tempfile</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop))))

    ;; <span style="color: #ff0000; font-weight: bold;">open tempfile in canopy</span>
    (shell-command (concat <span style="color: #228b22;">"canopy "</span> tempfile))
    (sleep-for 2) ;; <span style="color: #ff0000; font-weight: bold;">startup time. canopy is slow to showup in</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">ps. This gives it some time to do that. Canopy</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">returns right away, so we sleep while there is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">evidence that it is open. We get that evidence</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">from ps by searching for canopy.app.main, which</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">seems to exist in the output while Canopy is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">open.</span>
    (<span style="color: #8b0000;">while</span>
        (string-match <span style="color: #228b22;">"canopy\.app\.main"</span>
                      (shell-command-to-string <span style="color: #228b22;">"ps aux"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">pause a while, then check again.</span>
      (sleep-for 1))

    ;; <span style="color: #ff0000; font-weight: bold;">Canopy has closed, so we get the new script contents</span>
    (<span style="color: #8b0000;">let</span> ((new-contents (<span style="color: #8b0000;">with-temp-buffer</span>
                          (insert-file-contents tempfile)
                          (buffer-string))))
      (<span style="color: #8b0000;">cond</span>
       ;; <span style="color: #ff0000; font-weight: bold;">replace existing code block contents</span>
       ((and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
        (goto-char (org-element-property <span style="color: #cd0000;">:begin</span> eop))
        (search-forward (org-element-property <span style="color: #cd0000;">:value</span> eop))
        (replace-match (concat new-contents <span style="color: #228b22;">"\n"</span>)))
       ;; <span style="color: #ff0000; font-weight: bold;">create new code block</span>
       (t
        (insert
         (format <span style="color: #228b22;">"\n#+BEGIN_SRC python</span>
<span style="color: #228b22;">%s</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span> new-contents))
        ;; <span style="color: #ff0000; font-weight: bold;">go into new block so we can run it.</span>
        (previous-line 2))))

    ;; <span style="color: #ff0000; font-weight: bold;">delete the tempfile so they do not accumulate</span>
    (delete-file tempfile)
    ;; <span style="color: #ff0000; font-weight: bold;">and run the new block to get the results</span>
    (org-babel-execute-src-block)))
</pre>
</div>

<pre class="example">
edit-in-canopy
</pre>

<p>
That seems to work. It is difficult to tell from this post the function works as advertised. You can see it in action here: <a href="http://www.youtube.com/watch?v=-noKrT1dfFE">http://www.youtube.com/watch?v=-noKrT1dfFE</a> .
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">dydx</span>(y, x):
    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">k</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>
    <span style="color: #8b0000;">return</span> -k * y

<span style="color: #8b0000;">print</span> odeint(dydx, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>])

<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.exp(-<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)
</pre>
</div>

<pre class="example">
[[ 1.        ]
 [ 0.36787947]]
0.367879441171
</pre>



<p>
We created this code block externally.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello'</span>
</pre>
</div>

<pre class="example">
hello
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
Opening Canopy is a little slow (and that is coming from someone who opens Emacs ;). But, once it is open it is pretty nice for writing code, with the interactive Ipython console, and integrated help. Yes, it is probably possible to get Emacs to do that too, and maybe it will do that one day. Canopy does it today.
</p>

<p>
Unfortunately, this code will not work on Windows, most likely, since it relies on the ps program. There does seem to be a tasklist function in Windows that is similar, but it seems that Canopy runs as pythonw in that function, which is not very specific.</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-(Canopy).org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Improved debugging of Python code blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode</id>
    <updated>2014-09-27T15:27:40Z</updated>
    <published>2014-09-27T15:27:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Improved debugging of Python code blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode"><![CDATA[


<p>
Writing and running code blocks in org-mode is awesome, when it works. I find as the code blocks get past a certain size though, it can be tedious to debug, especially for new users. Since I am teaching 59 students to use Python in org-mode, I see this issue a lot! They lack experience to avoid many simple errors, and to find and fix them. Even in my hands, I do not always want to be switching to Python mode to run and debug blocks. 
</p>

<p>
org-mode src-blocks offer a unique challenge for the usual tools like pylint and pychecker, because the code does not exist in a file. In this post, I will explore developing some functions that do syntax checking on a src block. We will use a simple method which will write the block to a temporary file, and to the checking on that block. Then, we will create temporary buffers with the output.
</p>

<p>
Here is the first idea. We create a temp file in the working directory, write the code to it, and run pychecker, pyflakes and pep8 on the file. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-pychecker</span> ()
  <span style="color: #228b22;">"Run pychecker on a source block"</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((eop (org-element-at-point))
        (temporary-file-directory <span style="color: #228b22;">"."</span>)
        (tempfile))
    (<span style="color: #8b0000;">when</span> (and (eq 'src-block (car eop))
               (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
      (setq tempfile (make-temp-file <span style="color: #228b22;">"pychecker"</span> nil <span style="color: #228b22;">".py"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">create code file</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop)))
      (switch-to-buffer <span style="color: #228b22;">"*pychecker*"</span>)
      (erase-buffer)
      (insert <span style="color: #228b22;">"pychecker\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pychecker %s"</span> (file-name-nondirectory tempfile))))
      (insert <span style="color: #228b22;">"\npyflakes\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pyflakes %s"</span> (file-name-nondirectory tempfile))))
      (insert <span style="color: #228b22;">"\npep8\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pep8 %s"</span> (file-name-nondirectory tempfile))))
      (delete-file tempfile))))
</pre>
</div>

<p>
Here is a sample code block with some errors in it.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">a</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>  <span style="color: #ff0000; font-weight: bold;"># a variable we do not use</span>


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x, y):  <span style="color: #ff0000; font-weight: bold;"># unused argument</span>
    <span style="color: #8b0000;">return</span> x - b <span style="color: #ff0000; font-weight: bold;"># undefined variable</span>

<span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> * c
</pre>
</div>

<p>
On the code block above, that function leads to this output.
</p>

<pre class="example">
pychecker
=================
Processing module pychecker63858xo0 (pychecker63858xo0.py)...
  Caught exception importing module pychecker63858xo0:
    File "/Users/jkitchin/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/pychecker/pcmodules.py", line 540, in setupMainCode()
      module = imp.load_module(self.moduleName, handle, filename, smt)
    File "pychecker63858xo0.py", line 7, in &lt;module&gt;()
      print 6 * c
  NameError: name 'c' is not defined

Warnings...

pychecker63858xo0:1: NOT PROCESSED UNABLE TO IMPORT

pyflakes
=================
pychecker63858xo0.py:5: undefined name 'b'
pychecker63858xo0.py:7: undefined name 'c'

pep8
=================
pychecker63858xo0.py:5:17: E261 at least two spaces before inline comment
</pre>

<p>
That is pretty helpful, but it gives us line numbers we cannot directly access in our code block. We can open the code block in Python mode, and then navigate to them, but that is likely to make the buffer with this information disappear. It would be better if we could just click on a link and go to the right place. Let us explore what we need for that. 
</p>

<p>
We need to parse the output to get the line numbers, and then we can construct org-links to those places in the src block. pyflakes, pep8 and pylint look like the easiest to get. A way to get to the line would be a lisp function that moves to the beginning of the code block, and then moves forward n lines. We will use a regular expression on each line of the output of pyflakes and pep8 to get the line number. We will construct an org-link to go to the source block at the line. 
</p>

<p>
In this long code block, we create a function that will run pyflakes, pep8 and pylint, and create a new buffer with links to the issues it finds. Finally, we apply this as advice on executing org-babel-execute:python so it only runs when we execute a python block in org-mode. This is a long block, because I have made it pretty feature complete. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-py-check</span> ()
  <span style="color: #228b22;">"Run python check programs on a source block.</span>
<span style="color: #228b22;">Opens a buffer with links to what is found."</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((eop (org-element-at-point))
        (temporary-file-directory <span style="color: #228b22;">"."</span>)
        (cb (current-buffer))
        (n) ; <span style="color: #ff0000; font-weight: bold;">for line number</span>
        (content) ; <span style="color: #ff0000; font-weight: bold;">error on line</span>
        (pb <span style="color: #228b22;">"*org pycheck*"</span>)
        (pyflakes-status nil)
        (link)
        (tempfile))

    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pyflakes"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pyflakes is not installed."</span>))
    
    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pep8"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pep8 not installed"</span>))

    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pylint"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pylint not installed"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">rm buffer if it exists</span>
    (<span style="color: #8b0000;">when</span> (get-buffer pb) (kill-buffer pb))
    
    ;; <span style="color: #ff0000; font-weight: bold;">only run if in a python code-block</span>
    (<span style="color: #8b0000;">when</span> (and (eq 'src-block (car eop))
               (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))

      ;; <span style="color: #ff0000; font-weight: bold;">tempfile for the code</span>
      (setq tempfile (make-temp-file <span style="color: #228b22;">"pychecker"</span> nil <span style="color: #228b22;">".py"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">create code file</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop)))
      
      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pyflakes %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (setq pyflakes-status status)
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n* pyflakes output (status=%s)</span>
<span style="color: #228b22;">pyflakes checks your code for errors. You should probably fix all of these.</span>

<span style="color: #228b22;">"</span> status))
          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">get the line number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match (format <span style="color: #228b22;">"^%s:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>
                                      (file-name-nondirectory tempfile))
                              line)
                (<span style="color: #8b0000;">progn</span>
                  (setq n (match-string 1 line))
                  (setq content (match-string 2 line))
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     n
                                     (format <span style="color: #228b22;">"Line %s: %s"</span> n content))))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))

      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pep8 %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n\n* pep8 output (status = %s)\n"</span> status))
          (insert <span style="color: #228b22;">"pep8 is the [[http://legacy.python.org/dev/peps/pep-0008][officially recommended style]] for writing Python code. Fixing these will usually make your code more readable and beautiful. Your code will probably run if you do not fix them, but, it will be ugly.</span>

<span style="color: #228b22;">"</span>)
          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">get the line number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match (format <span style="color: #228b22;">"^%s:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>
                                      (file-name-nondirectory tempfile))
                              line)
                (<span style="color: #8b0000;">progn</span>
                  (setq n (match-string 1 line))
                  (setq content (match-string 2 line))
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     n
                                     (format <span style="color: #228b22;">"Line %s: %s"</span> n content))))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))

      ;; <span style="color: #ff0000; font-weight: bold;">pylint</span>
      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pylint -r no %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n\n* pylint (status = %s)\n"</span> status))
          (insert <span style="color: #228b22;">"pylint checks your code for errors, style and convention. It is complementary to pyflakes and pep8, and usually more detailed.</span>

<span style="color: #228b22;">"</span>)

          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">pylint gives a line and column number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match <span style="color: #228b22;">"[A-Z]:\\s-+</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">,\\s-*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>                            
                              line)
                (<span style="color: #8b0000;">let</span> ((line-number (match-string 1 line))
                      (column-number (match-string 2 line))
                      (content (match-string 3 line)))
                     
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s)(forward-line 0)(forward-char %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     line-number
                                     column-number
                                     line)))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))
    
      (<span style="color: #8b0000;">when</span> (get-buffer pb)
        (switch-to-buffer-other-window pb)
        (goto-char (point-min))
        (insert <span style="color: #228b22;">"Press q to close the window\n"</span>)
        (org-mode)       
        (org-cycle '(64))
        ;; <span style="color: #ff0000; font-weight: bold;">make read-only and press q to quit</span>
        (setq buffer-read-only t)
        (use-local-map (copy-keymap org-mode-map))
        (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer))))

      (<span style="color: #8b0000;">unless</span> (= 0 pyflakes-status)
        (forward-line 4)
        (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pyflakes exited non-zero. please fix errors"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">final cleanup and delete file</span>
      (delete-file tempfile)
      (switch-to-buffer-other-window cb))))


(<span style="color: #8b0000;">defadvice</span> <span style="color: #8b2323;">org-babel-execute:python</span> (before pychecker)
  (org-py-check))

(ad-activate 'org-babel-execute:python)
</pre>
</div>

<pre class="example">
org-babel-execute:python
</pre>

<p>
Now, when I try to run this code block, which has some errors in it:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">a</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>  <span style="color: #ff0000; font-weight: bold;"># a variable we do not use</span>


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x, y):  <span style="color: #ff0000; font-weight: bold;"># unused argument</span>
    <span style="color: #8b0000;">return</span> x - b <span style="color: #ff0000; font-weight: bold;"># undefined</span>

<span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> * c
</pre>
</div>

<p>
I get a new buffer with approximately these contents:
</p>

<div class="org-src-container">

<pre class="src src-org">Press q to close the window

<span style="color: #8b2323;">* pyflakes output (status=1)</span>
pyflakes checks your code for errors. You should probably fix all of these.

<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5))">Line 5:  undefined name 'b'</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 7))">Line 7:  undefined name 'c'</a></span>


<span style="color: #8b2323;">* pep8 output (status = 1)</span>
pep8 is the <span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="http://legacy.python.org/dev/peps/pep-0008">officially recommended style</a></span> for writing Python code. Fixing these will usually make your code more readable and beautiful. Your code will probably run if you do not fix them, but, it will be ugly.

<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5))">Line 5: 17: E261 at least two spaces before inline comment</a></span>


<span style="color: #8b2323;">* pylint (status = 22)pylint checks your code for errors, style and convention. It is complementary to pyflakes and pep8, and usually more detailed.</span>

No config file found, using default configuration
<span style="color: #4682b4;">************* Module pychecker68224dkX</span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Invalid module name "pychecker68224dkX" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Missing module docstring (missing-docstring)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Invalid constant name "a" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid function name "f" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid argument name "x" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid argument name "y" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Missing function docstring (missing-docstring)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5)(forward-line 0)(forward-char 15))">E:  5,15: Undefined variable 'b' (undefined-variable)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 9))">W:  4, 9: Unused argument 'y' (unused-argument)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 7)(forward-line 0)(forward-char 10))">E:  7,10: Undefined variable 'c' (undefined-variable)</a></span>
</pre>
</div>

<p>
Each of those links takes me to either the line, or the position of the error (in the case of pylint)! I have not tested this on more than a handful of code blocks, but it has worked pretty nicely on them so far!
</p>

<p>
Of course, you must have pyflakes, pep8 and pylint installed. But those are all easily installed with pip as far as I can tell.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Generating an atomic stoichiometric matrix]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/09/23/Generating-an-atomic-stoichiometric-matrix" />
    <id>http://jkitchin.github.io/blog/2014/09/23/Generating-an-atomic-stoichiometric-matrix</id>
    <updated>2014-09-23T14:25:36Z</updated>
    <published>2014-09-23T14:25:36Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="thermodynamics" />
    <summary type="html"><![CDATA[Generating an atomic stoichiometric matrix]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/09/23/Generating-an-atomic-stoichiometric-matrix"><![CDATA[



<p>
In computing thermodynamic properties with species, it is sometimes required to get a matrix that specifies number of each type of atom in each species. For example, we can create this by hand as follows:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="left">&#xa0;</td>
<td class="right">H2O</td>
<td class="right">CO2</td>
<td class="right">H2</td>
<td class="right">CO</td>
</tr>

<tr>
<td class="left">H</td>
<td class="right">2</td>
<td class="right">0</td>
<td class="right">2</td>
<td class="right">0</td>
</tr>

<tr>
<td class="left">C</td>
<td class="right">0</td>
<td class="right">1</td>
<td class="right">0</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">O</td>
<td class="right">1</td>
<td class="right">2</td>
<td class="right">0</td>
<td class="right">1</td>
</tr>
</tbody>
</table>

<p>
Here we aim to generate this table from code. Why? 1. We can readily add species to it if we do it right. 2. We are less likely to make mistakes in generation of the table, and if we do, it will be faster to regenerate the table. 
</p>

<p>
We will start with a list of strings that represent the chemical formula of each species. We will need to parse the strings to find the elements, and number of them. We will use a fairly naive regular expression to parse a chemical formula. Basically, we match a capital letter + an optional lowercase letter, followed by an optional number. Here is a fictitous example to illustrate. Note, this will not work with formulas that have parentheses, or charges. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> re
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">m</span> = re.findall(<span style="color: #228b22;">'([A-Z][a-z]?)(\d?)'</span> , <span style="color: #228b22;">'ArC2H6Cu56Pd47Co'</span>)
<span style="color: #8b0000;">print</span> m
</pre>
</div>

<pre class="example">
[('Ar', ''), ('C', '2'), ('H', '6'), ('Cu', '5'), ('Pd', '4'), ('Co', '')]
</pre>

<p>
Now, we need to loop over the species, and collect all the elements in them. We will just make a list of all of the elments, and then get the set.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> re

# <span style="color: #ff0000; font-weight: bold;">save for future use</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">cf</span> = re.compile(<span style="color: #228b22;">'([A-Z][a-z]?)(\d?)'</span>)

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">species</span> = [<span style="color: #228b22;">'H2O'</span>, <span style="color: #228b22;">'CO2'</span>, <span style="color: #228b22;">'H2'</span>, <span style="color: #228b22;">'CO2'</span>]

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">all_elements</span> = []

<span style="color: #8b0000;">for</span> s <span style="color: #8b0000;">in</span> species:
    <span style="color: #8b0000;">for</span> el, count <span style="color: #8b0000;">in</span> re.findall(cf, s):
        <span style="color: #000000; background-color: #cccccc; font-weight: bold;">all_elements</span> += [el]

<span style="color: #8b0000;">print</span><span style="color: #cd0000;"> set</span>(all_elements)
</pre>
</div>

<pre class="example">
set(['H', 'C', 'O'])
</pre>

<p>
Finally, we can create the table. We need to loop through each element, and then through each species
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> re

# <span style="color: #ff0000; font-weight: bold;">save for future use</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">cf</span> = re.compile(<span style="color: #228b22;">'([A-Z][a-z]?)(\d?)'</span>)

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">species</span> = [<span style="color: #228b22;">'H2O'</span>, <span style="color: #228b22;">'CO2'</span>, <span style="color: #228b22;">'H2'</span>, <span style="color: #228b22;">'CO2'</span>]

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">all_elements</span> = []

<span style="color: #8b0000;">for</span> s <span style="color: #8b0000;">in</span> species:
    <span style="color: #8b0000;">for</span> el, count <span style="color: #8b0000;">in</span> re.findall(cf, s):
        <span style="color: #000000; background-color: #cccccc; font-weight: bold;">all_elements</span> += [el]

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> =<span style="color: #cd0000;"> set</span>(all_elements)

# <span style="color: #ff0000; font-weight: bold;">we put a placeholder in the first row</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">counts</span> = [[<span style="color: #228b22;">""</span>] + species]
<span style="color: #8b0000;">for</span> e <span style="color: #8b0000;">in</span> atoms:
    # <span style="color: #ff0000; font-weight: bold;">store the element in the first column</span>
    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">count</span> = [e]
    <span style="color: #8b0000;">for</span> s <span style="color: #8b0000;">in</span> species:    
        <span style="color: #000000; background-color: #cccccc; font-weight: bold;">d</span> =<span style="color: #cd0000;"> dict</span>(re.findall(cf, s))
        <span style="color: #000000; background-color: #cccccc; font-weight: bold;">n</span> = d.get(e, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>)
        <span style="color: #8b0000;">if</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">n</span> == <span style="color: #228b22;">''</span>: <span style="color: #000000; background-color: #cccccc; font-weight: bold;">n</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>
        <span style="color: #000000; background-color: #cccccc; font-weight: bold;">count</span> += <span style="color: #cd0000;">[int</span>(n)]
    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">counts</span> += [count]

# <span style="color: #ff0000; font-weight: bold;">this directly returns the array to org-mode</span>
<span style="color: #8b0000;">return</span> counts
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="left">&#xa0;</td>
<td class="right">H2O</td>
<td class="right">CO2</td>
<td class="right">H2</td>
<td class="right">CO2</td>
</tr>

<tr>
<td class="left">H</td>
<td class="right">2</td>
<td class="right">0</td>
<td class="right">2</td>
<td class="right">0</td>
</tr>

<tr>
<td class="left">C</td>
<td class="right">0</td>
<td class="right">1</td>
<td class="right">0</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">O</td>
<td class="right">1</td>
<td class="right">2</td>
<td class="right">0</td>
<td class="right">2</td>
</tr>
</tbody>
</table>

<p>
For this simple example it seems like a lot of code. If there were 200 species though, it would be the same code! Only the list of species would be longer. It might be possible to avoid the two sets of looping, if you could represent the stoichiometric matrix as a sparse matrix, i.e. only store non-zero elements. The final comment I have is related to the parsing of the chemical formulas. Here we can only parse simple formulas. To do better than this would require a pretty sophisticated parser, probably built on the grammar of chemical formulas. The example <a href="http://www.onlamp.com/pub/a/python/2006/01/26/pyparsing.html?page=3">here</a> implements the code above using pyparsing, and could probably be extended to include more complex formulas such as (CH3)3CH.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/23/Generating-an-atomic-stoichiometric-matrix.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Finding the maximum power of a photovoltaic device.]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device" />
    <id>http://jkitchin.github.io/blog/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device</id>
    <updated>2014-04-15T20:38:10Z</updated>
    <published>2014-04-15T20:38:10Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="optimization" />
    <summary type="html"><![CDATA[Finding the maximum power of a photovoltaic device.]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device"><![CDATA[



<p>
A photovoltaic device is characterized by a current-voltage relationship. Let us say, for argument's sake, that the relationship is known and defined by
</p>

<p>
\(i = 0.5 - 0.5 * V^2\)
</p>

<p>
The voltage is highest when the current is equal to zero, but of course then you get no power. The current is highest when the voltage is zero, i.e. short-circuited, but there is again no power. We seek the highest power condition, which is to find the maximum of \(i V\). This is a constrained optimization. We solve it by creating an objective function that returns the negative of (\i V\), and then find the minimum.
</p>

<p>
First, let us examine the i-V relationship.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b008b;">V</span> = np.linspace(0, 1)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">i</span>(V):
    <span style="color: #8b0000;">return</span> 0.5 - 0.5 * V**2
plt.plot(V, i(V))
plt.savefig(<span style="color: #228b22;">'images/iV.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-04-15-Finding-the-maximum-power-of-a-photovoltaic-device./iV.png"> 
</p>
</div>


<p>
Now, let us be sure there is a maximum in power.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b008b;">V</span> = np.linspace(0, 1)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">i</span>(V):
    <span style="color: #8b0000;">return</span> 0.5 - 0.5 * V**2
plt.plot(V, i(V) * V)
plt.savefig(<span style="color: #228b22;">'images/P1.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-04-15-Finding-the-maximum-power-of-a-photovoltaic-device./P1.png"> 
</p>
</div>

<p>
You can see in fact there is a maximum, near V=0.6. We could solve this problem analytically by taking the appropriate derivative and solving it for zero. That still might require solving a nonlinear problem though. We will directly setup and solve the constrained optimization. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(X):
    <span style="color: #8b008b;">i</span>, <span style="color: #8b008b;">V</span> = X
    <span style="color: #8b0000;">return</span> - i * V

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">eqc</span>(X):
    <span style="color: #228b22;">'equality constraint'</span>
    <span style="color: #8b008b;">i</span>, <span style="color: #8b008b;">V</span> = X
    <span style="color: #8b0000;">return</span> (0.5 - 0.5 * V**2) - i

<span style="color: #8b008b;">X0</span> = [0.2, 0.6]
<span style="color: #8b008b;">X</span> = fmin_slsqp(objective, X0, eqcons=[eqc])

<span style="color: #8b008b;">imax</span>, <span style="color: #8b008b;">Vmax</span> = X


<span style="color: #8b008b;">V</span> = np.linspace(0, 1)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">i</span>(V):
    <span style="color: #8b0000;">return</span> 0.5 - 0.5 * V**2
plt.plot(V, i(V), Vmax, imax, <span style="color: #228b22;">'ro'</span>)
plt.savefig(<span style="color: #228b22;">'images/P2.png'</span>)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.    (Exit mode 0)
            Current function value: -0.192450127337
            Iterations: 5
            Function evaluations: 20
            Gradient evaluations: 5
</pre>


<div class="figure">
<p><img src="/media/2014-04-15-Finding-the-maximum-power-of-a-photovoltaic-device./P2.png"> 
</p>
</div>

<p>
You can see the maximum power is approximately 0.2 (unspecified units), at the conditions indicated by the red dot in the figure above.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device..org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Scheduling tasks on a rotating semester basis]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis" />
    <id>http://jkitchin.github.io/blog/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis</id>
    <updated>2014-04-03T19:29:35Z</updated>
    <published>2014-04-03T19:29:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Scheduling tasks on a rotating semester basis]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis"><![CDATA[



<p>
Let us say we have a list of tasks labeled task a through k. We want to schedule these tasks on a rotating basis, so that some tasks are done in even years and some tasks are done in odd years. Within those years, some tasks are done in the Fall, and some are done in the spring. This post explores how to code those tasks so we can figure out which tasks should be done in some part of some year. 
</p>

<p>
We break the problem down like this. A year is an even year if <code>mod(year,2)=0</code>, and it is odd if <code>mod(year,2)=1</code>. So for a year, we have a bit of information. Now, since there are two times of the year we will do the tasks, we can assign this as another bit, e.g. <code>FALL=0</code>, and <code>SPRING=1</code>. Now, we have the following possibilities:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="left" />

<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">year</th>
<th scope="col" class="left">time period</th>
<th scope="col" class="right">binary code</th>
<th scope="col" class="right">decimal number</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">2013</td>
<td class="left">Fall</td>
<td class="right">10</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">2014</td>
<td class="left">Spring</td>
<td class="right">01</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2014</td>
<td class="left">Fall</td>
<td class="right">00</td>
<td class="right">0</td>
</tr>

<tr>
<td class="right">2015</td>
<td class="left">Spring</td>
<td class="right">11</td>
<td class="right">3</td>
</tr>
</tbody>
</table>

<p>
And then the cycle will repeat. So, if we code each task with an integer of 0, 1, 2 or 3, we can say in a given year and time period whether a task should be completed. If <code>2 * mod(year, 2) + period_code</code> is equal to the code on the task, then it should be executed.
</p>

<p>
Now, we need to start the task sequence. Let us say we start in the Fall of 2013. That is an odd year, so <code>year % 2 = 1</code>, and we use a tag  of <code>0</code> to represent the Fall semester, giving an overall binary code of <code>10</code> which is equal to 2, so all tasks labeled 2 should be executed. 
</p>

<p>
We will assign the codes to each task by enumerating a string of letters, and giving the task a code of mod(letter index, 4). That will loop through the tasks assigning codes of 0, 1, 2 or 3 to each task. 
</p>

<p>
So to schedule these we will loop through a list of years, calculate the code for each year and time perid, and then filter the list of tasks with that code.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">tasks</span> = [(letter, i % 4) <span style="color: #8b0000;">for</span> i,letter <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">enumerate</span>(<span style="color: #228b22;">'abcdefghijk'</span>)]

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'tasks = '</span>,tasks

<span style="color: #8b008b;">SEMESTERS</span> = ((<span style="color: #228b22;">'FALL'</span>,0), (<span style="color: #228b22;">'SPRING'</span>,1))

<span style="color: #8b0000;">for</span> year <span style="color: #8b0000;">in</span> [2013, 2014, 2015, 2016, 2017, 2018]:
    <span style="color: #8b0000;">for</span> semester,i <span style="color: #8b0000;">in</span> SEMESTERS:
        <span style="color: #8b008b;">N</span> = 2 * (year % 2) + i
        <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0} {1:8s}: {2}'</span>.<span style="color: #cd0000;">format</span>(year, semester,
                                    [x[0] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> 
                                     <span style="color: #cd0000;">filter</span>(<span style="color: #8b0000;">lambda</span> x: x[1]==N,
                                            tasks)])
</pre>
</div>

<pre class="example">
tasks =  [('a', 0), ('b', 1), ('c', 2), ('d', 3), ('e', 0), ('f', 1), ('g', 2), ('h', 3), ('i', 0), ('j', 1), ('k', 2)]
2013 FALL    : ['c', 'g', 'k']
2013 SPRING  : ['d', 'h']
2014 FALL    : ['a', 'e', 'i']
2014 SPRING  : ['b', 'f', 'j']
2015 FALL    : ['c', 'g', 'k']
2015 SPRING  : ['d', 'h']
2016 FALL    : ['a', 'e', 'i']
2016 SPRING  : ['b', 'f', 'j']
2017 FALL    : ['c', 'g', 'k']
2017 SPRING  : ['d', 'h']
2018 FALL    : ['a', 'e', 'i']
2018 SPRING  : ['b', 'f', 'j']
</pre>

<p>
This leads to each task being completed every other year. We could also write a function and filter by list comprehension.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">tasks</span> = [(letter, i % 4) <span style="color: #8b0000;">for</span> i,letter <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">enumerate</span>(<span style="color: #228b22;">'abcdefghijk'</span>)]

<span style="color: #8b008b;">FALL</span> = 0
<span style="color: #8b008b;">SPRING</span> = 1

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">execute_p</span>(year, semester, task):
    <span style="color: #228b22;">'year is an integer, semester is 0 for fall, 1 for spring, task is a tuple of (label,code)'</span>
    <span style="color: #8b008b;">N</span> = 2 * (year % 2) + semester
    <span style="color: #8b0000;">return</span> task[1] == N

<span style="color: #8b008b;">YEAR</span>, SEMESTER = 2018, FALL
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0} {1:8s}: {2}'</span>.<span style="color: #cd0000;">format</span>(YEAR, 
                               <span style="color: #228b22;">'FALL'</span> <span style="color: #8b0000;">if</span> SEMESTER==0 <span style="color: #8b0000;">else</span> <span style="color: #228b22;">'SPRING'</span>,
                               [task[0]  <span style="color: #8b0000;">for</span> task <span style="color: #8b0000;">in</span> tasks
                                <span style="color: #8b0000;">if</span> execute_p(2018, FALL, task)])
</pre>
</div>

<pre class="example">
2018 FALL    : ['a', 'e', 'i']
</pre>

<p>
Now, at any point in the future you can tell what tasks should be done!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using pyparsing for search  queries with tags]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags" />
    <id>http://jkitchin.github.io/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags</id>
    <updated>2014-03-31T13:21:16Z</updated>
    <published>2014-03-31T13:21:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Using pyparsing for search  queries with tags]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Parsing simple string and generating lisp</a></li>
<li><a href="#sec-2">2. Parsing a search string to generate python set notations</a></li>
</ul>
</div>
</div>

<p>
A few times I  have wanted  to use  a more natural search string like "A and pw and 350 and not  kpt". The trouble  is figuring out how to parse that string and turn it  into search code. There  may  be nested logic,  e.g. "(A xor B)  and  (pw and (200 or 300))". This means we have  to recursively parse  the sstring. Rather  than invent this from  scratch, we  use pyparsing which is designed for that. There is   some code in "Getting started with pyparsing" that provides an example on parsing search strings. I want to see how I can turn the parsed output into search code. Here, we parse the search string and generate something that looks like lisp code. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Parsing simple string and generating lisp</h2>
<div class="outline-text-2" id="text-1">
<p>
We define  a  hiearchy of classes that codifythe operators, and which print representations of the logic. The grammar we implement is basically words or  strings separatedd by logic operators.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> pyparsing <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">UnaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #228b22;">'takes one operand,e.g. not'</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op, <span style="color: #8b0000;">self</span>.operands = tokens[0]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">BinaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #228b22;">'takes two or more operands, e.g. and, or'</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op = tokens[0][1]
        <span style="color: #8b0000;">self</span>.operands = tokens[0][0::2]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchAnd</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'(AND {0})'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #228b22;">' '</span>.join(<span style="color: #cd0000;">str</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands))
        
<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchOr</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'(OR {0})'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #228b22;">' '</span>.join(<span style="color: #cd0000;">str</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands))

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchNot</span>(UnaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'(NOT {0})'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.operands)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchTerm</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #228b22;">'represents a termthat is being searched. here just a word'</span>                         
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.term = tokens[0]

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #8b0000;">self</span>.term

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the grammar</span>
<span style="color: #8b008b;">and_</span> = CaselessLiteral(<span style="color: #228b22;">"and"</span>)
<span style="color: #8b008b;">or_</span> = CaselessLiteral(<span style="color: #228b22;">"or"</span>)
<span style="color: #8b008b;">not_</span> = CaselessLiteral(<span style="color: #228b22;">"not"</span>)

<span style="color: #8b008b;">searchTerm</span> = Word(alphanums) | quotedString.setParseAction(removeQuotes)
searchTerm.setParseAction(SearchTerm)

<span style="color: #8b008b;">searchExpr</span> = operatorPrecedence( searchTerm,
                                 [(not_, 1, opAssoc.RIGHT, SearchNot),
                                  (and_, 2, opAssoc.LEFT, SearchAnd),
                                  (or_, 2, opAssoc.LEFT, SearchOr)])


<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not kpt'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not (kpt and eos)'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue or red'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue and heavy or red'</span>)[0]
</pre>
</div>

<pre class="example">
(NOT kpt)
(NOT (AND kpt eos))
(OR (AND wood blue) red)
(OR (AND wood blue heavy) red)
</pre>

<p>
That works pretty well, and does not seem overly complicated to me. There is a lot of class definition, but that would presumably get buried in a module as a one time investment, and some function interface would look like this: <code>search('wood and blue or red')</code>.
</p>

<p>
Now, let us try python notation. 
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Parsing a search string to generate python set notations</h2>
<div class="outline-text-2" id="text-2">
<p>
I will use a similar idea as I used before with TAGS. We will use set operations with the binary logical operators to do the actual searching. Finally, we wrap the code in a little function to search a dictionary we previously made.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> pyparsing <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">UnaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op, <span style="color: #8b0000;">self</span>.operands = tokens[0]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">BinaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op = tokens[0][1]
        <span style="color: #8b0000;">self</span>.operands = tokens[0][0::2]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchAnd</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'('</span> + <span style="color: #228b22;">' &amp; '</span>.join([<span style="color: #228b22;">'{}'</span>.<span style="color: #cd0000;">format</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands]) + <span style="color: #228b22;">')'</span>
        
<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchOr</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'('</span> + <span style="color: #228b22;">' | '</span>.join([<span style="color: #228b22;">'{}'</span>.<span style="color: #cd0000;">format</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands]) +<span style="color: #228b22;">')'</span>

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchXor</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'('</span> + <span style="color: #228b22;">' ^ '</span>.join([<span style="color: #228b22;">'{}'</span>.<span style="color: #cd0000;">format</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands]) + <span style="color: #228b22;">')'</span>

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchNot</span>(UnaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'TAGS[\'all\'] - {}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.operands)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchTerm</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.term = tokens[0]

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #228b22;">'instead of just the  term, we represent it as TAGS[term]'</span>
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'TAGS[\'{0}\']'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.term)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the grammar</span>
<span style="color: #8b008b;">and_</span> = CaselessLiteral(<span style="color: #228b22;">"and"</span>)
<span style="color: #8b008b;">or_</span> = CaselessLiteral(<span style="color: #228b22;">"or"</span>)
<span style="color: #8b008b;">xor_</span> = CaselessLiteral(<span style="color: #228b22;">"xor"</span>)
<span style="color: #8b008b;">not_</span> = CaselessLiteral(<span style="color: #228b22;">"not"</span>)

<span style="color: #8b008b;">searchTerm</span> = Word(alphanums) | quotedString.setParseAction(removeQuotes)
searchTerm.setParseAction(SearchTerm)

<span style="color: #8b008b;">searchExpr</span> = operatorPrecedence( searchTerm,
                                 [(not_, 1, opAssoc.RIGHT, SearchNot),
                                  (and_, 2, opAssoc.LEFT, SearchAnd),
                                  (xor_, 2, opAssoc.LEFT, SearchXor),
                                  (or_, 2, opAssoc.LEFT, SearchOr)])

<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not kpt'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not (kpt and eos)'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'kpt or not eos)'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue or red'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue xor red'</span>)[0]

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">check it out on tags.</span>
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">search_tags</span>(srch):
    <span style="color: #228b22;">'function to  search the TAGS  file'</span>
    <span style="color: #8b0000;">import</span> pickle

    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
        <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())
    
    <span style="color: #8b008b;">s</span> = searchExpr.parseString(srch)[0]
    <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">eval</span>(<span style="color: #cd0000;">str</span>(s))
<span style="color: #8b0000;">print</span> search_tags(<span style="color: #228b22;">'pw and A and not 300'</span>)
</pre>
</div>

<pre class="example">
TAGS['all'] - TAGS['kpt']
TAGS['all'] - (TAGS['kpt'] &amp; TAGS['eos'])
(TAGS['kpt'] | TAGS['all'] - TAGS['eos'])
((TAGS['wood'] &amp; TAGS['blue']) | TAGS['red'])
((TAGS['wood'] &amp; TAGS['blue']) ^ TAGS['red'])
set(['tags\\A\\pw\\350', 'tags\\A\\pw', 'tags\\A\\pw\\200', 'tags\\A\\pw\\400', 'tags\\A\\pw\\250'])
</pre>

<p>
That is pretty nice. It looks like a nice syntax for queries. One day I will try incorporating this into a database application.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/31/Using-pyparsing-for-search-queries-with-tags.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Searching for directories by tags]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/29/Searching-for-directories-by-tags" />
    <id>http://jkitchin.github.io/blog/2014/03/29/Searching-for-directories-by-tags</id>
    <updated>2014-03-30T12:02:43Z</updated>
    <published>2014-03-29T17:41:08Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Searching for directories by tags]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/29/Searching-for-directories-by-tags"><![CDATA[



<p>
Today I explore searching for directories by using tags. We will create a TAGS table by first walking through the directories and tagging each directory with all of the relative path components. Then, we will use set algebra to identify specific directories.
</p>

<p>
First, let us make a directory setup to use. We will nest some calculations that might be typical. These will be nested directories that might contain planewave (pw) and k-points (kpts) convergence and equation of state (eos) directories, with the sets of calculations inside those. The idea then is that the directory components will form at least some of the tags.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> os

os.mkdir(<span style="color: #228b22;">'tags'</span>)

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> c <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'pw'</span>, <span style="color: #228b22;">'kpts'</span>, <span style="color: #228b22;">'eos'</span>]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, c))

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> run <span style="color: #8b0000;">in</span> [1, 2, 3, 4, 5]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, <span style="color: #228b22;">'eos'</span>, <span style="color: #cd0000;">str</span>(run)))

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> run <span style="color: #8b0000;">in</span> [200, 250, 300, 350, 400]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, <span style="color: #228b22;">'pw'</span>, <span style="color: #cd0000;">str</span>(run)))

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> run <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'2x2x2'</span>, <span style="color: #228b22;">'4x4x4'</span>, <span style="color: #228b22;">'8x8x8'</span>]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, <span style="color: #228b22;">'kpts'</span>, <span style="color: #cd0000;">str</span>(run)))
</pre>
</div>

<p>
Let us just double check what this directory tree looks like for one compound A.
</p>
<div class="org-src-container">

<pre class="src src-sh">ls tags/A/*
</pre>
</div>

<pre class="example">
tags/A/eos:
1
2
3
4
5

tags/A/kpts:
2x2x2
4x4x4
8x8x8

tags/A/pw:
200
250
300
350
400
</pre>

<p>
Now, we will walk through the directories, and split the path components to create a TAGS structure. I will store these as sets within a dictionary. We will save the structure in a pickle file to reuse it later.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> os
<span style="color: #8b0000;">import</span> pickle

<span style="color: #8b008b;">TAGS</span> = {}
<span style="color: #8b008b;">TAGS</span>[<span style="color: #228b22;">'all'</span>] = <span style="color: #cd0000;">set</span>()

<span style="color: #8b0000;">for</span> root, dirs, files <span style="color: #8b0000;">in</span> os.walk(<span style="color: #228b22;">'tags'</span>):
    <span style="color: #8b008b;">base</span>, <span style="color: #8b008b;">tail</span> = os.path.split(root)
    TAGS[<span style="color: #228b22;">'all'</span>].add(root)
    <span style="color: #8b0000;">while</span> base:
        <span style="color: #8b0000;">if</span> tail <span style="color: #8b0000;">in</span> TAGS:
            TAGS[tail].add(root)
        <span style="color: #8b0000;">else</span>:
            <span style="color: #8b008b;">TAGS</span>[tail] = <span style="color: #cd0000;">set</span>([root])
        <span style="color: #8b008b;">base</span>, <span style="color: #8b008b;">tail</span> = os.path.split(base)

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
    f.write(pickle.dumps(TAGS))

<span style="color: #8b0000;">print</span> TAGS.keys()
</pre>
</div>

<pre class="example">
['A', '1', 'all', 'B', '250', 'pw', '2x2x2', '300', 'C', '400', 'kpts', '8x8x8', 'eos', '3', '2', '5', '4', '350', '200', '4x4x4', 'D']
</pre>

<p>
Now we have a lot of keys that tag each directory. Each tag is a set of directories, and we can do set algebra to get specific results. For example, we can find a result by appropriate differences, intersections and unions of the sets. An advantage of this approach is that order of the tags is not relevant (unlike the path, where each component must be in the right order).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>].intersection(TAGS[<span style="color: #228b22;">'pw'</span>]).intersection(TAGS[<span style="color: #228b22;">'300'</span>])
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'300'</span>].intersection(TAGS[<span style="color: #228b22;">'pw'</span>]).intersection(TAGS[<span style="color: #228b22;">'A'</span>])
</pre>
</div>

<pre class="example">
set(['tags\\A\\pw\\300'])
set(['tags\\A\\pw\\300'])
</pre>

<p>
The syntax here is a tad heavy because of the chained dot notation operations. You can also use the logical operators like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">300 and pw and A</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'300'</span>] &amp; TAGS[<span style="color: #228b22;">'pw'</span>] &amp; TAGS[<span style="color: #228b22;">'A'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\A\\pw\\300'])
</pre>


<p>
We can get a set of calculations, for example an equation of state like this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">300 and pw and A</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>] &amp; TAGS[<span style="color: #228b22;">'eos'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\A\\eos', 'tags\\A\\eos\\5', 'tags\\A\\eos\\4', 'tags\\A\\eos\\1', 'tags\\A\\eos\\3', 'tags\\A\\eos\\2'])
</pre>

<p>
Now, let us construct some more complex queries. With sets we use intersections for <code>and</code> and we construct unions of queries that are like an or. We examine different notations to see which one is better.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">find calculation 3 in eos for B and C</span>
<span style="color: #8b0000;">print</span> (TAGS[<span style="color: #228b22;">'3'</span>]
       .intersection(TAGS[<span style="color: #228b22;">'eos'</span>])
       .intersection(TAGS[<span style="color: #228b22;">'B'</span>])
       .union
       (TAGS[<span style="color: #228b22;">'3'</span>]
        .intersection(TAGS[<span style="color: #228b22;">'eos'</span>])
        .intersection(TAGS[<span style="color: #228b22;">'C'</span>])))

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">this notation makes more sense to me. ^ = or</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'3'</span>] &amp; TAGS[<span style="color: #228b22;">'eos'</span>] &amp; (TAGS[<span style="color: #228b22;">'B'</span>] ^ TAGS[<span style="color: #228b22;">'C'</span>])
</pre>
</div>

<pre class="example">
set(['tags\\C\\eos\\3', 'tags\\B\\eos\\3'])
set(['tags\\C\\eos\\3', 'tags\\B\\eos\\3'])
</pre>

<p>
You can see the two approaches give the same results. The logical operator syntax is more concise and (I think) more readable. Let us consider a query with "not". We can use a difference operator for that. We subtract all the paths with tag "B" from the set containing "4x4x4", which will give us paths tagged with "4x4x4" but not "B".
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">find calculation 4x4x4 but not B</span>
<span style="color: #8b0000;">print</span> (TAGS[<span style="color: #228b22;">'4x4x4'</span>].difference(TAGS[<span style="color: #228b22;">'B'</span>]))

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">this makes more sense 4x4x4 but not B, </span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">i.e. subtract paths tagged B from those tagged 4x4x4</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'4x4x4'</span>] -  TAGS[<span style="color: #228b22;">'B'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\D\\kpts\\4x4x4', 'tags\\A\\kpts\\4x4x4', 'tags\\C\\kpts\\4x4x4'])
set(['tags\\D\\kpts\\4x4x4', 'tags\\A\\kpts\\4x4x4', 'tags\\C\\kpts\\4x4x4'])
</pre>


<p>
Note it is not so obvious how to get results not tagged with "A". We need to subtract the tagged calculations from some set. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'all'</span>] - TAGS[<span style="color: #228b22;">'A'</span>]  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">not A</span>
</pre>
</div>

<pre class="example">
set(['tags\\D\\kpts', 'tags\\D\\pw\\200', 'tags\\D\\pw\\350', 'tags\\D\\pw\\250', 'tags\\D\\kpts\\8x8x8', 'tags\\C\\eos', 'tags\\D\\eos\\2', 'tags\\D\\eos\\3', 'tags\\D\\eos\\4', 'tags\\D\\eos\\5', 'tags\\B\\kpts\\2x2x2', 'tags\\C\\kpts\\4x4x4', 'tags\\C\\eos\\3', 'tags\\C\\eos\\2', 'tags\\C\\eos\\1', 'tags\\C\\kpts\\8x8x8', 'tags\\C\\eos\\5', 'tags\\C\\eos\\4', 'tags\\B\\kpts', 'tags\\C\\pw\\200', 'tags\\B\\eos\\2', 'tags\\B\\pw\\350', 'tags\\B\\eos\\1', 'tags\\B\\kpts\\8x8x8', 'tags\\C\\pw\\300', 'tags\\B\\eos\\4', 'tags\\B\\eos\\5', 'tags\\C\\kpts', 'tags\\D\\pw\\300', 'tags\\B\\kpts\\4x4x4', 'tags\\C\\kpts\\2x2x2', 'tags\\D\\kpts\\4x4x4', 'tags\\B\\pw\\250', 'tags', 'tags\\D\\pw\\400', 'tags\\D\\eos', 'tags\\C\\pw\\400', 'tags\\D\\kpts\\2x2x2', 'tags\\D\\pw', 'tags\\C\\pw\\250', 'tags\\C\\pw\\350', 'tags\\C\\pw', 'tags\\D\\eos\\1', 'tags\\B\\pw\\400', 'tags\\B\\pw', 'tags\\B\\eos', 'tags\\B\\pw\\300', 'tags\\B\\eos\\3', 'tags\\C', 'tags\\B', 'tags\\D', 'tags\\B\\pw\\200'])
</pre>

<p>
We can also look at "or". This is done with the <code>union</code> function, which is the set of elements in either set. The logical operator is <code>|</code>.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'1'</span>].union(TAGS[<span style="color: #228b22;">'2'</span>])
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'1'</span>] | TAGS[<span style="color: #228b22;">'2'</span>]        <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">1 or 2</span>
</pre>
</div>

<pre class="example">
set(['tags\\B\\eos\\2', 'tags\\B\\eos\\1', 'tags\\A\\eos\\1', 'tags\\A\\eos\\2', 'tags\\D\\eos\\1', 'tags\\D\\eos\\2', 'tags\\C\\eos\\2', 'tags\\C\\eos\\1'])
set(['tags\\B\\eos\\2', 'tags\\B\\eos\\1', 'tags\\A\\eos\\1', 'tags\\A\\eos\\2', 'tags\\D\\eos\\1', 'tags\\D\\eos\\2', 'tags\\C\\eos\\2', 'tags\\C\\eos\\1'])
</pre>

<p>
There is an <code>xor</code> operator too. xor is not the same as or, it means <code>A xor B</code> means "A or B but not both". The <code>symmetric_difference</code> function gives this behavior. The logical operator is <code>^</code>. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">I think this is like the xor, A or 2 but not both</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>].symmetric_difference(TAGS[<span style="color: #228b22;">'2'</span>]), <span style="color: #228b22;">'\n'</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>] ^ TAGS[<span style="color: #228b22;">'2'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\A\\pw\\300', 'tags\\A\\pw\\250', 'tags\\A\\eos', 'tags\\B\\eos\\2', 'tags\\A\\eos\\4', 'tags\\A\\kpts\\2x2x2', 'tags\\A\\pw\\400', 'tags\\A\\kpts\\4x4x4', 'tags\\A\\eos\\3', 'tags\\A\\kpts\\8x8x8', 'tags\\A\\pw\\350', 'tags\\A\\eos\\5', 'tags\\D\\eos\\2', 'tags\\A\\kpts', 'tags\\A', 'tags\\C\\eos\\2', 'tags\\A\\eos\\1', 'tags\\A\\pw', 'tags\\A\\pw\\200']) 

set(['tags\\A\\pw\\300', 'tags\\A\\pw\\250', 'tags\\A\\eos', 'tags\\B\\eos\\2', 'tags\\A\\eos\\4', 'tags\\A\\kpts\\2x2x2', 'tags\\A\\pw\\400', 'tags\\A\\kpts\\4x4x4', 'tags\\A\\eos\\3', 'tags\\A\\kpts\\8x8x8', 'tags\\A\\pw\\350', 'tags\\A\\eos\\5', 'tags\\D\\eos\\2', 'tags\\A\\kpts', 'tags\\A', 'tags\\C\\eos\\2', 'tags\\A\\eos\\1', 'tags\\A\\pw', 'tags\\A\\pw\\200'])
</pre>



<p>
To summarize, this is one approach to using tags with the technical infrastructure of the set. The advantage is flexibility, that you do not need to know the full path to a result, provided you know the set of tags that refers to it. You can use the tags in any order.
</p>

<p>
There are many alternative approaches to implementing this idea. One could create a sqlite table and do SQL queries. You could also store lists in the dictionary, and use python code to find the matches. The syntax here is varied. Using the functional approach, the syntax gets heavy with all the dot notation. With the logical operators, the syntax is a little lighter. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/29/Searching-for-directories-by-tags.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Literate programming in python with org-mode and noweb]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb" />
    <id>http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb</id>
    <updated>2014-03-27T11:07:15Z</updated>
    <published>2014-03-27T10:46:55Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Literate programming in python with org-mode and noweb]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. imports</a></li>
<li><a href="#sec-2">2. utility function</a></li>
<li><a href="#sec-3">3. class definition</a>
<ul>
<li><a href="#sec-3-1">3.1. some class function</a></li>
</ul>
</li>
<li><a href="#sec-4">4. The main function</a></li>
<li><a href="#sec-5">5. Tangle and run the code</a></li>
<li><a href="#sec-6">6. Summary thoughts</a></li>
</ul>
</div>
</div>
<p>
This post examines a different approach to literate programming with org-mode that uses <a href="http://www.cs.tufts.edu/~nr/noweb/">noweb</a> . I have adapted an example from <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html</a> which has some pretty cool ideas in it. 
</p>

<p>
The gist of using noweb is that in your source blocks you have labels like <code>&lt;&lt;imports&gt;&gt;</code>, that refer to other named code blocks that get substituted in place of the label. In the example below, we put labels for a code block of imports, for a function definition, a class definition, and a main function. This code block will get tangled to <a href="/media/2014-03-27-Literate-programming-in-python-with-org-mode-and-noweb/main.py">main.py</a> . The noweb expansion happens at export, so here is the literal code block:
</p>
<pre class="example">
#+BEGIN_SRC python :noweb yes :tangle main.py
&lt;&lt;imports&gt;&gt;

&lt;&lt;some-func&gt;&gt;

&lt;&lt;class-dfn&gt;&gt;

&lt;&lt;main-func&gt;&gt;

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+END_SRC
</pre>

<p>
You may want to just check out the org-mode source link at the bottom of the post to see all the details.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">from</span> argparse <span style="color: #8b0000;">import</span> ArgumentParser

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">utility_func</span>(arg=<span style="color: #cd0000;">None</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'you called a utility function with this arg: {0}'</span>.<span style="color: #cd0000;">format</span>(arg)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">HelloWorld</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, who):
        <span style="color: #8b0000;">self</span>.who = who

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__call__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'Hello {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.who)

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">main</span>():
    <span style="color: #8b008b;">parser</span> = ArgumentParser(description=<span style="color: #228b22;">"Say hi"</span>)
    parser.add_argument(<span style="color: #228b22;">"-w"</span>, <span style="color: #228b22;">"--who"</span>, 
                        <span style="color: #cd0000;">type</span>=<span style="color: #cd0000;">str</span>,
                        default=<span style="color: #228b22;">"world"</span>,
                        <span style="color: #cd0000;">help</span>=<span style="color: #228b22;">"Who to say hello to"</span>)
    <span style="color: #8b008b;">args</span> = parser.parse_args()
  
    <span style="color: #8b008b;">who</span> = args.who
  
    <span style="color: #8b008b;">greeter</span> = HelloWorld(who)
    greeter()

    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'test func = '</span>, greeter.test()
  
    <span style="color: #8b0000;">print</span> utility_func()
    <span style="color: #8b0000;">print</span> utility_func(5)

    <span style="color: #8b0000;">return</span> 0

<span style="color: #8b0000;">if</span> <span style="color: #cd0000;">__name__</span> == <span style="color: #228b22;">'__main__'</span>:
    status = main()
    sys.<span style="color: #cd0000;">exit</span>(status)
</pre>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> imports</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, we define a block that gives us the imports. We do not have to use any tangle headers here because noweb will put it in where it belongs.
</p>

<div class="org-src-container">

<pre class="src src-python" id="imports"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">from</span> argparse <span style="color: #8b0000;">import</span> ArgumentParser
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> utility function</h2>
<div class="outline-text-2" id="text-2">
<p>
Now we define a function we will want imported from the main file. 
</p>

<div class="org-src-container">

<pre class="src src-python" id="some-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">utility_func</span>(arg=<span style="color: #cd0000;">None</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'you called a utility function with this arg: {0}'</span>.<span style="color: #cd0000;">format</span>(arg)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> class definition</h2>
<div class="outline-text-2" id="text-3">
<p>
Finally, let us define a class. Note we use noweb here too, and we get the indentation correct!
</p>

<div class="org-src-container">

<pre class="src src-python" id="class-dfn"><span style="color: #8b0000;">class</span> <span style="color: #4682b4;">HelloWorld</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, who):
        <span style="color: #8b0000;">self</span>.who = who

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__call__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'Hello {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.who)

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>
</pre>
</div>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> some class function</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Now, let us make the some-other-func. This block is not indented, but with the noweb syntax above, it seems to get correctly indented. Amazing.
</p>

<div class="org-src-container">

<pre class="src src-python" id="some-other-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> The main function</h2>
<div class="outline-text-2" id="text-4">
<p>
This is a typical function that could be used to make your module into a script, and is only run when the module is used as a script.. 
</p>

<div class="org-src-container">

<pre class="src src-python" id="main-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">main</span>():
    <span style="color: #8b008b;">parser</span> = ArgumentParser(description=<span style="color: #228b22;">"Say hi"</span>)
    parser.add_argument(<span style="color: #228b22;">"-w"</span>, <span style="color: #228b22;">"--who"</span>, 
                        <span style="color: #cd0000;">type</span>=<span style="color: #cd0000;">str</span>,
                        default=<span style="color: #228b22;">"world"</span>,
                        <span style="color: #cd0000;">help</span>=<span style="color: #228b22;">"Who to say hello to"</span>)
    <span style="color: #8b008b;">args</span> = parser.parse_args()
  
    <span style="color: #8b008b;">who</span> = args.who
  
    <span style="color: #8b008b;">greeter</span> = HelloWorld(who)
    greeter()

    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'test func = '</span>, greeter.test()
  
    <span style="color: #8b0000;">print</span> utility_func()
    <span style="color: #8b0000;">print</span> utility_func(5)

    <span style="color: #8b0000;">return</span> 0
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Tangle and run the code</h2>
<div class="outline-text-2" id="text-5">
<p>
This link will extract the code to main.py: <pre>elisp:org-babel-tangle</pre> 
</p>

<p>
We can run the code like this (linux):
</p>
<div class="org-src-container">

<pre class="src src-sh" id="bashrun-helloworld">python main.py --w John 2&gt;&amp;1
true
</pre>
</div>
<pre class="example">
test func =  True
you called a utility function with this arg: None
you called a utility function with this arg: 5
</pre>

<p>
or this (windows, which as no sh)
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> main <span style="color: #8b0000;">import</span> *

main()
</pre>
</div>

<pre class="example">
test func =  True
you called a utility function with this arg: None
you called a utility function with this arg: 5
</pre>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-6">
<p>
The use of noweb syntax is pretty cool. I have not done anything serious with it, but it looks like you could pretty easily create a sophisticated python module this way that is documented in org-mode. </p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Deleting multiple elements of a list]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/25/Deleting-multiple-elements-of-a-list" />
    <id>http://jkitchin.github.io/blog/2014/03/25/Deleting-multiple-elements-of-a-list</id>
    <updated>2014-03-25T18:40:34Z</updated>
    <published>2014-03-25T18:40:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Deleting multiple elements of a list]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/25/Deleting-multiple-elements-of-a-list"><![CDATA[



<p>
Today someone asked about deleting multiple elements from a list (actually it was about deleting multiple atoms from an ase.Atoms object, but some principles here apply. I will address that actual question later.).
</p>

<p>
Deleting multiple items from a list is not directly possible in one command in Python. There are a few approaches to accomplishing something like it. Which one is best depends on your objective. 
</p>

<p>
One problem is when you delete an item, the indices of every item after it also changes. One strategy then is to delete the elements in descending order, i.e. delete the largest indices first. That way, you do not change the indices of the smaller indices, so you can still delete them. We can sort them in reverse order like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">a</span> = [1, 2, 5, 6, 7]

<span style="color: #8b008b;">ind2remove</span> = [1, 3]

<span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">sorted</span>(ind2remove, reverse=<span style="color: #cd0000;">True</span>): 
    <span style="color: #8b0000;">del</span> a[i]

<span style="color: #8b0000;">print</span> a
</pre>
</div>

<pre class="example">
[1, 5, 7]
</pre>

<p>
An alternative approach is to make a new list that only has the elements you want using list comprehension. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">a</span> = [1, 2, 5, 6, 7]

<span style="color: #8b008b;">ind2remove</span> = [1, 3]

<span style="color: #8b008b;">a</span> = [x <span style="color: #8b0000;">for</span> i,x <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">enumerate</span>(a) <span style="color: #8b0000;">if</span> i <span style="color: #8b0000;">not</span> <span style="color: #8b0000;">in</span> ind2remove]

<span style="color: #8b0000;">print</span> a
</pre>
</div>

<pre class="example">
[1, 5, 7]
</pre>

<p>
With numpy arrays you can delete multiple elements like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b008b;">a</span> = np.array([1, 2, 5, 6, 7])

<span style="color: #8b008b;">ind2remove</span> = [1, 3]

<span style="color: #8b0000;">print</span> np.delete(a, ind2remove)
<span style="color: #8b0000;">print</span> a
</pre>
</div>

<pre class="example">
[1 5 7]
[1 2 5 6 7]
</pre>

<p>
The delete command makes a new object; the original list is unchanged. Numpy arrays are technically immutable, so the only way to do this is to make a copy. Another way is to use a boolean mask that only selects the indices where the mask is True, and not where they are False.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b008b;">a</span> = np.array([1, 2, 5, 6, 7])

<span style="color: #8b008b;">ind2remove</span> = [1, 3]

<span style="color: #8b008b;">mask</span> = np.ones(<span style="color: #cd0000;">len</span>(a), dtype=<span style="color: #cd0000;">bool</span>) 
<span style="color: #8b008b;">mask</span>[ind2remove] = <span style="color: #cd0000;">False</span>
<span style="color: #8b0000;">print</span> a[mask]
<span style="color: #8b0000;">print</span> a
</pre>
</div>

<pre class="example">
[1 5 7]
[1 2 5 6 7]
</pre>

<p>
There might be other ways to do this too. These examples are nearly indistinguishable for small lists. For very large lists (I guess 1000's of elements), you may find one method more efficient than the others. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/25/Deleting-multiple-elements-of-a-list.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
</feed>
