<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-02-09T01:51:21Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Interactive figures in blog posts with mpld3]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/02/08/Interactive-figures-in-blog-posts-with-mpld3" />
    <id>http://jkitchin.github.io/blog/2016/02/08/Interactive-figures-in-blog-posts-with-mpld3</id>
    <updated>2016-02-08T07:33:23Z</updated>
    <published>2016-02-08T07:33:23Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="plotting" />
    <category scheme="http://jkitchin.github.io/blog" term="interactive" />
    <summary type="html"><![CDATA[Interactive figures in blog posts with mpld3]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/02/08/Interactive-figures-in-blog-posts-with-mpld3"><![CDATA[



<p>
Continuing the exploration of interactive figures, today we consider the Python plotting library <a href="http://mpld3.github.io/index.html">mpld3</a> . We will again use our own published data. We wrote this great paper on core level shifts (CLS) in Cu-Pd alloys <a class='org-ref-reference' href="#boes-2015-core-cu">boes-2015-core-cu</a>. I want an interactive figure that shows the name of the calculation on each point as a tooltip. This data is all stored in the supporting information file, and you can see how we use it <a href="#sec-1">here</a>. This figure shows how the core level shift of a Cu atom changes depending on the number of nearest neighbor Cu atoms. Just hover your mouse over a point to see the name and CLS for that point.
</p>



<style>

</style>

<div id="fig_el8116045214667689201799167"></div>
<script>
function mpld3_load_lib(url, callback){
  var s = document.createElement('script');
  s.src = url;
  s.async = true;
  s.onreadystatechange = s.onload = callback;
  s.onerror = function(){console.warn("failed to load library " + url);};
  document.getElementsByTagName("head")[0].appendChild(s);
}

if(typeof(mpld3) !== "undefined" && mpld3._mpld3IsLoaded){
   // already loaded: just create the figure
   !function(mpld3){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

       mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
   }(mpld3);
}else if(typeof define === "function" && define.amd){
   // require.js is available: use it to load d3/mpld3
   require.config({paths: {d3: "https://mpld3.github.io/js/d3.v3.min"}});
   require(["d3"], function(d3){
      window.d3 = d3;
      mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

         mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
      });
    });
}else{
    // require.js not available: dynamically load d3 & mpld3
    mpld3_load_lib("https://mpld3.github.io/js/d3.v3.min.js", function(){
         mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

                 mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
            })
         });
}
</script>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-17D73543-F528-459D-95EF-B3AB3C4EEDC7" name="ID-17D73543-F528-459D-95EF-B3AB3C4EEDC7"></a><span class="section-number-2">1</span> Data and code</h2>
<div class="outline-text-2" id="text-1">
<p>
You can check out our preprint at <a href="https://github.com/KitchinHUB/kitchingroup-51">https://github.com/KitchinHUB/kitchingroup-51</a> .  We are going to adapt the code to make Figure 6a in the manuscript interactive. The code needed a somewhat surprising amount of adaptation. Apparently the ase database interface has changed a lot since we write that paper, so the code here looks a bit different than what we published. The biggest difference is due to name-mangling so each key that started with a number now starts with _, and and periods are replaced by _ also. The rest of the script is nearly unchanged. At the end is the very small bit of mpld3 code that generates the figure for html. We will add tooltips onto datapoints to indicate what the name associated with each data point is. Here is the code.
</p>

<div class="org-src-container">

<pre class="src src-python" id="mpld3-figure"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> ase.db <span style="color: #0000FF;">import</span> connect

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">loads the ASE database and select certain keywords</span>
<span style="color: #BA36A5;">db</span> = connect(<span style="color: #008000;">'~/Desktop/cappa/kitchingroup-51/supporting-information/data.json'</span>)

<span style="color: #BA36A5;">keys</span> = [<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>, <span style="color: #008000;">'ensam'</span>]

<span style="color: #BA36A5;">CLS</span>, <span style="color: #BA36A5;">IMP</span>, <span style="color: #BA36A5;">labels</span> = [], [], []
<span style="color: #0000FF;">for</span> k <span style="color: #0000FF;">in</span> db.select(keys + [<span style="color: #008000;">'_1cl'</span>]):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">name</span> = k.keywords[-2]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">Cu0</span> = db.select(<span style="color: #008000;">'bcc,GS,_72atom,_0cl,_1_00Cu'</span>).<span style="color: #006FE0;">next</span>().energy
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">Cu1</span> = db.select(<span style="color: #008000;">'bcc,GS,_72atom,_1cl,_1_00Cu'</span>).<span style="color: #006FE0;">next</span>().energy
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x0</span> = db.select(<span style="color: #008000;">','</span>.join(keys + [name, <span style="color: #008000;">'_0cl'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x1</span> = k.energy

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cls0</span> = x0 - Cu0
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cls1</span> = x1 - Cu1

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   IMP.append(<span style="color: #006FE0;">int</span>(name[1]))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   CLS.append(cls1 - cls0)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">labels</span> += [<span style="color: #008000;">'{0} ({1}, {2})'</span>.<span style="color: #006FE0;">format</span>(name, <span style="color: #006FE0;">int</span>(name[1]), cls1 - cls0)]

<span style="color: #BA36A5;">Cu0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">Cu1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">x0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_1'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">x1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_1'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">cls0</span> = x0 - Cu0
<span style="color: #BA36A5;">cls1</span> = x1 - Cu1

IMP.append(1)
CLS.append(cls1 - cls0)
<span style="color: #BA36A5;">labels</span> += [<span style="color: #008000;">'(1, {0})'</span>.<span style="color: #006FE0;">format</span>(cls1 - cls0)]

<span style="color: #BA36A5;">Cu0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">Cu1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">x0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_0'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">x1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_0'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">cls0</span> = x0 - Cu0
<span style="color: #BA36A5;">cls1</span> = x1 - Cu1

IMP.append(0)
CLS.append(cls1 - cls0)
<span style="color: #BA36A5;">labels</span> += [<span style="color: #008000;">'(0, {0})'</span>.<span style="color: #006FE0;">format</span>(cls1 - cls0)]

<span style="color: #BA36A5;">fig</span> = plt.figure()

<span style="color: #BA36A5;">p</span> = plt.scatter(IMP, CLS, c=<span style="color: #008000;">'g'</span>, marker=<span style="color: #008000;">'o'</span>, s=25)
<span style="color: #BA36A5;">ax1</span> = plt.gca()
ax1.set_ylim(-1.15, -0.6)
ax1.set_xlim(-0.1, 5.1)

ax1.set_xlabel(<span style="color: #008000;">'# Cu Nearest neighbors'</span>)
ax1.set_ylabel(<span style="color: #008000;">'Cu 2p(3/2) Core Level Shift (eV)'</span>)

ax1.set_title(<span style="color: #008000;">'Hover over a point to see the calculation name'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now the mpld3 stuff.</span>
<span style="color: #0000FF;">import</span> mpld3
<span style="color: #0000FF;">from</span> mpld3 <span style="color: #0000FF;">import</span> plugins

<span style="color: #BA36A5;">tooltip</span> = plugins.PointHTMLTooltip(p, labels, voffset=0, hoffset=10)
plugins.connect(fig, tooltip)

<span style="color: #0000FF;">print</span> mpld3.fig_to_html(fig)
</pre>
</div>

<p>
I like this workflow pretty well. It seems less functional than plotly and Bokeh (e.g. it does not look like it you can export the data from the html here), but it is well integrated with Matplotlib, with my blogging style, and does not require a server, oran account. The code outputs html that is self-contained in the body of the html. The smooth integration with Matplotlib means I could have static images in org-mode, and dynamic images in HTML potentially. Overall, this is a nice tool for making interactive plots in blog posts.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> References</h2>
<div class="outline-text-2" id="text-2">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="boes-2015-core-cu">[boes-2015-core-cu] Jacob Boes, Peter Kondratyuk, Chunrong Yin, James, Miller, Andrew Gellman & John Kitchin, Core Level Shifts in Cu-Pd Alloys As a Function of Bulk  Composition and Structure, <i>Surface Science</i>, <b>640</b>, 127-132 (2015). <a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">link</a>. <a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">doi</a>.</a></li>
</ul></p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/08/Interactive-figures-in-blog-posts-with-mpld3.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Interactive Bokeh plots in HTML]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/02/07/Interactive-Bokeh-plots-in-HTML" />
    <id>http://jkitchin.github.io/blog/2016/02/07/Interactive-Bokeh-plots-in-HTML</id>
    <updated>2016-02-07T11:24:56Z</updated>
    <published>2016-02-07T10:53:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="plotting" />
    <category scheme="http://jkitchin.github.io/blog" term="interactive" />
    <summary type="html"><![CDATA[Interactive Bokeh plots in HTML]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/02/07/Interactive-Bokeh-plots-in-HTML"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. The data and code</a></li>
<li><a href="#sec-2">2. References</a></li>
</ul>
</div>
</div>

<p>
In our last <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/02/06/Interactive-plots-in-HTML-with-Plotly/">post</a> we examined the use of <a href="https://plot.ly/">plotly</a> to generate interactive plots in HTML. Today we expand the idea, and use <a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> . One potential issue with plotly is the need for an account and API-key, some limitations on how many times a graph can be viewed per day (although I should aspire to have my graphs viewed 1000+ times a day!), and who knows what happens to the graphs if plotly ever goes out of business. While the static images we usually use have limited utility, at least they stick around.
</p>

<p>
So, today we look at <a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> which allows you to embed some json data in your HTML, which is made interactive by your browser with more javascript magic. We get straight to the image here so you can see what this is all about. Briefly, this data shows trends (or lack of) in the adsorption energies of some atoms on the atop and fcc sites of several transition metals as a function of adsorbate coverage  <a class='org-ref-reference' href="#xu-2014-probin-cover">xu-2014-probin-cover</a>. The code to do this is found <a href="#sec-1">here</a>.
</p>

<p>
Using Bokeh does not integrate real smoothly with my blog workflow, which only generates the body of HTML posts. Bokeh needs some javascript injected into the header to work. To get around that, I show the plot in a frame here. You can see a full HTML version here: <a href="/media/2016-02-07-Interactive-Bokeh-plots-in-HTML/bokeh-plot.html">bokeh-plot.html</a> .
</p>

<iframe src="/media/2016-02-07-Interactive-Bokeh-plots-in-HTML/bokeh-plot.html#figure" width="800" height="700"></iframe>

<a name="figure"></a>

<div class="plotdiv" id="359fb6b4-4cda-408d-a6c6-4d38f4885edb"></div>



<p>
This is somewhat similar to the plotly concept. The data is embedded in the html in this case, which is different. For very large plots, I actually had some trouble exporting the blog post (it was taking a long time to export and I killed it)! I suspect that is a limitation of the org-mode exporter though, because I could save the html files from Python and view them fine. I also noted that having all the javascript in the org-file make font-lock work very slow. It would be better to generate that only on export.
</p>

<p>
Note to make this work, we need these lines in our HTML header:
</p>
<pre class="example">
#+HTML_HEAD: &lt;link rel="stylesheet" href="http://cdn.pydata.org/bokeh/release/bokeh-0.11.1.min.css" type="text/css" /&gt;
#+HTML_HEAD: &lt;script type="text/javascript" src="http://cdn.pydata.org/bokeh/release/bokeh-0.11.1.min.js"&gt;&lt;/script&gt;
</pre>

<p>
Since we do not host those locally, if they ever disappear, our plots will not show ;(
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-47C13034-DBD8-4154-8004-5CABEA2CF1D2" name="ID-47C13034-DBD8-4154-8004-5CABEA2CF1D2"></a><span class="section-number-2">1</span> The data and code</h2>
<div class="outline-text-2" id="text-1">
<p>
We will get the data from our paper on coverage dependent adsorption energies <a class='org-ref-reference' href="#xu-2014-probin-cover">xu-2014-probin-cover</a>. There are some data rich figures there that would benefit from some interactivity. You can get the data here: <a href="http://pubs.acs.org/doi/suppl/10.1021/jp508805h">http://pubs.acs.org/doi/suppl/10.1021/jp508805h</a> . Extract out the supporting-information.org and energies.json file to follow here. We will make Figure 2a in the SI document here, and make it interactive with hover tooltips.
</p>

<div class="org-src-container">

<pre class="src src-python" id="bokeh-plot"><span style="color: #0000FF;">import</span> json

<span style="color: #0000FF;">from</span> collections <span style="color: #0000FF;">import</span> OrderedDict
<span style="color: #0000FF;">from</span> bokeh <span style="color: #0000FF;">import</span> mpl
<span style="color: #0000FF;">from</span> bokeh.plotting <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">from</span> bokeh.models <span style="color: #0000FF;">import</span> HoverTool
<span style="color: #0000FF;">from</span> bokeh.embed <span style="color: #0000FF;">import</span> components

<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'/users/jkitchin/Desktop/energies.json'</span>, <span style="color: #008000;">'r'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = json.load(f)


<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">color for metal</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">letter symbol for adsorbate</span>
<span style="color: #BA36A5;">colors</span> = {<span style="color: #008000;">'Cu'</span>:<span style="color: #008000;">'Orange'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Ag'</span>:<span style="color: #008000;">'Silver'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Au'</span>:<span style="color: #008000;">'Yellow'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Pd'</span>:<span style="color: #008000;">'Green'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Pt'</span>:<span style="color: #008000;">'Red'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Rh'</span>:<span style="color: #008000;">'Blue'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Ir'</span>:<span style="color: #008000;">'Purple'</span>}

<span style="color: #BA36A5;">all_ads</span> = [<span style="color: #008000;">'O'</span>, <span style="color: #008000;">'S'</span>]

<span style="color: #BA36A5;">TOOLS</span>=<span style="color: #008000;">"crosshair,pan,wheel_zoom,box_zoom,reset,hover,previewsave"</span>
<span style="color: #BA36A5;">p</span> = figure(title=<span style="color: #008000;">"Correlation between atop and fcc sites"</span>, tools=TOOLS)

<span style="color: #0000FF;">for</span> metal <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'Rh'</span>, <span style="color: #008000;">'Pd'</span>, <span style="color: #008000;">'Cu'</span>, <span style="color: #008000;">'Ag'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> adsorbate <span style="color: #0000FF;">in</span> all_ads:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">E1</span>, <span style="color: #BA36A5;">E2</span> = [], []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> coverage <span style="color: #0000FF;">in</span> <span style="color: #008000;">'0.25'</span>, <span style="color: #008000;">'0.5'</span>, <span style="color: #008000;">'0.75'</span>, <span style="color: #008000;">'1.0'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">isinstance</span>(data[metal][adsorbate][<span style="color: #008000;">'ontop'</span>][coverage], <span style="color: #006FE0;">float</span>) <span style="color: #0000FF;">and</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">isinstance</span>(data[metal][adsorbate][<span style="color: #008000;">'fcc'</span>][coverage], <span style="color: #006FE0;">float</span>)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   E1.append(data[metal][adsorbate][<span style="color: #008000;">'ontop'</span>][coverage])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   E2.append(data[metal][adsorbate][<span style="color: #008000;">'fcc'</span>][coverage])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">labels</span> = [<span style="color: #008000;">'{0}-{1} {2} ML'</span>.<span style="color: #006FE0;">format</span>(metal, adsorbate, x)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'0.25'</span>, <span style="color: #008000;">'0.5'</span>, <span style="color: #008000;">'0.75'</span>, <span style="color: #008000;">'1.0'</span>]]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   p.line(<span style="color: #008000;">'x'</span>, <span style="color: #008000;">'y'</span>, color=colors[metal],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  source=ColumnDataSource(data={<span style="color: #008000;">'x'</span>: E1,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'y'</span>: E2,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'label'</span>: labels}))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   p.circle(<span style="color: #008000;">'x'</span>, <span style="color: #008000;">'y'</span>, color=colors[metal],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  source=ColumnDataSource(data={<span style="color: #008000;">'x'</span>: E1,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'y'</span>: E2,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'label'</span>: labels}))


<span style="color: #BA36A5;">hover</span> =p.select({<span style="color: #008000;">'type'</span>: HoverTool})
<span style="color: #BA36A5;">hover.tooltips</span> = OrderedDict([(<span style="color: #008000;">"(atop,fcc)"</span>, <span style="color: #008000;">"(@x, @y)"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> (<span style="color: #008000;">"label"</span>, <span style="color: #008000;">"@label"</span>)])

<span style="color: #BA36A5;">p.xaxis.axis_label</span> = <span style="color: #008000;">'Adsorption energy on the atop site'</span>
<span style="color: #BA36A5;">p.yaxis.axis_label</span> = <span style="color: #008000;">'Adsorption energy on the fcc site'</span>

<span style="color: #BA36A5;">script</span>, <span style="color: #BA36A5;">div</span> = components(p)
<span style="color: #BA36A5;">script</span> = <span style="color: #008000;">'\n'</span>.join([<span style="color: #008000;">'#+HTML_HEAD_EXTRA: '</span> + line <span style="color: #0000FF;">for</span> line <span style="color: #0000FF;">in</span> script.split(<span style="color: #008000;">'\n'</span>)])

<span style="color: #0000FF;">print</span> <span style="color: #008000;">'''{script}</span>

<span style="color: #008000;">#+BEGIN_HTML</span>
<span style="color: #008000;">&lt;a name="figure"&gt;&lt;/a&gt;</span>
<span style="color: #008000;">{div}</span>
<span style="color: #008000;">#+END_HTML</span>
<span style="color: #008000;">'''</span>.<span style="color: #006FE0;">format</span>(script=script, div=div)
</pre>
</div>
</div>
</div>



<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> References</h2>
<div class="outline-text-2" id="text-2">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="xu-2014-probin-cover">[xu-2014-probin-cover] Zhongnan Xu & John Kitchin, Probing the Coverage Dependence of Site and Adsorbate  Configurational Correlations on (111) Surfaces of Late  Transition Metals, <i>J. Phys. Chem. C</i>, <b>118(44)</b>, 25597-25602 (2014). <a href="http://dx.doi.org/10.1021/jp508805h">link</a>. <a href="http://dx.doi.org/10.1021/jp508805h">doi</a>.</a></li>
</ul>
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/07/Interactive-Bokeh-plots-in-HTML.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Interactive plots in HTML with Plotly]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/02/06/Interactive-plots-in-HTML-with-Plotly" />
    <id>http://jkitchin.github.io/blog/2016/02/06/Interactive-plots-in-HTML-with-Plotly</id>
    <updated>2016-02-06T12:44:53Z</updated>
    <published>2016-02-06T12:44:53Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="plotting" />
    <category scheme="http://jkitchin.github.io/blog" term="interactive" />
    <summary type="html"><![CDATA[Interactive plots in HTML with Plotly]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/02/06/Interactive-plots-in-HTML-with-Plotly"><![CDATA[



<p>
Most of the plots in this blog are static. Today, I look at making them interactive. I will use <a href="https://plot.ly">https://plot.ly</a> for this. I want to use some data from a paper we published on the relative stabilities of oxide polymorphs <a class='org-ref-reference' href="#mehta-2015-ident-poten">mehta-2015-ident-poten</a>. We will make an interactive figure showing the relative stabilities of the RuO<sub>2</sub> polymorphs. When you hover on a point, it will show you which polymorph the point refers to. Let's see the figure first here. If you think its interesting read on to see how we made it!
</p>

<iframe id="igraph" scrolling="no" style="border:none;"seamless="seamless" src="https://plot.ly/~jkitchin/4.embed" height="525" width="100%"></iframe>


<p>
We get our data source here: <a href="http://pubs.acs.org/doi/suppl/10.1021/am4059149/suppl_file/am4059149_si_001.pdf">http://pubs.acs.org/doi/suppl/10.1021/am4059149/suppl_file/am4059149_si_001.pdf</a> .
</p>

<p>
Now, we extract the data files:
</p>
<div class="org-src-container">

<pre class="src src-sh">pdftk ~/Desktop/am4059149_si_001.pdf  unpack_files
</pre>
</div>

<p>
That extracts a json file called supporting-information.json. We use it as suggested in the SI pdf to plot the equations of state for RuO<sub>2</sub> for several polymorphs.
</p>

<div class="org-src-container">

<pre class="src src-python" id="ruo2-html"><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">coding=utf-8</span>

<span style="color: #0000FF;">import</span> plotly.plotly <span style="color: #0000FF;">as</span> py
<span style="color: #0000FF;">import</span> plotly.graph_objs <span style="color: #0000FF;">as</span> go
<span style="color: #0000FF;">import</span> plotly.tools <span style="color: #0000FF;">as</span> tls
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> ase.utils.eos <span style="color: #0000FF;">import</span> EquationOfState
<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'supporting-information.json'</span>, <span style="color: #008000;">'rb'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">d</span> = json.loads(f.read())

<span style="color: #BA36A5;">BO2</span> = <span style="color: #008000;">'RuO2'</span>
<span style="color: #BA36A5;">xc</span> = <span style="color: #008000;">'PBE'</span>

<span style="color: #BA36A5;">layout</span> = go.Layout(title=<span style="color: #008000;">'Energy vs. Volume for RuO&lt;sub&gt;2&lt;/sub&gt; polymorphs'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  xaxis=<span style="color: #006FE0;">dict</span>(title=<span style="color: #008000;">'Volume (&#197;&lt;sup&gt;3&lt;/sup&gt;)'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  yaxis=<span style="color: #006FE0;">dict</span>(title=<span style="color: #008000;">'Energy (eV)'</span>))

<span style="color: #BA36A5;">traces</span> = []

<span style="color: #0000FF;">for</span> polymorph <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'rutile'</span>,<span style="color: #008000;">'anatase'</span>,<span style="color: #008000;">'brookite'</span>,<span style="color: #008000;">'columbite'</span>,<span style="color: #008000;">'pyrite'</span>,<span style="color: #008000;">'fluorite'</span>]:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">number of atoms in the unit cell - used to normalize</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">natoms</span>= <span style="color: #006FE0;">len</span>(d[BO2][polymorph][xc][<span style="color: #008000;">'EOS'</span>][<span style="color: #008000;">'calculations'</span>]
                [0][<span style="color: #008000;">'atoms'</span>][<span style="color: #008000;">'symbols'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volumes</span> = [entry[<span style="color: #008000;">'data'</span>][<span style="color: #008000;">'volume'</span>]*3./natoms <span style="color: #0000FF;">for</span> entry <span style="color: #0000FF;">in</span>
               d[BO2][polymorph][xc][<span style="color: #008000;">'EOS'</span>][<span style="color: #008000;">'calculations'</span>]]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">energies</span> =  [entry[<span style="color: #008000;">'data'</span>][<span style="color: #008000;">'total_energy'</span>]*3./natoms <span style="color: #0000FF;">for</span> entry <span style="color: #0000FF;">in</span>
                 d[BO2][polymorph][xc][<span style="color: #008000;">'EOS'</span>][<span style="color: #008000;">'calculations'</span>]]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">trace</span> = go.Scatter(x=np.array(volumes),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  y=np.array(energies),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  mode=<span style="color: #008000;">'lines+markers'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  name=polymorph,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  text=polymorph)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">traces</span> += [trace]

<span style="color: #BA36A5;">fig</span> = go.Figure(data=traces, layout=layout)
<span style="color: #BA36A5;">plot_url</span> = py.plot(fig, filename=<span style="color: #008000;">'ruo2-2'</span>)

<span style="color: #0000FF;">print</span> tls.get_embed(plot_url)
</pre>
</div>




<p>
Pretty nice, now we should have an interactive plot in our browser with the data points labeled with tags, zooming, etc&#x2026; That is nice for the blog. It isn't so nice for daily work, as there is no visual version of the plot in my org-file. Of course, I can visit the url to see the plot in my browser, it is just different from what I am used to. For everyone else, this is probably better. It looks like you can actually get the data from the web page, including some minimal analysis like regression, and save your view to an image! That could be pretty nice for some data sets.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Using Plotly yourself</h2>
<div class="outline-text-2" id="text-1">
<p>
First, go to <a href="https://plot.ly">https://plot.ly</a> and sign up for an account. You will want to register your API key like this, which will save it in a file for your convenience. Then you can do things like I did above too.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> plotly.tools <span style="color: #0000FF;">as</span> tls
tls.set_credentials_file(username=<span style="color: #008000;">'jkitchin'</span>, api_key=<span style="color: #008000;">'xxxxxxx'</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> References</h2>
<div class="outline-text-2" id="text-2">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="mehta-2015-ident-poten">[mehta-2015-ident-poten] Prateek Mehta, Paul Salvador & John Kitchin, Identifying Potential \ceBO2 Oxide Polymorphs for Epitaxial  Growth Candidates, <i>ACS Appl. Mater. Interfaces</i>, <b>6(5)</b>, 3630-3639 (2015). <a href="http://dx.doi.org/10.1021/am4059149">link</a>. <a href="http://dx.doi.org/10.1021/am4059149">doi</a>.</a></li>
</ul></p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/06/Interactive-plots-in-HTML-with-Plotly.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Asynchronously running python blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode</id>
    <updated>2015-11-20T19:30:57Z</updated>
    <published>2015-11-20T11:46:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Asynchronously running python blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode"><![CDATA[


<p>
If you run long Python blocks from org-mode, you might want to keep working while it runs. Currently Emacs gets blocked and you have to wait patiently.  In this post we consider some ways to avoid this that run our code asynchronously, but still put results where they belong in the org-buffer.
</p>

<p>
This is a long post. You may want to see the video: <a href="https://www.youtube.com/watch?v=VDyoN8yipSE">https://www.youtube.com/watch?v=VDyoN8yipSE</a> , or skip to the <a href="#sec-3">end</a> where the best and final version is shown.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The async module</h2>
<div class="outline-text-2" id="text-1">
<p>
Here we consider an approach that uses <a href="https://github.com/jwiegley/emacs-async">https://github.com/jwiegley/emacs-async</a> module. The idea is to tangle the Python block at point to a temp file, then asynchronously run it. We capture the output and put it back in the buffer. We use a uuid to find the place to put the results in org-mode format. Here is the code that implements this idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">async</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute</span> ()
  <span style="color: #036A07;">"Run a python block at point asynchrously."</span>
  (<span style="color: #0000FF;">interactive</span>)

  (<span style="color: #0000FF;">let</span> ((current-file (buffer-file-name))
        (uuid (org-id-uuid))
        (temporary-file-directory <span style="color: #008000;">"./"</span>)
        (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>)))

    (org-babel-tangle '(4) tempfile)
    (org-babel-remove-result)
    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    (<span style="color: #0000FF;">async-start</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">what to start</span>
     `(<span style="color: #0000FF;">lambda</span> ()
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">now we run the command then cleanup</span>
        (<span style="color: #0000FF;">prog1</span>
            (shell-command-to-string (format <span style="color: #008000;">"python %s"</span> ,tempfile))
          (delete-file ,tempfile)))

     `(<span style="color: #0000FF;">lambda</span> (result)
        <span style="color: #036A07;">"Code that runs when the async function finishes."</span>
        (<span style="color: #0000FF;">save-window-excursion</span>
          (<span style="color: #0000FF;">save-excursion</span>
            (<span style="color: #0000FF;">save-restriction</span>
              (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                (goto-char (point-min))
                (re-search-forward ,uuid)
                (beginning-of-line)
                (kill-line)
                (insert (mapconcat
                         (<span style="color: #0000FF;">lambda</span> (x)
                           (format <span style="color: #008000;">": %s"</span> x))
                         (butlast (s-split <span style="color: #008000;">"\n"</span> result))
                         <span style="color: #008000;">"\n"</span>))))))))))
</pre>
</div>

<pre class="example">
org-babel-async-execute
</pre>

<p>
Here is a block to test it on. We can run the block, and keep on working while the code runs. The results seem to get inserted correctly at the right point even if I am in another window or frame! We don't get easy access to continuous output of the command. This wouldn't work if we close Emacs, but who does that?
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(5)

<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()
</pre>
</div>

<pre class="example">
hello world
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 10:17:53 2015
</pre>

<p>
There are some limitations to this approach. One of them is it assumes the src block is a stand-alone block that will run on its own. That is usually how I run mine, but I could see having other modules that should be tangled out of a file too. I think the script is being run in the current working directory, so it probably will find any local imports it needs.
</p>

<p>
You don't get any intermediate feedback on this process. It seems to be possible to do that with a different approach that puts some output in a new buffer, e.g. with start-process. But, you still need some clever code like the async model to know when to insert the results back into this buffer. We consider Emacs processes and sentinels next.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Emacs process approach with tangling</h2>
<div class="outline-text-2" id="text-2">
<p>
We can start a process in Emacs, and attach a sentinel function to it that runs after the process completes. Here is an example of that. We still tangle the src-block here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((current-file (buffer-file-name))
        (uuid (org-id-uuid))
        (temporary-file-directory <span style="color: #008000;">"./"</span>)
        (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>))
        (pbuffer (format <span style="color: #008000;">"*%s*"</span> uuid))
        process)

    (org-babel-tangle '(4) tempfile)
    (org-babel-remove-result)

    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    (<span style="color: #0000FF;">setq</span> process (start-process
                   uuid
                   pbuffer
                   <span style="color: #008000;">"python"</span>
                   tempfile))

    (set-process-sentinel
     process
     `(<span style="color: #0000FF;">lambda</span> (process event)
        (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"finished\n"</span> event)
          (delete-file ,tempfile)
          (<span style="color: #0000FF;">save-window-excursion</span>
            (<span style="color: #0000FF;">save-excursion</span>
              (<span style="color: #0000FF;">save-restriction</span>
                (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                  (goto-char (point-min))
                  (re-search-forward ,uuid)
                  (beginning-of-line)
                  (kill-line)
                  (insert (mapconcat
                           (<span style="color: #0000FF;">lambda</span> (x)
                             (format <span style="color: #008000;">": %s"</span> x))
                           (split-string
                            (<span style="color: #0000FF;">with-current-buffer</span> ,pbuffer (buffer-string))
                            <span style="color: #008000;">"\n"</span>)
                           <span style="color: #008000;">"\n"</span>)))))))
        (kill-buffer ,pbuffer)))))
</pre>
</div>

<pre class="example">
org-babel-async-execute
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(10)

<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()
</pre>
</div>

<pre class="example">
hello world
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 10:20:01 2015
</pre>

<p>
That works well from what I can see. There are some limitations. I doubt this will work if you use variables in the src block header. Next we consider an approach that does not do the tangling, and that will show us code output as it goes.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a id="ID-D8F2CBB5-31B2-4477-A363-E3C0063214DE" name="ID-D8F2CBB5-31B2-4477-A363-E3C0063214DE"></a><span class="section-number-2">3</span> Emacs process approach with no tangling</h2>
<div class="outline-text-2" id="text-3">
<p>
As an alternative to tangling to a file, here we just copy the code to a file and then run it. This allows us to use :var in the header to pass data in at run time. At the moment, this code only supports printed output from code blocks, not the value for :results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute:python</span> ()
  <span style="color: #036A07;">"Execute the python src-block at point asynchronously.</span>
<span style="color: #036A07;">:var headers are supported.</span>
<span style="color: #036A07;">:results output is all that is supported for output.</span>

<span style="color: #036A07;">A new window will pop up showing you the output as it appears,</span>
<span style="color: #036A07;">and the output in that window will be put in the RESULTS section</span>
<span style="color: #036A07;">of the code block."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((current-file (buffer-file-name))
         (uuid (org-id-uuid))
         (code (org-element-property <span style="color: #006FE0;">:value</span> (org-element-context)))
         (temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>))
         (pbuffer (format <span style="color: #008000;">"*%s*"</span> uuid))
         (varcmds (org-babel-variable-assignments:python
                   (nth 2 (org-babel-get-src-block-info))))
         process)

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get rid of old results, and put a place-holder for the new results to</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">come.</span>
    (org-babel-remove-result)

    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">open the results buffer to see the results in.</span>
    (switch-to-buffer-other-window pbuffer)

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Create temp file containing the code.</span>
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if there are :var headers insert them.</span>
      (<span style="color: #0000FF;">dolist</span> (cmd varcmds)
        (insert cmd)
        (insert <span style="color: #008000;">"\n"</span>))
      (insert code))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">run the code</span>
    (<span style="color: #0000FF;">setq</span> process (start-process
                   uuid
                   pbuffer
                   <span style="color: #008000;">"python"</span>
                   tempfile))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">when the process is done, run this code to put the results in the</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">org-mode buffer.</span>
    (set-process-sentinel
     process
     `(<span style="color: #0000FF;">lambda</span> (process event)
        (<span style="color: #0000FF;">save-window-excursion</span>
          (<span style="color: #0000FF;">save-excursion</span>
            (<span style="color: #0000FF;">save-restriction</span>
              (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                (goto-char (point-min))
                (re-search-forward ,uuid)
                (beginning-of-line)
                (kill-line)
                (insert
                 (mapconcat
                  (<span style="color: #0000FF;">lambda</span> (x)
                    (format <span style="color: #008000;">": %s"</span> x))
                  (butlast (split-string
                            (<span style="color: #0000FF;">with-current-buffer</span>
                                ,pbuffer
                              (buffer-string))
                            <span style="color: #008000;">"\n"</span>))
                  <span style="color: #008000;">"\n"</span>))))))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete the results buffer then delete the tempfile.</span>
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">finally, delete the process.</span>
        (<span style="color: #0000FF;">when</span> (get-buffer ,pbuffer)
          (kill-buffer ,pbuffer)
          (delete-window))
        (delete-file ,tempfile)
        (delete-process process)))))
</pre>
</div>

<pre class="example">
org-babel-async-execute:python
</pre>

<p>
Let us try it out again.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(1)

<span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(5):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> i

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(0.5)


<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()

<span style="color: #0000FF;">print</span> data

<span style="color: #0000FF;">raise</span> <span style="color: #6434A3;">IOError</span>(<span style="color: #008000;">'No file!'</span>)
</pre>
</div>

<pre class="example">
hello world
0
1
2
3
4
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 19:30:16 2015
[1, 3]
Traceback (most recent call last):
  File "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/py-84344aa1", line 18, in &lt;module&gt;
    raise IOError('No file!')
IOError: No file!
</pre>

<p>
It works fine for this simple example. We get to see the output as the code executes, which is a pleasant change from the usual way of running python blocks. There is some support for some header arguments, notably the :var header. I don't use :results value in Python, so for now only output is supported. We even support Exceptions in the output finally!
</p>

<p>
Maybe some org-moder's out there can try this and run it through some more rigorous paces?
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/20/Asynchronously-running-python-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A framework for automated feedback with Python and org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode</id>
    <updated>2015-10-03T20:29:00Z</updated>
    <published>2015-10-03T20:23:29Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[A framework for automated feedback with Python and org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode"><![CDATA[



<p>
<a href="http://docs.autolab.cs.cmu.edu">Autolab</a> is an autograding service that automatically grades code assignments. It uses a program to evaluate a program on a secure virtual system. Using this requires you to run a server, and run code from students. I have never liked that because it is hard to sandbox code well enough to prevent malicious code from doing bad things. Autolab does it well, but it is a heavy solution. Here we explore a local version, one that is used to test for correctness, and not for grading. Here, if you are malicious, you reap what you sow&#x2026;
</p>

<p>
The basic idea I am working towards is that Emacs will provide content to be learned (through org-mode) with active exercises. The exercises will involve a code block, and the user will run a command on their code (or an advised C-c C-c) that checks the solution for correctness. A user will be able to see the solution, and maybe get hints.
</p>

<p>
Suppose we have a problem to solve \(e^x = 3\). This is a simple problem to solve, and here is a solution.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scipy.optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)

<span style="color: #0000FF;">print</span> solve()
</pre>
</div>

<pre class="example">
[ 1.09861229]
</pre>

<p>
We would like to test this for correctness. We code this in a function-based form because we will later use the function <code>solve</code> to test for correctness. Let's see how we could test it with a test function. We will use exec on a string representing our code to get it into our namespace. I don't see a security issue here. You are writing the code! Eventually, we will be passing code to the test framework this way from an org-mode source block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> unittest
<span style="color: #BA36A5;">TOLERANCE</span> = 1e-5

<span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'''from scipy.optimize import fsolve</span>
<span style="color: #008000;">import numpy as np</span>

<span style="color: #008000;">def objective(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return np.exp(x) - 3</span>

<span style="color: #008000;">def solve():</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return fsolve(objective, 3)[0]</span>

<span style="color: #008000;">print solve()'''</span>

<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_solve</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">abs</span>(np.log(3) - solve()) &lt;= TOLERANCE):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Correct'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'incorrect'</span>)

test_solve(s)
</pre>
</div>

<pre class="example">
1.09861228867
Correct
</pre>

<p>
Next, we need to think about how we could generate an import statement from a code block name, import in python, and run a test function. We can assume that the test code will be in a file called "test_%s.py" on your python path. Here are the contents of test_solve.py.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #BA36A5;">TOLERANCE</span> = 1e-5

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve_solution</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">from</span> scipy. optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)[0]


<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_solve</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">abs</span>(solve_solution() - solve()) &lt;= TOLERANCE):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Correct!'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Incorrect'</span>)
</pre>
</div>

<p>
Now, we can import that, and use the functions. Here is the Python script we need to run to test it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> test_solve
test_solve.test_solve(<span style="color: #036A07;">'''</span>
<span style="color: #036A07;">from scipy. optimize import fsolve</span>
<span style="color: #036A07;">import numpy as np</span>

<span style="color: #036A07;">def objective(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   return np.exp(x) - 3</span>

<span style="color: #036A07;">def solve():</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   return fsolve(objective, 3)[0]</span>

<span style="color: #036A07;">print solve()'''</span>)
</pre>
</div>

<pre class="example">
1.09861228867
Correct!
</pre>

<p>
Now, an elisp block to do that. One way to do this is to just run a shell command passing the string to a python interpreter. This is a short way away from an Emacs command now.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((string <span style="color: #008000;">"import test_solve</span>
<span style="color: #008000;">test_solve.test_solve('''</span>
<span style="color: #008000;">from scipy. optimize import fsolve</span>
<span style="color: #008000;">import numpy as np</span>

<span style="color: #008000;">def objective(x):</span>
<span style="color: #008000;">    return np.exp(x) - 3</span>

<span style="color: #008000;">def solve():</span>
<span style="color: #008000;">    return fsolve(objective, 3)[0]</span>

<span style="color: #008000;">print solve()''')"</span>))
  (shell-command-to-string (format <span style="color: #008000;">"python -c \"%s\""</span> string)))
</pre>
</div>

<pre class="example">
1.09861228867
Correct!
</pre>

<p>
Ok, now to wrap it all up in a function we can run from Emacs in a code block to test it. With the cursor in a code block, we get the name, and build the python code, and run it. The function is more complex than I anticipated because I end up  running the code block essentially twice, once to get a results block and once to get the test results. For short problems this is not an issue. I also add the test results in a way that is compatible with the current results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">check</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
         (name (org-element-property <span style="color: #006FE0;">:name</span> src-block))
         (code (org-element-property <span style="color: #006FE0;">:value</span> src-block))
         (end (org-element-property <span style="color: #006FE0;">:end</span> src-block))
         (results)
         (template (format <span style="color: #008000;">"import test_%s</span>
<span style="color: #008000;">test_%s.test_%s('''%s''')"</span> name name name code))
         (output (format
                  <span style="color: #008000;">"\n%s\n"</span>
                  (s-join
                   <span style="color: #008000;">"\n"</span>
                   (mapcar
                    (<span style="color: #0000FF;">lambda</span> (s)
                      (<span style="color: #0000FF;">if</span> (s-starts-with? <span style="color: #008000;">":"</span> s)
                          s
                        (concat <span style="color: #008000;">": "</span> s)))
                    (s-split
                     <span style="color: #008000;">"\n"</span>
                     (shell-command-to-string
                      (format <span style="color: #008000;">"python -c \"%s\""</span> template))))))))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">execute block as normal</span>
    (org-babel-execute-src-block)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and add some output to the Results block</span>
    (<span style="color: #0000FF;">if</span> (org-babel-where-is-src-block-result)
        (<span style="color: #0000FF;">progn</span>
          (goto-char (org-babel-where-is-src-block-result))
          (<span style="color: #0000FF;">setq</span> results (org-element-context))
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete results line</span>
          (kill-line)
          <span style="color: #8D8D84;">;;  </span><span style="color: #8D8D84; font-style: italic;">delete the results</span>
          (<span style="color: #0000FF;">setf</span> (buffer-substring (org-element-property <span style="color: #006FE0;">:begin</span> results)
                                  (org-element-property <span style="color: #006FE0;">:post-affiliated</span> results))
                <span style="color: #008000;">""</span>)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">paste results line back</span>
          (yank)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and the output from your code</span>
          (insert output))
      (message <span style="color: #008000;">"%s"</span> output))))
</pre>
</div>

<pre class="example">
check
</pre>

<p>
Now, we use a named src-block so we can call M-x check in it, and check the answer.
</p>

<div class="org-src-container">

<pre class="src src-python" id="solve"><span style="color: #0000FF;">from</span> scipy.optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)

<span style="color: #0000FF;">print</span> solve()
</pre>
</div>

<pre class="example">
[ 1.09861229]
Correct!
</pre>

<p>
I would like to be able to provide a solution function that would show a user my solution they were tested against. Python provides the <code>inspect</code> module that can do this. Here is how we get the code in Python.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> inspect
<span style="color: #0000FF;">import</span> test_solve

<span style="color: #0000FF;">print</span> inspect.getsource(test_solve.solve_solution)
</pre>
</div>

<pre class="example">
def solve_solution():
    from scipy. optimize import fsolve
    import numpy as np

    def objective(x):
        return np.exp(x) - 3

    return fsolve(objective, 3)[0]
</pre>

<p>
This makes it easy to wrap up a function in emacs that will show this from at src block. We just get the block name, and build the python code and execute it here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">show-solution</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
         (name (org-element-property <span style="color: #006FE0;">:name</span> src-block))
         (template (format  <span style="color: #008000;">"import inspect</span>
<span style="color: #008000;">import test_%s</span>

<span style="color: #008000;">print inspect.getsource(test_%s.%s_solution)"</span> name name name)))
    (switch-to-buffer-other-window (get-buffer-create <span style="color: #008000;">"solution"</span>))
    (erase-buffer)
    (insert (shell-command-to-string
             (format <span style="color: #008000;">"python -c \"%s\""</span> template)))
    (python-mode)))
</pre>
</div>

<pre class="example">
show-solution
</pre>

<p>
That summarizes the main features. It allows me to write a test module that has some name conventions to define a solution function, and a test function. Emacs can generate some boilerplate code for different problem names, and run the test to give the user some feedback. Most of the code in this post would not be directly visible to a user, it would be buried in a python module somewhere on the path, and in elisp files providing the glue. I am not sure how much obfuscation you can put in the python files, e.g. just providing byte-compiled code, so it is less easy to just read it. That is not as big a deal when it is just a study guide/feedback system.
</p>

<p>
From an authoring point of view, this seems pretty good to me. It is feasible I think to write an org-source document like this with tangling for the test modules, and an export to org that does not have the solutions in it. The only subtle point might be needing to alter Python paths to find the test modules if they aren't installed via something like pip.
</p>


<p>
I think this is pretty flexible, and could handle problems that take arguments, e.g. write a function that sorts a list. Here is a simple example of that. First we write the test_sort.py file with a solution, and some tests.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">sort_solution</span>(LIST):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> LIST.sort()

<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_sort</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> sort([3, 4, 2]) == [2, 3, 4]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'passed test 1'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> sort([<span style="color: #008000;">'z'</span>, <span style="color: #008000;">'b'</span>]) == [<span style="color: #008000;">'b'</span>, <span style="color: #008000;">'z'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'passed test 2'</span>)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-python" id="sort"><span style="color: #0000FF;">def</span> <span style="color: #006699;">sort</span>(LIST):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #006FE0;">sorted</span>(LIST)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s
</pre>
</div>
<pre class="example">
passed test 1
passed test 2
</pre>

<p>
Maybe it would make sense to use unittests, or nose or some other testing framework if it makes writing the tests easier. Another day.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Pyparsing meets Emacs to find chemical formulas]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas" />
    <id>http://jkitchin.github.io/blog/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas</id>
    <updated>2015-07-02T12:38:04Z</updated>
    <published>2015-07-02T12:22:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Pyparsing meets Emacs to find chemical formulas]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas"><![CDATA[



<p>
see the video: <a href="https://www.youtube.com/watch?v=sjxS9m8QCoo">https://www.youtube.com/watch?v=sjxS9m8QCoo</a> 
</p>

<p>
Today we expand the concepts of clickable text and merge an idea from Python with Emacs. Here we will use Python to find chemical formulas in the buffer, and then highlight them with Emacs.  We will use pyparsing to find the chemical formulas and then use them to create a pattern for button-lock. I chose this approach because regular expressions are hard to use on the most general kinds of chemical formulas, and a (possibly recursive) parser should be better equipped to handle this. I adapted an <a href="https://pyparsing.wikispaces.com/file/view/chemicalFormulas.py/31041705/chemicalFormulas.py">example</a> grammar to match simple chemical formulas, i.e. ones that do not have any parentheses, or charges different than + or -. I think something like this could be done in Emacs, but I am not as familiar with this kind of parsing in Emacs.
</p>

<p>
Basically, we treat a formula as a group of one or more Elements that have an optional number following them. Spoiler alert: This mostly works, but in the end I conclude there is a clear benefit to a markup language for chemical formulas. Here is an example usage of a parser:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">adapted from [[https://pyparsing.wikispaces.com/file/view/chemicalFormulas.py/31041705/chemicalFormulas.py]]</span>

<span style="color: #0000FF;">from</span> pyparsing <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">element</span> = oneOf( <span style="color: #008000;">"""H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No"""</span> )

<span style="color: #BA36A5;">integer</span> = Word(nums)
<span style="color: #BA36A5;">elementRef</span> = Group(element + Optional(integer))
<span style="color: #BA36A5;">chemicalFormula</span> = (WordStart(alphas.upper())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + OneOrMore(elementRef).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + Optional(Or([Literal(<span style="color: #008000;">"-"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     Literal(<span style="color: #008000;">"+"</span>)]))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + WordEnd(alphas + nums + <span style="color: #008000;">"-+"</span>))


<span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'''Water is  H2O or OH2  not h2O, methane is CH4 and of course there is PtCl4.</span>
<span style="color: #008000;">What about H+ and OH-? and carbon or Carbon or H2SO4?</span>

<span style="color: #008000;">Is this C6H6? or C2H5OH?</span>

<span style="color: #008000;">and a lot of elements:</span>
<span style="color: #008000;">H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No'''</span>

<span style="color: #BA36A5;">matches</span> = []
<span style="color: #0000FF;">for</span> match, start, stop <span style="color: #0000FF;">in</span> chemicalFormula.scanString(s):
   matches.append(s[start:stop])

<span style="color: #0000FF;">print</span> <span style="color: #006FE0;">sorted</span>(matches, key=<span style="color: #0000FF;">lambda</span> x: <span style="color: #006FE0;">len</span>(x), reverse=<span style="color: #D0372D;">True</span>)
</pre>
</div>
<pre class="example">
['C2H5OH', 'PtCl4', 'H2SO4', 'C6H6', 'H2O', 'OH2', 'CH4', 'OH-', 'Uub', 'Uut', 'Uuq', 'Uup', 'Uuh', 'Uus', 'Uuo', 'H+', 'He', 'Li', 'Be', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'Cl', 'Ar', 'Ca', 'Sc', 'Ti', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'Xe', 'Cs', 'Ba', 'Lu', 'Hf', 'Ta', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Ac', 'Th', 'Pa', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'O', 'H', 'B', 'C', 'N', 'O', 'F', 'P', 'S', 'K', 'V', 'Y', 'I', 'W', 'U']
</pre>

<p>
That is pretty good. If the string was actually our buffer, we could use those to create a regexp to put text-properties on them. The trick is how to get the buffer string to the Python function, and then get back usable information in lisp. We actually explored this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/">before</a> ! Rather than use that, we will just create the lisp output manually since this is a simple list of strings.
</p>

<p>
The first thing we should do is work out a Python script that will output the lisp results we want, which are the found formulas (I tried getting the start and stop positions, but I don't think they map onto the buffer positions very well). Here it is. We set it up as a command line tool that takes a string. We use set to get a unique list, then sort the list by length so we try matching the longest patterns first. There are a few subtle differences in this script and the example above because of some odd false hits I unsuccessfully tried to get rid of.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> sys
<span style="color: #0000FF;">from</span> pyparsing <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">element_string</span> =  <span style="color: #008000;">"""H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No"""</span>
<span style="color: #BA36A5;">element</span> = oneOf([x <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> element_string.split()])

<span style="color: #BA36A5;">integer</span> = Word(nums)
<span style="color: #BA36A5;">elementRef</span> = Group(element + Optional(integer))
<span style="color: #BA36A5;">chemicalFormula</span> = (WordStart(alphas.upper()).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + OneOrMore(elementRef).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + Optional(Or([Literal(<span style="color: #008000;">"-"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     Literal(<span style="color: #008000;">"+"</span>)])).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + WordEnd(alphas + alphas.lower() + nums + <span style="color: #008000;">"-+"</span>).leaveWhitespace())

<span style="color: #BA36A5;">s</span> = sys.stdin.read().strip()

<span style="color: #BA36A5;">matches</span> = []
<span style="color: #0000FF;">for</span> match, start, stop <span style="color: #0000FF;">in</span> chemicalFormula.scanString(s):
   matches.append(s[start:stop])
<span style="color: #BA36A5;">matches</span> = <span style="color: #006FE0;">list</span>(<span style="color: #006FE0;">set</span>(matches))
matches.sort(key=<span style="color: #0000FF;">lambda</span> x: <span style="color: #006FE0;">len</span>(x), reverse=<span style="color: #D0372D;">True</span>)

<span style="color: #0000FF;">print</span> <span style="color: #008000;">"'("</span> + <span style="color: #008000;">' '</span>.join([<span style="color: #008000;">"\"{}\""</span>.<span style="color: #006FE0;">format</span>(m) <span style="color: #0000FF;">for</span> m <span style="color: #0000FF;">in</span> matches]) + <span style="color: #008000;">')'</span>
</pre>
</div>

<p>
Now we can test this:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"Water is H2O, methane is CH4 and of course PtCl4, what about H+ and OH-? and carbon or Carbon. Water is H2O not h2o or mH2o, methane is CH4 and of course PtCl4, what about H+ and OH-? carbon, Carbon and SRC, or H2SO4? Is this C6H6? Ethanol is C2H5OH in a sentence.</span>

<span style="color: #008000;"> C2H5OH firs con</span>

<span style="color: #008000;">This is CH3OH</span>

<span style="color: #008000;">H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No</span>
<span style="color: #008000;">"</span> | ./parse_chemical_formulas.py
</pre>
</div>
<pre class="example">
'("C2H5OH" "CH3OH" "PtCl4" "H2SO4" "C6H6" "CH4" "OH-" "Uub" "Uuq" "Uup" "Uus" "Uuo" "Uuh" "H2O" "Uut" "Ru" "Re" "Rf" "Rg" "Ra" "Rb" "Rn" "Rh" "Be" "Ba" "Bh" "Bi" "Bk" "Br" "Ho" "Os" "Es" "Hg" "Ge" "Gd" "Ga" "Pr" "Pt" "Pu" "Pb" "Pa" "Pd" "Cd" "Po" "Pm" "Hs" "Hf" "He" "Md" "Mg" "Mo" "Mn" "Mt" "Zn" "H+" "Eu" "Zr" "Er" "Ni" "No" "Na" "Nb" "Nd" "Ne" "Np" "Fr" "Fe" "Fm" "Sr" "Kr" "Si" "Sn" "Sm" "Sc" "Sb" "Sg" "Se" "Co" "Cm" "Cl" "Ca" "Cf" "Ce" "Xe" "Tm" "Cs" "Cr" "Cu" "La" "Li" "Tl" "Lu" "Lr" "Th" "Ti" "Te" "Tb" "Tc" "Ta" "Yb" "Db" "Dy" "Ds" "Ac" "Ag" "Ir" "Am" "Al" "As" "Ar" "Au" "At" "In" "H" "P" "C" "K" "O" "S" "W" "B" "F" "N" "V" "I" "U" "Y")
</pre>

<p>
That seems to work great. Now, we have a list of chemical formulas. Now, the Emacs side to call that function. We do not use regexp-opt here because I found it optimizes too much, and doesn't always match the formulas. We want explicit matches on each formula.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">shell-command-on-region-to-string</span> (start end command)
  (<span style="color: #0000FF;">with-output-to-string</span>
    (shell-command-on-region start end command standard-output)))

(read (shell-command-on-region-to-string
        (point-min) (point-max)
        <span style="color: #008000;">"./parse_chemical_formulas.py"</span>))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">quote</td>
<td class="left">(C2H5OH ext; t CH3OH PtCl4 H2SO4 the   fir C6H6 CH4 OH- OH2 Uub  co Uuq Uup Uus Uuo Uuh ord H2O Uut Ru Re Rf Rg Ra Rb Rn Rh Be Ba Bh Bi Bk Br Ho Os Es Hg Ge Gd Ga Pr  t Pt Pu Pb Pa Pd Cd Po Pm Hs Hf He Md Mg Mo Mn Mt Zn H+ Eu Zr Er Ni No Na Nb Nd Ne Np Fr Fe Fm Sr Kr Si Sn Sm Sc Sb Sg Se Co Cm Cl Ca Cf Ce Xe Tm Cs Cr Cu La Li Tl Lu Lr Th Ti Te Tb Tc as Ta Yb Db Dy Ds In Ac Ag Ir Am Al As Ar Au At n H P l t C r K O S W w B F N V   I U Y e i)</td>
</tr>
</tbody>
</table>


<p>
That is certainly less than perfect, you can see a few false hits that are not too easy to understand, e.g. why is "fir" or "the " or "as"  in the list? They don't even start with an uppercase letter. One day maybe I will figure it out. I assume it is a logic flaw in my parser. Until then, let's go ahead and make the text functional, so it looks up the formula in the NIST webbook. The regexp is a little funny, we have to add word-boundaries to each formula to avoid some funny, bad matches.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">chemical-formula-button</span> nil <span style="color: #036A07;">"store button for removal later."</span>)

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">nist-webbook</span>)
(<span style="color: #0000FF;">setq</span> chemical-formula-button
      (button-lock-set-button
       (mapconcat
        (<span style="color: #0000FF;">lambda</span> (formula)
          (concat <span style="color: #008000;">"\\&lt;"</span> (regexp-quote formula) <span style="color: #008000;">"\\&gt;"</span>))
        (eval (read (shell-command-on-region-to-string
                     (point-min) (point-max)
                     <span style="color: #008000;">"./parse_chemical_formulas.py"</span>)))
        <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">"</span>)
       (<span style="color: #0000FF;">lambda</span> () (<span style="color: #0000FF;">interactive</span>)
         (nist-webbook-formula
          (get-surrounding-text-with-property
           'chemical-formula)))
       <span style="color: #006FE0;">:face</span> '((<span style="color: #006FE0;">:underline</span> t) (<span style="color: #006FE0;">:background</span> <span style="color: #008000;">"gray80"</span>))
       <span style="color: #006FE0;">:help-echo</span> <span style="color: #008000;">"A chemical formula"</span>
       <span style="color: #006FE0;">:additional-property</span> 'chemical-formula))
</pre>
</div>

<p>
Here are a few tests: CH4, C2H5OH, C6H6. C(CH3)4. C6H6 is benzene. As you can see our pattern lacks context; the first word of the sentence is "as" not the symbol for arsenic. Also, our parser does not consider formulas with parentheses in them. Whenever I refer to myself, I mean myself, and not the element iodine. There are a few weird matchs I just don't understand, like firs d t x rn lac? These do not seem to match anything, and I wonder how they are getting in the list. I think this really shows that it would be useful to use some light markup for chemical formulas which would a) provide context, and b) enhance parsing accuracy. In LaTeX you would use \ce{I} to indicate that is iodine, and not a reference to myself. That is more clear than saying I use I in chemical reactions ;) And it also clarifies sentences like the letter W is used to represent tungsten as the symbol \ce{W}.
</p>

<p>
Nevertheless, we can click on the formulas, and get something to happen that is potentially useful. Is this actually useful? Conceptually yes, I think it could be, but clearly the parsing is not recognizing formulas perfectly. Sending the buffer to a dedicated program that can return a list of matches to highlight in Emacs is a good idea, especially if it is not easy to build in Emacs, or if a proven solution already exists.
</p>


<p>
Finally, we can remove the highlighted text like this. That was the reason for saving the button earlier!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">when</span> chemical-formula-button
  (button-lock-unset-button chemical-formula-button)
  (<span style="color: #0000FF;">setq</span> chemical-formula-button nil))
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Serializing an Atoms object in xml]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/06/28/Serializing-an-Atoms-object-in-xml" />
    <id>http://jkitchin.github.io/blog/2015/06/28/Serializing-an-Atoms-object-in-xml</id>
    <updated>2015-06-28T12:26:00Z</updated>
    <published>2015-06-28T12:26:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="xml" />
    <category scheme="http://jkitchin.github.io/blog" term="ase" />
    <summary type="html"><![CDATA[Serializing an Atoms object in xml]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/06/28/Serializing-an-Atoms-object-in-xml"><![CDATA[


<p>
I have a future need to serialize an Atoms object from <a href="https://wiki.fysik.dtu.dk/ase/">ase</a> as XML. I would use json usually, but I want to use a program that will index xml. I have previously used <a href="https://pypi.python.org/pypi/pyxser/1.5.2-r2">pyxser</a> for this, but I recall it being difficult to install, and it does not pip install on my Mac. So, here we look at <a href="https://pypi.python.org/pypi/xmlwitch/0.2.1">xmlwitch</a> which does pip install ;). This package does some serious magic with context managers.
</p>

<p>
One thing I am not sure about here is the best way to represent numbers and lists/arrays. I am using repr here, and assuming you would want to read this back in to Python where this could simply be eval'ed. Some alternatives would be to convert them to lists, or save them as arrays of xml elements.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> ase.data.g2 <span style="color: #0000FF;">import</span> data
<span style="color: #0000FF;">from</span> ase.structure <span style="color: #0000FF;">import</span> molecule
<span style="color: #0000FF;">import</span> xmlwitch

<span style="color: #BA36A5;">atoms</span> = molecule(<span style="color: #008000;">'H2O'</span>)

<span style="color: #0000FF;">def</span> <span style="color: #006699;">serialize_atoms</span>(atoms):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'Return an xml string of an ATOMS object.'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">xml</span> = xmlwitch.Builder(version=<span style="color: #008000;">'1.0'</span>, encoding=<span style="color: #008000;">'utf-8'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> xml.atoms():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> atom <span style="color: #0000FF;">in</span> atoms:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> xml.atom(index=<span style="color: #006FE0;">repr</span>(atom.index)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.symbol(atom.symbol)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.position(<span style="color: #006FE0;">repr</span>(atom.position))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.magmom(<span style="color: #006FE0;">repr</span>(atom.magmom))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.mass(<span style="color: #006FE0;">repr</span>(atom.mass))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.momentum(<span style="color: #006FE0;">repr</span>(atom.momentum))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.number(<span style="color: #006FE0;">repr</span>(atom.number))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.cell(<span style="color: #006FE0;">repr</span>(atoms.cell))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xml.pbc(<span style="color: #006FE0;">repr</span>(atoms.pbc))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> xml

<span style="color: #BA36A5;">atoms_xml</span> = serialize_atoms(atoms)
<span style="color: #0000FF;">print</span> atoms_xml

<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'atoms.xml'</span>, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #006FE0;">str</span>(atoms_xml))
</pre>
</div>

<pre class="example">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;atoms&gt;
  &lt;atom index="0"&gt;
    &lt;symbol&gt;O&lt;/symbol&gt;
    &lt;position&gt;array([ 0.      ,  0.      ,  0.119262])&lt;/position&gt;
    &lt;magmom&gt;0.0&lt;/magmom&gt;
    &lt;mass&gt;15.9994&lt;/mass&gt;
    &lt;momentum&gt;array([ 0.,  0.,  0.])&lt;/momentum&gt;
    &lt;number&gt;8&lt;/number&gt;
  &lt;/atom&gt;
  &lt;atom index="1"&gt;
    &lt;symbol&gt;H&lt;/symbol&gt;
    &lt;position&gt;array([ 0.      ,  0.763239, -0.477047])&lt;/position&gt;
    &lt;magmom&gt;0.0&lt;/magmom&gt;
    &lt;mass&gt;1.0079400000000001&lt;/mass&gt;
    &lt;momentum&gt;array([ 0.,  0.,  0.])&lt;/momentum&gt;
    &lt;number&gt;1&lt;/number&gt;
  &lt;/atom&gt;
  &lt;atom index="2"&gt;
    &lt;symbol&gt;H&lt;/symbol&gt;
    &lt;position&gt;array([ 0.      , -0.763239, -0.477047])&lt;/position&gt;
    &lt;magmom&gt;0.0&lt;/magmom&gt;
    &lt;mass&gt;1.0079400000000001&lt;/mass&gt;
    &lt;momentum&gt;array([ 0.,  0.,  0.])&lt;/momentum&gt;
    &lt;number&gt;1&lt;/number&gt;
  &lt;/atom&gt;
  &lt;cell&gt;array([[ 1.,  0.,  0.],
       [ 0.,  1.,  0.],
       [ 0.,  0.,  1.]])&lt;/cell&gt;
  &lt;pbc&gt;array([False, False, False], dtype=bool)&lt;/pbc&gt;
&lt;/atoms&gt;
</pre>

<p>
Now, we can try reading that file. I am going to use emacs-lisp here for fun, and compute the formula.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((xml (car (xml-parse-file <span style="color: #008000;">"atoms.xml"</span>)))
       (atoms (xml-get-children xml 'atom))
       (symbol-elements (mapcar (<span style="color: #0000FF;">lambda</span> (atom)
                                  (car (xml-get-children atom 'symbol)))
                                atoms))
       (symbols (mapcar (<span style="color: #0000FF;">lambda</span> (x)
                          (car (xml-node-children x)))
                        symbol-elements)))
  (mapconcat (<span style="color: #0000FF;">lambda</span> (c)
               (format <span style="color: #008000;">"%s%s"</span> (car c)
                       (<span style="color: #0000FF;">if</span> (= 1 (cdr c))
                           <span style="color: #008000;">""</span>
                         (cdr c))))
             (<span style="color: #0000FF;">loop</span> for sym in (-uniq symbols)
                   collect (cons
                            sym
                            (-count (<span style="color: #0000FF;">lambda</span> (x) (string= x sym)) symbols)))
             <span style="color: #008000;">""</span>))
</pre>
</div>

<pre class="example">
OH2
</pre>

<p>
Here is a (misleadingly) concise way to do this in Python. It is so short thanks to there being a Counter that does what we want, and some pretty nice list comprehension!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> xml.etree.ElementTree <span style="color: #0000FF;">as</span> ET
<span style="color: #0000FF;">from</span> collections <span style="color: #0000FF;">import</span> Counter
<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'atoms.xml'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">xml</span> = ET.fromstring(f.read())

<span style="color: #BA36A5;">counts</span> = Counter([el.text <span style="color: #0000FF;">for</span> el <span style="color: #0000FF;">in</span> xml.findall(<span style="color: #008000;">'atom/symbol'</span>)])

<span style="color: #0000FF;">print</span> <span style="color: #008000;">''</span>.join([<span style="color: #008000;">'{0}{1}'</span>.<span style="color: #006FE0;">format</span>(a,b) <span style="color: #0000FF;">if</span> b&gt;1 <span style="color: #0000FF;">else</span> a <span style="color: #0000FF;">for</span> a,b <span style="color: #0000FF;">in</span> counts.iteritems()])
</pre>
</div>

<pre class="example">
H2O
</pre>

<p>
And finally a test on reading a unit cell.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> xml.etree.ElementTree <span style="color: #0000FF;">as</span> ET
<span style="color: #0000FF;">from</span> numpy <span style="color: #0000FF;">import</span> array

<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'atoms.xml'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">xml</span> = ET.fromstring(f.read())

<span style="color: #0000FF;">print</span> <span style="color: #006FE0;">eval</span>(xml.find(<span style="color: #008000;">'cell'</span>).text)
</pre>
</div>

<pre class="example">
[[ 1.  0.  0.]
 [ 0.  1.  0.]
 [ 0.  0.  1.]]
</pre>

<p>
That seems to work but, yeah, you won't want to read untrusted xml with that! See <a href="http://stupidpythonideas.blogspot.com/2013/11/repr-eval-bad-idea.html">http://stupidpythonideas.blogspot.com/2013/11/repr-eval-bad-idea.html</a> . It might be better (although not necessarily more secure) to use pickle or some other serialization strategy for this.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/28/Serializing-an-Atoms-object-in-xml.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A python version of the s-exp bibtex entry]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/06/11/A-python-version-of-the-s-exp-bibtex-entry" />
    <id>http://jkitchin.github.io/blog/2015/06/11/A-python-version-of-the-s-exp-bibtex-entry</id>
    <updated>2015-06-11T10:02:33Z</updated>
    <published>2015-06-11T10:02:33Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="bibtex" />
    <category scheme="http://jkitchin.github.io/blog" term="ref" />
    <summary type="html"><![CDATA[A python version of the s-exp bibtex entry]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/06/11/A-python-version-of-the-s-exp-bibtex-entry"><![CDATA[



<p>
In this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry/">post</a> we explored representing a bibtex entry in lisp s-exp notation, and showed interesting things that enables. Here, I explore something similar in Python. The s-exp notation in Python is really more like tuples. It looks almost identical, except we need a lot of commas for the Python syntax. One significant difference in Python is we need to define the functions in advance because otherwise the function symbols are undefined. Similar to lisp, we can define the field functions at run-time in a loop. We have to use an eval statement, which some Pythonistas find distasteful, but it is not that different to me than what we did in lisp.
</p>

<p>
The syntax for "executing" the data structure is quite different than in lisp, because this data is <i>not</i> code in Python. Instead, we have to deconstruct the data, knowing that the function is the first object, and it takes the remaining arguments in the tuple.
</p>

<p>
Here is the proof of concept:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">article</span>(bibtex_key, *args):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Return the bibtex formatted entry"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">',\n'</span>.join([<span style="color: #008000;">'@article{{{0}}}'</span>.<span style="color: #006FE0;">format</span>(bibtex_key)] +[arg[0](arg[1]) <span style="color: #0000FF;">for</span> arg <span style="color: #0000FF;">in</span> args[0]] + [<span style="color: #008000;">'}'</span>])

<span style="color: #BA36A5;">fields</span> = (<span style="color: #008000;">"author"</span>, <span style="color: #008000;">"title"</span>, <span style="color: #008000;">"journal"</span>, <span style="color: #008000;">"pages"</span>, <span style="color: #008000;">"number"</span>, <span style="color: #008000;">"doi"</span>, <span style="color: #008000;">"url"</span>, <span style="color: #008000;">"eprint"</span>, <span style="color: #008000;">"year"</span>)

<span style="color: #0000FF;">for</span> f <span style="color: #0000FF;">in</span> fields:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">locals</span>()[f] = <span style="color: #006FE0;">eval</span> (<span style="color: #008000;">'lambda x: "  {0} = {{{1}}}".format("'</span> + f + <span style="color: #008000;">'", x)'</span>)

<span style="color: #BA36A5;">entry</span> = (article, <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (author, <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>),
         (title, <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>),
         (journal, <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>),
         (pages, <span style="color: #008000;">"10788-10794"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (year, 2013),
         (number, 31),
         (doi, <span style="color: #008000;">"10.1021/ie400582a"</span>),
         (url, <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>),
         (eprint, <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))


<span style="color: #0000FF;">print</span> entry[0](entry[1], entry[2:])
</pre>
</div>

<pre class="example">
@article{hallenbeck-2013-effec-o2},
  author = {Hallenbeck, Alexander P. and Kitchin, John R.},
  title = {Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent},
  journal = {Industrial \&amp; Engineering Chemistry Research},
  pages = {10788-10794},
  year = {2013},
  number = {31},
  doi = {10.1021/ie400582a},
  url = {http://pubs.acs.org/doi/abs/10.1021/ie400582a},
  eprint = {http://pubs.acs.org/doi/pdf/10.1021/ie400582a},
}
</pre>

<p>
We can still get specific fields out. Since we used a tuple here, it is not quite as nice as using a dictionary, but it is neither too bad, and it can be wrapped in a reasonably convenient function.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">article</span>(bibtex_key, *args):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Return the bibtex formatted entry"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">',\n'</span>.join([<span style="color: #008000;">'@article{{{0}}}'</span>.<span style="color: #006FE0;">format</span>(bibtex_key)] +[arg[0](arg[1]) <span style="color: #0000FF;">for</span> arg <span style="color: #0000FF;">in</span> args[0]] + [<span style="color: #008000;">'}'</span>])

<span style="color: #BA36A5;">fields</span> = (<span style="color: #008000;">"author"</span>, <span style="color: #008000;">"title"</span>, <span style="color: #008000;">"journal"</span>, <span style="color: #008000;">"pages"</span>, <span style="color: #008000;">"number"</span>, <span style="color: #008000;">"doi"</span>, <span style="color: #008000;">"url"</span>, <span style="color: #008000;">"eprint"</span>, <span style="color: #008000;">"year"</span>)

<span style="color: #0000FF;">for</span> f <span style="color: #0000FF;">in</span> fields:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">locals</span>()[f] = <span style="color: #006FE0;">eval</span> (<span style="color: #008000;">'lambda x: "  {0} = {{{1}}}".format("'</span> + f + <span style="color: #008000;">'", x)'</span>)

<span style="color: #BA36A5;">entry</span> = (article, <span style="color: #008000;">"hallenbeck-2013-effec-o2"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (author, <span style="color: #008000;">"Hallenbeck, Alexander P. and Kitchin, John R."</span>),
         (title, <span style="color: #008000;">"Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent"</span>),
         (journal, <span style="color: #008000;">"Industrial \&amp; Engineering Chemistry Research"</span>),
         (pages, <span style="color: #008000;">"10788-10794"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    (year, 2013),
         (number, 31),
         (doi, <span style="color: #008000;">"10.1021/ie400582a"</span>),
         (url, <span style="color: #008000;">"http://pubs.acs.org/doi/abs/10.1021/ie400582a"</span>),
         (eprint, <span style="color: #008000;">"http://pubs.acs.org/doi/pdf/10.1021/ie400582a"</span>))


<span style="color: #0000FF;">for</span> field <span style="color: #0000FF;">in</span> entry[2:]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> field[0] == author:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> field

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_field</span>(entry, field):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> element <span style="color: #0000FF;">in</span> entry[2:]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> element[0] == field:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> element[1]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #D0372D;">None</span>

<span style="color: #0000FF;">print</span> get_field(entry, title)
<span style="color: #0000FF;">print</span> get_field(entry, <span style="color: #008000;">"bad"</span>)
</pre>
</div>

<pre class="example">
(&lt;function &lt;lambda&gt; at 0x1005975f0&gt;, 'Hallenbeck, Alexander P. and Kitchin, John R.')
Effects of \ce{O_2} and \ce{SO_2} on the capture capacity of a primary-amine based polymeric \ce{CO_2} sorbent
None
</pre>

<p>
So, it seems Python can do some things like lisp in treating functions like first-class objects that can be used as functions, or keys. I still like the lisp s-exp better, but this is an interesting idea for Python too.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/06/11/A-python-version-of-the-s-exp-bibtex-entry.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Python data structures to lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/05/16/Python-data-structures-to-lisp" />
    <id>http://jkitchin.github.io/blog/2015/05/16/Python-data-structures-to-lisp</id>
    <updated>2015-05-16T10:47:59Z</updated>
    <published>2015-05-16T10:47:59Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="lisp" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Python data structures to lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/05/16/Python-data-structures-to-lisp"><![CDATA[


<p>
I have an idea in mind that would use the output of python scripts in lisp functions. Xah Lee posted an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">idea for writing emacs commands in scripting languages</a> . In this post I want to explore an extension of the idea, where a Python script will return output that can be read in Lisp, e.g. we can convert a Python list to a lisp list, or a dictionary to an a-list or p-list. I can already see that simple data structures will be "simple", and arbitrary data structures will offer a lot of challenges, e.g. nested lists or dictionaries&#x2026;
</p>

<p>
If I could add some custom functions to the basic builtin types in Python, then I could use another approach to format python objects as lisp data types. This isn't recommended by Pythonistas, but I guess they don't want to use lisp as much as I do ;) I found this approach to modifying builtins:
</p>

<p>
<a href="http://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a">http://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a</a> 
</p>

<p>
We use that almost verbatim here to get what I want. This is a super low level way to add functions to the builtins. I add some simple formatting to floats, ints and strings. I add a more complex recursive formatting function to lists, tuples and dictionaries. A dictionary can be represented as an alist or plist. Both examples are shown, but I leave the alist version commented out. Finally, we add a lispify function to numpy arrays.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> ctypes <span style="color: #0000FF;">as</span> c

<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">PyObject_HEAD</span>(c.Structure):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">_fields_</span> = [(<span style="color: #008000;">'HEAD'</span>, c.c_ubyte * (<span style="color: #006FE0;">object</span>.__basicsize__ -
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     c.sizeof(c.c_void_p))),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   (<span style="color: #008000;">'ob_type'</span>, c.c_void_p)]

<span style="color: #BA36A5;">_get_dict</span> = c.pythonapi._PyObject_GetDictPtr
<span style="color: #BA36A5;">_get_dict.restype</span> = c.POINTER(c.py_object)
<span style="color: #BA36A5;">_get_dict.argtypes</span> = [c.py_object]

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_dict</span>(<span style="color: #006FE0;">object</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> _get_dict(<span style="color: #006FE0;">object</span>).contents.value

get_dict(<span style="color: #006FE0;">str</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> s:<span style="color: #008000;">'"{}"'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(s))
get_dict(<span style="color: #006FE0;">float</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> f:<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(f))
get_dict(<span style="color: #006FE0;">int</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> f:<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(f))

<span style="color: #0000FF;">import</span> collections
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">lispify</span>(L):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Convert a Python object L to a lisp representation."</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">str</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">float</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">int</span>)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> L.lisp()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> (<span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">list</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">tuple</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, np.ndarray)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> element <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [element.lisp()]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'('</span> + <span style="color: #008000;">' '</span>.join(s) + <span style="color: #008000;">')'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">dict</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> key <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">alist format</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">s += ["({0} . {1})".format(key, L[key].lisp())]</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plist</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [<span style="color: #008000;">":{0} {1}"</span>.<span style="color: #006FE0;">format</span>(key, L[key].lisp())]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'('</span> + <span style="color: #008000;">' '</span>.join(s) + <span style="color: #008000;">')'</span>

get_dict(<span style="color: #006FE0;">list</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(<span style="color: #006FE0;">tuple</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(<span style="color: #006FE0;">dict</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(np.ndarray)[<span style="color: #008000;">'lisp'</span>] = lispify
</pre>
</div>

<p>
Let us test these out.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> pylisp <span style="color: #0000FF;">import</span> *
<span style="color: #BA36A5;">a</span> = 4.5
<span style="color: #0000FF;">print</span> <span style="color: #006FE0;">int</span>(a).lisp()
<span style="color: #0000FF;">print</span> a.lisp()
<span style="color: #0000FF;">print</span> <span style="color: #008000;">"test"</span>.lisp()

<span style="color: #0000FF;">print</span> [1, 2, 3].lisp()
<span style="color: #0000FF;">print</span> (1, 2, 3).lisp()

<span style="color: #0000FF;">print</span> [[1, 3], (5, 6)].lisp()

<span style="color: #0000FF;">print</span> {<span style="color: #008000;">"a"</span>: 5}.lisp()
<span style="color: #0000FF;">print</span> [[1, 3], (5, 6), {<span style="color: #008000;">"a"</span>: 5, <span style="color: #008000;">"b"</span>: <span style="color: #008000;">"test"</span>}].lisp()


<span style="color: #BA36A5;">A</span> = np.array([1, 3, 4])
<span style="color: #0000FF;">print</span> A.lisp()
<span style="color: #0000FF;">print</span> ({<span style="color: #008000;">"tree"</span>: [5, 6]}, [<span style="color: #008000;">"a"</span>, 4, <span style="color: #008000;">"list"</span>], 5, 2.0 / 3.0).lisp()
</pre>
</div>

<pre class="example">
4
4.5
"test"
(1 2 3)
(1 2 3)
((1 3) (5 6))
(:a 5)
((1 3) (5 6) (:a 5 :b "test"))
(1 3 4)
((:tree (5 6)) ("a" 4 "list") 5 0.666666666667)
</pre>


<p>
Now, is that better than a single lisp function with a lot of conditionals to handle each type? I am not sure. This seems to work pretty well.
</p>


<p>
Here is how I imagine using this idea. We would have some emacs-lisp variables and use them to dynamically generate a python script. We run the python script, capturing the output, and read it back in as a lisp data structure. Here is a simple kind of example that generates a dictionary.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((elisp-var 6)
       (result)
      (script (format <span style="color: #008000;">"</span>
<span style="color: #008000;">from pylisp import *</span>
<span style="color: #008000;">print {x: [2*y for y in range(x)] for x in range(1, %s)}.lisp()</span>
<span style="color: #008000;">"</span> elisp-var)))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">start a python process</span>
  (run-python)
  (<span style="color: #0000FF;">setq</span> result (read (python-shell-send-string-no-output
   script)))
  (plist-get result <span style="color: #006FE0;">:5</span>))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(0 2 4 6 8)
</pre>
</div>

<p>
That seems to work pretty well. One alternative idea to this is <a href="https://github.com/pinard/Pymacs">Pymacs</a> , which I have written about <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs/">before</a> . This project isn't currently under active development, and I ran into some difficulties with it before.
</p>

<p>
Here we can solve the problem I previously posed and get the result back as an elisp float, and then reuse the result
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((myvar 3)
       (script (format <span style="color: #008000;">"from pylisp import *</span>
<span style="color: #008000;">from scipy.optimize import fsolve</span>
<span style="color: #008000;">def objective(x):</span>
<span style="color: #008000;">    return x - 5</span>

<span style="color: #008000;">ans, = fsolve(objective, %s)</span>
<span style="color: #008000;">print ans.lisp()"</span> myvar)))
  (run-python)
  (<span style="color: #0000FF;">setq</span> result (read (python-shell-send-string-no-output
                       script)))
  (- 5 result))
</pre>
</div>

<pre class="example">
0.0
</pre>

<p>
Bottom line: we can write python code in lisp functions that are dynamically updated, execute them, and get lisp data structures back for simple data types. I think that could be useful in some applications, where it is easier to do parsing/analysis in Python, but you want to do something else that is easier in Lisp.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/16/Python-data-structures-to-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using the Scopus api with xml output]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/04/06/Using-the-Scopus-api-with-xml-output" />
    <id>http://jkitchin.github.io/blog/2015/04/06/Using-the-Scopus-api-with-xml-output</id>
    <updated>2015-04-06T09:35:57Z</updated>
    <published>2015-04-06T09:35:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="xml" />
    <category scheme="http://jkitchin.github.io/blog" term="scopus" />
    <summary type="html"><![CDATA[Using the Scopus api with xml output]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/04/06/Using-the-Scopus-api-with-xml-output"><![CDATA[


<p>
According to <a href="http://api.elsevier.com/documentation/AbstractRetrievalAPI.wadl">http://api.elsevier.com/documentation/AbstractRetrievalAPI.wadl</a> , the native form of the Scopus abstract document is xml, and the full abstract cannot always be represented  as json. So&#x2026; I am going to just bite the bullet and learn to deal with the xml. This is a companion post to <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/04/04/Making-highly-linked-bibliographies-from-the-Scopus-API/">http://kitchingroup.cheme.cmu.edu/blog/2015/04/04/Making-highly-linked-bibliographies-from-the-Scopus-API/</a> . Most of the code in this post gets tangled out to scopus_xml.py. I know it is not totally robust yet, but I have been using it for a lot of analysis, and it works pretty well so far.
</p>

<p>
This is another long post, with code that probably runs off screen. You can see the end result of what we do in this post here:  <a href="http://kitchingroup.cheme.cmu.edu/publications.html">http://kitchingroup.cheme.cmu.edu/publications.html</a> .
</p>


<p>
We start with a general function to return an xml elementtree. We build in some caching to avoid downloading things we already have; this is slow, and there are limits on how many times you can download.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">import</span> xml.etree.ElementTree <span style="color: #0000FF;">as</span> ET

<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_abstract_info</span>(EID, refresh=<span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'Get and save the json data for EID.'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">base</span> = <span style="color: #008000;">'scopus-xml/get_abstract_info'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> os.path.exists(base):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.makedirs(base)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">fname</span> = <span style="color: #008000;">'{0}/{1}'</span>.<span style="color: #006FE0;">format</span>(base, EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> os.path.exists(fname) <span style="color: #0000FF;">and</span> <span style="color: #0000FF;">not</span> refresh:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> ET.fromstring(f.read())

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Otherwise retrieve and save results</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">url</span> = (<span style="color: #008000;">"http://api.elsevier.com/content/abstract/eid/"</span> + EID + <span style="color: #008000;">'?view=META_ABS'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">resp</span> = requests.get(url,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/xml'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = ET.fromstring(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> results
</pre>
</div>

<p>
Next, we do some introspection to see what we have.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">results = get_abstract_info('2-s2.0-84896759135')</span>
<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">results = get_abstract_info('2-s2.0-84924911828')</span>
<span style="color: #BA36A5;">results</span> = get_abstract_info(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
<span style="color: #0000FF;">for</span> el <span style="color: #0000FF;">in</span> results:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> el.tag
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> el1 <span style="color: #0000FF;">in</span> el:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">'  --&gt;'</span>,el1.tag
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>
</pre>
</div>

{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata
  --> {http://prismstandard.org/namespaces/basic/2.0/}url
  --> {http://purl.org/dc/elements/1.1/}identifier
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}eid
  --> {http://prismstandard.org/namespaces/basic/2.0/}doi
  --> {http://purl.org/dc/elements/1.1/}title
  --> {http://prismstandard.org/namespaces/basic/2.0/}aggregationType
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}srctype
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}citedby-count
  --> {http://prismstandard.org/namespaces/basic/2.0/}publicationName
  --> {http://purl.org/dc/elements/1.1/}publisher
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}source-id
  --> {http://prismstandard.org/namespaces/basic/2.0/}issn
  --> {http://prismstandard.org/namespaces/basic/2.0/}volume
  --> {http://prismstandard.org/namespaces/basic/2.0/}startingPage
  --> {http://prismstandard.org/namespaces/basic/2.0/}endingPage
  --> {http://prismstandard.org/namespaces/basic/2.0/}pageRange
  --> {http://prismstandard.org/namespaces/basic/2.0/}coverDate
  --> {http://purl.org/dc/elements/1.1/}creator
  --> {http://purl.org/dc/elements/1.1/}description
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}link
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}link
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}link

{http://www.elsevier.com/xml/svapi/abstract/dtd}affiliation
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}affilname

{http://www.elsevier.com/xml/svapi/abstract/dtd}authors
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}author
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}author

<p>
Now, some examples for myself to see how to get things.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">results</span> = get_abstract_info(<span style="color: #008000;">'2-s2.0-84901638552'</span>)

<span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)

<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}srctype'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}source-id'</span>).text

<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">authors = results.find('./{http://www.elsevier.com/xml/svapi/abstract/dtd}authors')</span>
<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">for author in results.find('./{http://www.elsevier.com/xml/svapi/abstract/dtd}authors'):</span>
<span style="color: #8D8D84;">#    </span><span style="color: #8D8D84; font-style: italic;">print author.find('{http://www.elsevier.com/xml/ani/common}indexed-name').text</span>

<span style="color: #0000FF;">for</span> creator <span style="color: #0000FF;">in</span> coredata.find(<span style="color: #008000;">'{http://purl.org/dc/elements/1.1/}creator'</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> creator.attrib

<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://purl.org/dc/elements/1.1/}title'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}publicationName'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}volume'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}pageRange'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}coverDate'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}citedby-count'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}doi'</span>).text

<span style="color: #0000FF;">for</span> link <span style="color: #0000FF;">in</span> coredata.findall(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}link'</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> link.attrib[<span style="color: #008000;">'rel'</span>] == <span style="color: #008000;">'scopus'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> link.attrib[<span style="color: #008000;">'href'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> link.attrib[<span style="color: #008000;">'href'</span>]

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">alternative xpath to get the link</span>
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">"./{http://www.elsevier.com/xml/svapi/abstract/dtd}link/[@rel='scopus']"</span>).attrib[<span style="color: #008000;">'href'</span>]
</pre>
</div>

j
22746
{'auid': '55569461200', 'seq': '1'}
Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces
Catalysis Communications
52
60-64
2014-07-05
2
10.1016/j.catcom.2013.10.028
http://api.elsevier.com/content/abstract/scopus_id/84901638552
http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward
http://api.elsevier.com/content/search/scopus?query=refeid%282-s2.0-84901638552%29
http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward

<p>
That is basically it. In the next sections, we basically recreate the previous functions from scopus.py using the xml data.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Authors</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_author_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">authors</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}authors'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> authors <span style="color: #0000FF;">is</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'No authors found'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> author <span style="color: #0000FF;">in</span> authors:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">name</span> = author.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/ani/common}indexed-name'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">auid</span> = author.attrib[<span style="color: #008000;">'auid'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [<span style="color: #008000;">'&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId={0}"&gt;{1}&lt;/a&gt;'</span>.<span style="color: #006FE0;">format</span>(auid, name)]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">', '</span>.join(s)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_author_link(<span style="color: #008000;">'2-s2.0-84896759135'</span>)
<span style="color: #0000FF;">print</span> get_author_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>
<pre class="example">
&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=8724572500"&gt;Thompson R.L.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=22981503200"&gt;Shi W.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=6506329719"&gt;Albenze E.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=23004637900"&gt;Kusuma V.A.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=55676869000"&gt;Hopkinson D.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7003584159"&gt;Damodaran K.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=55005205100"&gt;Lee A.S.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7004212771"&gt;Kitchin J.R.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=6701399651"&gt;Luebke D.R.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=24081524800"&gt;Nulwala H.&lt;/a&gt;
&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=55569461200"&gt;Xu Z.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7004212771"&gt;Kitchin J.R.&lt;/a&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Journal</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_journal_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">journal</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}publicationName'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sid</span> = coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}source-id'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="http://www.scopus.com/source/sourceInfo.url?sourceId={sid}"&gt;{journal}&lt;/a&gt;'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(sid=sid, journal=journal)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_journal_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>
<pre class="example">
&lt;a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746"&gt;Catalysis Communications&lt;/a&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> DOI link</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_doi_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}doi'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> doi <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>: <span style="color: #BA36A5;">doi</span> = doi.text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="http://dx.doi.org/{doi}"&gt;doi:{doi}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(doi=doi)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_doi_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Abstract link</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_abstract_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">title</span> = coredata.find(<span style="color: #008000;">'{http://purl.org/dc/elements/1.1/}title'</span>).text.encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">link</span> = coredata.find(<span style="color: #008000;">"./{http://www.elsevier.com/xml/svapi/abstract/dtd}link/[@rel='scopus']"</span>).attrib[<span style="color: #008000;">'href'</span>].encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="{link}"&gt;{title}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(link=link, title=title)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_abstract_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Citation image</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_cite_img_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}doi'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> doi <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>: <span style="color: #BA36A5;">doi</span> = doi.text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;img src="http://api.elsevier.com/content/abstract/citation-count?doi={doi}&amp;httpAccept=image/jpeg&amp;apiKey={apikey}"&gt;&lt;/img&gt;'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(doi=doi, apikey=MY_API_KEY, cite_link=<span style="color: #D0372D;">None</span>)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_cite_img_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>
<img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Getting it all together</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_html_citation</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'{authors}, &lt;i&gt;{title}&lt;/i&gt;, {journal}, &lt;b&gt;{volume}{issue}&lt;/b&gt;, {pages}, ({year}), {doi}, {cites}.'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">issue</span> = <span style="color: #008000;">''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}issueIdentifier'</span>) <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">issue</span> = <span style="color: #008000;">'({})'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}issueIdentifier'</span>).text)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volume</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}volume'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> volume <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volume</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}volume'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volume</span> = <span style="color: #008000;">'None'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = <span style="color: #008000;">''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}pageRange'</span>) <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = <span style="color: #008000;">'p. '</span> + coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}pageRange'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}article-number'</span>) <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}article-number'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = <span style="color: #008000;">'no pages found'</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}coverDate'</span>).text

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(authors=get_author_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   title=get_abstract_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   journal=get_journal_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   volume=volume,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   issue=issue,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pages=pages,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   year=year,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   doi=get_doi_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   cites=get_cite_img_link(EID))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;ol&gt;'</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;li&gt;'</span>,get_html_citation(<span style="color: #008000;">'2-s2.0-84896759135'</span>),<span style="color: #008000;">'&lt;/li&gt;'</span>
<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;li&gt;'</span>,get_html_citation(<span style="color: #008000;">'2-s2.0-84924911828'</span>),<span style="color: #008000;">'&lt;/li&gt;'</span>
<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;li&gt;'</span>,get_html_citation(<span style="color: #008000;">'2-s2.0-84901638552'</span>),<span style="color: #008000;">'&lt;/li&gt;'</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;/ol&gt;'</span>
</pre>
</div>
<ol>
<li> <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=8724572500">Thompson R.L.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=22981503200">Shi W.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=6506329719">Albenze E.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=23004637900">Kusuma V.A.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55676869000">Hopkinson D.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7003584159">Damodaran K.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55005205100">Lee A.S.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=6701399651">Luebke D.R.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=24081524800">Nulwala H.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84896759135&origin=inward">Probing the effect of electron donation on CO2 absorbing 1,2,3-triazolide ionic liquids</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=21100199840">RSC Advances</a>, <b>4(25)</b>, p. 12748-12755, (2014-03-17), <a href="http://dx.doi.org/10.1039/c3ra47097k">doi:10.1039/c3ra47097k</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1039/c3ra47097k&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>. </li>

<li> <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84924911828&origin=inward">Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=28134">Journal of Chemical Physics</a>, <b>142(10)</b>, 104703, (2015-03-14), <a href="http://dx.doi.org/10.1063/1.4914093">doi:10.1063/1.4914093</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.4914093&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>. </li>

<li> <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746">Catalysis Communications</a>, <b>52</b>, p. 60-64, (2014-07-05), <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>. </li>
</ol>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Finally getting my documents</h2>
<div class="outline-text-2" id="text-7">
<p>
Here we get the EIDs from a search query. We use these in the next section to get a new bibliography.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY
<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://api.elsevier.com/content/search/scopus?query=AU-ID(7004212771)&amp;field=eid,aggregationType&amp;count=100"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #0000FF;">return</span> [[<span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'eid'</span>]), <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>])] <span style="color: #0000FF;">for</span> r <span style="color: #0000FF;">in</span> results[<span style="color: #008000;">'search-results'</span>][<span style="color: #008000;">"entry"</span>] <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>]) == <span style="color: #008000;">'Journal'</span>]
</pre>
</div>


<table id="my-eids" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">2-s2.0-84924911828</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84923164062</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84924778427</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84924130725</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84901638552</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84898934670</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84896759135</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84896380535</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84896585411</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84916613197</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84908637059</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84880986072</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84881394200</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84873706643</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84876703352</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84867809683</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84864914806</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84865730756</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84864592302</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84863684845</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84866142469</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84861127526</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-80052944171</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-80051809046</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-79953651013</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-79952860396</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77956568341</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77954747189</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77956693843</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77949916234</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77955464573</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-72049114200</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-73149124752</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-73149109096</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-67449106405</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-63649114440</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-60849113132</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-58649114498</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-40949100780</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-33750804660</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-20544467859</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-15744396507</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-9744261716</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-13444307808</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-3042820285</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-2942640180</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0142023762</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0141924604</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0037368024</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0037197884</td>
<td class="left">Journal</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> And my html bibliography</h2>
<div class="outline-text-2" id="text-8">
<p>
This generates my blog bibliography page..
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *

<span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY
<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://api.elsevier.com/content/search/scopus?query=AU-ID(7004212771)&amp;field=eid,aggregationType&amp;count=100"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #BA36A5;">data</span> = [[<span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'eid'</span>]), <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>])] <span style="color: #0000FF;">for</span> r <span style="color: #0000FF;">in</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   results[<span style="color: #008000;">'search-results'</span>][<span style="color: #008000;">"entry"</span>] <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>]) == <span style="color: #008000;">'Journal'</span>]


<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'../publications.html.mako'</span>, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'''&lt;%inherit file="_templates/site.mako" /&gt;</span>
<span style="color: #008000;">&lt;article class="page_box"&gt;</span>
<span style="color: #008000;">&lt;%self:filter chain="markdown"&gt;</span>

<span style="color: #008000;">&lt;h1&gt;Online collections of our work&lt;/h1&gt;</span>
<span style="color: #008000;">Pick your favorite:</span>
<span style="color: #008000;">&lt;ul&gt;</span>
<span style="color: #008000;">&lt;li&gt;&lt;a href="http://orcid.org/0000-0003-2625-9232"&gt;orcid:0000-0003-2625-9232&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="http://www.researcherid.com/rid/A-2363-2010"&gt;researcherid:A-2363-2010&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7004212771"&gt;scopusid:7004212771&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="https://scholar.google.com/citations?user=jD_4h7sAAAAJ"&gt;Google Scholar&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="https://www.researchgate.net/profile/John_Kitchin"&gt;Research Gate&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="https://www.growkudos.com/profiles/40205"&gt;Kudos&lt;/a&gt;&lt;/li&gt;</span>
<span style="color: #008000;">&lt;/ul&gt;</span>

<span style="color: #008000;">&lt;h1&gt;Publications&lt;/h1&gt;</span>
<span style="color: #008000;">The authors are linked to their Scopus page, the title linked to the Scopus abstract, the journal linked to the Scopus journal page, and the DOI is linked to http://dx.doi.org which normally redirects you to the journal page.</span>

<span style="color: #008000;">&lt;ol reversed="reversed"&gt;</span>
<span style="color: #008000;">'''</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> eid,<span style="color: #006FE0;">type</span> <span style="color: #0000FF;">in</span> data:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'&lt;li&gt;{}&lt;/li&gt;'</span>.<span style="color: #006FE0;">format</span>(get_html_citation(eid)))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'''&lt;/ol&gt;</span>

<span style="color: #008000;">&lt;/%self:filter&gt;</span>
<span style="color: #008000;">&lt;/article&gt;</span>
<span style="color: #008000;">'''</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> Summary</h2>
<div class="outline-text-2" id="text-9">
<p>
The XML format is not that intuitive to me. It takes some practice writing robust code, e.g. sometimes the find command does not find anything, and then there is not text attribute to get, so you should check for success on finding things. Also, some text is unicode, and you have to take care to encode it, which my library does not do uniformly. Finally, not all journals have things like volume or issue. My formatting code is not super flexible, so these bibliography entries show None in them occasionally. Still, it is not too bad, and this enables a lot of analysis of your publications, as well as displaying them in different ways. See the result of this page here: <a href="http://kitchingroup.cheme.cmu.edu/publications.html">http://kitchingroup.cheme.cmu.edu/publications.html</a> 
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/06/Using-the-Scopus-api-with-xml-output.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
