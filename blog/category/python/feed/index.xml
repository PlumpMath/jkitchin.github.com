<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Fri, 01 Apr 2016 17:58:41 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>More on Hy and why I think it is a big deal</title>
      <link>http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal</link>
      <pubDate>Thu, 31 Mar 2016 13:41:43 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">K3rprBTSYnrEBGagSwWNLrb8STo=</guid>
      <description>More on Hy and why I think it is a big deal</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Editing with hy-mode and lispy</a></li>
<li><a href="#sec-2">2. Python with no whitespace, or commas in lists</a></li>
<li><a href="#sec-3">3. No confusion in expressions in statements</a></li>
<li><a href="#sec-4">4. Proper multiline lambda functions</a></li>
<li><a href="#sec-5">5. Macros and Extensible syntax</a>
<ul>
<li><a href="#sec-5-1">5.1. Some math</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Interoperability with Python</a></li>
<li><a href="#sec-7">7. Integration of emacs and Hy</a></li>
<li><a href="#sec-8">8. Hypster and Hy Society.</a></li>
<li><a href="#sec-9">9. What do we still need?</a></li>
</ul>
</div>
</div>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/30/OMG-A-Lisp-that-runs-python/">Yesterday</a> I talked about <a href="https://github.com/hylang/hy">hylang</a> , a Lisp that basically compiles to and runs Python code. Today, I want to show a few reasons why this is a great idea, and an important one. Below I give a few examples of why the hylang approach is better (in my opinion of course) than Python with a few examples of things I have always wanted in Python but couldn't get.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Editing with hy-mode and lispy</h2>
<div class="outline-text-2" id="text-1">
<p>
There is a major mode for Hy: <a href="https://github.com/hylang/hy-mode">https://github.com/hylang/hy-mode</a> also on MELPA. It gives us some syntax highlighting and better access to a REPL.
</p>

<p>
Let's load lispy (<a href="https://github.com/abo-abo/lispy">https://github.com/abo-abo/lispy</a> ) for it so we also get amazing editing. I always wanted to use lispy style navigation and editing in Python, but the whitespace and indentation did not make it that easy. Problem solved with these. @abo-abo already added basic eval support for Hy to lispy since the post yesterday (<a href="https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c">https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c</a> ); Thanks!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-hook 'hy-mode-hook
          (<span style="color: #0000FF;">lambda</span> ()
            (lispy-mode 1)))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Python with no whitespace, or commas in lists</h2>
<div class="outline-text-2" id="text-2">
<p>
You can still use indentation (it is good style), but this works!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
(<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3) (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
(<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This looks nicer.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
  (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3)
    (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
    (<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This is a big deal too. Using Python in sessions in org-mode has always been a little complicated by the indentation and whitespace, especially with nested loops and functions. That problem is probably gone.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> No confusion in expressions in statements</h2>
<div class="outline-text-2" id="text-3">
<p>
In Python you can do this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 5
<span style="color: #0000FF;">print</span>(a)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
But not this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(a=5)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
  File "&lt;stdin&gt;", line 1
   print(a=5)
          ^
SyntaxError: invalid syntax
</pre>

<p>
You can't put assignment statements and expression statements anywhere you want, they are only legal syntax in some places. For example, a=5 above actually looks like the print function has an argument of a that set to 5. Not true in Lisp; there are only expressions! So this works fine.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">setv</span> a 5))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> a 5))
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
I just like this style of simple syntax.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Proper multiline lambda functions</h2>
<div class="outline-text-2" id="text-4">
<p>
Python syntax fundamentally limits you to one line lambdas. Not so for Hy. Let's use one in a filter to print even numbers. Here is an example with a two-liner but you could make them more complicated. In Python, you have to make a separate function for this. That isn't terrible, but if it is never used for anything else, it could be avoided.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="lambda">(<span style="color: #006FE0;">setv</span> a [0 1 2 3 4 5 6 7 8])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">display</span> [list filter]
  (<span style="color: #0000FF;">for</span> [x list] (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">filter</span> x) (<span style="color: #006FE0;">print</span> x))))

(display a (<span style="color: #0000FF;">lambda</span> [x]
             (<span style="color: #006FE0;">=</span> (<span style="color: #006FE0;">%</span> x 2) 0)))
</pre>
</div>

<pre class="example">
0
2
4
6
8
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Macros and Extensible syntax</h2>
<div class="outline-text-2" id="text-5">
<p>
It is not easy to get real macro (code expansion) behavior in Python. Yes, there are decorators, and closures, and related things that get close to it. But there are not lisp-like macros.
</p>

<p>
Here is a (too) simple macro to allow for infix notation. It only works for two arguments, but could be extended for multiple arguments.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">infix</span> [code]
  (<span style="color: #006FE0;">quasiquote</span> ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> (infix (1 + 1)))
</pre>
</div>
<pre class="example">
2
</pre>

<p>
If we want new syntax we can get it!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">$</span> [code]
  (<span style="color: #006FE0;">quasiquote</span>
   ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> #$(1 + 1))
</pre>
</div>

<pre class="example">
2
</pre>

<p>
Why is this nice? Here is a math example that shows why you might want to change syntax.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Some math</h3>
<div class="outline-text-3" id="text-5-1">
<p>
See <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/">http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/</a> for the Python version of solving the Bessel equation numerically. Here we do it with hylang.
</p>

<p>
Why would we want infix notation? Here is a good reason. The prefix notation is not easy to read. Compare:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">dzdx</span> = 1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
</pre>
</div>

<p>
The infix notation is simpler to read. Still, the code below is not that hard to figure out, especially if there was a generalized infix notation that allowed (with parens for explicit operation precedence):
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (nfx (1.0 / x**2) * ((-x * z) - ((x**2 - nu**2) * y))))
</pre>
</div>

<p>
So, here is the hylang equivalent to my previous Python version.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"hy-ode.png"</span>)
</pre>
</div>

<pre class="example">
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
None
</pre>


<div class="figure">
<p><img src="/media/2016-03-31-More-on-Hy-and-why-I-think-it-is-a-big-deal/hy-ode.png"> 
</p>
</div>

<p>
This looks really good to me, except for that prefix math. The array slice syntax is interesting. Not that obvious yet.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Interoperability with Python</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop">http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop</a> 
</p>

<p>
Write Hy code and use it in Python. Use Python code in Hy. Repeat. Sweet.
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Integration of emacs and Hy</h2>
<div class="outline-text-2" id="text-7">
<p>
This isn't so beautiful but it illustrates  a pretty awesome integration of Hy(python) into Emacs!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">hy</span> (body)
  `(<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
          (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
     (message (format <span style="color: #008000;">"code: %S"</span> ,body))
     (<span style="color: #0000FF;">with-temp-file</span> tempfile
       (mapc (<span style="color: #0000FF;">lambda</span> (form) (insert (format <span style="color: #008000;">"%s"</span> form))) ,body))
     (read (<span style="color: #0000FF;">unwind-protect</span>
               (shell-command-to-string
                (format <span style="color: #008000;">"hy %s"</span> tempfile))
             (delete-file tempfile)))))

(aref (<span style="color: #0000FF;">hy</span> '((import numpy)
            (setv a (numpy.array [1 2 3]))
            (setv b (numpy.array [1 2 3]))
            (print (* a b))))
      1)
</pre>
</div>

<pre class="example">
4
</pre>

<p>
This isn't perfect, and there are many ways it could break down. But if you are careful to make the output "read"able, you can literally embed Hy code in Emacs lisp and use the results, a total win for Science! I feel like it might need something like progn, but that would not change what this does dramatically.
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Hypster and Hy Society.</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://notes.pault.ag/hy-survival-guide/">http://notes.pault.ag/hy-survival-guide/</a> ROTFL. <b>ironically</b> of course ;)
</p>

<p>
And the <a href="https://twitter.com/hylang">@hylang</a> Twitter account is run by Hy Society. Nice.
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> What do we still need?</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li>Experience. Hy seems relatively young compared to other Lisps. It isn't clear yet if this could work like Python does at scale in research. I sure look forward to finding out though!
</li>
<li>Proper infix notation for engineering math. I could live with no operator precedence if it led to a quicker solution for now. As long as something like (1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)) is legal!
</li>
<li>A proper integration with org-mode and the REPL.
</li>
<li>Toolchains like emacs-lisp has. I just love those. Killer debugging, access to hyperlinked documentation, code navigation, &#x2026; Maybe integration with something like SLIME or CIDER? Hyder?
</li>
<li>Use it in a proper big project to find out where the limitations are, maybe Hycse as a companion to Pycse (<a href="http://kitchingroup.cheme.cmu.edu/pycse/">http://kitchingroup.cheme.cmu.edu/pycse/</a> )? or a rewrite of <a href="http://kitchingroup.cheme.cmu.edu/dft-book/">http://kitchingroup.cheme.cmu.edu/dft-book/</a> in Hy?
</li>
</ol>

<p>
Overall, I am pretty excited about this project. The syntax is a bit reminiscent of Clojure, and Racket, the former by design. Lots of new ideas still seem to be percolating in, so there is likely good stuff to see in the future!
</p>

<p>
I haven't used it enough to see the warts yet, but already the top issues I had with Python are largely addressed, so I see this as a way to continue progress with all the benefits of Python.
</p>

<img src="https://imgs.xkcd.com/comics/lisp_cycles.png">
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>OMG A Lisp that runs python</title>
      <link>http://jkitchin.github.io/blog/2016/03/30/OMG-A-Lisp-that-runs-python</link>
      <pubDate>Wed, 30 Mar 2016 17:10:17 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[lisp]]></category>
      <guid isPermaLink="false">dTe2pI6SbLTjMyWs8k1hagdJzL8=</guid>
      <description>OMG A Lisp that runs python</description>
      <content:encoded><![CDATA[



<p>
For a year now I have struggled with abandoning Python for Lisp. It's complicated, I have used Python for 15 years now, and have a lot of skill and knowledge in it. I have used emacs-lisp for about 5 years now, and have a far bit of skill with it too. They solve really different problems. Between the two, I find I <i>like</i> writing and editing elisp <b>lots</b> better than writing Python, except it lacks the scipy+numpy+matplotlib stack. I looked into Racket and Common Lisp, but they also don't really have that as nicely as Python does at the moment. It hit me earlier today that a Lisp that compiled to Python might be the right middle ground. I had seen this project Hy (<a href="http://docs.hylang.org/en/latest/quickstart.html">http://docs.hylang.org/en/latest/quickstart.html</a> ) earlier, but didn't connect the dots to this.
</p>

<p>
Let me do that here. First, an obligatory execute function to run org-mode code blocks.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))
    (<span style="color: #0000FF;">unwind-protect</span>
        (shell-command-to-string
         (format <span style="color: #008000;">"hy %s"</span> tempfile))
      (delete-file tempfile))))
</pre>
</div>

<pre class="example">
org-babel-execute:hy
</pre>

<p>
Now the basic Hello world example. It looks like lisp.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Now for a use that looks like Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">numpy</span>)
(<span style="color: #006FE0;">setv</span> a (numpy.array [1 2 3]))
(<span style="color: #006FE0;">setv</span> b (numpy.array [1 2 3]))
(<span style="color: #006FE0;">print</span> (numpy.dot a b))
</pre>
</div>

<pre class="example">
14
</pre>

<p>
WHAT!!!!
</p>

<p>
A simple plot? Surely it can't be so easy&#x2026;
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])
(plt.plot [1 2 4 8])
(plt.xlabel <span style="color: #008000;">"x"</span>)
(plt.ylabel <span style="color: #008000;">"y"</span>)
(plt.savefig <span style="color: #008000;">"hy-test.png"</span>)
</pre>
</div>

<pre class="example">
2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
</pre>


<div class="figure">
<p><img src="/media/2016-03-30-OMG-A-Lisp-that-runs-python/hy-test.png"> 
</p>
</div>

<p>
Wow. I am not sure what the warnings are, I seem to get them on my Mac for some reason. How about solving an equation?
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [scipy.optimize [fsolve]])
(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">objective</span> [x] (<span style="color: #006FE0;">-</span> 2 x))
(<span style="color: #006FE0;">print</span> (fsolve objective -1))
</pre>
</div>

<pre class="example">
[ 2.]
</pre>


<pre class="example">
     _.-^^---....,,--
 _--                  --_
&lt;                        &gt;)
|                         |
 \._                   _./
    ```--. . , ; .--'''
          | |   |
       .-=||  | |=-.
       `-=#$%&amp;%$#=-'
          | ;  :|
 _____.,-#%&amp;$@%#&amp;#~,._____
       _---~~(~~-_.
     _{        )   )
   ,   ) -~~- ( ,-' )_
  (  `-,_..`., )-- '_,)
 ( ` _)  (  -~( -_ `,  }
 (_-  _  ~_-~~~~`,  ,' )  &lt;---- My brain right now...
   `~ -^(    __;-,((()))
         ~~~~ {_ -_(())
                `\  }
                  { }
</pre>

<p>
I may not be able to sleep tonight&#x2026;
</p>

<p>
Ascii art courtesy of <a href="http://chris.com/ascii/index.php?art=people/body%20parts/brains">http://chris.com/ascii/index.php?art=people/body%20parts/brains</a> and <a href="http://www.ascii-code.com/ascii-art/weapons/explosives.php">http://www.ascii-code.com/ascii-art/weapons/explosives.php</a> .</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/30/OMG-A-Lisp-that-runs-python.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Pycse is now using Python3</title>
      <link>http://jkitchin.github.io/blog/2016/02/25/Pycse-is-now-using-Python3</link>
      <pubDate>Thu, 25 Feb 2016 19:09:20 EST</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">kT-farz1aZTDbZpGySI59s7xv1Q=</guid>
      <description>Pycse is now using Python3</description>
      <content:encoded><![CDATA[


<p>
I spent the last couple of days going through the notes for <a href="http://kitchingroup.cheme.cmu.edu/pycse">pycse</a> and updating it for Python 3! If you aren't familiar with pycse, it is an acronym for Python3 Calculations in Science and Engineering, and it is about 400 pages of examples spanning scientific and engineering computations, and a python module that extends numpy/scipy with some functions for adding events to differential equation solvers, and regression with confidence intervals.
</p>

<p>
It is mostly done, and was pretty easy. The Python module for pycse
(<a href="http://github.com/jkitchin/pycse">http://github.com/jkitchin/pycse</a> ) should also be Python 3 compliant. Yep, on my
Mac I have switched over to the Anaconda Python 3 from Continuum IO (thanks for
that!).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> sys
<span style="color: #0000FF;">print</span>(sys.version)
</pre>
</div>

<pre class="example">
3.5.1 |Anaconda 2.5.0 (x86_64)| (default, Dec  7 2015, 11:24:55)
[GCC 4.2.1 (Apple Inc. build 5577)]
</pre>

<p>
Now we can succinctly do matrix multiplication like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #BA36A5;">a</span> = np.array([1, 2, 3])
<span style="color: #BA36A5;">a</span> = np.array([1, 2, 3])
<span style="color: #0000FF;">print</span>(a @ a)  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the matrix multiplication operator</span>

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">instead of</span>
<span style="color: #0000FF;">print</span>(np.dot(a, a))
</pre>
</div>

<pre class="example">
14
14
</pre>

<p>
Here is a summary of what the changes to the Python2 version of Pycse entailed.
</p>

<ol class="org-ol">
<li>Change all print statements to print functions. There were so many&#x2026;
</li>
<li>Eliminate use of tabs in some code blocks, Python3 is not flexible on that.
</li>
</ol>

<p>
I wrote this function to fix both of these for me (I use Emacs as my editor), which worked nicely:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">fp</span> ()
  <span style="color: #036A07;">"convert print to print() allowing for line end comments. does not do multiline.</span>
<span style="color: #036A07;">and untabify"</span>
  (<span style="color: #0000FF;">interactive</span>)
  (beginning-of-line)
  (re-search-forward <span style="color: #008000;">"print "</span> (line-end-position) t)
  (delete-char -1)
  (insert <span style="color: #008000;">"("</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">rm spaces</span>
  (delete-forward-char
   (<span style="color: #0000FF;">save-excursion</span>
     (skip-chars-forward <span style="color: #008000;">" "</span>)))
  (<span style="color: #0000FF;">when</span>
      (re-search-forward <span style="color: #008000;">"#"</span> (line-end-position) 'move)
    (goto-char (match-beginning 0)))
  (skip-chars-backward <span style="color: #008000;">" "</span>)
  (insert <span style="color: #008000;">")"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">untabify</span>
  (<span style="color: #0000FF;">let</span> ((src (org-element-context)))
    (untabify (org-element-property <span style="color: #006FE0;">:begin</span> src)
              (org-element-property <span style="color: #006FE0;">:end</span> src))))
</pre>
</div>

<ol class="org-ol">
<li>reduce no longer exists, you have to use functools.reduce. Probably will not affect me much&#x2026;
</li>
<li>Strings are sometimes bytes, and need to be encoded/decoded depending on what you are doing.
</li>
</ol>

<p>
Otherwise, most things seemed to work fine. In a few places I had articles on Windows specific code, which I couldn't test on the Mac I work on now. Only one package was apparently not ready for Python3, and that was scimath from Enthought, which had units capability. Quantities worked fine though.
</p>

<p>
For some reason I could not do interactive key-presses in matplotlib. I am not sure if that is a Python3, or my Mac setup for now.
</p>

<p>
When I first wrote the Pycse book (in org-mode naturally), I must have had a default session setup for org-mode, because there was no :session information in a few of the src-block headers. I had to add these back in a few places.
</p>

<p>
Overall the transition was pretty seamless. It looks like I will be transitioning to Python3 in teaching this fall! Big thanks to the Anaconda team for packaging Python 3.5 and making it so easy to install!
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/02/25/Pycse-is-now-using-Python3.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Generating an alphabetized list of collaborators from the past five years</title>
      <link>http://jkitchin.github.io/blog/2016/02/20/Generating-an-alphabetized-list-of-collaborators-from-the-past-five-years</link>
      <pubDate>Sat, 20 Feb 2016 17:03:13 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[scopus]]></category>
      <guid isPermaLink="false">WVonYueoa2xWOB8KM-9Z-g7CEqg=</guid>
      <description>Generating an alphabetized list of collaborators from the past five years</description>
      <content:encoded><![CDATA[


<p>
Almost every proposal I write requires some list of my coauthors from the past several years. Some want the list alphabetized, and some want affiliations too. It has always bothered me to make this list, mostly because it is tedious, and it seems like something that should not be hard to generate. It turns out it is not too hard. I have been developing a Python interface ((<a href="https://github.com/jkitchin/scopus">https://github.com/jkitchin/scopus</a> )) to <a href="http://scopus.com">Scopus</a> that more or less enables me to script this.
</p>

<p>
Scopus is not free. You need either a license, or institutional access to use it. Here is the strategy to generate my list of coauthors. First, we need to get the articles for the past 5 years that are mine, and for each paper we get the coauthors. I use my Scopus author id in the query, and then sort the names alphabetically into a table. Then, I use that table as input to a second code block that does an author query in Scopus to get the current affiliations. Here is the code.
</p>

<div class="org-src-container">

<pre class="src src-python" id="coauthors"><span style="color: #0000FF;">from</span> scopus.scopus_api <span style="color: #0000FF;">import</span> ScopusAbstract
<span style="color: #0000FF;">from</span> scopus.scopus_search <span style="color: #0000FF;">import</span> ScopusSearch

<span style="color: #BA36A5;">s</span> = ScopusSearch(<span style="color: #008000;">'AU-ID(7004212771) AND PUBYEAR &gt; 2010'</span>)

<span style="color: #BA36A5;">coauthors</span> = {}
<span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> s.EIDS:
    <span style="color: #BA36A5;">ab</span> = ScopusAbstract(eid)
    <span style="color: #0000FF;">for</span> au <span style="color: #0000FF;">in</span> ab.authors:
        <span style="color: #0000FF;">if</span> au.auid <span style="color: #0000FF;">not</span> <span style="color: #0000FF;">in</span> coauthors <span style="color: #0000FF;">and</span> au.auid != <span style="color: #008000;">'7004212771'</span>:
            <span style="color: #BA36A5;">coauthors</span>[au.auid] = au.indexed_name

<span style="color: #0000FF;">return</span> <span style="color: #006FE0;">sorted</span>([[auid, name] <span style="color: #0000FF;">for</span> auid,name <span style="color: #0000FF;">in</span> coauthors.items()], key=<span style="color: #0000FF;">lambda</span> x:x[1])
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="right">52463103500</td>
<td class="left">Akhade S.A.</td>
</tr>

<tr>
<td class="right">6506329719</td>
<td class="left">Albenze E.</td>
</tr>

<tr>
<td class="right">36472906200</td>
<td class="left">Alesi W.R.</td>
</tr>

<tr>
<td class="right">56963752500</td>
<td class="left">Anna S.L.</td>
</tr>

<tr>
<td class="right">56522803500</td>
<td class="left">Boes J.R.</td>
</tr>

<tr>
<td class="right">26433085700</td>
<td class="left">Calle-Vallejo F.</td>
</tr>

<tr>
<td class="right">54973276000</td>
<td class="left">Chao R.</td>
</tr>

<tr>
<td class="right">7201800897</td>
<td class="left">Collins T.J.</td>
</tr>

<tr>
<td class="right">54883867200</td>
<td class="left">Curnan M.T.</td>
</tr>

<tr>
<td class="right">7003584159</td>
<td class="left">Damodaran K.</td>
</tr>

<tr>
<td class="right">55328415000</td>
<td class="left">Demeter E.L.</td>
</tr>

<tr>
<td class="right">37005464900</td>
<td class="left">Dsilva C.</td>
</tr>

<tr>
<td class="right">18037364800</td>
<td class="left">Egbebi A.</td>
</tr>

<tr>
<td class="right">35603120700</td>
<td class="left">Eslick J.C.</td>
</tr>

<tr>
<td class="right">56673468200</td>
<td class="left">Fan Q.</td>
</tr>

<tr>
<td class="right">24404182600</td>
<td class="left">Frenkel A.I.</td>
</tr>

<tr>
<td class="right">35514271900</td>
<td class="left">Gellman A.J.</td>
</tr>

<tr>
<td class="right">12803603300</td>
<td class="left">Gerdes K.</td>
</tr>

<tr>
<td class="right">54585146800</td>
<td class="left">Gumuslu G.</td>
</tr>

<tr>
<td class="right">55569145100</td>
<td class="left">Hallenbeck A.P.</td>
</tr>

<tr>
<td class="right">24316829300</td>
<td class="left">Hansen H.A.</td>
</tr>

<tr>
<td class="right">56009239000</td>
<td class="left">Hilburg S.L.</td>
</tr>

<tr>
<td class="right">55676869000</td>
<td class="left">Hopkinson D.</td>
</tr>

<tr>
<td class="right">56674328100</td>
<td class="left">Illes S.M.</td>
</tr>

<tr>
<td class="right">23479647900</td>
<td class="left">Inoglu N.G.</td>
</tr>

<tr>
<td class="right">6603398169</td>
<td class="left">Jaramillo T.F.</td>
</tr>

<tr>
<td class="right">8054222900</td>
<td class="left">Joshi Y.V.</td>
</tr>

<tr>
<td class="right">47962378000</td>
<td class="left">Keturakis C.</td>
</tr>

<tr>
<td class="right">57056061900</td>
<td class="left">Kondratyuk P.</td>
</tr>

<tr>
<td class="right">55391991800</td>
<td class="left">Kondratyuk P.</td>
</tr>

<tr>
<td class="right">7006205398</td>
<td class="left">Koper M.T.M.</td>
</tr>

<tr>
<td class="right">23004637900</td>
<td class="left">Kusuma V.A.</td>
</tr>

<tr>
<td class="right">35787409400</td>
<td class="left">Landon J.</td>
</tr>

<tr>
<td class="right">55005205100</td>
<td class="left">Lee A.S.</td>
</tr>

<tr>
<td class="right">6701399651</td>
<td class="left">Luebke D.R.</td>
</tr>

<tr>
<td class="right">35491189200</td>
<td class="left">Man I.C.</td>
</tr>

<tr>
<td class="right">27467500000</td>
<td class="left">Mantripragada H.</td>
</tr>

<tr>
<td class="right">55373026900</td>
<td class="left">Mao J.X.</td>
</tr>

<tr>
<td class="right">55210428500</td>
<td class="left">Marks A.</td>
</tr>

<tr>
<td class="right">27667815700</td>
<td class="left">Martinez J.I.</td>
</tr>

<tr>
<td class="right">56071079300</td>
<td class="left">Mehta P.</td>
</tr>

<tr>
<td class="right">56673592900</td>
<td class="left">Michael J.D.</td>
</tr>

<tr>
<td class="right">55772901000</td>
<td class="left">Miller D.C.</td>
</tr>

<tr>
<td class="right">7501599910</td>
<td class="left">Miller J.B.</td>
</tr>

<tr>
<td class="right">26032231600</td>
<td class="left">Miller S.D.</td>
</tr>

<tr>
<td class="right">35576929100</td>
<td class="left">Morreale B.</td>
</tr>

<tr>
<td class="right">55308251800</td>
<td class="left">Munprom R.</td>
</tr>

<tr>
<td class="right">14036290400</td>
<td class="left">Myers C.R.</td>
</tr>

<tr>
<td class="right">7007042214</td>
<td class="left">Norskov J.K.</td>
</tr>

<tr>
<td class="right">24081524800</td>
<td class="left">Nulwala H.B.</td>
</tr>

<tr>
<td class="right">56347288000</td>
<td class="left">Petrova R.</td>
</tr>

<tr>
<td class="right">7006208748</td>
<td class="left">Pushkarev V.V.</td>
</tr>

<tr>
<td class="right">56591664500</td>
<td class="left">Raman S.</td>
</tr>

<tr>
<td class="right">7004217247</td>
<td class="left">Resnik K.P.</td>
</tr>

<tr>
<td class="right">47962694800</td>
<td class="left">Richard Alesi Jr. W.</td>
</tr>

<tr>
<td class="right">9742604300</td>
<td class="left">Rossmeisl J.</td>
</tr>

<tr>
<td class="right">7201763336</td>
<td class="left">Rubin E.S.</td>
</tr>

<tr>
<td class="right">6602471339</td>
<td class="left">Sabolsky E.M.</td>
</tr>

<tr>
<td class="right">7004541416</td>
<td class="left">Salvador P.A.</td>
</tr>

<tr>
<td class="right">22981503200</td>
<td class="left">Shi W.</td>
</tr>

<tr>
<td class="right">55885836600</td>
<td class="left">Siefert N.S.</td>
</tr>

<tr>
<td class="right">25224517700</td>
<td class="left">Su H.-Y.</td>
</tr>

<tr>
<td class="right">57016792200</td>
<td class="left">Thirumalai H.</td>
</tr>

<tr>
<td class="right">8724572500</td>
<td class="left">Thompson R.L.</td>
</tr>

<tr>
<td class="right">8238710700</td>
<td class="left">Vasic R.</td>
</tr>

<tr>
<td class="right">37081979100</td>
<td class="left">Versteeg P.</td>
</tr>

<tr>
<td class="right">7006804734</td>
<td class="left">Wachs I.E.</td>
</tr>

<tr>
<td class="right">6701692232</td>
<td class="left">Washburn N.R.</td>
</tr>

<tr>
<td class="right">56542538800</td>
<td class="left">Watkins J.D.</td>
</tr>

<tr>
<td class="right">55569461200</td>
<td class="left">Xu Z.</td>
</tr>

<tr>
<td class="right">56424861600</td>
<td class="left">Yin C.</td>
</tr>

<tr>
<td class="right">56969809500</td>
<td class="left">Zhou X.</td>
</tr>
</tbody>
</table>

<p>
It is worth inspecting this list for duplicates. I see at least two duplicates. That is a limitation of almost every indexing service I have seen. Names are hard to disambiguate. I will live with it. Now, we will use another query to get affiliations, and the names. Since we use a sorted list from above, these names are in alphabetical order. We exclude co-authors from Carnegie Mellon University since these are often my students, or colleagues, and they are obvious conflicts of interest for proposal reviewing anyway. I split the current affiliation on a comma, since it appears the institution comes first, followed by the department. We only need an institution here.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus.scopus_author <span style="color: #0000FF;">import</span> ScopusAuthor

<span style="color: #BA36A5;">coauthors</span> = [ScopusAuthor(auid) <span style="color: #0000FF;">for</span> auid, name <span style="color: #0000FF;">in</span> data]

<span style="color: #0000FF;">print</span>(<span style="color: #008000;">', '</span>.join([<span style="color: #008000;">'{0} ({1})'</span>.<span style="color: #006FE0;">format</span>(au.name, au.current_affiliation.split(<span style="color: #008000;">','</span>)[0])
                 <span style="color: #0000FF;">for</span> au <span style="color: #0000FF;">in</span> coauthors
                 <span style="color: #0000FF;">if</span> au.current_affiliation.split(<span style="color: #008000;">','</span>)[0] != <span style="color: #008000;">'Carnegie Mellon University'</span>]))
</pre>
</div>

<pre class="example">
Sneha A. Akhade (Pennsylvania State University), Erik J. Albenze (National Energy Technology Laboratory), Federico Calle-Vallejo (Leiden Institute of Chemistry), Robin Chao (National Energy Technology Laboratory), Krishnan V. Damodaran (University of Pittsburgh), Carmeline J. Dsilva (Princeton University), Adefemi A. Egbebi (URS), John C. Eslick (National Energy Technology Laboratory), Anatoly I. Frenkel (Yeshiva University), Kirk R. Gerdes (National Energy Technology Laboratory), Heine Anton Hansen (Danmarks Tekniske Universitet), David P. Hopkinson (National Energy Technology Laboratory), Thomas Francisco Jaramillo (Fermi National Accelerator Laboratory), Yogesh V. Joshi (Exxon Mobil Research and Engineering), Christopher J. Keturakis (Lehigh University), Marc T M Koper (Leiden Institute of Chemistry), Victor A. Kusuma (National Energy Technology Laboratory), James Landon (University of Kentucky), David R. Luebke (Liquid Ion Solutions), Isabelacostinela Man (Universitatea din Bucuresti), James X. Mao (University of Pittsburgh), José Ignacio Martínez (CSIC - Instituto de Ciencia de Materiales de Madrid (ICMM)), David C M Miller (National Energy Technology Laboratory), Bryan D. Morreale (National Energy Technology Laboratory), Christina R. Myers (National Energy Technology Laboratory), Jens Kehlet Nørskov (Stanford Linear Accelerator Center), Rumyana V. Petrova (International Iberian Nanotechnology Laboratory), Vladimir V. Pushkarev (Dow Corning Corporation), Sumathy Raman (Exxon Mobil Research and Engineering), Kevin P. Resnik (URS), Walter Richard Alesi (National Energy Technology Laboratory), Jan Rossmeisl (Kobenhavns Universitet), Edward M. Sabolsky (West Virginia University), Wei Shi (University of Pittsburgh), Nicholas S. Siefert (National Energy Technology Laboratory), Haiyan Su (Dalian Institute of Chemical Physics Chinese Academy of Sciences), Robert Lee Thompson (University of Pittsburgh Medical Center), Relja Vasić (SUNY College of Nanoscale Science and Engineering), Israel E. Wachs (Lehigh University), John D. Watkins (National Energy Technology Laboratory), Chunrong Yin (United States Department of Energy), Xu Zhou (Liquid Ion Solutions)
</pre>

<p>
This is pretty sweet. I could pretty easily create a query that had all the PIs on a proposal, and alphabetize everyone's coauthors, or print them to a CSV file for import to Excel, or whatever format is required for conflict of interest reporting. The list is not perfect, but it is easy to manually fix it here.
</p>

<p>
That little bit of code is wrapped in a command-line utility in the scopus Python package. You use it like this. Just run it every time you need an updated list of coauthors! It isn't super flexible for now, e.g. excluding multiple affiliations, including multiple authors, etc&#x2026; isn't fully supported.
</p>

<div class="org-src-container">

<pre class="src src-sh">./scopus_coauthors 7004212771 2010 --exclude-affiliation=<span style="color: #008000;">"Carnegie Mellon University"</span>
</pre>
</div>

<pre class="example">
Sneha A. Akhade (Pennsylvania State University), Erik J. Albenze (National Energy Technology Laboratory), Federico Calle-Vallejo (Leiden Institute of Chemistry), Robin Chao (National Energy Technology Laboratory), Krishnan V. Damodaran (University of Pittsburgh), Carmeline J. Dsilva (Princeton University), Adefemi A. Egbebi (URS), John C. Eslick (National Energy Technology Laboratory), Anatoly I. Frenkel (Yeshiva University), Kirk R. Gerdes (National Energy Technology Laboratory), Heine Anton Hansen (Danmarks Tekniske Universitet), David P. Hopkinson (National Energy Technology Laboratory), Thomas Francisco Jaramillo (Fermi National Accelerator Laboratory), Yogesh V. Joshi (Exxon Mobil Research and Engineering), Christopher J. Keturakis (Lehigh University), Marc T M Koper (Leiden Institute of Chemistry), Victor A. Kusuma (National Energy Technology Laboratory), James Landon (University of Kentucky), David R. Luebke (Liquid Ion Solutions), Isabelacostinela Man (Universitatea din Bucuresti), James X. Mao (University of Pittsburgh), José Ignacio Martínez (CSIC - Instituto de Ciencia de Materiales de Madrid (ICMM)), David C M Miller (National Energy Technology Laboratory), Bryan D. Morreale (National Energy Technology Laboratory), Christina R. Myers (National Energy Technology Laboratory), Jens Kehlet Nørskov (Stanford Linear Accelerator Center), Rumyana V. Petrova (International Iberian Nanotechnology Laboratory), Vladimir V. Pushkarev (Dow Corning Corporation), Sumathy Raman (Exxon Mobil Research and Engineering), Kevin P. Resnik (URS), Walter Richard Alesi (National Energy Technology Laboratory), Jan Rossmeisl (Kobenhavns Universitet), Edward M. Sabolsky (West Virginia University), Wei Shi (University of Pittsburgh), Nicholas S. Siefert (National Energy Technology Laboratory), Haiyan Su (Dalian Institute of Chemical Physics Chinese Academy of Sciences), Robert Lee Thompson (University of Pittsburgh Medical Center), Relja Vasić (SUNY College of Nanoscale Science and Engineering), Israel E. Wachs (Lehigh University), John D. Watkins (National Energy Technology Laboratory), Chunrong Yin (United States Department of Energy), Xu Zhou (Liquid Ion Solutions)
</pre>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/02/20/Generating-an-alphabetized-list-of-collaborators-from-the-past-five-years.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Interactive figures in blog posts with mpld3</title>
      <link>http://jkitchin.github.io/blog/2016/02/08/Interactive-figures-in-blog-posts-with-mpld3</link>
      <pubDate>Mon, 08 Feb 2016 07:33:23 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[plotting]]></category>
      <category><![CDATA[interactive]]></category>
      <guid isPermaLink="false">1CrAIWaPYEtSGBHf15JTbQbHCHI=</guid>
      <description>Interactive figures in blog posts with mpld3</description>
      <content:encoded><![CDATA[



<p>
Continuing the exploration of interactive figures, today we consider the Python plotting library <a href="http://mpld3.github.io/index.html">mpld3</a> . We will again use our own published data. We wrote this great paper on core level shifts (CLS) in Cu-Pd alloys <a class='org-ref-reference' href="#boes-2015-core-cu">boes-2015-core-cu</a>. I want an interactive figure that shows the name of the calculation on each point as a tooltip. This data is all stored in the supporting information file, and you can see how we use it <a href="#sec-1">here</a>. This figure shows how the core level shift of a Cu atom changes depending on the number of nearest neighbor Cu atoms. Just hover your mouse over a point to see the name and CLS for that point.
</p>



<style>

</style>

<div id="fig_el8116045214667689201799167"></div>
<script>
function mpld3_load_lib(url, callback){
  var s = document.createElement('script');
  s.src = url;
  s.async = true;
  s.onreadystatechange = s.onload = callback;
  s.onerror = function(){console.warn("failed to load library " + url);};
  document.getElementsByTagName("head")[0].appendChild(s);
}

if(typeof(mpld3) !== "undefined" && mpld3._mpld3IsLoaded){
   // already loaded: just create the figure
   !function(mpld3){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

       mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
   }(mpld3);
}else if(typeof define === "function" && define.amd){
   // require.js is available: use it to load d3/mpld3
   require.config({paths: {d3: "https://mpld3.github.io/js/d3.v3.min"}});
   require(["d3"], function(d3){
      window.d3 = d3;
      mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

         mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
      });
    });
}else{
    // require.js not available: dynamically load d3 & mpld3
    mpld3_load_lib("https://mpld3.github.io/js/d3.v3.min.js", function(){
         mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

                 mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
            })
         });
}
</script>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-17D73543-F528-459D-95EF-B3AB3C4EEDC7" name="ID-17D73543-F528-459D-95EF-B3AB3C4EEDC7"></a><span class="section-number-2">1</span> Data and code</h2>
<div class="outline-text-2" id="text-1">
<p>
You can check out our preprint at <a href="https://github.com/KitchinHUB/kitchingroup-51">https://github.com/KitchinHUB/kitchingroup-51</a> .  We are going to adapt the code to make Figure 6a in the manuscript interactive. The code needed a somewhat surprising amount of adaptation. Apparently the ase database interface has changed a lot since we write that paper, so the code here looks a bit different than what we published. The biggest difference is due to name-mangling so each key that started with a number now starts with _, and and periods are replaced by _ also. The rest of the script is nearly unchanged. At the end is the very small bit of mpld3 code that generates the figure for html. We will add tooltips onto datapoints to indicate what the name associated with each data point is. Here is the code.
</p>

<div class="org-src-container">

<pre class="src src-python" id="mpld3-figure"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> ase.db <span style="color: #0000FF;">import</span> connect

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">loads the ASE database and select certain keywords</span>
<span style="color: #BA36A5;">db</span> = connect(<span style="color: #008000;">'~/Desktop/cappa/kitchingroup-51/supporting-information/data.json'</span>)

<span style="color: #BA36A5;">keys</span> = [<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>, <span style="color: #008000;">'ensam'</span>]

<span style="color: #BA36A5;">CLS</span>, <span style="color: #BA36A5;">IMP</span>, <span style="color: #BA36A5;">labels</span> = [], [], []
<span style="color: #0000FF;">for</span> k <span style="color: #0000FF;">in</span> db.select(keys + [<span style="color: #008000;">'_1cl'</span>]):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">name</span> = k.keywords[-2]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">Cu0</span> = db.select(<span style="color: #008000;">'bcc,GS,_72atom,_0cl,_1_00Cu'</span>).<span style="color: #006FE0;">next</span>().energy
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">Cu1</span> = db.select(<span style="color: #008000;">'bcc,GS,_72atom,_1cl,_1_00Cu'</span>).<span style="color: #006FE0;">next</span>().energy
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x0</span> = db.select(<span style="color: #008000;">','</span>.join(keys + [name, <span style="color: #008000;">'_0cl'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x1</span> = k.energy

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cls0</span> = x0 - Cu0
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cls1</span> = x1 - Cu1

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   IMP.append(<span style="color: #006FE0;">int</span>(name[1]))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   CLS.append(cls1 - cls0)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">labels</span> += [<span style="color: #008000;">'{0} ({1}, {2})'</span>.<span style="color: #006FE0;">format</span>(name, <span style="color: #006FE0;">int</span>(name[1]), cls1 - cls0)]

<span style="color: #BA36A5;">Cu0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">Cu1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">x0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_1'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">x1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_1'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">cls0</span> = x0 - Cu0
<span style="color: #BA36A5;">cls1</span> = x1 - Cu1

IMP.append(1)
CLS.append(cls1 - cls0)
<span style="color: #BA36A5;">labels</span> += [<span style="color: #008000;">'(1, {0})'</span>.<span style="color: #006FE0;">format</span>(cls1 - cls0)]

<span style="color: #BA36A5;">Cu0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">Cu1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_72atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_1_00Cu'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">x0</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_0cl'</span>, <span style="color: #008000;">'_0'</span>])).<span style="color: #006FE0;">next</span>().energy
<span style="color: #BA36A5;">x1</span> = db.select(<span style="color: #008000;">','</span>.join([<span style="color: #008000;">'bcc'</span>, <span style="color: #008000;">'GS'</span>, <span style="color: #008000;">'_54atom'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'_1cl'</span>, <span style="color: #008000;">'_0'</span>])).<span style="color: #006FE0;">next</span>().energy

<span style="color: #BA36A5;">cls0</span> = x0 - Cu0
<span style="color: #BA36A5;">cls1</span> = x1 - Cu1

IMP.append(0)
CLS.append(cls1 - cls0)
<span style="color: #BA36A5;">labels</span> += [<span style="color: #008000;">'(0, {0})'</span>.<span style="color: #006FE0;">format</span>(cls1 - cls0)]

<span style="color: #BA36A5;">fig</span> = plt.figure()

<span style="color: #BA36A5;">p</span> = plt.scatter(IMP, CLS, c=<span style="color: #008000;">'g'</span>, marker=<span style="color: #008000;">'o'</span>, s=25)
<span style="color: #BA36A5;">ax1</span> = plt.gca()
ax1.set_ylim(-1.15, -0.6)
ax1.set_xlim(-0.1, 5.1)

ax1.set_xlabel(<span style="color: #008000;">'# Cu Nearest neighbors'</span>)
ax1.set_ylabel(<span style="color: #008000;">'Cu 2p(3/2) Core Level Shift (eV)'</span>)

ax1.set_title(<span style="color: #008000;">'Hover over a point to see the calculation name'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Now the mpld3 stuff.</span>
<span style="color: #0000FF;">import</span> mpld3
<span style="color: #0000FF;">from</span> mpld3 <span style="color: #0000FF;">import</span> plugins

<span style="color: #BA36A5;">tooltip</span> = plugins.PointHTMLTooltip(p, labels, voffset=0, hoffset=10)
plugins.connect(fig, tooltip)

<span style="color: #0000FF;">print</span> mpld3.fig_to_html(fig)
</pre>
</div>

<p>
I like this workflow pretty well. It seems less functional than plotly and Bokeh (e.g. it does not look like it you can export the data from the html here), but it is well integrated with Matplotlib, with my blogging style, and does not require a server, oran account. The code outputs html that is self-contained in the body of the html. The smooth integration with Matplotlib means I could have static images in org-mode, and dynamic images in HTML potentially. Overall, this is a nice tool for making interactive plots in blog posts.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> References</h2>
<div class="outline-text-2" id="text-2">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="boes-2015-core-cu">[boes-2015-core-cu] Jacob Boes, Peter Kondratyuk, Chunrong Yin, James, Miller, Andrew Gellman & John Kitchin, Core Level Shifts in Cu-Pd Alloys As a Function of Bulk  Composition and Structure, <i>Surface Science</i>, <b>640</b>, 127-132 (2015). <a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">link</a>. <a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">doi</a>.</a></li>
</ul></p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/08/Interactive-figures-in-blog-posts-with-mpld3.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Interactive Bokeh plots in HTML</title>
      <link>http://jkitchin.github.io/blog/2016/02/07/Interactive-Bokeh-plots-in-HTML</link>
      <pubDate>Sun, 07 Feb 2016 10:53:45 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[plotting]]></category>
      <category><![CDATA[interactive]]></category>
      <guid isPermaLink="false">CM9ctWbQgZjxBLQKmokTp2qMm6Y=</guid>
      <description>Interactive Bokeh plots in HTML</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. The data and code</a></li>
<li><a href="#sec-2">2. References</a></li>
</ul>
</div>
</div>

<p>
In our last <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/02/06/Interactive-plots-in-HTML-with-Plotly/">post</a> we examined the use of <a href="https://plot.ly/">plotly</a> to generate interactive plots in HTML. Today we expand the idea, and use <a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> . One potential issue with plotly is the need for an account and API-key, some limitations on how many times a graph can be viewed per day (although I should aspire to have my graphs viewed 1000+ times a day!), and who knows what happens to the graphs if plotly ever goes out of business. While the static images we usually use have limited utility, at least they stick around.
</p>

<p>
So, today we look at <a href="http://bokeh.pydata.org/en/latest/">Bokeh</a> which allows you to embed some json data in your HTML, which is made interactive by your browser with more javascript magic. We get straight to the image here so you can see what this is all about. Briefly, this data shows trends (or lack of) in the adsorption energies of some atoms on the atop and fcc sites of several transition metals as a function of adsorbate coverage  <a class='org-ref-reference' href="#xu-2014-probin-cover">xu-2014-probin-cover</a>. The code to do this is found <a href="#sec-1">here</a>.
</p>

<p>
Using Bokeh does not integrate real smoothly with my blog workflow, which only generates the body of HTML posts. Bokeh needs some javascript injected into the header to work. To get around that, I show the plot in a frame here. You can see a full HTML version here: <a href="/media/2016-02-07-Interactive-Bokeh-plots-in-HTML/bokeh-plot.html">bokeh-plot.html</a> .
</p>

<iframe src="/media/2016-02-07-Interactive-Bokeh-plots-in-HTML/bokeh-plot.html#figure" width="800" height="700"></iframe>

<a name="figure"></a>

<div class="plotdiv" id="359fb6b4-4cda-408d-a6c6-4d38f4885edb"></div>



<p>
This is somewhat similar to the plotly concept. The data is embedded in the html in this case, which is different. For very large plots, I actually had some trouble exporting the blog post (it was taking a long time to export and I killed it)! I suspect that is a limitation of the org-mode exporter though, because I could save the html files from Python and view them fine. I also noted that having all the javascript in the org-file make font-lock work very slow. It would be better to generate that only on export.
</p>

<p>
Note to make this work, we need these lines in our HTML header:
</p>
<pre class="example">
#+HTML_HEAD: &lt;link rel="stylesheet" href="http://cdn.pydata.org/bokeh/release/bokeh-0.11.1.min.css" type="text/css" /&gt;
#+HTML_HEAD: &lt;script type="text/javascript" src="http://cdn.pydata.org/bokeh/release/bokeh-0.11.1.min.js"&gt;&lt;/script&gt;
</pre>

<p>
Since we do not host those locally, if they ever disappear, our plots will not show ;(
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-47C13034-DBD8-4154-8004-5CABEA2CF1D2" name="ID-47C13034-DBD8-4154-8004-5CABEA2CF1D2"></a><span class="section-number-2">1</span> The data and code</h2>
<div class="outline-text-2" id="text-1">
<p>
We will get the data from our paper on coverage dependent adsorption energies <a class='org-ref-reference' href="#xu-2014-probin-cover">xu-2014-probin-cover</a>. There are some data rich figures there that would benefit from some interactivity. You can get the data here: <a href="http://pubs.acs.org/doi/suppl/10.1021/jp508805h">http://pubs.acs.org/doi/suppl/10.1021/jp508805h</a> . Extract out the supporting-information.org and energies.json file to follow here. We will make Figure 2a in the SI document here, and make it interactive with hover tooltips.
</p>

<div class="org-src-container">

<pre class="src src-python" id="bokeh-plot"><span style="color: #0000FF;">import</span> json

<span style="color: #0000FF;">from</span> collections <span style="color: #0000FF;">import</span> OrderedDict
<span style="color: #0000FF;">from</span> bokeh <span style="color: #0000FF;">import</span> mpl
<span style="color: #0000FF;">from</span> bokeh.plotting <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">from</span> bokeh.models <span style="color: #0000FF;">import</span> HoverTool
<span style="color: #0000FF;">from</span> bokeh.embed <span style="color: #0000FF;">import</span> components

<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'/users/jkitchin/Desktop/energies.json'</span>, <span style="color: #008000;">'r'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = json.load(f)


<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">color for metal</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">letter symbol for adsorbate</span>
<span style="color: #BA36A5;">colors</span> = {<span style="color: #008000;">'Cu'</span>:<span style="color: #008000;">'Orange'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Ag'</span>:<span style="color: #008000;">'Silver'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Au'</span>:<span style="color: #008000;">'Yellow'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Pd'</span>:<span style="color: #008000;">'Green'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Pt'</span>:<span style="color: #008000;">'Red'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Rh'</span>:<span style="color: #008000;">'Blue'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">'Ir'</span>:<span style="color: #008000;">'Purple'</span>}

<span style="color: #BA36A5;">all_ads</span> = [<span style="color: #008000;">'O'</span>, <span style="color: #008000;">'S'</span>]

<span style="color: #BA36A5;">TOOLS</span>=<span style="color: #008000;">"crosshair,pan,wheel_zoom,box_zoom,reset,hover,previewsave"</span>
<span style="color: #BA36A5;">p</span> = figure(title=<span style="color: #008000;">"Correlation between atop and fcc sites"</span>, tools=TOOLS)

<span style="color: #0000FF;">for</span> metal <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'Rh'</span>, <span style="color: #008000;">'Pd'</span>, <span style="color: #008000;">'Cu'</span>, <span style="color: #008000;">'Ag'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> adsorbate <span style="color: #0000FF;">in</span> all_ads:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">E1</span>, <span style="color: #BA36A5;">E2</span> = [], []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> coverage <span style="color: #0000FF;">in</span> <span style="color: #008000;">'0.25'</span>, <span style="color: #008000;">'0.5'</span>, <span style="color: #008000;">'0.75'</span>, <span style="color: #008000;">'1.0'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">isinstance</span>(data[metal][adsorbate][<span style="color: #008000;">'ontop'</span>][coverage], <span style="color: #006FE0;">float</span>) <span style="color: #0000FF;">and</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">isinstance</span>(data[metal][adsorbate][<span style="color: #008000;">'fcc'</span>][coverage], <span style="color: #006FE0;">float</span>)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   E1.append(data[metal][adsorbate][<span style="color: #008000;">'ontop'</span>][coverage])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   E2.append(data[metal][adsorbate][<span style="color: #008000;">'fcc'</span>][coverage])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">labels</span> = [<span style="color: #008000;">'{0}-{1} {2} ML'</span>.<span style="color: #006FE0;">format</span>(metal, adsorbate, x)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'0.25'</span>, <span style="color: #008000;">'0.5'</span>, <span style="color: #008000;">'0.75'</span>, <span style="color: #008000;">'1.0'</span>]]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   p.line(<span style="color: #008000;">'x'</span>, <span style="color: #008000;">'y'</span>, color=colors[metal],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  source=ColumnDataSource(data={<span style="color: #008000;">'x'</span>: E1,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'y'</span>: E2,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'label'</span>: labels}))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   p.circle(<span style="color: #008000;">'x'</span>, <span style="color: #008000;">'y'</span>, color=colors[metal],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  source=ColumnDataSource(data={<span style="color: #008000;">'x'</span>: E1,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'y'</span>: E2,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">'label'</span>: labels}))


<span style="color: #BA36A5;">hover</span> =p.select({<span style="color: #008000;">'type'</span>: HoverTool})
<span style="color: #BA36A5;">hover.tooltips</span> = OrderedDict([(<span style="color: #008000;">"(atop,fcc)"</span>, <span style="color: #008000;">"(@x, @y)"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> (<span style="color: #008000;">"label"</span>, <span style="color: #008000;">"@label"</span>)])

<span style="color: #BA36A5;">p.xaxis.axis_label</span> = <span style="color: #008000;">'Adsorption energy on the atop site'</span>
<span style="color: #BA36A5;">p.yaxis.axis_label</span> = <span style="color: #008000;">'Adsorption energy on the fcc site'</span>

<span style="color: #BA36A5;">script</span>, <span style="color: #BA36A5;">div</span> = components(p)
<span style="color: #BA36A5;">script</span> = <span style="color: #008000;">'\n'</span>.join([<span style="color: #008000;">'#+HTML_HEAD_EXTRA: '</span> + line <span style="color: #0000FF;">for</span> line <span style="color: #0000FF;">in</span> script.split(<span style="color: #008000;">'\n'</span>)])

<span style="color: #0000FF;">print</span> <span style="color: #008000;">'''{script}</span>

<span style="color: #008000;">#+BEGIN_HTML</span>
<span style="color: #008000;">&lt;a name="figure"&gt;&lt;/a&gt;</span>
<span style="color: #008000;">{div}</span>
<span style="color: #008000;">#+END_HTML</span>
<span style="color: #008000;">'''</span>.<span style="color: #006FE0;">format</span>(script=script, div=div)
</pre>
</div>
</div>
</div>



<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> References</h2>
<div class="outline-text-2" id="text-2">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="xu-2014-probin-cover">[xu-2014-probin-cover] Zhongnan Xu & John Kitchin, Probing the Coverage Dependence of Site and Adsorbate  Configurational Correlations on (111) Surfaces of Late  Transition Metals, <i>J. Phys. Chem. C</i>, <b>118(44)</b>, 25597-25602 (2014). <a href="http://dx.doi.org/10.1021/jp508805h">link</a>. <a href="http://dx.doi.org/10.1021/jp508805h">doi</a>.</a></li>
</ul>
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/07/Interactive-Bokeh-plots-in-HTML.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Interactive plots in HTML with Plotly</title>
      <link>http://jkitchin.github.io/blog/2016/02/06/Interactive-plots-in-HTML-with-Plotly</link>
      <pubDate>Sat, 06 Feb 2016 12:44:53 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[plotting]]></category>
      <category><![CDATA[interactive]]></category>
      <guid isPermaLink="false">vqXGA3yIAkOdEnJx99Y-RLNzOSQ=</guid>
      <description>Interactive plots in HTML with Plotly</description>
      <content:encoded><![CDATA[



<p>
Most of the plots in this blog are static. Today, I look at making them interactive. I will use <a href="https://plot.ly">https://plot.ly</a> for this. I want to use some data from a paper we published on the relative stabilities of oxide polymorphs <a class='org-ref-reference' href="#mehta-2015-ident-poten">mehta-2015-ident-poten</a>. We will make an interactive figure showing the relative stabilities of the RuO<sub>2</sub> polymorphs. When you hover on a point, it will show you which polymorph the point refers to. Let's see the figure first here. If you think its interesting read on to see how we made it!
</p>

<iframe id="igraph" scrolling="no" style="border:none;"seamless="seamless" src="https://plot.ly/~jkitchin/4.embed" height="525" width="100%"></iframe>


<p>
We get our data source here: <a href="http://pubs.acs.org/doi/suppl/10.1021/am4059149/suppl_file/am4059149_si_001.pdf">http://pubs.acs.org/doi/suppl/10.1021/am4059149/suppl_file/am4059149_si_001.pdf</a> .
</p>

<p>
Now, we extract the data files:
</p>
<div class="org-src-container">

<pre class="src src-sh">pdftk ~/Desktop/am4059149_si_001.pdf  unpack_files
</pre>
</div>

<p>
That extracts a json file called supporting-information.json. We use it as suggested in the SI pdf to plot the equations of state for RuO<sub>2</sub> for several polymorphs.
</p>

<div class="org-src-container">

<pre class="src src-python" id="ruo2-html"><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">coding=utf-8</span>

<span style="color: #0000FF;">import</span> plotly.plotly <span style="color: #0000FF;">as</span> py
<span style="color: #0000FF;">import</span> plotly.graph_objs <span style="color: #0000FF;">as</span> go
<span style="color: #0000FF;">import</span> plotly.tools <span style="color: #0000FF;">as</span> tls
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> ase.utils.eos <span style="color: #0000FF;">import</span> EquationOfState
<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'supporting-information.json'</span>, <span style="color: #008000;">'rb'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">d</span> = json.loads(f.read())

<span style="color: #BA36A5;">BO2</span> = <span style="color: #008000;">'RuO2'</span>
<span style="color: #BA36A5;">xc</span> = <span style="color: #008000;">'PBE'</span>

<span style="color: #BA36A5;">layout</span> = go.Layout(title=<span style="color: #008000;">'Energy vs. Volume for RuO&lt;sub&gt;2&lt;/sub&gt; polymorphs'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  xaxis=<span style="color: #006FE0;">dict</span>(title=<span style="color: #008000;">'Volume (&#197;&lt;sup&gt;3&lt;/sup&gt;)'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  yaxis=<span style="color: #006FE0;">dict</span>(title=<span style="color: #008000;">'Energy (eV)'</span>))

<span style="color: #BA36A5;">traces</span> = []

<span style="color: #0000FF;">for</span> polymorph <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'rutile'</span>,<span style="color: #008000;">'anatase'</span>,<span style="color: #008000;">'brookite'</span>,<span style="color: #008000;">'columbite'</span>,<span style="color: #008000;">'pyrite'</span>,<span style="color: #008000;">'fluorite'</span>]:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">number of atoms in the unit cell - used to normalize</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">natoms</span>= <span style="color: #006FE0;">len</span>(d[BO2][polymorph][xc][<span style="color: #008000;">'EOS'</span>][<span style="color: #008000;">'calculations'</span>]
                [0][<span style="color: #008000;">'atoms'</span>][<span style="color: #008000;">'symbols'</span>])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volumes</span> = [entry[<span style="color: #008000;">'data'</span>][<span style="color: #008000;">'volume'</span>]*3./natoms <span style="color: #0000FF;">for</span> entry <span style="color: #0000FF;">in</span>
               d[BO2][polymorph][xc][<span style="color: #008000;">'EOS'</span>][<span style="color: #008000;">'calculations'</span>]]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">energies</span> =  [entry[<span style="color: #008000;">'data'</span>][<span style="color: #008000;">'total_energy'</span>]*3./natoms <span style="color: #0000FF;">for</span> entry <span style="color: #0000FF;">in</span>
                 d[BO2][polymorph][xc][<span style="color: #008000;">'EOS'</span>][<span style="color: #008000;">'calculations'</span>]]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">trace</span> = go.Scatter(x=np.array(volumes),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  y=np.array(energies),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  mode=<span style="color: #008000;">'lines+markers'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  name=polymorph,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  text=polymorph)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">traces</span> += [trace]

<span style="color: #BA36A5;">fig</span> = go.Figure(data=traces, layout=layout)
<span style="color: #BA36A5;">plot_url</span> = py.plot(fig, filename=<span style="color: #008000;">'ruo2-2'</span>)

<span style="color: #0000FF;">print</span> tls.get_embed(plot_url)
</pre>
</div>




<p>
Pretty nice, now we should have an interactive plot in our browser with the data points labeled with tags, zooming, etc&#x2026; That is nice for the blog. It isn't so nice for daily work, as there is no visual version of the plot in my org-file. Of course, I can visit the url to see the plot in my browser, it is just different from what I am used to. For everyone else, this is probably better. It looks like you can actually get the data from the web page, including some minimal analysis like regression, and save your view to an image! That could be pretty nice for some data sets.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Using Plotly yourself</h2>
<div class="outline-text-2" id="text-1">
<p>
First, go to <a href="https://plot.ly">https://plot.ly</a> and sign up for an account. You will want to register your API key like this, which will save it in a file for your convenience. Then you can do things like I did above too.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> plotly.tools <span style="color: #0000FF;">as</span> tls
tls.set_credentials_file(username=<span style="color: #008000;">'jkitchin'</span>, api_key=<span style="color: #008000;">'xxxxxxx'</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> References</h2>
<div class="outline-text-2" id="text-2">
<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="mehta-2015-ident-poten">[mehta-2015-ident-poten] Prateek Mehta, Paul Salvador & John Kitchin, Identifying Potential \ceBO2 Oxide Polymorphs for Epitaxial  Growth Candidates, <i>ACS Appl. Mater. Interfaces</i>, <b>6(5)</b>, 3630-3639 (2015). <a href="http://dx.doi.org/10.1021/am4059149">link</a>. <a href="http://dx.doi.org/10.1021/am4059149">doi</a>.</a></li>
</ul></p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2016/02/06/Interactive-plots-in-HTML-with-Plotly.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Asynchronously running python blocks in org-mode</title>
      <link>http://jkitchin.github.io/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode</link>
      <pubDate>Fri, 20 Nov 2015 11:46:45 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">U7qjSMgTDurNF_8TXKWrVuj-0X4=</guid>
      <description>Asynchronously running python blocks in org-mode</description>
      <content:encoded><![CDATA[


<p>
If you run long Python blocks from org-mode, you might want to keep working while it runs. Currently Emacs gets blocked and you have to wait patiently.  In this post we consider some ways to avoid this that run our code asynchronously, but still put results where they belong in the org-buffer.
</p>

<p>
This is a long post. You may want to see the video: <a href="https://www.youtube.com/watch?v=VDyoN8yipSE">https://www.youtube.com/watch?v=VDyoN8yipSE</a> , or skip to the <a href="#sec-3">end</a> where the best and final version is shown.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The async module</h2>
<div class="outline-text-2" id="text-1">
<p>
Here we consider an approach that uses <a href="https://github.com/jwiegley/emacs-async">https://github.com/jwiegley/emacs-async</a> module. The idea is to tangle the Python block at point to a temp file, then asynchronously run it. We capture the output and put it back in the buffer. We use a uuid to find the place to put the results in org-mode format. Here is the code that implements this idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">async</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute</span> ()
  <span style="color: #036A07;">"Run a python block at point asynchrously."</span>
  (<span style="color: #0000FF;">interactive</span>)

  (<span style="color: #0000FF;">let</span> ((current-file (buffer-file-name))
        (uuid (org-id-uuid))
        (temporary-file-directory <span style="color: #008000;">"./"</span>)
        (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>)))

    (org-babel-tangle '(4) tempfile)
    (org-babel-remove-result)
    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    (<span style="color: #0000FF;">async-start</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">what to start</span>
     `(<span style="color: #0000FF;">lambda</span> ()
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">now we run the command then cleanup</span>
        (<span style="color: #0000FF;">prog1</span>
            (shell-command-to-string (format <span style="color: #008000;">"python %s"</span> ,tempfile))
          (delete-file ,tempfile)))

     `(<span style="color: #0000FF;">lambda</span> (result)
        <span style="color: #036A07;">"Code that runs when the async function finishes."</span>
        (<span style="color: #0000FF;">save-window-excursion</span>
          (<span style="color: #0000FF;">save-excursion</span>
            (<span style="color: #0000FF;">save-restriction</span>
              (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                (goto-char (point-min))
                (re-search-forward ,uuid)
                (beginning-of-line)
                (kill-line)
                (insert (mapconcat
                         (<span style="color: #0000FF;">lambda</span> (x)
                           (format <span style="color: #008000;">": %s"</span> x))
                         (butlast (s-split <span style="color: #008000;">"\n"</span> result))
                         <span style="color: #008000;">"\n"</span>))))))))))
</pre>
</div>

<pre class="example">
org-babel-async-execute
</pre>

<p>
Here is a block to test it on. We can run the block, and keep on working while the code runs. The results seem to get inserted correctly at the right point even if I am in another window or frame! We don't get easy access to continuous output of the command. This wouldn't work if we close Emacs, but who does that?
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(5)

<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()
</pre>
</div>

<pre class="example">
hello world
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 10:17:53 2015
</pre>

<p>
There are some limitations to this approach. One of them is it assumes the src block is a stand-alone block that will run on its own. That is usually how I run mine, but I could see having other modules that should be tangled out of a file too. I think the script is being run in the current working directory, so it probably will find any local imports it needs.
</p>

<p>
You don't get any intermediate feedback on this process. It seems to be possible to do that with a different approach that puts some output in a new buffer, e.g. with start-process. But, you still need some clever code like the async model to know when to insert the results back into this buffer. We consider Emacs processes and sentinels next.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Emacs process approach with tangling</h2>
<div class="outline-text-2" id="text-2">
<p>
We can start a process in Emacs, and attach a sentinel function to it that runs after the process completes. Here is an example of that. We still tangle the src-block here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((current-file (buffer-file-name))
        (uuid (org-id-uuid))
        (temporary-file-directory <span style="color: #008000;">"./"</span>)
        (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>))
        (pbuffer (format <span style="color: #008000;">"*%s*"</span> uuid))
        process)

    (org-babel-tangle '(4) tempfile)
    (org-babel-remove-result)

    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    (<span style="color: #0000FF;">setq</span> process (start-process
                   uuid
                   pbuffer
                   <span style="color: #008000;">"python"</span>
                   tempfile))

    (set-process-sentinel
     process
     `(<span style="color: #0000FF;">lambda</span> (process event)
        (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"finished\n"</span> event)
          (delete-file ,tempfile)
          (<span style="color: #0000FF;">save-window-excursion</span>
            (<span style="color: #0000FF;">save-excursion</span>
              (<span style="color: #0000FF;">save-restriction</span>
                (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                  (goto-char (point-min))
                  (re-search-forward ,uuid)
                  (beginning-of-line)
                  (kill-line)
                  (insert (mapconcat
                           (<span style="color: #0000FF;">lambda</span> (x)
                             (format <span style="color: #008000;">": %s"</span> x))
                           (split-string
                            (<span style="color: #0000FF;">with-current-buffer</span> ,pbuffer (buffer-string))
                            <span style="color: #008000;">"\n"</span>)
                           <span style="color: #008000;">"\n"</span>)))))))
        (kill-buffer ,pbuffer)))))
</pre>
</div>

<pre class="example">
org-babel-async-execute
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(10)

<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()
</pre>
</div>

<pre class="example">
hello world
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 10:20:01 2015
</pre>

<p>
That works well from what I can see. There are some limitations. I doubt this will work if you use variables in the src block header. Next we consider an approach that does not do the tangling, and that will show us code output as it goes.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><a id="ID-D8F2CBB5-31B2-4477-A363-E3C0063214DE" name="ID-D8F2CBB5-31B2-4477-A363-E3C0063214DE"></a><span class="section-number-2">3</span> Emacs process approach with no tangling</h2>
<div class="outline-text-2" id="text-3">
<p>
As an alternative to tangling to a file, here we just copy the code to a file and then run it. This allows us to use :var in the header to pass data in at run time. At the moment, this code only supports printed output from code blocks, not the value for :results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-async-execute:python</span> ()
  <span style="color: #036A07;">"Execute the python src-block at point asynchronously.</span>
<span style="color: #036A07;">:var headers are supported.</span>
<span style="color: #036A07;">:results output is all that is supported for output.</span>

<span style="color: #036A07;">A new window will pop up showing you the output as it appears,</span>
<span style="color: #036A07;">and the output in that window will be put in the RESULTS section</span>
<span style="color: #036A07;">of the code block."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((current-file (buffer-file-name))
         (uuid (org-id-uuid))
         (code (org-element-property <span style="color: #006FE0;">:value</span> (org-element-context)))
         (temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"py-"</span>))
         (pbuffer (format <span style="color: #008000;">"*%s*"</span> uuid))
         (varcmds (org-babel-variable-assignments:python
                   (nth 2 (org-babel-get-src-block-info))))
         process)

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get rid of old results, and put a place-holder for the new results to</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">come.</span>
    (org-babel-remove-result)

    (<span style="color: #0000FF;">save-excursion</span>
      (re-search-forward <span style="color: #008000;">"#\\+END_SRC"</span>)
      (insert (format
               <span style="color: #008000;">"\n\n#+RESULTS: %s\n: %s"</span>
               (<span style="color: #0000FF;">or</span> (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context))
                   <span style="color: #008000;">""</span>)
               uuid)))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">open the results buffer to see the results in.</span>
    (switch-to-buffer-other-window pbuffer)

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Create temp file containing the code.</span>
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if there are :var headers insert them.</span>
      (<span style="color: #0000FF;">dolist</span> (cmd varcmds)
        (insert cmd)
        (insert <span style="color: #008000;">"\n"</span>))
      (insert code))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">run the code</span>
    (<span style="color: #0000FF;">setq</span> process (start-process
                   uuid
                   pbuffer
                   <span style="color: #008000;">"python"</span>
                   tempfile))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">when the process is done, run this code to put the results in the</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">org-mode buffer.</span>
    (set-process-sentinel
     process
     `(<span style="color: #0000FF;">lambda</span> (process event)
        (<span style="color: #0000FF;">save-window-excursion</span>
          (<span style="color: #0000FF;">save-excursion</span>
            (<span style="color: #0000FF;">save-restriction</span>
              (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect ,current-file)
                (goto-char (point-min))
                (re-search-forward ,uuid)
                (beginning-of-line)
                (kill-line)
                (insert
                 (mapconcat
                  (<span style="color: #0000FF;">lambda</span> (x)
                    (format <span style="color: #008000;">": %s"</span> x))
                  (butlast (split-string
                            (<span style="color: #0000FF;">with-current-buffer</span>
                                ,pbuffer
                              (buffer-string))
                            <span style="color: #008000;">"\n"</span>))
                  <span style="color: #008000;">"\n"</span>))))))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete the results buffer then delete the tempfile.</span>
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">finally, delete the process.</span>
        (<span style="color: #0000FF;">when</span> (get-buffer ,pbuffer)
          (kill-buffer ,pbuffer)
          (delete-window))
        (delete-file ,tempfile)
        (delete-process process)))))
</pre>
</div>

<pre class="example">
org-babel-async-execute:python
</pre>

<p>
Let us try it out again.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> <span style="color: #008000;">'hello world'</span>
<span style="color: #0000FF;">import</span> time
time.sleep(1)

<span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(5):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> i

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(0.5)


<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span> os.getcwd()
<span style="color: #0000FF;">print</span> time.asctime()

<span style="color: #0000FF;">print</span> data

<span style="color: #0000FF;">raise</span> <span style="color: #6434A3;">IOError</span>(<span style="color: #008000;">'No file!'</span>)
</pre>
</div>

<pre class="example">
hello world
0
1
2
3
4
/Users/jkitchin/blogofile-jkitchin.github.com/_blog
Fri Nov 20 19:30:16 2015
[1, 3]
Traceback (most recent call last):
  File "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/py-84344aa1", line 18, in &lt;module&gt;
    raise IOError('No file!')
IOError: No file!
</pre>

<p>
It works fine for this simple example. We get to see the output as the code executes, which is a pleasant change from the usual way of running python blocks. There is some support for some header arguments, notably the :var header. I don't use :results value in Python, so for now only output is supported. We even support Exceptions in the output finally!
</p>

<p>
Maybe some org-moder's out there can try this and run it through some more rigorous paces?
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/11/20/Asynchronously-running-python-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A framework for automated feedback with Python and org-mode</title>
      <link>http://jkitchin.github.io/blog/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode</link>
      <pubDate>Sat, 03 Oct 2015 20:23:29 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">yh8IShBzbxUEvbpzeLo05dvyC_I=</guid>
      <description>A framework for automated feedback with Python and org-mode</description>
      <content:encoded><![CDATA[



<p>
<a href="http://docs.autolab.cs.cmu.edu">Autolab</a> is an autograding service that automatically grades code assignments. It uses a program to evaluate a program on a secure virtual system. Using this requires you to run a server, and run code from students. I have never liked that because it is hard to sandbox code well enough to prevent malicious code from doing bad things. Autolab does it well, but it is a heavy solution. Here we explore a local version, one that is used to test for correctness, and not for grading. Here, if you are malicious, you reap what you sow&#x2026;
</p>

<p>
The basic idea I am working towards is that Emacs will provide content to be learned (through org-mode) with active exercises. The exercises will involve a code block, and the user will run a command on their code (or an advised C-c C-c) that checks the solution for correctness. A user will be able to see the solution, and maybe get hints.
</p>

<p>
Suppose we have a problem to solve \(e^x = 3\). This is a simple problem to solve, and here is a solution.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scipy.optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)

<span style="color: #0000FF;">print</span> solve()
</pre>
</div>

<pre class="example">
[ 1.09861229]
</pre>

<p>
We would like to test this for correctness. We code this in a function-based form because we will later use the function <code>solve</code> to test for correctness. Let's see how we could test it with a test function. We will use exec on a string representing our code to get it into our namespace. I don't see a security issue here. You are writing the code! Eventually, we will be passing code to the test framework this way from an org-mode source block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> unittest
<span style="color: #BA36A5;">TOLERANCE</span> = 1e-5

<span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'''from scipy.optimize import fsolve</span>
<span style="color: #008000;">import numpy as np</span>

<span style="color: #008000;">def objective(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return np.exp(x) - 3</span>

<span style="color: #008000;">def solve():</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return fsolve(objective, 3)[0]</span>

<span style="color: #008000;">print solve()'''</span>

<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_solve</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">abs</span>(np.log(3) - solve()) &lt;= TOLERANCE):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Correct'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'incorrect'</span>)

test_solve(s)
</pre>
</div>

<pre class="example">
1.09861228867
Correct
</pre>

<p>
Next, we need to think about how we could generate an import statement from a code block name, import in python, and run a test function. We can assume that the test code will be in a file called "test_%s.py" on your python path. Here are the contents of test_solve.py.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #BA36A5;">TOLERANCE</span> = 1e-5

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve_solution</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">from</span> scipy. optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)[0]


<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_solve</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">abs</span>(solve_solution() - solve()) &lt;= TOLERANCE):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Correct!'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Incorrect'</span>)
</pre>
</div>

<p>
Now, we can import that, and use the functions. Here is the Python script we need to run to test it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> test_solve
test_solve.test_solve(<span style="color: #036A07;">'''</span>
<span style="color: #036A07;">from scipy. optimize import fsolve</span>
<span style="color: #036A07;">import numpy as np</span>

<span style="color: #036A07;">def objective(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   return np.exp(x) - 3</span>

<span style="color: #036A07;">def solve():</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   return fsolve(objective, 3)[0]</span>

<span style="color: #036A07;">print solve()'''</span>)
</pre>
</div>

<pre class="example">
1.09861228867
Correct!
</pre>

<p>
Now, an elisp block to do that. One way to do this is to just run a shell command passing the string to a python interpreter. This is a short way away from an Emacs command now.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((string <span style="color: #008000;">"import test_solve</span>
<span style="color: #008000;">test_solve.test_solve('''</span>
<span style="color: #008000;">from scipy. optimize import fsolve</span>
<span style="color: #008000;">import numpy as np</span>

<span style="color: #008000;">def objective(x):</span>
<span style="color: #008000;">    return np.exp(x) - 3</span>

<span style="color: #008000;">def solve():</span>
<span style="color: #008000;">    return fsolve(objective, 3)[0]</span>

<span style="color: #008000;">print solve()''')"</span>))
  (shell-command-to-string (format <span style="color: #008000;">"python -c \"%s\""</span> string)))
</pre>
</div>

<pre class="example">
1.09861228867
Correct!
</pre>

<p>
Ok, now to wrap it all up in a function we can run from Emacs in a code block to test it. With the cursor in a code block, we get the name, and build the python code, and run it. The function is more complex than I anticipated because I end up  running the code block essentially twice, once to get a results block and once to get the test results. For short problems this is not an issue. I also add the test results in a way that is compatible with the current results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">check</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
         (name (org-element-property <span style="color: #006FE0;">:name</span> src-block))
         (code (org-element-property <span style="color: #006FE0;">:value</span> src-block))
         (end (org-element-property <span style="color: #006FE0;">:end</span> src-block))
         (results)
         (template (format <span style="color: #008000;">"import test_%s</span>
<span style="color: #008000;">test_%s.test_%s('''%s''')"</span> name name name code))
         (output (format
                  <span style="color: #008000;">"\n%s\n"</span>
                  (s-join
                   <span style="color: #008000;">"\n"</span>
                   (mapcar
                    (<span style="color: #0000FF;">lambda</span> (s)
                      (<span style="color: #0000FF;">if</span> (s-starts-with? <span style="color: #008000;">":"</span> s)
                          s
                        (concat <span style="color: #008000;">": "</span> s)))
                    (s-split
                     <span style="color: #008000;">"\n"</span>
                     (shell-command-to-string
                      (format <span style="color: #008000;">"python -c \"%s\""</span> template))))))))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">execute block as normal</span>
    (org-babel-execute-src-block)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and add some output to the Results block</span>
    (<span style="color: #0000FF;">if</span> (org-babel-where-is-src-block-result)
        (<span style="color: #0000FF;">progn</span>
          (goto-char (org-babel-where-is-src-block-result))
          (<span style="color: #0000FF;">setq</span> results (org-element-context))
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete results line</span>
          (kill-line)
          <span style="color: #8D8D84;">;;  </span><span style="color: #8D8D84; font-style: italic;">delete the results</span>
          (<span style="color: #0000FF;">setf</span> (buffer-substring (org-element-property <span style="color: #006FE0;">:begin</span> results)
                                  (org-element-property <span style="color: #006FE0;">:post-affiliated</span> results))
                <span style="color: #008000;">""</span>)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">paste results line back</span>
          (yank)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and the output from your code</span>
          (insert output))
      (message <span style="color: #008000;">"%s"</span> output))))
</pre>
</div>

<pre class="example">
check
</pre>

<p>
Now, we use a named src-block so we can call M-x check in it, and check the answer.
</p>

<div class="org-src-container">

<pre class="src src-python" id="solve"><span style="color: #0000FF;">from</span> scipy.optimize <span style="color: #0000FF;">import</span> fsolve
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">objective</span>(x):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> np.exp(x) - 3

<span style="color: #0000FF;">def</span> <span style="color: #006699;">solve</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fsolve(objective, 3)

<span style="color: #0000FF;">print</span> solve()
</pre>
</div>

<pre class="example">
[ 1.09861229]
Correct!
</pre>

<p>
I would like to be able to provide a solution function that would show a user my solution they were tested against. Python provides the <code>inspect</code> module that can do this. Here is how we get the code in Python.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> inspect
<span style="color: #0000FF;">import</span> test_solve

<span style="color: #0000FF;">print</span> inspect.getsource(test_solve.solve_solution)
</pre>
</div>

<pre class="example">
def solve_solution():
    from scipy. optimize import fsolve
    import numpy as np

    def objective(x):
        return np.exp(x) - 3

    return fsolve(objective, 3)[0]
</pre>

<p>
This makes it easy to wrap up a function in emacs that will show this from at src block. We just get the block name, and build the python code and execute it here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">show-solution</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let*</span> ((src-block (org-element-context))
         (name (org-element-property <span style="color: #006FE0;">:name</span> src-block))
         (template (format  <span style="color: #008000;">"import inspect</span>
<span style="color: #008000;">import test_%s</span>

<span style="color: #008000;">print inspect.getsource(test_%s.%s_solution)"</span> name name name)))
    (switch-to-buffer-other-window (get-buffer-create <span style="color: #008000;">"solution"</span>))
    (erase-buffer)
    (insert (shell-command-to-string
             (format <span style="color: #008000;">"python -c \"%s\""</span> template)))
    (python-mode)))
</pre>
</div>

<pre class="example">
show-solution
</pre>

<p>
That summarizes the main features. It allows me to write a test module that has some name conventions to define a solution function, and a test function. Emacs can generate some boilerplate code for different problem names, and run the test to give the user some feedback. Most of the code in this post would not be directly visible to a user, it would be buried in a python module somewhere on the path, and in elisp files providing the glue. I am not sure how much obfuscation you can put in the python files, e.g. just providing byte-compiled code, so it is less easy to just read it. That is not as big a deal when it is just a study guide/feedback system.
</p>

<p>
From an authoring point of view, this seems pretty good to me. It is feasible I think to write an org-source document like this with tangling for the test modules, and an export to org that does not have the solutions in it. The only subtle point might be needing to alter Python paths to find the test modules if they aren't installed via something like pip.
</p>


<p>
I think this is pretty flexible, and could handle problems that take arguments, e.g. write a function that sorts a list. Here is a simple example of that. First we write the test_sort.py file with a solution, and some tests.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">sort_solution</span>(LIST):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> LIST.sort()

<span style="color: #0000FF;">def</span> <span style="color: #006699;">test_sort</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">exec</span> s <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">globals</span>()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> sort([3, 4, 2]) == [2, 3, 4]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'passed test 1'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> sort([<span style="color: #008000;">'z'</span>, <span style="color: #008000;">'b'</span>]) == [<span style="color: #008000;">'b'</span>, <span style="color: #008000;">'z'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'passed test 2'</span>)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-python" id="sort"><span style="color: #0000FF;">def</span> <span style="color: #006699;">sort</span>(LIST):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #006FE0;">sorted</span>(LIST)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s
</pre>
</div>
<pre class="example">
passed test 1
passed test 2
</pre>

<p>
Maybe it would make sense to use unittests, or nose or some other testing framework if it makes writing the tests easier. Another day.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/10/03/A-framework-for-automated-feedback-with-Python-and-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Pyparsing meets Emacs to find chemical formulas</title>
      <link>http://jkitchin.github.io/blog/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas</link>
      <pubDate>Thu, 02 Jul 2015 12:22:57 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">MmU-3J8XFG8NYK-iMnTKSYLmbjs=</guid>
      <description>Pyparsing meets Emacs to find chemical formulas</description>
      <content:encoded><![CDATA[



<p>
see the video: <a href="https://www.youtube.com/watch?v=sjxS9m8QCoo">https://www.youtube.com/watch?v=sjxS9m8QCoo</a> 
</p>

<p>
Today we expand the concepts of clickable text and merge an idea from Python with Emacs. Here we will use Python to find chemical formulas in the buffer, and then highlight them with Emacs.  We will use pyparsing to find the chemical formulas and then use them to create a pattern for button-lock. I chose this approach because regular expressions are hard to use on the most general kinds of chemical formulas, and a (possibly recursive) parser should be better equipped to handle this. I adapted an <a href="https://pyparsing.wikispaces.com/file/view/chemicalFormulas.py/31041705/chemicalFormulas.py">example</a> grammar to match simple chemical formulas, i.e. ones that do not have any parentheses, or charges different than + or -. I think something like this could be done in Emacs, but I am not as familiar with this kind of parsing in Emacs.
</p>

<p>
Basically, we treat a formula as a group of one or more Elements that have an optional number following them. Spoiler alert: This mostly works, but in the end I conclude there is a clear benefit to a markup language for chemical formulas. Here is an example usage of a parser:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">adapted from [[https://pyparsing.wikispaces.com/file/view/chemicalFormulas.py/31041705/chemicalFormulas.py]]</span>

<span style="color: #0000FF;">from</span> pyparsing <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">element</span> = oneOf( <span style="color: #008000;">"""H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No"""</span> )

<span style="color: #BA36A5;">integer</span> = Word(nums)
<span style="color: #BA36A5;">elementRef</span> = Group(element + Optional(integer))
<span style="color: #BA36A5;">chemicalFormula</span> = (WordStart(alphas.upper())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + OneOrMore(elementRef).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + Optional(Or([Literal(<span style="color: #008000;">"-"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     Literal(<span style="color: #008000;">"+"</span>)]))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + WordEnd(alphas + nums + <span style="color: #008000;">"-+"</span>))


<span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'''Water is  H2O or OH2  not h2O, methane is CH4 and of course there is PtCl4.</span>
<span style="color: #008000;">What about H+ and OH-? and carbon or Carbon or H2SO4?</span>

<span style="color: #008000;">Is this C6H6? or C2H5OH?</span>

<span style="color: #008000;">and a lot of elements:</span>
<span style="color: #008000;">H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No'''</span>

<span style="color: #BA36A5;">matches</span> = []
<span style="color: #0000FF;">for</span> match, start, stop <span style="color: #0000FF;">in</span> chemicalFormula.scanString(s):
   matches.append(s[start:stop])

<span style="color: #0000FF;">print</span> <span style="color: #006FE0;">sorted</span>(matches, key=<span style="color: #0000FF;">lambda</span> x: <span style="color: #006FE0;">len</span>(x), reverse=<span style="color: #D0372D;">True</span>)
</pre>
</div>
<pre class="example">
['C2H5OH', 'PtCl4', 'H2SO4', 'C6H6', 'H2O', 'OH2', 'CH4', 'OH-', 'Uub', 'Uut', 'Uuq', 'Uup', 'Uuh', 'Uus', 'Uuo', 'H+', 'He', 'Li', 'Be', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'Cl', 'Ar', 'Ca', 'Sc', 'Ti', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'Xe', 'Cs', 'Ba', 'Lu', 'Hf', 'Ta', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Ac', 'Th', 'Pa', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'O', 'H', 'B', 'C', 'N', 'O', 'F', 'P', 'S', 'K', 'V', 'Y', 'I', 'W', 'U']
</pre>

<p>
That is pretty good. If the string was actually our buffer, we could use those to create a regexp to put text-properties on them. The trick is how to get the buffer string to the Python function, and then get back usable information in lisp. We actually explored this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/">before</a> ! Rather than use that, we will just create the lisp output manually since this is a simple list of strings.
</p>

<p>
The first thing we should do is work out a Python script that will output the lisp results we want, which are the found formulas (I tried getting the start and stop positions, but I don't think they map onto the buffer positions very well). Here it is. We set it up as a command line tool that takes a string. We use set to get a unique list, then sort the list by length so we try matching the longest patterns first. There are a few subtle differences in this script and the example above because of some odd false hits I unsuccessfully tried to get rid of.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> sys
<span style="color: #0000FF;">from</span> pyparsing <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">element_string</span> =  <span style="color: #008000;">"""H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No"""</span>
<span style="color: #BA36A5;">element</span> = oneOf([x <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> element_string.split()])

<span style="color: #BA36A5;">integer</span> = Word(nums)
<span style="color: #BA36A5;">elementRef</span> = Group(element + Optional(integer))
<span style="color: #BA36A5;">chemicalFormula</span> = (WordStart(alphas.upper()).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + OneOrMore(elementRef).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + Optional(Or([Literal(<span style="color: #008000;">"-"</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     Literal(<span style="color: #008000;">"+"</span>)])).leaveWhitespace()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      + WordEnd(alphas + alphas.lower() + nums + <span style="color: #008000;">"-+"</span>).leaveWhitespace())

<span style="color: #BA36A5;">s</span> = sys.stdin.read().strip()

<span style="color: #BA36A5;">matches</span> = []
<span style="color: #0000FF;">for</span> match, start, stop <span style="color: #0000FF;">in</span> chemicalFormula.scanString(s):
   matches.append(s[start:stop])
<span style="color: #BA36A5;">matches</span> = <span style="color: #006FE0;">list</span>(<span style="color: #006FE0;">set</span>(matches))
matches.sort(key=<span style="color: #0000FF;">lambda</span> x: <span style="color: #006FE0;">len</span>(x), reverse=<span style="color: #D0372D;">True</span>)

<span style="color: #0000FF;">print</span> <span style="color: #008000;">"'("</span> + <span style="color: #008000;">' '</span>.join([<span style="color: #008000;">"\"{}\""</span>.<span style="color: #006FE0;">format</span>(m) <span style="color: #0000FF;">for</span> m <span style="color: #0000FF;">in</span> matches]) + <span style="color: #008000;">')'</span>
</pre>
</div>

<p>
Now we can test this:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"Water is H2O, methane is CH4 and of course PtCl4, what about H+ and OH-? and carbon or Carbon. Water is H2O not h2o or mH2o, methane is CH4 and of course PtCl4, what about H+ and OH-? carbon, Carbon and SRC, or H2SO4? Is this C6H6? Ethanol is C2H5OH in a sentence.</span>

<span style="color: #008000;"> C2H5OH firs con</span>

<span style="color: #008000;">This is CH3OH</span>

<span style="color: #008000;">H He Li Be B C N O F Ne Na Mg Al Si P S Cl</span>
<span style="color: #008000;">            Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge</span>
<span style="color: #008000;">            As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag</span>
<span style="color: #008000;">            Cd In Sn Sb Te I Xe Cs Ba Lu Hf Ta W Re Os</span>
<span style="color: #008000;">            Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Lr Rf</span>
<span style="color: #008000;">            Db Sg Bh Hs Mt Ds Rg Uub Uut Uuq Uup Uuh Uus</span>
<span style="color: #008000;">            Uuo La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm</span>
<span style="color: #008000;">            Yb Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No</span>
<span style="color: #008000;">"</span> | ./parse_chemical_formulas.py
</pre>
</div>
<pre class="example">
'("C2H5OH" "CH3OH" "PtCl4" "H2SO4" "C6H6" "CH4" "OH-" "Uub" "Uuq" "Uup" "Uus" "Uuo" "Uuh" "H2O" "Uut" "Ru" "Re" "Rf" "Rg" "Ra" "Rb" "Rn" "Rh" "Be" "Ba" "Bh" "Bi" "Bk" "Br" "Ho" "Os" "Es" "Hg" "Ge" "Gd" "Ga" "Pr" "Pt" "Pu" "Pb" "Pa" "Pd" "Cd" "Po" "Pm" "Hs" "Hf" "He" "Md" "Mg" "Mo" "Mn" "Mt" "Zn" "H+" "Eu" "Zr" "Er" "Ni" "No" "Na" "Nb" "Nd" "Ne" "Np" "Fr" "Fe" "Fm" "Sr" "Kr" "Si" "Sn" "Sm" "Sc" "Sb" "Sg" "Se" "Co" "Cm" "Cl" "Ca" "Cf" "Ce" "Xe" "Tm" "Cs" "Cr" "Cu" "La" "Li" "Tl" "Lu" "Lr" "Th" "Ti" "Te" "Tb" "Tc" "Ta" "Yb" "Db" "Dy" "Ds" "Ac" "Ag" "Ir" "Am" "Al" "As" "Ar" "Au" "At" "In" "H" "P" "C" "K" "O" "S" "W" "B" "F" "N" "V" "I" "U" "Y")
</pre>

<p>
That seems to work great. Now, we have a list of chemical formulas. Now, the Emacs side to call that function. We do not use regexp-opt here because I found it optimizes too much, and doesn't always match the formulas. We want explicit matches on each formula.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">shell-command-on-region-to-string</span> (start end command)
  (<span style="color: #0000FF;">with-output-to-string</span>
    (shell-command-on-region start end command standard-output)))

(read (shell-command-on-region-to-string
        (point-min) (point-max)
        <span style="color: #008000;">"./parse_chemical_formulas.py"</span>))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">quote</td>
<td class="left">(C2H5OH ext; t CH3OH PtCl4 H2SO4 the   fir C6H6 CH4 OH- OH2 Uub  co Uuq Uup Uus Uuo Uuh ord H2O Uut Ru Re Rf Rg Ra Rb Rn Rh Be Ba Bh Bi Bk Br Ho Os Es Hg Ge Gd Ga Pr  t Pt Pu Pb Pa Pd Cd Po Pm Hs Hf He Md Mg Mo Mn Mt Zn H+ Eu Zr Er Ni No Na Nb Nd Ne Np Fr Fe Fm Sr Kr Si Sn Sm Sc Sb Sg Se Co Cm Cl Ca Cf Ce Xe Tm Cs Cr Cu La Li Tl Lu Lr Th Ti Te Tb Tc as Ta Yb Db Dy Ds In Ac Ag Ir Am Al As Ar Au At n H P l t C r K O S W w B F N V   I U Y e i)</td>
</tr>
</tbody>
</table>


<p>
That is certainly less than perfect, you can see a few false hits that are not too easy to understand, e.g. why is "fir" or "the " or "as"  in the list? They don't even start with an uppercase letter. One day maybe I will figure it out. I assume it is a logic flaw in my parser. Until then, let's go ahead and make the text functional, so it looks up the formula in the NIST webbook. The regexp is a little funny, we have to add word-boundaries to each formula to avoid some funny, bad matches.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">chemical-formula-button</span> nil <span style="color: #036A07;">"store button for removal later."</span>)

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">nist-webbook</span>)
(<span style="color: #0000FF;">setq</span> chemical-formula-button
      (button-lock-set-button
       (mapconcat
        (<span style="color: #0000FF;">lambda</span> (formula)
          (concat <span style="color: #008000;">"\\&lt;"</span> (regexp-quote formula) <span style="color: #008000;">"\\&gt;"</span>))
        (eval (read (shell-command-on-region-to-string
                     (point-min) (point-max)
                     <span style="color: #008000;">"./parse_chemical_formulas.py"</span>)))
        <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">"</span>)
       (<span style="color: #0000FF;">lambda</span> () (<span style="color: #0000FF;">interactive</span>)
         (nist-webbook-formula
          (get-surrounding-text-with-property
           'chemical-formula)))
       <span style="color: #006FE0;">:face</span> '((<span style="color: #006FE0;">:underline</span> t) (<span style="color: #006FE0;">:background</span> <span style="color: #008000;">"gray80"</span>))
       <span style="color: #006FE0;">:help-echo</span> <span style="color: #008000;">"A chemical formula"</span>
       <span style="color: #006FE0;">:additional-property</span> 'chemical-formula))
</pre>
</div>

<p>
Here are a few tests: CH4, C2H5OH, C6H6. C(CH3)4. C6H6 is benzene. As you can see our pattern lacks context; the first word of the sentence is "as" not the symbol for arsenic. Also, our parser does not consider formulas with parentheses in them. Whenever I refer to myself, I mean myself, and not the element iodine. There are a few weird matchs I just don't understand, like firs d t x rn lac? These do not seem to match anything, and I wonder how they are getting in the list. I think this really shows that it would be useful to use some light markup for chemical formulas which would a) provide context, and b) enhance parsing accuracy. In LaTeX you would use \ce{I} to indicate that is iodine, and not a reference to myself. That is more clear than saying I use I in chemical reactions ;) And it also clarifies sentences like the letter W is used to represent tungsten as the symbol \ce{W}.
</p>

<p>
Nevertheless, we can click on the formulas, and get something to happen that is potentially useful. Is this actually useful? Conceptually yes, I think it could be, but clearly the parsing is not recognizing formulas perfectly. Sending the buffer to a dedicated program that can return a list of matches to highlight in Emacs is a good idea, especially if it is not easy to build in Emacs, or if a proven solution already exists.
</p>


<p>
Finally, we can remove the highlighted text like this. That was the reason for saving the button earlier!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">when</span> chemical-formula-button
  (button-lock-unset-button chemical-formula-button)
  (<span style="color: #0000FF;">setq</span> chemical-formula-button nil))
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
