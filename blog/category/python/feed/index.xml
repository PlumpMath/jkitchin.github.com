<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Fri, 03 Apr 2015 19:20:04 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Getting data from the Scopus API</title>
      <link>http://jkitchin.github.io/blog/2015/04/03/Getting-data-from-the-Scopus-API</link>
      <pubDate>Fri, 03 Apr 2015 15:17:27 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[scopus]]></category>
      <guid isPermaLink="false">yz0X1AH8ySiPZR9T5-FNMbD9Bc8=</guid>
      <description>Getting data from the Scopus API</description>
      <content:encoded><![CDATA[



<p>
I have been exploring the Scopus API (<a href="http://dev.elsevier.com/index.html">http://dev.elsevier.com/index.html</a> ) lately. This is a RESTful API that allows you to retrieve data about publications via http requests, i.e. from a script. This service is not free; you need to be at an institution that has a Scopus license.
</p>

<p>
Scopus is very good at finding your papers, and associating them with a Scopus ID. You don't have to do anything to get one, they make it. I have a Scopus ID (<a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771</a> ) that has all this data via the web, but I wanted to get this data in a tabular form I could use and analyze. Sure you can download a CSV file from that page and analyze that, but I want to script it. I am just like that ;) To use the API, you need to get an API key (<a href="http://www.developers.elsevier.com/action/devprojects">http://www.developers.elsevier.com/action/devprojects</a> ). I still cannot figure out if this key is "private" so I am not going to share mine here. I have stored it in a python file called my_scopus.py, and I will import it in these examples.
</p>

<p>
The code below is "wide", so apologies in advance that some of it will run out of the usual area it belongs.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> About me from Scopus</h2>
<div class="outline-text-2" id="text-1">
<p>
There is an author API that provides a metrics view of a Scopus ID. Here this shows there are about 77 documents for me, cited about 3028 times. Why do I say "about"? Apparently there are two different databases that Scopus uses, one for the web, and one for this API, and they do not return the same data. It is close, but not the same. The API database includes thing that are published after 1995, and it may not be updated as quickly as the web database. For example the web page reports 79 documents and 3143 citations. In the next sections we will use the search API, which returns the same information as what is on the web. Here we just illustrate how to setup an http request in Python. I like json output, so we ask for it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://api.elsevier.com/content/author?author_id=7004212771&amp;view=metrics"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #0000FF;">print</span> json.dumps(resp.json(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    sort_keys=<span style="color: #D0372D;">True</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    indent=4, separators=(<span style="color: #008000;">','</span>, <span style="color: #008000;">': '</span>))
</pre>
</div>

<pre class="example">
{
    "author-retrieval-response": [
        {
            "@_fa": "true",
            "@status": "found",
            "coauthor-count": "90",
            "coredata": {
                "citation-count": "3028",
                "cited-by-count": "2369",
                "dc:identifier": "AUTHOR_ID:7004212771",
                "document-count": "77",
                "prism:url": "http://api.elsevier.com/content/author/author_id/7004212771"
            },
            "h-index": "18"
        }
    ]
}
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Get my documents from Scopus</h2>
<div class="outline-text-2" id="text-2">
<p>
To find my documents, we will use the Search API, <a href="http://api.elsevier.com/documentation/SCOPUSSearchAPI.wadl">http://api.elsevier.com/documentation/SCOPUSSearchAPI.wadl</a> . We specify a Scopus ID, and to limit the quantity of data that comes back we specify that we want the dc:identifier field, which corresponds to the scopus id for each document. We will use that in the next section to get info for each document.
</p>

<div class="org-src-container">

<pre class="src src-python" id="identifiers"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY
<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://api.elsevier.com/content/search/scopus?query=AU-ID(7004212771)&amp;field=dc:identifier&amp;count=100"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #0000FF;">return</span> [[<span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'dc:identifier'</span>])] <span style="color: #0000FF;">for</span> r <span style="color: #0000FF;">in</span> results[<span style="color: #008000;">'search-results'</span>][<span style="color: #008000;">"entry"</span>]]
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">SCOPUS_ID:84924911828</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84923164062</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84924778427</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84924130725</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84901638552</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84898934670</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84896759135</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84896380535</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84896585411</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84916613197</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84908637059</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84880986072</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84881394200</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84873706643</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84876703352</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872843990</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872872509</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872845400</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872841108</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872855250</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872864754</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84886483703</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84872854676</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84867809683</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84864914806</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84865730756</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84864592302</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84863684845</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84866142469</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84861127526</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84857224144</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84857197729</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:84856818654</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:80052944171</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:80051860134</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:80051809046</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79953651013</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952860396</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79951537083</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79251517782</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:77956568341</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:77954747189</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:77956693843</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:77949916234</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:77955464573</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:72049114200</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:78649528829</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:78649504144</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:77952266872</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:73149124752</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:73149109096</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:67449106405</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:63649114440</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:60849113132</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:58649114498</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952218110</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952292116</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:78049295221</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952296916</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952225819</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:78049231913</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952234104</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:79952301915</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:45149129361</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:40949100780</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:37349101648</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:58049109348</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:33750804660</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:33645645065</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:20544467859</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:15744396507</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:9744261716</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:13444307808</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:3042820285</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:2942640180</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:0142023762</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:0141924604</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:0037368024</td>
</tr>

<tr>
<td class="left">SCOPUS_ID:0037197884</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Retrieve info for a document</h2>
<div class="outline-text-2" id="text-3">
<p>
Here, we work out how to retrieve data for a document. We use the Abstract API (<a href="http://api.elsevier.com/documentation/AbstractRetrievalAPI.wadl">http://api.elsevier.com/documentation/AbstractRetrievalAPI.wadl</a> ). We again use a field to limit the amount of data. Here is an example that works for an article. Scopus also lists books and conferences so, we will see how that works later. Note the unicode stuff. I was getting some errors about non-ascii characters causing the json file not to read, and then issues in constructing the string. This was only a problem for some entries.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_scopus_info</span>(SCOPUS_ID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">url</span> = (<span style="color: #008000;">"http://api.elsevier.com/content/abstract/scopus_id/"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     + SCOPUS_ID
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     + <span style="color: #008000;">"?field=authors,title,publicationName,volume,issueIdentifier,"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     + <span style="color: #008000;">"prism:pageRange,coverDate,article-number,doi,citedby-count,prism:aggregationType"</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">resp</span> = requests.get(url,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = json.loads(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">fstring</span> = <span style="color: #008000;">'{authors}, {title}, {journal}, {volume}, {articlenum}, ({date}). {doi} (cited {cites} times).\n'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> fstring.<span style="color: #006FE0;">format</span>(authors=<span style="color: #008000;">', '</span>.join([au[<span style="color: #008000;">'ce:indexed-name'</span>] <span style="color: #0000FF;">for</span> au <span style="color: #0000FF;">in</span> results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'authors'</span>][<span style="color: #008000;">'author'</span>]]),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     title=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'dc:title'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     journal=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:publicationName'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     volume=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:volume'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     articlenum=(results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:pageRange'</span>) <span style="color: #0000FF;">or</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'article-number'</span>)).encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     date=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:coverDate'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     doi=<span style="color: #008000;">'doi:'</span> + results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:doi'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     cites=<span style="color: #006FE0;">int</span>(results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'citedby-count'</span>].encode(<span style="color: #008000;">'utf-8'</span>)))



<span style="color: #0000FF;">print</span> get_scopus_info(<span style="color: #008000;">'SCOPUS_ID:0037368024'</span>)
</pre>
</div>

<pre class="example">
Kitchin J.R., Barteau M.A., Chen J.G., A comparison of gold and molybdenum nanoparticles on TiO2(1 1 0) 1 × 2 reconstructed single crystal surfaces, Surface Science, 526, 323-331, (2003-03-01). doi:10.1016/S0039-6028(02)02679-1 (cited 27 times).
</pre>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Get information for all documents</h2>
<div class="outline-text-2" id="text-4">
<p>
We will use the data we previously got in the long list of Scopus IDs. A few subtle points here are that I made that a nested list so it would print as a column, and so we will have to index each entry to get the scopus id. Also, it seems that some entries generate json that cannot be parsed by python, so we wrap this in a try block and skip those entries. We need to check for the entry being a Journal article, to avoid errors with our format string. We also need to accomodate journals that do not have page ranges, but have artice numbers instead. Finally, we will format each entry so there is some html code for it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">import</span> textwrap
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_scopus_info</span>(SCOPUS_ID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">url</span> = (<span style="color: #008000;">"http://api.elsevier.com/content/abstract/scopus_id/"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     + SCOPUS_ID
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     + <span style="color: #008000;">"?field=authors,title,publicationName,volume,issueIdentifier,"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     + <span style="color: #008000;">"prism:pageRange,coverDate,article-number,doi,citedby-count,prism:aggregationType"</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">resp</span> = requests.get(url,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> json.loads(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))


<span style="color: #BA36A5;">i</span> = 0
<span style="color: #0000FF;">for</span> sid <span style="color: #0000FF;">in</span> scopus_ids:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">some entries seem to have json parse errors, so we catch those</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_scopus_info(sid[0])  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">index 0 because the input data is a 2d array</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:aggregationType'</span>] == <span style="color: #008000;">'Journal'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">i</span> += 1
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">fstring</span> = <span style="color: #008000;">'{authors}, {title}, {journal}, {volume}, {articlenum}, ({date}). &lt;a href="http://dx.doi.org/{doi}"&gt;{doi}&lt;/a&gt; (cited {cites} times)\n\n'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = fstring.<span style="color: #006FE0;">format</span>(authors=<span style="color: #008000;">', '</span>.join([au[<span style="color: #008000;">'ce:indexed-name'</span>].encode(<span style="color: #008000;">'utf-8'</span>) <span style="color: #0000FF;">for</span> au <span style="color: #0000FF;">in</span> results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'authors'</span>][<span style="color: #008000;">'author'</span>]]),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      title=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'dc:title'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      journal=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:publicationName'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      volume=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:volume'</span>, <span style="color: #008000;">'None'</span>).encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      articlenum=<span style="color: #006FE0;">str</span>((results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:pageRange'</span>) <span style="color: #0000FF;">or</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'article-number'</span>))).encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      date=results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:coverDate'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      doi=<span style="color: #008000;">'doi:'</span> + results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:doi'</span>].encode(<span style="color: #008000;">'utf-8'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      cites=<span style="color: #006FE0;">int</span>(results[<span style="color: #008000;">'abstracts-retrieval-response'</span>][<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'citedby-count'</span>].encode(<span style="color: #008000;">'utf-8'</span>)))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">'{0:3d}. {1}&lt;br&gt;'</span>.<span style="color: #006FE0;">format</span>(i, s)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">except</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">'{0:3d}. {1}'</span>.<span style="color: #006FE0;">format</span>(i, sid)
</pre>
</div>

  1. Xu Z., Kitchin J.R., Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides, Journal of Chemical Physics, 142, 104703, (2015-03-14). <a href="http://dx.doi.org/doi:10.1063/1.4914093">doi:10.1063/1.4914093</a> (cited 0 times)

<br>
  2. Boes J.R., Gumuslu G., Miller J.B., Gellman A.J., Kitchin J.R., Estimating bulk-composition-dependent H2 adsorption energies on CuxPd1- x alloy (111) surfaces, ACS Catalysis, 5, 1020-1026, (2015-02-06). <a href="http://dx.doi.org/doi:10.1021/cs501585k">doi:10.1021/cs501585k</a> (cited 0 times)

<br>
  3. Boes J.R., Kondratyuk P., Yin C., Miller J.B., Gellman A.J., Kitchin J.R., Core level shifts in Cu-Pd alloys as a function of bulk composition and structure, Surface Science, None, None, (2015-01-01). <a href="http://dx.doi.org/doi:10.1016/j.susc.2015.02.011">doi:10.1016/j.susc.2015.02.011</a> (cited 0 times)

<br>
  4. Xu Z., Rossmeisl J., Kitchin J.R., A linear response DFT+U study of trends in the oxygen evolution activity of transition metal rutile dioxides, Journal of Physical Chemistry C, 119, 4827-4833, (2015-01-01). <a href="http://dx.doi.org/doi:10.1021/jp511426q">doi:10.1021/jp511426q</a> (cited 0 times)

<br>
  5. Xu Z., Kitchin J.R., Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces, Catalysis Communications, 52, 60-64, (2014-07-05). <a href="http://dx.doi.org/doi:10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a> (cited 2 times)

<br>
  6. Demeter E.L., Hilburg S.L., Washburn N.R., Collins T.J., Kitchin J.R., Electrocatalytic oxygen evolution with an immobilized TAML activator, Journal of the American Chemical Society, 136, 5603-5606, (2014-04-16). <a href="http://dx.doi.org/doi:10.1021/ja5015986">doi:10.1021/ja5015986</a> (cited 4 times)

<br>
  7. Thompson R.L., Shi W., Albenze E., Kusuma V.A., Hopkinson D., Damodaran K., Lee A.S., Kitchin J.R., Luebke D.R., Nulwala H., Probing the effect of electron donation on CO2 absorbing 1,2,3-triazolide ionic liquids, RSC Advances, 4, 12748-12755, (2014-03-17). <a href="http://dx.doi.org/doi:10.1039/c3ra47097k">doi:10.1039/c3ra47097k</a> (cited 1 times)

<br>
  8. Mehta P., Salvador P.A., Kitchin J.R., Identifying potential BO2 oxide polymorphs for epitaxial growth candidates, ACS Applied Materials and Interfaces, 6, 3630-3639, (2014-03-12). <a href="http://dx.doi.org/doi:10.1021/am4059149">doi:10.1021/am4059149</a> (cited 0 times)

<br>
  9. Miller S.D., Pushkarev V.V., Gellman A.J., Kitchin J.R., Simulating temperature programmed desorption of oxygen on Pt(111) using DFT derived coverage dependent desorption barriers, Topics in Catalysis, 57, 106-117, (2014-02-01). <a href="http://dx.doi.org/doi:10.1007/s11244-013-0166-3">doi:10.1007/s11244-013-0166-3</a> (cited 2 times)

<br>
 10. Curnan M.T., Kitchin J.R., Effects of concentration, crystal structure, magnetism, and electronic structure method on first-principles oxygen vacancy formation energy trends in perovskites, Journal of Physical Chemistry C, 118, 28776-28790, (2014-01-01). <a href="http://dx.doi.org/doi:10.1021/jp507957n">doi:10.1021/jp507957n</a> (cited 2 times)

<br>
 11. Xu Z., Kitchin J.R., Probing the coverage dependence of site and adsorbate configurational correlations on (111) surfaces of late transition metals, Journal of Physical Chemistry C, 118, 25597-25602, (2014-01-01). <a href="http://dx.doi.org/doi:10.1021/jp508805h">doi:10.1021/jp508805h</a> (cited 0 times)

<br>
 12. Lee A.S., Eslick J.C., Miller D.C., Kitchin J.R., Comparisons of amine solvents for post-combustion CO2 capture: A multi-objective analysis approach, International Journal of Greenhouse Gas Control, 18, 68-74, (2013-10-01). <a href="http://dx.doi.org/doi:10.1016/j.ijggc.2013.06.020">doi:10.1016/j.ijggc.2013.06.020</a> (cited 3 times)

<br>
 13. Hallenbeck A.P., Kitchin J.R., Effects of O2 and SO2 on the capture capacity of a primary-amine based polymeric CO2 sorbent, Industrial and Engineering Chemistry Research, 52, 10788-10794, (2013-08-07). <a href="http://dx.doi.org/doi:10.1021/ie400582a">doi:10.1021/ie400582a</a> (cited 7 times)

<br>
 13. ['SCOPUS_ID:84873706643']
 14. Calle-Vallejo F., Inoglu N.G., Su H.-Y., Martinez J.I., Man I.C., Koper M.T.M., Kitchin J.R., Rossmeisl J., Number of outer electrons as descriptor for adsorption processes on transition metals and their oxides, Chemical Science, 4, 1245-1249, (2013-03-01). <a href="http://dx.doi.org/doi:10.1039/c2sc21601a">doi:10.1039/c2sc21601a</a> (cited 16 times)

<br>
 15. Lee A.S., Kitchin J.R., Chemical and molecular descriptors for the reactivity of amines with CO
                    2 , Industrial and Engineering Chemistry Research, 51, 13609-13618, (2012-10-24). <a href="http://dx.doi.org/doi:10.1021/ie301419q">doi:10.1021/ie301419q</a> (cited 3 times)

<br>
 16. Rubin E.S., Mantripragada H., Marks A., Versteeg P., Kitchin J., The outlook for improved carbon capture technology, Progress in Energy and Combustion Science, 38, 630-671, (2012-10-01). <a href="http://dx.doi.org/doi:10.1016/j.pecs.2012.03.003">doi:10.1016/j.pecs.2012.03.003</a> (cited 91 times)

<br>
 17. Akhade S.A., Kitchin J.R., Effects of strain, d-band filling, and oxidation state on the surface electronic structure and reactivity of 3d perovskite surfaces, Journal of Chemical Physics, 137, 084703, (2012-08-28). <a href="http://dx.doi.org/doi:10.1063/1.4746117">doi:10.1063/1.4746117</a> (cited 8 times)

<br>
 18. Landon J., Demeter E., Inoglu N., Keturakis C., Wachs I.E., Vasic R., Frenkel A.I., Kitchin J.R., Spectroscopic characterization of mixed Fe-Ni oxide electrocatalysts for the oxygen evolution reaction in alkaline electrolytes, ACS Catalysis, 2, 1793-1801, (2012-08-03). <a href="http://dx.doi.org/doi:10.1021/cs3002644">doi:10.1021/cs3002644</a> (cited 39 times)

<br>
 19. Chao R., Munprom R., Petrova R., Gerdes K., Kitchin J.R., Salvador P.A., Structure and relative thermal stability of mesoporous (La, Sr) MnO 3powders prepared using evaporation-induced self-assembly methods, Journal of the American Ceramic Society, 95, 2339-2346, (2012-07-01). <a href="http://dx.doi.org/doi:10.1111/j.1551-2916.2012.05236.x">doi:10.1111/j.1551-2916.2012.05236.x</a> (cited 4 times)

<br>
 20. Kitchin J., Preface: Trends in computational catalysis, Topics in Catalysis, 55, 227-228, (2012-06-01). <a href="http://dx.doi.org/doi:10.1007/s11244-012-9808-0">doi:10.1007/s11244-012-9808-0</a> (cited 0 times)

<br>
 21. Alesi W.R., Kitchin J.R., Evaluation of a primary amine-functionalized ion-exchange resin for CO
                    2 capture, Industrial and Engineering Chemistry Research, 51, 6907-6915, (2012-05-16). <a href="http://dx.doi.org/doi:10.1021/ie300452c">doi:10.1021/ie300452c</a> (cited 15 times)

<br>
 22. Akhade S.A., Kitchin J.R., Effects of strain, d-band filling, and oxidation state on the bulk electronic structure of cubic 3d perovskites, Journal of Chemical Physics, 135, 104702, (2011-09-14). <a href="http://dx.doi.org/doi:10.1063/1.3631948">doi:10.1063/1.3631948</a> (cited 3 times)

<br>
 23. Man I.C., Su H.-Y., Calle-Vallejo F., Hansen H.A., Martinez J.I., Inoglu N.G., Kitchin J., Jaramillo T.F., Norskov J.K., Rossmeisl J., Universality in Oxygen Evolution Electrocatalysis on Oxide Surfaces, ChemCatChem, 3, 1159-1165, (2011-07-11). <a href="http://dx.doi.org/doi:10.1002/cctc.201000397">doi:10.1002/cctc.201000397</a> (cited 199 times)

<br>
 24. Inoglu N., Kitchin J.R., Identification of sulfur-tolerant bimetallic surfaces using dft parametrized models and atomistic thermodynamics, ACS Catalysis, 1, 399-407, (2011-04-01). <a href="http://dx.doi.org/doi:10.1021/cs200039t">doi:10.1021/cs200039t</a> (cited 9 times)

<br>
 25. Miller S.D., Inoglu N., Kitchin J.R., Configurational correlations in the coverage dependent adsorption energies of oxygen atoms on late transition metal fcc(111) surfaces, Journal of Chemical Physics, 134, 104709, (2011-03-14). <a href="http://dx.doi.org/doi:10.1063/1.3561287">doi:10.1063/1.3561287</a> (cited 16 times)

<br>
 26. Alesi Jr. W.R., Gray M., Kitchin J.R., CO2 adsorption on supported molecular amidine systems on activated carbon, ChemSusChem, 3, 948-956, (2010-08-01). <a href="http://dx.doi.org/doi:10.1002/cssc.201000056">doi:10.1002/cssc.201000056</a> (cited 18 times)

<br>
 27. Landon J., Kitchin J.R., Electrochemical concentration of carbon dioxide from an oxygen/carbon dioxide containing gas stream, Journal of the Electrochemical Society, 157, None, (2010-07-23). <a href="http://dx.doi.org/doi:10.1149/1.3432440">doi:10.1149/1.3432440</a> (cited 3 times)

<br>
 28. Inoglu N., Kitchin J.R., Simple model explaining and predicting coverage-dependent atomic adsorption energies on transition metal surfaces, Physical Review B - Condensed Matter and Materials Physics, 82, 045414, (2010-07-16). <a href="http://dx.doi.org/doi:10.1103/PhysRevB.82.045414">doi:10.1103/PhysRevB.82.045414</a> (cited 14 times)

<br>
 29. Pennline H.W., Granite E.J., Luebke D.R., Kitchin J.R., Landon J., Weiland L.M., Separation of CO2 from flue gas using electrochemical cells, Fuel, 89, 1307-1314, (2010-06-01). <a href="http://dx.doi.org/doi:10.1016/j.fuel.2009.11.036">doi:10.1016/j.fuel.2009.11.036</a> (cited 20 times)

<br>
 30. Inoglu N., Kitchin J.R., New solid-state table: Estimating d-band characteristics for transition metal atoms, Molecular Simulation, 36, 633-638, (2010-06-01). <a href="http://dx.doi.org/doi:10.1080/08927022.2010.481794">doi:10.1080/08927022.2010.481794</a> (cited 16 times)

<br>
 31. Tierney H.L., Baber A.E., Kitchin J.R., Sykes E.C.H., Hydrogen dissociation and spillover on individual isolated palladium atoms, Physical Review Letters, 103, 246102, (2009-12-10). <a href="http://dx.doi.org/doi:10.1103/PhysRevLett.103.246102">doi:10.1103/PhysRevLett.103.246102</a> (cited 45 times)

<br>
 32. Miller S.D., Kitchin J.R., Uncertainty and figure selection for DFT based cluster expansions for oxygen adsorption on Au and Pt (111) surfaces, Molecular Simulation, 35, 920-927, (2009-09-01). <a href="http://dx.doi.org/doi:10.1080/08927020902833137">doi:10.1080/08927020902833137</a> (cited 14 times)

<br>
 33. Inolu N., Kitchin J.R., Sulphur poisoning of water-gas shift catalysts: Site blocking and electronic structure modification, Molecular Simulation, 35, 936-941, (2009-09-01). <a href="http://dx.doi.org/doi:10.1080/08927020902833129">doi:10.1080/08927020902833129</a> (cited 6 times)

<br>
 34. Kitchin J.R., Correlations in coverage-dependent atomic adsorption energies on Pd(111), Physical Review B - Condensed Matter and Materials Physics, 79, 205412, (2009-05-01). <a href="http://dx.doi.org/doi:10.1103/PhysRevB.79.205412">doi:10.1103/PhysRevB.79.205412</a> (cited 26 times)

<br>
 35. Han J.W., Kitchin J.R., Sholl D.S., Step decoration of chiral metal surfaces, Journal of Chemical Physics, 130, 124710, (2009-04-08). <a href="http://dx.doi.org/doi:10.1063/1.3096964">doi:10.1063/1.3096964</a> (cited 11 times)

<br>
 36. Miller S.D., Kitchin J.R., Relating the coverage dependence of oxygen adsorption on Au and Pt fcc(1 1 1) surfaces through adsorbate-induced surface electronic structure effects, Surface Science, 603, 794-801, (2009-03-01). <a href="http://dx.doi.org/doi:10.1016/j.susc.2009.01.021">doi:10.1016/j.susc.2009.01.021</a> (cited 39 times)

<br>
 37. Inoglu N., Kitchin J.R., Atomistic thermodynamics study of the adsorption and the effects of water-gas shift reactants on Cu catalysts under reaction conditions, Journal of Catalysis, 261, 188-194, (2009-01-25). <a href="http://dx.doi.org/doi:10.1016/j.jcat.2008.11.020">doi:10.1016/j.jcat.2008.11.020</a> (cited 20 times)

<br>
 38. Kitchin J.R., Reuter K., Scheffler M., Alloy surface segregation in reactive environments: First-principles atomistic thermodynamics study of Ag3 Pd(111) in oxygen atmospheres, Physical Review B - Condensed Matter and Materials Physics, 77, 075437, (2008-02-29). <a href="http://dx.doi.org/doi:10.1103/PhysRevB.77.075437">doi:10.1103/PhysRevB.77.075437</a> (cited 49 times)

<br>
 39. Norskov J.K., Bligaard T., Logadottir A., Kitchin J.R., Chen J.G., Pandelov S., Stimming U., Response to "comment on 'trends in the exchange current for hydrogen evolution' [J. Electrochem. Soc., 152, J23 (2005)]", Journal of the Electrochemical Society, 153, 054612JES, (2006-11-14). <a href="http://dx.doi.org/doi:10.1149/1.2358292">doi:10.1149/1.2358292</a> (cited 9 times)

<br>
 40. Kitchin J.R., Norskov J.K., Barteau M.A., Chen J.G., Trends in the chemical properties of early transition metal carbide surfaces: A density functional study, Catalysis Today, 105, 66-73, (2005-07-15). <a href="http://dx.doi.org/doi:10.1016/j.cattod.2005.04.008">doi:10.1016/j.cattod.2005.04.008</a> (cited 70 times)

<br>
 41. Norskov J.K., Bligaard T., Logadottir A., Kitchin J.R., Chen J.G., Pandelov S., Stimming U., Trends in the exchange current for hydrogen evolution, Journal of the Electrochemical Society, 152, None, (2005-04-07). <a href="http://dx.doi.org/doi:10.1149/1.1856988">doi:10.1149/1.1856988</a> (cited 282 times)

<br>
 42. Norskov J.K., Rossmeisl J., Logadottir A., Lindqvist L., Kitchin J.R., Bligaard T., Jonsson H., Origin of the overpotential for oxygen reduction at a fuel-cell cathode, Journal of Physical Chemistry B, 108, 17886-17892, (2004-11-18). <a href="http://dx.doi.org/doi:10.1021/jp047349j">doi:10.1021/jp047349j</a> (cited 1055 times)

<br>
 43. Kitchin J.R., Norskov J.K., Barteau M.A., Chen J.G., Role of strain and ligand effects in the modification of the electronic and chemical Properties of bimetallic surfaces, Physical Review Letters, 93, None, (2004-10-08). <a href="http://dx.doi.org/doi:10.1103/PhysRevLett.93.156801">doi:10.1103/PhysRevLett.93.156801</a> (cited 361 times)

<br>
 44. Mhadeshwar A.B., Kitchin J.R., Barteau M.A., Vlachos D.G., The role of adsorbate-adsorbate interactions in the rate controlling step and the most abundant reaction intermediate of NH 3 decomposition on RU, Catalysis Letters, 96, 13-22, (2004-07-01). <a href="http://dx.doi.org/doi:10.1023/B:CATL.0000029523.22277.e1">doi:10.1023/B:CATL.0000029523.22277.e1</a> (cited 45 times)

<br>
 45. Kitchin J.R., Norskov J.K., Barteau M.A., Chen J.G., Modification of the surface electronic and chemical properties of Pt(111) by subsurface 3d transition metals, Journal of Chemical Physics, 120, 10240-10246, (2004-06-01). <a href="http://dx.doi.org/doi:10.1063/1.1737365">doi:10.1063/1.1737365</a> (cited 443 times)

<br>
 46. McCormick J.R., Kitchin J.R., Barteau M.A., Chen J.G., A four-point probe correlation of oxygen sensitivity to changes in surface resistivity of TiO2(0 0 1) and Pd-modified TiO2(0 0 1), Surface Science, 545, None, (2003-11-01). <a href="http://dx.doi.org/doi:10.1016/j.susc.2003.08.041">doi:10.1016/j.susc.2003.08.041</a> (cited 11 times)

<br>
 47. Kitchin J.R., Khan N.A., Barteau M.A., Chen J.G., Yakshinskiy B., Madey T.E., Elucidation of the active surface and origin of the weak metal-hydrogen bond on Ni/Pt(1 1 1) bimetallic surfaces: A surface science and density functional theory study, Surface Science, 544, 295-308, (2003-10-20). <a href="http://dx.doi.org/doi:10.1016/j.susc.2003.09.007">doi:10.1016/j.susc.2003.09.007</a> (cited 108 times)

<br>
 48. Kitchin J.R., Barteau M.A., Chen J.G., A comparison of gold and molybdenum nanoparticles on TiO2(1 1 0) 1 × 2 reconstructed single crystal surfaces, Surface Science, 526, 323-331, (2003-03-01). <a href="http://dx.doi.org/doi:10.1016/S0039-6028(02)02679-1">doi:10.1016/S0039-6028(02)02679-1</a> (cited 27 times)

<br>
 49. Song I.K., Kitchin J.R., Barteau M.A., H3PW12O40-functionalized tip for scanning tunneling microscopy, Proceedings of the National Academy of Sciences of the United States of America, 99, 6471-6475, (2002-04-30). <a href="http://dx.doi.org/doi:10.1073/pnas.072514399">doi:10.1073/pnas.072514399</a> (cited 12 times)

<br>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-5">
<p>
I see a lot of potential here for analytics on publications, generation of bibliography files, etc&#x2026; Instead of retrieving this data every time, it would make much more sense to cache it, e.g. writing each result to a file that could then be used locally, and much faster. The downside of that is, the citations would not be updated in those files. The upside is, you could fix the titles so they are properly marked up. I do not know what the issues with some of the json files was. Some of them were unicode issues. Some other day I will try to track down the other ones.
</p>

<p>
The entries could be made a lot more functional than this. Each author could be turned into a link back to the scopus author page, for example, the title could be linked to the scopus abstract page, etc&#x2026; The citations could be a button that automatically updates (like the one in this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/03/30/1000+-citations-for-fuel-cell-paper-on-the-oxygen-reduction-reaction/">post</a> ). That is another exercise, for another day!
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/03/Getting-data-from-the-Scopus-API.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>The orcid api and generating a bibtex file from it</title>
      <link>http://jkitchin.github.io/blog/2015/03/28/The-orcid-api-and-generating-a-bibtex-file-from-it</link>
      <pubDate>Sat, 28 Mar 2015 14:21:59 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[orcid]]></category>
      <guid isPermaLink="false">QvPYQtkY1L_cSrDVZVsyhe1DRIY=</guid>
      <description>The orcid api and generating a bibtex file from it</description>
      <content:encoded><![CDATA[



<p>
I found this interesting package <a href="https://pypi.python.org/pypi/orcid-python">orcid-python 0.1 : Python Package Index</a> . Unfortunately, it seems to have some issues and it did not work for me. But, the idea is pretty simple, there is a restful API (see <a href="http://members.orcid.org/api/tutorial-retrieve-data-public-api-curl-12-and-earlier">http://members.orcid.org/api/tutorial-retrieve-data-public-api-curl-12-and-earlier</a> ) that we can use to retrieve data. We explore that a bit here.
</p>

<p>
I have an <a href="http://orcid.org/0000-0003-2625-9232">orcid:0000-0003-2625-9232</a> which contains my data. First, we just retrieve some basic information using Python.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://pub.orcid.org/0000-0003-2625-9232"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/orcid+json'</span>})

<span style="color: #0000FF;">print</span> json.dumps(resp.json(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    sort_keys=<span style="color: #D0372D;">True</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    indent=4, separators=(<span style="color: #008000;">','</span>, <span style="color: #008000;">': '</span>))
</pre>
</div>
<pre class="example">
{
    "message-version": "1.1",
    "orcid-profile": {
        "client-type": null,
        "group-type": null,
        "orcid": null,
        "orcid-activities": {
            "affiliations": null
        },
        "orcid-bio": {
            "applications": null,
            "contact-details": {
                "address": {
                    "country": {
                        "value": "US",
                        "visibility": null
                    }
                },
                "email": []
            },
            "delegation": null,
            "external-identifiers": {
                "external-identifier": [
                    {
                        "external-id-common-name": {
                            "value": "ResearcherID"
                        },
                        "external-id-orcid": {
                            "host": "orcid.org",
                            "path": "0000-0001-7707-4137",
                            "uri": "http://orcid.org/0000-0001-7707-4137",
                            "value": null
                        },
                        "external-id-reference": {
                            "value": "A-2363-2010"
                        },
                        "external-id-url": {
                            "value": "http://www.researcherid.com/rid/A-2363-2010"
                        }
                    },
                    {
                        "external-id-common-name": {
                            "value": "Scopus Author ID"
                        },
                        "external-id-orcid": {
                            "host": "orcid.org",
                            "path": "0000-0002-5982-8983",
                            "uri": "http://orcid.org/0000-0002-5982-8983",
                            "value": null
                        },
                        "external-id-reference": {
                            "value": "7004212771"
                        },
                        "external-id-url": {
                            "value": "http://www.scopus.com/inward/authorDetails.url?authorID=7004212771&amp;partnerID=MN8TOARS"
                        }
                    }
                ],
                "visibility": null
            },
            "keywords": {
                "keyword": [
                    {
                        "value": "Computational catalysis, electrochemistry, CO2 capture"
                    }
                ],
                "visibility": null
            },
            "personal-details": {
                "family-name": {
                    "value": "Kitchin"
                },
                "given-names": {
                    "value": "John"
                }
            },
            "researcher-urls": {
                "researcher-url": [
                    {
                        "url": {
                            "value": "http://kitchingroup.cheme.cmu.edu"
                        },
                        "url-name": {
                            "value": "Research website"
                        }
                    }
                ],
                "visibility": null
            },
            "scope": null
        },
        "orcid-history": {
            "claimed": {
                "value": true
            },
            "completion-date": {
                "value": 1376581428004
            },
            "creation-method": "WEBSITE",
            "last-modified-date": {
                "value": 1427557747595
            },
            "source": null,
            "submission-date": {
                "value": 1376581211104
            },
            "visibility": null
        },
        "orcid-identifier": {
            "host": "orcid.org",
            "path": "0000-0003-2625-9232",
            "uri": "http://orcid.org/0000-0003-2625-9232",
            "value": null
        },
        "orcid-preferences": {
            "locale": "EN"
        },
        "type": "USER"
    }
}
</pre>

<p>
That information is not too interesting, but it would allow you to scrape out my website, scopus id, and researcher id. Next, we look at the publications orcid knows about for me. These are integrated from a few sources, notably my <a href="http://www.researcherid.com/rid/A-2363-2010">ResearcherID:A-2363-2010</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">scopusid:7004212771</a>, and <a href="http://crossref.org">http://crossref.org</a> .  The next code block prints the bibtex entry for the first few entries. The bibtex entries are not too well formed, and would need some cleaning, but it is a pretty good start.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://pub.orcid.org/0000-0003-2625-9232/orcid-works"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/orcid+json'</span>})

<span style="color: #BA36A5;">results</span> = resp.json()
<span style="color: #0000FF;">for</span> i, result <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>( results[<span style="color: #008000;">'orcid-profile'</span>][<span style="color: #008000;">'orcid-activities'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   [<span style="color: #008000;">'orcid-works'</span>][<span style="color: #008000;">'orcid-work'</span>]):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> result[<span style="color: #008000;">'work-citation'</span>][<span style="color: #008000;">'citation'</span>].encode(<span style="color: #008000;">'utf-8'</span>) + <span style="color: #008000;">'\n'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> i == 2:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">break</span>
</pre>
</div>

<pre class="example">
@article{Xu_2015,doi = {10.1021/jp511426q},url = {http://dx.doi.org/10.1021/jp511426q},year = 2015,month = {mar},publisher = {American Chemical Society ({ACS})},volume = {119},number = {9},pages = {4827--4833},author = {Zhongnan Xu and Jan Rossmeisl and John R. Kitchin},title = { A Linear Response {DFT}$\mathplus$ U Study of Trends in the Oxygen Evolution Activity of Transition Metal Rutile Dioxides },journal = {J. Phys. Chem. C}}

@article{Xu_2015,doi = {10.1063/1.4914093},url = {http://dx.doi.org/10.1063/1.4914093},year = 2015,month = {mar},publisher = {{AIP} Publishing},volume = {142},number = {10},pages = {104703},author = {Zhongnan Xu and John R. Kitchin},title = {Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides},journal = {J. Chem. Phys.}}

@article{Boes_2015,doi = {10.1016/j.susc.2015.02.011},url = {http://dx.doi.org/10.1016/j.susc.2015.02.011},year = 2015,month = {mar},publisher = {Elsevier {BV}},author = {Jacob Boes and Peter Kondratyuk and Chunrong Yin and James B. Miller and Andrew J. Gellman and John R. Kitchin},title = {Core level shifts in Cu{\textendash}Pd alloys as a function of bulk composition and structure},journal = {Surface Science}}
</pre>

<p>
Let us look at a tabular form of that data so it is sortable. We attempt to remove some duplicates based on the title and doi. The duplicates come about because there is more than one source where this data is pulled from. This is a little tricky, we do a case insensitive title comparison, but that still fails if the titles have different white space in them, e.g. "111" vs "1 1 1", and different sources do that. Also, the DOIs are sometimes missing, and sometimes have different cases, and sometimes are not correct. This code tries to fix most of those issues.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://pub.orcid.org/0000-0003-2625-9232/orcid-works"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/orcid+json'</span>})
<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #BA36A5;">data</span> = []
<span style="color: #BA36A5;">TITLES</span>, <span style="color: #BA36A5;">DOIs</span> = [], []

<span style="color: #0000FF;">for</span> i, result <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>( results[<span style="color: #008000;">'orcid-profile'</span>][<span style="color: #008000;">'orcid-activities'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   [<span style="color: #008000;">'orcid-works'</span>][<span style="color: #008000;">'orcid-work'</span>]):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">title</span> = <span style="color: #006FE0;">str</span>(result[<span style="color: #008000;">'work-title'</span>][<span style="color: #008000;">'title'</span>][<span style="color: #008000;">'value'</span>].encode(<span style="color: #008000;">'utf-8'</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = <span style="color: #008000;">'None'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> result.get(<span style="color: #008000;">'work-external-identifiers'</span>, []):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> result[<span style="color: #008000;">'work-external-identifiers'</span>][<span style="color: #008000;">'work-external-identifier'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> eid[<span style="color: #008000;">'work-external-identifier-type'</span>] == <span style="color: #008000;">'DOI'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = <span style="color: #006FE0;">str</span>(eid[<span style="color: #008000;">'work-external-identifier-id'</span>][<span style="color: #008000;">'value'</span>].encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">AIP journals tend to have a \n in the DOI, and the doi is the second line. we get</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">that here.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(doi.split(<span style="color: #008000;">'\n'</span>)) == 2:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = doi.split(<span style="color: #008000;">'\n'</span>)[1]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pub_date</span> = result.get(<span style="color: #008000;">'publication-date'</span>, <span style="color: #D0372D;">None</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> pub_date:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = pub_date.get(<span style="color: #008000;">'year'</span>, <span style="color: #D0372D;">None</span>).get(<span style="color: #008000;">'value'</span>).encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = <span style="color: #008000;">'Unknown'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Try to minimize duplicate entries that are found</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dup</span> = <span style="color: #D0372D;">False</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> title.lower() <span style="color: #0000FF;">in</span> TITLES:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dup</span> = <span style="color: #D0372D;">True</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (doi != <span style="color: #008000;">'None'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">and</span> doi.lower() <span style="color: #0000FF;">in</span> DOIs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dup</span> = <span style="color: #D0372D;">True</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> dup:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">truncate title to first 50 characters</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'| {3} | {0}  | {1} | [[doi:{2}]]|'</span>.<span style="color: #006FE0;">format</span>(title[0:50], year, doi, result[<span style="color: #008000;">'work-type'</span>]))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   TITLES.append(title.lower())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   DOIs.append(doi.lower())
</pre>
</div>

<div class="org-src-container">

<pre class="src src-org"><span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | A Linear Response DFT+ U Study of Trends in the Ox | 2015 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/jp511426q">doi:10.1021/jp511426q</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Relationships between the surface electronic and c | 2015 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1063/1.4914093">doi:10.1063/1.4914093</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Core level shifts in Cu&#8211;Pd alloys as a function    | 2015 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.susc.2015.02.011">doi:10.1016/j.susc.2015.02.011</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Estimating bulk-composition-dependent H2 adsorptio | 2015 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/cs501585k">doi:10.1021/cs501585k</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Probing the Coverage Dependence of Site and Adsorb | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/jp508805h">doi:10.1021/jp508805h</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Relating the electronic structure and reactivity o | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a></span><span style="color: #006400; background-color: #EAFFEA;">                     |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Electrocatalytic Oxygen Evolution with an Immobili | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/ja5015986">doi:10.1021/ja5015986</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Identifying Potential BO 2 Oxide Polymorphs for Ep | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/am4059149">doi:10.1021/am4059149</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Simulating temperature programmed desorption of ox | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1007/s11244-013-0166-3">doi:10.1007/s11244-013-0166-3</a></span><span style="color: #006400; background-color: #EAFFEA;">                        |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Probing the effect of electron donation on CO2 abs | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1039/c3ra47097k">doi:10.1039/c3ra47097k</a></span><span style="color: #006400; background-color: #EAFFEA;">                               |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Effects of concentration, crystal structure, magne | 2014 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/jp507957n">doi:10.1021/jp507957n</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Effects of O 2 and SO 2 on the Capture Capacity of | 2013 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/ie400582a">doi:10.1021/ie400582a</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Number of outer electrons as descriptor for adsorp | 2013 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Interactions in 1-ethyl-3-methyl imidazolium tetra | 2013 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:http://dx.doi.org/10.1016/j.molstruc.2013.01.046">doi:http://dx.doi.org/10.1016/j.molstruc.2013.01.046</a></span><span style="color: #006400; background-color: #EAFFEA;"> |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Comparisons of amine solvents for post-combustion  | 2013 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:http://dx.doi.org/10.1016/j.ijggc.2013.06.020">doi:http://dx.doi.org/10.1016/j.ijggc.2013.06.020</a></span><span style="color: #006400; background-color: #EAFFEA;">    |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Chemical and Molecular Descriptors for the Reactiv | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/ie301419q">doi:10.1021/ie301419q</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Spectroscopic Characterization of Mixed Fe&#8211;Ni Ox   | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/cs3002644">doi:10.1021/cs3002644</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| REPORT           | Modeling Coverage Dependence in Surface Reaction N | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.2172/1149701">doi:10.2172/1149701</a></span><span style="color: #006400; background-color: #EAFFEA;">                                  |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Vibrational spectroscopy characterization of CO2-i | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | The role of electrolytes in the oxygen evolution r | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | The outlook for improved carbon capture technology | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.pecs.2012.03.003">doi:10.1016/j.pecs.2012.03.003</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Structure and Relative Thermal Stability of Mesopo | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1111/j.1551-2916.2012.05236.x">doi:10.1111/j.1551-2916.2012.05236.x</a></span><span style="color: #006400; background-color: #EAFFEA;">                 |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Preface: Trends in computational catalysis         | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1007/s11244-012-9808-0">doi:10.1007/s11244-012-9808-0</a></span><span style="color: #006400; background-color: #EAFFEA;">                        |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Exergetic analysis of chemical looping reforming   | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Evaluation of a Primary Amine-Functionalized Ion-E | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/ie300452c">doi:10.1021/ie300452c</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Electrocatalytic water oxidation using iron-center | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Effects of strain, d-band filling, and oxidation s | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1063/1.4746117">doi:10.1063/1.4746117</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| BOOK             | Coverage dependent adsorption properties of atomic | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1039/9781849734776-00083">doi:10.1039/9781849734776-00083</a></span><span style="color: #006400; background-color: #EAFFEA;">                      |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Comparisons of solvents for post-combustion CO2 ca | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Characterization of an ion exchange resin for CO2  | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Assessing the ability of using first principles to | 2012 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Universality in Oxygen Evolution Electrocatalysis  | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1002/cctc.201000397">doi:10.1002/cctc.201000397</a></span><span style="color: #006400; background-color: #EAFFEA;">                           |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | The effect of CO 2 partial pressure on capture wit | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Preparation of Mesoporous La 0.8Sr 0.2MnO 3 infilt | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1149/1.3570235">doi:10.1149/1.3570235</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Identification of sulfur-tolerant bimetallic surfa | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/cs200039t">doi:10.1021/cs200039t</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Effects of strain, d-band filling, and oxidation s | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1063/1.3631948">doi:10.1063/1.3631948</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Determining the conditions necessary for optimal C | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Configurational correlations in the coverage depen | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1063/1.3561287">doi:10.1063/1.3561287</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | An electronic structure based understanding of ami | 2011 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | CO2 Adsorption on Supported Molecular Amidine Syst | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1002/cssc.201000056">doi:10.1002/cssc.201000056</a></span><span style="color: #006400; background-color: #EAFFEA;">                           |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Separation of CO2 from flue gas using electrochemi | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.fuel.2009.11.036">doi:10.1016/j.fuel.2009.11.036</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | New solid-state table: estimating d-band character | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1080/08927022.2010.481794">doi:10.1080/08927022.2010.481794</a></span><span style="color: #006400; background-color: #EAFFEA;">                     |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Simple model explaining and predicting coverage-de | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1103/PhysRevB.82.045414">doi:10.1103/PhysRevB.82.045414</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Intrinsic and extrinsic factors associated with CO | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Electrochemical concentration of carbon dioxide fr | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1149/1.3432440">doi:10.1149/1.3432440</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Catalyzing the catalyst: Hydrogen dissociation and | 2010 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Uncertainty and figure selection for DFT based clu | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1080/08927020902833137">doi:10.1080/08927020902833137</a></span><span style="color: #006400; background-color: #EAFFEA;">                        |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Sulphur poisoning of water-gas shift catalysts: Si | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1080/08927020902833129">doi:10.1080/08927020902833129</a></span><span style="color: #006400; background-color: #EAFFEA;">                        |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Step decoration of chiral metal surfaces           | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1063/1.3096964">doi:10.1063/1.3096964</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Relating the coverage dependence of oxygen adsorpt | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.susc.2009.01.021">doi:10.1016/j.susc.2009.01.021</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Hydrogen Dissociation and Spillover on Individual  | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1103/PhysRevLett.103.246102">doi:10.1103/PhysRevLett.103.246102</a></span><span style="color: #006400; background-color: #EAFFEA;">                   |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Correlations in coverage-dependent atomic adsorpti | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1103/PhysRevB.79.205412">doi:10.1103/PhysRevB.79.205412</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Catalyzing the catalyst: Novel pathways to hydroge | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Atomistic thermodynamics study of the adsorption a | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.jcat.2008.11.020">doi:10.1016/j.jcat.2008.11.020</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Ancillary oxygen-fired combustion using electroche | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Adsorbate Cu interactions and catalyst morphologie | 2009 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | &lt;title&gt;Rotational isomeric state theory applied to | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1117/12.776303">doi:10.1117/12.776303</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | The effect of hydration on the adsorption of carbo | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Pt-decorated electrocatalysts for direct alcohol f | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | PEM-based electrochemical separation of gases      | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | First principles, atomistic thermodynamics for sul | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Evaluating uncertainty in Ab initio phase diagrams | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | ENVR 1-Basic research needs to assure a secure ene | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| OTHER            | Density functional theory studies of alloys in het | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1039/b608782p">doi:10.1039/b608782p</a></span><span style="color: #006400; background-color: #EAFFEA;">                                 |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Alloy surface segregation in reactive environments | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1103/PhysRevB.77.075437">doi:10.1103/PhysRevB.77.075437</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | A first principles evaluation of the role of subst | 2008 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Pt nanoparticle electrocatalyst synthesis for dire | 2007 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Pt nanoparticle anode electrocatalysts for direct  | 2007 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Response to &amp;quot;comment on 'Trends in the exchan | 2006 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1149/1.2358292">doi:10.1149/1.2358292</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Trends in the exchange current for hydrogen evolut | 2005 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1149/1.1856988">doi:10.1149/1.1856988</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Trends in the chemical properties of early transit | 2005 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.cattod.2005.04.008">doi:10.1016/j.cattod.2005.04.008</a></span><span style="color: #006400; background-color: #EAFFEA;">                     |</span>
<span style="color: #006400; background-color: #EAFFEA;">| CONFERENCE_PAPER | Alloy surface segregation in reactive environments | 2005 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | The role of adsorbate-adsorbate interactions in th | 2004 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Role of strain and ligand effects in the modificat | 2004 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1103/PhysRevLett.93.156801">doi:10.1103/PhysRevLett.93.156801</a></span><span style="color: #006400; background-color: #EAFFEA;">                    |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Origin of the overpotential for oxygen reduction a | 2004 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/jp047349j">doi:10.1021/jp047349j</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Modification of the surface electronic and chemica | 2004 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1063/1.1737365">doi:10.1063/1.1737365</a></span><span style="color: #006400; background-color: #EAFFEA;">                                |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Elucidation of the active surface and origin of th | 2003 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.susc.2003.09.007">doi:10.1016/j.susc.2003.09.007</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | A four-point probe correlation of oxygen sensitivi | 2003 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/j.susc.2003.08.041">doi:10.1016/j.susc.2003.08.041</a></span><span style="color: #006400; background-color: #EAFFEA;">                       |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | A comparison of gold and molybdenum nanoparticles  | 2003 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1016/s0039-6028(02)02679-1">doi:10.1016/s0039-6028(02)02679-1</a></span><span style="color: #006400; background-color: #EAFFEA;">                    |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | H3PW12O40-functionalized tip for scanning tunnelin | 2002 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1073/pnas.072514399">doi:10.1073/pnas.072514399</a></span><span style="color: #006400; background-color: #EAFFEA;">                           |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Preparation of paramagnetic ligands for coordinati | 1997 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | Preparation and Characterization of a Bis-Semiquin | 1995 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:10.1021/jo00117a004">doi:10.1021/jo00117a004</a></span><span style="color: #006400; background-color: #EAFFEA;">                              |</span>
<span style="color: #006400; background-color: #EAFFEA;">| JOURNAL_ARTICLE  | SYNTHESIS AND CHARACTERIZATION OF TRISEMIQUINONE L | 1995 | </span><span style="color: #006DAF; text-decoration: underline;"><a href="doi:None">doi:None</a></span><span style="color: #006400; background-color: #EAFFEA;">                                             |</span>
</pre>
</div>

<p>
Not too bad. Clearly we could do a lot more work to fine tune exactly what data we retrieve, and then what to do with it. The tools are all here to do that.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/28/The-orcid-api-and-generating-a-bibtex-file-from-it.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Making org-mode Python sessions look better</title>
      <link>http://jkitchin.github.io/blog/2015/03/12/Making-org-mode-Python-sessions-look-better</link>
      <pubDate>Thu, 12 Mar 2015 10:45:25 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">MN-Omj3zydWElmxF1nt9OF2w1B0=</guid>
      <description>Making org-mode Python sessions look better</description>
      <content:encoded><![CDATA[


<p>
Using sessions for python in org-mode has always bugged me a little bit. Mostly the appearance of &gt;&gt;&gt; and &#x2026; in the output. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> 8
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 8
</pre>

<p>
Today on the org-mode mailing list someone suggested a <a href="http://thread.gmane.org/gmane.emacs.orgmode/95980/focus=96011">patch</a> that might fix that up. Hopefully that patch makes it into org-mode, but if you run off of ELPA like I do it will be some time before it appears in your working version.
</p>

<p>
In the meantime, inspired by my <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode/">recent post</a> on updating multiple results, here we add a new hook function that removes these annoying characters from a Python session results section. Here is my version of this code.
"^: &gt;&gt;&gt;$"
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-python-strip-session-chars</span> ()
  <span style="color: #036A07;">"Remove &gt;&gt;&gt; and ... from a Python session output."</span>
  (<span style="color: #0000FF;">when</span> (and (string=
              <span style="color: #008000;">"python"</span>
              (org-element-property <span style="color: #006FE0;">:language</span> (org-element-at-point)))
             (string-match
              <span style="color: #008000;">":session"</span>
              (org-element-property <span style="color: #006FE0;">:parameters</span> (org-element-at-point))))

    (<span style="color: #0000FF;">save-excursion</span>
      (<span style="color: #0000FF;">when</span> (org-babel-where-is-src-block-result)
        (goto-char (org-babel-where-is-src-block-result))
        (end-of-line 1)
        <span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">(while (looking-at "[\n\r\t\f ]") (forward-char 1))</span>
        (<span style="color: #0000FF;">while</span> (re-search-forward
                <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">&gt;&gt;&gt; </span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\\.\\.\\. </span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">: $</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">: &gt;&gt;&gt;$</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>
                (org-element-property <span style="color: #006FE0;">:end</span> (org-element-at-point))
                t)
          (replace-match <span style="color: #008000;">""</span>)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this enables us to get rid of blank lines and blank : &gt;&gt;&gt;</span>
          (beginning-of-line)
          (<span style="color: #0000FF;">when</span> (looking-at <span style="color: #008000;">"^$"</span>)
            (kill-line)))))))

(add-hook 'org-babel-after-execute-hook 'org-babel-python-strip-session-chars)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">org-babel-python-strip-session-chars</td>
<td class="left">(lambda nil (org-refresh-images))</td>
</tr>
</tbody>
</table>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([3, 4, 5])
plt.show()

<span style="color: #0000FF;">def</span> <span style="color: #006699;">f</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x</span> = 2 * s
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">blank lines look like indentation errors</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> x

<span style="color: #0000FF;">print</span> f(4)
</pre>
</div>

<pre class="example">
[&lt;matplotlib.lines.Line2D object at 0x10955c290&gt;]
8
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> f(9)
</pre>
</div>

<pre class="example">
18
</pre>

<p>
Here we can make an inline figure.
</p>
<div class="org-src-container">

<pre class="src src-python">plt.figure()
plt.plot([3, 4.5, 5])
plt.savefig(<span style="color: #008000;">'images/session-fig.png'</span>)
<span style="color: #008000;">'images/session-fig.png'</span>
</pre>
</div>

<p>
<img src="/media/2015-03-12-Making-org-mode-Python-sessions-look-better/session-fig.png"> 
Not bad. It seems to work! Maybe this will make sessions more usable for me.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2015-03-12 Thu]</span></span> New corner case, do not cause an error when results are silenced.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> 6
</pre>
</div>


<p>
Testing getting rid of blank lines and empty : &gt;&gt;&gt; lines.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 2
<span style="color: #BA36A5;">b</span> = 3
<span style="color: #BA36A5;">c</span> = 4
<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'a=      '</span>, a
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'b =     '</span>, b
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'a + b = '</span>, a+b
</pre>
</div>

<pre class="example">
a=       2
b =      3
a + b =  5
</pre>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/12/Making-org-mode-Python-sessions-look-better.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Equation of a plane through three points</title>
      <link>http://jkitchin.github.io/blog/2015/01/18/Equation-of-a-plane-through-three-points</link>
      <pubDate>Sun, 18 Jan 2015 10:48:21 EST</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">uH0_-wmonJy8FE7rjlkga9tlswU=</guid>
      <description>Equation of a plane through three points</description>
      <content:encoded><![CDATA[



<p>
We are given three points, and we seek the equation of the plane that goes through them. The method is straight forward. A plane is defined by the equation:
</p>

<p>
\(a x + b y + c z = d\)
</p>

<p>
and we just need the coefficients. The \(a, b, c\) coefficients are obtained from a vector normal to the plane, and \(d\) is calculated separately. We get the normal vector from the cross-product of two vectors connecting the points, and we get \(d\) from the dot product of the normal vector with any one of the point position vectors.
</p>

<p>
Finally, given the equation, we want to generate a mesh that samples the plane, and plot the mesh and original points to verify the plane goes through the points. Here is the implementation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #BA36A5;">p1</span> = np.array([1, 2, 3])
<span style="color: #BA36A5;">p2</span> = np.array([4, 6, 9])
<span style="color: #BA36A5;">p3</span> = np.array([12, 11, 9])

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">These two vectors are in the plane</span>
<span style="color: #BA36A5;">v1</span> = p3 - p1
<span style="color: #BA36A5;">v2</span> = p2 - p1

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the cross product is a vector normal to the plane</span>
<span style="color: #BA36A5;">cp</span> = np.cross(v1, v2)
<span style="color: #BA36A5;">a</span>, <span style="color: #BA36A5;">b</span>, <span style="color: #BA36A5;">c</span> = cp

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This evaluates a * x3 + b * y3 + c * z3 which equals d</span>
<span style="color: #BA36A5;">d</span> = np.dot(cp, p3)

<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'The equation is {0}x + {1}y + {2}z = {3}'</span>.<span style="color: #006FE0;">format</span>(a, b, c, d))

<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> mpl_toolkits.mplot3d <span style="color: #0000FF;">import</span> Axes3D
<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(111, projection=<span style="color: #008000;">'3d'</span>)

<span style="color: #BA36A5;">x</span> = np.linspace(-2, 14, 5)
<span style="color: #BA36A5;">y</span> = np.linspace(-2, 14, 5)
<span style="color: #BA36A5;">X</span>, <span style="color: #BA36A5;">Y</span> = np.meshgrid(x, y)

<span style="color: #BA36A5;">Z</span> = (d - a * X - b * Y) / c

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plot the mesh. Each array is 2D, so we flatten them to 1D arrays</span>
ax.plot(X.flatten(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Y.flatten(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Z.flatten(), <span style="color: #008000;">'bo '</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plot the original points. We use zip to get 1D lists of x, y and z</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">coordinates.</span>
ax.plot(*<span style="color: #006FE0;">zip</span>(p1, p2, p3), color=<span style="color: #008000;">'r'</span>, linestyle=<span style="color: #008000;">' '</span>, marker=<span style="color: #008000;">'o'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">adjust the view so we can see the point/plane alignment</span>
ax.view_init(0, 22)
plt.tight_layout()
plt.savefig(<span style="color: #008000;">'images/plane.png'</span>)
plt.show()
</pre>
</div>

<pre class="example">
The equation is 30x + -48y + 17z = -15
</pre>

<p>
<img src="/media/2015-01-18-Equation-of-a-plane-through-three-points/plane.png"> 
It looks like the blue points form a plane that contains the red points.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/18/Equation-of-a-plane-through-three-points.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Building atomic clusters in ase</title>
      <link>http://jkitchin.github.io/blog/2014/12/22/Building-atomic-clusters-in-ase</link>
      <pubDate>Mon, 22 Dec 2014 08:55:38 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[ase]]></category>
      <guid isPermaLink="false">CJDm8f5T_qPEwomEtR2_jgzbiq0=</guid>
      <description>Building atomic clusters in ase</description>
      <content:encoded><![CDATA[



<p>
I was perusing the <a href="https://wiki.fysik.dtu.dk/ase/epydoc/">ase</a> codebase, and came across the <a href="https://wiki.fysik.dtu.dk/ase/epydoc/ase.cluster-module.html">cluster module</a> . This does not seem to be documented in the main docs, so here are some examples of using it. The module provides some functions to make atomic clusters for simulations.
</p>

<p>
Below I show some typical usage. First, we look at an icosahedron with three shells.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.icosahedron <span style="color: #8b0000;">import</span> Icosahedron
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = Icosahedron(<span style="color: #228b22;">'Au'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">noshells</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
<span style="color: #8b0000;">print</span> atoms

write(<span style="color: #228b22;">'images/Au-icosahedron-3.png'</span>, atoms)
</pre>
</div>

<pre class="example">
Atoms(symbols='Au55', positions=..., tags=..., cell=[9.816495585723144, 9.816495585723144, 9.816495585723144], pbc=[False, False, False])
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/Au-icosahedron-3.png"> 
</p>
</div>

<p>
Even with only three shells, there are already 55 atoms in this cluster!
</p>


<p>
How about a decahedron? There are more parameters to set here. I am not sure what the depth of the Marks re-entrance is.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.decahedron <span style="color: #8b0000;">import</span> Decahedron
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = Decahedron(<span style="color: #228b22;">'Pt'</span>,
                   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">p</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>,  <span style="color: #ff0000; font-weight: bold;"># natoms on 100 face normal to 5-fold axis</span>
                   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">q</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>,  <span style="color: #ff0000; font-weight: bold;"># natoms 0n 100 parallel to 5-fold axis</span>
                   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">r</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>)  <span style="color: #ff0000; font-weight: bold;"># depth of the Marks re-entrance?</span>

<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'#atoms = {}'</span>.format<span style="color: #cd0000;">(len</span>(atoms)))

write(<span style="color: #228b22;">'images/decahedron.png'</span>, atoms)
</pre>
</div>

<pre class="example">
#atoms = 156
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/decahedron.png"> 
</p>
</div>

<p>
You can see the 5-fold symmetry here. We can make octahedra too. Here, the length is the number of atoms on the edge.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.octahedron <span style="color: #8b0000;">import</span> Octahedron
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = Octahedron(<span style="color: #228b22;">'Cu'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">length</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>)
<span style="color: #8b0000;">print</span> atoms
write(<span style="color: #228b22;">'images/octahedron.png'</span>, atoms)
</pre>
</div>

<pre class="example">
Cluster(symbols='Cu85', positions=..., cell=[14.44, 14.44, 14.44], pbc=[False, False, False])
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/octahedron.png"> 
</p>
</div>

<p>
Finally, we can make particles based on a Wulff construction! We provide a list of surfaces, and their surface energies, with an approximate size we want, the structure to make the particle in, and what to do if there is not an exact number of atoms matching our size. We choose to round below here, so that the particle is not bigger than our size. In this example I totally made up the surface energies, with (100) as the lowest, so the particle comes out looking like a cube.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.wulff <span style="color: #8b0000;">import</span> wulff_construction
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = wulff_construction(<span style="color: #228b22;">'Pd'</span>,
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">surfaces</span>=[(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>),
                                     (<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>),
                                     (<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>)],
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">energies</span>=[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">15</span>],
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">size</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">100</span>,
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">structure</span>=<span style="color: #228b22;">'fcc'</span>,
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">rounding</span>=<span style="color: #228b22;">'below'</span>)

<span style="color: #8b0000;">print</span> atoms
write(<span style="color: #228b22;">'images/wulff.png'</span>, atoms)
</pre>
</div>
<pre class="example">
Cluster(symbols='Pd63', positions=..., cell=[7.779999999999999, 7.779999999999999, 7.779999999999999], pbc=[False, False, False])
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/wulff.png"> 
</p>
</div>

<p>
This is one handy module, if you need to make clusters for some kind of simulation!</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/22/Building-atomic-clusters-in-ase.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Capturing stderr from Python in org-mode - take 2</title>
      <link>http://jkitchin.github.io/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2</link>
      <pubDate>Sun, 21 Dec 2014 11:46:11 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">HDgno3ig_gPXGD6cnAReyoss5qA=</guid>
      <description>Capturing stderr from Python in org-mode - take 2</description>
      <content:encoded><![CDATA[


<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/09/27/Capturing-stderr-and-exceptions-from-python-in-org-mode/">post</a> I wrote about a sandbox module to help capture stderr in Python code blocks in org-mode. That module worked, but ran as a script. 
</p>

<p>
stderr is not captured in the output of a code block in org-mode. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
</pre>

<p>
The messages to stderr just disappears. Not good for code like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
[[ 1.]
 [ 1.]]
</pre>

<p>
There is an error in that code, k is not defined. If you run that as a script, you get this output:
</p>
<pre class="example">
&gt;&gt;&gt; Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
</pre>

<p>
But, that is evidently going to stderr, and not getting captured in org-mode. Boo. A silent error that returns a value! This behavior of odeint may be <a href="https://github.com/scipy/scipy/pull/4052">fixed</a> in scipy 0.15, but it is a general deficiency of org-mode babel code blocks. So, today I am looking back into a way to fix it. We try something as mundane as just redefining stderr in Python at runtime.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">print</span> &gt;&gt;sys.stdout, <span style="color: #228b22;">"message on stdout"</span>
<span style="color: #8b0000;">print</span> &gt;&gt;sys.stderr, <span style="color: #228b22;">"testing stderr"</span>
</pre>
</div>

<pre class="example">
message on stdout
testing stderr
</pre>

<p>
That works fine. Let us test it with the other block.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sys.stderr</span> = sys.stdout

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 6, in ode
NameError: global name 'k' is not defined
[[ 1.]
 [ 1.]]
</pre>

<p>
Sweet, we get the errors. We still get the returned value, but it is immediately obvious something is wrong. I have wrapped that little tidbit into a Python module in <a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py">pycse.orgmode</a> , which you can import to get the same effect.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pycse.orgmode

<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Finally, you can avoid the import by setting your org-babel Python command like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-python-command <span style="color: #228b22;">"python -i -c \"import pycse.orgmode\""</span>)
</pre>
</div>

<pre class="example">
python -i -c "import pycse.orgmode"
</pre>

<p>
Now, we run our faulty block again:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(y, x):
    <span style="color: #8b0000;">return</span> -k * x

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">xspan</span> = [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">y0</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sol</span> = odeint(ode, y0, xspan)
<span style="color: #8b0000;">print</span> sol
</pre>
</div>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]
</pre>

<p>
Excellent. The stderr is captured.
</p>

<p>
And we get basically the same output as before for regular code blocks. There is an extra line before and after the output for some reason. I can live with that!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> + <span style="color: #000000; background-color: #cccccc; font-weight: bold;">7</span>
</pre>
</div>

<pre class="example">
13
</pre>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/21/Capturing-stderr-from-Python-in-org-mode---take-2.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A new mode for Python documentation</title>
      <link>http://jkitchin.github.io/blog/2014/12/20/A-new-mode-for-Python-documentation</link>
      <pubDate>Sat, 20 Dec 2014 15:02:05 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">QtJsTaGYKaYZB-PcWplUNplxjrU=</guid>
      <description>A new mode for Python documentation</description>
      <content:encoded><![CDATA[



<p>
<span class="timestamp-wrapper"><span class="timestamp">[2014-12-22 Mon]</span></span> update: See this in action at <a href="http://www.youtube.com/watch?v=G_r7wTcVK54">http://www.youtube.com/watch?v=G_r7wTcVK54</a> , and see the latest source at <a href="https://github.com/jkitchin/jmax/blob/master/pydoc.el">https://github.com/jkitchin/jmax/blob/master/pydoc.el</a> .
</p>

<p>
The emacs-lisp documentation in Emacs is inspiring. It is interlinked, you can click on links to open source files, other commands, etc&#x2026; Python documentation is not that nice. It should be.
</p>

<p>
I wrote a little pydoc function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc</span> (name)
  <span style="color: #228b22;">"Display pydoc information for NAME in a buffer named *pydoc*."</span>
  (interactive <span style="color: #228b22;">"sName of function or module: "</span>)
  (switch-to-buffer-other-window <span style="color: #228b22;">"*pydoc*"</span>)
  (erase-buffer)
  (insert (shell-command-to-string (format <span style="color: #228b22;">"python -m pydoc %s"</span> name)))
  (goto-char (point-min)))
</pre>
</div>

<p>
which at least accesses python documentation in emacs. It looks like this:
</p>


<div class="figure">
<p><img src="/media/2014-12-20-A-new-mode-for-Python-documentation/pydoc-jasp.png"> 
</p>
</div>

<p>
But, this lacks functionality. I want there to be useful links in this, so I can click on the filename to open the source, or click on the packages to get their documentation. Below, we walk through a few functions that will operate on the buffer and put text properties on different pieces.
</p>

<p>
First, let us make the source file clickable so it opens the source.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-make-file-link</span> ()
  <span style="color: #228b22;">"Find FILE in a pydoc buffer and make it a clickable link"</span>
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^FILE</span>
<span style="color: #228b22;">    </span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">$"</span> nil t)

    (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap))
          (start (match-beginning 1))
          (end (match-end 1))
          (source-file (match-string 1)))
      
      ;; <span style="color: #ff0000; font-weight: bold;">set file to be clickable to open the source</span>
      (define-key map [mouse-1]
        `(<span style="color: #8b0000;">lambda</span> ()
          (interactive)
          (find-file ,source-file)))

      (set-text-properties
       start end
       `(local-map, map
                   font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                   mouse-face highlight
                   help-echo <span style="color: #228b22;">"mouse-1: click to open"</span>)))))
</pre>
</div>

<pre class="example">
pydoc-make-file-link
</pre>

<p>
Next, sometimes there are URLs in the python documentation. These should all open up in a browser when you click on them. Here we propertize anything we recognize as a URL to make it open when clicked on.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-make-url-links</span> ()
  (goto-char (point-min))
  (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">http</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">s</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">?://.*$</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span> nil t)
    (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap))
          (start (match-beginning 1))
          (end (match-end 1)))
        
      (define-key map [mouse-1]
        `(<span style="color: #8b0000;">lambda</span> ()
          (interactive)
          (browse-url ,(buffer-substring start end))))
        
      (set-text-properties
       start end
       `(local-map ,map
                   font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                   mouse-face highlight
                   help-echo (format <span style="color: #228b22;">"mouse-1: click to open"</span>))))))
</pre>
</div>

<p>
When we get documentation for a package, we should make each entry of the package clickable, so we can get to the documentation for that package easily. We store the name of the current package so we can construct the path to the subpackage.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-get-name</span> ()
  <span style="color: #228b22;">"get NAME and store locally"</span>
  (make-variable-buffer-local 'pydoc-name)
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^NAME</span>
<span style="color: #228b22;">\\s-*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">-][a-zA-Z]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span> nil t)
    (setq pydoc-name (match-string 1))))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-make-package-links</span> ()
  <span style="color: #228b22;">"make links in PACKAGE CONTENTS"</span>
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^PACKAGE CONTENTS"</span> nil t)
    (forward-line)

    (<span style="color: #8b0000;">while</span> (string-match
            <span style="color: #228b22;">"^    </span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[a-zA-Z0-9_]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">[ ]?</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">(package)</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">?"</span>
            (buffer-substring
             (line-beginning-position)
             (line-end-position)))
                
      (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap))
            (start (match-beginning 1))
            (end (match-end 1))
            (package (concat
                      pydoc-name <span style="color: #228b22;">"."</span>
                      (match-string 1
                                    (buffer-substring
                                     (line-beginning-position)
                                     (line-end-position))))))
        
        (define-key map [mouse-1]
          `(<span style="color: #8b0000;">lambda</span> ()
            (interactive)
            (pydoc ,package)))
          
        (set-text-properties
         (+ (line-beginning-position) start)
         (+ (line-beginning-position) end)
         `(local-map, map
                      font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                      mouse-face highlight
                      help-echo (format <span style="color: #228b22;">"mouse-1: click to open %s"</span> ,package))))
      (forward-line))))
</pre>
</div>

<p>
Next, we put some eye candy on function names and arguments. This won't do anything functionally, but it breaks up the monotony of all black text.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-colorize-functions</span> ()
  <span style="color: #228b22;">"Change color of function names and args."</span>
  (goto-char (point-min))
  (<span style="color: #8b0000;">when</span> (re-search-forward <span style="color: #228b22;">"^Functions"</span> nil t)  
    (<span style="color: #8b0000;">while</span> (re-search-forward <span style="color: #228b22;">"    </span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[a-zA-z0-9-]+</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">(</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[</span><span style="color: #228b22;">^</span><span style="color: #228b22;">)]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">)"</span> nil t)
      (set-text-properties
       (match-beginning 1)
       (match-end 1)
       '(font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"brown"</span>)))

      (set-text-properties
       (match-beginning 2)
       (match-end 2)
       '(font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"red"</span>))))))
</pre>
</div>

<p>
I have gotten used to the [back] link in emacs-lisp documentation, so we try to emulate it here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc-insert-back-link</span> ()
  <span style="color: #228b22;">"Insert link to previous buffer"</span>
  (goto-char (point-max)) 
  (insert <span style="color: #228b22;">"</span>
<span style="color: #228b22;">[back]"</span>)
  (<span style="color: #8b0000;">let</span> ((map (make-sparse-keymap)))
    
    ;; <span style="color: #ff0000; font-weight: bold;">set file to be clickable to open the source</span>
    (define-key map [mouse-1]
      (<span style="color: #8b0000;">lambda</span> ()
        (interactive)
        (pydoc *pydoc-last*)))

      (set-text-properties
       (line-beginning-position)
       (line-end-position)
       `(local-map, map
                    font-lock-face (<span style="color: #cd0000;">:foreground</span> <span style="color: #228b22;">"blue"</span>  <span style="color: #cd0000;">:underline</span> t)
                    mouse-face highlight
                    help-echo <span style="color: #228b22;">"mouse-1: click to return"</span>))))
</pre>
</div>

<pre class="example">
pydoc-insert-back-link
</pre>

<p>
Ok, finally we remake the pydoc function. 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">*pydoc-current*</span> nil
 <span style="color: #228b22;">"Stores current pydoc command"</span>)

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">*pydoc-last*</span> nil
 <span style="color: #228b22;">"Stores the last pydoc command"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">pydoc</span> (name)
  <span style="color: #228b22;">"Display pydoc information for NAME in a buffer named *pydoc*."</span>
  (interactive <span style="color: #228b22;">"sName of function or module: "</span>)

  (switch-to-buffer-other-window <span style="color: #228b22;">"*pydoc*"</span>)
  (setq buffer-read-only nil)
  (erase-buffer)
  (insert (shell-command-to-string (format <span style="color: #228b22;">"python -m pydoc %s"</span> name)))
  (goto-char (point-min))

  ;; <span style="color: #ff0000; font-weight: bold;">save </span>
  (<span style="color: #8b0000;">when</span> *pydoc-current*
      (setq *pydoc-last* *pydoc-current*))
  (setq *pydoc-current* name)


  (<span style="color: #8b0000;">save-excursion</span>
    (pydoc-get-name)
    (pydoc-make-url-links)
    (pydoc-make-file-link)
    (pydoc-make-package-links)
    (pydoc-colorize-functions)
    (pydoc-insert-back-link))

  ;; <span style="color: #ff0000; font-weight: bold;">make read-only and press q to quit</span>
  (setq buffer-read-only t)
  (use-local-map (copy-keymap org-mode-map))
  (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer)))

  (font-lock-mode))
</pre>
</div>

<pre class="example">
pydoc
</pre>

<p>
Now, we get a much more functional pydoc:
</p>


<div class="figure">
<p><img src="/media/2014-12-20-A-new-mode-for-Python-documentation/pydoc-enhanced-jasp.png"> 
</p>
<p><span class="figure-number">Figure 2:</span> Annotated screenshot</p>
</div>

<p>
and with the colorized function names:
</p>


<div class="figure">
<p><img src="/media/2014-12-20-A-new-mode-for-Python-documentation/pydoc-potcar.png"> 
</p>
</div>

<p>
Admittedly, there seems to be a lot of boilerplate code for propertizing the strings, but it doesn't seem too bad. I will probably use this documentation tool this spring, so maybe I will think of new functionality to add to pydoc. Any ideas?
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/20/A-new-mode-for-Python-documentation.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Pymacs to integrate Python into Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs</link>
      <pubDate>Sun, 19 Oct 2014 09:33:08 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">A5OvYHGpZAZwz5h8XmQIZWiVqqU=</guid>
      <description>Using Pymacs to integrate Python into Emacs</description>
      <content:encoded><![CDATA[


<p>
<a href="https://github.com/pinard/Pymacs">Pymacs</a> is a project that aims to integrate Python into Emacs, and vice versa. In this post, I am going to examine the Python into Emacs integration. I cloned the git repository, ran make install, and setup my init.el file like this, as suggested in the manual.
</p>

<pre class="example">
(add-to-list 'load-path (expand-file-name "Pymacs" starter-kit-dir))
(require 'pymacs)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
</pre>

<p>
Pymacs provides some mapping of Python modules to emacs-lisp functions. You load modules in emacs-lisp, and then a dash-mangled version of the Python functions are available, <i>in emacs lisp</i>. Here is an example. We will load numpy, and find the maximum element of an array. For comparison, here is the Python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.max(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Now, the corresponding emacs version using Pymacs.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(np-max (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Neat! The dot notation is basically replaced with dash notation, and we use a lisp list as the argument instead of an array. Otherwise, this looks almost identical. Now, let us consider something more complicated, and get the determinant of the array. We add a PREFIX to the load statement for numpy.linalg similar to what we would do in Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> numpy.linalg <span style="color: #8b0000;">as</span> la
<span style="color: #8b0000;">print</span> la.det(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
And in emacs-lisp:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(pymacs-load <span style="color: #228b22;">"numpy.linalg"</span> <span style="color: #228b22;">"la-"</span>)
(la-det (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
We can call functions from matplotlib to make a figure. For example:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"matplotlib.pyplot"</span> <span style="color: #228b22;">"plt-"</span>)
(<span style="color: #8b0000;">let*</span> ((x  '(1 2 3 4))
       (y  (mapcar (<span style="color: #8b0000;">lambda</span> (z) (* z z)) x)))
  (plt-plot x y)
  (plt-xlabel <span style="color: #228b22;">"x values"</span>)
  (plt-ylabel <span style="color: #228b22;">"x$^2$"</span>)
  (plt-savefig <span style="color: #228b22;">"plt-pymacs.png"</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-10-19-Using-Pymacs-to-integrate-Python-into-Emacs/plt-pymacs.png"> 
</p>
</div>

<p>
This was a little subtle. It was necessary to save the lists as variables, and use the variables in the plot command.
</p>

<p>
I am not sure what this offers over just having a Python block present in org-mode though. Maybe it is more useful in emacs-lisp libraries where you want to bring in some numerical analysis. Or if you have some custom library of Python you would like to use in elisp. Here is a highly contrived example. Suppose we have a Python module with this special function that converts an argument to "J":
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">special_func</span>(x):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">"J"</span>
</pre>
</div>

<p>
In Python, we might use it like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> my_python <span style="color: #8b0000;">as</span> mp
<span style="color: #8b0000;">print</span> [mp.special_func(x) <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>]]
</pre>
</div>

<pre class="example">
['J', 'J', 'J']
</pre>

<p>
We can import the module, and use the function in emacs-lisp too. The underscore in the function name is turned into a dash, which is a little confusing, but it works otherwise.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"my_python"</span> <span style="color: #228b22;">"mp-"</span>)
(mapcar 'mp-special-func '(1 2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">J</td>
<td class="left">J</td>
<td class="left">J</td>
</tr>
</tbody>
</table>


<p>
It does not seem possible to do everything though. For example, It is not clear how to pass functions through either side. For example, this does not work for fsolve, although it seems like it should. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"scipy.optimize"</span> <span style="color: #228b22;">"so-"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">objective</span> (x)
  (- x 5))

(so-fsolve 'objective 3)
</pre>
</div>

<p>
I get an error like this:
</p>
<pre class="example">
Pymacs loading scipy.optimize...done
pymacs-report-error: Python: Emacs: "(wrong-type-argument number-or-marker-p (pymacs-python . 47))"
</pre>

<p>
The Python equivalent is here:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(x):
    <span style="color: #8b0000;">return</span> x - <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>

<span style="color: #8b0000;">print</span> fsolve(objective, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
</pre>
</div>

<pre class="example">
[ 5.]
</pre>

<p>
There is an open question on StackOverflow <a href="http://stackoverflow.com/questions/25471580/can-you-use-a-function-as-an-argument-to-a-python-function-in-pymacs">here</a> on this issue. Overall, I find the project very interesting. It would be awesome if you could extend emacs more easily in other languages, especially scripting languages such as Python that have numerical and plotting capabilities. Right now, this is possible in limited ways. For example, Xah Lee describes an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">approach</a> where an arbitrary script can take data on stdin, process it, and output the results to stdout. Emacs can capture this and use it to modify the buffer. This uses the <code>shell-command</code> features in Emacs. These scripts could be written in Python, Perl, Ruby, etc&#x2026; This seems like a simpler and more flexible approach, except that it requires creating the shell commands and putting them on the executable path (as opposed to having Python modules on a PYTHONPATH). These lack the deep integration of documentation you get with emacs-lisp and Python functions.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Editing org-mode python source blocks in an external editor (Canopy)</title>
      <link>http://jkitchin.github.io/blog/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-Canopy</link>
      <pubDate>Sun, 28 Sep 2014 14:41:49 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">2g98wfgOXgxfJ3KsqDdxlAT88TM=</guid>
      <description>Editing org-mode python source blocks in an external editor (Canopy)</description>
      <content:encoded><![CDATA[


<p>
Continuing on the <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode/">last post</a> about leveraging org-mode and python syntax checkers, here we consider using (heresy alert&#x2026;) an external editor for Python src blocks in org-mode. Why would we consider such insanity? Because, for beginners, environments such as Canopy are (IMHO) easier to use, and better than anything I have used in Emacs. And, I still want the framework of org-mode for content, just a better Python code writing environment.
</p>

<p>
This problem has some interesting challenges. I would like a command that opens a code block with its contents in the Canopy editor, or that creates a code block if needed. We need to figure out that context based on the cursor position. We will use the same temporary file strategy as used before, so Canopy has something to read and save to. We need to wait for Canopy to finish, which will be tricky because it returns as soon as you run it. Finally, I want the code block to run after it is put back in the org-file, so that the results are captured. 
</p>

<p>
This code block implements the idea, and the comments in the code explain what each section is doing.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">edit-in-canopy</span> ()
  (interactive)
  (<span style="color: #8b0000;">let*</span> ((eop (org-element-at-point))
         ;; <span style="color: #ff0000; font-weight: bold;">use current directory for temp file so relative paths work</span>
         (temporary-file-directory <span style="color: #228b22;">"."</span>)
         (tempfile))

    ;; <span style="color: #ff0000; font-weight: bold;">create a tempfile. </span>
    (setq tempfile (make-temp-file <span style="color: #228b22;">"canopy"</span> nil <span style="color: #228b22;">".py"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">figure out what to do</span>
    (<span style="color: #8b0000;">when</span>
        ;; <span style="color: #ff0000; font-weight: bold;">in an existing source block. we want to edit it.</span>
        (and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
          
      ;; <span style="color: #ff0000; font-weight: bold;">put code into tempfile</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop))))

    ;; <span style="color: #ff0000; font-weight: bold;">open tempfile in canopy</span>
    (shell-command (concat <span style="color: #228b22;">"canopy "</span> tempfile))
    (sleep-for 2) ;; <span style="color: #ff0000; font-weight: bold;">startup time. canopy is slow to showup in</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">ps. This gives it some time to do that. Canopy</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">returns right away, so we sleep while there is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">evidence that it is open. We get that evidence</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">from ps by searching for canopy.app.main, which</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">seems to exist in the output while Canopy is</span>
                  ;; <span style="color: #ff0000; font-weight: bold;">open.</span>
    (<span style="color: #8b0000;">while</span>
        (string-match <span style="color: #228b22;">"canopy\.app\.main"</span>
                      (shell-command-to-string <span style="color: #228b22;">"ps aux"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">pause a while, then check again.</span>
      (sleep-for 1))

    ;; <span style="color: #ff0000; font-weight: bold;">Canopy has closed, so we get the new script contents</span>
    (<span style="color: #8b0000;">let</span> ((new-contents (<span style="color: #8b0000;">with-temp-buffer</span>
                          (insert-file-contents tempfile)
                          (buffer-string))))
      (<span style="color: #8b0000;">cond</span>
       ;; <span style="color: #ff0000; font-weight: bold;">replace existing code block contents</span>
       ((and (eq 'src-block (car eop))
             (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
        (goto-char (org-element-property <span style="color: #cd0000;">:begin</span> eop))
        (search-forward (org-element-property <span style="color: #cd0000;">:value</span> eop))
        (replace-match (concat new-contents <span style="color: #228b22;">"\n"</span>)))
       ;; <span style="color: #ff0000; font-weight: bold;">create new code block</span>
       (t
        (insert
         (format <span style="color: #228b22;">"\n#+BEGIN_SRC python</span>
<span style="color: #228b22;">%s</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span> new-contents))
        ;; <span style="color: #ff0000; font-weight: bold;">go into new block so we can run it.</span>
        (previous-line 2))))

    ;; <span style="color: #ff0000; font-weight: bold;">delete the tempfile so they do not accumulate</span>
    (delete-file tempfile)
    ;; <span style="color: #ff0000; font-weight: bold;">and run the new block to get the results</span>
    (org-babel-execute-src-block)))
</pre>
</div>

<pre class="example">
edit-in-canopy
</pre>

<p>
That seems to work. It is difficult to tell from this post the function works as advertised. You can see it in action here: <a href="http://www.youtube.com/watch?v=-noKrT1dfFE">http://www.youtube.com/watch?v=-noKrT1dfFE</a> .
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">dydx</span>(y, x):
    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">k</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>
    <span style="color: #8b0000;">return</span> -k * y

<span style="color: #8b0000;">print</span> odeint(dydx, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>])

<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.exp(-<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)
</pre>
</div>

<pre class="example">
[[ 1.        ]
 [ 0.36787947]]
0.367879441171
</pre>



<p>
We created this code block externally.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello'</span>
</pre>
</div>

<pre class="example">
hello
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
Opening Canopy is a little slow (and that is coming from someone who opens Emacs ;). But, once it is open it is pretty nice for writing code, with the interactive Ipython console, and integrated help. Yes, it is probably possible to get Emacs to do that too, and maybe it will do that one day. Canopy does it today.
</p>

<p>
Unfortunately, this code will not work on Windows, most likely, since it relies on the ps program. There does seem to be a tasklist function in Windows that is similar, but it seems that Canopy runs as pythonw in that function, which is not very specific.</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/28/Editing-org-mode-python-source-blocks-in-an-external-editor-(Canopy).org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Improved debugging of Python code blocks in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode</link>
      <pubDate>Sat, 27 Sep 2014 15:27:40 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">lJrHjHgfel3gGwdt1KHqDIQp3js=</guid>
      <description>Improved debugging of Python code blocks in org-mode</description>
      <content:encoded><![CDATA[


<p>
Writing and running code blocks in org-mode is awesome, when it works. I find as the code blocks get past a certain size though, it can be tedious to debug, especially for new users. Since I am teaching 59 students to use Python in org-mode, I see this issue a lot! They lack experience to avoid many simple errors, and to find and fix them. Even in my hands, I do not always want to be switching to Python mode to run and debug blocks. 
</p>

<p>
org-mode src-blocks offer a unique challenge for the usual tools like pylint and pychecker, because the code does not exist in a file. In this post, I will explore developing some functions that do syntax checking on a src block. We will use a simple method which will write the block to a temporary file, and to the checking on that block. Then, we will create temporary buffers with the output.
</p>

<p>
Here is the first idea. We create a temp file in the working directory, write the code to it, and run pychecker, pyflakes and pep8 on the file. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-pychecker</span> ()
  <span style="color: #228b22;">"Run pychecker on a source block"</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((eop (org-element-at-point))
        (temporary-file-directory <span style="color: #228b22;">"."</span>)
        (tempfile))
    (<span style="color: #8b0000;">when</span> (and (eq 'src-block (car eop))
               (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))
      (setq tempfile (make-temp-file <span style="color: #228b22;">"pychecker"</span> nil <span style="color: #228b22;">".py"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">create code file</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop)))
      (switch-to-buffer <span style="color: #228b22;">"*pychecker*"</span>)
      (erase-buffer)
      (insert <span style="color: #228b22;">"pychecker\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pychecker %s"</span> (file-name-nondirectory tempfile))))
      (insert <span style="color: #228b22;">"\npyflakes\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pyflakes %s"</span> (file-name-nondirectory tempfile))))
      (insert <span style="color: #228b22;">"\npep8\n=================\n"</span>)
      (insert
       (shell-command-to-string (format <span style="color: #228b22;">"pep8 %s"</span> (file-name-nondirectory tempfile))))
      (delete-file tempfile))))
</pre>
</div>

<p>
Here is a sample code block with some errors in it.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">a</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>  <span style="color: #ff0000; font-weight: bold;"># a variable we do not use</span>


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x, y):  <span style="color: #ff0000; font-weight: bold;"># unused argument</span>
    <span style="color: #8b0000;">return</span> x - b <span style="color: #ff0000; font-weight: bold;"># undefined variable</span>

<span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> * c
</pre>
</div>

<p>
On the code block above, that function leads to this output.
</p>

<pre class="example">
pychecker
=================
Processing module pychecker63858xo0 (pychecker63858xo0.py)...
  Caught exception importing module pychecker63858xo0:
    File "/Users/jkitchin/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/pychecker/pcmodules.py", line 540, in setupMainCode()
      module = imp.load_module(self.moduleName, handle, filename, smt)
    File "pychecker63858xo0.py", line 7, in &lt;module&gt;()
      print 6 * c
  NameError: name 'c' is not defined

Warnings...

pychecker63858xo0:1: NOT PROCESSED UNABLE TO IMPORT

pyflakes
=================
pychecker63858xo0.py:5: undefined name 'b'
pychecker63858xo0.py:7: undefined name 'c'

pep8
=================
pychecker63858xo0.py:5:17: E261 at least two spaces before inline comment
</pre>

<p>
That is pretty helpful, but it gives us line numbers we cannot directly access in our code block. We can open the code block in Python mode, and then navigate to them, but that is likely to make the buffer with this information disappear. It would be better if we could just click on a link and go to the right place. Let us explore what we need for that. 
</p>

<p>
We need to parse the output to get the line numbers, and then we can construct org-links to those places in the src block. pyflakes, pep8 and pylint look like the easiest to get. A way to get to the line would be a lisp function that moves to the beginning of the code block, and then moves forward n lines. We will use a regular expression on each line of the output of pyflakes and pep8 to get the line number. We will construct an org-link to go to the source block at the line. 
</p>

<p>
In this long code block, we create a function that will run pyflakes, pep8 and pylint, and create a new buffer with links to the issues it finds. Finally, we apply this as advice on executing org-babel-execute:python so it only runs when we execute a python block in org-mode. This is a long block, because I have made it pretty feature complete. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">org-py-check</span> ()
  <span style="color: #228b22;">"Run python check programs on a source block.</span>
<span style="color: #228b22;">Opens a buffer with links to what is found."</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((eop (org-element-at-point))
        (temporary-file-directory <span style="color: #228b22;">"."</span>)
        (cb (current-buffer))
        (n) ; <span style="color: #ff0000; font-weight: bold;">for line number</span>
        (content) ; <span style="color: #ff0000; font-weight: bold;">error on line</span>
        (pb <span style="color: #228b22;">"*org pycheck*"</span>)
        (pyflakes-status nil)
        (link)
        (tempfile))

    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pyflakes"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pyflakes is not installed."</span>))
    
    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pep8"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pep8 not installed"</span>))

    (<span style="color: #8b0000;">unless</span> (executable-find <span style="color: #228b22;">"pylint"</span>)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pylint not installed"</span>))

    ;; <span style="color: #ff0000; font-weight: bold;">rm buffer if it exists</span>
    (<span style="color: #8b0000;">when</span> (get-buffer pb) (kill-buffer pb))
    
    ;; <span style="color: #ff0000; font-weight: bold;">only run if in a python code-block</span>
    (<span style="color: #8b0000;">when</span> (and (eq 'src-block (car eop))
               (string= <span style="color: #228b22;">"python"</span> (org-element-property <span style="color: #cd0000;">:language</span> eop)))

      ;; <span style="color: #ff0000; font-weight: bold;">tempfile for the code</span>
      (setq tempfile (make-temp-file <span style="color: #228b22;">"pychecker"</span> nil <span style="color: #228b22;">".py"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">create code file</span>
      (<span style="color: #8b0000;">with-temp-file</span> tempfile
        (insert (org-element-property <span style="color: #cd0000;">:value</span> eop)))
      
      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pyflakes %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (setq pyflakes-status status)
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n* pyflakes output (status=%s)</span>
<span style="color: #228b22;">pyflakes checks your code for errors. You should probably fix all of these.</span>

<span style="color: #228b22;">"</span> status))
          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">get the line number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match (format <span style="color: #228b22;">"^%s:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>
                                      (file-name-nondirectory tempfile))
                              line)
                (<span style="color: #8b0000;">progn</span>
                  (setq n (match-string 1 line))
                  (setq content (match-string 2 line))
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     n
                                     (format <span style="color: #228b22;">"Line %s: %s"</span> n content))))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))

      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pep8 %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n\n* pep8 output (status = %s)\n"</span> status))
          (insert <span style="color: #228b22;">"pep8 is the [[http://legacy.python.org/dev/peps/pep-0008][officially recommended style]] for writing Python code. Fixing these will usually make your code more readable and beautiful. Your code will probably run if you do not fix them, but, it will be ugly.</span>

<span style="color: #228b22;">"</span>)
          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">get the line number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match (format <span style="color: #228b22;">"^%s:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>
                                      (file-name-nondirectory tempfile))
                              line)
                (<span style="color: #8b0000;">progn</span>
                  (setq n (match-string 1 line))
                  (setq content (match-string 2 line))
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     n
                                     (format <span style="color: #228b22;">"Line %s: %s"</span> n content))))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))

      ;; <span style="color: #ff0000; font-weight: bold;">pylint</span>
      (<span style="color: #8b0000;">let</span> ((status (shell-command
                     (format <span style="color: #228b22;">"pylint -r no %s"</span> (file-name-nondirectory tempfile))))
            (output (delete <span style="color: #228b22;">""</span> (split-string
                                (<span style="color: #8b0000;">with-current-buffer</span> <span style="color: #228b22;">"*Shell Command Output*"</span>
                                  (buffer-string)) <span style="color: #228b22;">"\n"</span>))))
        (kill-buffer <span style="color: #228b22;">"*Shell Command Output*"</span>)
        (<span style="color: #8b0000;">when</span> output
          (set-buffer (get-buffer-create pb))
          (insert (format <span style="color: #228b22;">"\n\n* pylint (status = %s)\n"</span> status))
          (insert <span style="color: #228b22;">"pylint checks your code for errors, style and convention. It is complementary to pyflakes and pep8, and usually more detailed.</span>

<span style="color: #228b22;">"</span>)

          (<span style="color: #8b0000;">dolist</span> (line output)
            ;; <span style="color: #ff0000; font-weight: bold;">pylint gives a line and column number</span>
            (<span style="color: #8b0000;">if</span> 
                (string-match <span style="color: #228b22;">"[A-Z]:\\s-+</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">,\\s-*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">:</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">.*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span>                            
                              line)
                (<span style="color: #8b0000;">let</span> ((line-number (match-string 1 line))
                      (column-number (match-string 2 line))
                      (content (match-string 3 line)))
                     
                  (setq link (format <span style="color: #228b22;">"[[elisp:(progn (switch-to-buffer-other-window \"%s\")(goto-char %s)(forward-line %s)(forward-line 0)(forward-char %s))][%s]]\n"</span>
                                     cb
                                     (org-element-property <span style="color: #cd0000;">:begin</span> eop)
                                     line-number
                                     column-number
                                     line)))
              ;; <span style="color: #ff0000; font-weight: bold;">no match, just insert line</span>
              (setq link (concat line <span style="color: #228b22;">"\n"</span>)))
            (insert link))))
    
      (<span style="color: #8b0000;">when</span> (get-buffer pb)
        (switch-to-buffer-other-window pb)
        (goto-char (point-min))
        (insert <span style="color: #228b22;">"Press q to close the window\n"</span>)
        (org-mode)       
        (org-cycle '(64))
        ;; <span style="color: #ff0000; font-weight: bold;">make read-only and press q to quit</span>
        (setq buffer-read-only t)
        (use-local-map (copy-keymap org-mode-map))
        (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer))))

      (<span style="color: #8b0000;">unless</span> (= 0 pyflakes-status)
        (forward-line 4)
        (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"pyflakes exited non-zero. please fix errors"</span>))
      ;; <span style="color: #ff0000; font-weight: bold;">final cleanup and delete file</span>
      (delete-file tempfile)
      (switch-to-buffer-other-window cb))))


(<span style="color: #8b0000;">defadvice</span> <span style="color: #8b2323;">org-babel-execute:python</span> (before pychecker)
  (org-py-check))

(ad-activate 'org-babel-execute:python)
</pre>
</div>

<pre class="example">
org-babel-execute:python
</pre>

<p>
Now, when I try to run this code block, which has some errors in it:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">a</span> = <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>  <span style="color: #ff0000; font-weight: bold;"># a variable we do not use</span>


<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x, y):  <span style="color: #ff0000; font-weight: bold;"># unused argument</span>
    <span style="color: #8b0000;">return</span> x - b <span style="color: #ff0000; font-weight: bold;"># undefined</span>

<span style="color: #8b0000;">print</span> <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span> * c
</pre>
</div>

<p>
I get a new buffer with approximately these contents:
</p>

<div class="org-src-container">

<pre class="src src-org">Press q to close the window

<span style="color: #8b2323;">* pyflakes output (status=1)</span>
pyflakes checks your code for errors. You should probably fix all of these.

<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5))">Line 5:  undefined name 'b'</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 7))">Line 7:  undefined name 'c'</a></span>


<span style="color: #8b2323;">* pep8 output (status = 1)</span>
pep8 is the <span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="http://legacy.python.org/dev/peps/pep-0008">officially recommended style</a></span> for writing Python code. Fixing these will usually make your code more readable and beautiful. Your code will probably run if you do not fix them, but, it will be ugly.

<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5))">Line 5: 17: E261 at least two spaces before inline comment</a></span>


<span style="color: #8b2323;">* pylint (status = 22)pylint checks your code for errors, style and convention. It is complementary to pyflakes and pep8, and usually more detailed.</span>

No config file found, using default configuration
<span style="color: #4682b4;">************* Module pychecker68224dkX</span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Invalid module name "pychecker68224dkX" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Missing module docstring (missing-docstring)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 1)(forward-line 0)(forward-char 0))">C:  1, 0: Invalid constant name "a" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid function name "f" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid argument name "x" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Invalid argument name "y" (invalid-name)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 0))">C:  4, 0: Missing function docstring (missing-docstring)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 5)(forward-line 0)(forward-char 15))">E:  5,15: Undefined variable 'b' (undefined-variable)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 4)(forward-line 0)(forward-char 9))">W:  4, 9: Unused argument 'y' (unused-argument)</a></span>
<span style="color: #0000ff; font-weight: bold; text-decoration: underline;"><a href="elisp:(progn (switch-to-buffer-other-window &quot;blog.org&quot;)(goto-char 9180)(forward-line 7)(forward-line 0)(forward-char 10))">E:  7,10: Undefined variable 'c' (undefined-variable)</a></span>
</pre>
</div>

<p>
Each of those links takes me to either the line, or the position of the error (in the case of pylint)! I have not tested this on more than a handful of code blocks, but it has worked pretty nicely on them so far!
</p>

<p>
Of course, you must have pyflakes, pep8 and pylint installed. But those are all easily installed with pip as far as I can tell.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/09/27/Improved-debugging-of-Python-code-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
  </channel>
</rss>
