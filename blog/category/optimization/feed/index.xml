<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sat, 08 Mar 2014 13:01:42 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Constrained fits to data</title>
      <link>http://jkitchin.github.io/blog/2013/06/11/Constrained-fits-to-data</link>
      <pubDate>Tue, 11 Jun 2013 19:39:59 EDT</pubDate>
      <category><![CDATA[data analysis]]></category>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">tkPJI7DfYBi--ElDtj1PvwvMk08=</guid>
      <description>Constrained fits to data</description>
      <content:encoded><![CDATA[


<p>
Our objective here is to fit a quadratic function in the least squares sense to some data, but we want to constrain the fit so that the function has specific values at the end-points. The application is to fit a function to the lattice constant of an alloy at different compositions. We constrain the fit because we know the lattice constant of the pure metals, which are at the end-points of the fit and we want these to be correct. 
</p>

<p>
We define the alloy composition in terms of the mole fraction of one species, e.g. \(A_xB_{1-x}\). For \(x=0\), the alloy is pure B, whereas for \(x=1\) the alloy is pure A. According to Vegard's law the lattice constant is a linear composition weighted average of the pure component lattice constants, but sometimes small deviations are observed. Here we will fit a quadratic function that is constrained to give the pure metal component lattice constants at the end points. 
</p>

<p>
The quadratic function is \(y = a x^2 + b x + c\). One constraint is at \(x=0\) where \(y = c\), or \(c\) is the lattice constant of pure B. The second constraint is at \(x=1\), where \(a + b + c\) is equal to the lattice constant of pure A. Thus, there is only one degree of freedom. \(c = LC_B\), and \(b = LC_A - c - a\), so \(a\) is our only variable.
</p>

<p>
We will solve this problem by minimizing the summed squared error between the fit and the data. We use the <code>fmin</code> function in <code>scipy.optimize</code>. First we create a fit function that encodes the constraints. Then we create an objective function that will be minimized. We have to make a guess about the value of \(a\) that minimizes the summed squared error. A line fits the data moderately well, so we guess a small value, i.e. near zero, for \(a\). Here is the solution.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Data to fit to</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">x=0 is pure B</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">x=1 is pure A</span>
X = np.array([0.0, 0.1,  0.25, 0.5,  0.6,  0.8,  1.0])
Y = np.array([3.9, 3.89, 3.87, 3.78, 3.75, 3.69, 3.6])

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(a, XX):
    LC_A = 3.6
    LC_B = 3.9

    c = LC_B
    b = LC_A - c - a

    yfit = a * XX**2 + b * XX + c
    <span style="color: #8b0000;">return</span> yfit

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(a):
    <span style="color: #228b22;">'function to minimize'</span>
    SSE = np.sum((Y - func(a, X))**2)
    <span style="color: #8b0000;">return</span> SSE


<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin

a_fit = fmin(objective, 0)
plt.plot(X, Y, <span style="color: #228b22;">'bo '</span>)

x = np.linspace(0, 1)
plt.plot(x, func(a_fit, x))
plt.savefig(<span style="color: #228b22;">'images/constrained-quadratic-fit.png'</span>)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.
         Current function value: 0.000445
         Iterations: 19
         Function evaluations: 38
</pre>

<p>
Here is the result:
<p><img src="/img/./images/constrained-quadratic-fit.png"><p>
</p>

<p>
You can see that the end points go through the end-points as prescribed. 
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/06/11/Constrained-fits-to-data.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Gibbs energy minimization and the NIST webbook</title>
      <link>http://jkitchin.github.io/blog/2013/03/01/Gibbs-energy-minimization-and-the-NIST-webbook</link>
      <pubDate>Fri, 01 Mar 2013 13:11:58 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">2cPyJ1dhosp_-EMfiMiuxmC2KMM=</guid>
      <description>Gibbs energy minimization and the NIST webbook</description>
      <content:encoded><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/12/25/gibbs-energy-minimization-and-the-nist-webbook/" >Matlab post</a>
In Post 1536 we used the NIST webbook to compute a temperature dependent Gibbs energy of reaction, and then used a reaction extent variable to compute the equilibrium concentrations of each species for the water gas shift reaction.
</p>

<p>
Today, we look at the direct minimization of the Gibbs free energy of the species, with no assumptions about stoichiometry of reactions. We only apply the constraint of conservation of atoms. We use the NIST Webbook to provide the data for the Gibbs energy of each species.
</p>

<p>
As a reminder we consider equilibrium between the species \(CO\), \(H_2O\), \(CO_2\) and \(H_2\), at 1000K, and 10 atm total pressure with an initial equimolar molar flow rate of \(CO\) and \(H_2O\).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

T = 1000  <span style="color: #ff0000; font-weight: bold;"># K</span>
R = 8.314e-3 <span style="color: #ff0000; font-weight: bold;"># kJ/mol/K</span>

P = 10.0 <span style="color: #ff0000; font-weight: bold;"># atm, this is the total pressure in the reactor</span>
Po = 1.0 <span style="color: #ff0000; font-weight: bold;"># atm, this is the standard state pressure</span>
</pre>
</div>

<p>
We are going to store all the data and calculations in vectors, so we need to assign each position in the vector to a species. Here are the definitions we use in this work.
</p>

<pre class="example">
1  CO
2  H2O
3  CO2
4  H2
</pre>

<div class="org-src-container">

<pre class="src src-python">species = [<span style="color: #228b22;">'CO'</span>, <span style="color: #228b22;">'H2O'</span>, <span style="color: #228b22;">'CO2'</span>, <span style="color: #228b22;">'H2'</span>]

<span style="color: #ff0000; font-weight: bold;"># Heats of formation at 298.15 K</span>

Hf298 = [
    -110.53,  <span style="color: #ff0000; font-weight: bold;"># CO</span>
    -241.826, <span style="color: #ff0000; font-weight: bold;"># H2O</span>
    -393.51,  <span style="color: #ff0000; font-weight: bold;"># CO2</span>
       0.0]   <span style="color: #ff0000; font-weight: bold;"># H2</span>

<span style="color: #ff0000; font-weight: bold;"># Shomate parameters for each species</span>
<span style="color: #ff0000; font-weight: bold;">#           A          B           C          D          E            F          G       H</span>
WB = [[25.56759,  6.096130,     4.054656,  -2.671301,  0.131021, -118.0089, 227.3665,   -110.5271],  <span style="color: #ff0000; font-weight: bold;"># CO</span>
      [30.09200,  6.832514,     6.793435,  -2.534480,  0.082139, -250.8810, 223.3967,   -241.8264],  <span style="color: #ff0000; font-weight: bold;"># H2O</span>
      [24.99735,  55.18696,   -33.69137,    7.948387, -0.136638, -403.6075, 228.2431,   -393.5224],  <span style="color: #ff0000; font-weight: bold;"># CO2</span>
      [33.066178, -11.363417,  11.432816,  -2.772874, -0.158558, -9.980797, 172.707974,    0.0]]     <span style="color: #ff0000; font-weight: bold;"># H2</span>

WB = np.array(WB)

<span style="color: #ff0000; font-weight: bold;"># Shomate equations</span>
t = T/1000
T_H = np.array([t,  t**2 / 2.0, t**3 / 3.0, t**4 / 4.0, -1.0 / t, 1.0, 0.0, -1.0])
T_S = np.array([np.log(t), t,  t**2 / 2.0,  t**3 / 3.0, -1.0 / (2.0 * t**2), 0.0, 1.0, 0.0])

H = np.dot(WB, T_H)        <span style="color: #ff0000; font-weight: bold;"># (H - H_298.15) kJ/mol</span>
S = np.dot(WB, T_S/1000.0) <span style="color: #ff0000; font-weight: bold;"># absolute entropy kJ/mol/K</span>

Gjo = Hf298 + H - T*S      <span style="color: #ff0000; font-weight: bold;"># Gibbs energy of each component at 1000 K</span>
</pre>
</div>

<p>
Now, construct the Gibbs free energy function, accounting for the change in activity due to concentration changes (ideal mixing).
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(nj):
    nj = np.array(nj)
    Enj = np.sum(nj);
    Gj =  Gjo / (R * T) + np.log(nj / Enj * P / Po)
    <span style="color: #8b0000;">return</span> np.dot(nj, Gj)
</pre>
</div>

<p>
We impose the constraint that all atoms are conserved from the initial conditions to the equilibrium distribution of species. These constraints are in the form of \(A_{eq} n = b_{eq}\), where \(n\) is the vector of mole numbers for each species.
</p>

<div class="org-src-container">

<pre class="src src-python">Aeq = np.array([[ 1,    0,    1,    0],  <span style="color: #ff0000; font-weight: bold;"># C balance</span>
                [ 1,    1,    2,    0],  <span style="color: #ff0000; font-weight: bold;"># O balance</span>
                [ 0,    2,    0,    2]]) <span style="color: #ff0000; font-weight: bold;"># H balance</span>

<span style="color: #ff0000; font-weight: bold;"># equimolar feed of 1 mol H2O and 1 mol CO</span>
beq = np.array([1,  <span style="color: #ff0000; font-weight: bold;"># mol C fed</span>
                2,  <span style="color: #ff0000; font-weight: bold;"># mol O fed</span>
                2]) <span style="color: #ff0000; font-weight: bold;"># mol H fed</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ec1</span>(nj):
    <span style="color: #228b22;">'conservation of atoms constraint'</span>
    <span style="color: #8b0000;">return</span> np.dot(Aeq, nj) - beq
</pre>
</div>

<p>
Now we are ready to solve the problem. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp

n0 = [0.5, 0.5, 0.5, 0.5]  <span style="color: #ff0000; font-weight: bold;"># initial guesses</span>
N = fmin_slsqp(func, n0, f_eqcons=ec1)
<span style="color: #8b0000;">print</span> N
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; Optimization terminated successfully.    (Exit mode 0)
            Current function value: -91.204832308
            Iterations: 2
            Function evaluations: 13
            Gradient evaluations: 2
[ 0.45502309  0.45502309  0.54497691  0.54497691]
</pre>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Compute mole fractions and partial pressures</h2>
<div class="outline-text-2" id="text-1">
<p>
The pressures here are in good agreement with the pressures found by other methods. The minor disagreement (in the third or fourth decimal place) is likely due to convergence tolerances in the different algorithms used.
</p>

<div class="org-src-container">

<pre class="src src-python">yj = N / np.sum(N)
Pj = yj * P

<span style="color: #8b0000;">for</span> s, y, p <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(species, yj, Pj):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0:10s}: {1:1.2f} {2:1.2f}'</span>.format(s, y, p)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; ... ... CO        : 0.23 2.28
H2O       : 0.23 2.28
CO2       : 0.27 2.72
H2        : 0.27 2.72
</pre>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Computing equilibrium constants</h2>
<div class="outline-text-2" id="text-2">
<p>
We can compute the equilibrium constant for the reaction \(CO + H_2O \rightleftharpoons CO_2 + H_2\). Compared to the value of K = 1.44 we found at the end of Post 1536 , the agreement is excellent. Note, that to define an equilibrium constant it is necessary to specify a reaction, even though it is not necessary to even consider a reaction to obtain the equilibrium distribution of species!
</p>

<div class="org-src-container">

<pre class="src src-python">nuj = np.array([-1, -1, 1, 1])  <span style="color: #ff0000; font-weight: bold;"># stoichiometric coefficients of the reaction</span>
K = np.prod(yj**nuj)
<span style="color: #8b0000;">print</span> K
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; 1.43446295961
</pre>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/03/01/Gibbs-energy-minimization-and-the-NIST-webbook.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Finding equilibrium composition by direct minimization of Gibbs free energy on mole numbers</title>
      <link>http://jkitchin.github.io/blog/2013/03/01/Finding-equilibrium-composition-by-direct-minimization-of-Gibbs-free-energy-on-mole-numbers</link>
      <pubDate>Fri, 01 Mar 2013 12:27:48 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">j0YUTyQ_GaQ-VsNlprCKzxr8qH8=</guid>
      <description>Finding equilibrium composition by direct minimization of Gibbs free energy on mole numbers</description>
      <content:encoded><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/12/25/finding-equilibrium-composition-by-direct-minimization-of-gibbs-free-energy-on-mole-numbers/" >Matlab post</a>
Adapted from problem 4.5 in Cutlip and Shacham
Ethane and steam are fed to a steam cracker at a total pressure of 1 atm and at 1000K at a ratio of 4 mol H2O to 1 mol ethane. Estimate the equilibrium distribution of products (CH4, C2H4, C2H2, CO2, CO, O2, H2, H2O, and C2H6).
</p>

<p>
Solution method: We will construct a Gibbs energy function for the mixture, and obtain the equilibrium composition by minimization of the function subject to elemental mass balance constraints.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

R = 0.00198588 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">kcal/mol/K</span>
T = 1000 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">K</span>

species = [<span style="color: #228b22;">'CH4'</span>, <span style="color: #228b22;">'C2H4'</span>, <span style="color: #228b22;">'C2H2'</span>, <span style="color: #228b22;">'CO2'</span>, <span style="color: #228b22;">'CO'</span>, <span style="color: #228b22;">'O2'</span>, <span style="color: #228b22;">'H2'</span>, <span style="color: #228b22;">'H2O'</span>, <span style="color: #228b22;">'C2H6'</span>]

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">$G_^\circ for each species. These are the heats of formation for each</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">species.</span>
Gjo = np.array([4.61, 28.249, 40.604, -94.61, -47.942, 0, 0, -46.03, 26.13]) <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">kcal/mol</span>
</pre>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The Gibbs energy of a mixture</h2>
<div class="outline-text-2" id="text-1">
<p>
We start with \(G=\sum\limits_j n_j \mu_j\). Recalling that we define \(\mu_j = G_j^\circ + RT \ln a_j\), and in the ideal gas limit, \(a_j = y_j P/P^\circ\), and that \(y_j = \frac{n_j}{\sum n_j}\). Since in this problem, P = 1 atm, this leads to the function \(\frac{G}{RT} = \sum\limits_{j=1}^n n_j\left(\frac{G_j^\circ}{RT} + \ln \frac{n_j}{\sum n_j}\right)\).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(nj):
    nj = np.array(nj)
    Enj = np.sum(nj);
    G = np.sum(nj * (Gjo / R / T + np.log(nj / Enj)))
    <span style="color: #8b0000;">return</span> G
</pre>
</div>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Linear equality constraints for atomic mass conservation</h2>
<div class="outline-text-2" id="text-2">
<p>
The total number of each type of atom must be the same as what entered the reactor. These form equality constraints on the equilibrium composition. We express these constraints as: \(A_{eq} n = b\) where \(n\) is a vector of the moles of each species present in the mixture. CH4 C2H4 C2H2 CO2 CO O2 H2 H2O C2H6
</p>

<div class="org-src-container">

<pre class="src src-python">Aeq = np.array([[0,   0,    0,   2,   1,  2,  0,  1,   0],      <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">oxygen balance</span>
                [4,   4,    2,   0,   0,  0,  2,  2,   6],      <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">hydrogen balance</span>
                [1,   2,    2,   1,   1,  0,  0,  0,   2]])     <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">carbon balance</span>

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the incoming feed was 4 mol H2O and 1 mol ethane</span>
beq = np.array([4,  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">moles of oxygen atoms coming in</span>
                14, <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">moles of hydrogen atoms coming in</span>
                2]) <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">moles of carbon atoms coming in</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ec1</span>(n):
    <span style="color: #228b22;">'equality constraint'</span>
    <span style="color: #8b0000;">return</span> np.dot(Aeq, n) - beq
</pre>
</div>

<p>
Now we solve the problem.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">initial guess suggested in the example</span>
n0 = [1e-3, 1e-3, 1e-3, 0.993, 1.0, 1e-4, 5.992, 1.0, 1e-3] 

<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp

X = fmin_slsqp(func, n0, f_eqcons=ec1, iter=300, acc=1e-12)

<span style="color: #8b0000;">for</span> s,x <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(species, X):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0:10s} {1:1.4g}'</span>.format(s, x)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">check that constraints were met</span>
<span style="color: #8b0000;">print</span> np.dot(Aeq, X) - beq
<span style="color: #8b0000;">print</span> np.all( np.abs( np.dot(Aeq, X) - beq) &lt; 1e-12)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; Optimization terminated successfully.    (Exit mode 0)
            Current function value: -104.403947663
            Iterations: 217
            Function evaluations: 2937
            Gradient evaluations: 217
&gt;&gt;&gt; ... ... CH4        0.06694
C2H4       8.108e-08
C2H2       5.174e-08
CO2        0.5441
CO         1.389
O2         1.222e-14
H2         5.343
H2O        1.523
C2H6       8.44e-08
... [ -1.66977543e-13   1.77635684e-15   4.44089210e-16]
True
</pre>

<p>
I found it necessary to tighten the accuracy parameter to get pretty good matches to the solutions found in Matlab. It was also necessary to increase the number of iterations. Even still, not all of the numbers match well, especially the very small numbers. You can, however, see that the constraints were satisfied pretty well.
</p>


<p>
Interestingly there is a distribution of products! That is interesting because only steam and ethane enter the reactor, but a small fraction of methane is formed! The main product is hydrogen. The stoichiometry of steam reforming is ideally \(C_2H_6 + 4H_2O \rightarrow 2CO_2 + 7 H2\). Even though nearly all the ethane is consumed, we do not get the full yield of hydrogen. It appears that another equilibrium, one between CO, CO2, H2O and H2, may be limiting that, since the rest of the hydrogen is largely in the water. It is also of great importance that we have not said anything about reactions, i.e. how these products were formed. 
</p>

<p>
The water gas shift reaction is: \(CO + H_2O \rightleftharpoons CO_2 + H_2\). We can compute the Gibbs free energy of the reaction from the heats of formation of each species. Assuming these are the formation energies at 1000K, this is the reaction free energy at 1000K.
</p>

<div class="org-src-container">

<pre class="src src-python">G_wgs = Gjo[3] + Gjo[6] - Gjo[4] - Gjo[7]
<span style="color: #8b0000;">print</span> G_wgs

K = np.exp(-G_wgs / (R*T))
<span style="color: #8b0000;">print</span> K
</pre>
</div>

<pre class="example">
-0.638
&gt;&gt;&gt; &gt;&gt;&gt; 1.37887528109
</pre>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Equilibrium constant based on mole numbers</h2>
<div class="outline-text-2" id="text-3">
<p>
One normally uses activities to define the equilibrium constant. Since there are the same number of moles on each side of the reaction all factors that convert mole numbers to activity, concentration or pressure cancel, so we simply consider the ratio of mole numbers here.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> (X[3] * X[6]) / (X[4] * X[7])
</pre>
</div>

<pre class="example">
1.37450039394
</pre>

<p>
This is close, but not exactly the same as the equilibrium constant computed above. I think they should be exactly the same, and the difference is due to convergence errors in the solution to the problem.
</p>

<p>
Clearly, there is an equilibrium between these species that prevents the complete reaction of steam reforming.
</p>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Summary</h2>
<div class="outline-text-2" id="text-4">
<p>
This is an appealing way to minimize the Gibbs energy of a mixture. No assumptions about reactions are necessary, and the constraints are easy to identify. The Gibbs energy function is especially easy to code.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/03/01/Finding-equilibrium-composition-by-direct-minimization-of-Gibbs-free-energy-on-mole-numbers.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Constrained optimization</title>
      <link>http://jkitchin.github.io/blog/2013/02/27/Constrained-optimization</link>
      <pubDate>Wed, 27 Feb 2013 14:43:37 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">Y_dxaZce3fpHk_5GasXmrgWEiDg=</guid>
      <description>Constrained optimization</description>
      <content:encoded><![CDATA[


<p>


<a href="http://matlab.cheme.cmu.edu/2011/12/24/constrained-optimization/" >Matlab post</a>
</p>

<p>
adapted from <a href="http://en.wikipedia.org/wiki/Lagrange_multipliers" >http://en.wikipedia.org/wiki/Lagrange_multipliers</a>.
</p>

<p>
Suppose we seek to minimize the function \(f(x,y)=x+y\) subject to the constraint that \(x^2 + y^2 = 1\). The function we seek to maximize is an unbounded plane, while the constraint is a unit circle. We could setup a Lagrange multiplier approach to solving this problem, but we will use a constrained optimization approach instead.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(X):
    x, y = X
    <span style="color: #8b0000;">return</span> x + y

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">eqc</span>(X):
    <span style="color: #228b22;">'equality constraint'</span>
    x, y = X
    <span style="color: #8b0000;">return</span> x**2 + y**2 - 1.0

X0 = [-1, -1]
X = fmin_slsqp(objective, X0, eqcons=[eqc])
<span style="color: #8b0000;">print</span> X
</pre>
</div>

<pre class="example">
Optimization terminated successfully.    (Exit mode 0)
            Current function value: -1.41421356237
            Iterations: 5
            Function evaluations: 20
            Gradient evaluations: 5
[-0.70710678 -0.70710678]
</pre>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/27/Constrained-optimization.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>The Gibbs free energy of a reacting mixture and the equilibrium composition</title>
      <link>http://jkitchin.github.io/blog/2013/02/18/The-Gibbs-free-energy-of-a-reacting-mixture-and-the-equilibrium-composition</link>
      <pubDate>Mon, 18 Feb 2013 09:00:00 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">6p4az1VK91uyv4s50T5N3Bl2Do4=</guid>
      <description>The Gibbs free energy of a reacting mixture and the equilibrium composition</description>
      <content:encoded><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/12/20/the-gibbs-free-energy-of-a-reacting-mixture-and-the-equilibrium-composition/" >Matlab post</a>
</p>

<p>
In this post we derive the equations needed to find the equilibrium composition of a reacting mixture. We use the method of direct minimization of the Gibbs free energy of the reacting mixture.
</p>

<p>
The Gibbs free energy of a mixture is defined as \(G = \sum\limits_j \mu_j n_j\) where \(\mu_j\) is the chemical potential of species \(j\), and it is temperature and pressure dependent, and \(n_j\) is the number of moles of species \(j\).
</p>

<p>
We define the chemical potential as \(\mu_j = G_j^\circ + RT\ln a_j\), where \(G_j^\circ\) is the Gibbs energy in a standard state, and \(a_j\) is the activity of species \(j\) if the pressure and temperature are not at standard state conditions.
</p>

<p>
If a reaction is occurring, then the number of moles of each species are related to each other through the reaction extent \(\epsilon\) and stoichiometric coefficients: \(n_j = n_{j0} + \nu_j \epsilon\). Note that the reaction extent has units of moles.
</p>

<p>
Combining these three equations and expanding the terms leads to:
</p>

<p>
$$G = \sum\limits_j n_{j0}G_j^\circ +\sum\limits_j \nu_j G_j^\circ \epsilon +RT\sum\limits_j(n_{j0} + \nu_j\epsilon)\ln a_j $$
</p>

<p>
The first term is simply the initial Gibbs free energy that is present before any reaction begins, and it is a constant. It is difficult to evaluate, so we will move it to the left side of the equation in the next step, because it does not matter what its value is since it is a constant. The second term is related to the Gibbs free energy of reaction: \(\Delta_rG = \sum\limits_j \nu_j G_j^\circ\). With these observations we rewrite the equation as:
</p>

<p>
$$G - \sum\limits_j n_{j0}G_j^\circ = \Delta_rG \epsilon +RT\sum\limits_j(n_{j0} + \nu_j\epsilon)\ln a_j $$
</p>

<p>
Now, we have an equation that allows us to compute the change in Gibbs free energy as a function of the reaction extent, initial number of moles of each species, and the activities of each species. This difference in Gibbs free energy has no natural scale, and depends on the size of the system, i.e. on \(n_{j0}\). It is desirable to avoid this, so we now rescale the equation by the total initial moles present, \(n_{T0}\) and define a new variable \(\epsilon' = \epsilon/n_{T0}\), which is dimensionless. This leads to:
</p>

<p>
$$ \frac{G - \sum\limits_j n_{j0}G_j^\circ}{n_{T0}} = \Delta_rG \epsilon' + RT \sum\limits_j(y_{j0} + \nu_j\epsilon')\ln a_j $$
</p>

<p>
where \(y_{j0}\) is the initial mole fraction of species \(j\) present. The mole fractions are intensive properties that do not depend on the system size. Finally, we need to address \(a_j\). For an ideal gas, we know that \(A_j = \frac{y_j P}{P^\circ}\), where the numerator is the partial pressure of species \(j\) computed from the mole fraction of species \(j\) times the total pressure. To get the mole fraction we note:
</p>

<p>
$$y_j = \frac{n_j}{n_T} = \frac{n_{j0} + \nu_j \epsilon}{n_{T0} + \epsilon \sum\limits_j \nu_j} = \frac{y_{j0} + \nu_j \epsilon'}{1 + \epsilon'\sum\limits_j \nu_j} $$
</p>

<p>
This finally leads us to an equation that we can evaluate as a function of reaction extent:
</p>

<p>
$$ \frac{G - \sum\limits_j n_{j0}G_j^\circ}{n_{T0}} = \widetilde{\widetilde{G}} = \Delta_rG \epsilon' + RT\sum\limits_j(y_{j0} + \nu_j\epsilon') \ln\left(\frac{y_{j0}+\nu_j\epsilon'}{1+\epsilon'\sum\limits_j\nu_j} \frac{P}{P^\circ}\right) $$
</p>

<p>
we use a double tilde notation to distinguish this quantity from the quantity derived by Rawlings and Ekerdt which is further normalized by a factor of \(RT\). This additional scaling makes the quantities dimensionless, and makes the quantity have a magnitude of order unity, but otherwise has no effect on the shape of the graph.
</p>

<p>
Finally, if we know the initial mole fractions, the initial total pressure, the Gibbs energy of reaction, and the stoichiometric coefficients, we can plot the scaled reacting mixture energy as a function of reaction extent. At equilibrium, this energy will be a minimum. We consider the example in Rawlings and Ekerdt where isobutane (I) reacts with 1-butene (B) to form 2,2,3-trimethylpentane (P). The reaction occurs at a total pressure of 2.5 atm at 400K, with equal molar amounts of I and B. The standard Gibbs free energy of reaction at 400K is -3.72 kcal/mol. Compute the equilibrium composition.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

R = 8.314
P = 250000  <span style="color: #ff0000; font-weight: bold;"># Pa</span>
P0 = 100000 <span style="color: #ff0000; font-weight: bold;"># Pa, approximately 1 atm</span>
T = 400 <span style="color: #ff0000; font-weight: bold;"># K</span>

Grxn = -15564.0 <span style="color: #ff0000; font-weight: bold;">#J/mol</span>
yi0 = 0.5; yb0 = 0.5; yp0 = 0.0; <span style="color: #ff0000; font-weight: bold;"># initial mole fractions</span>

yj0 = np.array([yi0, yb0, yp0])
nu_j = np.array([-1.0, -1.0, 1.0])   <span style="color: #ff0000; font-weight: bold;"># stoichiometric coefficients</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">Gwigglewiggle</span>(extentp):
    diffg = Grxn * extentp
    sum_nu_j = np.sum(nu_j)
    <span style="color: #8b0000;">for</span> i,y <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">enumerate</span>(yj0):
        x1 = yj0[i] + nu_j[i] * extentp
        x2 = x1 / (1.0 + extentp*sum_nu_j)
        diffg += R * T * x1 * np.log(x2 * P / P0)
    <span style="color: #8b0000;">return</span> diffg
</pre>
</div>

<p>
There are bounds on how large \(\epsilon'\) can be. Recall that \(n_j = n_{j0} + \nu_j \epsilon\), and that \(n_j \ge 0\). Thus, \(\epsilon_{max} = -n_{j0}/\nu_j\), and the maximum value that \(\epsilon'\) can have is therefore \(-y_{j0}/\nu_j\) where \(y_{j0}>0\). When there are multiple species, you need the smallest \(epsilon'_{max}\) to avoid getting negative mole numbers.
</p>

<div class="org-src-container">

<pre class="src src-python">epsilonp_<span style="color: #8b0000;">max</span> = <span style="color: #8b0000;">min</span>(-yj0[yj0 &gt; 0] / nu_j[yj0 &gt; 0])
epsilonp = np.linspace(1e-6, epsilonp_max, 1000);

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

plt.plot(epsilonp,Gwigglewiggle(epsilonp))
plt.xlabel(<span style="color: #228b22;">'$\epsilon$'</span>)
plt.ylabel(<span style="color: #228b22;">'Gwigglewiggle'</span>)
plt.savefig(<span style="color: #228b22;">'images/gibbs-minim-1.png'</span>)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x10a8bf50&gt;]
&lt;matplotlib.text.Text object at 0x10608190&gt;
&lt;matplotlib.text.Text object at 0x10609d10&gt;
</pre>

<p><img src="/img/./images/gibbs-minim-1.png"><p>

<p>
Now we simply minimize our Gwigglewiggle function. Based on the figure above, the miminum is near 0.45.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fminbound

epsilonp_eq = fminbound(Gwigglewiggle, 0, 0.45)

plt.plot([extmin], [Gwigglewiggle(epsilonp_eq)], <span style="color: #228b22;">'ro'</span>)
plt.savefig(<span style="color: #228b22;">'images/gibbs-minim-2.png'</span>)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x10a8b5d0&gt;]
</pre>

<p><img src="/img/./images/gibbs-minim-2.png"><p>

<p>
To compute equilibrium mole fractions we do this:
</p>
<div class="org-src-container">

<pre class="src src-python">yi = (yi0 + nu_j[0]*epsilonp_eq) / (1.0 + epsilonp_eq*np.sum(nu_j))
yb = (yb0 + nu_j[1]*epsilonp_eq) / (1.0 + epsilonp_eq*np.sum(nu_j))
yp = (yp0 + nu_j[2]*epsilonp_eq) / (1.0 + epsilonp_eq*np.sum(nu_j))

<span style="color: #8b0000;">print</span> yi, yb, yp

<span style="color: #ff0000; font-weight: bold;"># or this</span>
y_j = (yj0 + np.dot(nu_j, epsilonp_eq)) / (1.0 + epsilonp_eq*np.sum(nu_j))
<span style="color: #8b0000;">print</span> y_j
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 0.0573226598476 0.0573226598476 0.885354680305
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; [ 0.05732266  0.05732266  0.88535468]
</pre>

<p>
\(K = \frac{a_P}{a_I a_B} = \frac{y_p P/P^\circ}{y_i P/P^\circ y_b P/P^\circ} = \frac{y_P}{y_i y_b}\frac{P^\circ}{P}\).
</p>

<p>
We can express the equilibrium constant like this :\(K = \prod\limits_j a_j^{\nu_j}\), and compute it with a single line of code.
</p>

<div class="org-src-container">

<pre class="src src-python">K = np.exp(-Grxn/R/T)
<span style="color: #8b0000;">print</span> K
<span style="color: #8b0000;">print</span> yp / (yi * yb) * P0 / P

<span style="color: #8b0000;">print</span> np.prod((y_j * P / P0)**nu_j)
</pre>
</div>

<pre class="example">
107.776294742
107.776632714
&gt;&gt;&gt; 107.776632714
</pre>

<p>
These results are very close, and only disagree because of the default tolerance used in identifying the minimum of our function. you could tighten the tolerances by setting options to the fminbnd function.
</p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
In this post we derived an equation for the Gibbs free energy of a reacting mixture and used it to find the equilibrium composition. In future posts we will examine some alternate forms of the equations that may be more useful in some circumstances.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/The-Gibbs-free-energy-of-a-reacting-mixture-and-the-equilibrium-composition.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Find the minimum distance from a point to a curve.</title>
      <link>http://jkitchin.github.io/blog/2013/02/14/Find-the-minimum-distance-from-a-point-to-a-curve</link>
      <pubDate>Thu, 14 Feb 2013 09:00:00 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">kHL8QHL_vZMcucCDIvaOOGqRcSY=</guid>
      <description>Find the minimum distance from a point to a curve.</description>
      <content:encoded><![CDATA[


<p>

A problem that can be cast as a constrained minimization problem is to find the minimum distance from a point to a curve. Suppose we have \(f(x) = x^2\), and the point (0.5, 2). what is the minimum distance from that point to \(f(x)\)?
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_cobyla

P = (0.5, 2)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(x):
    <span style="color: #8b0000;">return</span> x**2

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(X):
    x,y = X
    <span style="color: #8b0000;">return</span> np.sqrt((x - P[0])**2 + (y - P[1])**2)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">c1</span>(X):
    x,y = X
    <span style="color: #8b0000;">return</span> f(x) - y

X = fmin_cobyla(objective, x0=[0.5,0.5], cons=[c1])

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'The minimum distance is {0:1.2f}'</span>.format(objective(X))

<span style="color: #ff0000; font-weight: bold;"># Verify the vector to this point is normal to the tangent of the curve</span>
<span style="color: #ff0000; font-weight: bold;"># position vector from curve to point</span>
v1 = np.array(P) - np.array(X)
<span style="color: #ff0000; font-weight: bold;"># position vector</span>
v2 = np.array([1, 2.0 * X[0]])
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'dot(v1, v2) = '</span>,np.dot(v1, v2)

x = np.linspace(-2, 2, 100)

plt.plot(x, f(x), <span style="color: #228b22;">'r-'</span>, label=<span style="color: #228b22;">'f(x)'</span>)
plt.plot(P[0], P[1], <span style="color: #228b22;">'bo'</span>, label=<span style="color: #228b22;">'point'</span>)
plt.plot([P[0], X[0]], [P[1], X[1]], <span style="color: #228b22;">'b-'</span>, label=<span style="color: #228b22;">'shortest distance'</span>)
plt.plot([X[0], X[0] + 1], [X[1], X[1] + 2.0 * X[0]], <span style="color: #228b22;">'g-'</span>, label=<span style="color: #228b22;">'tangent'</span>)
plt.axis(<span style="color: #228b22;">'equal'</span>)
plt.xlabel(<span style="color: #228b22;">'x'</span>)
plt.ylabel(<span style="color: #228b22;">'y'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/min-dist-p-func.png'</span>)
</pre>
</div>

<pre class="example">
The minimum distance is 0.86
dot(v1, v2) =  0.000336477214214

   Normal return from subroutine COBYLA

   NFVALS =   44   F = 8.579598E-01    MAXCV = 0.000000E+00
   X = 1.300793E+00   1.692061E+00
</pre>

<p><img src="/img/./images/min-dist-p-func.png"><p>

<p>
In the code above, we demonstrate that the point we find on the curve that minimizes the distance satisfies the property that a vector from that point to our other point is normal to the tangent of the curve at that point. This is shown by the fact that the dot product of the two vectors is very close to zero. It is not zero because of the accuracy criteria that is used to stop the minimization is not high enough.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/14/Find-the-minimum-distance-from-a-point-to-a-curve..org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Using constrained optimization to find the amount of each phase present</title>
      <link>http://jkitchin.github.io/blog/2013/02/12/Using-constrained-optimization-to-find-the-amount-of-each-phase-present</link>
      <pubDate>Tue, 12 Feb 2013 09:00:00 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">Kp8tlX5vhQuLJnSs7kNRHbpfDOk=</guid>
      <description>Using constrained optimization to find the amount of each phase present</description>
      <content:encoded><![CDATA[


<p>
The problem we solve here is that we have several compounds containing Ni and Al, and a bulk mixture of a particular composition of Ni and Al. We want to know which mixture of phases will minimize the total energy. The tricky part is that the optimization is constrained because the mixture of phases must have the overall stoichiometry we want.  We formulate the problem like this.
</p>

<p>
Basically, we want to minimize the function \(E = \sum w_i E_i\), where \(w_i\) is the mass of phase \(i\), and \(E_i\) is the energy per unit mass of phase \(i\). There are some constraints to ensure conservation of mass. Let us consider the following compounds: Al, NiAl, Ni3Al, and Ni, and consider a case where the bulk composition of our alloy is 93.8% Ni and balance Al. We want to know which phases are present, and in what proportions. There are some subtleties in considering the formula and molecular weight of an alloy. We consider the formula with each species amount normalized so the fractions all add up to one. For example, Ni_3Al is represented as Ni_{0.75}Al_{0.25}, and the molecular weight is computed as 0.75*MW_{Ni} + 0.25*MW_{Al}.
</p>

<p>
We use scipy.optimize.fmin_slsqp to solve this problem, and define two equality constraint functions, and the bounds on each weight fraction.
</p>

<p>
Note: the energies in this example were computed by density functional theory at 0K.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp

<span style="color: #ff0000; font-weight: bold;"># these are atomic masses of each species</span>
Ni = 58.693
Al = 26.982

COMPOSITIONS = [<span style="color: #228b22;">'Al'</span>, <span style="color: #228b22;">'NiAl'</span>,              <span style="color: #228b22;">'Ni3Al'</span>,  <span style="color: #228b22;">'Ni'</span>]
MW = np.array(  [Al,  (Ni + Al)/2.0, (3*Ni + Al)/4.0, Ni])

xNi = np.array([0.0, 0.5, 0.75, 1.0])  <span style="color: #ff0000; font-weight: bold;"># mole fraction of nickel in each compd</span>
WNi = xNi*Ni / MW                      <span style="color: #ff0000; font-weight: bold;"># weight fraction of Ni in each cmpd</span>

ENERGIES = np.array([0.0, -0.7, -0.5, 0.0])

BNi = 0.938

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">G</span>(w):
    <span style="color: #228b22;">'function to minimize. w is a vector of weight fractions, ENERGIES is defined above.'</span>
    <span style="color: #8b0000;">return</span> np.dot(w, ENERGIES)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ec1</span>(w):
    <span style="color: #228b22;">'conservation of Ni constraint'</span>
    <span style="color: #8b0000;">return</span> BNi - np.dot(w, WNi)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ec2</span>(w):
    <span style="color: #228b22;">'weight fractions sum to one constraint'</span>
    <span style="color: #8b0000;">return</span> 1 - np.sum(w)

w0 = np.array([0.0, 0.0, 0.5, 0.5]) <span style="color: #ff0000; font-weight: bold;"># guess weight fractions</span>

y = fmin_slsqp(G,   
               w0,
               eqcons=[ec1, ec2], 
               bounds=[(0,1)]*<span style="color: #8b0000;">len</span>(w0))

<span style="color: #8b0000;">for</span> ci, wi <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(COMPOSITIONS, y):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0:8s} {1:+8.2%}'</span>.format(ci, wi)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.    (Exit mode 0)
            Current function value: -0.233299644373
            Iterations: 2
            Function evaluations: 12
            Gradient evaluations: 2
Al         -0.00%
NiAl       +0.00%
Ni3Al     +46.66%
Ni        +53.34%
</pre>

<p>
So, the sample will be about 47% <i>by weight</i> of Ni3Al, and 53% <i>by weight</i> of pure Ni.
</p>

<p>
It may be convenient to formulate this in terms of moles.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp

COMPOSITIONS = [<span style="color: #228b22;">'Al'</span>, <span style="color: #228b22;">'NiAl'</span>, <span style="color: #228b22;">'Ni3Al'</span>,  <span style="color: #228b22;">'Ni'</span>]
xNi = np.array([0.0, 0.5, 0.75, 1.0])   <span style="color: #ff0000; font-weight: bold;"># define this in mole fractions</span>

ENERGIES = np.array([0.0, -0.7, -0.5, 0.0]) 

xNiB = 0.875  <span style="color: #ff0000; font-weight: bold;"># bulk Ni composition</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">G</span>(n):
    <span style="color: #228b22;">'function to minimize'</span>
    <span style="color: #8b0000;">return</span> np.dot(n, ENERGIES)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ec1</span>(n):
    <span style="color: #228b22;">'conservation of Ni'</span>
    Ntot = np.sum(n)
    <span style="color: #8b0000;">return</span> (Ntot * xNiB) - np.dot(n,  xNi)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ec2</span>(n):
    <span style="color: #228b22;">'mole fractions sum to one'</span>
    <span style="color: #8b0000;">return</span> 1 - np.sum(n)

n0 = np.array([0.0, 0.0, 0.45, 0.55]) <span style="color: #ff0000; font-weight: bold;"># initial guess of mole fractions</span>

y = fmin_slsqp(G,   
               n0,
               eqcons=[ec1, ec2], 
               bounds=[(0, 1)]*(<span style="color: #8b0000;">len</span>(n0)))

<span style="color: #8b0000;">for</span> ci, xi <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(COMPOSITIONS, y):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0:8s} {1:+8.2%}'</span>.format(ci, xi)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.    (Exit mode 0)
            Current function value: -0.25
            Iterations: 2
            Function evaluations: 12
            Gradient evaluations: 2
Al         +0.00%
NiAl       -0.00%
Ni3Al     +50.00%
Ni        +50.00%
</pre>

<p>
This means we have a 1:1 molar ratio of Ni and Ni_{0.75}Al_{0.25}. That works out to the overall bulk composition in this particular problem.
</p>

<p>
Let us verify that these two approaches really lead to the same conclusions. On a weight basis we estimate 53.3%wt Ni and 46.7%wt Ni3Al, whereas we predict an equimolar mixture of the two phases. Below we compute the mole fraction of Ni in each case.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># these are atomic masses of each species</span>
Ni = 58.693
Al = 26.982

<span style="color: #ff0000; font-weight: bold;"># Molar case</span>
<span style="color: #ff0000; font-weight: bold;"># 1 mol Ni + 1 mol Ni_{0.75}Al_{0.25}</span>
N1 = 1.0; N2 = 1.0
mol_Ni = 1.0 * N1 + 0.75 * N2
xNi = mol_Ni / (N1 + N2)
<span style="color: #8b0000;">print</span> xNi

<span style="color: #ff0000; font-weight: bold;"># Mass case</span>
M1 = 0.533; M2 = 0.467
MW1 = Ni; MW2 = 0.75*Ni + 0.25*Al

xNi2 = (1.0 * M1/MW1 + 0.75 * M2 / MW2) / (M1/MW1 + M2/MW2)
<span style="color: #8b0000;">print</span> xNi2
</pre>
</div>

<pre class="example">
0.875
0.874192746385
</pre>

<p>
You can see the overall mole fraction of Ni is practically the same in each case.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/12/Using-constrained-optimization-to-find-the-amount-of-each-phase-present.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Constrained minimization to find equilibrium compositions</title>
      <link>http://jkitchin.github.io/blog/2013/02/05/Constrained-minimization-to-find-equilibrium-compositions</link>
      <pubDate>Tue, 05 Feb 2013 09:00:00 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">HB-uY8lu7q22beBW__fqM0My8HY=</guid>
      <description>Constrained minimization to find equilibrium compositions</description>
      <content:encoded><![CDATA[



<p>
adapated from Chemical Reactor analysis and design fundamentals, Rawlings and Ekerdt, appendix A.2.3.
</p>

<p>
<a href="http://matlab.cheme.cmu.edu/2011/08/12/constrained-minimization-to-find-equilibrium-compositions/" >Matlab post</a>
</p>

<p>
The equilibrium composition of a reaction is the one that minimizes the total Gibbs free energy. The Gibbs free energy of a reacting ideal gas mixture depends on the mole fractions of each species, which are determined by the initial mole fractions of each species, the extent of reactions that convert each species, and the equilibrium constants.
</p>

<p>
Reaction 1: \(I + B \rightleftharpoons P1\)
</p>

<p>
Reaction 2: \(I + B \rightleftharpoons P2\)
</p>

<p>
Here we define the Gibbs free energy of the mixture as a function of the reaction extents.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">gibbs</span>(E):
    <span style="color: #228b22;">'function defining Gibbs free energy as a function of reaction extents'</span>
    e1 = E[0]
    e2 = E[1]
    <span style="color: #ff0000; font-weight: bold;"># known equilibrium constants and initial amounts</span>
    K1 = 108; K2 = 284; P = 2.5;
    yI0 = 0.5; yB0 = 0.5; yP10 = 0.0; yP20 = 0.0;
    <span style="color: #ff0000; font-weight: bold;"># compute mole fractions</span>
    d = 1 - e1 - e2;
    yI = (yI0 - e1 - e2) / d;
    yB = (yB0 - e1 - e2) / d;
    yP1 = (yP10 + e1) / d;
    yP2 = (yP20 + e2) / d;
    G = (-(e1 * np.log(K1) + e2 * np.log(K2)) +
         d * np.log(P) + yI * d * np.log(yI) + 
         yB * d * np.log(yB) + yP1 * d * np.log(yP1) + yP2 * d * np.log(yP2))
    <span style="color: #8b0000;">return</span> G
</pre>
</div>

<p>
The equilibrium constants for these reactions are known, and we seek to find the equilibrium reaction extents so we can determine equilibrium compositions. The equilibrium reaction extents are those that minimize the Gibbs free energy.  We have the following constraints, written in standard less than or equal to form:
</p>

<p>
\(-\epsilon_1 \le 0\)
</p>

<p>
\(-\epsilon_2 \le 0\)
</p>

<p>
\(\epsilon_1 + \epsilon_2 \le 0.5\)
</p>

<p>
In Matlab we express this in matrix form as Ax=b where \(A = \left[ \begin{array}{cc} -1 & 0 \\ 0 & -1 \\ 1 & 1 \end{array} \right]\) and \(b = \left[ \begin{array}{c} 0 \\ 0 \\ 0.5\end{array} \right]\)
</p>

<p>
Unlike in Matlab, in python we construct the inequality constraints as functions that are greater than or equal to zero when the constraint is met.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">constraint1</span>(E):
    e1 = E[0]
    <span style="color: #8b0000;">return</span> e1

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">constraint2</span>(E):
    e2 = E[1]
    <span style="color: #8b0000;">return</span> e2

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">constraint3</span>(E):
    e1 = E[0]
    e2 = E[1]
    <span style="color: #8b0000;">return</span> 0.5 - (e1 + e2)
</pre>
</div>

<p>
Now, we minimize.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp

X0 = [0.133, 0.351]
X = fmin_slsqp(gibbs, X0, ieqcons=[constraint1, constraint2, constraint3])
<span style="color: #8b0000;">print</span> X

<span style="color: #8b0000;">print</span> gibbs(X)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; Optimization terminated successfully.    (Exit mode 0)
            Current function value: -2.55942338611
            Iterations: 1
            Function evaluations: 8
            Gradient evaluations: 1
[ 0.1330313   0.35101555]
&gt;&gt;&gt; -2.55942338611
</pre>


<p>
One way we can verify our solution is to plot the gibbs function and see where the minimum is, and whether there is more than one minimum. We start by making grids over the range of 0 to 0.5. Note we actually start slightly above zero because at zero there are some numerical imaginary elements of the gibbs function or it is numerically not defined since there are logs of zero there. We also set all elements where the sum of the two extents is greater than 0.5 to near zero, since those regions violate the constraints. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">gibbs</span>(E):
    <span style="color: #228b22;">'function defining Gibbs free energy as a function of reaction extents'</span>
    e1 = E[0]
    e2 = E[1]
    <span style="color: #ff0000; font-weight: bold;"># known equilibrium constants and initial amounts</span>
    K1 = 108; K2 = 284; P = 2.5;
    yI0 = 0.5; yB0 = 0.5; yP10 = 0.0; yP20 = 0.0;
    <span style="color: #ff0000; font-weight: bold;"># compute mole fractions</span>
    d = 1 - e1 - e2;
    yI = (yI0 - e1 - e2)/d;
    yB = (yB0 - e1 - e2)/d;
    yP1 = (yP10 + e1)/d;
    yP2 = (yP20 + e2)/d;
    G = (-(e1 * np.log(K1) + e2 * np.log(K2)) +
         d * np.log(P) + yI * d * np.log(yI) + 
         yB * d * np.log(yB) + yP1 * d * np.log(yP1) + yP2 * d * np.log(yP2))
    <span style="color: #8b0000;">return</span> G


a = np.linspace(0.001, 0.5, 100)
E1, E2 = np.meshgrid(a,a)

sumE = E1 + E2
E1[sumE &gt;= 0.5] = 0.00001
E2[sumE &gt;= 0.5] = 0.00001

<span style="color: #ff0000; font-weight: bold;"># now evaluate gibbs</span>
G = np.zeros(E1.shape)
m,n = E1.shape

G = gibbs([E1, E2])

CS = plt.contour(E1, E2, G, levels=np.linspace(G.min(),G.max(),100))
plt.xlabel(<span style="color: #228b22;">'$\epsilon_1$'</span>)
plt.ylabel(<span style="color: #228b22;">'$\epsilon_2$'</span>)
plt.colorbar()

plt.plot([ 0.1330313],   [0.35101555], <span style="color: #228b22;">'ro'</span>)

plt.savefig(<span style="color: #228b22;">'images/gibbs-minimization-1.png'</span>)
plt.savefig(<span style="color: #228b22;">'images/gibbs-minimization-1.svg'</span>)
plt.show()
</pre>
</div>

<p><img src="/img/./images/gibbs-minimization-1.png"><p>

<p>
You can see we found the minimum. We can compute the mole fractions pretty easily.
</p>

<div class="org-src-container">

<pre class="src src-python">e1 = X[0];
e2 = X[1];

yI0 = 0.5; yB0 = 0.5; yP10 = 0; yP20 = 0; <span style="color: #ff0000; font-weight: bold;">#initial mole fractions</span>

d = 1 - e1 - e2;
yI = (yI0 - e1 - e2)/d;
yB = (yB0 - e1 - e2)/d;
yP1 = (yP10 + e1)/d;
yP2 = (yP20 + e2)/d;

<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'y_I = {0:1.3f} y_B = {1:1.3f} y_P1 = {2:1.3f} y_P2 = {3:1.3f}'</span>.format(yI,yB,yP1,yP2))
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; y_I = 0.031 y_B = 0.031 y_P1 = 0.258 y_P2 = 0.680
</pre>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> summary</h2>
<div class="outline-text-2" id="text-1">
<p>
I found setting up the constraints in this example to be more confusing than the Matlab syntax.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/05/Constrained-minimization-to-find-equilibrium-compositions.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Using Lagrange multipliers in optimization</title>
      <link>http://jkitchin.github.io/blog/2013/02/03/Using-Lagrange-multipliers-in-optimization</link>
      <pubDate>Sun, 03 Feb 2013 09:00:00 EST</pubDate>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">w3efK6wTWCiiCnwig0GgQ_WN07c=</guid>
      <description>Using Lagrange multipliers in optimization</description>
      <content:encoded><![CDATA[


<p>


<a href="http://matlab.cheme.cmu.edu/2011/12/24/using-lagrange-multipliers-in-optimization/" >Matlab post</a>  (adapted from <a href="http://en.wikipedia.org/wiki/Lagrange_multipliers" >http://en.wikipedia.org/wiki/Lagrange_multipliers</a>.)
</p>

<p>
Suppose we seek to maximize the function \(f(x,y)=x+y\) subject to the constraint that \(x^2 + y^2 = 1\). The function we seek to maximize is an unbounded plane, while the constraint is a unit circle. We want the maximum value of the circle, on the plane. We plot these two functions here.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

x = np.linspace(-1.5, 1.5)

[X, Y] = np.meshgrid(x, x)

<span style="color: #8b0000;">import</span> matplotlib <span style="color: #8b0000;">as</span> mpl
<span style="color: #8b0000;">from</span> mpl_toolkits.mplot3d <span style="color: #8b0000;">import</span> Axes3D
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

fig = plt.figure()
ax = fig.gca(projection=<span style="color: #228b22;">'3d'</span>)

ax.plot_surface(X, Y, X + Y)

theta = np.linspace(0,2*np.pi);
R = 1.0
x1 = R * np.cos(theta)
y1 = R * np.sin(theta)

ax.plot(x1, y1, x1 + y1, <span style="color: #228b22;">'r-'</span>)
plt.savefig(<span style="color: #228b22;">'images/lagrange-1.png'</span>)
</pre>
</div>

<p><img src="/img/./images/lagrange-1.png"><p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Construct the Lagrange multiplier augmented function</h2>
<div class="outline-text-2" id="text-1">
<p>
To find the maximum, we construct the following function: \(\Lambda(x,y; \lambda) = f(x,y)+\lambda g(x,y)\) where \(g(x,y) = x^2 + y^2 - 1 = 0\), which is the constraint function. Since \(g(x,y)=0\), we are not really changing the original function, provided that the constraint is met!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(X):
    x = X[0]
    y = X[1]
    L = X[2] <span style="color: #ff0000; font-weight: bold;"># this is the multiplier. lambda is a reserved keyword in python</span>
    <span style="color: #8b0000;">return</span> x + y + L * (x**2 + y**2 - 1)
</pre>
</div>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Finding the partial derivatives</h2>
<div class="outline-text-2" id="text-2">
<p>
The minima/maxima of the augmented function are located where all of the partial derivatives of the augmented function are equal to zero, i.e. \(\partial \Lambda/\partial x = 0\), \(\partial \Lambda/\partial y = 0\), and \(\partial \Lambda/\partial \lambda = 0\). the process for solving this is usually to analytically evaluate the partial derivatives, and then solve the unconstrained resulting equations, which may be nonlinear.
</p>

<p>
Rather than perform the analytical differentiation, here we develop a way to numerically approximate the partial derivatives.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">dfunc</span>(X):
    dLambda = np.zeros(<span style="color: #8b0000;">len</span>(X))
    h = 1e-3 <span style="color: #ff0000; font-weight: bold;"># this is the step size used in the finite difference.</span>
    <span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(len(X)):
        dX = np.zeros(<span style="color: #8b0000;">len</span>(X))
        dX[i] = h
        dLambda[i] = (func(X+dX)-func(X-dX))/(2*h);
    <span style="color: #8b0000;">return</span> dLambda
</pre>
</div>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Now we solve for the zeros in the partial derivatives</h2>
<div class="outline-text-2" id="text-3">
<p>
The function we defined above (dfunc) will equal zero at a maximum or minimum. It turns out there are two solutions to this problem, but only one of them is the maximum value. Which solution you get depends on the initial guess provided to the solver. Here we have to use some judgement to identify the maximum.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve

<span style="color: #ff0000; font-weight: bold;"># this is the max</span>
X1 = fsolve(dfunc, [1, 1, 0])
<span style="color: #8b0000;">print</span> X1, func(X1)

<span style="color: #ff0000; font-weight: bold;"># this is the min</span>
X2 = fsolve(dfunc, [-1, -1, 0])
<span style="color: #8b0000;">print</span> X2, func(X2)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; ... &gt;&gt;&gt; [ 0.70710678  0.70710678 -0.70710678] 1.41421356237
&gt;&gt;&gt; ... &gt;&gt;&gt; [-0.70710678 -0.70710678  0.70710678] -1.41421356237
</pre>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Summary</h2>
<div class="outline-text-2" id="text-4">
<p>
Three dimensional plots in matplotlib are a little more difficult than in Matlab (where the code is almost the same as 2D plots, just different commands, e.g. plot vs plot3). In Matplotlib you have to import additional modules in the right order, and use the object oriented approach to plotting as shown here.</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/03/Using-Lagrange-multipliers-in-optimization.org">org-mode source</a><p>]]></content:encoded>
    </item>
    <item>
      <title>Linear programming example with inequality constraints</title>
      <link>http://jkitchin.github.io/blog/2013/01/31/Linear-programming-example-with-inequality-constraints</link>
      <pubDate>Thu, 31 Jan 2013 09:00:00 EST</pubDate>
      <category><![CDATA[linear programming]]></category>
      <category><![CDATA[optimization]]></category>
      <guid isPermaLink="false">djW_be5R6yp6YhWRVJYttcsFnU8=</guid>
      <description>Linear programming example with inequality constraints</description>
      <content:encoded><![CDATA[


<p>

<a href="http://matlab.cheme.cmu.edu/2011/10/21/linear-programming-example-with-inequality-constraints/" >Matlab post</a>
</p>

<p>
adapted from <a href="http://www.matrixlab-examples.com/linear-programming.html" >http://www.matrixlab-examples.com/linear-programming.html</a> which solves this problem with fminsearch.
</p>

<p>
Let us suppose that a merry farmer has 75 roods (4 roods = 1 acre) on which to plant two crops: wheat and corn. To produce these crops, it costs the farmer (for seed, water, fertilizer, etc. ) $120 per rood for the wheat, and $210 per rood for the corn. The farmer has $15,000 available for expenses, but after the harvest the farmer must store the crops while awaiting favorable or good market conditions. The farmer has storage space for 4,000 bushels. Each rood yields an average of 110 bushels of wheat or 30 bushels of corn. If the net profit per bushel of wheat (after all the expenses) is $1.30 and for corn is $2.00, how should the merry farmer plant the 75 roods to maximize profit?
</p>

<p>
Let \(x\) be the number of roods of wheat planted, and \(y\) be the number of roods of corn planted. The profit function is: \( P = (110)($1.3)x + (30)($2)y = 143x + 60y \)
</p>

<p>
There are some constraint inequalities, specified by the limits on expenses, storage and roodage. They are:
</p>

<p>
\(\$120x + \$210y <= \$15000\) (The total amount spent cannot exceed the amount the farm has)
</p>

<p>
\(110x + 30y <= 4000\) (The amount generated should not exceed storage space.)
</p>

<p>
\(x + y <= 75\) (We cannot plant more space than we have.)
</p>

<p>
\(0 <= x and 0 <= y \) (all amounts of planted land must be positive.)
</p>

<p>
To solve this problem, we cast it as a linear programming problem, which minimizes a function f(X) subject to some constraints. We create a proxy function for the negative of profit, which we seek to minimize.
</p>

<p>
f = -(143*x + 60*y)
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_cobyla

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(X):
    <span style="color: #228b22;">'''objective function to minimize. It is the negative of profit,</span>
<span style="color: #228b22;">    which we seek to maximize.'''</span>
    x, y = X
    <span style="color: #8b0000;">return</span> -(143*x + 60*y)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">c1</span>(X):
    <span style="color: #228b22;">'Ensure 120x + 210y &lt;= 15000'</span>
    x,y = X
    <span style="color: #8b0000;">return</span> 15000 - 120 * x - 210*y

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">c2</span>(X):
    <span style="color: #228b22;">'ensure 110x + 30y &lt;= 4000'</span>
    x,y = X
    <span style="color: #8b0000;">return</span> 4000 - 110*x - 30 * y

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">c3</span>(X):
    <span style="color: #228b22;">'Ensure x + y is less than or equal to 75'</span>
    x,y = X
    <span style="color: #8b0000;">return</span> 75 - x - y

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">c4</span>(X):
    <span style="color: #228b22;">'Ensure x &gt;= 0'</span>
    <span style="color: #8b0000;">return</span> X[0]

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">c5</span>(X):
    <span style="color: #228b22;">'Ensure y &gt;= 0'</span>
    <span style="color: #8b0000;">return</span> X[1]

X = fmin_cobyla(objective, x0=[20, 30], cons=[c1, c2, c3, c4, c5])

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'We should plant {0:1.2f} roods of wheat.'</span>.format(X[0])
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'We should plant {0:1.2f} roods of corn'</span>.format(X[1])
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'The maximum profit we can earn is ${0:1.2f}.'</span>.format(-objective(X))
</pre>
</div>

<pre class="example">
   Normal return from subroutine COBYLA

   NFVALS =   40   F =-6.315625E+03    MAXCV = 4.547474E-13
   X = 2.187500E+01   5.312500E+01
We should plant 21.88 roods of wheat.
We should plant 53.12 roods of corn
The maximum profit we can earn is $6315.62.
</pre>

<p>
This code is not exactly the same as the original <a href="http://matlab.cheme.cmu.edu/2011/10/21/linear-programming-example-with-inequality-constraints/" >post</a>, but we get to the same answer. The linear programming capability in scipy is currently somewhat limited in 0.10. It is a little better in 0.11, but probably not as advanced as Matlab. There are some external libraries available:
</p>

<ol>
<li><a href="http://abel.ee.ucla.edu/cvxopt/" >http://abel.ee.ucla.edu/cvxopt/</a>
</li>
<li><a href="http://openopt.org/LP" >http://openopt.org/LP</a>
</li>
</ol>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/01/31/Linear-programming-example-with-inequality-constraints.org">org-mode source</a><p>]]></content:encoded>
    </item>
  </channel>
</rss>
