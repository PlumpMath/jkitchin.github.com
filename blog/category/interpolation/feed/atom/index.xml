<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-12-19T16:20:08Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Interpolation with splines]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/27/Interpolation-with-splines" />
    <id>http://jkitchin.github.io/blog/2013/02/27/Interpolation-with-splines</id>
    <updated>2013-02-27T14:43:07Z</updated>
    <published>2013-02-27T14:43:07Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="interpolation" />
    <summary type="html"><![CDATA[Interpolation with splines]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/27/Interpolation-with-splines"><![CDATA[


<p>
When you do not know the functional form of data to fit an equation, you can still fit/interpolate with splines.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># use splines to fit and interpolate data</span>
<span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> interp1d
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

x = np.array([ 0,      1,      2,      3,      4    ])
y = np.array([ 0.,     0.308,  0.55,   0.546,  0.44 ])

<span style="color: #ff0000; font-weight: bold;"># create the interpolating function</span>
f = interp1d(x, y, kind=<span style="color: #228b22;">'cubic'</span>, bounds_error=<span style="color: #8b0000;">False</span>)

<span style="color: #ff0000; font-weight: bold;"># to find the maximum, we minimize the negative of the function. We</span>
<span style="color: #ff0000; font-weight: bold;"># cannot just multiply f by -1, so we create a new function here.</span>
f2 = interp1d(x, -y, kind=<span style="color: #228b22;">'cubic'</span>)
xmax = fmin(f2, 2.5)

xfit = np.linspace(0,4)

plt.plot(x,y,<span style="color: #228b22;">'bo'</span>)
plt.plot(xfit, f(xfit),<span style="color: #228b22;">'r-'</span>)
plt.plot(xmax, f(xmax),<span style="color: #228b22;">'g*'</span>)
plt.legend([<span style="color: #228b22;">'data'</span>,<span style="color: #228b22;">'fit'</span>,<span style="color: #228b22;">'max'</span>], loc=<span style="color: #228b22;">'best'</span>, numpoints=1)
plt.xlabel(<span style="color: #228b22;">'x data'</span>)
plt.ylabel(<span style="color: #228b22;">'y data'</span>)
plt.title(<span style="color: #228b22;">'Max point = ({0:1.2f}, {1:1.2f})'</span>.format(<span style="color: #8b0000;">float</span>(xmax),
                                                    <span style="color: #8b0000;">float</span>(f(xmax))))
plt.savefig(<span style="color: #228b22;">'images/splinefit.png'</span>)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.
         Current function value: -0.575712
         Iterations: 12
         Function evaluations: 24
</pre>

<p><img src="/img/./images/splinefit.png"><p>

<p>
There are other good examples at <a href="http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html" >http://docs.scipy.org/doc/scipy/reference/tutorial/interpolate.html</a>
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/27/Interpolation-with-splines.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Interpolation of data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/27/Interpolation-of-data" />
    <id>http://jkitchin.github.io/blog/2013/02/27/Interpolation-of-data</id>
    <updated>2013-02-27T14:42:57Z</updated>
    <published>2013-02-27T14:42:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="interpolation" />
    <summary type="html"><![CDATA[Interpolation of data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/27/Interpolation-of-data"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/08/01/interpolation-of-data/" >Matlab post</a>
</p>

<p>
When we have data at two points but we need data in between them we use interpolation. Suppose we have the points (4,3) and (6,2) and we want to know the value of y at x=4.65, assuming y varies linearly between these points. we use the interp1d command to achieve this. The syntax in python is slightly different than in matlab.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> interp1d

x = [4, 6]
y = [3, 2]

ifunc = interp1d(x, y)

<span style="color: #8b0000;">print</span> ifunc(4.65)


ifunc = interp1d(x, y, bounds_error=<span style="color: #8b0000;">False</span>) <span style="color: #ff0000; font-weight: bold;"># do not raise error on out of bounds</span>
<span style="color: #8b0000;">print</span> ifunc([4.65, 5.01, 4.2, 9])
</pre>
</div>

<pre class="example">
2.675
[ 2.675  2.495  2.9      nan]
</pre>

<p>
The default interpolation method is simple linear interpolation between points. Other methods exist too, such as fitting a cubic spline to the data and using the spline representation to interpolate from.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> interp1d

x = [1, 2, 3, 4];
y = [1, 4, 9, 16]; <span style="color: #ff0000; font-weight: bold;"># y = x^2</span>

xi = [ 1.5, 2.5, 3.5]; <span style="color: #ff0000; font-weight: bold;"># we want to interpolate on these values</span>
y1 = interp1d(x,y)

<span style="color: #8b0000;">print</span> y1(xi)

y2 = interp1d(x,y,<span style="color: #228b22;">'cubic'</span>)
<span style="color: #8b0000;">print</span> y2(xi)

<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.array(xi)**2
</pre>
</div>

<pre class="example">
[  2.5   6.5  12.5]
[  2.25   6.25  12.25]
[  2.25   6.25  12.25]
</pre>

<p>
In this case the cubic spline interpolation is  more accurate than the linear interpolation. That is because the underlying data was polynomial in nature, and a spline is like a polynomial. That may not always be the case, and you need some engineering judgement to know which method is best.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/27/Interpolation-of-data.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Numerical solution to a simple ode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/26/Numerical-solution-to-a-simple-ode" />
    <id>http://jkitchin.github.io/blog/2013/02/26/Numerical-solution-to-a-simple-ode</id>
    <updated>2013-03-23T16:03:44Z</updated>
    <published>2013-02-26T21:17:44Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="ode" />
    <category scheme="http://jkitchin.github.io/blog" term="interpolation" />
    <summary type="html"><![CDATA[Numerical solution to a simple ode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/26/Numerical-solution-to-a-simple-ode"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/08/03/numerical-solution-to-a-simple-ode/" >Matlab post</a>
</p>

<p>
Integrate this ordinary differential equation (ode):
</p>

<p>
$$\frac{dy}{dt} = y(t)$$
</p>

<p>
over the time span of 0 to 2. The initial condition is y(0) = 1.
</p>

<p>
to solve this equation, you need to create a function of the form: dydt = f(y, t) and then use one of the odesolvers, e.g. odeint.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">fprime</span>(y,t):
    <span style="color: #8b0000;">return</span> y

tspan = np.linspace(0, 2)
y0 = 1
ysol = odeint(fprime, y0, tspan)

plt.plot(tspan, ysol, label=<span style="color: #228b22;">'numerical solution'</span>)
plt.plot(tspan, np.exp(tspan), <span style="color: #228b22;">'r--'</span>, label=<span style="color: #228b22;">'analytical solution'</span>)
plt.xlabel(<span style="color: #228b22;">'time'</span>)
plt.ylabel(<span style="color: #228b22;">'y(t)'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/simple-ode.png'</span>)
</pre>
</div>

<p><img src="/img/./images/simple-ode.png"><p>

<p>
The numerical and analytical solutions agree.
</p>

<p>
Now, suppose you want to know at what time is the solution equal to 3? There are several approaches to this, including setting up a solver, or using an event like approach to stop integration at y=3. A simple approach is to use reverse interpolation. We simply reverse the x and y vectors so that y is the independent variable, and we interpolate the corresponding x-value.

</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">fprime</span>(y,t):
    <span style="color: #8b0000;">return</span> y

tspan = np.linspace(0, 2)
y0 = 1
ysol = odeint(fprime, y0, tspan)

<span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> interp1d

ip = interp1d(ysol[:,0], tspan) <span style="color: #ff0000; font-weight: bold;"># reverse interpolation</span>
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'y = 3 at x = {0}'</span>.format(ip(3))
</pre>
</div>

<pre class="example">
y = 3 at x = 1.09854780564
</pre>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/26/Numerical-solution-to-a-simple-ode.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Better interpolate than never]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/02/Better-interpolate-than-never" />
    <id>http://jkitchin.github.io/blog/2013/02/02/Better-interpolate-than-never</id>
    <updated>2013-02-27T14:42:42Z</updated>
    <published>2013-02-02T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="interpolation" />
    <summary type="html"><![CDATA[Better interpolate than never]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/02/Better-interpolate-than-never"><![CDATA[


<p>

<a href="http://matlab.cheme.cmu.edu/2012/02/02/better-interpolate-than-never/" >Matlab post</a>
</p>

<p>
We often have some data that we have obtained in the lab, and we want to solve some problem using the data. For example, suppose we have this data that describes the value of f at time t.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

t = [0.5, 1, 3, 6]
f = [0.6065,    0.3679,    0.0498,    0.0025]
plt.plot(t,f)
plt.xlabel(<span style="color: #228b22;">'t'</span>)
plt.ylabel(<span style="color: #228b22;">'f(t)'</span>)
plt.savefig(<span style="color: #228b22;">'images/interpolate-1.png'</span>)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x04D18730&gt;]
&lt;matplotlib.text.Text object at 0x04BEE8B0&gt;
&lt;matplotlib.text.Text object at 0x04C03970&gt;
</pre>

<p><img src="/img/./images/interpolate-1.png"><p>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Estimate the value of f at t=2.</h2>
<div class="outline-text-2" id="text-1">
<p>
This is a simple interpolation problem.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> interp1d

g = interp1d(t, f) <span style="color: #ff0000; font-weight: bold;"># default is linear interpolation</span>

<span style="color: #8b0000;">print</span> g(2)
<span style="color: #8b0000;">print</span> g([2, 3, 4])
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 0.20885
[ 0.20885     0.0498      0.03403333]
</pre>

<p>
The function we sample above is actually f(t) = exp(-t). The linearly interpolated example is not too accurate.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.exp(-2)
</pre>
</div>

<pre class="example">
0.135335283237
</pre>
</div>
</div>
<div id="outline-container-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> improved interpolation?</h2>
<div class="outline-text-2" id="text-2">
<p>

we can tell interp1d to use a different interpolation scheme such as cubic polynomial splines like this. For nonlinear functions, this may improve the accuracy of the interpolation, as it implicitly includes information about the curvature by fitting a cubic polynomial over neighboring points. 
</p>

<div class="org-src-container">

<pre class="src src-python">g2 = interp1d(t, f, <span style="color: #228b22;">'cubic'</span>)
<span style="color: #8b0000;">print</span> g2(2)
<span style="color: #8b0000;">print</span> g2([2, 3, 4])
</pre>
</div>

<pre class="example">
0.108481818182
[ 0.10848182  0.0498      0.08428727]
</pre>

<p>
Interestingly, this is a different value than Matlab's cubic interpolation. Let us show the cubic spline fit.
</p>

<div class="org-src-container">

<pre class="src src-python">plt.figure()
plt.plot(t,f)
plt.xlabel(<span style="color: #228b22;">'t'</span>)
plt.ylabel(<span style="color: #228b22;">'f(t)'</span>)

x = np.linspace(0.5, 6)
fit = g2(x)
plt.plot(x, fit, label=<span style="color: #228b22;">'fit'</span>)
plt.savefig(<span style="color: #228b22;">'images/interpolation-2.png'</span>)
</pre>
</div>

<pre class="example">
&lt;matplotlib.figure.Figure object at 0x04EF2430&gt;
[&lt;matplotlib.lines.Line2D object at 0x04F20ED0&gt;]
&lt;matplotlib.text.Text object at 0x04EF2FF0&gt;
&lt;matplotlib.text.Text object at 0x04F060D0&gt;
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x04F17570&gt;]
</pre>

<p><img src="/img/./images/interpolation-2.png"><p>

<p>
Wow. That is a weird looking fit. Very different from what Matlab <a href="http://matlab.cheme.cmu.edu/wp-content/uploads/2012/02/interp_methods_02.png" >produces</a>. This is a good teaching moment not to rely blindly on interpolation! We will rely on the linear interpolation from here out which behaves predictably.
</p>
</div>
</div>
<div id="outline-container-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> The inverse question</h2>
<div class="outline-text-2" id="text-3">
<p>
It is easy to interpolate a new value of f given a value of t. What if we want to know the time that f=0.2? We can approach this a few ways.
</p>
</div>

<div id="outline-container-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> method 1</h3>
<div class="outline-text-3" id="text-3-1">
<p>
We setup a function that we can use fsolve on. The function will be equal to zero at the time. The second function will look like 0 = 0.2 - f(t). The answer for 0.2=exp(-t) is t = 1.6094. Since we use interpolation here, we will get an approximate answer. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(t):
    <span style="color: #8b0000;">return</span> 0.2 - g(t)

initial_guess = 2
ans, = fsolve(func, initial_guess)
<span style="color: #8b0000;">print</span> ans
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; ... ... &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 2.0556428796
</pre>
</div>
</div>
<div id="outline-container-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> method 2: switch the interpolation order</h3>
<div class="outline-text-3" id="text-3-2">
<p>
We can switch the order of the interpolation to solve this problem. An issue we have to address in this method is that the &ldquo;x&rdquo; values must be monotonically <i>increasing</i>. It is somewhat subtle to reverse a list in python. I will use the cryptic syntax of [::-1] instead of the list.reverse() function or reversed() function. list.reverse() actually reverses the list &ldquo;in place&rdquo;, which changes the contents of the variable. That is not what I want. reversed() returns an iterator which is also not what I want. [::-1] is a fancy indexing trick that returns a reversed list.
</p>

<div class="org-src-container">

<pre class="src src-python">g3 = interp1d(f[::-1], t[::-1])

<span style="color: #8b0000;">print</span> g3(0.2)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; 2.0556428796
</pre>
</div>
</div>
</div>
<div id="outline-container-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> A harder problem</h2>
<div class="outline-text-2" id="text-4">
<p>
Suppose we want to know at what time is 1/f = 100? Now we have to decide what do we interpolate: f(t) or 1/f(t). Let us look at both ways and decide what is best. The answer to \(1/exp(-t) = 100\) is 4.6052
</p>
</div>

<div id="outline-container-4-1" class="outline-3">
<h3 id="sec-4-1"><span class="section-number-3">4.1</span> interpolate on f(t) then invert the interpolated number</h3>
<div class="outline-text-3" id="text-4-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(t):
    <span style="color: #228b22;">'objective function. we do some error bounds because we cannot interpolate out of the range.'</span>
    <span style="color: #8b0000;">if</span> t &lt; 0.5: t=0.5
    <span style="color: #8b0000;">if</span> t &gt; 6: t = 6
    <span style="color: #8b0000;">return</span> 100 - 1.0 / g(t)   

initial_guess = 4.5
a1, = fsolve(func, initial_guess)
<span style="color: #8b0000;">print</span> a1
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'The %error is {0:%}'</span>.format((a1 - 4.6052)/4.6052)
</pre>
</div>

<pre class="example">
... ... ... ... &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 5.52431289641
The %error is 19.958154%
</pre>
</div>
</div>
<div id="outline-container-4-2" class="outline-3">
<h3 id="sec-4-2"><span class="section-number-3">4.2</span> invert f(t) then interpolate on 1/f</h3>
<div class="outline-text-3" id="text-4-2">
<div class="org-src-container">

<pre class="src src-python">ig = interp1d(t, 1.0 / np.array(f))

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ifunc</span>(t):
    <span style="color: #8b0000;">if</span> t &lt; 0.5: t=0.5
    <span style="color: #8b0000;">if</span> t &gt; 6: t = 6
    <span style="color: #8b0000;">return</span> 100 - ig(t)   

initial_guess = 4.5
a2, = fsolve(ifunc, initial_guess)
<span style="color: #8b0000;">print</span> a2
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'The %error is {0:%}'</span>.format((a2 - 4.6052)/4.6052)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; ... ... ... ... &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 3.6310782241
The %error is -21.152649%
</pre>
</div>
</div>
</div>
<div id="outline-container-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Discussion</h2>
<div class="outline-text-2" id="text-5">
<p>
In this case you get different errors, one overestimates and one underestimates the answer, and by a lot: &plusmn; 20%. Let us look at what is happening.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> interp1d

t = [0.5, 1, 3, 6]
f = [0.6065,    0.3679,    0.0498,    0.0025]

x = np.linspace(0.5, 6)


g = interp1d(t, f) <span style="color: #ff0000; font-weight: bold;"># default is linear interpolation</span>
ig = interp1d(t, 1.0 / np.array(f))

plt.figure()
plt.plot(t, 1 / np.array(f), <span style="color: #228b22;">'ko '</span>, label=<span style="color: #228b22;">'data'</span>)
plt.plot(x, 1 / g(x), label=<span style="color: #228b22;">'1/interpolated f(x)'</span>)
plt.plot(x, ig(x), label=<span style="color: #228b22;">'interpolate on 1/f(x)'</span>)
plt.plot(x, 1 / np.exp(-x), <span style="color: #228b22;">'k--'</span>, label=<span style="color: #228b22;">'1/exp(-x)'</span>)
plt.xlabel(<span style="color: #228b22;">'t'</span>)
plt.ylabel(<span style="color: #228b22;">'1/f(t)'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/interpolation-3.png'</span>)
</pre>
</div>

<p><img src="/img/./images/interpolation-3.png"><p>

<p>
You can see that the 1/interpolated f(x) underestimates the value, while interpolated (1/f(x)) overestimates the value. This is an example of where you clearly need more data in that range to make good estimates. Neither interpolation method is doing a great job. The trouble in reality is that you often do not know the real function to do this analysis. Here you can say the time is probably between 3.6 and 5.5 where 1/f(t) = 100, but you can not read much more than that into it. If you need a more precise answer, you need better data, or you need to use an approach other than interpolation. For example, you could fit an exponential function to the data and use that to estimate values at other times.
</p>

<p>
So which is the best to interpolate? I think you should interpolate the quantity that is linear in the problem you want to solve, so in this case I think interpolating 1/f(x) is better. When you use an interpolated function in a nonlinear function, strange, unintuitive things can happen. That is why the blue curve looks odd. Between data points are linear segments in the original interpolation, but when you invert them, you cause the curvature to form.
</p>
</div>
</div>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/02/Better-interpolate-than-never.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
