<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Mon, 13 Jun 2016 19:52:51 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Dynamic sorting with ivy</title>
      <link>http://jkitchin.github.io/blog/2016/06/13/Dynamic-sorting-with-ivy</link>
      <pubDate>Mon, 13 Jun 2016 15:51:19 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[ivy]]></category>
      <guid isPermaLink="false">hLJ9e4x3ygVWdrOY6ZX81mTFbQg=</guid>
      <description>Dynamic sorting with ivy</description>
      <content:encoded><![CDATA[


<p>
I have been exploring ivy a lot these days as a general purpose completion backend. One need I have is dynamic resorting of candidates. I illustrate how to achieve that here. A big thanks to Oleh Krehel (author of ivy) for a lot help today getting this working!
</p>

<p>
You may want to check out the video: <a href="https://www.youtube.com/watch?v=nFKfM3MOAd0">https://www.youtube.com/watch?v=nFKfM3MOAd0</a> 
</p>

<p>
First, a typical ivy-read example. Below I have a set of contact data for some people, and have setup an ivy-read command that inserts the email in the current buffer by default, and a second action for the phone. What is missing that I would like to do is dynamically reorder the candidates, including sorting all the candidates, swapping candidates up and down to fine tune the order, and then finally applying an action to all the candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ct</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"contact: "</span> '((<span style="color: #008000;">"Kno Body"</span> <span style="color: #008000;">"kb@true.you"</span> <span style="color: #008000;">"555-1212"</span>)
                          (<span style="color: #008000;">"A. Person"</span> <span style="color: #008000;">"ap@some.come"</span> <span style="color: #008000;">"867-5304"</span>)
                          (<span style="color: #008000;">"G. Willikers"</span> <span style="color: #008000;">"gw@not.me"</span> <span style="color: #008000;">"555-5555"</span>))
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"o"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 0))))
                       <span style="color: #008000;">"insert email"</span>)
                      (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 1))))
                       <span style="color: #008000;">"insert phone"</span>))))
</pre>
</div>

<p>
So, first a set of functions to manipulate the candidates. We create a swap function, two functions to move candidates up and down, and two functions that sort the whole list of candidates in ascending and descending order. In each case, we just update the ivy collection with the new modified collection, we save the currently selected candidate, and then reset the state to update the candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">swap</span> (i j lst)
  <span style="color: #036A07;">"Swap index I and J in the list LST."</span> 
  (<span style="color: #0000FF;">let</span> ((tempi (nth i lst)))
    (<span style="color: #0000FF;">setf</span> (nth i lst) (nth j lst))
    (<span style="color: #0000FF;">setf</span> (nth j lst) tempi))
  lst)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-move-up</span> ()
  <span style="color: #036A07;">"Move ivy candidate up."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (swap ivy--index (1- ivy--index) (ivy-state-collection ivy-last)))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-move-down</span> ()
  <span style="color: #036A07;">"Move ivy candidate down."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (swap ivy--index (1+ ivy--index) (ivy-state-collection ivy-last)))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-a-z</span> ()
  <span style="color: #036A07;">"Sort ivy candidates from a-z."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (cl-sort (ivy-state-collection ivy-last)
                 (<span style="color: #0000FF;">if</span> (listp (car (ivy-state-collection ivy-last)))
                     (<span style="color: #0000FF;">lambda</span> (a b)
                       (string-lessp (car a) (car b)))
                   (<span style="color: #0000FF;">lambda</span> (a b)
                     (string-lessp a b)))))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-z-a</span> ()
  <span style="color: #036A07;">"Sort ivy candidates from z-a."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (cl-sort (ivy-state-collection ivy-last)
                 (<span style="color: #0000FF;">if</span> (listp (car (ivy-state-collection ivy-last)))
                     (<span style="color: #0000FF;">lambda</span> (a b)
                       (string-greaterp (car a) (car b)))
                   (<span style="color: #0000FF;">lambda</span> (a b)
                     (string-greaterp a b)))))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))
</pre>
</div>


<p>
Now, we make a keymap to bind these commands so they are convenient to use. I will use C-arrows for swapping, and M-arrows for sorting the whole list. I also add M-&lt;return&gt; which allows me to use a numeric prefix to apply an action to all the candidates. M-&lt;return&gt; applies the default action. M-1 M-&lt;return&gt; applies the first action, M-2 M-&lt;return&gt; the second action, etc&#x2026;
</p>

<p>
This specific implementation assumes your candidates have a cdr.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> ivy-sort-keymap
      (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
        (define-key map (kbd <span style="color: #008000;">"C-&lt;up&gt;"</span>) 'ivy-move-up)
        (define-key map (kbd <span style="color: #008000;">"C-&lt;down&gt;"</span>) 'ivy-move-down)

        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">sort all keys</span>
        (define-key map (kbd <span style="color: #008000;">"M-&lt;up&gt;"</span>) 'ivy-a-z)
        (define-key map (kbd <span style="color: #008000;">"M-&lt;down&gt;"</span>) 'ivy-z-a)

        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">map over all all entries with nth action</span>
        (define-key map (kbd <span style="color: #008000;">"M-&lt;return&gt;"</span>)
          (<span style="color: #0000FF;">lambda</span> (arg)
            <span style="color: #036A07;">"Apply the numeric prefix ARGth action to every candidate."</span>
            (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
            <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">with no arg use default action</span>
            (<span style="color: #0000FF;">unless</span> arg (<span style="color: #0000FF;">setq</span> arg (car (ivy-state-action ivy-last))))
            (ivy-beginning-of-buffer)
            (<span style="color: #0000FF;">let</span> ((func (elt (elt (ivy-state-action ivy-last) arg) 1)))
              (<span style="color: #0000FF;">loop</span> for i from 0 to (- ivy--length 1)
                    do 
                    (funcall func
                             (<span style="color: #0000FF;">let</span> ((cand (elt
                                          (ivy-state-collection ivy-last)
                                          ivy--index)))
                               (<span style="color: #0000FF;">if</span> (listp cand)
                                   (cdr cand)
                                 cand)))
                    (ivy-next-line)))
            (ivy-exit-with-action
             (<span style="color: #0000FF;">lambda</span> (x) nil))))
        map))
</pre>
</div>

<p>
Ok, now we modify our ivy-read function to use the keymap.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ctn</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"contact: "</span> '((<span style="color: #008000;">"Kno Body"</span> <span style="color: #008000;">"kb@true.you"</span> <span style="color: #008000;">"555-1212"</span>)
                          (<span style="color: #008000;">"A. Person"</span> <span style="color: #008000;">"ap@some.come"</span> <span style="color: #008000;">"867-5304"</span>)
                          (<span style="color: #008000;">"G. Willikers"</span> <span style="color: #008000;">"gw@not.me"</span> <span style="color: #008000;">"555-5555"</span>))
            <span style="color: #006FE0;">:keymap</span> ivy-sort-keymap
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"o"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 0))))
                       <span style="color: #008000;">"insert email"</span>)
                      (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 1))))
                       <span style="color: #008000;">"insert phone"</span>))))
</pre>
</div>

<p>
kb@true.you, gw@not.me, ap@some.come, 555-1212, 555-5555, 867-5304
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/13/Dynamic-sorting-with-ivy.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content:encoded>
    </item>
  </channel>
</rss>
