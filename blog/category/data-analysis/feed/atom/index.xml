<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-06-11T16:58:29Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Visualizing uncertainty in linear regression]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/07/18/Visualizing-uncertainty-in-linear-regression" />
    <id>http://jkitchin.github.io/blog/2013/07/18/Visualizing-uncertainty-in-linear-regression</id>
    <updated>2013-07-18T19:13:40Z</updated>
    <published>2013-07-18T19:13:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="uncertainty" />
    <summary type="html"><![CDATA[Visualizing uncertainty in linear regression]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/07/18/Visualizing-uncertainty-in-linear-regression"><![CDATA[




<p>
In this example, we show how to visualize  uncertainty in a fit. The idea is to fit a model to <a href="http://www.itl.nist.gov/div898/handbook/pmd/section4/pmd44.htm">data</a>, and get the uncertainty in the model parameters. Then we sample the parameters according to the normal distribution, and plot the corresponding distribution of models. We use transparent lines and allow the overlap to indicate the density of the fits.
</p>

<p>
The data is stored in a text file download PT.txt , with the following structure:
</p>

<pre class="example">
Run          Ambient                            Fitted
 Order  Day  Temperature  Temperature  Pressure    Value    Residual
  1      1      23.820      54.749      225.066   222.920     2.146
...
</pre>

<p>
We need to read the data in, and perform a regression analysis on P vs. T. In python we start counting at 0, so we actually want columns 3 and 4.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> regress

data = np.loadtxt(<span style="color: #228b22;">'../../pycse/data/PT.txt'</span>, skiprows=2)
T = data[:, 3]
P = data[:, 4]

A = np.column_stack([T**0, T])

p, pint, se = regress(A, P, 0.05)

<span style="color: #8b0000;">print</span> p, pint, se
plt.plot(T, P, <span style="color: #228b22;">'k.'</span>)
plt.plot(T, np.dot(A, p))

<span style="color: #ff0000; font-weight: bold;"># Now we plot the distribution of possible lines</span>
N = 2000
B = np.random.normal(p[0], se[0], N)
M = np.random.normal(p[1], se[1], N)
x = np.array([<span style="color: #8b0000;">min</span>(T), <span style="color: #8b0000;">max</span>(T)])

<span style="color: #8b0000;">for</span> b,m <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(B, M):
    plt.plot(x, m*x + b, <span style="color: #228b22;">'-'</span>, color=<span style="color: #228b22;">'gray'</span>, alpha=0.02)
plt.savefig(<span style="color: #228b22;">'images/plotting-uncertainty.png'</span>)
</pre>
</div>

<pre class="example">
[ 7.74899739  3.93014044] [[  2.97964903  12.51834576]
 [  3.82740876   4.03287211]] [ 2.35384765  0.05070183]
</pre>

<p><img src="/img/./images/plotting-uncertainty.png"><p>

<p>
Here you can see 2000 different lines that have some probability of being correct. The darkest gray is near the fit, as expected; the darker the gray the more probable it is the line. This is a qualitative way of judging the quality of the fit.
</p>

<p>
Note, this is not the prediction error that we are plotting, that is the uncertainty in where a predicted y-value is. 
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/07/18/Visualizing-uncertainty-in-linear-regression.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Uncertainty in polynomial roots - Part II]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/07/06/Uncertainty-in-polynomial-roots-Part-II" />
    <id>http://jkitchin.github.io/blog/2013/07/06/Uncertainty-in-polynomial-roots-Part-II</id>
    <updated>2013-07-06T15:31:38Z</updated>
    <published>2013-07-06T15:31:38Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="uncertainty" />
    <summary type="html"><![CDATA[Uncertainty in polynomial roots - Part II]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/07/06/Uncertainty-in-polynomial-roots-Part-II"><![CDATA[


<p>
We previously looked at uncertainty in polynomial roots where we had an analytical formula for the roots of the polynomial, and we knew the uncertainties in the polynomial parameters. It would be inconvenient to try this for a cubic polynomial, although there may be formulas for the roots. I do not know of there are general formulas for the roots of a 4<sup>th</sup> order polynomial or higher. 
</p>

<p>
Unfortunately, we cannot use the uncertainties package out of the box directly here.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
c, b, a = [-0.99526746, -0.011546,    1.00188999]
sc, sb, sa = [ 0.0249142,   0.00860025,  0.00510128]

A = u.ufloat((a, sa))
B = u.ufloat((b, sb))
C = u.ufloat((c, sc))

<span style="color: #8b0000;">print</span> np.roots([A, B, C])
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\Users\jkitchin\AppData\Local\Enthought\Canopy\User\lib\site-packages\numpy\lib\polynomial.py", line 218, in roots
    p = p.astype(float)
  File "c:\Users\jkitchin\AppData\Local\Enthought\Canopy\User\lib\site-packages\uncertainties\__init__.py", line 1257, in raise_error
    % (self.__class__, coercion_type))
TypeError: can't convert an affine function (&lt;class 'uncertainties.Variable'&gt;) to float; use x.nominal_value
</pre>

<p>
To make some progress, we have to understand how the <a href="https://github.com/numpy/numpy/blob/v1.7.0/numpy/lib/polynomial.py#L149">numpy.roots</a> function works. It constructs a <a href="http://en.wikipedia.org/wiki/Companion_matrix">Companion matrix</a>, and the eigenvalues of that matrix are the same as the roots of the polynomial.  
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

c0, c1, c2 = [-0.99526746, -0.011546,    1.00188999]

p = np.array([c2, c1, c0])
N = <span style="color: #8b0000;">len</span>(p)

<span style="color: #ff0000; font-weight: bold;"># we construct the companion matrix like this</span>
<span style="color: #ff0000; font-weight: bold;"># see https://github.com/numpy/numpy/blob/v1.7.0/numpy/lib/polynomial.py#L220</span>
<span style="color: #ff0000; font-weight: bold;"># for this code.</span>
<span style="color: #ff0000; font-weight: bold;"># build companion matrix and find its eigenvalues (the roots)</span>
A = np.diag(np.ones((N-2,), p.dtype), -1)
A[0, :] = -p[1:] / p[0]

<span style="color: #8b0000;">print</span> A

roots = np.linalg.eigvals(A)
<span style="color: #8b0000;">print</span> roots
</pre>
</div>

<pre class="example">
[[ 0.01152422  0.99338996]
 [ 1.          0.        ]]
[ 1.00246827 -0.99094405]
</pre>

<p>
This definition of the companion matrix is a little different than the one <a href="http://en.wikipedia.org/wiki/Companion_matrix">here</a>, but primarily in the scaling of the coefficients. That does not seem to change the eigenvalues, or the roots. 
</p>

<p>
Now, we have a path to estimate the uncertainty in the roots. Since we know the polynomial coefficients and their uncertainties from the fit, we can use Monte Carlo sampling to estimate the uncertainty in the roots. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u

c, b, a = [-0.99526746, -0.011546,    1.00188999]
sc, sb, sa = [ 0.0249142,   0.00860025,  0.00510128]

NSAMPLES = 100000
A = np.random.normal(a, sa, (NSAMPLES, ))
B = np.random.normal(b, sb, (NSAMPLES, ))
C = np.random.normal(c, sc, (NSAMPLES, ))

roots = [[] <span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(NSAMPLES)]

<span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">range</span>(NSAMPLES):
    p = np.array([A[i], B[i], C[i]])
    N = <span style="color: #8b0000;">len</span>(p)
    
    M = np.diag(np.ones((N-2,), p.dtype), -1)
    M[0, :] = -p[1:] / p[0]
    r = np.linalg.eigvals(M)
    r.sort()  <span style="color: #ff0000; font-weight: bold;"># there is no telling what order the values come out in</span>
    roots[i] = r
    
avg = np.average(roots, axis=0)
std = np.std(roots, axis=0)

<span style="color: #8b0000;">for</span> r, s <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">zip</span>(avg, std):
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0: f} +/- {1: f}'</span>.format(r, s)
</pre>
</div>

<pre class="example">
-0.990949 +/-  0.013435
 1.002443 +/-  0.013462
</pre>

<p>
Compared to our previous approach with the uncertainties package where we got:
</p>

<pre class="example">
: -0.990944048037+/-0.0134208013339
:  1.00246826738 +/-0.0134477390832
</pre>

<p>
the agreement is quite good! The advantage of this approach is that we do not have to know the formula for the roots of higher order polynomials to estimate the uncertainty in the roots. The downside is we have to evaluate the eigenvalues of a matrix a large number of times to get good estimates of the uncertainty. For high power polynomials this could be problematic. I do not currently see a way around this, unless it becomes possible to get the uncertainties package to propagate through the numpy.eigvals function. It is possible to <a href="http://pythonhosted.org/uncertainties/user_guide.html#making-custom-functions-accept-numbers-with-uncertainties">wrap</a> some functions with uncertainties, but so far only functions that return a single number.
</p>

<p>
There are some other potential problems with this approach.  It is assumed that the accuracy of the eigenvalue solver is much better than the uncertainty in the polynomial parameters. You have to use some judgment in using these uncertainties. We are approximating the uncertainties of a nonlinear problem. In other words, the uncertainties of the roots are not linearly dependent on the uncertainties of the polynomial coefficients.  
</p>

<p>
It is possible to <a href="http://pythonhosted.org/uncertainties/user_guide.html#making-custom-functions-accept-numbers-with-uncertainties">wrap</a> some functions with uncertainties, but so far only functions that return a single number. Here is an example of getting the n<sup>th</sup> root and its uncertainty.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

@u.wrap
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(n=0, *P):
    <span style="color: #228b22;">''' compute the nth root of the polynomial P and the uncertainty of the root'''</span>
    p =  np.array(P)
    N = <span style="color: #8b0000;">len</span>(p)
    
    M = np.diag(np.ones((N-2,), p.dtype), -1)
    M[0, :] = -p[1:] / p[0]
    r = np.linalg.eigvals(M)
    r.sort()  <span style="color: #ff0000; font-weight: bold;"># there is no telling what order the values come out in</span>
    <span style="color: #8b0000;">return</span> r[n]

<span style="color: #ff0000; font-weight: bold;"># our polynomial coefficients and standard errors</span>
c, b, a = [-0.99526746, -0.011546,    1.00188999]
sc, sb, sa = [ 0.0249142,   0.00860025,  0.00510128]

A = u.ufloat((a, sa))
B = u.ufloat((b, sb))
C = u.ufloat((c, sc))

<span style="color: #8b0000;">for</span> result <span style="color: #8b0000;">in</span> [f(n, A, B, C) <span style="color: #8b0000;">for</span> n <span style="color: #8b0000;">in</span> [0, 1]]:
    <span style="color: #8b0000;">print</span> result
</pre>
</div>

<pre class="example">
-0.990944048037+/-0.013420800377
1.00246826738+/-0.0134477388218
</pre>

<p>
It is good to see this is the same result we got earlier, with <i>a lot less work</i> (although we do have to solve it for each root, which is a bit redundant)! It is a bit more abstract though, and requires a specific formulation of the function for the wrapper to work.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/07/06/Uncertainty-in-polynomial-roots---Part-II.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Uncertainty in polynomial roots]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/07/05/Uncertainty-in-polynomial-roots" />
    <id>http://jkitchin.github.io/blog/2013/07/05/Uncertainty-in-polynomial-roots</id>
    <updated>2013-07-07T08:40:41Z</updated>
    <published>2013-07-05T09:10:09Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="uncertainty" />
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <summary type="html"><![CDATA[Uncertainty in polynomial roots]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/07/05/Uncertainty-in-polynomial-roots"><![CDATA[



<p>
Polynomials are convenient for fitting to data. Frequently we need to derive some properties of the data from the fit, e.g. the minimum value, or the slope, etc&#x2026; Since we are fitting data, there is uncertainty in the polynomial parameters, and corresponding uncertainty in any properties derived from those parameters. 
</p>

<p>
Here is our data.
</p>

<table id="data" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="right"/>

<col class="right"/>
</colgroup>
<tbody>
<tr>
<td class="right">-3.00</td>
<td class="right">8.10</td>
</tr>

<tr>
<td class="right">-2.33</td>
<td class="right">4.49</td>
</tr>

<tr>
<td class="right">-1.67</td>
<td class="right">1.73</td>
</tr>

<tr>
<td class="right">-1.00</td>
<td class="right">-0.02</td>
</tr>

<tr>
<td class="right">-0.33</td>
<td class="right">-0.90</td>
</tr>

<tr>
<td class="right">0.33</td>
<td class="right">-0.83</td>
</tr>

<tr>
<td class="right">1.00</td>
<td class="right">0.04</td>
</tr>

<tr>
<td class="right">1.67</td>
<td class="right">1.78</td>
</tr>

<tr>
<td class="right">2.33</td>
<td class="right">4.43</td>
</tr>

<tr>
<td class="right">3.00</td>
<td class="right">7.95</td>
</tr>
</tbody>
</table>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

x = [a[0] <span style="color: #8b0000;">for</span> a <span style="color: #8b0000;">in</span> data]
y = [a[1] <span style="color: #8b0000;">for</span> a <span style="color: #8b0000;">in</span> data]
plt.plot(x, y)
plt.savefig(<span style="color: #228b22;">'images/uncertain-roots.png'</span>)
</pre>
</div>

<p><img src="/img/./images/uncertain-roots.png"><p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> regress

x = np.array([a[0] <span style="color: #8b0000;">for</span> a <span style="color: #8b0000;">in</span> data])
y = [a[1] <span style="color: #8b0000;">for</span> a <span style="color: #8b0000;">in</span> data]

A = np.column_stack([x**0, x**1, x**2])

p, pint, se = regress(A, y, alpha=0.05)

<span style="color: #8b0000;">print</span> p

<span style="color: #8b0000;">print</span> pint

<span style="color: #8b0000;">print</span> se

plt.plot(x, y, <span style="color: #228b22;">'bo '</span>)

xfit = np.linspace(x.min(), x.max())
plt.plot(xfit, np.dot(np.column_stack([xfit**0, xfit**1, xfit**2]), p), <span style="color: #228b22;">'b-'</span>)
plt.savefig(<span style="color: #228b22;">'images/uncertain-roots-1.png'</span>)
</pre>
</div>

<pre class="example">
[-0.99526746 -0.011546    1.00188999]
[[-1.05418017 -0.93635474]
 [-0.03188236  0.00879037]
 [ 0.98982737  1.01395261]]
[ 0.0249142   0.00860025  0.00510128]
</pre>

<p><img src="/img/./images/uncertain-roots-1.png"><p>

<p>
Since this is a quadratic equation, we know the roots analytically: \(x = \frac{-b \pm \sqrt{b^2 - 4 a c}{2 a}\). So, we can use the uncertainties package to directly compute the uncertainties in the roots. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u

c, b, a = [-0.99526746, -0.011546,    1.00188999]
sc, sb, sa = [ 0.0249142,   0.00860025,  0.00510128]

A = u.ufloat((a, sa))
B = u.ufloat((b, sb))
C = u.ufloat((c, sc))

<span style="color: #ff0000; font-weight: bold;"># np.sqrt does not work with uncertainity</span>
r1 = (-B + (B**2 - 4 * A * C)**0.5) / (2 * A)
r2 = (-B - (B**2 - 4 * A * C)**0.5) / (2 * A)

<span style="color: #8b0000;">print</span> r1
<span style="color: #8b0000;">print</span> r2
</pre>
</div>

<pre class="example">
1.00246826738+/-0.0134477390832
-0.990944048037+/-0.0134208013339
</pre>

<p>
The minimum is also straightforward to analyze here. The derivative of the polynomial is \(2 a x + b\) and it is equal to zero at \(x = -b / (2 a)\).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u

c, b, a = [-0.99526746, -0.011546,    1.00188999]
sc, sb, sa = [ 0.0249142,   0.00860025,  0.00510128]

A = u.ufloat((a, sa))
B = u.ufloat((b, sb))

zero = -B / (2 * A)
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'The minimum is at {0}.'</span>.format(zero)
</pre>
</div>

<pre class="example">
The minimum is at 0.00576210967034+/-0.00429211341136.
</pre>

<p>
You can see there is uncertainty in both the roots of the original polynomial, as well as the minimum of the data. The approach here worked well because the polynomials were low order (quadratic or linear) where we know the formulas for the roots. Consequently, we can take advantage of the uncertainties module with little effort to propagate the errors. For higher order polynomials, we would probably have to do some wrapping of functions to propagate uncertainties.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/07/05/Uncertainty-in-polynomial-roots.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Estimating where two functions intersect using data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/07/04/Estimating-where-two-functions-intersect-using-data" />
    <id>http://jkitchin.github.io/blog/2013/07/04/Estimating-where-two-functions-intersect-using-data</id>
    <updated>2013-07-07T09:01:21Z</updated>
    <published>2013-07-04T14:38:07Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <summary type="html"><![CDATA[Estimating where two functions intersect using data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/07/04/Estimating-where-two-functions-intersect-using-data"><![CDATA[



<p>
Suppose we have two functions described by this data:
</p>

<table id="data" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col class="right"/>

<col class="right"/>

<col class="right"/>
</colgroup>
<thead>
<tr>
<th scope="col" class="right">T(K)</th>
<th scope="col" class="right">E1</th>
<th scope="col" class="right">E2</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">300</td>
<td class="right">-208</td>
<td class="right">-218</td>
</tr>

<tr>
<td class="right">400</td>
<td class="right">-212</td>
<td class="right">-221</td>
</tr>

<tr>
<td class="right">500</td>
<td class="right">-215</td>
<td class="right">-220</td>
</tr>

<tr>
<td class="right">600</td>
<td class="right">-218</td>
<td class="right">-222</td>
</tr>

<tr>
<td class="right">700</td>
<td class="right">-220</td>
<td class="right">-222</td>
</tr>

<tr>
<td class="right">800</td>
<td class="right">-223</td>
<td class="right">-224</td>
</tr>

<tr>
<td class="right">900</td>
<td class="right">-227</td>
<td class="right">-225</td>
</tr>

<tr>
<td class="right">1000</td>
<td class="right">-229</td>
<td class="right">-227</td>
</tr>

<tr>
<td class="right">1100</td>
<td class="right">-233</td>
<td class="right">-228</td>
</tr>

<tr>
<td class="right">1200</td>
<td class="right">-235</td>
<td class="right">-227</td>
</tr>

<tr>
<td class="right">1300</td>
<td class="right">-240</td>
<td class="right">-229</td>
</tr>
</tbody>
</table>

<p>
We want to determine the temperature at which they intersect, and more importantly what the uncertainty on the intersection is. There is noise in the data, which means there is uncertainty in any function that could be fit to it, and that uncertainty would propagate to the intersection. Let us examine the data.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

T = [x[0] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data]
E1 = [x[1] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data]
E2 = [x[2] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data]

plt.plot(T, E1, T, E2)
plt.legend([<span style="color: #228b22;">'E1'</span>, <span style="color: #228b22;">'E2'</span>])
plt.savefig(<span style="color: #228b22;">'images/intersection-0.png'</span>)
</pre>
</div>

<p><img src="/img/./images/intersection-0.png"><p>

<p>
Our strategy is going to be to fit functions to each data set, and get the confidence intervals on the parameters of the fit. Then, we will solve the equations to find where they are equal to each other and propagate the uncertainties in the parameters to the answer.
</p>

<p>
These functions look approximately linear, so we will fit lines to each function. We use the regress function in pycse to get the uncertainties on the fits. Then, we use the uncertainties package to propagate the uncertainties in the analytical solution to the intersection of two lines.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> regress
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u

T = np.array([x[0] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data])
E1 = np.array([x[1] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data])
E2 = np.array([x[2] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data])

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">columns of the x-values for a line: constant, T</span>
A = np.column_stack([T**0, T])

p1, pint1, se1 = regress(A, E1, alpha=0.05)

p2, pint2, se2 = regress(A, E2, alpha=0.05)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now we have two lines: y1 = m1*T + b1 and y2 = m2*T + b2</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">they intersect at m1*T + b1 = m2*T + b2</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">or at T = (b2 - b1) / (m1 - m2)</span>
b1 = u.ufloat((p1[0], se1[0]))
m1 = u.ufloat((p1[1], se1[1]))

b2 = u.ufloat((p2[0], se2[0]))
m2 = u.ufloat((p2[1], se2[1]))

T_intersection = (b2 - b1) / (m1 - m2)
<span style="color: #8b0000;">print</span> T_intersection

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">plot the data, the fits and the intersection and \pm 2 \sigma.</span>
plt.plot(T, E1, <span style="color: #228b22;">'bo '</span>, label=<span style="color: #228b22;">'E1'</span>)
plt.plot(T, np.dot(A,p1), <span style="color: #228b22;">'b-'</span>)
plt.plot(T, E2, <span style="color: #228b22;">'ro '</span>, label=<span style="color: #228b22;">'E2'</span>)
plt.plot(T, np.dot(A,p2), <span style="color: #228b22;">'r-'</span>)

plt.plot(T_intersection.nominal_value,
        (b1 + m1*T_intersection).nominal_value, <span style="color: #228b22;">'go'</span>,
        ms=13, alpha=0.2, label=<span style="color: #228b22;">'Intersection'</span>)
plt.plot([T_intersection.nominal_value - 2*T_intersection.std_dev(),
          T_intersection.nominal_value + 2*T_intersection.std_dev()],
         [(b1 + m1*T_intersection).nominal_value, 
          (b1 + m1*T_intersection).nominal_value],
         <span style="color: #228b22;">'g-'</span>, lw=3, label=<span style="color: #228b22;">'$\pm 2 \sigma$'</span>)
       
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/intersection-1.png'</span>)
</pre>
</div>

<pre class="example">
813.698630137+/-62.407180552
</pre>

<p><img src="/img/./images/intersection-1.png"><p>

<p>
You can see there is a substantial uncertainty in the temperature at approximately the 90% confidence level (&plusmn; 2 &sigma;).
</p>


<p>
<span class="underline">Update 7-7-2013</span>
</p>

<p>
After a suggestion from Prateek, here we subtract the two data sets, fit a line to that data, and then use fsolve to find the zero. We <a href="http://pythonhosted.org/uncertainties/user_guide.html#making-custom-functions-accept-numbers-with-uncertainties">wrap</a> fsolve in the uncertainties package to directly get the uncertainty on the root. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> regress
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> uncertainties <span style="color: #8b0000;">as</span> u
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve


T = np.array([x[0] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data])
E1 = np.array([x[1] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data])
E2 = np.array([x[2] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> data])

E = E1 - E2

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">columns of the x-values for a line: constant, T</span>
A = np.column_stack([T**0, T])

p, pint, se = regress(A, E, alpha=0.05)

b = u.ufloat((p[0], se[0]))
m = u.ufloat((p[1], se[1]))

@u.wrap
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">f</span>(b, m):
    X, = fsolve(<span style="color: #8b0000;">lambda</span> x: b + m * x, 800)
    <span style="color: #8b0000;">return</span> X

<span style="color: #8b0000;">print</span> f(b, m)
</pre>
</div>

<pre class="example">
813.698630137+/-54.0386903923
</pre>

<p>
Interesting that this uncertainty is a little smaller than the previously computed uncertainty. Here you can see we have to wrap the function in a peculiar way. The function must return a single float number, and take arguments with uncertainty. We define the polynomial fit (a line in this case) in a lambda function inside the function. It works ok.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/07/04/Estimating-where-two-functions-intersect-using-data.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Constrained fits to data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/06/11/Constrained-fits-to-data" />
    <id>http://jkitchin.github.io/blog/2013/06/11/Constrained-fits-to-data</id>
    <updated>2013-06-12T08:31:16Z</updated>
    <published>2013-06-11T19:39:59Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="optimization" />
    <summary type="html"><![CDATA[Constrained fits to data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/06/11/Constrained-fits-to-data"><![CDATA[


<p>
Our objective here is to fit a quadratic function in the least squares sense to some data, but we want to constrain the fit so that the function has specific values at the end-points. The application is to fit a function to the lattice constant of an alloy at different compositions. We constrain the fit because we know the lattice constant of the pure metals, which are at the end-points of the fit and we want these to be correct. 
</p>

<p>
We define the alloy composition in terms of the mole fraction of one species, e.g. \(A_xB_{1-x}\). For \(x=0\), the alloy is pure B, whereas for \(x=1\) the alloy is pure A. According to Vegard's law the lattice constant is a linear composition weighted average of the pure component lattice constants, but sometimes small deviations are observed. Here we will fit a quadratic function that is constrained to give the pure metal component lattice constants at the end points. 
</p>

<p>
The quadratic function is \(y = a x^2 + b x + c\). One constraint is at \(x=0\) where \(y = c\), or \(c\) is the lattice constant of pure B. The second constraint is at \(x=1\), where \(a + b + c\) is equal to the lattice constant of pure A. Thus, there is only one degree of freedom. \(c = LC_B\), and \(b = LC_A - c - a\), so \(a\) is our only variable.
</p>

<p>
We will solve this problem by minimizing the summed squared error between the fit and the data. We use the <code>fmin</code> function in <code>scipy.optimize</code>. First we create a fit function that encodes the constraints. Then we create an objective function that will be minimized. We have to make a guess about the value of \(a\) that minimizes the summed squared error. A line fits the data moderately well, so we guess a small value, i.e. near zero, for \(a\). Here is the solution.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Data to fit to</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">x=0 is pure B</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">x=1 is pure A</span>
X = np.array([0.0, 0.1,  0.25, 0.5,  0.6,  0.8,  1.0])
Y = np.array([3.9, 3.89, 3.87, 3.78, 3.75, 3.69, 3.6])

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">func</span>(a, XX):
    LC_A = 3.6
    LC_B = 3.9

    c = LC_B
    b = LC_A - c - a

    yfit = a * XX**2 + b * XX + c
    <span style="color: #8b0000;">return</span> yfit

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(a):
    <span style="color: #228b22;">'function to minimize'</span>
    SSE = np.sum((Y - func(a, X))**2)
    <span style="color: #8b0000;">return</span> SSE


<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin

a_fit = fmin(objective, 0)
plt.plot(X, Y, <span style="color: #228b22;">'bo '</span>)

x = np.linspace(0, 1)
plt.plot(x, func(a_fit, x))
plt.savefig(<span style="color: #228b22;">'images/constrained-quadratic-fit.png'</span>)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.
         Current function value: 0.000445
         Iterations: 19
         Function evaluations: 38
</pre>

<p>
Here is the result:
<p><img src="/img/./images/constrained-quadratic-fit.png"><p>
</p>

<p>
You can see that the end points go through the end-points as prescribed. 
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/06/11/Constrained-fits-to-data.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Peak finding in Raman spectroscopy]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/27/Peak-finding-in-Raman-spectroscopy" />
    <id>http://jkitchin.github.io/blog/2013/02/27/Peak-finding-in-Raman-spectroscopy</id>
    <updated>2014-10-14T15:01:48Z</updated>
    <published>2013-02-27T10:55:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <summary type="html"><![CDATA[Peak finding in Raman spectroscopy]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/27/Peak-finding-in-Raman-spectroscopy"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Summary notes</a></li>
</ul>
</div>
</div>
<p>
Raman spectroscopy is a vibrational spectroscopy. The data typically comes as intensity vs. wavenumber, and it is discrete. Sometimes it is necessary to identify the precise location of a peak. In this post, we will use spline smoothing to construct an interpolating function of the data, and then use fminbnd to identify peak positions.
</p>

<p>
This example was originally worked out in Matlab at <a href="http://matlab.cheme.cmu.edu/2012/08/27/peak-finding-in-raman-spectroscopy/">http://matlab.cheme.cmu.edu/2012/08/27/peak-finding-in-raman-spectroscopy/</a> 
</p>

<p>
numpy:loadtxt
</p>

<p>
Let us take a look at the raw data.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">w</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">i</span> = np.loadtxt(<span style="color: #228b22;">'data/raman.txt'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">usecols</span>=(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>), <span style="color: #000000; background-color: #cccccc; font-weight: bold;">unpack</span>=<span style="color: #8b0000;">True</span>)

plt.plot(w, i)
plt.xlabel(<span style="color: #228b22;">'Raman shift (cm$^{-1}$)'</span>)
plt.ylabel(<span style="color: #228b22;">'Intensity (counts)'</span>)
plt.savefig(<span style="color: #228b22;">'images/raman-1.png'</span>)
plt.show()
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x10b1d3190&gt;]
&lt;matplotlib.text.Text object at 0x10b1b1b10&gt;
&lt;matplotlib.text.Text object at 0x10bc7f310&gt;
</pre>


<div class="figure">
<p><img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-1.png"> 
</p>
</div>

<p>
The next thing to do is narrow our focus to the region we are interested in between 1340 cm^{-1} and 1360 cm^{-1}.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #000000; background-color: #cccccc; font-weight: bold;">ind</span> = (w &gt; <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1340</span>) &amp; (w &lt; <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1360</span>)
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">w1</span> = w[ind]
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">i1</span> = i[ind]

plt.plot(w1, i1, <span style="color: #228b22;">'b. '</span>)
plt.xlabel(<span style="color: #228b22;">'Raman shift (cm$^{-1}$)'</span>)
plt.ylabel(<span style="color: #228b22;">'Intensity (counts)'</span>)
plt.savefig(<span style="color: #228b22;">'images/raman-2.png'</span>)
plt.show()
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x10bc7a4d0&gt;]
&lt;matplotlib.text.Text object at 0x10bc08090&gt;
&lt;matplotlib.text.Text object at 0x10bc49710&gt;
</pre>


<div class="figure">
<p><img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-2.png"> 
</p>
</div>

<p>
Next we consider a scipy:UnivariateSpline. This function "smooths" the data.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.interpolate <span style="color: #8b0000;">import</span> UnivariateSpline

# <span style="color: #ff0000; font-weight: bold;">s is a "smoothing" factor</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">sp</span> = UnivariateSpline(w1, i1, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">k</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">s</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2000</span>)

plt.plot(w1, i1, <span style="color: #228b22;">'b. '</span>)
plt.plot(w1, sp(w1), <span style="color: #228b22;">'r-'</span>)
plt.xlabel(<span style="color: #228b22;">'Raman shift (cm$^{-1}$)'</span>)
plt.ylabel(<span style="color: #228b22;">'Intensity (counts)'</span>)
plt.savefig(<span style="color: #228b22;">'images/raman-3.png'</span>)
plt.show()
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; ... &gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x1105633d0&gt;]
[&lt;matplotlib.lines.Line2D object at 0x10dd70250&gt;]
&lt;matplotlib.text.Text object at 0x10dd65f10&gt;
&lt;matplotlib.text.Text object at 0x1105409d0&gt;
</pre>


<div class="figure">
<p><img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-3.png"> 
</p>
</div>

<p>
Note that the UnivariateSpline function returns a "callable" function! Our next goal is to find the places where there are peaks. This is defined by the first derivative of the data being equal to zero. It is easy to get the first derivative of a UnivariateSpline with a second argument as shown below.
</p>

<div class="org-src-container">

<pre class="src src-python"># <span style="color: #ff0000; font-weight: bold;">get the first derivative evaluated at all the points</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">d1s</span> = sp.derivative()

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">d1</span> = d1s(w1)

# <span style="color: #ff0000; font-weight: bold;">we can get the roots directly here, which correspond to minima and</span>
# <span style="color: #ff0000; font-weight: bold;">maxima.</span>
<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'Roots = {}'</span>.format(sp.derivative().roots()))
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">minmax</span> = sp.derivative().roots()

plt.clf()
plt.plot(w1, d1, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">label</span>=<span style="color: #228b22;">'first derivative'</span>)
plt.xlabel(<span style="color: #228b22;">'Raman shift (cm$^{-1}$)'</span>)
plt.ylabel(<span style="color: #228b22;">'First derivative'</span>)
plt.grid()

plt.plot(minmax, d1s(minmax), <span style="color: #228b22;">'ro '</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">label</span>=<span style="color: #228b22;">'zeros'</span>)
plt.legend(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">loc</span>=<span style="color: #228b22;">'best'</span>)

plt.plot(w1, i1, <span style="color: #228b22;">'b. '</span>)
plt.plot(w1, sp(w1), <span style="color: #228b22;">'r-'</span>)
plt.xlabel(<span style="color: #228b22;">'Raman shift (cm$^{-1}$)'</span>)
plt.ylabel(<span style="color: #228b22;">'Intensity (counts)'</span>)
plt.plot(minmax, sp(minmax), <span style="color: #228b22;">'ro '</span>)

plt.savefig(<span style="color: #228b22;">'images/raman-4.png'</span>)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; ... ... Roots = [ 1346.4623087   1347.42700893  1348.16689639]
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x1106b2dd0&gt;]
&lt;matplotlib.text.Text object at 0x110623910&gt;
&lt;matplotlib.text.Text object at 0x110c0a090&gt;
&gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x10b1bacd0&gt;]
&lt;matplotlib.legend.Legend object at 0x1106b2650&gt;
[&lt;matplotlib.lines.Line2D object at 0x1106b2b50&gt;]
[&lt;matplotlib.lines.Line2D object at 0x110698550&gt;]
&lt;matplotlib.text.Text object at 0x110623910&gt;
&lt;matplotlib.text.Text object at 0x110c0a090&gt;
[&lt;matplotlib.lines.Line2D object at 0x110698a10&gt;]
</pre>


<div class="figure">
<p><img src="/media/2013-02-27-Peak-finding-in-Raman-spectroscopy/raman-4.png"> 
</p>
</div>



<p>
In the end, we have illustrated how to construct a spline smoothing interpolation function and to find maxima in the function, including generating some initial guesses. There is more art to this than you might like, since you have to judge how much smoothing is enough or too much. With too much, you may smooth peaks out. With too little, noise may be mistaken for peaks.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary notes</h2>
<div class="outline-text-2" id="text-1">
<p>
Using org-mode with :session allows a large script to be broken up into mini sections. However, it only seems to work with the default python mode in Emacs, and it does not work with emacs-for-python or the latest python-mode. I also do not really like the output style, e.g. the output from the plotting commands.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/27/Peak-finding-in-Raman-spectroscopy.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Are averages different]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/18/Are-averages-different" />
    <id>http://jkitchin.github.io/blog/2013/02/18/Are-averages-different</id>
    <updated>2013-02-27T14:35:49Z</updated>
    <published>2013-02-18T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="statistics" />
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <summary type="html"><![CDATA[Are averages different]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/18/Are-averages-different"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2012/01/28/are-two-averages-different/" >Matlab post</a>
</p>

<p>
Adapted from <a href="http://stattrek.com/ap-statistics-4/unpaired-means.aspx" >http://stattrek.com/ap-statistics-4/unpaired-means.aspx</a>
</p>

<p>
Class A had 30 students who received an average test score of 78, with standard deviation of 10. Class B had 25 students an average test score of 85, with a standard deviation of 15. We want to know if the difference in these averages is statistically relevant. Note that we only have estimates of the true average and standard deviation for each class, and there is uncertainty in those estimates. As a result, we are unsure if the averages are really different. It could have just been luck that a few students in class B did better.
</p>

<p>
The hypothesis:
</p>

<p>
the true averages are the same. We need to perform a two-sample t-test of the hypothesis that \(\mu_1 - \mu_2 = 0\) (this is often called the null hypothesis). we use a two-tailed test because we do not care if the difference is positive or negative, either way means the averages are not the same.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

n1 = 30  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">students in class A</span>
x1 = 78.0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">average grade in class A</span>
s1 = 10.0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">std dev of exam grade in class A</span>

n2 = 25  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">students in class B</span>
x2 = 85.0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">average grade in class B</span>
s2 = 15.0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">std dev of exam grade in class B</span>

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the standard error of the difference between the two averages. </span>
SE = np.sqrt(s1**2 / n1 + s2**2 / n2)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">compute DOF</span>
DF = (n1 - 1) + (n2 - 1)
</pre>
</div>

<p>
see the discussion at <a href="http://stattrek.com/Help/Glossary.aspx?Target=Two-sample%20t-test" >http://stattrek.com/Help/Glossary.aspx?Target=Two-sample%20t-test</a> for a more complex definition of degrees of freedom. Here we simply subtract one from each sample size to account for the estimation of the average of each sample.
</p>


<p>
compute the t-score for our data
</p>

<p>
The difference between two averages determined from small sample numbers follows the t-distribution. the t-score is the difference between the difference of the means and the hypothesized difference of the means, normalized by the standard error. we compute the absolute value of the t-score to make sure it is positive for convenience later.
</p>
<div class="org-src-container">

<pre class="src src-python">tscore = np.abs(((x1 - x2) - 0) / SE)
<span style="color: #8b0000;">print</span> tscore
</pre>
</div>

<pre class="example">
1.99323179108
</pre>

<p>
Interpretation
</p>

<p>
A way to approach determinining if the difference is significant or not is to ask, does our computed average fall within a confidence range of the hypothesized value (zero)? If it does, then we can attribute the difference to statistical variations at that confidence level. If it does not, we can say that statistical variations do not account for the difference at that confidence level, and hence the averages must be different.
</p>

<p>
Let us compute the t-value that corresponds to a 95% confidence level for a mean of zero with the degrees of freedom computed earlier. This means that 95% of the t-scores we expect to get will fall within \(\pm\) t95.
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.stats.distributions <span style="color: #8b0000;">import</span>  t

ci = 0.95;
alpha = 1 - ci;
t95 = t.ppf(1.0 - alpha/2.0, DF)

<span style="color: #8b0000;">print</span> t95
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 2.00574599354
</pre>

<p>
since tscore &lt; t95, we conclude that at the 95% confidence level we cannot say these averages are statistically different because our computed t-score falls in the expected range of deviations. Note that our t-score is very close to the 95% limit. Let us consider a smaller confidence interval.
</p>

<div class="org-src-container">

<pre class="src src-python">ci = 0.94
alpha = 1 - ci;
t95 = t.ppf(1.0 - alpha/2.0, DF)

<span style="color: #8b0000;">print</span> t95
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 1.92191364181
</pre>

<p>
at the 94% confidence level, however, tscore &gt; t94, which means we can say with 94% confidence that the two averages are different; class B performed better than class A did. Alternatively, there is only about a 6% chance we are wrong about that statement.
another way to get there
</p>

<p>
An alternative way to get the confidence that the averages are different is to directly compute it from the cumulative t-distribution function. We compute the difference between all the t-values less than tscore and the t-values less than -tscore, which is the fraction of measurements that are between them. You can see here that we are practically 95% sure that the averages are different.
</p>

<div class="org-src-container">

<pre class="src src-python">f = t.cdf(tscore, DF) - t.cdf(-tscore, DF)
<span style="color: #8b0000;">print</span> f
</pre>
</div>

<pre class="example">
0.948605075732
</pre>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Are-averages-different.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Fit a line to numerical data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/18/Fit-a-line-to-numerical-data" />
    <id>http://jkitchin.github.io/blog/2013/02/18/Fit-a-line-to-numerical-data</id>
    <updated>2013-02-27T14:38:23Z</updated>
    <published>2013-02-18T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <summary type="html"><![CDATA[Fit a line to numerical data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/18/Fit-a-line-to-numerical-data"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/08/04/fit-a-line-to-numerical-data/" >Matlab post</a>
</p>

<p>
We want to fit a line to this data:
</p>

<div class="org-src-container">

<pre class="src src-python">x = [0, 0.5, 1, 1.5, 2.0, 3.0, 4.0, 6.0, 10]
y = [0, -0.157, -0.315, -0.472, -0.629, -0.942, -1.255, -1.884, -3.147]
</pre>
</div>

<p>
We use the polyfit(x, y, n) command where n is the polynomial order, n=1 for a line.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

p = np.polyfit(x, y, 1)
<span style="color: #8b0000;">print</span> p
slope, intercept = p
<span style="color: #8b0000;">print</span> slope, intercept
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; [-0.31452218  0.00062457]
&gt;&gt;&gt; -0.3145221843 0.00062457337884
</pre>

<p>
To show the fit, we can use numpy.polyval to evaluate the fit at many points.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

xfit = np.linspace(0, 10)
yfit = np.polyval(p, xfit)

plt.plot(x, y, <span style="color: #228b22;">'bo'</span>, label=<span style="color: #228b22;">'raw data'</span>)
plt.plot(xfit, yfit, <span style="color: #228b22;">'r-'</span>, label=<span style="color: #228b22;">'fit'</span>)
plt.xlabel(<span style="color: #228b22;">'x'</span>)
plt.ylabel(<span style="color: #228b22;">'y'</span>)
plt.legend()
plt.savefig(<span style="color: #228b22;">'images/linefit-1.png'</span>)
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; [&lt;matplotlib.lines.Line2D object at 0x053C1790&gt;]
[&lt;matplotlib.lines.Line2D object at 0x0313C610&gt;]
&lt;matplotlib.text.Text object at 0x052A4950&gt;
&lt;matplotlib.text.Text object at 0x052B9A10&gt;
&lt;matplotlib.legend.Legend object at 0x053C1CD0&gt;
</pre>

<p><img src="/img/./images/linefit-1.png"><p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Fit-a-line-to-numerical-data.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Fitting a numerical ODE solution to data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/18/Fitting-a-numerical-ODE-solution-to-data" />
    <id>http://jkitchin.github.io/blog/2013/02/18/Fitting-a-numerical-ODE-solution-to-data</id>
    <updated>2013-02-27T14:39:41Z</updated>
    <published>2013-02-18T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="nonlinear regression" />
    <summary type="html"><![CDATA[Fitting a numerical ODE solution to data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/18/Fitting-a-numerical-ODE-solution-to-data"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/09/29/fitting-a-numerical-ode-solution-to-data/" >Matlab post</a>
</p>

<p>
Suppose we know the concentration of A follows this differential equation: \(\frac{dC_A}{dt} = -k C_A\), and we have data we want to fit to it. Here is an example of doing that.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> curve_fit
<span style="color: #8b0000;">from</span> scipy.integrate <span style="color: #8b0000;">import</span> odeint

<span style="color: #ff0000; font-weight: bold;"># given data we want to fit</span>
tspan = [0, 0.1, 0.2, 0.4, 0.8, 1]
Ca_data = [2.0081,  1.5512,  1.1903,  0.7160,  0.2562,  0.1495]

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">fitfunc</span>(t, k):
    <span style="color: #228b22;">'Function that returns Ca computed from an ODE for a k'</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">myode</span>(Ca, t):
        <span style="color: #8b0000;">return</span> -k * Ca

    Ca0 = Ca_data[0]
    Casol = odeint(myode, Ca0, t)
    <span style="color: #8b0000;">return</span> Casol[:,0]

k_fit, kcov = curve_fit(fitfunc, tspan, Ca_data, p0=1.3)
<span style="color: #8b0000;">print</span> k_fit

tfit = np.linspace(0,1);
fit = fitfunc(tfit, k_fit)

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(tspan, Ca_data, <span style="color: #228b22;">'ro'</span>, label=<span style="color: #228b22;">'data'</span>)
plt.plot(tfit, fit, <span style="color: #228b22;">'b-'</span>, label=<span style="color: #228b22;">'fit'</span>)
plt.legend(loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/ode-fit.png'</span>)
</pre>
</div>

<pre class="example">
[ 2.58893455]
</pre>

<p><img src="/img/./images/ode-fit.png"><p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Fitting-a-numerical-ODE-solution-to-data.org">org-mode source</a><p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Graphical methods to help get initial guesses for multivariate nonlinear regression]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/02/18/Graphical-methods-to-help-get-initial-guesses-for-multivariate-nonlinear-regression" />
    <id>http://jkitchin.github.io/blog/2013/02/18/Graphical-methods-to-help-get-initial-guesses-for-multivariate-nonlinear-regression</id>
    <updated>2013-02-27T14:40:29Z</updated>
    <published>2013-02-18T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="data analysis" />
    <category scheme="http://jkitchin.github.io/blog" term="plotting" />
    <summary type="html"><![CDATA[Graphical methods to help get initial guesses for multivariate nonlinear regression]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/02/18/Graphical-methods-to-help-get-initial-guesses-for-multivariate-nonlinear-regression"><![CDATA[


<p>
<a href="http://matlab.cheme.cmu.edu/2011/10/09/graphical-methods-to-help-get-initial-guesses-for-multivariate-nonlinear-regression/" >Matlab post</a>
</p>

<p>
Fit the model f(x1,x2; a,b) = a*x1 + x2^b to the data given below. This model has two independent variables, and two parameters.
</p>

<p>
We want to do a nonlinear fit to find a and b that minimize the summed squared errors between the model predictions and the data. With only two variables, we can graph how the summed squared error varies with the parameters, which may help us get initial guesses. Let us assume the parameters lie in a range, here we choose 0 to 5. In other problems you would adjust this as needed.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">from</span> mpl_toolkits.mplot3d <span style="color: #8b0000;">import</span> Axes3D
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

x1 = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]
x2 = [0.2, 0.4, 0.8, 0.9, 1.1, 2.1]
X = np.column_stack([x1, x2]) <span style="color: #ff0000; font-weight: bold;"># independent variables</span>

f = [ 3.3079,    6.6358,   10.3143,   13.6492,   17.2755,   23.6271]

fig = plt.figure()
ax = fig.gca(projection = <span style="color: #228b22;">'3d'</span>)

ax.plot(x1, x2, f)
ax.set_xlabel(<span style="color: #228b22;">'x1'</span>)
ax.set_ylabel(<span style="color: #228b22;">'x2'</span>)
ax.set_zlabel(<span style="color: #228b22;">'f(x1,x2)'</span>)

plt.savefig(<span style="color: #228b22;">'images/graphical-mulvar-1.png'</span>)


arange = np.linspace(0,5);
brange = np.linspace(0,5);

A,B = np.meshgrid(arange, brange)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">model</span>(X, a, b):
    <span style="color: #228b22;">'Nested function for the model'</span>
    x1 = X[:, 0]
    x2 = X[:, 1]
    
    f = a * x1 + x2**b
    <span style="color: #8b0000;">return</span> f

<span style="color: #8b0000;">@np</span>.vectorize
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">errfunc</span>(a, b):
    <span style="color: #ff0000; font-weight: bold;"># function for the summed squared error</span>
    fit = model(X, a, b)
    sse = np.sum((fit - f)**2)
    <span style="color: #8b0000;">return</span> sse

SSE = errfunc(A, B)

plt.clf()
plt.contourf(A, B, SSE, 50)
plt.plot([3.2], [2.1], <span style="color: #228b22;">'ro'</span>)
plt.figtext( 3.4, 2.2, <span style="color: #228b22;">'Minimum near here'</span>, color=<span style="color: #228b22;">'r'</span>)

plt.savefig(<span style="color: #228b22;">'images/graphical-mulvar-2.png'</span>)

guesses = [3.18, 2.02]

<span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> curve_fit

popt, pcov = curve_fit(model, X, f, guesses)
<span style="color: #8b0000;">print</span> popt

plt.plot([popt[0]], [popt[1]], <span style="color: #228b22;">'r*'</span>)
plt.savefig(<span style="color: #228b22;">'images/graphical-mulvar-3.png'</span>)

<span style="color: #8b0000;">print</span> model(X, *popt)

fig = plt.figure()
ax = fig.gca(projection = <span style="color: #228b22;">'3d'</span>)

ax.plot(x1, x2, f, <span style="color: #228b22;">'ko'</span>, label=<span style="color: #228b22;">'data'</span>)
ax.plot(x1, x2, model(X, *popt), <span style="color: #228b22;">'r-'</span>, label=<span style="color: #228b22;">'fit'</span>)
ax.set_xlabel(<span style="color: #228b22;">'x1'</span>)
ax.set_ylabel(<span style="color: #228b22;">'x2'</span>)
ax.set_zlabel(<span style="color: #228b22;">'f(x1,x2)'</span>)

plt.savefig(<span style="color: #228b22;">'images/graphical-mulvar-4.png'</span>)
</pre>
</div>

<pre class="example">
[ 3.21694798  1.9728254 ]
[  3.25873623   6.59792994  10.29473657  13.68011436  17.29161001
  23.62366445]
</pre>

<p><img src="/img/./images/graphical-mulvar-1.png"><p>

<p><img src="/img/./images/graphical-mulvar-2.png"><p>

<p><img src="/img/./images/graphical-mulvar-3.png"><p>

<p><img src="/img/./images/graphical-mulvar-4.png"><p>

<p>
It can be difficult to figure out initial guesses for nonlinear fitting problems. For one and two dimensional systems, graphical techniques may be useful to visualize how the summed squared error between the model and data depends on the parameters.
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/02/18/Graphical-methods-to-help-get-initial-guesses-for-multivariate-nonlinear-regression.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
