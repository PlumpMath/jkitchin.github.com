<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-04-30T13:00:37Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using events in odelay with multiple equations]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/09/19/Using-events-in-odelay-with-multiple-equations" />
    <id>http://jkitchin.github.io/blog/2013/09/19/Using-events-in-odelay-with-multiple-equations</id>
    <updated>2013-09-19T10:33:57Z</updated>
    <published>2013-09-19T10:33:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="odes" />
    <summary type="html"><![CDATA[Using events in odelay with multiple equations]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/09/19/Using-events-in-odelay-with-multiple-equations"><![CDATA[



<p>
<code>odelay</code> was recently updated to support multiple odes with events. Here is an example. We want the solutions to:
</p>

\begin{align}
\frac{dy_1}{dx} = y_2 \\
\frac{dy_2}{dx} = -y_1
\end{align}

<p>
with initial conditions \(y_1(0) = 2\) and \(y_2(0) = 1\). We want to stop the integration when \(y_2 = -1\) and find out when \(dy_1/dx=0\) and at a maximum.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> pycse <span style="color: #8b0000;">import</span> odelay
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">ode</span>(Y,x):
    <span style="color: #8b008b;">y1</span>, <span style="color: #8b008b;">y2</span> = Y
    <span style="color: #8b008b;">dy1dx</span> = y2
    <span style="color: #8b008b;">dy2dx</span> = -y1
    <span style="color: #8b0000;">return</span> [dy1dx, dy2dx]

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">event1</span>(Y, x):
    <span style="color: #8b008b;">y1</span>, <span style="color: #8b008b;">y2</span> = Y
    <span style="color: #8b008b;">value</span> = y2 - (-1.0)
    <span style="color: #8b008b;">isterminal</span> = <span style="color: #cd0000;">True</span>
    <span style="color: #8b008b;">direction</span>  = 0
    <span style="color: #8b0000;">return</span> value, isterminal, direction

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">event2</span>(Y, x):
    <span style="color: #8b008b;">dy1dx</span>, <span style="color: #8b008b;">dy2dx</span> = ode(Y,x)
    <span style="color: #8b008b;">value</span> = dy1dx - 0.0
    <span style="color: #8b008b;">isterminal</span> = <span style="color: #cd0000;">False</span>
    <span style="color: #8b008b;">direction</span> = -1  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">derivative is decreasing towards a maximum</span>
    <span style="color: #8b0000;">return</span> value, isterminal, direction

<span style="color: #8b008b;">Y0</span> = [2.0, 1.0]
<span style="color: #8b008b;">xspan</span> = np.linspace(0, 5)
<span style="color: #8b008b;">X</span>, <span style="color: #8b008b;">Y</span>, <span style="color: #8b008b;">XE</span>, <span style="color: #8b008b;">YE</span>, <span style="color: #8b008b;">IE</span> = odelay(ode, Y0, xspan, events=[event1, event2])

plt.plot(X, Y)
<span style="color: #8b0000;">for</span> ie,xe,ye <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">zip</span>(IE, XE, YE):
    <span style="color: #8b0000;">if</span> ie == 1: <span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">this is the second event</span>
        <span style="color: #8b008b;">y1</span>,y2 = ye
        plt.plot(xe, y1, <span style="color: #228b22;">'ro'</span>) 
        
plt.legend([<span style="color: #228b22;">'$y_1$'</span>, <span style="color: #228b22;">'$y_2$'</span>], loc=<span style="color: #228b22;">'best'</span>)
plt.savefig(<span style="color: #228b22;">'images/odelay-mult-eq.png'</span>)
plt.show()
</pre>
</div>

<p>
Here are the plotted results:
<p><img src="/img/./images/odelay-mult-eq.png"><p>
</p>
<p>Copyright (C) 2013 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2013/09/19/Using-events-in-odelay-with-multiple-equations.org">org-mode source</a><p>]]></content>
  </entry>
</feed>
