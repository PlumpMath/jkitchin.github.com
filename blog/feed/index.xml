<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sun, 17 May 2015 13:10:18 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>New publication in Surface Science on data sharing</title>
      <link>http://jkitchin.github.io/blog/2015/05/17/New-publication-in-Surface-Science-on-data-sharing</link>
      <pubDate>Sun, 17 May 2015 09:10:01 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publication]]></category>
      <guid isPermaLink="false">2MqJNwhoojALy6O5cKh5lMEdz6s=</guid>
      <description>New publication in Surface Science on data sharing</description>
      <content:encoded><![CDATA[



<p>
In this perspective we illustrate how we use org-mode to prepare manuscripts and supporting information files that are rich in data, and that make it easy to share the code we use for our analysis. We use the supporting information file from <a href="#boes-2015-core-cu">boes-2015-core-cu</a> to show examples of how to extract the data, and reuse it in new analyses. This approach works for both computational and experimental data.
</p>

<p>
<a href="http://www.sciencedirect.com/science/article/pii/S0039602815001326">http://www.sciencedirect.com/science/article/pii/S0039602815001326</a> 
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">kitchin-2015-data-surfac-scien</span>,
  <span style="color: #BA36A5;">author</span> =       "John R. Kitchin",
  <span style="color: #BA36A5;">title</span> =        {Data Sharing in Surface Science},
  <span style="color: #BA36A5;">journal</span> =      "Surface Science ",
  <span style="color: #BA36A5;">number</span> =       0,
  <span style="color: #BA36A5;">pages</span> =        " - ",
  <span style="color: #BA36A5;">year</span> =         2015,
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1016/j.susc.2015.05.007</span>},
  <span style="color: #BA36A5;">url</span> =
                  "http://www.sciencedirect.com/science/article/pii/S0039602815001326",
  <span style="color: #BA36A5;">issn</span> =         "0039-6028",
  <span style="color: #BA36A5;">keywords</span> =     "Data sharing ",
}
</pre>
</div>

<p>
<h1>Bibliography</h1>
<ul><li><a id="boes-2015-core-cu">[boes-2015-core-cu] "Jacob Boes, Peter Kondratyuk, Chunrong Yin, James, Miller, Andrew Gellman & John Kitchin", Core Level Shifts in Cu-Pd Alloys As a Function of Bulk  Composition and Structure, <i>"Surface Science "</i>, <b>(0)</b>,  -  (2015). <a href="http://www.sciencedirect.com/science/article/pii/S0039602815000461">link</a>. <a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">doi</a>.</a></li>
</ul></p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/17/New-publication-in-Surface-Science-on-data-sharing.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Python data structures to lisp</title>
      <link>http://jkitchin.github.io/blog/2015/05/16/Python-data-structures-to-lisp</link>
      <pubDate>Sat, 16 May 2015 10:47:59 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[lisp]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">W0S7IVT_nQDetPEbwbEN0vag2-U=</guid>
      <description>Python data structures to lisp</description>
      <content:encoded><![CDATA[


<p>
I have an idea in mind that would use the output of python scripts in lisp functions. Xah Lee posted an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">idea for writing emacs commands in scripting languages</a> . In this post I want to explore an extension of the idea, where a Python script will return output that can be read in Lisp, e.g. we can convert a Python list to a lisp list, or a dictionary to an a-list or p-list. I can already see that simple data structures will be "simple", and arbitrary data structures will offer a lot of challenges, e.g. nested lists or dictionaries&#x2026;
</p>

<p>
If I could add some custom functions to the basic builtin types in Python, then I could use another approach to format python objects as lisp data types. This isn't recommended by Pythonistas, but I guess they don't want to use lisp as much as I do ;) I found this approach to modifying builtins:
</p>

<p>
<a href="http://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a">http://stackoverflow.com/questions/2444680/how-do-i-add-my-own-custom-attributes-to-existing-built-in-python-types-like-a</a> 
</p>

<p>
We use that almost verbatim here to get what I want. This is a super low level way to add functions to the builtins. I add some simple formatting to floats, ints and strings. I add a more complex recursive formatting function to lists, tuples and dictionaries. A dictionary can be represented as an alist or plist. Both examples are shown, but I leave the alist version commented out. Finally, we add a lispify function to numpy arrays.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> ctypes <span style="color: #0000FF;">as</span> c

<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">PyObject_HEAD</span>(c.Structure):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">_fields_</span> = [(<span style="color: #008000;">'HEAD'</span>, c.c_ubyte * (<span style="color: #006FE0;">object</span>.__basicsize__ -
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     c.sizeof(c.c_void_p))),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   (<span style="color: #008000;">'ob_type'</span>, c.c_void_p)]

<span style="color: #BA36A5;">_get_dict</span> = c.pythonapi._PyObject_GetDictPtr
<span style="color: #BA36A5;">_get_dict.restype</span> = c.POINTER(c.py_object)
<span style="color: #BA36A5;">_get_dict.argtypes</span> = [c.py_object]

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_dict</span>(<span style="color: #006FE0;">object</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> _get_dict(<span style="color: #006FE0;">object</span>).contents.value

get_dict(<span style="color: #006FE0;">str</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> s:<span style="color: #008000;">'"{}"'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(s))
get_dict(<span style="color: #006FE0;">float</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> f:<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(f))
get_dict(<span style="color: #006FE0;">int</span>)[<span style="color: #008000;">'lisp'</span>] = <span style="color: #0000FF;">lambda</span> f:<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">str</span>(f))

<span style="color: #0000FF;">import</span> collections
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">def</span> <span style="color: #006699;">lispify</span>(L):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">"Convert a Python object L to a lisp representation."</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">str</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">float</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">int</span>)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> L.lisp()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> (<span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">list</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">tuple</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>     <span style="color: #0000FF;">or</span> <span style="color: #006FE0;">isinstance</span>(L, np.ndarray)):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> element <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [element.lisp()]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'('</span> + <span style="color: #008000;">' '</span>.join(s) + <span style="color: #008000;">')'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> <span style="color: #006FE0;">isinstance</span>(L, <span style="color: #006FE0;">dict</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> key <span style="color: #0000FF;">in</span> L:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">alist format</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">s += ["({0} . {1})".format(key, L[key].lisp())]</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plist</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [<span style="color: #008000;">":{0} {1}"</span>.<span style="color: #006FE0;">format</span>(key, L[key].lisp())]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'('</span> + <span style="color: #008000;">' '</span>.join(s) + <span style="color: #008000;">')'</span>

get_dict(<span style="color: #006FE0;">list</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(<span style="color: #006FE0;">tuple</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(<span style="color: #006FE0;">dict</span>)[<span style="color: #008000;">'lisp'</span>] = lispify
get_dict(np.ndarray)[<span style="color: #008000;">'lisp'</span>] = lispify
</pre>
</div>

<p>
Let us test these out.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> pylisp <span style="color: #0000FF;">import</span> *
<span style="color: #BA36A5;">a</span> = 4.5
<span style="color: #0000FF;">print</span> <span style="color: #006FE0;">int</span>(a).lisp()
<span style="color: #0000FF;">print</span> a.lisp()
<span style="color: #0000FF;">print</span> <span style="color: #008000;">"test"</span>.lisp()

<span style="color: #0000FF;">print</span> [1, 2, 3].lisp()
<span style="color: #0000FF;">print</span> (1, 2, 3).lisp()

<span style="color: #0000FF;">print</span> [[1, 3], (5, 6)].lisp()

<span style="color: #0000FF;">print</span> {<span style="color: #008000;">"a"</span>: 5}.lisp()
<span style="color: #0000FF;">print</span> [[1, 3], (5, 6), {<span style="color: #008000;">"a"</span>: 5, <span style="color: #008000;">"b"</span>: <span style="color: #008000;">"test"</span>}].lisp()


<span style="color: #BA36A5;">A</span> = np.array([1, 3, 4])
<span style="color: #0000FF;">print</span> A.lisp()
<span style="color: #0000FF;">print</span> ({<span style="color: #008000;">"tree"</span>: [5, 6]}, [<span style="color: #008000;">"a"</span>, 4, <span style="color: #008000;">"list"</span>], 5, 2.0 / 3.0).lisp()
</pre>
</div>

<pre class="example">
4
4.5
"test"
(1 2 3)
(1 2 3)
((1 3) (5 6))
(:a 5)
((1 3) (5 6) (:a 5 :b "test"))
(1 3 4)
((:tree (5 6)) ("a" 4 "list") 5 0.666666666667)
</pre>


<p>
Now, is that better than a single lisp function with a lot of conditionals to handle each type? I am not sure. This seems to work pretty well.
</p>


<p>
Here is how I imagine using this idea. We would have some emacs-lisp variables and use them to dynamically generate a python script. We run the python script, capturing the output, and read it back in as a lisp data structure. Here is a simple kind of example that generates a dictionary.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((elisp-var 6)
       (result)
      (script (format <span style="color: #008000;">"</span>
<span style="color: #008000;">from pylisp import *</span>
<span style="color: #008000;">print {x: [2*y for y in range(x)] for x in range(1, %s)}.lisp()</span>
<span style="color: #008000;">"</span> elisp-var)))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">start a python process</span>
  (run-python)
  (<span style="color: #0000FF;">setq</span> result (read (python-shell-send-string-no-output
   script)))
  (plist-get result <span style="color: #006FE0;">:5</span>))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(0 2 4 6 8)
</pre>
</div>

<p>
That seems to work pretty well. One alternative idea to this is <a href="https://github.com/pinard/Pymacs">Pymacs</a> , which I have written about <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs/">before</a> . This project isn't currently under active development, and I ran into some difficulties with it before.
</p>

<p>
Here we can solve the problem I previously posed and get the result back as an elisp float, and then reuse the result
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((myvar 3)
       (script (format <span style="color: #008000;">"from pylisp import *</span>
<span style="color: #008000;">from scipy.optimize import fsolve</span>
<span style="color: #008000;">def objective(x):</span>
<span style="color: #008000;">    return x - 5</span>

<span style="color: #008000;">ans, = fsolve(objective, %s)</span>
<span style="color: #008000;">print ans.lisp()"</span> myvar)))
  (run-python)
  (<span style="color: #0000FF;">setq</span> result (read (python-shell-send-string-no-output
                       script)))
  (- 5 result))
</pre>
</div>

<pre class="example">
0.0
</pre>

<p>
Bottom line: we can write python code in lisp functions that are dynamically updated, execute them, and get lisp data structures back for simple data types. I think that could be useful in some applications, where it is easier to do parsing/analysis in Python, but you want to do something else that is easier in Lisp.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/16/Python-data-structures-to-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Another approach to embedding org-source in html</title>
      <link>http://jkitchin.github.io/blog/2015/05/09/Another-approach-to-embedding-org-source-in-html</link>
      <pubDate>Sat, 09 May 2015 19:19:10 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[data]]></category>
      <guid isPermaLink="false">VDOCn9OcCwUtC5Mwgxhzeiweu7Y=</guid>
      <description>Another approach to embedding org-source in html</description>
      <content:encoded><![CDATA[


<p>
In this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/09/An-alternative-approach-to-including-org-source-in-blog-posts/">post</a> I examined a way to embed the org-source in a comment in the html of the post, and developed a reasonably convenient way to extract the source in emacs. One downside of the approach was the need to escape at least the dashes, and then unescape them on extraction. I came across another idea, which is to put the org-source in base64 encoded form in a <a href="http://en.wikipedia.org/wiki/Data_URI_scheme">data uri</a> .
</p>

<p>
First let us see what the encoding means:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(base64-encode-string <span style="color: #008000;">"&lt;!-- test--&gt;"</span>)
</pre>
</div>
<pre class="example">
PCEtLSB0ZXN0LS0+
</pre>

<p>
And decoding:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(base64-decode-string <span style="color: #008000;">"PCEtLSB0ZXN0LS0+"</span>)
</pre>
</div>

<pre class="example">
&lt;!-- test--&gt;
</pre>

<p>
The encoding looks random, but it is reversible. More importantly, it probably will not have any html like characters in it that need escaped. The idea of a data uri is that the data it serves is embedded in the URL href attribute. This is basically how to make a data uri. We give the url here a class so we can find it later.
</p>
<pre class="example">
&lt;a class="some-org-source" href="data:text/plain;charset=US-ASCII;base64,PCEtLSB0ZXN0LS0+"&gt;source&lt;/a&gt;
</pre>

<p>
Here is the actual html for the browser. If you click on it, your browser automatically decodes it for you!
</p>
<a class="some-org-source" href="data:text/plain;charset=US-ASCII;base64,PCEtLSB0ZXN0LS0+">source</a>

<p>
So, during the blog publish step, we just need to add this little step to the html generation, and it will be included as a data uri. Here is the function that generates the data uri for us, and example of using it. The encoded source is not at all attractive to look at it, but you almost never need to look at it, it is invisible in the browser. Interestingly, if you click on the link, you will see the org source right in your browser!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">source-data-uri</span> (source)
  <span style="color: #036A07;">"Encode the string in SOURCE to a data uri."</span>
  (format
   <span style="color: #008000;">"&lt;a class=\"org-source\" href=\"data:text/plain;charset=US-ASCII;base64,%s\"&gt;source&lt;/a&gt;"</span>
   (base64-encode-string source)))

(source-data-uri (buffer-string))
</pre>
</div>

<a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KiBBbm90aGVyIGFwcHJvYWNoIHRvIGVtYmVkZGluZyBvcmctc291cmNlIGluIGh0bWwKSW4gdGhp
cyBbW2h0dHA6Ly9raXRjaGluZ3JvdXAuY2hlbWUuY211LmVkdS9ibG9nLzIwMTUvMDUvMDkvQW4t
YWx0ZXJuYXRpdmUtYXBwcm9hY2gtdG8taW5jbHVkaW5nLW9yZy1zb3VyY2UtaW4tYmxvZy1wb3N0
cy9dW3Bvc3RdXSBJIGV4YW1pbmVkIGEgd2F5IHRvIGVtYmVkIHRoZSBvcmctc291cmNlIGluIGEg
Y29tbWVudCBpbiB0aGUgaHRtbCBvZiB0aGUgcG9zdCwgYW5kIGRldmVsb3BlZCBhIHJlYXNvbmFi
bHkgY29udmVuaWVudCB3YXkgdG8gZXh0cmFjdCB0aGUgc291cmNlIGluIGVtYWNzLiBPbmUgZG93
bnNpZGUgb2YgdGhlIGFwcHJvYWNoIHdhcyB0aGUgbmVlZCB0byBlc2NhcGUgYXQgbGVhc3QgdGhl
IGRhc2hlcywgYW5kIHRoZW4gdW5lc2NhcGUgdGhlbSBvbiBleHRyYWN0aW9uLiBJIGNhbWUgYWNy
b3NzIGFub3RoZXIgaWRlYSwgd2hpY2ggaXMgdG8gcHV0IHRoZSBvcmctc291cmNlIGluIGJhc2U2
NCBlbmNvZGVkIGZvcm0gaW4gYSBbW2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGF0YV9V
Uklfc2NoZW1lXVtkYXRhIHVyaV1dLgoKRmlyc3QgbGV0IHVzIHNlZSB3aGF0IHRoZSBlbmNvZGlu
ZyBtZWFuczoKCiMrQkVHSU5fU1JDIGVtYWNzLWxpc3AKKGJhc2U2NC1lbmNvZGUtc3RyaW5nICI8
IS0tIHRlc3QtLT4iKQojK0VORF9TUkMKIytSRVNVTFRTOgo6IFBDRXRMU0IwWlhOMExTMCsKCkFu
ZCBkZWNvZGluZzoKCiMrQkVHSU5fU1JDIGVtYWNzLWxpc3AKKGJhc2U2NC1kZWNvZGUtc3RyaW5n
ICJQQ0V0TFNCMFpYTjBMUzArIikKIytFTkRfU1JDCgojK1JFU1VMVFM6CjogPCEtLSB0ZXN0LS0+
CgpBbmQgdGhpcyBpcyBiYXNpY2FsbHkgaG93IHRvIG1ha2UgYSBkYXRhIHVyaS4gV2UgZ2l2ZSB0
aGUgdXJsIGhlcmUgYSBjbGFzcyBzbyB3ZSBjYW4gZmluZCBpdCBsYXRlci4KIytCRUdJTl9FWEFN
UExFCjxhIGNsYXNzPSJvcmctc291cmNlIiBocmVmPSJkYXRhOnRleHQvcGxhaW47Y2hhcnNldD1V
Uy1BU0NJSTtiYXNlNjQsUENFdExTQjBaWE4wTFMwKyI+c291cmNlPC9hPgojK0VORF9FWEFNUExF
CgpIZXJlIGlzIHRoZSBhY3R1YWwgaHRtbCBmb3IgdGhlIGJyb3dzZXI6IAojK0JFR0lOX0hUTUwK
PGEgY2xhc3M9Im9yZy1zb3VyY2UiIGhyZWY9ImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFT
Q0lJO2Jhc2U2NCxQQ0V0TFNCMFpYTjBMUzArIj5zb3VyY2U8L2E+CiMrRU5EX0hUTUwKClNvLCBk
dXJpbmcgdGhlIGJsb2cgcHVibGlzaCBzdGVwLCB3ZSBqdXN0IG5lZWQgdG8gYWRkIHRoaXMgbGl0
dGxlIHN0ZXAgdG8gdGhlIGh0bWwgZ2VuZXJhdGlvbiwgYW5kIGl0IHdpbGwgYmUgaW5jbHVkZWQg
YXMgYSBkYXRhIHVyaS4gSGVyZSBpcyB0aGUgZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgdGhlIGRh
dGEgdXJpIGZvciB1cywgYW5kIGV4YW1wbGUgb2YgdXNpbmcgaXQ6CgojK0JFR0lOX1NSQyBlbWFj
cy1saXNwICA6cmVzdWx0cyBodG1sCihkZWZ1biBzb3VyY2UtZGF0YS11cmkgKHNvdXJjZSkKICAi
RW5jb2RlIHRoZSBzdHJpbmcgaW4gU09VUkNFIHRvIGEgZGF0YSB1cmkuIgogIChmb3JtYXQKICAg
IjxhIGNsYXNzPVwib3JnLXNvdXJjZVwiIGhyZWY9XCJkYXRhOnRleHQvcGxhaW47Y2hhcnNldD1V
Uy1BU0NJSTtiYXNlNjQsJXNcIiBkb3dubG9hZD1cInNvdXJjZS5vcmdcIj5zb3VyY2U8L2E+IiAK
ICAgKGJhc2U2NC1lbmNvZGUtc3RyaW5nIHNvdXJjZSkpKQoKKHNvdXJjZS1kYXRhLXVyaSAoYnVm
ZmVyLXN0cmluZykpCiMrRU5EX1NSQwoKCgoKCgoK" download="source.org">source</a>

<p>
Now, we integrate it into the blogofile function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">bf-get-post-html</span> ()
  <span style="color: #036A07;">"Return a string containing the YAML header, the post html, my</span>
<span style="color: #036A07;">copyright line, and a link to the org-source code."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((org-source (buffer-string))
        (url-to-org (bf-get-url-to-org-source))
        (yaml (bf-get-YAML-heading))
        (body (bf-get-HTML)))

    (<span style="color: #0000FF;">with-temp-buffer</span>
      (insert yaml)
      (insert body)
      (insert
       (format <span style="color: #008000;">"&lt;p&gt;Copyright (C) %s by John Kitchin. See the &lt;a href=\"/copying.html\"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;"</span>
               (format-time-string <span style="color: #008000;">"%Y"</span>)))
      (insert (format <span style="color: #008000;">"&lt;p&gt;&lt;a href=\"%s\"&gt;org-mode source&lt;/a&gt;&lt;p&gt;"</span>
                      url-to-org))
      (insert (format <span style="color: #008000;">"&lt;p&gt;Org-mode version = %s&lt;/p&gt;"</span> (org-version)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is the only new code we need to add.</span>
      (insert (source-data-uri org-source))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return value</span>
      (buffer-string))))
</pre>
</div>

<p>
Now we need a new adaptation of the grab-org-source function. We still need a regexp search to get the source, and we still need to decode it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">grab-org-source</span> (url)
  <span style="color: #036A07;">"Extract org-source from URL to a buffer named *grab-org-source*."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"sURL: "</span>)
  (switch-to-buffer (get-buffer-create <span style="color: #008000;">"*grab-org-source*"</span>))
  (erase-buffer)
  (org-mode)
  (insert
   (<span style="color: #0000FF;">with-current-buffer</span>
       (url-retrieve-synchronously url)
     (<span style="color: #0000FF;">let</span> (start)
       (re-search-forward
        <span style="color: #008000;">"&lt;a class=\"org-source\" href=\"data:text/plain;charset=US-ASCII;base64,</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[</span><span style="color: #008000;">^</span><span style="color: #008000;">\"]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">\\\"&gt;"</span> nil t)
       (base64-decode-string  (match-string 1))))))
</pre>
</div>

<p>
What else could we do with this? One idea would be to generate data uris for each code block that you could open in your browser. For example, here we generate a list of data uris for each code block in the buffer. We don't take care to label them or make it easy to see what they are, but if you click on one, you should see a plain text version of the block. If this is done a lot, it might even make sense to change the mime type to download the code in some native app.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) 'src-block
  (<span style="color: #0000FF;">lambda</span> (src-block)
    (source-data-uri (org-element-property <span style="color: #006FE0;">:value</span> src-block))))
</pre>
</div>

(<a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KGJhc2U2NC1lbmNvZGUtc3RyaW5nICI8IS0tIHRlc3QtLT4iKQo=">source</a> <a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KGJhc2U2NC1kZWNvZGUtc3RyaW5nICJQQ0V0TFNCMFpYTjBMUzArIikK">source</a> <a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KGRlZnVuIHNvdXJjZS1kYXRhLXVyaSAoc291cmNlKQogICJFbmNvZGUgdGhlIHN0cmluZyBpbiBT
T1VSQ0UgdG8gYSBkYXRhIHVyaS4iCiAgKGZvcm1hdAogICAiPGEgY2xhc3M9XCJvcmctc291cmNl
XCIgaHJlZj1cImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFTQ0lJO2Jhc2U2NCwlc1wiPnNv
dXJjZTwvYT4iCiAgIChiYXNlNjQtZW5jb2RlLXN0cmluZyBzb3VyY2UpKSkKCihzb3VyY2UtZGF0
YS11cmkgKGJ1ZmZlci1zdHJpbmcpKQo=">source</a> <a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KGRlZnVuIGJmLWdldC1wb3N0LWh0bWwgKCkKICAiUmV0dXJuIGEgc3RyaW5nIGNvbnRhaW5pbmcg
dGhlIFlBTUwgaGVhZGVyLCB0aGUgcG9zdCBodG1sLCBteQpjb3B5cmlnaHQgbGluZSwgYW5kIGEg
bGluayB0byB0aGUgb3JnLXNvdXJjZSBjb2RlLiIKICAoaW50ZXJhY3RpdmUpCiAgKGxldCAoKG9y
Zy1zb3VyY2UgKGJ1ZmZlci1zdHJpbmcpKQoJKHVybC10by1vcmcgKGJmLWdldC11cmwtdG8tb3Jn
LXNvdXJjZSkpCgkoeWFtbCAoYmYtZ2V0LVlBTUwtaGVhZGluZykpCgkoYm9keSAoYmYtZ2V0LUhU
TUwpKSkKCiAgICAod2l0aC10ZW1wLWJ1ZmZlcgogICAgICAoaW5zZXJ0IHlhbWwpCiAgICAgIChp
bnNlcnQgYm9keSkKICAgICAgKGluc2VydAogICAgICAgKGZvcm1hdCAiPHA+Q29weXJpZ2h0IChD
KSAlcyBieSBKb2huIEtpdGNoaW4uIFNlZSB0aGUgPGEgaHJlZj1cIi9jb3B5aW5nLmh0bWxcIj5M
aWNlbnNlPC9hPiBmb3IgaW5mb3JtYXRpb24gYWJvdXQgY29weWluZy48cD4iCgkgICAgICAgKGZv
cm1hdC10aW1lLXN0cmluZyAiJVkiKSkpCiAgICAgIChpbnNlcnQgKGZvcm1hdCAiPHA+PGEgaHJl
Zj1cIiVzXCI+b3JnLW1vZGUgc291cmNlPC9hPjxwPiIKCQkgICAgICB1cmwtdG8tb3JnKSkKICAg
ICAgKGluc2VydCAoZm9ybWF0ICI8cD5PcmctbW9kZSB2ZXJzaW9uID0gJXM8L3A+IiAob3JnLXZl
cnNpb24pKSkKICAgICAgOzsgdGhpcyBpcyB0aGUgb25seSBuZXcgY29kZSB3ZSBuZWVkIHRvIGFk
ZC4KICAgICAgKGluc2VydCAoc291cmNlLWRhdGEtdXJpIG9yZy1zb3VyY2UpKQogICAgICA7OyBy
ZXR1cm4gdmFsdWUKICAgICAgKGJ1ZmZlci1zdHJpbmcpKSkpCg==">source</a> <a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KGRlZnVuIGdyYWItb3JnLXNvdXJjZSAodXJsKQogICJFeHRyYWN0IG9yZy1zb3VyY2UgZnJvbSBV
UkwgdG8gYSBidWZmZXIgbmFtZWQgKmdyYWItb3JnLXNvdXJjZSouIgogIChpbnRlcmFjdGl2ZSAi
c1VSTDogIikKICAoc3dpdGNoLXRvLWJ1ZmZlciAoZ2V0LWJ1ZmZlci1jcmVhdGUgIipncmFiLW9y
Zy1zb3VyY2UqIikpCiAgKGVyYXNlLWJ1ZmZlcikKICAob3JnLW1vZGUpCiAgKGluc2VydAogICAo
d2l0aC1jdXJyZW50LWJ1ZmZlcgogICAgICAgKHVybC1yZXRyaWV2ZS1zeW5jaHJvbm91c2x5IHVy
bCkKICAgICAobGV0IChzdGFydCkKICAgICAgIChyZS1zZWFyY2gtZm9yd2FyZAoJIjxhIGNsYXNz
PVwib3JnLXNvdXJjZVwiIGhyZWY9XCJkYXRhOnRleHQvcGxhaW47Y2hhcnNldD1VUy1BU0NJSTti
YXNlNjQsXFwoW15cIl0qXFwpXFxcIj4iIG5pbCB0KQogICAgICAgKGJhc2U2NC1kZWNvZGUtc3Ry
aW5nICAobWF0Y2gtc3RyaW5nIDEpKSkpKSkK">source</a> <a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KG9yZy1lbGVtZW50LW1hcCAob3JnLWVsZW1lbnQtcGFyc2UtYnVmZmVyKSAnc3JjLWJsb2NrCiAg
KGxhbWJkYSAoc3JjLWJsb2NrKQogICAgKHNvdXJjZS1kYXRhLXVyaSAob3JnLWVsZW1lbnQtcHJv
cGVydHkgOnZhbHVlIHNyYy1ibG9jaykpKSkK">source</a>)


<p>
I am not sure if this is better or worse than the other approach. I have not tested it very thoroughly, but it seems like it should work pretty generally. I imagine you could also embed other kinds of files in the html, if for some reason you did not want to put the files on your server. Overall this seems to lack some elegance in searching for data, e.g. like <a href="http://en.wikipedia.org/wiki/Embedded_RDF">RDF</a> or <a href="http://en.wikipedia.org/wiki/RDFa">RDFa</a> is supposed to enable, but it might be a step in that direction, using org-mode and Emacs as the editor.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/09/Another-approach-to-embedding-org-source-in-html.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p><a class="org-source" href="data:text/plain;charset=US-ASCII;base64,KiBET05FIEFub3RoZXIgYXBwcm9hY2ggdG8gZW1iZWRkaW5nIG9yZy1zb3VyY2UgaW4gaHRtbAog
IENMT1NFRDogWzIwMTUtMDUtMDkgU2F0IDE5OjE5XQogIDpQUk9QRVJUSUVTOgogIDpkYXRlOiAg
ICAgMjAxNS8wNS8wOSAxOToxOToxMAogIDp1cGRhdGVkOiAgMjAxNS8wNS8xMCAwOTozNDo1NQog
IDpjYXRlZ29yaWVzOiBvcmdtb2RlLCBkYXRhCiAgOkVORDoKSW4gdGhpcyBbW2h0dHA6Ly9raXRj
aGluZ3JvdXAuY2hlbWUuY211LmVkdS9ibG9nLzIwMTUvMDUvMDkvQW4tYWx0ZXJuYXRpdmUtYXBw
cm9hY2gtdG8taW5jbHVkaW5nLW9yZy1zb3VyY2UtaW4tYmxvZy1wb3N0cy9dW3Bvc3RdXSBJIGV4
YW1pbmVkIGEgd2F5IHRvIGVtYmVkIHRoZSBvcmctc291cmNlIGluIGEgY29tbWVudCBpbiB0aGUg
aHRtbCBvZiB0aGUgcG9zdCwgYW5kIGRldmVsb3BlZCBhIHJlYXNvbmFibHkgY29udmVuaWVudCB3
YXkgdG8gZXh0cmFjdCB0aGUgc291cmNlIGluIGVtYWNzLiBPbmUgZG93bnNpZGUgb2YgdGhlIGFw
cHJvYWNoIHdhcyB0aGUgbmVlZCB0byBlc2NhcGUgYXQgbGVhc3QgdGhlIGRhc2hlcywgYW5kIHRo
ZW4gdW5lc2NhcGUgdGhlbSBvbiBleHRyYWN0aW9uLiBJIGNhbWUgYWNyb3NzIGFub3RoZXIgaWRl
YSwgd2hpY2ggaXMgdG8gcHV0IHRoZSBvcmctc291cmNlIGluIGJhc2U2NCBlbmNvZGVkIGZvcm0g
aW4gYSBbW2h0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGF0YV9VUklfc2NoZW1lXVtkYXRh
IHVyaV1dLgoKRmlyc3QgbGV0IHVzIHNlZSB3aGF0IHRoZSBlbmNvZGluZyBtZWFuczoKCiMrQkVH
SU5fU1JDIGVtYWNzLWxpc3AKKGJhc2U2NC1lbmNvZGUtc3RyaW5nICI8IS0tIHRlc3QtLT4iKQoj
K0VORF9TUkMKIytSRVNVTFRTOgo6IFBDRXRMU0IwWlhOMExTMCsKCkFuZCBkZWNvZGluZzoKCiMr
QkVHSU5fU1JDIGVtYWNzLWxpc3AKKGJhc2U2NC1kZWNvZGUtc3RyaW5nICJQQ0V0TFNCMFpYTjBM
UzArIikKIytFTkRfU1JDCgojK1JFU1VMVFM6CjogPCEtLSB0ZXN0LS0+CgpUaGUgZW5jb2Rpbmcg
bG9va3MgcmFuZG9tLCBidXQgaXQgaXMgcmV2ZXJzaWJsZS4gTW9yZSBpbXBvcnRhbnRseSwgaXQg
cHJvYmFibHkgd2lsbCBub3QgaGF2ZSBhbnkgaHRtbCBsaWtlIGNoYXJhY3RlcnMgaW4gaXQgdGhh
dCBuZWVkIGVzY2FwZWQuIFRoZSBpZGVhIG9mIGEgZGF0YSB1cmkgaXMgdGhhdCB0aGUgZGF0YSBp
dCBzZXJ2ZXMgaXMgZW1iZWRkZWQgaW4gdGhlIFVSTCBocmVmIGF0dHJpYnV0ZS4gVGhpcyBpcyBi
YXNpY2FsbHkgaG93IHRvIG1ha2UgYSBkYXRhIHVyaS4gV2UgZ2l2ZSB0aGUgdXJsIGhlcmUgYSBj
bGFzcyBzbyB3ZSBjYW4gZmluZCBpdCBsYXRlci4KIytCRUdJTl9FWEFNUExFCjxhIGNsYXNzPSJz
b21lLW9yZy1zb3VyY2UiIGhyZWY9ImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFTQ0lJO2Jh
c2U2NCxQQ0V0TFNCMFpYTjBMUzArIj5zb3VyY2U8L2E+CiMrRU5EX0VYQU1QTEUKCkhlcmUgaXMg
dGhlIGFjdHVhbCBodG1sIGZvciB0aGUgYnJvd3Nlci4gSWYgeW91IGNsaWNrIG9uIGl0LCB5b3Vy
IGJyb3dzZXIgYXV0b21hdGljYWxseSBkZWNvZGVzIGl0IGZvciB5b3UhCiMrQkVHSU5fSFRNTAo8
YSBjbGFzcz0ic29tZS1vcmctc291cmNlIiBocmVmPSJkYXRhOnRleHQvcGxhaW47Y2hhcnNldD1V
Uy1BU0NJSTtiYXNlNjQsUENFdExTQjBaWE4wTFMwKyI+c291cmNlPC9hPgojK0VORF9IVE1MCgpT
bywgZHVyaW5nIHRoZSBibG9nIHB1Ymxpc2ggc3RlcCwgd2UganVzdCBuZWVkIHRvIGFkZCB0aGlz
IGxpdHRsZSBzdGVwIHRvIHRoZSBodG1sIGdlbmVyYXRpb24sIGFuZCBpdCB3aWxsIGJlIGluY2x1
ZGVkIGFzIGEgZGF0YSB1cmkuIEhlcmUgaXMgdGhlIGZ1bmN0aW9uIHRoYXQgZ2VuZXJhdGVzIHRo
ZSBkYXRhIHVyaSBmb3IgdXMsIGFuZCBleGFtcGxlIG9mIHVzaW5nIGl0LiBUaGUgZW5jb2RlZCBz
b3VyY2UgaXMgbm90IGF0IGFsbCBhdHRyYWN0aXZlIHRvIGxvb2sgYXQgaXQsIGJ1dCB5b3UgYWxt
b3N0IG5ldmVyIG5lZWQgdG8gbG9vayBhdCBpdCwgaXQgaXMgaW52aXNpYmxlIGluIHRoZSBicm93
c2VyLiBJbnRlcmVzdGluZ2x5LCBpZiB5b3UgY2xpY2sgb24gdGhlIGxpbmssIHlvdSB3aWxsIHNl
ZSB0aGUgb3JnIHNvdXJjZSByaWdodCBpbiB5b3VyIGJyb3dzZXIhCgojK0JFR0lOX1NSQyBlbWFj
cy1saXNwICA6cmVzdWx0cyBodG1sCihkZWZ1biBzb3VyY2UtZGF0YS11cmkgKHNvdXJjZSkKICAi
RW5jb2RlIHRoZSBzdHJpbmcgaW4gU09VUkNFIHRvIGEgZGF0YSB1cmkuIgogIChmb3JtYXQKICAg
IjxhIGNsYXNzPVwib3JnLXNvdXJjZVwiIGhyZWY9XCJkYXRhOnRleHQvcGxhaW47Y2hhcnNldD1V
Uy1BU0NJSTtiYXNlNjQsJXNcIj5zb3VyY2U8L2E+IgogICAoYmFzZTY0LWVuY29kZS1zdHJpbmcg
c291cmNlKSkpCgooc291cmNlLWRhdGEtdXJpIChidWZmZXItc3RyaW5nKSkKIytFTkRfU1JDCgoj
K1JFU1VMVFM6CiMrQkVHSU5fSFRNTAo8YSBjbGFzcz0ib3JnLXNvdXJjZSIgaHJlZj0iZGF0YTp0
ZXh0L3BsYWluO2NoYXJzZXQ9VVMtQVNDSUk7YmFzZTY0LEtpQkJibTkwYUdWeUlHRndjSEp2WVdO
b0lIUnZJR1Z0WW1Wa1pHbHVaeUJ2Y21jdGMyOTFjbU5sSUdsdUlHaDBiV3dLU1c0Z2RHaHAKY3lC
YlcyaDBkSEE2THk5cmFYUmphR2x1WjNKdmRYQXVZMmhsYldVdVkyMTFMbVZrZFM5aWJHOW5Mekl3
TVRVdk1EVXZNRGt2UVc0dApZV3gwWlhKdVlYUnBkbVV0WVhCd2NtOWhZMmd0ZEc4dGFXNWpiSFZr
YVc1bkxXOXlaeTF6YjNWeVkyVXRhVzR0WW14dlp5MXdiM04wCmN5OWRXM0J2YzNSZFhTQkpJR1Y0
WVcxcGJtVmtJR0VnZDJGNUlIUnZJR1Z0WW1Wa0lIUm9aU0J2Y21jdGMyOTFjbU5sSUdsdUlHRWcK
WTI5dGJXVnVkQ0JwYmlCMGFHVWdhSFJ0YkNCdlppQjBhR1VnY0c5emRDd2dZVzVrSUdSbGRtVnNi
M0JsWkNCaElISmxZWE52Ym1GaQpiSGtnWTI5dWRtVnVhV1Z1ZENCM1lYa2dkRzhnWlhoMGNtRmpk
Q0IwYUdVZ2MyOTFjbU5sSUdsdUlHVnRZV056TGlCUGJtVWdaRzkzCmJuTnBaR1VnYjJZZ2RHaGxJ
R0Z3Y0hKdllXTm9JSGRoY3lCMGFHVWdibVZsWkNCMGJ5QmxjMk5oY0dVZ1lYUWdiR1ZoYzNRZ2RH
aGwKSUdSaGMyaGxjeXdnWVc1a0lIUm9aVzRnZFc1bGMyTmhjR1VnZEdobGJTQnZiaUJsZUhSeVlX
TjBhVzl1TGlCSklHTmhiV1VnWVdOeQpiM056SUdGdWIzUm9aWElnYVdSbFlTd2dkMmhwWTJnZ2FY
TWdkRzhnY0hWMElIUm9aU0J2Y21jdGMyOTFjbU5sSUdsdUlHSmhjMlUyCk5DQmxibU52WkdWa0lH
WnZjbTBnYVc0Z1lTQmJXMmgwZEhBNkx5OWxiaTUzYVd0cGNHVmthV0V1YjNKbkwzZHBhMmt2UkdG
MFlWOVYKVWtsZmMyTm9aVzFsWFZ0a1lYUmhJSFZ5YVYxZExnb0tSbWx5YzNRZ2JHVjBJSFZ6SUhO
bFpTQjNhR0YwSUhSb1pTQmxibU52WkdsdQpaeUJ0WldGdWN6b0tDaU1yUWtWSFNVNWZVMUpESUdW
dFlXTnpMV3hwYzNBS0tHSmhjMlUyTkMxbGJtTnZaR1V0YzNSeWFXNW5JQ0k4CklTMHRJSFJsYzNR
dExUNGlLUW9qSzBWT1JGOVRVa01LSXl0U1JWTlZURlJUT2dvNklGQkRSWFJNVTBJd1dsaE9NRXhU
TUNzS0NrRnUKWkNCa1pXTnZaR2x1WnpvS0NpTXJRa1ZIU1U1ZlUxSkRJR1Z0WVdOekxXeHBjM0FL
S0dKaGMyVTJOQzFrWldOdlpHVXRjM1J5YVc1bgpJQ0pRUTBWMFRGTkNNRnBZVGpCTVV6QXJJaWtL
SXl0RlRrUmZVMUpEQ2dvaksxSkZVMVZNVkZNNkNqb2dQQ0V0TFNCMFpYTjBMUzArCkNncEJibVFn
ZEdocGN5QnBjeUJpWVhOcFkyRnNiSGtnYUc5M0lIUnZJRzFoYTJVZ1lTQmtZWFJoSUhWeWFTNGdW
MlVnWjJsMlpTQjAKYUdVZ2RYSnNJR2hsY21VZ1lTQmpiR0Z6Y3lCemJ5QjNaU0JqWVc0Z1ptbHVa
Q0JwZENCc1lYUmxjaTRLSXl0Q1JVZEpUbDlGV0VGTgpVRXhGQ2p4aElHTnNZWE56UFNKdmNtY3Rj
MjkxY21ObElpQm9jbVZtUFNKa1lYUmhPblJsZUhRdmNHeGhhVzQ3WTJoaGNuTmxkRDFWClV5MUJV
ME5KU1R0aVlYTmxOalFzVUVORmRFeFRRakJhV0U0d1RGTXdLeUkrYzI5MWNtTmxQQzloUGdvaksw
Vk9SRjlGV0VGTlVFeEYKQ2dwSVpYSmxJR2x6SUhSb1pTQmhZM1IxWVd3Z2FIUnRiQ0JtYjNJZ2RH
aGxJR0p5YjNkelpYSTZJQW9qSzBKRlIwbE9YMGhVVFV3SwpQR0VnWTJ4aGMzTTlJbTl5WnkxemIz
VnlZMlVpSUdoeVpXWTlJbVJoZEdFNmRHVjRkQzl3YkdGcGJqdGphR0Z5YzJWMFBWVlRMVUZUClEw
bEpPMkpoYzJVMk5DeFFRMFYwVEZOQ01GcFlUakJNVXpBcklqNXpiM1Z5WTJVOEwyRStDaU1yUlU1
RVgwaFVUVXdLQ2xOdkxDQmsKZFhKcGJtY2dkR2hsSUdKc2IyY2djSFZpYkdsemFDQnpkR1Z3TENC
M1pTQnFkWE4wSUc1bFpXUWdkRzhnWVdSa0lIUm9hWE1nYkdsMApkR3hsSUhOMFpYQWdkRzhnZEdo
bElHaDBiV3dnWjJWdVpYSmhkR2x2Yml3Z1lXNWtJR2wwSUhkcGJHd2dZbVVnYVc1amJIVmtaV1Fn
CllYTWdZU0JrWVhSaElIVnlhUzRnU0dWeVpTQnBjeUIwYUdVZ1puVnVZM1JwYjI0Z2RHaGhkQ0Ju
Wlc1bGNtRjBaWE1nZEdobElHUmgKZEdFZ2RYSnBJR1p2Y2lCMWN5d2dZVzVrSUdWNFlXMXdiR1Vn
YjJZZ2RYTnBibWNnYVhRNkNnb2pLMEpGUjBsT1gxTlNReUJsYldGagpjeTFzYVhOd0lDQTZjbVZ6
ZFd4MGN5Qm9kRzFzQ2loa1pXWjFiaUJ6YjNWeVkyVXRaR0YwWVMxMWNta2dLSE52ZFhKalpTa0tJ
Q0FpClJXNWpiMlJsSUhSb1pTQnpkSEpwYm1jZ2FXNGdVMDlWVWtORklIUnZJR0VnWkdGMFlTQjFj
bWt1SWdvZ0lDaG1iM0p0WVhRS0lDQWcKSWp4aElHTnNZWE56UFZ3aWIzSm5MWE52ZFhKalpWd2lJ
R2h5WldZOVhDSmtZWFJoT25SbGVIUXZjR3hoYVc0N1kyaGhjbk5sZEQxVgpVeTFCVTBOSlNUdGlZ
WE5sTmpRc0pYTmNJaUJrYjNkdWJHOWhaRDFjSW5OdmRYSmpaUzV2Y21kY0lqNXpiM1Z5WTJVOEwy
RStJaUFLCklDQWdLR0poYzJVMk5DMWxibU52WkdVdGMzUnlhVzVuSUhOdmRYSmpaU2twS1FvS0tI
TnZkWEpqWlMxa1lYUmhMWFZ5YVNBb1luVm0KWm1WeUxYTjBjbWx1WnlrcENpTXJSVTVFWDFOU1F3
b0tDZ29LQ2dvSyIgZG93bmxvYWQ9InNvdXJjZS5vcmciPnNvdXJjZTwvYT4KIytFTkRfSFRNTAoK
Tm93LCB3ZSBpbnRlZ3JhdGUgaXQgaW50byB0aGUgYmxvZ29maWxlIGZ1bmN0aW9uOgoKIytCRUdJ
Tl9TUkMgZW1hY3MtbGlzcAooZGVmdW4gYmYtZ2V0LXBvc3QtaHRtbCAoKQogICJSZXR1cm4gYSBz
dHJpbmcgY29udGFpbmluZyB0aGUgWUFNTCBoZWFkZXIsIHRoZSBwb3N0IGh0bWwsIG15CmNvcHly
aWdodCBsaW5lLCBhbmQgYSBsaW5rIHRvIHRoZSBvcmctc291cmNlIGNvZGUuIgogIChpbnRlcmFj
dGl2ZSkKICAobGV0ICgob3JnLXNvdXJjZSAoYnVmZmVyLXN0cmluZykpCgkodXJsLXRvLW9yZyAo
YmYtZ2V0LXVybC10by1vcmctc291cmNlKSkKCSh5YW1sIChiZi1nZXQtWUFNTC1oZWFkaW5nKSkK
CShib2R5IChiZi1nZXQtSFRNTCkpKQoKICAgICh3aXRoLXRlbXAtYnVmZmVyCiAgICAgIChpbnNl
cnQgeWFtbCkKICAgICAgKGluc2VydCBib2R5KQogICAgICAoaW5zZXJ0CiAgICAgICAoZm9ybWF0
ICI8cD5Db3B5cmlnaHQgKEMpICVzIGJ5IEpvaG4gS2l0Y2hpbi4gU2VlIHRoZSA8YSBocmVmPVwi
L2NvcHlpbmcuaHRtbFwiPkxpY2Vuc2U8L2E+IGZvciBpbmZvcm1hdGlvbiBhYm91dCBjb3B5aW5n
LjxwPiIKCSAgICAgICAoZm9ybWF0LXRpbWUtc3RyaW5nICIlWSIpKSkKICAgICAgKGluc2VydCAo
Zm9ybWF0ICI8cD48YSBocmVmPVwiJXNcIj5vcmctbW9kZSBzb3VyY2U8L2E+PHA+IgoJCSAgICAg
IHVybC10by1vcmcpKQogICAgICAoaW5zZXJ0IChmb3JtYXQgIjxwPk9yZy1tb2RlIHZlcnNpb24g
PSAlczwvcD4iIChvcmctdmVyc2lvbikpKQogICAgICA7OyB0aGlzIGlzIHRoZSBvbmx5IG5ldyBj
b2RlIHdlIG5lZWQgdG8gYWRkLgogICAgICAoaW5zZXJ0IChzb3VyY2UtZGF0YS11cmkgb3JnLXNv
dXJjZSkpCiAgICAgIDs7IHJldHVybiB2YWx1ZQogICAgICAoYnVmZmVyLXN0cmluZykpKSkKIytF
TkRfU1JDCgpOb3cgd2UgbmVlZCBhIG5ldyBhZGFwdGF0aW9uIG9mIHRoZSBncmFiLW9yZy1zb3Vy
Y2UgZnVuY3Rpb24uIFdlIHN0aWxsIG5lZWQgYSByZWdleHAgc2VhcmNoIHRvIGdldCB0aGUgc291
cmNlLCBhbmQgd2Ugc3RpbGwgbmVlZCB0byBkZWNvZGUgaXQuCgojK0JFR0lOX1NSQyBlbWFjcy1s
aXNwCihkZWZ1biBncmFiLW9yZy1zb3VyY2UgKHVybCkKICAiRXh0cmFjdCBvcmctc291cmNlIGZy
b20gVVJMIHRvIGEgYnVmZmVyIG5hbWVkICpncmFiLW9yZy1zb3VyY2UqLiIKICAoaW50ZXJhY3Rp
dmUgInNVUkw6ICIpCiAgKHN3aXRjaC10by1idWZmZXIgKGdldC1idWZmZXItY3JlYXRlICIqZ3Jh
Yi1vcmctc291cmNlKiIpKQogIChlcmFzZS1idWZmZXIpCiAgKG9yZy1tb2RlKQogIChpbnNlcnQK
ICAgKHdpdGgtY3VycmVudC1idWZmZXIKICAgICAgICh1cmwtcmV0cmlldmUtc3luY2hyb25vdXNs
eSB1cmwpCiAgICAgKGxldCAoc3RhcnQpCiAgICAgICAocmUtc2VhcmNoLWZvcndhcmQKCSI8YSBj
bGFzcz1cIm9yZy1zb3VyY2VcIiBocmVmPVwiZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9VVMtQVND
SUk7YmFzZTY0LFxcKFteXCJdKlxcKVxcXCI+IiBuaWwgdCkKICAgICAgIChiYXNlNjQtZGVjb2Rl
LXN0cmluZyAgKG1hdGNoLXN0cmluZyAxKSkpKSkpCiMrRU5EX1NSQwoKV2hhdCBlbHNlIGNvdWxk
IHdlIGRvIHdpdGggdGhpcz8gT25lIGlkZWEgd291bGQgYmUgdG8gZ2VuZXJhdGUgZGF0YSB1cmlz
IGZvciBlYWNoIGNvZGUgYmxvY2sgdGhhdCB5b3UgY291bGQgb3BlbiBpbiB5b3VyIGJyb3dzZXIu
IEZvciBleGFtcGxlLCBoZXJlIHdlIGdlbmVyYXRlIGEgbGlzdCBvZiBkYXRhIHVyaXMgZm9yIGVh
Y2ggY29kZSBibG9jayBpbiB0aGUgYnVmZmVyLiBXZSBkb24ndCB0YWtlIGNhcmUgdG8gbGFiZWwg
dGhlbSBvciBtYWtlIGl0IGVhc3kgdG8gc2VlIHdoYXQgdGhleSBhcmUsIGJ1dCBpZiB5b3UgY2xp
Y2sgb24gb25lLCB5b3Ugc2hvdWxkIHNlZSBhIHBsYWluIHRleHQgdmVyc2lvbiBvZiB0aGUgYmxv
Y2suIElmIHRoaXMgaXMgZG9uZSBhIGxvdCwgaXQgbWlnaHQgZXZlbiBtYWtlIHNlbnNlIHRvIGNo
YW5nZSB0aGUgbWltZSB0eXBlIHRvIGRvd25sb2FkIHRoZSBjb2RlIGluIHNvbWUgbmF0aXZlIGFw
cC4KCiMrQkVHSU5fU1JDIGVtYWNzLWxpc3AgOnJlc3VsdHMgaHRtbAoob3JnLWVsZW1lbnQtbWFw
IChvcmctZWxlbWVudC1wYXJzZS1idWZmZXIpICdzcmMtYmxvY2sKICAobGFtYmRhIChzcmMtYmxv
Y2spCiAgICAoc291cmNlLWRhdGEtdXJpIChvcmctZWxlbWVudC1wcm9wZXJ0eSA6dmFsdWUgc3Jj
LWJsb2NrKSkpKQojK0VORF9TUkMKCiMrUkVTVUxUUzoKIytCRUdJTl9IVE1MCig8YSBjbGFzcz0i
b3JnLXNvdXJjZSIgaHJlZj0iZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9VVMtQVNDSUk7YmFzZTY0
LEtHSmhjMlUyTkMxbGJtTnZaR1V0YzNSeWFXNW5JQ0k4SVMwdElIUmxjM1F0TFQ0aUtRbz0iPnNv
dXJjZTwvYT4gPGEgY2xhc3M9Im9yZy1zb3VyY2UiIGhyZWY9ImRhdGE6dGV4dC9wbGFpbjtjaGFy
c2V0PVVTLUFTQ0lJO2Jhc2U2NCxLR0poYzJVMk5DMWtaV052WkdVdGMzUnlhVzVuSUNKUVEwVjBU
Rk5DTUZwWVRqQk1VekFySWlrSyI+c291cmNlPC9hPiA8YSBjbGFzcz0ib3JnLXNvdXJjZSIgaHJl
Zj0iZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9VVMtQVNDSUk7YmFzZTY0LEtHUmxablZ1SUhOdmRY
SmpaUzFrWVhSaExYVnlhU0FvYzI5MWNtTmxLUW9nSUNKRmJtTnZaR1VnZEdobElITjBjbWx1WnlC
cGJpQlQKVDFWU1EwVWdkRzhnWVNCa1lYUmhJSFZ5YVM0aUNpQWdLR1p2Y20xaGRBb2dJQ0FpUEdF
Z1kyeGhjM005WENKdmNtY3RjMjkxY21ObApYQ0lnYUhKbFpqMWNJbVJoZEdFNmRHVjRkQzl3YkdG
cGJqdGphR0Z5YzJWMFBWVlRMVUZUUTBsSk8ySmhjMlUyTkN3bGMxd2lQbk52CmRYSmpaVHd2WVQ0
aUNpQWdJQ2hpWVhObE5qUXRaVzVqYjJSbExYTjBjbWx1WnlCemIzVnlZMlVwS1NrS0NpaHpiM1Z5
WTJVdFpHRjAKWVMxMWNta2dLR0oxWm1abGNpMXpkSEpwYm1jcEtRbz0iPnNvdXJjZTwvYT4gPGEg
Y2xhc3M9Im9yZy1zb3VyY2UiIGhyZWY9ImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PVVTLUFTQ0lJ
O2Jhc2U2NCxLR1JsWm5WdUlHSm1MV2RsZEMxd2IzTjBMV2gwYld3Z0tDa0tJQ0FpVW1WMGRYSnVJ
R0VnYzNSeWFXNW5JR052Ym5SaGFXNXBibWNnCmRHaGxJRmxCVFV3Z2FHVmhaR1Z5TENCMGFHVWdj
Rzl6ZENCb2RHMXNMQ0J0ZVFwamIzQjVjbWxuYUhRZ2JHbHVaU3dnWVc1a0lHRWcKYkdsdWF5QjBi
eUIwYUdVZ2IzSm5MWE52ZFhKalpTQmpiMlJsTGlJS0lDQW9hVzUwWlhKaFkzUnBkbVVwQ2lBZ0tH
eGxkQ0FvS0c5eQpaeTF6YjNWeVkyVWdLR0oxWm1abGNpMXpkSEpwYm1jcEtRb0pLSFZ5YkMxMGJ5
MXZjbWNnS0dKbUxXZGxkQzExY213dGRHOHRiM0puCkxYTnZkWEpqWlNrcENna29lV0Z0YkNBb1lt
WXRaMlYwTFZsQlRVd3RhR1ZoWkdsdVp5a3BDZ2tvWW05a2VTQW9ZbVl0WjJWMExVaFUKVFV3cEtT
a0tDaUFnSUNBb2QybDBhQzEwWlcxd0xXSjFabVpsY2dvZ0lDQWdJQ0FvYVc1elpYSjBJSGxoYld3
cENpQWdJQ0FnSUNocApibk5sY25RZ1ltOWtlU2tLSUNBZ0lDQWdLR2x1YzJWeWRBb2dJQ0FnSUNB
Z0tHWnZjbTFoZENBaVBIQStRMjl3ZVhKcFoyaDBJQ2hECktTQWxjeUJpZVNCS2IyaHVJRXRwZEdO
b2FXNHVJRk5sWlNCMGFHVWdQR0VnYUhKbFpqMWNJaTlqYjNCNWFXNW5MbWgwYld4Y0lqNU0KYVdO
bGJuTmxQQzloUGlCbWIzSWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdZMjl3ZVdsdVp5NDhjRDRp
Q2drZ0lDQWdJQ0FnS0dadgpjbTFoZEMxMGFXMWxMWE4wY21sdVp5QWlKVmtpS1NrcENpQWdJQ0Fn
SUNocGJuTmxjblFnS0dadmNtMWhkQ0FpUEhBK1BHRWdhSEpsClpqMWNJaVZ6WENJK2IzSm5MVzF2
WkdVZ2MyOTFjbU5sUEM5aFBqeHdQaUlLQ1FrZ0lDQWdJQ0IxY213dGRHOHRiM0puS1NrS0lDQWcK
SUNBZ0tHbHVjMlZ5ZENBb1ptOXliV0YwSUNJOGNENVBjbWN0Ylc5a1pTQjJaWEp6YVc5dUlEMGdK
WE04TDNBK0lpQW9iM0puTFhabApjbk5wYjI0cEtTa0tJQ0FnSUNBZ096c2dkR2hwY3lCcGN5QjBh
R1VnYjI1c2VTQnVaWGNnWTI5a1pTQjNaU0J1WldWa0lIUnZJR0ZrClpDNEtJQ0FnSUNBZ0tHbHVj
MlZ5ZENBb2MyOTFjbU5sTFdSaGRHRXRkWEpwSUc5eVp5MXpiM1Z5WTJVcEtRb2dJQ0FnSUNBN095
QnkKWlhSMWNtNGdkbUZzZFdVS0lDQWdJQ0FnS0dKMVptWmxjaTF6ZEhKcGJtY3BLU2twQ2c9PSI+
c291cmNlPC9hPiA8YSBjbGFzcz0ib3JnLXNvdXJjZSIgaHJlZj0iZGF0YTp0ZXh0L3BsYWluO2No
YXJzZXQ9VVMtQVNDSUk7YmFzZTY0LEtHUmxablZ1SUdkeVlXSXRiM0puTFhOdmRYSmpaU0FvZFhK
c0tRb2dJQ0pGZUhSeVlXTjBJRzl5WnkxemIzVnlZMlVnWm5KdmJTQlYKVWt3Z2RHOGdZU0JpZFda
bVpYSWdibUZ0WldRZ0ttZHlZV0l0YjNKbkxYTnZkWEpqWlNvdUlnb2dJQ2hwYm5SbGNtRmpkR2wy
WlNBaQpjMVZTVERvZ0lpa0tJQ0FvYzNkcGRHTm9MWFJ2TFdKMVptWmxjaUFvWjJWMExXSjFabVps
Y2kxamNtVmhkR1VnSWlwbmNtRmlMVzl5Clp5MXpiM1Z5WTJVcUlpa3BDaUFnS0dWeVlYTmxMV0ox
Wm1abGNpa0tJQ0FvYjNKbkxXMXZaR1VwQ2lBZ0tHbHVjMlZ5ZEFvZ0lDQW8KZDJsMGFDMWpkWEp5
Wlc1MExXSjFabVpsY2dvZ0lDQWdJQ0FnS0hWeWJDMXlaWFJ5YVdWMlpTMXplVzVqYUhKdmJtOTFj
Mng1SUhWeQpiQ2tLSUNBZ0lDQW9iR1YwSUNoemRHRnlkQ2tLSUNBZ0lDQWdJQ2h5WlMxelpXRnlZ
Mmd0Wm05eWQyRnlaQW9KSWp4aElHTnNZWE56ClBWd2liM0puTFhOdmRYSmpaVndpSUdoeVpXWTlY
Q0prWVhSaE9uUmxlSFF2Y0d4aGFXNDdZMmhoY25ObGREMVZVeTFCVTBOSlNUdGkKWVhObE5qUXNY
RndvVzE1Y0lsMHFYRndwWEZ4Y0lqNGlJRzVwYkNCMEtRb2dJQ0FnSUNBZ0tHSmhjMlUyTkMxa1pX
TnZaR1V0YzNSeQphVzVuSUNBb2JXRjBZMmd0YzNSeWFXNW5JREVwS1NrcEtTa0siPnNvdXJjZTwv
YT4gPGEgY2xhc3M9Im9yZy1zb3VyY2UiIGhyZWY9ImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PVVT
LUFTQ0lJO2Jhc2U2NCxLRzl5WnkxbGJHVnRaVzUwTFcxaGNDQW9iM0puTFdWc1pXMWxiblF0Y0dG
eWMyVXRZblZtWm1WeUtTQW5jM0pqTFdKc2IyTnJDaUFnCktHeGhiV0prWVNBb2MzSmpMV0pzYjJO
cktRb2dJQ0FnS0hOdmRYSmpaUzFrWVhSaExYVnlhU0FvYjNKbkxXVnNaVzFsYm5RdGNISnYKY0dW
eWRIa2dPblpoYkhWbElITnlZeTFpYkc5amF5a3BLU2tLIj5zb3VyY2U8L2E+KQojK0VORF9IVE1M
CgoKSSBhbSBub3Qgc3VyZSBpZiB0aGlzIGlzIGJldHRlciBvciB3b3JzZSB0aGFuIHRoZSBvdGhl
ciBhcHByb2FjaC4gSSBoYXZlIG5vdCB0ZXN0ZWQgaXQgdmVyeSB0aG9yb3VnaGx5LCBidXQgaXQg
c2VlbXMgbGlrZSBpdCBzaG91bGQgd29yayBwcmV0dHkgZ2VuZXJhbGx5LiBJIGltYWdpbmUgeW91
IGNvdWxkIGFsc28gZW1iZWQgb3RoZXIga2luZHMgb2YgZmlsZXMgaW4gdGhlIGh0bWwsIGlmIGZv
ciBzb21lIHJlYXNvbiB5b3UgZGlkIG5vdCB3YW50IHRvIHB1dCB0aGUgZmlsZXMgb24geW91ciBz
ZXJ2ZXIuIE92ZXJhbGwgdGhpcyBzZWVtcyB0byBsYWNrIHNvbWUgZWxlZ2FuY2UgaW4gc2VhcmNo
aW5nIGZvciBkYXRhLCBlLmcuIGxpa2UgW1todHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Vt
YmVkZGVkX1JERl1bUkRGXV0gb3IgW1todHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JERmFd
W1JERmFdXSBpcyBzdXBwb3NlZCB0byBlbmFibGUsIGJ1dCBpdCBtaWdodCBiZSBhIHN0ZXAgaW4g
dGhhdCBkaXJlY3Rpb24sIHVzaW5nIG9yZy1tb2RlIGFuZCBFbWFjcyBhcyB0aGUgZWRpdG9yLgoK">source</a>]]></content:encoded>
    </item>
    <item>
      <title>An alternative approach to including org-source in blog posts</title>
      <link>http://jkitchin.github.io/blog/2015/05/09/An-alternative-approach-to-including-org-source-in-blog-posts</link>
      <pubDate>Sat, 09 May 2015 13:50:18 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">4oTKb2dOfLhDk8IZh5DMGmhQuZ8=</guid>
      <description>An alternative approach to including org-source in blog posts</description>
      <content:encoded><![CDATA[


<p>
When you publish a Matlab m-file to HTML, Matlab includes the m-file source as an html comment in the output. They also provide a nice function called grabcode that will take a url, and open the source code in the editor. Today, we try a similar approach for org-mode.
</p>

<p>
This post is not totally self-contained. I have my own emacs-lisp module that converts org-mode to blogofile posts, and so far I have not made it broadly available. This is also a super exploratory idea, so I am just going to show the changes I need to make to my setup to get to the evaluation of the idea.
</p>

<p>
The idea is pretty simple, we just insert the current buffer string into an HTML comment. I just modify the bf-get-post-html function lightly to do that. This is a somewhat pathological example since there are html comments in the post! So, we will encode all the dashes to get around that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">browse-url</span>)
(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">bf-get-post-html</span> ()
  <span style="color: #036A07;">"Return a string containing the YAML header, the post html, my</span>
<span style="color: #036A07;">copyright line, and a link to the org-source code."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((org-source (buffer-string))
        (url-to-org (bf-get-url-to-org-source))
        (yaml (bf-get-YAML-heading))
        (body (bf-get-HTML)))

    (<span style="color: #0000FF;">with-temp-buffer</span>
      (insert yaml)
      (insert body)
      (insert
       (format <span style="color: #008000;">"&lt;p&gt;Copyright (C) %s by John Kitchin. See the &lt;a href=\"/copying.html\"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;"</span>
               (format-time-string <span style="color: #008000;">"%Y"</span>)))
      (insert (format <span style="color: #008000;">"&lt;p&gt;&lt;a href=\"%s\"&gt;org-mode source&lt;/a&gt;&lt;p&gt;"</span>
                      url-to-org))
      (insert (format <span style="color: #008000;">"&lt;p&gt;Org-mode version = %s&lt;/p&gt;"</span> (org-version)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is the only new code we need to add.</span>
      (insert (format <span style="color: #008000;">"</span>
<span style="color: #008000;">&lt;!--</span>
<span style="color: #008000;">  ##### SOURCE BEGIN #####</span>
<span style="color: #008000;">%s</span>
<span style="color: #008000;">##### SOURCE END #####</span>
<span style="color: #008000;">--&gt;"</span> (browse-url-url-encode-chars org-source <span style="color: #008000;">"[-]"</span>)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return value</span>
      (buffer-string))))
</pre>
</div>

<p>
By itself, that has limited value to me. So, let's also create a grab-org-source function to get the embedded source and open it in a buffer. This might be a naive approach, we just use a regexp to find the source boundaries and open it in a new buffer. We have to unescape the dashes, which appear as %2D in the comments. Here is our function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">grab-org-source</span> (url)
  <span style="color: #036A07;">"Extract org-source from URL to a buffer named *grab-org-source*."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"sURL: "</span>)
  (switch-to-buffer (get-buffer-create <span style="color: #008000;">"*grab-org-source*"</span>))
  (erase-buffer)
  (org-mode)
  (insert
   (<span style="color: #0000FF;">with-current-buffer</span>
       (url-retrieve-synchronously url)
     (<span style="color: #0000FF;">let</span> (start)
       (re-search-forward
        <span style="color: #008000;">"</span>
<span style="color: #008000;">&lt;!--</span>
<span style="color: #008000;">  ##### SOURCE BEGIN #####</span>
<span style="color: #008000;">"</span> nil t)
       (<span style="color: #0000FF;">setq</span> start (point))
       (re-search-forward <span style="color: #008000;">"##### SOURCE END #####</span>
<span style="color: #008000;">--&gt;"</span> nil t)
       (buffer-substring start (match-beginning 0)))))
  (goto-char (point-min))
  (<span style="color: #0000FF;">while</span> (search-forward <span style="color: #008000;">"%2D"</span> nil t)
    (replace-match <span style="color: #008000;">"-"</span>))
  (goto-char (point-min)))
</pre>
</div>

<p>
This concludes my basic proof of concept. I think there is a general escaping challenge in this approach, because it isn't clear if you can put really arbitrary stuff in an html comment, e.g. you cannot put &#x2013;&gt;! I am going to try incorporating this into my posts and see what other issues come up in the future.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/09/An-alternative-approach-to-including-org-source-in-blog-posts.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>
<!--
  ##### SOURCE BEGIN #####
* DONE An alternative approach to including org%2Dsource in blog posts
  CLOSED: [2015%2D05%2D09 Sat 13:57]
  :PROPERTIES:
  :categories: orgmode
  :date:     2015/05/09 13:50:18
  :updated:  2015/05/09 14:58:24
  :END:
When you publish a Matlab m%2Dfile to HTML, Matlab includes the m%2Dfile source as an html comment in the output. They also provide a nice function called grabcode that will take a url, and open the source code in the editor. Today, we try a similar approach for org%2Dmode.

This post is not totally self%2Dcontained. I have my own emacs%2Dlisp module that converts org%2Dmode to blogofile posts, and so far I have not made it broadly available. This is also a super exploratory idea, so I am just going to show the changes I need to make to my setup to get to the evaluation of the idea.

The idea is pretty simple, we just insert the current buffer string into an HTML comment. I just modify the bf%2Dget%2Dpost%2Dhtml function lightly to do that. This is a somewhat pathological example since there are html comments in the post! So, we will encode all the dashes to get around that.

#+BEGIN_SRC emacs%2Dlisp
(require 'browse%2Durl)
(defun bf%2Dget%2Dpost%2Dhtml ()
  "Return a string containing the YAML header, the post html, my
copyright line, and a link to the org%2Dsource code."
  (interactive)
  (let ((org%2Dsource (buffer%2Dstring))
	(url%2Dto%2Dorg (bf%2Dget%2Durl%2Dto%2Dorg%2Dsource))
	(yaml (bf%2Dget%2DYAML%2Dheading))
	(body (bf%2Dget%2DHTML)))

    (with%2Dtemp%2Dbuffer
      (insert yaml)
      (insert body)
      (insert
       (format "<p>Copyright (C) %s by John Kitchin. See the <a href=\"/copying.html\">License</a> for information about copying.<p>"
	       (format%2Dtime%2Dstring "%Y")))
      (insert (format "<p><a href=\"%s\">org%2Dmode source</a><p>"
		      url%2Dto%2Dorg))
      (insert (format "<p>Org%2Dmode version = %s</p>" (org%2Dversion)))
      ;; this is the only new code we need to add.
      (insert (format "
<!%2D%2D
  ##### SOURCE BEGIN #####
%s
##### SOURCE END #####
%2D%2D>" (browse%2Durl%2Durl%2Dencode%2Dchars org%2Dsource "[%2D]")))
      ;; return value
      (buffer%2Dstring))))
#+END_SRC

By itself, that has limited value to me. So, let's also create a grab%2Dorg%2Dsource function to get the embedded source and open it in a buffer. This might be a naive approach, we just use a regexp to find the source boundaries and open it in a new buffer. We have to unescape the dashes, which appear as %2D in the comments. Here is our function.

#+BEGIN_SRC emacs%2Dlisp
(defun grab%2Dorg%2Dsource (url)
  "Extract org%2Dsource from URL to a buffer named *grab%2Dorg%2Dsource*."
  (interactive "sURL: ")
  (switch%2Dto%2Dbuffer (get%2Dbuffer%2Dcreate "*grab%2Dorg%2Dsource*"))
  (erase%2Dbuffer)
  (org%2Dmode)
  (insert
   (with%2Dcurrent%2Dbuffer
       (url%2Dretrieve%2Dsynchronously url)
     (let (start)
       (re%2Dsearch%2Dforward
	"
<!%2D%2D
  ##### SOURCE BEGIN #####
" nil t)
       (setq start (point))
       (re%2Dsearch%2Dforward "##### SOURCE END #####
%2D%2D>" nil t)
       (buffer%2Dsubstring start (match%2Dbeginning 0)))))
  (goto%2Dchar (point%2Dmin))
  (while (search%2Dforward "%2D" nil t)
    (replace%2Dmatch "%2D"))
  (goto%2Dchar (point%2Dmin)))
#+END_SRC

This concludes my basic proof of concept. I think there is a general escaping challenge in this approach, because it isn't clear if you can put really arbitrary stuff in an html comment, e.g. you cannot put %2D%2D>! I am going to try incorporating this into my posts and see what other issues come up in the future.

##### SOURCE END #####
-->]]></content:encoded>
    </item>
    <item>
      <title>New publication in J. Phys. Chem. C</title>
      <link>http://jkitchin.github.io/blog/2015/05/07/New-publication-in-J-Phys-Chem-C</link>
      <pubDate>Thu, 07 May 2015 15:07:17 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publication]]></category>
      <guid isPermaLink="false">jCT9BEZTkZSXQqiNrOlAhrJV4HI=</guid>
      <description>New publication in J. Phys. Chem. C</description>
      <content:encoded><![CDATA[


<p>
In this paper we show that the electrolyte can  modify the reactivity of nickel hydroxide based electrodes for electrochemical water oxidation. There are two effects that are important: 1) Fe-impurities, and 2) the identify of the electrolyte cation. Fe-impurities are known to promote water oxidation. We found that a LiOH electrolyte can <i>suppress</i> the oxygen evolution reaction, which is also known from the battery literature. KOH and CsOH are the best electrolytes for the OER on nickel hydroxide based electrodes.
</p>

<p>
"Alkaline Electrolyte and Fe Impurity Effects on the Performance and Active-phase Structure of NiOOH Thin Films for OER Catalysis Applications"
</p>

<p>
<a href="http://pubs.acs.org/doi/abs/10.1021/acs.jpcc.5b02458">http://pubs.acs.org/doi/abs/10.1021/acs.jpcc.5b02458</a> 
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">michael-2015-alkal-elect</span>,
  <span style="color: #BA36A5;">author</span> =       {Michael, John and Demeter, Ethan L and Illes, Steven M. and
                  Fan, Qingqi and Boes, Jacob R. and Kitchin, John R.},
  <span style="color: #BA36A5;">title</span> =        {Alkaline Electrolyte and Fe Impurity Effects on the
                  Performance and Active-Phase Structure of NiOOH Thin Films for
                  OER Catalysis Applications},
  <span style="color: #BA36A5;">journal</span> =      {The Journal of Physical Chemistry C},
  <span style="color: #BA36A5;">volume</span> =       0,
  <span style="color: #BA36A5;">number</span> =       {ja},
  <span style="color: #BA36A5;">pages</span> =        {null},
  <span style="color: #BA36A5;">year</span> =         2015,
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1021/acs.jpcc.5b02458</span>},
  <span style="color: #BA36A5;">url</span> =          {<span style="color: #006DAF; text-decoration: underline;"> http://dx.doi.org/10.1021/acs.jpcc.5b02458 </span>},
  <span style="color: #BA36A5;">eprint</span> =       { http://dx.doi.org/10.1021/acs.jpcc.5b02458 },
}
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/05/07/New-publication-in-J.-Phys.-Chem.-C.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>New publication in ACS Catalysis on composition dependent alloy electronic structure</title>
      <link>http://jkitchin.github.io/blog/2015/04/24/New-publication-in-ACS-Catalysis-on-composition-dependent-alloy-electronic-structure</link>
      <pubDate>Fri, 24 Apr 2015 15:41:03 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publication]]></category>
      <guid isPermaLink="false">_jXhH5uhVmsPxoLoOiHGr50uwAc=</guid>
      <description>New publication in ACS Catalysis on composition dependent alloy electronic structure</description>
      <content:encoded><![CDATA[


<p>
In this collaborative paper we map out the electronic structure of a Cu-Pd alloy across composition space, and then correlate that electronic structure with the reactivity of the alloy. We experimentally measure the average energy of the filled valence band, and show it is similar to the calculated d-band center. We then show how those measured electronic structure properties correlate with the H<sub>2</sub>\D<sub>2</sub> exchange kinetics. The combination of experiments on composition spread alloy films (CSAF) and theory provides an integrated understanding of alloy reactivity in this system.
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">gumuslu-2015-correl-elect</span>,
  <span style="color: #BA36A5;">author</span> =       {G. Gumuslu and P. Kondratyuk and J. R. Boes and B. Morreale
                  and J. B. Miller and J. R. Kitchin and A. J. Gellman},
  <span style="color: #BA36A5;">title</span> =        {Correlation of Electronic Structure With Catalytic Activity:
                  \ce{H2}-\ce{D2} Exchange Across \ce{Cu_{x}Pd_{1-x} Composition
                  Space},
  <span style="color: #BA36A5;">journal</span> =      {ACS Catalysis},
  <span style="color: #BA36A5;">volume</span> =       {5},
  <span style="color: #BA36A5;">pages</span> =        {3137-3147},
  <span style="color: #BA36A5;">year</span> =         2015,
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1021/cs501586t</span>},
  <span style="color: #BA36A5;">url</span> =          {<span style="color: #006DAF; text-decoration: underline;">http://dx.doi.org/10.1021/cs501586t</span>},
  <span style="color: #BA36A5;">date_added</span> =   {Fri Apr 24 14:47:29 2015},
}
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/24/New-publication-in-ACS-Catalysis-on-composition-dependent-alloy-electronic-structure.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Commenting in org-files</title>
      <link>http://jkitchin.github.io/blog/2015/04/24/Commenting-in-org-files</link>
      <pubDate>Fri, 24 Apr 2015 12:41:39 EDT</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">xenWQ6jV9IfhXC3QhHsyZY1hm_I=</guid>
      <description>Commenting in org-files</description>
      <content:encoded><![CDATA[


<p>
There was an interesting discussion on the org-mode mail list about putting comments in org files. Eric Fraga suggested using inline tasks, and customizing the export of them so they make a footnote, or use the todonotes package (suggested by Marcin Borkowski). Here is Eric's export. A big advantage of this is integration with the Agenda, so you can see what there is todo in your document.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">  (<span style="color: #0000FF;">setq</span> org-inlinetask-export-templates
        '((latex <span style="color: #008000;">"%s\\footnote{%s\\\\ %s}\\marginpar{\\fbox{\\thefootnote}}"</span>
                 '((<span style="color: #0000FF;">unless</span>
                       (eq todo <span style="color: #008000;">""</span>)
                     (format <span style="color: #008000;">"\\fbox{\\textsc{%s%s}}"</span> todo priority))
                   heading content))))
</pre>
</div>

<p>
Eric Abrahamsen suggested an idea to use a link syntax. I like the idea a lot, so here we develop some ideas. A link has two parts, the path, and description. A simple comment would just be a simple link, probably in double square brackets so you can have spaces in your comment. <font color="red"><abbr title="Why do you think there are only two parts" color="red">COMMENT</abbr></font>  It might be feasible to use <font color="red"><abbr title="Why do you quote mark?" color="red">COMMENT</abbr></font> the description to "mark text" that the comment refers to. The remaining question is what functionality should our link have when you click on it, and how to export it. For functionality, a click will show the comment in the minibuffer and offer to delete it. For export, for now we will make it export with todonotes in LaTeX, and as a red COMMENT with a tooltip in html. To use this, you need to have the LaTeX package todonotes included in your org file.
</p>
<p>
Here is our comment link.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #008000;">"comment"</span>
 (<span style="color: #0000FF;">lambda</span> (linkstring)
   (<span style="color: #0000FF;">let</span> ((elm (org-element-context))
         (use-dialog-box nil))
     (<span style="color: #0000FF;">when</span> (y-or-n-p <span style="color: #008000;">"Delete comment? "</span>)
       (<span style="color: #0000FF;">setf</span> (buffer-substring
              (org-element-property <span style="color: #006FE0;">:begin</span> elm)
              (org-element-property <span style="color: #006FE0;">:end</span> elm))
             (<span style="color: #0000FF;">cond</span>
              ((org-element-property <span style="color: #006FE0;">:contents-begin</span> elm)
               (buffer-substring
                (org-element-property <span style="color: #006FE0;">:contents-begin</span> elm)
                (org-element-property <span style="color: #006FE0;">:contents-end</span> elm)))
              (t
               <span style="color: #008000;">""</span>))))))
 (<span style="color: #0000FF;">lambda</span> (keyword desc format)
   (<span style="color: #0000FF;">cond</span>
    ((eq format 'html)
     (format <span style="color: #008000;">"&lt;font color=\"red\"&gt;&lt;abbr title=\"%s\" color=\"red\"&gt;COMMENT&lt;/abbr&gt;&lt;/font&gt; %s"</span> keyword (<span style="color: #0000FF;">or</span> desc <span style="color: #008000;">""</span>)))
    ((eq format 'latex)
     (format <span style="color: #008000;">"\\todo{%s}{%s}"</span> keyword (<span style="color: #0000FF;">or</span> desc <span style="color: #008000;">""</span>))))))
</pre>
</div>


<p>
It would be convenient to have a quick function for adding a comment to some highlighted text.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">add-comment</span> (begin end)
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"r"</span>)
  (<span style="color: #0000FF;">if</span> (region-active-p)
      (<span style="color: #0000FF;">let</span> ((selected-text (buffer-substring begin end)))
        (<span style="color: #0000FF;">setf</span> (buffer-substring begin end)
              (format <span style="color: #008000;">"[[comment:%s][%s]]"</span>
                      (read-input <span style="color: #008000;">"Comment: "</span>) selected-text)))
  (insert (format  <span style="color: #008000;">"[[comment:%s]]"</span> (read-input <span style="color: #008000;">"Comment: "</span>)))))
</pre>
</div>

<p>
Test 1: <font color="red"><abbr title="test comment" color="red">COMMENT</abbr></font> 
</p>

<p>
<font color="red"><abbr title="You seem to have forgotten Test 2" color="red">COMMENT</abbr></font> Test 2
</p>

<p>
That is it. I could see a few other enhancements that might be very useful, e.g. a command to list all the comments, remove all the comments, etc&#x2026; I am pretty satisfied with this for now though.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/24/Commenting-in-org-files.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>New publication in J. Chem. Physics on calculating oxide properties with DFT+U</title>
      <link>http://jkitchin.github.io/blog/2015/04/08/New-publication-in-J-Chem-Physics-on-calculating-oxide-properties-with-DFT+U</link>
      <pubDate>Wed, 08 Apr 2015 11:18:31 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publication]]></category>
      <guid isPermaLink="false">8HaKL81Ah_8zAxfHS_Qp0ilNQt4=</guid>
      <description>New publication in J. Chem. Physics on calculating oxide properties with DFT+U</description>
      <content:encoded><![CDATA[



<p>
In this paper we demonstrate a novel method to use linear response DFT+U in a thermodynamic cycle to more accurately calculate metal oxide properties such as band gaps and reaction energies. This was a collaborative paper with ExxonMobil. Congratulations Zhongnan!
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">xu-2015-accur-u</span>,
  <span style="color: #BA36A5;">author</span> =       "Xu, Zhongnan and Joshi, Yogesh V. and Raman, Sumathy and
                  Kitchin, John R.",
  <span style="color: #BA36A5;">title</span> =        {Accurate Electronic and Chemical Properties of 3d Transition
                  Metal Oxides Using a Calculated Linear Response U and a DFT +
                  U(V) Method},
  <span style="color: #BA36A5;">journal</span> =      "The Journal of Chemical Physics",
  <span style="color: #BA36A5;">volume</span> =       142,
  <span style="color: #BA36A5;">number</span> =       14,
  <span style="color: #BA36A5;">pages</span> =        144701,
  <span style="color: #BA36A5;">year</span> =         2015,
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1063/1.4916823</span>},
  <span style="color: #BA36A5;">url</span> =
                  "http://scitation.aip.org/content/aip/journal/jcp/142/14/10.1063/1.4916823",
  <span style="color: #BA36A5;">eid</span> =          144701,
}
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/08/New-publication-in-J.-Chem.-Physics-on-calculating-oxide-properties-with-DFT+U.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Using the Scopus api with xml output</title>
      <link>http://jkitchin.github.io/blog/2015/04/06/Using-the-Scopus-api-with-xml-output</link>
      <pubDate>Mon, 06 Apr 2015 09:35:57 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[xml]]></category>
      <category><![CDATA[scopus]]></category>
      <guid isPermaLink="false">TYCDpg51_JvdviVCWgfVx6rN9Aw=</guid>
      <description>Using the Scopus api with xml output</description>
      <content:encoded><![CDATA[


<p>
According to <a href="http://api.elsevier.com/documentation/AbstractRetrievalAPI.wadl">http://api.elsevier.com/documentation/AbstractRetrievalAPI.wadl</a> , the native form of the Scopus abstract document is xml, and the full abstract cannot always be represented  as json. So&#x2026; I am going to just bite the bullet and learn to deal with the xml. This is a companion post to <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/04/04/Making-highly-linked-bibliographies-from-the-Scopus-API/">http://kitchingroup.cheme.cmu.edu/blog/2015/04/04/Making-highly-linked-bibliographies-from-the-Scopus-API/</a> . Most of the code in this post gets tangled out to scopus_xml.py. I know it is not totally robust yet, but I have been using it for a lot of analysis, and it works pretty well so far.
</p>

<p>
This is another long post, with code that probably runs off screen. You can see the end result of what we do in this post here:  <a href="http://kitchingroup.cheme.cmu.edu/publications.html">http://kitchingroup.cheme.cmu.edu/publications.html</a> .
</p>


<p>
We start with a general function to return an xml elementtree. We build in some caching to avoid downloading things we already have; this is slow, and there are limits on how many times you can download.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">import</span> xml.etree.ElementTree <span style="color: #0000FF;">as</span> ET

<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_abstract_info</span>(EID, refresh=<span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'Get and save the json data for EID.'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">base</span> = <span style="color: #008000;">'scopus-xml/get_abstract_info'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> os.path.exists(base):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.makedirs(base)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">fname</span> = <span style="color: #008000;">'{0}/{1}'</span>.<span style="color: #006FE0;">format</span>(base, EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> os.path.exists(fname) <span style="color: #0000FF;">and</span> <span style="color: #0000FF;">not</span> refresh:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> ET.fromstring(f.read())

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Otherwise retrieve and save results</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">url</span> = (<span style="color: #008000;">"http://api.elsevier.com/content/abstract/eid/"</span> + EID + <span style="color: #008000;">'?view=META_ABS'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">resp</span> = requests.get(url,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/xml'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = ET.fromstring(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> results
</pre>
</div>

<p>
Next, we do some introspection to see what we have.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">results = get_abstract_info('2-s2.0-84896759135')</span>
<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">results = get_abstract_info('2-s2.0-84924911828')</span>
<span style="color: #BA36A5;">results</span> = get_abstract_info(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
<span style="color: #0000FF;">for</span> el <span style="color: #0000FF;">in</span> results:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> el.tag
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> el1 <span style="color: #0000FF;">in</span> el:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">'  --&gt;'</span>,el1.tag
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>
</pre>
</div>

{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata
  --> {http://prismstandard.org/namespaces/basic/2.0/}url
  --> {http://purl.org/dc/elements/1.1/}identifier
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}eid
  --> {http://prismstandard.org/namespaces/basic/2.0/}doi
  --> {http://purl.org/dc/elements/1.1/}title
  --> {http://prismstandard.org/namespaces/basic/2.0/}aggregationType
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}srctype
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}citedby-count
  --> {http://prismstandard.org/namespaces/basic/2.0/}publicationName
  --> {http://purl.org/dc/elements/1.1/}publisher
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}source-id
  --> {http://prismstandard.org/namespaces/basic/2.0/}issn
  --> {http://prismstandard.org/namespaces/basic/2.0/}volume
  --> {http://prismstandard.org/namespaces/basic/2.0/}startingPage
  --> {http://prismstandard.org/namespaces/basic/2.0/}endingPage
  --> {http://prismstandard.org/namespaces/basic/2.0/}pageRange
  --> {http://prismstandard.org/namespaces/basic/2.0/}coverDate
  --> {http://purl.org/dc/elements/1.1/}creator
  --> {http://purl.org/dc/elements/1.1/}description
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}link
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}link
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}link

{http://www.elsevier.com/xml/svapi/abstract/dtd}affiliation
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}affilname

{http://www.elsevier.com/xml/svapi/abstract/dtd}authors
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}author
  --> {http://www.elsevier.com/xml/svapi/abstract/dtd}author

<p>
Now, some examples for myself to see how to get things.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">results</span> = get_abstract_info(<span style="color: #008000;">'2-s2.0-84901638552'</span>)

<span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)

<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}srctype'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}source-id'</span>).text

<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">authors = results.find('./{http://www.elsevier.com/xml/svapi/abstract/dtd}authors')</span>
<span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">for author in results.find('./{http://www.elsevier.com/xml/svapi/abstract/dtd}authors'):</span>
<span style="color: #8D8D84;">#    </span><span style="color: #8D8D84; font-style: italic;">print author.find('{http://www.elsevier.com/xml/ani/common}indexed-name').text</span>

<span style="color: #0000FF;">for</span> creator <span style="color: #0000FF;">in</span> coredata.find(<span style="color: #008000;">'{http://purl.org/dc/elements/1.1/}creator'</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> creator.attrib

<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://purl.org/dc/elements/1.1/}title'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}publicationName'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}volume'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}pageRange'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}coverDate'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}citedby-count'</span>).text
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}doi'</span>).text

<span style="color: #0000FF;">for</span> link <span style="color: #0000FF;">in</span> coredata.findall(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}link'</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> link.attrib[<span style="color: #008000;">'rel'</span>] == <span style="color: #008000;">'scopus'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> link.attrib[<span style="color: #008000;">'href'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> link.attrib[<span style="color: #008000;">'href'</span>]

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">alternative xpath to get the link</span>
<span style="color: #0000FF;">print</span> coredata.find(<span style="color: #008000;">"./{http://www.elsevier.com/xml/svapi/abstract/dtd}link/[@rel='scopus']"</span>).attrib[<span style="color: #008000;">'href'</span>]
</pre>
</div>

j
22746
{'auid': '55569461200', 'seq': '1'}
Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces
Catalysis Communications
52
60-64
2014-07-05
2
10.1016/j.catcom.2013.10.028
http://api.elsevier.com/content/abstract/scopus_id/84901638552
http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward
http://api.elsevier.com/content/search/scopus?query=refeid%282-s2.0-84901638552%29
http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward

<p>
That is basically it. In the next sections, we basically recreate the previous functions from scopus.py using the xml data.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Authors</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_author_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">authors</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}authors'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> authors <span style="color: #0000FF;">is</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'No authors found'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = []

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> author <span style="color: #0000FF;">in</span> authors:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">name</span> = author.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/ani/common}indexed-name'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">auid</span> = author.attrib[<span style="color: #008000;">'auid'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> += [<span style="color: #008000;">'&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId={0}"&gt;{1}&lt;/a&gt;'</span>.<span style="color: #006FE0;">format</span>(auid, name)]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">', '</span>.join(s)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_author_link(<span style="color: #008000;">'2-s2.0-84896759135'</span>)
<span style="color: #0000FF;">print</span> get_author_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>
<pre class="example">
&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=8724572500"&gt;Thompson R.L.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=22981503200"&gt;Shi W.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=6506329719"&gt;Albenze E.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=23004637900"&gt;Kusuma V.A.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=55676869000"&gt;Hopkinson D.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7003584159"&gt;Damodaran K.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=55005205100"&gt;Lee A.S.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7004212771"&gt;Kitchin J.R.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=6701399651"&gt;Luebke D.R.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=24081524800"&gt;Nulwala H.&lt;/a&gt;
&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=55569461200"&gt;Xu Z.&lt;/a&gt;, &lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7004212771"&gt;Kitchin J.R.&lt;/a&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Journal</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_journal_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">journal</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}publicationName'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sid</span> = coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}source-id'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="http://www.scopus.com/source/sourceInfo.url?sourceId={sid}"&gt;{journal}&lt;/a&gt;'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(sid=sid, journal=journal)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_journal_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>
<pre class="example">
&lt;a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746"&gt;Catalysis Communications&lt;/a&gt;
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> DOI link</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_doi_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}doi'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> doi <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>: <span style="color: #BA36A5;">doi</span> = doi.text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="http://dx.doi.org/{doi}"&gt;doi:{doi}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(doi=doi)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_doi_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Abstract link</h2>
<div class="outline-text-2" id="text-4">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_abstract_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">title</span> = coredata.find(<span style="color: #008000;">'{http://purl.org/dc/elements/1.1/}title'</span>).text.encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">link</span> = coredata.find(<span style="color: #008000;">"./{http://www.elsevier.com/xml/svapi/abstract/dtd}link/[@rel='scopus']"</span>).attrib[<span style="color: #008000;">'href'</span>].encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="{link}"&gt;{title}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(link=link, title=title)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_abstract_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Citation image</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_cite_img_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}doi'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> doi <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>: <span style="color: #BA36A5;">doi</span> = doi.text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;img src="http://api.elsevier.com/content/abstract/citation-count?doi={doi}&amp;httpAccept=image/jpeg&amp;apiKey={apikey}"&gt;&lt;/img&gt;'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(doi=doi, apikey=MY_API_KEY, cite_link=<span style="color: #D0372D;">None</span>)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_cite_img_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>
<img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Getting it all together</h2>
<div class="outline-text-2" id="text-6">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_html_citation</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">coredata</span> = results.find(<span style="color: #008000;">'./{http://www.elsevier.com/xml/svapi/abstract/dtd}coredata'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'{authors}, &lt;i&gt;{title}&lt;/i&gt;, {journal}, &lt;b&gt;{volume}{issue}&lt;/b&gt;, {pages}, ({year}), {doi}, {cites}.'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">issue</span> = <span style="color: #008000;">''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}issueIdentifier'</span>) <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">issue</span> = <span style="color: #008000;">'({})'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}issueIdentifier'</span>).text)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volume</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}volume'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> volume <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volume</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}volume'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">volume</span> = <span style="color: #008000;">'None'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = <span style="color: #008000;">''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}pageRange'</span>) <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = <span style="color: #008000;">'p. '</span> + coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}pageRange'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">elif</span> coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}article-number'</span>) <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = coredata.find(<span style="color: #008000;">'{http://www.elsevier.com/xml/svapi/abstract/dtd}article-number'</span>).text
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pages</span> = <span style="color: #008000;">'no pages found'</span>


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = coredata.find(<span style="color: #008000;">'{http://prismstandard.org/namespaces/basic/2.0/}coverDate'</span>).text

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(authors=get_author_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   title=get_abstract_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   journal=get_journal_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   volume=volume,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   issue=issue,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pages=pages,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   year=year,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   doi=get_doi_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   cites=get_cite_img_link(EID))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;ol&gt;'</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;li&gt;'</span>,get_html_citation(<span style="color: #008000;">'2-s2.0-84896759135'</span>),<span style="color: #008000;">'&lt;/li&gt;'</span>
<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;li&gt;'</span>,get_html_citation(<span style="color: #008000;">'2-s2.0-84924911828'</span>),<span style="color: #008000;">'&lt;/li&gt;'</span>
<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;li&gt;'</span>,get_html_citation(<span style="color: #008000;">'2-s2.0-84901638552'</span>),<span style="color: #008000;">'&lt;/li&gt;'</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;/ol&gt;'</span>
</pre>
</div>
<ol>
<li> <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=8724572500">Thompson R.L.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=22981503200">Shi W.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=6506329719">Albenze E.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=23004637900">Kusuma V.A.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55676869000">Hopkinson D.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7003584159">Damodaran K.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55005205100">Lee A.S.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=6701399651">Luebke D.R.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=24081524800">Nulwala H.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84896759135&origin=inward">Probing the effect of electron donation on CO2 absorbing 1,2,3-triazolide ionic liquids</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=21100199840">RSC Advances</a>, <b>4(25)</b>, p. 12748-12755, (2014-03-17), <a href="http://dx.doi.org/10.1039/c3ra47097k">doi:10.1039/c3ra47097k</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1039/c3ra47097k&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>. </li>

<li> <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84924911828&origin=inward">Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=28134">Journal of Chemical Physics</a>, <b>142(10)</b>, 104703, (2015-03-14), <a href="http://dx.doi.org/10.1063/1.4914093">doi:10.1063/1.4914093</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.4914093&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>. </li>

<li> <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746">Catalysis Communications</a>, <b>52</b>, p. 60-64, (2014-07-05), <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>. </li>
</ol>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Finally getting my documents</h2>
<div class="outline-text-2" id="text-7">
<p>
Here we get the EIDs from a search query. We use these in the next section to get a new bibliography.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY
<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://api.elsevier.com/content/search/scopus?query=AU-ID(7004212771)&amp;field=eid,aggregationType&amp;count=100"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #0000FF;">return</span> [[<span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'eid'</span>]), <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>])] <span style="color: #0000FF;">for</span> r <span style="color: #0000FF;">in</span> results[<span style="color: #008000;">'search-results'</span>][<span style="color: #008000;">"entry"</span>] <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>]) == <span style="color: #008000;">'Journal'</span>]
</pre>
</div>


<table id="my-eids" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">2-s2.0-84924911828</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84923164062</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84924778427</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84924130725</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84901638552</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84898934670</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84896759135</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84896380535</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84896585411</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84916613197</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84908637059</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84880986072</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84881394200</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84873706643</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84876703352</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84867809683</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84864914806</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84865730756</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84864592302</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84863684845</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84866142469</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-84861127526</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-80052944171</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-80051809046</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-79953651013</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-79952860396</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77956568341</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77954747189</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77956693843</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77949916234</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-77955464573</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-72049114200</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-73149124752</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-73149109096</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-67449106405</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-63649114440</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-60849113132</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-58649114498</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-40949100780</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-33750804660</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-20544467859</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-15744396507</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-9744261716</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-13444307808</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-3042820285</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-2942640180</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0142023762</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0141924604</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0037368024</td>
<td class="left">Journal</td>
</tr>

<tr>
<td class="left">2-s2.0-0037197884</td>
<td class="left">Journal</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> And my html bibliography</h2>
<div class="outline-text-2" id="text-8">
<p>
This generates my blog bibliography page..
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus_xml <span style="color: #0000FF;">import</span> *

<span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY
<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://api.elsevier.com/content/search/scopus?query=AU-ID(7004212771)&amp;field=eid,aggregationType&amp;count=100"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})

<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #BA36A5;">data</span> = [[<span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'eid'</span>]), <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>])] <span style="color: #0000FF;">for</span> r <span style="color: #0000FF;">in</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   results[<span style="color: #008000;">'search-results'</span>][<span style="color: #008000;">"entry"</span>] <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">str</span>(r[<span style="color: #008000;">'prism:aggregationType'</span>]) == <span style="color: #008000;">'Journal'</span>]


<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'../publications.html.mako'</span>, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'''&lt;%inherit file="_templates/site.mako" /&gt;</span>
<span style="color: #008000;">&lt;article class="page_box"&gt;</span>
<span style="color: #008000;">&lt;%self:filter chain="markdown"&gt;</span>

<span style="color: #008000;">&lt;h1&gt;Online collections of our work&lt;/h1&gt;</span>
<span style="color: #008000;">Pick your favorite:</span>
<span style="color: #008000;">&lt;ul&gt;</span>
<span style="color: #008000;">&lt;li&gt;&lt;a href="http://orcid.org/0000-0003-2625-9232"&gt;orcid:0000-0003-2625-9232&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="http://www.researcherid.com/rid/A-2363-2010"&gt;researcherid:A-2363-2010&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId=7004212771"&gt;scopusid:7004212771&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="https://scholar.google.com/citations?user=jD_4h7sAAAAJ"&gt;Google Scholar&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="https://www.researchgate.net/profile/John_Kitchin"&gt;Research Gate&lt;/a&gt;&lt;/li&gt;</span>

<span style="color: #008000;">&lt;li&gt;&lt;a href="https://www.growkudos.com/profiles/40205"&gt;Kudos&lt;/a&gt;&lt;/li&gt;</span>
<span style="color: #008000;">&lt;/ul&gt;</span>

<span style="color: #008000;">&lt;h1&gt;Publications&lt;/h1&gt;</span>
<span style="color: #008000;">The authors are linked to their Scopus page, the title linked to the Scopus abstract, the journal linked to the Scopus journal page, and the DOI is linked to http://dx.doi.org which normally redirects you to the journal page.</span>

<span style="color: #008000;">&lt;ol reversed="reversed"&gt;</span>
<span style="color: #008000;">'''</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> eid,<span style="color: #006FE0;">type</span> <span style="color: #0000FF;">in</span> data:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'&lt;li&gt;{}&lt;/li&gt;'</span>.<span style="color: #006FE0;">format</span>(get_html_citation(eid)))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'''&lt;/ol&gt;</span>

<span style="color: #008000;">&lt;/%self:filter&gt;</span>
<span style="color: #008000;">&lt;/article&gt;</span>
<span style="color: #008000;">'''</span>)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> Summary</h2>
<div class="outline-text-2" id="text-9">
<p>
The XML format is not that intuitive to me. It takes some practice writing robust code, e.g. sometimes the find command does not find anything, and then there is not text attribute to get, so you should check for success on finding things. Also, some text is unicode, and you have to take care to encode it, which my library does not do uniformly. Finally, not all journals have things like volume or issue. My formatting code is not super flexible, so these bibliography entries show None in them occasionally. Still, it is not too bad, and this enables a lot of analysis of your publications, as well as displaying them in different ways. See the result of this page here: <a href="http://kitchingroup.cheme.cmu.edu/publications.html">http://kitchingroup.cheme.cmu.edu/publications.html</a> 
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/06/Using-the-Scopus-api-with-xml-output.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Making highly linked bibliographies from the Scopus API</title>
      <link>http://jkitchin.github.io/blog/2015/04/04/Making-highly-linked-bibliographies-from-the-Scopus-API</link>
      <pubDate>Sat, 04 Apr 2015 11:32:05 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[scopus]]></category>
      <guid isPermaLink="false">2p8DEUho7Y9tx03OMPsdyQaMLk4=</guid>
      <description>Making highly linked bibliographies from the Scopus API</description>
      <content:encoded><![CDATA[



<p>
A given article entry in a bibliography might have the following kinds of links in it. I think we can generate these from a Scopus query.
</p>

<ul class="org-ul">
<li>Author page: <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771</a> 
</li>
<li><a href="https://www.scopus.com/record/display.url?eid=2-s2.0-84901638552&origin=resultslist&sort=plf-f&src=s&sid=66816438A83B9A7B72A35BF872F8E10E.WeLimyRvBMk2ky9SFKc8Q%3a50&sot=autdocs&sdt=autdocs&sl=17&s=AU-ID%287004212771%29&relpos=4&relpos=4&citeCnt=2&searchTerm=">Document page</a> 
</li>
<li>Journal page: <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746&origin=resultslist">http://www.scopus.com/source/sourceInfo.url?sourceId=22746&origin=resultslist</a> 
</li>
<li><a href="https://www.scopus.com/results/citedbyresults.url?sort=plf-f&cite=2-s2.0-84901638552&src=s&imp=t&sid=66816438A83B9A7B72A35BF872F8E10E.WeLimyRvBMk2ky9SFKc8Q%3a230&sot=cite&sdt=a&sl=0&origin=resultslist&editSaveSearch=&txGid=66816438A83B9A7B72A35BF872F8E10E.WeLimyRvBMk2ky9SFKc8Q%3a23">Cited by</a> 
</li>
<li><a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">http://dx.doi.org/10.1016/j.catcom.2013.10.028</a> 
</li>
<li><a href="https://www.scopus.com/results/citedbyresults.url?sort=r-f&src=s&mltEid=2-s2.0-84901638552&mltType=ref&mltAll=t&imp=t&sid=66816438A83B9A7B72A35BF872F8E10E.WeLimyRvBMk2ky9SFKc8Q%3a290&sot=mlt&sdt=mlt&sl=730&s=REFEID%28%28%222-s2.0-79953651013%22%29+OR+%28%222-s2.0-84855602300%22%29+OR+%28%222-s2.0-33750453016%22%29+OR+%28%222-s2.0-33645349847%22%29+OR+%28%222-s2.0-0034814842%22%29+OR+%28%222-s2.0-77955464573%22%29+OR+%28%222-s2.0-13444307808%22%29+OR+%28%222-s2.0-53349153662%22%29+OR+%28%222-s2.0-80051809046%22%29+OR+%28%222-s2.0-84876703352%22%29+OR+%28%222-s2.0-80053316882%22%29+OR+%28%222-s2.0-83255187152%22%29+OR+%28%222-s2.0-80052944171%22%29+OR+%28%222-s2.0-84865730756%22%29+OR+%28%222-s2.0-0000778362%22%29+OR+%28%222-s2.0-60349090198%22%29+OR+%28%222-s2.0-2442537377%22%29+OR+%28%222-s2.0-0030190741%22%29+OR+%28%222-s2.0-25744460922%22%29+OR+%28%222-s2.0-0011236321%22%29+OR+%28%222-s2.0-4243943295%22%29+OR+%28%222-s2.0-4944232881%22%29+OR+%28%222-s2.0-1842816907%22%29+OR+%28%222-s2.0-33646343022%22%29+OR+%28%222-s2.0-4143079428%22%29+OR+%28%222-s2.0-77954807118%22%29+OR+%28%222-s2.0-11544320930%22%29%29+AND+NOT+EID+%282-s2.0-84901638552%29&origin=resultslist&txGid=66816438A83B9A7B72A35BF872F8E10E.WeLimyRvBMk2ky9SFKc8Q%3a29">Related articles</a> 
</li>
</ul>

<p>
We are going to look at the document above, with eid=2-s2.0-84901638552. This is another long post, so here is a teaser of what we are doing. For this eid, we want to generate an html entry where each part of the entry is clickable. Here is what we will be able to do by the end of this post:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *

<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;ol&gt;'</span>, get_html(<span style="color: #008000;">'2-s2.0-84901638552'</span>), <span style="color: #008000;">'&lt;/ol&gt;'</span>
</pre>
</div>

<ol> <li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>,<a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746">Catalysis Communications</a>, <b>52</b>, p. 60-64, (2014-07-05), <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>.</li> </ol>

<p>
In this post, we work out code that works for this document. This code in the form shown here might not work on all entries, e.g. for ones that are in press and are missing data, or for APS journals that have no page range. Later, I will fix those so this is more robust. To minimize repeating the code below, I create a python module here called <a href="/media/2015-04-04-Making-highly-linked-bibliographies-from-the-Scopus-API/scopus.py">scopus.py</a> .  Tangle it out with <a href="org-babel-tangle">org-babel-tangle</a>. As in the last <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/04/03/Getting-data-from-the-Scopus-API/">post</a> , I am not sharing my API key here, since it is not clear if that key is private or not.
</p>

<p>
I like json, so we use that data format here. XML would be more robust, as the Scopus site admits not all of the data can be turned into the json format, but for now we stick to json for its simplicity.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json, os
<span style="color: #0000FF;">from</span> my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_abstract_info</span>(EID, refresh=<span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'Get and save the json data for EID.'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">base</span> = <span style="color: #008000;">'scopus-data/get_abstract_info'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> os.path.exists(base):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.makedirs(base)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">fname</span> = <span style="color: #008000;">'{0}/{1}'</span>.<span style="color: #006FE0;">format</span>(base, EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> os.path.exists(fname) <span style="color: #0000FF;">and</span> <span style="color: #0000FF;">not</span> refresh:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> json.loads(f.read())

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Otherwise retrieve and save results</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">url</span> = (<span style="color: #008000;">"http://api.elsevier.com/content/abstract/eid/"</span> + EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">resp</span> = requests.get(url,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/json'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY})
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = json.loads(resp.text.encode(<span style="color: #008000;">'utf-8'</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(json.dumps(results))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> results
</pre>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Author pages</h2>
<div class="outline-text-2" id="text-1">
<p>
Here, we generate the html that will make each author a clickable link that goes to their Scopus ID author page.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_author_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">html</span> = <span style="color: #008000;">'&lt;a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&amp;authorId={0}"&gt;{1}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">authors</span> = [html.<span style="color: #006FE0;">format</span>(auid, name) <span style="color: #0000FF;">for</span> auid, name <span style="color: #0000FF;">in</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      <span style="color: #006FE0;">zip</span>([x[<span style="color: #008000;">'@auid'</span>] <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> result[<span style="color: #008000;">'authors'</span>][<span style="color: #008000;">'author'</span>]],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>      [x[<span style="color: #008000;">'ce:indexed-name'</span>] <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> result[<span style="color: #008000;">'authors'</span>][<span style="color: #008000;">'author'</span>]])]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">','</span>.join(authors)
</pre>
</div>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_author_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>,<a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Journal link</h2>
<div class="outline-text-2" id="text-2">
<p>
The most important pieces of information we need is the journal name and the source-id from the coredata.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #BA36A5;">EID</span> = <span style="color: #008000;">'2-s2.0-84901638552'</span>
<span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #0000FF;">print</span> result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'source-id'</span>]
<span style="color: #0000FF;">print</span> result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:publicationName'</span>]
</pre>
</div>

<pre class="example">
22746
Catalysis Communications
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_journal_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sid</span> = result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'source-id'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">journal</span> = result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:publicationName'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="http://www.scopus.com/source/sourceInfo.url?sourceId={sid}"&gt;{journal}&lt;/a&gt;'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(sid=sid, journal=journal)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_journal_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746">Catalysis Communications</a>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> DOI link</h2>
<div class="outline-text-2" id="text-3">
<p>
It would be helpful to have a doi link, which is actually independent of Scopus so people without Scopus access can still access information.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #BA36A5;">EID</span> = <span style="color: #008000;">'2-s2.0-84901638552'</span>
<span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #0000FF;">print</span> result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:doi'</span>]
</pre>
</div>

<pre class="example">
10.1016/j.catcom.2013.10.028
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_doi_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="http://dx.doi.org/{doi}"&gt;doi:{doi}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(doi=result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:doi'</span>])
</pre>
</div>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_doi_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Citation count image</h2>
<div class="outline-text-2" id="text-4">
<p>
It is nice to show impact of a paper by showing the citations. These change with time, so a static view is not ideal. Scopus provides a way to get an image they generate that should update when viewed. We need the doi to get that.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_cite_img_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;img src="http://api.elsevier.com/content/abstract/citation-count?doi={doi}&amp;httpAccept=image/jpeg&amp;apiKey={apikey}"&gt;&lt;/img&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(doi=result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'prism:doi'</span>].strip(), apikey=MY_API_KEY)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_cite_img_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> The document link</h2>
<div class="outline-text-2" id="text-5">
<p>
The document link is sort of buried in the coredata. It seems like &amp; has been replaced by &amp;amp; in the json data so we have to do a clunky fix here.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #BA36A5;">EID</span> = <span style="color: #008000;">'2-s2.0-84901638552'</span>
<span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]

<span style="color: #0000FF;">print</span> result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'dc:title'</span>]
<span style="color: #0000FF;">for</span> ref <span style="color: #0000FF;">in</span> result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'link'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> ref[<span style="color: #008000;">'@rel'</span>] == <span style="color: #008000;">'scopus'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> ref[<span style="color: #008000;">'@href'</span>].replace(<span style="color: #008000;">'&amp;amp;'</span>, <span style="color: #008000;">'&amp;'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">break</span>
</pre>
</div>

<pre class="example">
Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces
http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&amp;scp=84901638552&amp;origin=inward
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_abstract_link</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">title</span> = result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'dc:title'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> ref <span style="color: #0000FF;">in</span> result[<span style="color: #008000;">'coredata'</span>][<span style="color: #008000;">'link'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> ref[<span style="color: #008000;">'@rel'</span>] == <span style="color: #008000;">'scopus'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">link</span> = ref[<span style="color: #008000;">'@href'</span>].replace(<span style="color: #008000;">'&amp;amp;'</span>, <span style="color: #008000;">'&amp;'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;a href="{link}"&gt;{title}&lt;/a&gt;'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(link=link, title=title)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_abstract_link(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Putting it all together</h2>
<div class="outline-text-2" id="text-6">
<p>
Our goal is ultimately an html formatted citation where nearly every piece is a hyperlink to additional information, e.g. each author is linked to their page, the title is linked to the scopus document page, the journal is linked to the scopus journal page, a DOI link, and an image of the number of citations. Here it is.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">get_html</span>(EID):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = get_abstract_info(EID)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = data[<span style="color: #008000;">'abstracts-retrieval-response'</span>]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'&lt;li&gt;{authors}, &lt;i&gt;{title}&lt;/i&gt;, {journal}, &lt;b&gt;{volume}{issue}&lt;/b&gt;, p. {pages}, ({year}), {doi}, {cites}.&lt;/li&gt;'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">issue</span> = <span style="color: #008000;">''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> result[<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:issue'</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">issue</span> = <span style="color: #008000;">'({})'</span>.<span style="color: #006FE0;">format</span>(result[<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:issue'</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s.<span style="color: #006FE0;">format</span>(authors=get_author_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   title=get_abstract_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   journal=get_journal_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   volume=result[<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:volume'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   issue=issue,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pages=result[<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:pageRange'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   year=result[<span style="color: #008000;">'coredata'</span>].get(<span style="color: #008000;">'prism:coverDate'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   doi=get_doi_link(EID),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   cites=get_cite_img_link(EID))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">print</span> get_html(<span style="color: #008000;">'2-s2.0-84901638552'</span>)
</pre>
</div>

<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569461200">Xu Z.</a>,<a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">Kitchin J.R.</a>, <i><a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84901638552&origin=inward">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a></i>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=22746">Catalysis Communications</a>, <b>52</b>, p. 60-64, (2014-07-05), <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi:10.1016/j.catcom.2013.10.028</a>, <img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&httpAccept=image/jpeg&apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></img>.</li>


<p>
Well, that is the end for now. We have a reusable function that generates a nice HTML formatted citation that links out to many different resources. Why aren't all citations on the web this helpful?</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/04/04/Making-highly-linked-bibliographies-from-the-Scopus-API.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
