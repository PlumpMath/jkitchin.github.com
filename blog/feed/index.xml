<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Mon, 03 Nov 2014 00:33:37 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>A generalized org-link with an extendable menu of actions</title>
      <link>http://jkitchin.github.io/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions</link>
      <pubDate>Sun, 02 Nov 2014 19:33:14 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">Cf0O5RZ6zgyMNAxFnpLeAp2Dm7Q=</guid>
      <description>A generalized org-link with an extendable menu of actions</description>
      <content:encoded><![CDATA[


<p>
In org-ref the cite links are actually a menu of options. Here I want to explore generalizing the concept, and enable users to add new menu items. When you click on a cite link, it calls a function that constructs the menu as a string. Then, we read something from the minibuffer to say what should be done. We could store these things in variables, so that a user could add their own things. We need a list of characters, menu strings, and functions to run when to create the menu. Here we put together a little example code that shows the idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-a</span> (link)
  (message <span style="color: #228b22;">"You picked option A for %s"</span> link))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-b</span> (link)
  (message <span style="color: #228b22;">"You picked option B for %s"</span> link))

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">menu-funcs</span>
 '((<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"Option 1"</span> option-a)
   (<span style="color: #228b22;">"b"</span> <span style="color: #228b22;">"Option 2"</span> option-b)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">menu-click</span> (path)
  (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     menu-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
  (setq input (read-char-exclusive))
  (funcall
   (elt 
    (assoc
     (char-to-string input) menu-funcs)
    2)
   path))

(org-add-link-type
 <span style="color: #228b22;">"menu"</span>
 'menu-click)
</pre>
</div>

<p>
<a href="element">element</a>  Clicking on that link in Emacs gives me the desired menu!
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu.png"> 
</p>
</div>

<p>
and 
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu-response.png"> 
</p>
</div>

<p>
Now, we test adding a new function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-c</span> (link)
  (message <span style="color: #228b22;">"You picked option C for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"c"</span> <span style="color: #228b22;">"Option C"</span> option-c))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>
</tbody>
</table>

<p>
Well, that worked fine! You might want to append to the list instead of put it at the beginning, but that is really your choice.  
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-4</span> (link)
  (message <span style="color: #228b22;">"You picked option 4 for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"4"</span> <span style="color: #228b22;">"Option 4"</span> option-4) t)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>

<tr>
<td class="left">4</td>
<td class="left">Option 4</td>
<td class="left">option-4</td>
</tr>
</tbody>
</table>

<p>
I think this example more or less shows the basic idea here. These external functions may do a variety of things, like look up something on google, or some other web service, search for something on your hard drive, etc&#x2026; For example in org-ref, clicking on a cite link gives you options to open the bibtex file, a pdf, a url or notes. This would allow you to open other things too, if you felt like it. For better or worse, you can modify the behavior of the link after it is defined.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Annotating matplotlib figures</title>
      <link>http://jkitchin.github.io/blog/2014/11/01/Annotating-matplotlib-figures</link>
      <pubDate>Sat, 01 Nov 2014 10:35:15 EDT</pubDate>
      <category><![CDATA[python matplotlib]]></category>
      <guid isPermaLink="false">AcY0at1sX0APriSojYzVLBLbBHY=</guid>
      <description>Annotating matplotlib figures</description>
      <content:encoded><![CDATA[




<p>
There is a nice picture of an ethanolamine molecule <a href="http://en.wikipedia.org/wiki/Ethanolamine">here</a> . The first thing we consider is embedding this figure in a matplotlib figure. It is a little tricky because we have to create a special axes to put the image in. The axes are created in a fractional coordinate systems that is defined by [left, bottom, width, height]. Placing the figure where you want it is an iterative process that involves changing those values to get the image where you want.
</p>

<p>
So, note that (0, 0) is the bottome left corner of the figure, and (1, 1) is the upper right corner. So, to make an axes for the main figure that takes up 75% of the width and 80% of the height, and starts 20% from the left, 15% from the bottom, we use [0.2, 0.15, 0.75, 0.8]. That covers most of the space, and leaves room for labels.
</p>

<p>
The axes for the image is about the same, but it is a little trickier to figure out the width and height. In this example these arguments appear to just rescale the image.
</p>

<p>
Here is some code that puts the image near the upper left-corner of the plot.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">from</span> scipy.misc <span style="color: #8b0000;">import</span> imread
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">im</span> = imread(<span style="color: #228b22;">'images/Ethanolamine-2D-skeletal-B.png'</span>)

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">fig</span> = plt.figure(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">figsize</span>=(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>))
#                    <span style="color: #ff0000; font-weight: bold;">left bottom width height</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">f_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">15</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">75</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)

# <span style="color: #ff0000; font-weight: bold;">plot some function</span>
f_ax.plot(np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>), <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span> * np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>))
plt.xlabel(<span style="color: #228b22;">'some xlabel'</span>)
plt.ylabel(<span style="color: #228b22;">'Y'</span>)

# <span style="color: #ff0000; font-weight: bold;">axes for the image</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">i_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">22</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">frameon</span>=<span style="color: #8b0000;">False</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">xticks</span>=[], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">yticks</span>=[],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>)

# <span style="color: #ff0000; font-weight: bold;">add the image. zorder&gt;1 makes sure it is on top</span>
i_ax.imshow(im)

# <span style="color: #ff0000; font-weight: bold;">print dir(i_ax)</span>

plt.savefig(<span style="color: #228b22;">'images/fig-in-plot-2.png'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">dpi</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">300</span>)
</pre>
</div>

<div class="figure">
<p><img src="/media/2014-11-01-Annotating-matplotlib-figures/fig-in-plot-2.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A matplotlib figure with an embedded images.</p>
</div>


<p>
There it is.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/01/Annotating-matplotlib-figures.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Generating your bibliography in another file</title>
      <link>http://jkitchin.github.io/blog/2014/10/30/Generating-your-bibliography-in-another-file</link>
      <pubDate>Thu, 30 Oct 2014 19:42:35 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">oztog6TAGyeAKMDvrygUnGjA-7k=</guid>
      <description>Generating your bibliography in another file</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Getting the references in another file</a></li>
</ul>
</div>
</div>

<p>
It has been proposal season. This particular round of proposals had a requirement to print the references in a separate file from the proposal. Usually I just build a pdf from org-mode, and then manually separate the references. That is not very fun if you have to do it several times. Here we examine a way to avoid this issue by using a new nobibliography link from org-ref with the bibentry LaTeX package.
</p>

<p>
We wrote this paper <a href="#mehta-2014-ident-poten">mehta-2014-ident-poten</a> and this one <a href="#xu-2014-relat">xu-2014-relat</a>.
</p>

<p>

<h1>Bibliography</h1>
<ul><li><a id="mehta-2014-ident-poten">[mehta-2014-ident-poten] Prateek Mehta, Paul Salvador, John \& Kitchin, Identifying Potential \ce{BO2} Oxide Polymorphs for  Epitaxial Growth Candidates, <i>ACS Appl. Mater. Interfaces</i>, <b>6(5)</b>, 3630-3639 (2014). <a href="http://dx.doi.org/10.1021/am4059149">link</a>. <a href="http://dx.doi.org/10.1021/am4059149">doi</a>.</a></li>
<li><a id="xu-2014-relat">[xu-2014-relat] Zhongnan Xu \& John Kitchin, Relating the Electronic Structure and Reactivity of  the 3d Transition Metal Monoxide Surfaces, <i>Catalysis Communications</i>, <b>52()</b>, 60-64 (2014). <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">link</a>. <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi</a>.</a></li>
</ul>
</p>

<p>
Here is the resulting pdf, with no references: <a href="separate-bib.pdf">separate-bib.pdf</a>.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Getting the references in another file</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, we need to get the reference file. We create a new file, in org-mode, mostly for the convenience of exporting that to a pdf. Here is the code that does that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((base (file-name-sans-extension
              (file-name-nondirectory (buffer-file-name))))
       (bbl (concat base <span style="color: #228b22;">".bbl"</span>))
       (orgfile (concat base <span style="color: #228b22;">"-references.org"</span>))
       (pdffile (concat base <span style="color: #228b22;">"-references.pdf"</span>)))
  (<span style="color: #8b0000;">with-temp-file</span> orgfile
    (insert 
     (format <span style="color: #228b22;">"#+LATEX_CLASS: cmu-article</span>
<span style="color: #228b22;">#+OPTIONS: toc:nil</span>

<span style="color: #228b22;">#+BEGIN_LaTeX</span>
<span style="color: #228b22;">\\input{%s}</span>
<span style="color: #228b22;">#+END_LaTeX</span>
<span style="color: #228b22;">"</span> bbl)))

  (find-file orgfile)
  (org-latex-export-to-pdf)
  (org-open-file pdffile))
</pre>
</div>

<p>
And, here is the reference file: <a href="/media/2014-10-30-Generating-your-bibliography-in-another-file/separate-bib.pdf">separate-bib.pdf</a> 
</p>

<p>
I think this would be integrated into a noexport build section of a document that would generate the pdf and references. 
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/30/Generating-your-bibliography-in-another-file.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>New publication in J. Physical Chemistry C</title>
      <link>http://jkitchin.github.io/blog/2014/10/21/New-publication-in-J-Physical-Chemistry-C</link>
      <pubDate>Tue, 21 Oct 2014 08:30:27 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publ]]></category>
      <guid isPermaLink="false">rUumQGEHsoYSkADSmrZnhW_FdHo=</guid>
      <description>New publication in J. Physical Chemistry C</description>
      <content:encoded><![CDATA[


<p>
"Probing the Coverage Dependence of Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals"
</p>

<p>
Zhongnan Xu and John R. Kitchin
J. Phys. Chem. C, Just Accepted Manuscript
DOI: <a href="10.1021/jp508805h">10.1021/jp508805h</a>
Publication Date (Web): October 14, 2014
Copyright © 2014 American Chemical Society
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">xu-2014-probin-cover</span>,
  <span style="color: #8b008b;">author</span> =       {Zhongnan Xu and John R. Kitchin},
  <span style="color: #8b008b;">title</span> =        {Probing the Coverage Dependence of Site and
                  Adsorbate Configurational Correlations on (111)
                  Surfaces of Late Transition Metals},
  <span style="color: #8b008b;">journal</span> =      {J. Phys. Chem. C},
  <span style="color: #8b008b;">volume</span> =       {nil},
  <span style="color: #8b008b;">number</span> =       {nil},
  <span style="color: #8b008b;">pages</span> =        141014152600009,
  <span style="color: #8b008b;">year</span> =         2014,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/jp508805h</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1021/jp508805h</span>},
}
</pre>
</div>

<p>
<a href="http://dx.doi.org/10.1021/jp508805h">http://dx.doi.org/10.1021/jp508805h</a> 
</p>

<p>
Congratulations Zhongnan!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/21/New-publication-in-J.-Physical-Chemistry-C.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Pymacs to integrate Python into Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs</link>
      <pubDate>Sun, 19 Oct 2014 09:33:08 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">A5OvYHGpZAZwz5h8XmQIZWiVqqU=</guid>
      <description>Using Pymacs to integrate Python into Emacs</description>
      <content:encoded><![CDATA[


<p>
<a href="https://github.com/pinard/Pymacs">Pymacs</a> is a project that aims to integrate Python into Emacs, and vice versa. In this post, I am going to examine the Python into Emacs integration. I cloned the git repository, ran make install, and setup my init.el file like this, as suggested in the manual.
</p>

<pre class="example">
(add-to-list 'load-path (expand-file-name "Pymacs" starter-kit-dir))
(require 'pymacs)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
</pre>

<p>
Pymacs provides some mapping of Python modules to emacs-lisp functions. You load modules in emacs-lisp, and then a dash-mangled version of the Python functions are available, <i>in emacs lisp</i>. Here is an example. We will load numpy, and find the maximum element of an array. For comparison, here is the Python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.max(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Now, the corresponding emacs version using Pymacs.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(np-max (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Neat! The dot notation is basically replaced with dash notation, and we use a lisp list as the argument instead of an array. Otherwise, this looks almost identical. Now, let us consider something more complicated, and get the determinant of the array. We add a PREFIX to the load statement for numpy.linalg similar to what we would do in Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> numpy.linalg <span style="color: #8b0000;">as</span> la
<span style="color: #8b0000;">print</span> la.det(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
And in emacs-lisp:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(pymacs-load <span style="color: #228b22;">"numpy.linalg"</span> <span style="color: #228b22;">"la-"</span>)
(la-det (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
We can call functions from matplotlib to make a figure. For example:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"matplotlib.pyplot"</span> <span style="color: #228b22;">"plt-"</span>)
(<span style="color: #8b0000;">let*</span> ((x  '(1 2 3 4))
       (y  (mapcar (<span style="color: #8b0000;">lambda</span> (z) (* z z)) x)))
  (plt-plot x y)
  (plt-xlabel <span style="color: #228b22;">"x values"</span>)
  (plt-ylabel <span style="color: #228b22;">"x$^2$"</span>)
  (plt-savefig <span style="color: #228b22;">"plt-pymacs.png"</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-10-19-Using-Pymacs-to-integrate-Python-into-Emacs/plt-pymacs.png"> 
</p>
</div>

<p>
This was a little subtle. It was necessary to save the lists as variables, and use the variables in the plot command.
</p>

<p>
I am not sure what this offers over just having a Python block present in org-mode though. Maybe it is more useful in emacs-lisp libraries where you want to bring in some numerical analysis. Or if you have some custom library of Python you would like to use in elisp. Here is a highly contrived example. Suppose we have a Python module with this special function that converts an argument to "J":
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">special_func</span>(x):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">"J"</span>
</pre>
</div>

<p>
In Python, we might use it like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> my_python <span style="color: #8b0000;">as</span> mp
<span style="color: #8b0000;">print</span> [mp.special_func(x) <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>]]
</pre>
</div>

<pre class="example">
['J', 'J', 'J']
</pre>

<p>
We can import the module, and use the function in emacs-lisp too. The underscore in the function name is turned into a dash, which is a little confusing, but it works otherwise.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"my_python"</span> <span style="color: #228b22;">"mp-"</span>)
(mapcar 'mp-special-func '(1 2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">J</td>
<td class="left">J</td>
<td class="left">J</td>
</tr>
</tbody>
</table>


<p>
It does not seem possible to do everything though. For example, It is not clear how to pass functions through either side. For example, this does not work for fsolve, although it seems like it should. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"scipy.optimize"</span> <span style="color: #228b22;">"so-"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">objective</span> (x)
  (- x 5))

(so-fsolve 'objective 3)
</pre>
</div>

<p>
I get an error like this:
</p>
<pre class="example">
Pymacs loading scipy.optimize...done
pymacs-report-error: Python: Emacs: "(wrong-type-argument number-or-marker-p (pymacs-python . 47))"
</pre>

<p>
The Python equivalent is here:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(x):
    <span style="color: #8b0000;">return</span> x - <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>

<span style="color: #8b0000;">print</span> fsolve(objective, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
</pre>
</div>

<pre class="example">
[ 5.]
</pre>

<p>
There is an open question on StackOverflow <a href="http://stackoverflow.com/questions/25471580/can-you-use-a-function-as-an-argument-to-a-python-function-in-pymacs">here</a> on this issue. Overall, I find the project very interesting. It would be awesome if you could extend emacs more easily in other languages, especially scripting languages such as Python that have numerical and plotting capabilities. Right now, this is possible in limited ways. For example, Xah Lee describes an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">approach</a> where an arbitrary script can take data on stdin, process it, and output the results to stdout. Emacs can capture this and use it to modify the buffer. This uses the <code>shell-command</code> features in Emacs. These scripts could be written in Python, Perl, Ruby, etc&#x2026; This seems like a simpler and more flexible approach, except that it requires creating the shell commands and putting them on the executable path (as opposed to having Python modules on a PYTHONPATH). These lack the deep integration of documentation you get with emacs-lisp and Python functions.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Generate emacs-lisp documentation</title>
      <link>http://jkitchin.github.io/blog/2014/10/17/Generate-emacs-lisp-documentation</link>
      <pubDate>Fri, 17 Oct 2014 14:39:49 EDT</pubDate>
      <category><![CDATA[emacs_lisp]]></category>
      <guid isPermaLink="false">h7qO-ywtQxNM2s9adKVNLlz1jb0=</guid>
      <description>Generate emacs-lisp documentation</description>
      <content:encoded><![CDATA[



<p>
Emacs has some pretty amazing features to get help on a function (describe-function), to navigate quickly to functions in an elisp file (speedbar and imenu). Other languages have tools for generating documentation for all the functions in a file, e.g. epydoc, javadoc, Doxygen,&#x2026; I have not found an equivalent to this in emacs-lisp. Here, we explore some options to get something similar to this. Our goal will be to take an emacs-lisp file, and generate an org-file of documentation, and then convert that to PDF for reading.
</p>

<p>
Say we have a function, jmax-bibtex-next-entry, and we want some information about it. Here are three functions that give us the argument list, documentation string, and function definition.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(help-function-arglist 'jmax-bibtex-next-entry)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">&amp;optional</td>
<td class="left">n</td>
</tr>
</tbody>
</table>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(documentation 'jmax-bibtex-next-entry)
</pre>
</div>

<pre class="example">
Jump to the beginning of the next bibtex entry. N is a prefix
argument. If it is numeric, jump that many entries
forward. Negative numbers do nothing.
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(symbol-function 'jmax-bibtex-next-entry)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">(&amp;optional n)</td>
<td class="left">Jump to the beginning of the next bibtex entry. N is a prefix\nargument. If it is numeric, jump that many entries\nforward. Negative numbers do nothing.</td>
<td class="left">(interactive P)</td>
<td class="left">(if (= (point) (save-excursion (bibtex-beginning-of-entry))) (progn (forward-char) (bibtex-next-entry)))</td>
<td class="left">(if (re-search-forward bibtex-entry-head nil t (and (numberp n) n)) (progn (bibtex-beginning-of-entry)))</td>
</tr>
</tbody>
</table>

<p>
That will not always be the code we wrote, but it is functionally similar.
</p>

<p>
So we could create an org-entry like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">fun2org</span> (function-symbol)
  (<span style="color: #8b0000;">let</span> ((args (help-function-arglist function-symbol))
        (doc  (documentation function-symbol))
        (code (symbol-function function-symbol)))
    (format <span style="color: #228b22;">"** %s %s</span>
<span style="color: #228b22;">%s</span>

<span style="color: #228b22;">#+BEGIN_SRC emacs-lisp</span>
<span style="color: #228b22;">%S</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span> function-symbol args doc code)))

(fun2org 'jmax-bibtex-next-entry)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-org"><span style="color: #8b008b;">** jmax-bibtex-next-entry (&amp;optional n)</span>
Jump to the beginning of the next bibtex entry. N is a prefix
argument. If it is numeric, jump that many entries
forward. Negative numbers do nothing.

<span style="color: #ff0000; font-weight: bold;">#+BEGIN_SRC emacs-lisp</span>
<span style="background-color: #b0c4de;">(</span><span style="color: #8b0000; background-color: #b0c4de;">lambda</span><span style="background-color: #b0c4de;"> (</span><span style="color: #4682b4; background-color: #b0c4de;">&amp;optional</span><span style="background-color: #b0c4de;"> n) </span><span style="color: #228b22; background-color: #b0c4de;">"Jump to the beginning of the next bibtex entry. N is a prefix</span><span style="background-color: #b0c4de;">
</span><span style="color: #228b22; background-color: #b0c4de;">argument. If it is numeric, jump that many entries</span><span style="background-color: #b0c4de;">
</span><span style="color: #228b22; background-color: #b0c4de;">forward. Negative numbers do nothing."</span><span style="background-color: #b0c4de;"> (interactive </span><span style="color: #228b22; background-color: #b0c4de;">"P"</span><span style="background-color: #b0c4de;">) (</span><span style="color: #8b0000; background-color: #b0c4de;">if</span><span style="background-color: #b0c4de;"> (= (point) (</span><span style="color: #8b0000; background-color: #b0c4de;">save-excursion</span><span style="background-color: #b0c4de;"> (bibtex-beginning-of-entry))) (</span><span style="color: #8b0000; background-color: #b0c4de;">progn</span><span style="background-color: #b0c4de;"> (forward-char) (bibtex-next-entry))) (</span><span style="color: #8b0000; background-color: #b0c4de;">if</span><span style="background-color: #b0c4de;"> (re-search-forward bibtex-entry-head nil t (and (numberp n) n)) (</span><span style="color: #8b0000; background-color: #b0c4de;">progn</span><span style="background-color: #b0c4de;"> (bibtex-beginning-of-entry))))
</span><span style="color: #ff0000; font-weight: bold;">#+END_SRC</span>
</pre>
</div>

<p>
The code is not that beautifully indented, but it is optional. 
</p>

<p>
For variables, there are similar functions to get their documentation:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(documentation-property 'jmax-bibtex-journal-abbreviations 'variable-documentation)
</pre>
</div>

<pre class="example">
List of (string journal-full-name journal-abbreviation). Find abbreviations at http://cassi.cas.org/search.jsp.
</pre>

<p>
The problem still is, you have to know the variable and function names in advance. I want to take a file, and generate this for each function, and variable. 
</p>

<p>
I posted a question on <a href="http://stackoverflow.com/questions/26330363/how-do-i-get-a-list-of-functions-defined-in-an-emacs-lisp-file/26360946?iemail=1&noredirect=1#26360946">StackOverflow</a> on how to get the functions defined in a file. The most feasible suggestion was to use the variable load-history, which contains a history of the variables and functions loaded, and the files they are in.
</p>

<p>
Here is an example of getting the entries associated with jmax-bibtex.el
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(cdr (assoc <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span> load-history ))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(jmax-bibtex-journal-abbreviations
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-generate-longtitles)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-generate-shorttitles)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-stringify-journal-name)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-set-journal-string)
 jmax-nonascii-latex-replacements
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-replace-nonascii)
 jmax-lower-case-words
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-title-case-article)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-sentence-case-article)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-next-entry)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-previous-entry)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-mode-keys)
 (<span style="color: #8b0000;">provide</span> <span style="color: #cd0000;">.</span> jmax-bibtex))
</pre>
</div>

<p>
Each element in this case is either a variable, defun or provide. Here, we can use this to print some information about the variables defined in this file. I think it is sufficient to check if the element in the list is a symbol, because all the other elements are cons elements. I suppose there are other possibilities, including defcustom, defgroup, defalias, defsubst, and maybe others.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">dolist</span> (element (cdr
                  (assoc
                   <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>
                   load-history )))
  (<span style="color: #8b0000;">when</span> (symbolp element)
    (princ 
    (format <span style="color: #228b22;">"%s</span>
<span style="color: #228b22;">Documentation: %s</span>

<span style="color: #228b22;">"</span> element (documentation-property element 'variable-documentation)))))
</pre>
</div>

<pre class="example">
jmax-bibtex-journal-abbreviations
Documentation: List of (string journal-full-name journal-abbreviation). Find abbreviations at http://cassi.cas.org/search.jsp.

jmax-nonascii-latex-replacements
Documentation: Cons list of non-ascii characters and their LaTeX representations

jmax-lower-case-words
Documentation: List of words to keep lowercase
</pre>

<p>
We can handle functions by checking if an element is a cons cell with a first element of defun.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">dolist</span> (element (cdr
                  (assoc
                   <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>
                   load-history )))
  (<span style="color: #8b0000;">when</span> (and (consp element)
             (eq (car element) 'defun))
    (princ (format <span style="color: #228b22;">"%s is a function\n"</span> (cdr element))))))
</pre>
</div>

<pre class="example">
jmax-bibtex-generate-longtitles is a function
jmax-bibtex-generate-shorttitles is a function
jmax-stringify-journal-name is a function
jmax-set-journal-string is a function
jmax-replace-nonascii is a function
jmax-title-case-article is a function
jmax-sentence-case-article is a function
jmax-bibtex-next-entry is a function
jmax-bibtex-previous-entry is a function
jmax-bibtex-mode-keys is a function
</pre>


<p>
So, we have the important pieces to mash up what I am looking for. Let us refine the goal. I want to create a PDF documentation of what is in an elisp file with a section on variables, and a section on functions. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((elements (cdr
                  (assoc
                   <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>
                   load-history)))
       (vars (-filter 'symbolp elements))
       (funcons (-filter (<span style="color: #8b0000;">lambda</span> (x)
                           (and (consp x)
                                (eq 'defun (car x))))
                         elements))
       (funcs (mapcar 'cdr funcons)))
  (switch-to-buffer <span style="color: #228b22;">"*org-doc*"</span>)
  (erase-buffer)
  (insert (format <span style="color: #228b22;">"#+TITLE: Documentation for %s</span>
<span style="color: #228b22;">#+OPTIONS: toc:nil</span>
<span style="color: #228b22;">\\maketitle</span>
<span style="color: #228b22;">\\tableofcontents</span>
<span style="color: #228b22;">"</span> <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>))
  (insert <span style="color: #228b22;">"* Variables\n"</span>)
  (<span style="color: #8b0000;">dolist</span> (var (sort vars 'string-lessp))
    (insert (format <span style="color: #228b22;">"** %s</span>
<span style="color: #228b22;">Documentation: %s\n\n"</span> var  (documentation-property var 'variable-documentation))))

  (insert <span style="color: #228b22;">"* Functions\n\n"</span>)
  (<span style="color: #8b0000;">dolist</span> (funcs (sort funcs 'string-lessp))
    (insert (format <span style="color: #228b22;">"** %s %s</span>
<span style="color: #228b22;">Documentation: %s</span>

<span style="color: #228b22;">Code:</span>
<span style="color: #228b22;">#+BEGIN_SRC emacs-lisp</span>
<span style="color: #228b22;">%S</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span>
                    funcs
                    (or (help-function-arglist funcs) <span style="color: #228b22;">""</span>)
                    (documentation funcs)
                    (symbol-function funcs))))

  (org-mode)
  (write-file <span style="color: #228b22;">"jmax-bibtex-doc.org"</span>)
  (org-export-to-file 'latex <span style="color: #228b22;">"jmax-bibtex-doc.tex"</span>)
  (org-latex-compile <span style="color: #228b22;">"jmax-bibtex-doc.tex"</span>)
  (kill-buffer <span style="color: #228b22;">"*org-doc*"</span>)
  (kill-buffer <span style="color: #228b22;">"jmax-bibtex-doc.org"</span>))
</pre>
</div>

<p>
Here is the resulting pdf: <a href="/media/2014-10-17-Generate-emacs-lisp-documentation/jmax-bibtex-doc.pdf">jmax-bibtex-doc.pdf</a> . It is not too bad. The code is not beautiful, and it would take some work to get that looking nice. It might be nice to find all instances of '` and replace them with links to variable names, but I leave that for another day. There is also no information about the header comments, but I leave this for another day to.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/17/Generate-emacs-lisp-documentation.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Sentence casing your bibtex entry journal titles</title>
      <link>http://jkitchin.github.io/blog/2014/10/14/Sentence-casing-your-bibtex-entry-journal-titles</link>
      <pubDate>Tue, 14 Oct 2014 08:48:19 EDT</pubDate>
      <category><![CDATA[bib]]></category>
      <guid isPermaLink="false">AJfx6-r6V4FGphWcdqmm0wkJAGU=</guid>
      <description>Sentence casing your bibtex entry journal titles</description>
      <content:encoded><![CDATA[



<p>
I previously talked about <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/10/12/Title-casing-bibtex-entry-journal-titles/">title-casing</a> the titles of journal articles in bibtex entries. Here we describe an alternative transformation: sentence-casing. In sentence case the first word is capitalized, and all others (except proper nouns). We also should capitalize the first word of any subtitles, which we take to be the first word after a :. That is usually correct. We should also ignore any LaTeX commands, or protected words in the title.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-sentence-case-article</span> (<span style="color: #4682b4;">&amp;optional</span> key start end)
  <span style="color: #228b22;">"Convert a bibtex entry article title to sentence-case. The</span>
<span style="color: #228b22;">arguments are optional, and are only there so you can use this</span>
<span style="color: #228b22;">function with `</span><span style="color: #cd0000;">bibtex-map-entries</span><span style="color: #228b22;">' to change all the title</span>
<span style="color: #228b22;">entries in articles."</span>
  (interactive)
  (bibtex-beginning-of-entry)

  (<span style="color: #8b0000;">let*</span> ((title (bibtex-autokey-get-field <span style="color: #228b22;">"title"</span>))
         (words (split-string title))
         (start 0))
    (<span style="color: #8b0000;">when</span>
        (string= <span style="color: #228b22;">"article"</span> (downcase (cdr (assoc <span style="color: #228b22;">"=type="</span> (bibtex-parse-entry)))))
      (setq words (mapcar
                   (<span style="color: #8b0000;">lambda</span> (word)
                     (<span style="color: #8b0000;">if</span>
                         ;; <span style="color: #ff0000; font-weight: bold;">match words containing {} or \ which are probably</span>
                         ;; <span style="color: #ff0000; font-weight: bold;">LaTeX or protected words</span>
                         (string-match <span style="color: #228b22;">"\\$</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">{</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">}</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">\\\\"</span> word)
                         word
                       (s-downcase word)))
                   words))
      
      ;; <span style="color: #ff0000; font-weight: bold;">capitalize first word</span>
      (setf (car words) (s-capitalize (car words)))

      ;; <span style="color: #ff0000; font-weight: bold;">join the words</span>
      (setq title (mapconcat 'identity words <span style="color: #228b22;">" "</span>))

      ;; <span style="color: #ff0000; font-weight: bold;">capitalize a word after a :, eg. a subtitle, and protect it</span>
      (<span style="color: #8b0000;">while</span>
          (string-match <span style="color: #228b22;">"[a-z]:\\s-+</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[A-Z]</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;">"</span> title start)
        (<span style="color: #8b0000;">let</span> ((char (substring title (match-beginning 1) (match-end 1))))
          (setf (substring title (match-beginning 1) (match-end 1))
                (format <span style="color: #228b22;">"%s"</span> (upcase char)))
          (setq start (match-end 1))))
            
      ;; <span style="color: #ff0000; font-weight: bold;">this is defined in doi-utils</span>
      (bibtex-set-field
       <span style="color: #228b22;">"title"</span> title)

      ;; <span style="color: #ff0000; font-weight: bold;">clean and refill entry so it looks nice</span>
      (bibtex-clean-entry)
      (bibtex-fill-entry))))
</pre>
</div>

<pre class="example">
jmax-sentence-case-article
</pre>

<p>
Now, we can easily convert this entry in title-case:
</p>
<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">arroyave-2005-ab-ni</span>,
  <span style="color: #8b008b;">author</span> =       {R. Arroyave and D. Shin and Z.-K. Liu},
  <span style="color: #8b008b;">title</span> =        {Ab Initio Thermodynamic Properties of Stoichiometric
                  Phases in the {Ni-Al} System},
  <span style="color: #8b008b;">journal</span> =      {Acta Materialia },
  <span style="color: #8b008b;">volume</span> =       53,
  <span style="color: #8b008b;">number</span> =       6,
  <span style="color: #8b008b;">pages</span> =        {1809 - 1819},
  <span style="color: #8b008b;">year</span> =         2005,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1016/j.actamat.2004.12.030</span>},
  <span style="color: #8b008b;">url</span> =
                  {http://www.sciencedirect.com/science/article/pii/S1359645404007669},
  <span style="color: #8b008b;">issn</span> =         {1359-6454},
  <span style="color: #8b008b;">keywords</span> =     {Ab initio},
}
</pre>
</div>

<p>
To this in sentence case:
</p>
<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">arroyave-2005-ab-ni</span>,
  <span style="color: #8b008b;">author</span> =       {R. Arroyave and D. Shin and Z.-K. Liu},
  <span style="color: #8b008b;">title</span> =        {Ab initio thermodynamic properties of stoichiometric
                  phases in the {Ni-Al} system},
  <span style="color: #8b008b;">journal</span> =      {Acta Materialia },
  <span style="color: #8b008b;">volume</span> =       53,
  <span style="color: #8b008b;">number</span> =       6,
  <span style="color: #8b008b;">pages</span> =        {1809 - 1819},
  <span style="color: #8b008b;">year</span> =         2005,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1016/j.actamat.2004.12.030</span>},
  <span style="color: #8b008b;">url</span> =
                  {http://www.sciencedirect.com/science/article/pii/S1359645404007669},
  <span style="color: #8b008b;">issn</span> =         {1359-6454},
  <span style="color: #8b008b;">keywords</span> =     {Ab initio},
}
</pre>
</div>

<p>
The function is written so you can use it with bibtex-map-entries to change all the titles in one shot like this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #ff0000; font-weight: bold;">% (bibtex-map-entries 'jmax-sentence-case-article)</span>
</pre>
</div>

<p>
The function is <i>not</i> perfect. For example in this next entry, the chemical symbols Mn, Fe, Co, Ni, are incorrectly lower-cased.
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">arroyo-2010-first-princ</span>,
  <span style="color: #8b008b;">author</span> =       {Arroyo y de Dompablo, M. E. and Lee, Yueh-Lin and
                  Morgan, D.},
  <span style="color: #8b008b;">title</span> =        {First principles investigation of oxygen vacancies
                  in columbite \ce{MNb_2O_6} ({M = Mn, Fe, Co, Ni,
                  Cu})},
  <span style="color: #8b008b;">journal</span> =      {Chemistry of Materials},
  <span style="color: #8b008b;">volume</span> =       22,
  <span style="color: #8b008b;">number</span> =       3,
  <span style="color: #8b008b;">pages</span> =        {906-913},
  <span style="color: #8b008b;">year</span> =         2010,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cm901723j</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://pubs.acs.org/doi/abs/10.1021/cm901723j</span>},
  <span style="color: #8b008b;">eprint</span> =       {http://pubs.acs.org/doi/pdf/10.1021/cm901723j},
}
</pre>
</div>

<p>
Here is the result of sentence casing:
</p>
<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">arroyo-2010-first-princ</span>,
  <span style="color: #8b008b;">author</span> =       {Arroyo y de Dompablo, M. E. and Lee, Yueh-Lin and
                  Morgan, D.},
  <span style="color: #8b008b;">title</span> =        {First principles investigation of oxygen vacancies
                  in columbite \ce{MNb_2O_6} ({M = mn, fe, co, ni,
                  Cu})},
  <span style="color: #8b008b;">journal</span> =      {Chemistry of Materials},
  <span style="color: #8b008b;">volume</span> =       22,
  <span style="color: #8b008b;">number</span> =       3,
  <span style="color: #8b008b;">pages</span> =        {906-913},
  <span style="color: #8b008b;">year</span> =         2010,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cm901723j</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://pubs.acs.org/doi/abs/10.1021/cm901723j</span>},
  <span style="color: #8b008b;">eprint</span> =       {http://pubs.acs.org/doi/pdf/10.1021/cm901723j},
}
</pre>
</div>

<p>
The Cu is not lower-cased because it has a } attached to it after the title is split into words. The original entry is not properly formatted, in my opinion. I was lazy in wrapping the whole string in braces, {M = Mn, Fe, Co, Ni, Cu}, to protect the capitalization of the elements in bibtex. The correct way to do this is the more verbose: {M} = {M}n, {F}e, {C}o, {N}i, {C}u, where each letter is individually protected.
</p>

<p>
Still, the function can save a lot of keystrokes. You should still inspect the final results, to catch any unusual modifications. You do have your bibtex file under version control right?
</p>

<p>
This function can also be found at <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/14/Sentence-casing-your-bibtex-entry-journal-titles.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Navigating your bibtex file</title>
      <link>http://jkitchin.github.io/blog/2014/10/13/Navigating-your-bibtex-file</link>
      <pubDate>Mon, 13 Oct 2014 10:22:27 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">KaBIqwpzObifsEczKwvSTdV_ZrU=</guid>
      <description>Navigating your bibtex file</description>
      <content:encoded><![CDATA[



<p>
You may be able to tell I am spending some time cleaning up bibtex files these days. One of the things I need to do is navigate around a bibtex file easily. There are some built-in navigation keys within an entry.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">navigation</th>
<th scope="col" class="left">key strokes</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">next field</td>
<td class="left">C-j</td>
</tr>

<tr>
<td class="left">end of field</td>
<td class="left">TAB</td>
</tr>

<tr>
<td class="left">beginning of entry</td>
<td class="left">C-M-a</td>
</tr>

<tr>
<td class="left">end of entry</td>
<td class="left">C-M-e</td>
</tr>
</tbody>
</table>

<p>
I am not aware of an easy way to navigate to the next or previous entry though. I would like something simple to do that. There is a regexp defined in bibtex "bibtex-entry-head", to search for the next or previous entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">bibtex-entry-head
</pre>
</div>

<pre class="example">
^[      ]*\(@[  ]*\(?:\(?:Article\|Book\(?:let\)?\|In\(?:Book\|Collection\|Proceedings\)\|M\(?:a\(?:nual\|stersThesis\)\|isc\)\|P\(?:\(?:hdThesi\|roceeding\)s\)\|TechReport\|Unpublished\)\)\)[        ]*[({][         
]*\([][[:alnum:].:;?!`'/*@+|()&lt;&gt;&amp;_^$-]+\)
</pre>

<p>
Here are two functions that do it. This was a little more subtle than I anticipated.  The subtlety comes about if you are at the beginning of the entry, we need to move the cursor by a character, and then search forward because of the way re-search-forward works. I also wrote in an option for a prefix argument, so you can go forward or backward several entries.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">bibtex-next-entry</span> (<span style="color: #4682b4;">&amp;optional</span> n)
  <span style="color: #228b22;">"Jump to the beginning of the next bibtex entry. N is a prefix</span>
<span style="color: #228b22;">argument. If it is numeric, jump that many entries</span>
<span style="color: #228b22;">forward. Negative numbers do nothing."</span>
  (interactive <span style="color: #228b22;">"P"</span>)
  ;; <span style="color: #ff0000; font-weight: bold;">Note if we start at the beginning of an entry, nothing</span>
  ;; <span style="color: #ff0000; font-weight: bold;">happens. We need to move forward a char, and call again.</span>
  (<span style="color: #8b0000;">when</span> (= (point) (<span style="color: #8b0000;">save-excursion</span>
                     (bibtex-beginning-of-entry)))
    (forward-char)
    (bibtex-next-entry))

  ;; <span style="color: #ff0000; font-weight: bold;">search forward for an entry </span>
  (<span style="color: #8b0000;">when</span> 
      (re-search-forward bibtex-entry-head nil t (and (numberp n) n))
    ;; <span style="color: #ff0000; font-weight: bold;">go to beginning of the entry</span>
    (bibtex-beginning-of-entry)))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">bibtex-previous-entry</span> (<span style="color: #4682b4;">&amp;optional</span> n)
  <span style="color: #228b22;">"Jump to beginning of the previous bibtex entry. N is a prefix</span>
<span style="color: #228b22;">argument. If it is numeric, jump that many entries back."</span>
  (interactive <span style="color: #228b22;">"P"</span>)
  (bibtex-beginning-of-entry)
 (<span style="color: #8b0000;">when</span> 
     (re-search-backward bibtex-entry-head nil t (and (numberp n) n))
   (bibtex-beginning-of-entry)))
</pre>
</div>

<pre class="example">
bibtex-previous-entry
</pre>

<p>
That is pretty simple. Let us go ahead and bind these to M-n, and M-p, but only in bibtex-mode. Thanks to <a href="http://ergoemacs.org/emacs/emacs_set_keys_for_major_mode.html">Xah Lee</a> for this idea. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-mode-keys</span> ()
  <span style="color: #228b22;">"Modify keymaps used by `</span><span style="color: #cd0000;">bibtex-mode</span><span style="color: #228b22;">'."</span>
  (local-set-key (kbd <span style="color: #228b22;">"M-n"</span>) 'bibtex-next-entry)
  (local-set-key (kbd <span style="color: #228b22;">"M-p"</span>) 'bibtex-previous-entry))

;; <span style="color: #ff0000; font-weight: bold;">add to bibtex-mode-hook</span>
(add-hook 'bibtex-mode-hook 'jmax-bibtex-mode-keys)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">jmax-bibtex-mode-keys</td>
</tr>
</tbody>
</table>

<p>
Now, C-n moves forward an entry, C-u 2 C-n moves you two entries, etc&#x2026; and C-p moves you back an entry, while C-u 2 C-p moves you back two entries. 
</p>

<p>
Finally, I sometimes want to jump to a field in an entry. Basically, I want a completion enabled function that lists the fields in the current entry, and then jumps to the selected field. Yes, you could simply do an incremental search forward or backward that is about as simple. But, then I would not get to remind myself how to do a completion command ;)
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-get-fields</span> ()
  <span style="color: #228b22;">"Get a list of fields in a bibtex entry."</span>
  (bibtex-beginning-of-entry)
  (remove <span style="color: #228b22;">"=type="</span>
          (remove <span style="color: #228b22;">"=key="</span>
                  (mapcar 'car (bibtex-parse-entry)))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-jump-to-field</span> (field)
  <span style="color: #228b22;">"Jump to FIELD in the current bibtex entry"</span>
  (interactive
   (list
    (ido-completing-read <span style="color: #228b22;">"Field: "</span> (jmax-bibtex-get-fields))))
  (<span style="color: #8b0000;">save-restriction</span>
    (bibtex-narrow-to-entry)
    (bibtex-beginning-of-entry)
    (<span style="color: #8b0000;">when</span>
        ;; <span style="color: #ff0000; font-weight: bold;">fields start with spaces, a field name, possibly more</span>
        ;; <span style="color: #ff0000; font-weight: bold;">spaces, then =</span>
        (re-search-forward (format <span style="color: #228b22;">"^\\s-*%s\\s-*="</span> field) nil t))))
</pre>
</div>

<pre class="example">
jmax-bibtex-jump-to-field
</pre>

<p>
These functions live in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> , which is the version we use on a regular basis.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/13/Navigating-your-bibtex-file.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Title casing bibtex entry journal titles</title>
      <link>http://jkitchin.github.io/blog/2014/10/12/Title-casing-bibtex-entry-journal-titles</link>
      <pubDate>Sun, 12 Oct 2014 09:23:17 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">m94rowIK5jHo6S-Aoj10V0fKTr8=</guid>
      <description>Title casing bibtex entry journal titles</description>
      <content:encoded><![CDATA[



<p>
I mostly love bibtex. You keep bibliographic entries in a central file, and you can cite them in your writing. Bibtex takes care of <i>most</i> of the formatting for you, but not always all of it. Lately, we have been writing some manuscripts for submission to ACS journals. They want the titles of journal articles included in the bibliography, preferrably in title-case, or in sentence case, but all the same format either way. Unfortunately, the achemso.bst bibtex format does not make this happen. You have to title-case or sentence case the titles themselves in your bibtex file. Well, at least we can get Emacs to do the heavy lifting on that for us. 
</p>

<p>
First, the manual approach. Open your bibtex file, navigate to a title field, put your cursor on the first letter of the title, and press M-c until you get to the end of the title. That runs (capitalize-word). For a few titles, you might just do this. It does not take long.
</p>

<p>
For a lot of entries though, you might prefer some code to do it. Here we consider how to convert all article titles to Title case. The current code can be found at <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> .
</p>

<p>
First, we need to decide on some rules. We will capitalize every word in a title except for words like a, an, the, &#x2026; unless they start the title. We do not want to change words with $, {} in them, or \, because these are either protected or LaTeX commands and we probably do not want to change them. The gist of our idea is to get the title, split it into words, capitalize each word that needs to be,  join the words together, and then set the entry title to the new capitalized title. 
</p>

<p>
We use functions from <a href="https://github.com/magnars/s.el">s.el</a> , and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">jmax-lower-case-words</span>
  '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"an"</span> <span style="color: #228b22;">"on"</span> <span style="color: #228b22;">"and"</span> <span style="color: #228b22;">"for"</span>
    <span style="color: #228b22;">"the"</span> <span style="color: #228b22;">"of"</span> <span style="color: #228b22;">"in"</span>)
  <span style="color: #228b22;">"List of words to keep lowercase"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-title-case-article</span> (<span style="color: #4682b4;">&amp;optional</span> key start end)
  <span style="color: #228b22;">"Convert a bibtex entry article title to title-case. The</span>
<span style="color: #228b22;">arguments are optional, and are only there so you can use this</span>
<span style="color: #228b22;">function with `</span><span style="color: #cd0000;">bibtex-map-entries</span><span style="color: #228b22;">' to change all the title</span>
<span style="color: #228b22;">entries in articles."</span>
  (interactive)
  (bibtex-beginning-of-entry)

  (<span style="color: #8b0000;">let*</span> ((title (bibtex-autokey-get-field <span style="color: #228b22;">"title"</span>))
         (words (split-string title))
         (lower-case-words '(<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"an"</span> <span style="color: #228b22;">"on"</span> <span style="color: #228b22;">"and"</span> <span style="color: #228b22;">"for"</span>
                             <span style="color: #228b22;">"the"</span> <span style="color: #228b22;">"of"</span> <span style="color: #228b22;">"in"</span>)))
    (<span style="color: #8b0000;">when</span>
        (string= <span style="color: #228b22;">"article"</span> (downcase (cdr (assoc <span style="color: #228b22;">"=type="</span> (bibtex-parse-entry)))))
      (setq words (mapcar
                   (<span style="color: #8b0000;">lambda</span> (word)
                     (<span style="color: #8b0000;">if</span> (or
                          ;; <span style="color: #ff0000; font-weight: bold;">match words containing {} or \ which are probably</span>
                          ;; <span style="color: #ff0000; font-weight: bold;">LaTeX or protected words</span>
                          (string-match <span style="color: #228b22;">"\\$</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">{</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">}</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">|</span><span style="color: #228b22;">\\\\"</span> word)
                          ;; <span style="color: #ff0000; font-weight: bold;">these words should not be capitalized, unless they</span>
                          ;; <span style="color: #ff0000; font-weight: bold;">are the first word</span>
                          (-contains? lower-case-words (s-downcase word)))
                         word
                       (s-capitalize word)))
                   words))

      ;; <span style="color: #ff0000; font-weight: bold;">Check if first word should be capitalized</span>
      (<span style="color: #8b0000;">when</span> (-contains? jmax-lower-case-words (car words))
        (setf (car words) (s-capitalize (car words))))
            
      ;; <span style="color: #ff0000; font-weight: bold;">this is defined in doi-utils</span>
      (bibtex-set-field
       <span style="color: #228b22;">"title"</span>
       (mapconcat 'identity words <span style="color: #228b22;">" "</span>))
      (bibtex-fill-entry))))
</pre>
</div>

<pre class="example">
jmax-title-case-article
</pre>


<p>
Now, a single command converts this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">campbell-2013-enthal-entrop</span>,
  <span style="color: #8b008b;">author</span> =       {Charles T. Campbell and Jason R. V. Sellers},
  <span style="color: #8b008b;">title</span> =        {Enthalpies and entropies of adsorption on
                  well-defined oxide surfaces: experimental
                  measurements},
  <span style="color: #8b008b;">journal</span> =      CR,
  <span style="color: #8b008b;">volume</span> =       113,
  <span style="color: #8b008b;">number</span> =       6,
  <span style="color: #8b008b;">pages</span> =        {4106-4135},
  <span style="color: #8b008b;">year</span> =         2013,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cr300329s</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1021/cr300329s</span>},
  <span style="color: #8b008b;">month</span> =        6,
}
</pre>
</div>

<p>
to this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">campbell-2013-enthal-entrop</span>,
  <span style="color: #8b008b;">author</span> =       {Charles T. Campbell and Jason R. V. Sellers},
  <span style="color: #8b008b;">title</span> =        {Enthalpies and Entropies of Adsorption on
                  Well-defined Oxide Surfaces: Experimental
                  Measurements},
  <span style="color: #8b008b;">journal</span> =      CR,
  <span style="color: #8b008b;">volume</span> =       113,
  <span style="color: #8b008b;">number</span> =       6,
  <span style="color: #8b008b;">pages</span> =        {4106-4135},
  <span style="color: #8b008b;">year</span> =         2013,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cr300329s</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1021/cr300329s</span>},
  <span style="color: #8b008b;">month</span> =        6,
}
</pre>
</div>

<p>
We wrote the title case function so we can use it with bibtex-map-entries. That means we can fix every entry in a file by putting a comment at the top like this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #ff0000; font-weight: bold;">% (bibtex-map-entries 'jmax-title-case-article)  &lt;- put cursor here. C-x C-e</span>
</pre>
</div>

<p>
The function is not perfect, and does not include every word that should not be capitalized. You will still want to review your entries, but hopefully this saves some typing in the end.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/12/Title-casing-bibtex-entry-journal-titles.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Abbreviated journal names in bibtex</title>
      <link>http://jkitchin.github.io/blog/2014/10/11/Abbreviated-journal-names-in-bibtex</link>
      <pubDate>Sat, 11 Oct 2014 17:31:59 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">hIlJ3pTaapHY6Y7BGGC1XcWOeo8=</guid>
      <description>Abbreviated journal names in bibtex</description>
      <content:encoded><![CDATA[



<p>
Some journals require abbreviated journal names in the bibliography, and some require full names. Unfortunately, it is not possible to have both in your bibtex file. Or is it&#x2026;
</p>

<p>
It is possible to define a <a href="http://www.bibtex.org/Format/">@string</a> that is replaced in your bibtex file. If we have the definition of the @string in a separate file, we can specify its definition there, e.g. as an abbreviation, or as the full name. To make this useful, we need a simple way to add new journals, and to generate the definitions. 
</p>

<p>
First, you can find accepted journal name abbreviations here: <a href="http://cassi.cas.org/search.jsp">http://cassi.cas.org/search.jsp</a> . 
</p>

<p>
We are going to define a variable to hold the string definition, journal full name and an abbreviation. You can find our production version of what follows here: <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el</a> 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">jmax-bibtex-abbreviations</span>
  '((<span style="color: #228b22;">"ACAT"</span> <span style="color: #228b22;">"ACS Catalysis"</span> <span style="color: #228b22;">"ACS Catal."</span>)
    (<span style="color: #228b22;">"AM"</span> <span style="color: #228b22;">"Acta Materialia"</span> <span style="color: #228b22;">"Acta Mater."</span>)
    (<span style="color: #228b22;">"AMM"</span> <span style="color: #228b22;">"Acta Metallurgica et Materialia"</span> <span style="color: #228b22;">"Acta Metall. Mater."</span>)
    (<span style="color: #228b22;">"AMiner"</span> <span style="color: #228b22;">"American Mineralogist"</span> <span style="color: #228b22;">"Am. Mineral."</span>)
    (<span style="color: #228b22;">"AngC"</span> <span style="color: #228b22;">"Angewandte Chemie-International Edition"</span> <span style="color: #228b22;">"Angew. Chem. Int. Edit."</span>)
    (<span style="color: #228b22;">"APLM"</span> <span style="color: #228b22;">"APL Materials"</span> <span style="color: #228b22;">"APL Mat."</span>)
    (<span style="color: #228b22;">"ACBE"</span> <span style="color: #228b22;">"Applied Catalysis B: Environmental"</span> <span style="color: #228b22;">"Appl. Catal. B-Environ."</span>)
    (<span style="color: #228b22;">"APL"</span> <span style="color: #228b22;">"Applied Physics Letters"</span> <span style="color: #228b22;">"Appl. Phys. Lett."</span>)
    (<span style="color: #228b22;">"ASS"</span> <span style="color: #228b22;">"Applied Surface Science"</span> <span style="color: #228b22;">"Appl. Surf. Sci."</span>)
    (<span style="color: #228b22;">"CL"</span> <span style="color: #228b22;">"Catalysis Letters"</span> <span style="color: #228b22;">"Catal. Lett."</span>)
    (<span style="color: #228b22;">"CT"</span> <span style="color: #228b22;">"Catalysis Today"</span> <span style="color: #228b22;">"Catal. Today"</span>)
    (<span style="color: #228b22;">"CPL"</span> <span style="color: #228b22;">"Chemical Physics Letters"</span> <span style="color: #228b22;">"Chem. Phys. Lett"</span>)
    (<span style="color: #228b22;">"CR"</span> <span style="color: #228b22;">"Chemical Reviews"</span> <span style="color: #228b22;">"Chem. Rev."</span>)
    (<span style="color: #228b22;">"CSR"</span> <span style="color: #228b22;">"Chemical Society Reviews"</span> <span style="color: #228b22;">"Chem. Soc. Rev."</span>)
    (<span style="color: #228b22;">"CSR"</span> <span style="color: #228b22;">"Chemical Society Reviews"</span> <span style="color: #228b22;">"Chem. Soc. Rev."</span>)
    (<span style="color: #228b22;">"CM"</span> <span style="color: #228b22;">"Chemistry of Materials"</span> <span style="color: #228b22;">"Chem. Mater."</span>)
    (<span style="color: #228b22;">"CSA"</span> <span style="color: #228b22;">"Colloids and Surfaces, A: Physicochemical and Engineering Aspects"</span> <span style="color: #228b22;">"Colloids Surf., A"</span>)
    (<span style="color: #228b22;">"CPMS"</span> <span style="color: #228b22;">"Computational Materials Science"</span> <span style="color: #228b22;">"Comp. Mater. Sci."</span>)
    (<span style="color: #228b22;">"CPC"</span> <span style="color: #228b22;">"Computer Physics Communications"</span> <span style="color: #228b22;">"Comput. Phys. Commun."</span>)
    (<span style="color: #228b22;">"CGD"</span> <span style="color: #228b22;">"Crystal Growth \\&amp; Design"</span> <span style="color: #228b22;">"Cryst. Growth Des."</span>)
    (<span style="color: #228b22;">"CEC"</span> <span style="color: #228b22;">"CrystEngComm"</span> <span style="color: #228b22;">"CrystEngComm"</span>)
    (<span style="color: #228b22;">"ECST"</span> <span style="color: #228b22;">"ECS Transactions"</span> <span style="color: #228b22;">"ECS Trans."</span>)
    (<span style="color: #228b22;">"EES"</span> <span style="color: #228b22;">"Energy \\&amp; Environmental Science"</span> <span style="color: #228b22;">"Energy Environ. Sci."</span>)
    (<span style="color: #228b22;">"HPR"</span> <span style="color: #228b22;">"High Pressure Research"</span> <span style="color: #228b22;">"High Pressure Res."</span>)
    (<span style="color: #228b22;">"IC"</span> <span style="color: #228b22;">"Inorganic Chemistry"</span> <span style="color: #228b22;">"Inorg. Chem."</span>)
    (<span style="color: #228b22;">"IECR"</span> <span style="color: #228b22;">"Industrial \\&amp; Engineering Chemistry Research"</span> <span style="color: #228b22;">"Ind. Eng. Chem. Res."</span>)
    (<span style="color: #228b22;">"JJAP"</span> <span style="color: #228b22;">"Japanese Journal of Applied Physics"</span> <span style="color: #228b22;">"Jpn. J. Appl. Phys."</span>)
    (<span style="color: #228b22;">"JMatR"</span> <span style="color: #228b22;">"Journal of  Materials Research"</span> <span style="color: #228b22;">"J. Mater. Res."</span>)
    (<span style="color: #228b22;">"JALC"</span> <span style="color: #228b22;">"Journal of Alloys and Compounds"</span> <span style="color: #228b22;">"J. Alloy Compd."</span>)
    (<span style="color: #228b22;">"JAC"</span> <span style="color: #228b22;">"Journal of Applied Crystallography"</span> <span style="color: #228b22;">"J. Appl. Crystallogr."</span>)
    (<span style="color: #228b22;">"JAP"</span> <span style="color: #228b22;">"Journal of Applied Physics"</span> <span style="color: #228b22;">"J. Appl. Phys."</span>)
    (<span style="color: #228b22;">"JC"</span> <span style="color: #228b22;">"Journal of Catalysis"</span> <span style="color: #228b22;">"J. Catal."</span>)
    (<span style="color: #228b22;">"JCP"</span> <span style="color: #228b22;">"Journal of Chemical Physics"</span> <span style="color: #228b22;">"J. Chem. Phys."</span>)
    (<span style="color: #228b22;">"JCG"</span> <span style="color: #228b22;">"Journal of Crystal Growth"</span> <span style="color: #228b22;">"J. Crys. Growth"</span>)
    (<span style="color: #228b22;">"JMC"</span> <span style="color: #228b22;">"Journal of Materials Chemistry"</span> <span style="color: #228b22;">"J. Mater. Chem."</span>)
    (<span style="color: #228b22;">"JMC"</span> <span style="color: #228b22;">"Journal of Materials Chemistry"</span> <span style="color: #228b22;">"J. Mater. Chem."</span>)
    (<span style="color: #228b22;">"JMSL"</span> <span style="color: #228b22;">"Journal of Materials Science Letters"</span> <span style="color: #228b22;">"J. Mater. Sci. Lett."</span>)
    (<span style="color: #228b22;">"JMS"</span> <span style="color: #228b22;">"Journal of Membrane Science"</span> <span style="color: #228b22;">"J. Memb. Sci."</span>)
    (<span style="color: #228b22;">"JPE"</span> <span style="color: #228b22;">"Journal of Phase Equilibria"</span> <span style="color: #228b22;">"J. Phase Equilib."</span>)
    (<span style="color: #228b22;">"JPCS"</span> <span style="color: #228b22;">"Journal of Physics and Chemistry of Solids"</span> <span style="color: #228b22;">"J. Phys. Chem. Solids"</span>)
    (<span style="color: #228b22;">"JPCM"</span> <span style="color: #228b22;">"Journal of Physics: Condensed Matter"</span> <span style="color: #228b22;">"J. Phys.: Condens. Matter"</span>)
    (<span style="color: #228b22;">"JSSC"</span> <span style="color: #228b22;">"Journal of Solid State Chemistry"</span> <span style="color: #228b22;">"J. Solid State Chem."</span>)
    (<span style="color: #228b22;">"JACerS"</span> <span style="color: #228b22;">"Journal of the American Ceramic Society"</span> <span style="color: #228b22;">"J. Am. Ceram. Soc."</span>)
    (<span style="color: #228b22;">"JACS"</span> <span style="color: #228b22;">"Journal of the American Chemical Society"</span> <span style="color: #228b22;">"J. Am. Chem. Soc."</span>)
    (<span style="color: #228b22;">"JES"</span> <span style="color: #228b22;">"Journal of The Electrochemical Society"</span> <span style="color: #228b22;">"J. Electrochem. Soc."</span>)
    (<span style="color: #228b22;">"JES"</span> <span style="color: #228b22;">"Journal of The Electrochemical Society"</span> <span style="color: #228b22;">"J. Electrochem. Soc."</span>)
    (<span style="color: #228b22;">"JMS"</span> <span style="color: #228b22;">"Journal of Membrane Science"</span> <span style="color: #228b22;">"J. Memb. Sci."</span>)
    (<span style="color: #228b22;">"JVST"</span> <span style="color: #228b22;">"Journal of Vacuum Science \\&amp; Technology A"</span> <span style="color: #228b22;">"J. Vac. Sci. Technol. A"</span>)
    (<span style="color: #228b22;">"ML"</span> <span style="color: #228b22;">"Materials Letters"</span> <span style="color: #228b22;">"Mater. Lett."</span>)
    (<span style="color: #228b22;">"MSE-BS"</span> <span style="color: #228b22;">"Materials Science and Engineering B"</span> <span style="color: #228b22;">"Mat. Sci. Eng. B-Solid"</span>)
    (<span style="color: #228b22;">"MOLSIM"</span> <span style="color: #228b22;">"Molecular Simulation"</span> <span style="color: #228b22;">"Mol. Sim."</span>)
    (<span style="color: #228b22;">"Nature"</span> <span style="color: #228b22;">"Nature"</span> <span style="color: #228b22;">"Nature"</span>)
    (<span style="color: #228b22;">"NM"</span> <span style="color: #228b22;">"Nature Materials"</span> <span style="color: #228b22;">"Nat. Mater."</span>)
    (<span style="color: #228b22;">"PML"</span> <span style="color: #228b22;">"Philosophical Magazine Letters"</span> <span style="color: #228b22;">"Phil. Mag. Lett."</span>)
    (<span style="color: #228b22;">"PMA"</span> <span style="color: #228b22;">"Philosophical Magazine A"</span> <span style="color: #228b22;">"Phil. Mag. A"</span>)
    (<span style="color: #228b22;">"PA"</span> <span style="color: #228b22;">"Physica A: Statistical Mechanics and its Applications"</span> <span style="color: #228b22;">"Physica A"</span>)
    (<span style="color: #228b22;">"PB"</span> <span style="color: #228b22;">"Physica B-Condensed Matter"</span> <span style="color: #228b22;">"Physica B"</span>)
    (<span style="color: #228b22;">"PCCP"</span> <span style="color: #228b22;">"Physical Chemistry Chemical Physics"</span> <span style="color: #228b22;">"Phys. Chem. Chem. Phys."</span>)
    (<span style="color: #228b22;">"PSSB"</span> <span style="color: #228b22;">"physica status solidi (b)"</span> <span style="color: #228b22;">"Phys. Status Solidi B"</span>)
    (<span style="color: #228b22;">"PRA"</span> <span style="color: #228b22;">"Physical Review A"</span> <span style="color: #228b22;">"Phys. Rev. A"</span>)
    (<span style="color: #228b22;">"PRB"</span> <span style="color: #228b22;">"Physical Review B"</span> <span style="color: #228b22;">"Phys. Rev. B"</span>)
    (<span style="color: #228b22;">"PRL"</span> <span style="color: #228b22;">"Physical Review Letters"</span> <span style="color: #228b22;">"Phys. Rev. Lett."</span>)
    (<span style="color: #228b22;">"PCM"</span> <span style="color: #228b22;">"Physics and Chemistry of Minerals"</span> <span style="color: #228b22;">"Phys. Chem. Miner."</span>)
    (<span style="color: #228b22;">"PSurfSci"</span> <span style="color: #228b22;">"Progress in Surface Science"</span> <span style="color: #228b22;">"Prog. Surf. Sci."</span>)
    (<span style="color: #228b22;">"Science"</span> <span style="color: #228b22;">"Science"</span> <span style="color: #228b22;">"Science"</span>)
    (<span style="color: #228b22;">"SABC"</span> <span style="color: #228b22;">"Sensors and Actuators B: Chemical"</span> <span style="color: #228b22;">"Sensor. Actuat. B-Chem."</span>)
    (<span style="color: #228b22;">"SS"</span> <span style="color: #228b22;">"Surface Science"</span> <span style="color: #228b22;">"Surf. Sci."</span>)
    (<span style="color: #228b22;">"EPJB"</span> <span style="color: #228b22;">"The European Physical Journal B"</span> <span style="color: #228b22;">"Eur. Phys. J. B"</span>)
    (<span style="color: #228b22;">"JPC"</span> <span style="color: #228b22;">"The Journal of Physical Chemistry"</span> <span style="color: #228b22;">"J. Phys. Chem."</span>)
    (<span style="color: #228b22;">"JPCB"</span> <span style="color: #228b22;">"The Journal of Physical Chemistry  B"</span> <span style="color: #228b22;">"J. Phys. Chem. B"</span>)
    (<span style="color: #228b22;">"JPCC"</span> <span style="color: #228b22;">"The Journal of Physical Chemistry C"</span> <span style="color: #228b22;">"J. Phys. Chem. C"</span>)
    (<span style="color: #228b22;">"JCP"</span> <span style="color: #228b22;">"The Journal of Chemical Physics"</span> <span style="color: #228b22;">"J. Chem. Phys."</span>)
    (<span style="color: #228b22;">"TSF"</span> <span style="color: #228b22;">"Thin Solid Films"</span> <span style="color: #228b22;">"Thin Solid Films"</span>)
    (<span style="color: #228b22;">"TC"</span> <span style="color: #228b22;">"Topics in Catalysis"</span> <span style="color: #228b22;">"Top. Catal."</span>)
    (<span style="color: #228b22;">"WR"</span> <span style="color: #228b22;">"Water Research"</span> <span style="color: #228b22;">"Water Res."</span>))
  <span style="color: #228b22;">"List of (string journal-full-name journal-abbreviation)"</span>)
</pre>
</div>

<pre class="example">
bibtex-abbreviations
</pre>

<p>
This data structure will serve a few purposes.
</p>

<ol class="org-ol">
<li>We will generate the bib files that define the @string definitions
</li>
<li>We will use it to modify bibtex files to use those strings.
</li>
</ol>

<p>
First, here are some simple functions to generate the @string definitions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-generate-longtitles</span> ()
  (interactive)
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"longtitles.bib"</span>
    (<span style="color: #8b0000;">dolist</span> (row bibtex-abbreviations)
      (insert (format <span style="color: #228b22;">"@string{%s=\"%s\"}\n"</span>
                      (nth 0 row)
                      (nth 1 row))))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-bibtex-generate-shorttitles</span> ()
  (interactive)
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"shorttitles.bib"</span>
    (<span style="color: #8b0000;">dolist</span> (row bibtex-abbreviations)
      (insert (format <span style="color: #228b22;">"@string{%s=\"%s\"}\n"</span>
                      (nth 0 row)
                      (nth 2 row))))))
</pre>
</div>

<pre class="example">
jmax-bibtex-generate-shorttitles
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(jmax-bibtex-generate-longtitles)
(jmax-bibtex-generate-shorttitles)
</pre>
</div>

<p>
Here are the results of running that code: <a href="/media/2014-10-11-Abbreviated-journal-names-in-bibtex/shorttitles.bib">shorttitles.bib</a> and <a href="/media/2014-10-11-Abbreviated-journal-names-in-bibtex/longtitles.bib">longtitles.bib</a> . This is the first step. We have the @strings defined. Now, we need to convert the names in a bibtex entry to use our string. We want to replace full names and abbreviated names with the @string.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">jmax-stringify-journal-name</span> (<span style="color: #4682b4;">&amp;optional</span> key start end)
  <span style="color: #228b22;">"replace journal name with a string. The strings are defined in `</span><span style="color: #cd0000;">bibtex-abbreviations</span><span style="color: #228b22;">'."</span>
  (interactive)
  (bibtex-beginning-of-entry)
  (<span style="color: #8b0000;">when</span>
      (string= <span style="color: #228b22;">"article"</span>
               (downcase
                (cdr (assoc <span style="color: #228b22;">"=type="</span> (bibtex-parse-entry)))))
    (<span style="color: #8b0000;">let*</span> ((full-names (mapcar
                        (<span style="color: #8b0000;">lambda</span> (row)
                          (cons  (nth 1 row) (nth 0 row)))
                        bibtex-abbreviations))
           (abbrev-names (mapcar
                          (<span style="color: #8b0000;">lambda</span> (row)
                            (cons  (nth 2 row) (nth 0 row)))
                          bibtex-abbreviations))
           (journal (s-trim (bibtex-autokey-get-field <span style="color: #228b22;">"journal"</span>)))
           (bstring (or
                     (cdr (assoc journal full-names))
                     (cdr (assoc journal abbrev-names)))))
      (<span style="color: #8b0000;">when</span> bstring
        (bibtex-set-field <span style="color: #228b22;">"journal"</span> bstring t)
        (bibtex-fill-entry)))))
</pre>
</div>

<pre class="example">
jmax-stringify-journal-name
</pre>

<p>
Now, with a single command, we can convert this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">lizzit-2001-surfac-ru</span>,
  <span style="color: #8b008b;">author</span> =       {S. Lizzit and A. Baraldi and A. Groso and K. Reuter
                  and M. Ganduglia-Pirovano and C. Stampfl and
                  M. Scheffler and M. Stichler and C. Keller and
                  W. Wurth and D. Menzel},
  <span style="color: #8b008b;">title</span> =        {Surface Core-level Shifts of Clean and
                  Oxygen-covered {R}u(0001)},
  <span style="color: #8b008b;">journal</span> =      {Physical Review B,
  <span style="color: #8b008b;">volume</span> =       63,
  <span style="color: #8b008b;">number</span> =       20,
  <span style="color: #8b008b;">pages</span> =        {nil},
  <span style="color: #8b008b;">year</span> =         2001,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1103/physrevb.63.205419</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1103/PhysRevB.63.205419</span>},
  <span style="color: #8b008b;">month</span> =        5,
}
</pre>
</div>

<p>
into this:
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">lizzit-2001-surfac-ru</span>,
  <span style="color: #8b008b;">author</span> =       {S. Lizzit and A. Baraldi and A. Groso and K. Reuter
                  and M. Ganduglia-Pirovano and C. Stampfl and
                  M. Scheffler and M. Stichler and C. Keller and
                  W. Wurth and D. Menzel},
  <span style="color: #8b008b;">title</span> =        {Surface Core-level Shifts of Clean and
                  Oxygen-covered {R}u(0001)},
  <span style="color: #8b008b;">journal</span> =      PRB,
  <span style="color: #8b008b;">volume</span> =       63,
  <span style="color: #8b008b;">number</span> =       20,
  <span style="color: #8b008b;">pages</span> =        {nil},
  <span style="color: #8b008b;">year</span> =         2001,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1103/physrevb.63.205419</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1103/PhysRevB.63.205419</span>},
  <span style="color: #8b008b;">month</span> =        5,
}
</pre>
</div>

<p>
If you have a lot of entries you want to modify, you can use bibtex-map-entries like this. Basically, put the elisp form in a comment, and then execute the elisp form
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #ff0000; font-weight: bold;">%% (bibtex-map-entries 'jmax-stringify-journal-name)  &lt;- put cursor here. C-x C-e</span>
</pre>
</div>

<p>
This saves some effort. Over time, I will keep adding entries to the abbreviation table. As long as a standard journal name or abbreviation is in your bibtex file, this approach should work pretty well. After you replace the journal names with @string entries, you have to generate the string file, either shorttitles.bib or longtitles.bib, and in your LaTeX file, change your bibliography line to:
</p>

<div class="org-src-container">

<pre class="src src-latex"><span style="color: #8b0000;">\bibliography</span>{<span style="color: #cd0000;">shorttitles,references</span>}
</pre>
</div>

<p>
The order is important. The @string definitions are in shorttitles.bib, and your bibtex entries in references.bib.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/11/Abbreviated-journal-names-in-bibtex.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
  </channel>
</rss>
