<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Mon, 18 Apr 2016 15:24:27 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Code completion in HyDE</title>
      <link>http://jkitchin.github.io/blog/2016/04/18/Code-completion-in-HyDE</link>
      <pubDate>Mon, 18 Apr 2016 11:24:13 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">eg8IDQzl-8dIu2kqoax0llvdL5k=</guid>
      <description>Code completion in HyDE</description>
      <content:encoded><![CDATA[



<p>
Code completion is often useful in an editor. Today, we add some code completion to Emacs for <a href="http://hylang.org">hy</a> . It isn't that hard; we get a list of known keywords from the hy language, a list of functions and macros, and a list of variables from the current buffer. If you are following this line of development, the code can be found here: <a href="https://github.com/jkitchin/jmax/blob/master/mile-hy.el">https://github.com/jkitchin/jmax/blob/master/mile-hy.el</a> 
</p>

<p>
If not, there might be some interesting tips here on getting completion in Emacs ;)
</p>

<p>
We will use auto-complete (<a href="http://auto-complete.org/doc/manual.html#extend">http://auto-complete.org/doc/manual.html#extend</a> ) for now. First, we can add hy-mode to the list of ac-modes:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">* auto-complete</span>
(add-to-list 'ac-modes 'hy-mode)
</pre>
</div>

<p>
Next, we need to define some sources and functions for completion. Over at <a href="https://github.com/jkitchin/hyve/blob/master/hylp.hy#L65">https://github.com/jkitchin/hyve/blob/master/hylp.hy#L65</a> I defined a function that returns a list of all hy core functions and macros that Emacs can directly read.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">hy-all-keywords-emacs-completion</span> []
  <span style="color: #008000;">"Return a string for Emacs completion suitable for read in Emacs.</span>
<span style="color: #008000;">We unmangle the names and replace _ with -."</span>
  (str
   (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"("</span>
      (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (.format <span style="color: #008000;">"\"{}\""</span> (.replace x <span style="color: #008000;">"_"</span> <span style="color: #008000;">"-"</span>))
                            [x (hy-all-keywords)]))
      <span style="color: #008000;">")"</span>)))
</pre>
</div>


<p>
Here, we define a source that gets that information from the hy repl using the lispy&#x2013;eval-hy function. This has the downside of calling the repl, but it seems fast, and I haven't noticed any lags so far. The upside is it only gets called once and has everything hy knows about, i.e. i don't have to update this for new core functions/macros.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ac-source-hy-keywords</span>
  `((candidates . ,(read (lispy--eval-hy <span style="color: #008000;">"(hy-all-keywords-emacs-completion)"</span>))))
  <span style="color: #036A07;">"Keywords known from hy. The command is defined in hyve.hylp."</span>)
</pre>
</div>

<p>
It would also be nice to have the defns/macros in the current file available for completion. This hackery searches the current buffer for these with a pretty simple regex and accumulates the results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">hy-defns-macros</span> ()
  <span style="color: #036A07;">"Get a list of defns in the current file."</span>
  (<span style="color: #0000FF;">let</span> ((defns '()))
    (<span style="color: #0000FF;">save-excursion</span>
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?:</span><span style="color: #008000;">defn</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">defmacro</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">[[:space:]]+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">.*?</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;"> "</span>nil t)
        (<span style="color: #0000FF;">push</span> (match-string 1) defns)))
    defns))
</pre>
</div>

<p>
Finally, we would also like the variable names from setv and let. Hy is lispy, so we use a hybrid regex search, followed by read to get every other name in the case of setv, and the vector expression in the let case.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">hy-variables</span> ()
  <span style="color: #036A07;">"Collect the variable names in the current buffer.</span>
<span style="color: #036A07;">These are every other name after setv."</span>
  (<span style="color: #0000FF;">let</span> ((vars '())
        expr
        set-vars
        let-vars)
    (<span style="color: #0000FF;">save-excursion</span>
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"(setv"</span> nil t)
        (<span style="color: #0000FF;">save-excursion</span>
          (goto-char (match-beginning 0))
          (<span style="color: #0000FF;">setq</span> expr (read (current-buffer)))
          (<span style="color: #0000FF;">setq</span> set-vars (<span style="color: #0000FF;">loop</span> for x in (cdr expr) by #'cddr
                               collect x)))))
    (<span style="color: #0000FF;">save-excursion</span>
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"(let"</span> nil t)
        (<span style="color: #0000FF;">save-excursion</span>
          (goto-char (match-beginning 0))
          (<span style="color: #0000FF;">setq</span> expr (read (current-buffer)))
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is read as a vector, so we convert to a list.</span>
          (<span style="color: #0000FF;">setq</span> let-vars
                (<span style="color: #0000FF;">loop</span> for x in (append (nth 1 expr) nil)
                      by #'cddr collect x)))))
    (append set-vars let-vars)))
</pre>
</div>

<p>
Next, we define two new sources for completion that use those two functions:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ac-source-hy-defns</span>
  '((candidates . hy-defns-macros))
  <span style="color: #036A07;">"Functions/macros defined in the file."</span>)

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ac-source-hy-variables</span>
  '((candidates . hy-variables))
  <span style="color: #036A07;">"Hy variables defined in the file."</span>)
</pre>
</div>

<p>
And finally add this to the hy-setup hook function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> ac-sources '(ac-source-hy-keywords
                     ac-source-hy-defns
                     ac-source-hy-variables))

  (ac-set-trigger-key <span style="color: #008000;">"TAB"</span>)
  (auto-complete-mode 1)
</pre>
</div>

<p>
And we should be good to go with completion. Let's try it out.
</p>

<p>
Checkout the video here: <a href="https://www.youtube.com/watch?v=L6j5IWkpoz0">https://www.youtube.com/watch?v=L6j5IWkpoz0</a> 
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">let</span> [some-long-name 5
      boring-and-tedious <span style="color: #008000;">"tree"</span>]
  (<span style="color: #006FE0;">print</span> boring-and-tedious))

(<span style="color: #006FE0;">setv</span> another-var <span style="color: #D0372D;">nil</span> inline-name (<span style="color: #006FE0;">+</span> 4 5)
      hylarious-var 5)

(<span style="color: #006FE0;">+</span> hylarious-var 8 )

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">Some-long-function</span> []
  (<span style="color: #006FE0;">print</span> 6))

(Some-long-function)
</pre>
</div>

<pre class="example">
tree
6
</pre>

<p>
Sweet.</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/18/Code-completion-in-HyDE.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>What are you hy?</title>
      <link>http://jkitchin.github.io/blog/2016/04/15/What-are-you-hy</link>
      <pubDate>Fri, 15 Apr 2016 08:46:02 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">Wp01ifnZ3lR6gsgax_O-HYdyPzQ=</guid>
      <description>What are you hy?</description>
      <content:encoded><![CDATA[



<p>
Hy lets us do things that either aren't possible, or definitely aren't easy in Python. You may have drank the Python Koolaid  and don't think those things are necessary, but we have Hy-C, and we took a sip of that just now, so let's see what we can do.
</p>


<div class="figure">
<p><img src="/media/2016-04-15-What-are-you-hy%3F/hyss.png">
</p>
</div>

<p>
We can have functions that are punctuation!
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">!</span> [arg] (<span style="color: #006FE0;">not</span> arg))

(<span style="color: #006FE0;">print</span> (! <span style="color: #D0372D;">True</span>))
(<span style="color: #006FE0;">print</span> (! <span style="color: #D0372D;">False</span>))
</pre>
</div>

<pre class="example">
False
True
</pre>

<p>
How about that function that just returns something truthy? Shouldn't those end in a question-mark? They can and sometimes do. Not a problem when you are hy.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">string?</span> [s]
 (isinstance s str))

(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">string?</span> 4))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">string?</span> <span style="color: #008000;">"4"</span>))        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">haha. strings in hy like "4" are unicode, not a str.</span>
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">string?</span> (str <span style="color: #008000;">"4"</span>)))
</pre>
</div>

<pre class="example">
False
False
True
False
</pre>

<p>
Isn't that better than is_a_string?
</p>

<p>
Underscores. Pfffft&#x2026;. Dashes in names are awesome. Unless you hate your pinky and are shifty.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">100-yard-</span> [x]
  <span style="color: #008000;">"Funniest function name ever. Don't do this at home."</span>
  (.format <span style="color: #008000;">"You ran that in {} seconds! New World Record!"</span> 9.42))

(<span style="color: #006FE0;">print</span> (100-yard- 2))
</pre>
</div>

<pre class="example">
You ran that in 9.42 seconds! New World Record!
</pre>

<p>
Why not build code with code? Here is a fun way to add up only the even numbers in a list. wHy? wHy?? Because we can, and it leads to other interesting opportunities!
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">hy</span>)
(<span style="color: #0000FF;">let</span> [a [1 2 3 4 5 6]
      code '()]
  (<span style="color: #006FE0;">+=</span> code `(<span style="color: #006FE0;">+</span>))  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">add an operator</span>
  (<span style="color: #0000FF;">for</span> [n a]
    (<span style="color: #0000FF;">when</span> (<span style="color: #006FE0;">even?</span> n)
      (<span style="color: #006FE0;">+=</span> code `(~(hy.models.integer.HyInteger n)))))
  (<span style="color: #006FE0;">print</span> code)

  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> code)))
</pre>
</div>

<pre class="example">
(u'+' 2L 4L 6L)
12
</pre>

<p>
Ok, that isn't so beautiful, but it shows we can generate code and then execute it. We could also do that like we do in python where you build up the list of even numbers, and then sum them. It's the beginning of macros.
</p>

<p>
But I can't live without objects! How else can you encapsulate data? Let's see how and give you some closure to get on with programming. (yea, the puns get worse ;).
</p>

<p>
This next example illustrates a closure which we can use to encapsulate data. We use let to create a context with the variable i defined. i doesn't exist outside the context, but the lambda function created inside it retains access to the variable i.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">def</span> counter
  (<span style="color: #0000FF;">let</span> [i [0]]
    (<span style="color: #0000FF;">lambda</span> [] (<span style="color: #006FE0;">assoc</span> i 0 (<span style="color: #006FE0;">+</span> 1 (<span style="color: #006FE0;">get</span> i 0))) (<span style="color: #006FE0;">get</span> i 0))))

(<span style="color: #006FE0;">print</span> (counter))
(<span style="color: #006FE0;">print</span> (counter))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">i is not a global var!</span>
(<span style="color: #0000FF;">try</span>
 (<span style="color: #006FE0;">print</span> i)
 (<span style="color: #0000FF;">except</span> [e NameError] (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"i is not defined here!"</span>)))
</pre>
</div>

<pre class="example">
1
2
i is not defined here!
</pre>

<p>
Yes, the use of a list to store the counter is wonky; it is because of namespaces in Python. We get around the issue with a list here, that stores the data. Thanks Paul Tagliamonte (the resident Hypster) for the tip. Apparently Python scoping doesn't work enough here, but the list approach does, as does creating class instances to store the counter. Hylarious.
</p>

<p>
Let's check out a macro. First, here is a code example. A common pattern is to save a value in a let statement temporarily, so we can reuse it in other expressions.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">let</span> [x (<span style="color: #006FE0;">&gt;</span> 2 0)]
  (<span style="color: #0000FF;">if</span> x
    (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{}"</span> x))
   (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{}"</span> x))))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">a one line version for comparison</span>
(<span style="color: #0000FF;">let</span> [x (<span style="color: #006FE0;">&lt;</span> 2 0)] (<span style="color: #0000FF;">if</span> x (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{}"</span> x)) (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{}"</span> x))))
</pre>
</div>

<pre class="example">
True
False
</pre>

<p>
That example has a lot of parentheses, and it might nice if there were fewer parentheses. There is a macro form to deal with this (it is actually defined in the hylang contrib directory, but it is short so we look at it here). This is called an anaphoric macro, because it captures a variable called "it" for reuse later in the macro. With the aif macro we can eliminate the use of the let statement in production code, eliminating a set of parentheses, and also the temporary variable.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">aif</span> [test-form then-form <span style="color: #6434A3;">&amp;optional</span> else-form]
  `(<span style="color: #0000FF;">let</span> [it ~test-form]
     (<span style="color: #0000FF;">if</span> it ~then-form ~else-form)))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">In this code, it is bound to the first form value.</span>
(<span style="color: #006FE0;">print</span> (aif (<span style="color: #006FE0;">&gt;</span> 2 0) (.format <span style="color: #008000;">"{}"</span> it) (.format <span style="color: #008000;">"{}"</span> it)))
(<span style="color: #006FE0;">print</span> (aif (<span style="color: #006FE0;">&lt;</span> 2 0) (.format <span style="color: #008000;">"{}"</span> it) (.format <span style="color: #008000;">"{}"</span> it)))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">How does it work? By expanding to code.</span>
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">macroexpand</span> '(aif (<span style="color: #006FE0;">&lt;</span> 2 0) (.format <span style="color: #008000;">"{}"</span> it) (.format <span style="color: #008000;">"{}"</span> it))))
</pre>
</div>

<pre class="example">
True
False
((u'fn' [] (u'setv' u'it' (u'&lt;' 2L 0L)) (u'if' u'it' (u'.format' u'{}' u'it') (u'.format' u'{}' u'it'))))
</pre>

<p>
Here is how you would do this in a regular program if you wanted to use the contrib library in hy.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">require</span> <span style="color: #006699;">hy.contrib.anaphoric</span>)

(<span style="color: #006FE0;">print</span> (ap-if (<span style="color: #006FE0;">&gt;</span> 2 0) (.format <span style="color: #008000;">"{}"</span> it) (.format <span style="color: #008000;">"{}"</span> it)))
</pre>
</div>

<pre class="example">
True
</pre>

<p>
Macros are useful for changing syntax and simplifying code. That works because the code in the macro is like data that can be manipulated and selectively evaluated. Here is an example of manipulating code like that. We start with an expression to add two numbers, and then modify it to be a multiplication.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> code '(<span style="color: #006FE0;">+</span> 5 6))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> code))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">change + to *</span>
(<span style="color: #006FE0;">assoc</span> code 0 '*)
(<span style="color: #006FE0;">print</span> code)
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> code))
</pre>
</div>

<pre class="example">
11
(u'*' 5L 6L)
30
</pre>

<p>
That is an indication that we can do some very interesting things with Lisp! Let's be fair and show this can also be done in Python. We just have to parse out the AST, and then we can manipulate it and get back to code. It isn't pretty, but doable.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> ast

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">parse the statement</span>
<span style="color: #BA36A5;">p</span> = ast.parse(<span style="color: #008000;">"print 5 + 6"</span>)

<span style="color: #0000FF;">exec</span> <span style="color: #006FE0;">compile</span>(p, <span style="color: #008000;">"&lt;string&gt;"</span>, <span style="color: #008000;">"exec"</span>)
<span style="color: #0000FF;">print</span> ast.dump(p)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Change + to *</span>
p.body[0].values[0]<span style="color: #BA36A5;">.op</span> = ast.Mult()

<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">exec</span> <span style="color: #006FE0;">compile</span>(p, <span style="color: #008000;">"&lt;string&gt;"</span>, <span style="color: #008000;">"exec"</span>)
<span style="color: #0000FF;">print</span> ast.dump(p)
</pre>
</div>

<pre class="example">
11
Module(body=[Print(dest=None, values=[BinOp(left=Num(n=5), op=Add(), right=Num(n=6))], nl=True)])

30
Module(body=[Print(dest=None, values=[BinOp(left=Num(n=5), op=Mult(), right=Num(n=6))], nl=True)])
</pre>

<p>
That is not as clear as what we did in hy! Why? Because we had to transform the Python to AST, and manipulate it. In Lisp, the code is already in the abstract tree form, and we manipulate it more directly. It is easier to reason about.
</p>

<p>
I bet you didn't think we could use a hy program <i>for more than one thing</i>. Sure we may want to run it, but maybe we would like a different representation of the program than the code too.  Here we define two macros that both take a program as input. One simply evaluates the program, so we can use it. The other takes the program, and outputs a LaTeX representation of it. It only converts a division expression correctly (and only if all the arguments are numbers and not other expressions), but it illustrates that we can use a program as data, and do different things with it!
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">run</span> [body] `(<span style="color: #006FE0;">eval</span> ~body))

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">latex</span> [body]
  `(<span style="color: #0000FF;">cond</span>
   [(<span style="color: #006FE0;">=</span> (<span style="color: #006FE0;">car</span> ~body) '/)
    (.format <span style="color: #008000;">"\(\\frac{{{0}}} {{{1}}}\)"</span>
            (<span style="color: #006FE0;">get</span> ~body 1)
            (.join <span style="color: #008000;">" \\cdot "</span> (<span style="color: #006FE0;">list-comp</span> (str x) [x (<span style="color: #006FE0;">cut</span> ~body 2)])))]
   [<span style="color: #D0372D;">true</span> (<span style="color: #0000FF;">raise</span> (Exception <span style="color: #008000;">"Unsupported program"</span>))]))

(<span style="color: #006FE0;">setv</span> code '(<span style="color: #006FE0;">/</span> 1 2 4.0))

(<span style="color: #006FE0;">print</span> (run code))
(<span style="color: #006FE0;">print</span> (latex code))
</pre>
</div>

<pre class="example">
0.125
\(\frac{1} {2 \cdot 4.0}\)
</pre>

<p>
It is possible to do something kind of like this in Python. In <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/">this post</a> I put a lisp function onto the base classes of objects so you could transform Python objects to lisp representations.
</p>

<p>
Well, that is probably enough Hy-C for the day. I am still playing around to figure out what kinds of things can we do with Hy that aren't easy or feasible in Python. These are a few of my favorite examples! If you have other cool things you do, put them in a comment hyre!</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/15/What-are-you-hy?.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>
]]></content:encoded>
    </item>
    <item>
      <title>Operator precedence in infix notation by automatic parenthesizing</title>
      <link>http://jkitchin.github.io/blog/2016/04/10/Operator-precedence-in-infix-notation-by-automatic-parenthesizing</link>
      <pubDate>Sun, 10 Apr 2016 13:32:00 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">JDUc4301QcqwF6zS0jpflmysyQs=</guid>
      <description>Operator precedence in infix notation by automatic parenthesizing</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Another test of a real problem</a></li>
</ul>
</div>
</div>
<p>
I am continuing some investigation in getting operator precedence right with infix notation. You can fully parenthesize your expressions for this, but it is tedious and hard to read. Apparently in Fortran I (yep, one) the compiler would expand each operator in an expression with a sequence of parentheses to get the precedence right (<a href="https://en.wikipedia.org/wiki/Operator-precedence_parser">https://en.wikipedia.org/wiki/Operator-precedence_parser</a> )!
</p>

<p>
Roughly, these were the rules.
</p>

<ul class="org-ul">
<li>replace + and – with ))+(( and ))-((, respectively;
</li>
<li>replace * and / with )*( and )/(, respectively;
</li>
<li>add (( at the beginning of each expression and after each left parenthesis in the original expression; and
</li>
<li>add )) at the end of the expression and before each right parenthesis in the original expression.
</li>
</ul>

<p>
So this
</p>
<pre class="example">
a * b + c ^ d / e
</pre>

<p>
becomes
</p>

<pre class="example">
((((a))*((b)))+(((c)^(d))/((e))))
</pre>

<p>
Not too pretty, but correct! The wikipedia page provides an example C program to implement this, and we adapt it here for hy. The idea is to take an expression as a string, parenthesize it, and then we could eval it.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">parenthesize</span> [input]
  <span style="color: #008000;">"Fully parenthize the input string."</span>
  (<span style="color: #0000FF;">let</span> [s <span style="color: #008000;">""</span>]
    (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"(((("</span>)
    (<span style="color: #0000FF;">for</span> [(<span style="color: #006FE0;">,</span> i char) (enumerate input)]
      (<span style="color: #0000FF;">cond</span>
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">"("</span>)
        (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"(((("</span>)]
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">")"</span>)
        (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"))))"</span>)]
       <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">rewrite ^ to **</span>
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">"^"</span>)
        (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">")**("</span>)]
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">"*"</span>)
        (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"))*(("</span>)]
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">"/"</span>)
        (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"))/(("</span>)]
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">"+"</span>)
        (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">or</span> (<span style="color: #006FE0;">=</span> 0 i) (<span style="color: #006FE0;">in</span> (<span style="color: #006FE0;">get</span> input (<span style="color: #006FE0;">-</span> i 1)) [<span style="color: #008000;">"("</span> <span style="color: #008000;">"^"</span> <span style="color: #008000;">"*"</span> <span style="color: #008000;">"/"</span> <span style="color: #008000;">"+"</span> <span style="color: #008000;">"-"</span>]))
          (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"+ "</span>)
          (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">")))+((("</span>))]
       [(<span style="color: #006FE0;">=</span> char <span style="color: #008000;">"-"</span>)
        (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">or</span> (<span style="color: #006FE0;">=</span> 0 i) (<span style="color: #006FE0;">in</span> (<span style="color: #006FE0;">get</span> input (<span style="color: #006FE0;">-</span> i 1)) [<span style="color: #008000;">"("</span> <span style="color: #008000;">"^"</span> <span style="color: #008000;">"*"</span> <span style="color: #008000;">"/"</span> <span style="color: #008000;">"+"</span> <span style="color: #008000;">"-"</span>]))
          (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"- "</span>)
          (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">")))-((("</span>))]
       [<span style="color: #D0372D;">true</span>
        (<span style="color: #006FE0;">+=</span> s char)]))
    (<span style="color: #006FE0;">+=</span> s <span style="color: #008000;">"))))"</span>)
    s))
</pre>
</div>

<p>
Let's try it out.
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])

(<span style="color: #006FE0;">print</span> (parenthesize <span style="color: #008000;">"a * b + c ^ d / e"</span>))
</pre>
</div>
<pre class="example">
((((a ))*(( b )))+((( c )**( d ))/(( e))))
</pre>

<p>
For comparison:
</p>

<p>
((((a))*((b)))+(((c)^(d))/((e))))
</p>

<p>
Spaces aside, it looks like we got that right. The spaces should not be a problem for lisp. This is another strategy to get infix notation with operator precedence! Let's see some examples.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (nfx (<span style="color: #006FE0;">read-str</span> (parenthesize <span style="color: #008000;">"1 + 2 * 5"</span>)))))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (nfx (<span style="color: #006FE0;">read-str</span> (parenthesize <span style="color: #008000;">"1 * 2 + 5"</span>)))))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (nfx (<span style="color: #006FE0;">read-str</span> (parenthesize <span style="color: #008000;">"1 * 2 + 2^2"</span>)))))
</pre>
</div>

<pre class="example">
11
7
6
</pre>

<p>
We can get that string representation easy enough.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (nfx (<span style="color: #006FE0;">read-str</span> (parenthesize (stringify `(1 + 2)))))))
</pre>
</div>

<pre class="example">
3
</pre>

<p>
This too is worthy of simplifying the notation with a function.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">NFX</span> [code <span style="color: #6434A3;">&amp;optional</span> [globals (globals)]]
  <span style="color: #008000;">"Evaluate the infix CODE.</span>
<span style="color: #008000;">CODE is stringified, parenthesized, read back and infixed."</span>
  (<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
  (<span style="color: #0000FF;">import</span> <span style="color: #006699;">serialize</span>)
  (<span style="color: #006FE0;">eval</span> (infix.nfx
         (<span style="color: #006FE0;">read-str</span>
          (infix.parenthesize
           (serialize.stringify code)))) globals))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">NFX</span> [code]
  <span style="color: #036A07;">"Evaluate the infix CODE.</span>
<span style="color: #036A07;">CODE is stringified, parenthesized, read back and infixed."</span>
  `(<span style="color: #0000FF;">do</span>
    (<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
    (<span style="color: #0000FF;">import</span> <span style="color: #006699;">serialize</span>)
    (<span style="color: #006FE0;">eval</span> (infix.nfx
           (<span style="color: #006FE0;">read-str</span>
            (infix.parenthesize
             (serialize.stringify ~code)))))))
</pre>
</div>

<p>
Here is a simple example.
</p>
<div class="org-src-container">

<pre class="src src-hy"><span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">(import [infix [*]])</span>
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #006FE0;">print</span> (NFX `(1 + 2 * 5)))
(<span style="color: #006FE0;">print</span> (NFX `((1 + 2) * 5)))

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> (NFX `(1 + (np.exp 2))))

<span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">not working because of infix</span>
<span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">(print (NFX `(1 + (np.linspace 0 1 5))))</span>

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">But this is ok since no infix mangling happens.</span>
(<span style="color: #0000FF;">let</span> [a (np.linspace 0 1 5)]
  (<span style="color: #006FE0;">print</span> (NFX `(1 + a))))
</pre>
</div>

<pre class="example">
11
15
8.38905609893
[ 1.    1.25  1.5   1.75  2.  ]
</pre>

<p>
That is slightly heavy still, and we can fix it with a new reader macro.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">m</span> [code]
 `(<span style="color: #0000FF;">do</span>
    (<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
    (<span style="color: #0000FF;">import</span> <span style="color: #006699;">serialize</span>)
    (<span style="color: #006FE0;">eval</span> (infix.nfx
           (<span style="color: #006FE0;">read-str</span>
            (infix.parenthesize
             (serialize.stringify ~code)))))))
</pre>
</div>

<p>
Since we return code in that reader macro, we have to quote the code. This is debatably more concise than the NFX macro.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #006FE0;">print</span> #m`(1 + 2 + 5))
(<span style="color: #006FE0;">print</span> #m`(1 + 2 * 5))
(<span style="color: #006FE0;">print</span> #m`((1 + 2) * 5))

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> #m`((1 + (np.exp 2))))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">these are all the same</span>
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> 1 (np.exp 2) (<span style="color: #006FE0;">*</span> 2 5)))
(<span style="color: #006FE0;">print</span> #m(`(1 + (np.exp 2) + 2 * 5)))
(<span style="color: #006FE0;">print</span> (NFX `(1 + (np.exp 2) + 2 * 5)))
</pre>
</div>

<pre class="example">
8
11
15
8.38905609893
18.3890560989
18.3890560989
18.3890560989
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Another test of a real problem</h2>
<div class="outline-text-2" id="text-1">
<p>
Here is another test of using an infix notation, this time with operator precedence. Note the use of ^ for exponentiation. The parenthesize function assumes single character operators, and would take some work to use **. Note we still need the space between - and x to avoid a mangling issue with _x in hy.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(import [infix [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">the Python way is: "1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)"</span>
        dzdx #m`((1.0 / x^2) * ((<span style="color: #006FE0;">-</span> x) * z - (x^2 - nu^2) * y)))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here is what it was with prefix notation</span>
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">dzdx (* (/ 1.0 (** x 2)) (- (* (* -1 x) z) (* (- (** x 2) (** nu 2)) y))))</span>
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"bessel-infix-m.png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-04-10-Operator-precedence-in-infix-notation-by-automatic-parenthesizing/bessel-infix-m.png"> 
</p>
</div>

<p>
I wonder if there is actually some ambiguity in the expression or how it is parenthesized. We get the right answer with:
</p>

<pre class="example">
(1.0 / x^2) * ((- x) * z - (x^2 - nu^2) * y)
</pre>

<p>
but not with:
</p>

<pre class="example">
1.0 / x^2 * ((- x) * z - (x^2 - nu^2) * y))
</pre>

<p>
Let's see if we can see why. Consider 1 / x * a. This should probably be evaluated as (1 / x) * a. This shows the algorithm does not do that.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])

(<span style="color: #006FE0;">print</span>
 (nfx
 (<span style="color: #006FE0;">read-str</span>
 (parenthesize
  (stringify `(1 / x * a))))))
<span style="color: #8D8D84;">;   </span><span style="color: #8D8D84; font-style: italic;">`(1.0 / x^2 * ((- x) * z - (x^2 - nu^2) * y)))))))</span>
</pre>
</div>

<pre class="example">
(u'/' 1L (u'*' u'x' u'a'))
</pre>

<p>
That reads: 1 / (x * a)
</p>

<p>
If we had a layer of parentheses we get the right answer.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])

(<span style="color: #006FE0;">print</span>
 (nfx
 (<span style="color: #006FE0;">read-str</span>
 (parenthesize
  (stringify `((1 / x) * a))))))
<span style="color: #8D8D84;">;   </span><span style="color: #8D8D84; font-style: italic;">`((1.0 / x^2) * ((- x) * z - (x^2 - nu^2) * y)))))))</span>
</pre>
</div>

<pre class="example">
(u'*' (u'/' 1L u'x') u'a')
</pre>

<p>
This reads (1 / x) * a. Our algorithm doesn't do exactly what we expect here. I guess this could be a general issue of neighboring operators with equal precedence.
</p>

<p>
Related to this, the Wikipedia page points out this example:
</p>

<pre class="example">
- a ^ 2
</pre>

<p>
What does this mean? It is either (-a)^2 or -(a^2). The second is correct based on normal precedence, but the algorithm gives the unary operator - a higher precedence.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [parenthesize]])

(<span style="color: #006FE0;">print</span> (parenthesize <span style="color: #008000;">"- a ^ 2"</span>))
(<span style="color: #006FE0;">print</span> (parenthesize <span style="color: #008000;">"- (a ^ 2)"</span>))
</pre>
</div>
<pre class="example">
((((-  a )**( 2))))
((((-  ((((a )**( 2))))))))
</pre>

<p>
To get the right thing, you need to use parentheses. Sometimes I do that in real code anyway to make sure what I want to happen does. Maybe some of this can be fixed in our parser function. Probably for another day.
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/10/Operator-precedence-in-infix-notation-by-automatic-parenthesizing.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Getting towards an infix notation for hy</title>
      <link>http://jkitchin.github.io/blog/2016/04/09/Getting-towards-an-infix-notation-for-hy</link>
      <pubDate>Sat, 09 Apr 2016 14:54:04 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">g1MMhtIvVNex3BjA-KsfqMrXN2s=</guid>
      <description>Getting towards an infix notation for hy</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. using strings</a></li>
<li><a href="#sec-2">2. Infix to prefix using code manipulation</a></li>
<li><a href="#sec-3">3. The final test</a>
<ul>
<li><a href="#sec-3-1">3.1. with the string reader</a></li>
<li><a href="#sec-3-2">3.2. with #$ reader</a></li>
</ul>
</li>
</ul>
</div>
</div>

<p>
Engineers need infix notation. It's a bold statement I know, but I am an engineer, teach engineers, and write a fair bit of mathematical programs. Your typical engineer is not a programmer, and just wants to write an equation they way we would write it on paper. It is hard to undo 20+ years of education on that point! So, here we consider how to adapt hy to use infix notation.
</p>

<p>
In a recent <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal/">post</a> <a href="https://disqus.com/by/disqus_LNqeXKtJMi/">gilch</a> suggested using strings with the builtin python eval function. There are some potential downsides to that approach including the overhead of byte-compiling each time it is eval'd,  but the payoff is operator precedence, and doing it like you would do it in Python.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> using strings</h2>
<div class="outline-text-2" id="text-1">
<p>
UPDATE: Thanks to some help from Jiege Chen I updated this section to solve the namespace issues previously discussed. That resulted in quite a bit of improvement. Thanks Jiege!
</p>

<p>
Here is one implementation.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">def</span> py-eval (<span style="color: #006FE0;">get</span> __builtins__ <span style="color: #008000;">"eval"</span>))
</pre>
</div>

<p>
And how to use it.
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])

(<span style="color: #006FE0;">print</span> (py-eval <span style="color: #008000;">"2+3*5"</span>))

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> (py-eval <span style="color: #008000;">"2 * np.exp(np.pi / 2)"</span>))
</pre>
</div>

<pre class="example">
17
9.62095476193
</pre>

<p>
We can eliminate the need for quotes (") with the stringify code we previously developed.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [serialize [*]])
(import [infix [*]])

(<span style="color: #006FE0;">print</span> (py-eval (stringify `(2+3*5))))
(<span style="color: #006FE0;">print</span> (py-eval (stringify `(2 + 3 * 5))))

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> (py-eval (stringify `(2 * np.exp(np.pi / 2)))))
</pre>
</div>

<pre class="example">
17
17
9.62095476193
</pre>

<p>
Let's just take that one more step with a new reader macro to tighten the syntax up. A critical feature of this reader macro is that it expands to code evaluated in the namespace where it is used. Nothing gets evaluated in the macro. That occurs in another namespace, where most things in a script are not available.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">p</span> [code]
  `(<span style="color: #0000FF;">do</span>
    (import [serialize [stringify]])
    (import [infix [py-eval]])
    (py-eval (stringify ~code))))

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">py</span> [code]
  `(<span style="color: #0000FF;">do</span>
    (import [serialize [stringify]])
    (import [infix [py-eval]])
    (py-eval (stringify ~code))))
</pre>
</div>

<p>
Now we can use it like this. We have to require the infix module to get the reader macro. It seems unfortunate to me we still have to quote the code. Later I show an example where that isn't necessary, so there must be some subtle difference I have not found yet.
</p>

<div class="org-src-container">

<pre class="src src-hy"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">we have to require to get the reader macro</span>
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> #p`(2 + 3 * 5))
(<span style="color: #006FE0;">print</span> #p`((2 + 3) * 5))
(<span style="color: #006FE0;">print</span> #p`(1 + 1 * np.exp(7)))

(<span style="color: #006FE0;">setv</span> x 5)
(<span style="color: #006FE0;">print</span> #p`(x + 2))

(<span style="color: #006FE0;">print</span> #p`(1 + 1 * np.exp(1e-15)))
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">note the real python syntax with commas.</span>
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">also not the extra parens around 1e-5</span>
(<span style="color: #006FE0;">print</span> #p`(1 + np.linspace((1e-5), 1, 5)))

<span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">The 1e-5 gets mangled to 1e-5 in this example</span>
<span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">(print #p`(1 + np.linspace(1e-5, 1, 5)))</span>

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here is the macro form. It is about as easy to write.</span>
(<span style="color: #006FE0;">print</span> (py `(1 + np.linspace((1e-5), 1, 5))))
</pre>
</div>

<pre class="example">
17
25
1097.63315843
7
2.0
[ 1.00001    1.2500075  1.500005   1.7500025  2.       ]
[ 1.00001    1.2500075  1.500005   1.7500025  2.       ]
</pre>

<p>
Lots of things seem to work! Let's look into some other solutions that do not rely on the builtin eval.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Infix to prefix using code manipulation</h2>
<div class="outline-text-2" id="text-2">
<p>
This solution is inspired by <a href="https://sourceforge.net/p/readable/wiki/Solution/">https://sourceforge.net/p/readable/wiki/Solution/</a> , but probably isn't a full implementation. We will first develop a function to convert infix notation to prefix notation. This function is recursive to deal with nested expressions. So far it doesn't seem possible to recurse with macros (at least, I cannot figure out how to do it). We tangle this function to infix.hy so we can use it later.
</p>

<p>
It will have some limitations though:
</p>

<ol class="org-ol">
<li>No operator precedence.  We will use parentheses for precedence.
</li>
<li>Lisp syntax means 3+4 is not the same as 3 + 4. The first is interpreted as a name. So we will need spaces to separate everything.
</li>
</ol>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">try</span>
 (<span style="color: #006FE0;">print</span> (3+4))
 (<span style="color: #0000FF;">except</span> [e Exception]
   (<span style="color: #006FE0;">print</span> e)))

(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> 3 4))
</pre>
</div>

<pre class="example">
name '3+4' is not defined
7
</pre>

<p>
So, here is our infix function. Roughly, the function takes a CODE argument. If the CODE is iterable, it is a list of symbols, and we handle a few cases:
</p>
<ul class="org-ul">
<li>If it is a string, we return it.
</li>
<li>if it has a length of one and is an expression we recurse on it, otherwise return the symbol.
</li>
<li>if it has a length of two, we assume a unary operator and recurse on each element.
</li>
<li>If there are three elements, we take the middle one as the operator, and switch it with the first element.
</li>
<li>Otherwise we switch the first and second elements, and recurse on the rest of the list.
</li>
<li>If it is not iterable we just return the element.
</li>
</ul>

<p>
Two optional arguments provide some debug support to print what is happening.
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [serialize [*]])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">nfx</span> [code <span style="color: #6434A3;">&amp;optional</span> [indent 0] [debug <span style="color: #D0372D;">False</span>]]
  <span style="color: #008000;">"Transform the CODE expression to prefix notation.</span>
<span style="color: #008000;">We assume that CODE is in infix notation."</span>
  (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">*</span> <span style="color: #008000;">" "</span> indent) <span style="color: #008000;">"code: "</span> code <span style="color: #008000;">" type: "</span> (type code)))
  (<span style="color: #0000FF;">cond</span>
   [(<span style="color: #006FE0;">coll?</span> code)
    (<span style="color: #0000FF;">cond</span>

     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">treat lists in [] special</span>
     [(<span style="color: #006FE0;">and</span> (<span style="color: #006FE0;">instance?</span>  hy.models.list.HyList code)
           (<span style="color: #006FE0;">not</span> (<span style="color: #006FE0;">instance?</span>  hy.models.expression.HyExpression code)))
      (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"list: "</span> code <span style="color: #008000;">" type: "</span> (type code)))
      code]

     [(<span style="color: #006FE0;">=</span> 1 (len code))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">element is an Expression</span>
      (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">*</span> <span style="color: #008000;">" "</span> indent) <span style="color: #008000;">"1: "</span> code))
      (<span style="color: #0000FF;">if</span> (isinstance (<span style="color: #006FE0;">car</span> code) hy.models.expression.HyExpression)
        (nfx (<span style="color: #006FE0;">car</span> code) (<span style="color: #006FE0;">+</span> indent 1) debug)
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">single element</span>
        (<span style="color: #006FE0;">car</span> code))]

     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">{- 1} -&gt;  (- 1)</span>
     [(<span style="color: #006FE0;">=</span> 2 (len code))
      (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">*</span> <span style="color: #008000;">" "</span> indent) <span style="color: #008000;">"2: "</span> code))
      `(~(nfx (<span style="color: #006FE0;">get</span> code 0) (<span style="color: #006FE0;">+</span> indent 1) debug)
         ~(nfx (<span style="color: #006FE0;">get</span> code 1) (<span style="color: #006FE0;">+</span> indent 1) debug))]

     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">{1 + 2} -&gt; (+ 1 2)</span>
     [(<span style="color: #006FE0;">=</span> 3 (len code))
      (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">*</span> <span style="color: #008000;">" "</span> indent) <span style="color: #008000;">"3: "</span> code))
      `(~(<span style="color: #006FE0;">get</span> code 1)
         ~(nfx (<span style="color: #006FE0;">get</span> code 0) (<span style="color: #006FE0;">+</span> indent 1) debug)
         ~(nfx (<span style="color: #006FE0;">get</span> code 2) (<span style="color: #006FE0;">+</span> indent 1) debug))]

     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">longer expression, swap first two and take the rest.</span>
     [<span style="color: #D0372D;">true</span>
      (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"expr: "</span> code))
      `(~(nfx (<span style="color: #006FE0;">get</span> code 1) (<span style="color: #006FE0;">+</span> indent 1) debug)
         ~(nfx (<span style="color: #006FE0;">get</span> code 0) (<span style="color: #006FE0;">+</span> indent 1) debug)
         (~@(nfx (<span style="color: #006FE0;">cut</span> code 2) (<span style="color: #006FE0;">+</span> indent 1) debug)))])]

   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">non-iterable just gets returned</span>
   [<span style="color: #D0372D;">true</span>
    (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">*</span> <span style="color: #008000;">" "</span> indent) <span style="color: #008000;">"true: "</span> code))
    code]))
</pre>
</div>

<p>
Now, for some tests. First, an example with debug we can see what happens.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])
(<span style="color: #006FE0;">print</span> (nfx `(1 + (3 * 4)) <span style="color: #D0372D;">:debug</span> <span style="color: #D0372D;">True</span>))
</pre>
</div>

<pre class="example">
 code:  (1L u'+' (3L u'*' 4L))  type:  &lt;class 'hy.models.expression.HyExpression'&gt;
 3:  (1L u'+' (3L u'*' 4L))
  code:  1  type:  &lt;class 'hy.models.integer.HyInteger'&gt;
  true:  1
  code:  (3L u'*' 4L)  type:  &lt;class 'hy.models.expression.HyExpression'&gt;
  3:  (3L u'*' 4L)
   code:  3  type:  &lt;class 'hy.models.integer.HyInteger'&gt;
   true:  3
   code:  4  type:  &lt;class 'hy.models.integer.HyInteger'&gt;
   true:  4
(u'+' 1L (u'*' 3L 4L))
</pre>

<p>
You can see we return a list of symbols, and the result is not evaluated. Now for some more thorough tests. I use a little helper function here to show the input and output.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])
(import [serialize [stringify]])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">show</span> [code]
  (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{0} -&gt; {1}\n"</span>
                  (stringify code)
                  (stringify (nfx code)))))

(show 1)
(show `(1))
(show `(<span style="color: #006FE0;">-</span> 1))
(show `((1)))
(show `(<span style="color: #006FE0;">-</span> (2 + 1)))

(show `(2 ** 4))
(show `(3 &lt; 5))

(show `(1 + 3 * 5 + 6 - 9))
(show `((1 + (1 + 2)) * 5 + 6 - 9))
(show `(1 + 1 * (5 - 4)))
(show `(1 + 1 * (np.exp (17 - 10))))

<span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">Note this one does not work right.</span>
(show `(1 + (np.linspace 1e-5  1 5)))

(show `(x + long-name)) <span style="color: #8D8D84; font-style: italic;">; note name mangling occurs.</span>

(show `(1 + 1 + 1 + 1 + 1))
</pre>
</div>

<pre class="example">
1 -&gt; 1

(1) -&gt; 1

(- 1) -&gt; (- 1)

((1)) -&gt; 1

(- (2 + 1)) -&gt; (- (+ 2 1))

(2 ** 4) -&gt; (** 2 4)

(3 &lt; 5) -&gt; (&lt; 3 5)

(1 + 3 * 5 + 6 - 9) -&gt; (+ 1 (* 3 (+ 5 (- 6 9))))

((1 + (1 + 2)) * 5 + 6 - 9) -&gt; (* (+ 1 (+ 1 2)) (+ 5 (- 6 9)))

(1 + 1 * (5 - 4)) -&gt; (+ 1 (* 1 (- 5 4)))

(1 + 1 * (np.exp (17 - 10))) -&gt; (+ 1 (* 1 (np.exp (- 17 10))))

(1 + (np.linspace 1e-05 1 5)) -&gt; (+ 1 (1e-05 np.linspace (1 5)))

(x + long_name) -&gt; (+ x long_name)

(1 + 1 + 1 + 1 + 1) -&gt; (+ 1 (+ 1 (+ 1 (+ 1 1))))
</pre>

<p>
Those all look reasonable I think. The last case could be simplified, but it would take some logic to make sure all the operators are the same, and that handles if any of the operands are expressions. We save that for later.
</p>

<p>
Now, we illustrate that the output code can be evaluated. Since we expand to code, we don't seem to have the namespace issues since the code is executed in our script.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])

(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (nfx `(1 + 1 * (5 - 4)))))

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (nfx `(1 + 1 * (np.exp (17 - 10))))))
</pre>
</div>

<pre class="example">
2
1097.63315843
</pre>

<p>
That syntax is not particularly nice, so next we build up a macro, and a new reader syntax. First, the macro.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">$</span> [<span style="color: #6434A3;">&amp;rest</span> code]
  <span style="color: #036A07;">"Eval CODE in infix notation."</span>
  `(<span style="color: #0000FF;">do</span>
    (<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
    (<span style="color: #006FE0;">eval</span> (infix.nfx ~code))))
</pre>
</div>

<p>
Now we can use the simpler syntax here. It seems we still have quote the math to prevent it from being evaluated (which causes an error).
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #006FE0;">print</span> ($ `(1 + 1 * (5 - 4))))

(import [numpy <span style="color: #D0372D;">:as</span> np])
(<span style="color: #006FE0;">print</span> ($ `(1 + 1 * (np.exp (17 - 10)))))
</pre>
</div>

<pre class="example">
2
1097.63315843
</pre>

<p>
For the penultimate act, we introduce a new syntax for this. In the <a href="https://sourceforge.net/p/readable/wiki/Solution/">sweet expression</a> syntax we would use {} for this, but this isn't currently possible for hylang, and is also used for dictionaries. We define a reader macro for this.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">$</span> [code]
  (<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
  (infix.nfx code))

(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">P</span> [code]
  `(<span style="color: #0000FF;">do</span> (<span style="color: #0000FF;">import</span> <span style="color: #006699;">infix</span>)
       (<span style="color: #006FE0;">eval</span> (infix.nfx ~code))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(import [numpy <span style="color: #D0372D;">:as</span> np])

(<span style="color: #006FE0;">print</span> #$(<span style="color: #006FE0;">-</span> 1))

(<span style="color: #006FE0;">print</span> #$(<span style="color: #006FE0;">-</span> (2 + 1)))

(<span style="color: #006FE0;">print</span> #$(2 ** 4))
(<span style="color: #006FE0;">print</span> #$(3 &lt; 5))

(<span style="color: #006FE0;">print</span> #$(1 + 3 * 5 + 6 - 9))
(<span style="color: #006FE0;">print</span> #$((1 + (1 + 2)) * 5 + 6 - 9))
(<span style="color: #006FE0;">print</span> #$(1 + 1 * (5 - 4)))
(<span style="color: #006FE0;">print</span> #$(1 + 1 + 1 + 1 + 1))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">we still have to be lispy with function calls (func args)</span>
(<span style="color: #006FE0;">print</span> #$(1 + 1 * (np.exp (17 - 10))))

(<span style="color: #006FE0;">setv</span> a 3 t 6)
(<span style="color: #006FE0;">print</span> #$(a + t))

(<span style="color: #006FE0;">setv</span> long-a 5 long-b 6)
(<span style="color: #006FE0;">print</span> #$(long-a + long-b))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this fails because the linspace should not get unfixed. This is a bug in</span>
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">our implementation</span>

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">(print #P`(1 + (np.linspace 1e-5  1 5)))</span>
</pre>
</div>
<pre class="example">
-1
-3
16
True
7
8
2
5
1097.63315843
9
11
</pre>

<p>
Mostly wonderful! We get variables passed through, and the name-mangling doesn't seem to matter. Note we don't have to quote this code. I think it is because in this reader macro we do not return code, but actually evaluate it I think. And somehow it works.
</p>


<p>
There is an issue with <code>(print #$(1 + (np.linspace 1e-5  1 5)))</code>. The linspace call gets unfixed, which is wrong. There are some ways we could deal with that. One might be to only unfix known operators. Another might be some escape syntax that indicates not to unfix certain lists. For another day (TM).
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [infix [*]])
(<span style="color: #006FE0;">print</span> (nfx `(1 + (np.linspace 1e-5  1 5)) <span style="color: #D0372D;">:debug</span> <span style="color: #D0372D;">True</span>))
</pre>
</div>

<pre class="example">
 code:  (1L u'+' (u'np.linspace' 1e-05 1L 5L))  type:  &lt;class 'hy.models.expression.HyExpression'&gt;
 3:  (1L u'+' (u'np.linspace' 1e-05 1L 5L))
  code:  1  type:  &lt;class 'hy.models.integer.HyInteger'&gt;
  true:  1
  code:  (u'np.linspace' 1e-05 1L 5L)  type:  &lt;class 'hy.models.expression.HyExpression'&gt;
expr:  (u'np.linspace' 1e-05 1L 5L)
   code:  1e-05  type:  &lt;class 'hy.models.float.HyFloat'&gt;
   true:  1e-05
   code:  np.linspace  type:  &lt;class 'hy.models.symbol.HySymbol'&gt;
   true:  np.linspace
   code:  (1L 5L)  type:  &lt;class 'hy.models.expression.HyExpression'&gt;
   2:  (1L 5L)
    code:  1  type:  &lt;class 'hy.models.integer.HyInteger'&gt;
    true:  1
    code:  5  type:  &lt;class 'hy.models.integer.HyInteger'&gt;
    true:  5
(u'+' 1L (1e-05 u'np.linspace' (1L 5L)))
</pre>

<p>
See, the linspace call is out of order.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> The final test</h2>
<div class="outline-text-2" id="text-3">
<p>
For the final act, we use infix notation in a real problem we posed before.
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> with the string reader</h3>
<div class="outline-text-3" id="text-3-1">
<p>
We almost get way with exactly what we would have done in Python. The only thing was we had to put a space between -x to avoid a mangling issue that turned it into _x. I feel like that might be a fixable issue.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(import [infix [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">the Python way is: "1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)"</span>
        dzdx (py `(1.0 / x**2 * (<span style="color: #006FE0;">-</span> x * z - (x**2 - nu**2) * y))))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here is what it was with prefix notation</span>
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">dzdx (* (/ 1.0 (** x 2)) (- (* (* -1 x) z) (* (- (** x 2) (** nu 2)) y))))</span>
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"bessel-infix-s.png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-04-09-Getting-towards-an-infix-notation-for-hy/bessel-infix-s.png"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> with #$ reader</h3>
<div class="outline-text-3" id="text-3-2">
<p>
This version is also somewhat close to the Python syntax, but it needs a lot more parentheses to get the right precedence, and spaces between almost everything for the lisp syntax, i.e. x**2 is a name, and (x ** 2) is the infix notation for exponentiation.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(import [infix [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">the Python way is: "1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)"</span>
        dzdx #$((1.0 / (x ** 2)) * ((<span style="color: #006FE0;">-</span> x) * z) - (((x ** 2) - (nu ** 2)) * y)))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here is what it was with prefix notation</span>
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">dzdx (* (/ 1.0 (** x 2)) (- (* (* -1 x) z) (* (- (** x 2) (** nu 2)) y))))</span>
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"bessel-infix.png"</span>)
</pre>
</div>

<div class="figure">
<p><img src="/media/2016-04-09-Getting-towards-an-infix-notation-for-hy/bessel-infix.png"> 
</p>
</div>

<p>
That worked pretty well. This feels like an improvement for writing engineering programs in lisp!
</p>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/09/Getting-towards-an-infix-notation-for-hy.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Writing hy code from hy code</title>
      <link>http://jkitchin.github.io/blog/2016/04/07/Writing-hy-code-from-hy-code</link>
      <pubDate>Thu, 07 Apr 2016 13:06:16 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">KQN9I0t9_G2e3k-AIZ6MzojwOos=</guid>
      <description>Writing hy code from hy code</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Serialize as compiled Python</a></li>
<li><a href="#sec-2">2. Summary</a></li>
</ul>
</div>
</div>

<p>
Here is one of the main reasons I am interested in a lisp for programming. I want to write programs that write programs. In Python, I have ended up doing things like this where we build up a script with string formatting and manipulation, write it to a file, and run it later or somewhere else. We need this because we run a lot of our calculations through a queue system which runs asynchronously from the work we do in an editor.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> [1, 2, 3]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">fname</span> = <span style="color: #008000;">'p{0}.py'</span>.<span style="color: #006FE0;">format</span>(x)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">program</span> = <span style="color: #008000;">'''#!/usr/bin/env python</span>
<span style="color: #008000;">def f(x):</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   return x**{0}</span>

<span style="color: #008000;">import sys</span>
<span style="color: #008000;">print f(float(sys.argv[1]))'''</span>.<span style="color: #006FE0;">format</span>(x)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(program)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chmod(fname, 0o755)
</pre>
</div>

<p>
Then you can call these now at the command line like:
</p>

<div class="org-src-container">

<pre class="src src-sh">./p2.py 3
./p3.py 3
</pre>
</div>

<pre class="example">
9.0
27.0
</pre>

<p>
That is not too bad because the script is simple, but it is tedious to keep the indentation right, it is not always easy to keep track of the arguments (even with numbered indexes, names, etc&#x2026; in the formatting), there is limited logic you can use in the arguments (e.g. no if/elif/elif/else, etc&#x2026;), you lose all the value of having an editor in Python mode, so no syntax highlighting, eldoc, code completion, automatic indentation, etc&#x2026; I don't like it, but it gets the job done.
</p>

<p>
Lisps allow you to treat code like data, in an editor in lisp-mode, so it should be ideal for this kind of thing. Here we look at getting that done with hy. For the simplest forms, we simply convert the code to a string, which can then be written to a file. You can see we probably got lucky here that the objects in the expression all print in a simple form that allows us to reconstruct the code. You can see here some aspects of Python peeking through the hy implementation. In data/quoted mode, the atoms in the list are not all simple symbols. By the time the program gets to running the code, they have been transformed to objects of various types that need to be handled separately.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> program `(<span style="color: #006FE0;">+</span> 4 5))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"("</span> (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (str x) [x program])) <span style="color: #008000;">")"</span>))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">list-comp</span> (type x) [x program]))
</pre>
</div>

<pre class="example">
(+ 4 5)
[&lt;class 'hy.models.symbol.HySymbol'&gt;, &lt;class 'hy.models.integer.HyInteger'&gt;, &lt;class 'hy.models.integer.HyInteger'&gt;]
</pre>


<p>
Real programs are not this simple, and we need to handle nested expressions and other types of objects. Consider this program. It has many different types in it, and they don't all get represented by the right syntax in print (i.e. with (repr object).
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">let</span> [program `(list {<span style="color: #008000;">"a"</span> 1 <span style="color: #008000;">"b"</span> 3} <span style="color: #008000;">"b"</span> 3 3.0 [1 1 2] <span style="color: #D0372D;">:keyword</span> (<span style="color: #0000FF;">lambda</span> [x] (<span style="color: #006FE0;">*</span> x 3)))]
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">list-comp</span> (type x) [x program]))
  (<span style="color: #0000FF;">for</span> [x program] (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{0!r}"</span> x))))
</pre>
</div>

<pre class="example">
[&lt;class 'hy.models.symbol.HySymbol'&gt;, &lt;class 'hy.models.dict.HyDict'&gt;, &lt;class 'hy.models.string.HyString'&gt;, &lt;class 'hy.models.integer.HyInteger'&gt;, &lt;class 'hy.models.float.HyFloat'&gt;, &lt;class 'hy.models.list.HyList'&gt;, &lt;class 'hy.models.keyword.HyKeyword'&gt;, &lt;class 'hy.models.expression.HyExpression'&gt;]
u'list'
{u'a' 1L u'b' 3L}
u'b'
3L
3.0
[1L 1L 2L]
u'\ufdd0:keyword'
(u'lambda' [u'x'] (u'*' u'x' 3L))
</pre>

<p>
Next we make a recursive expression to handle some of these. It is recursive to handle nested expressions. Here are the things in hy.models that might need special treatment. We make sure to wrap expressions in (), lists in [], dictionaries in {}, and strings in "". Keywords have a unicode character put in front of them, so we cut that off. Everything else seems to be ok to just convert to a string. This function gets tangled to serialize.hy so it can be used in subsequent code examples.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">hy</span>)

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">stringify</span> [form <span style="color: #6434A3;">&amp;optional</span> debug]
  <span style="color: #008000;">"Convert a FORM to a string."</span>
  (<span style="color: #0000FF;">when</span> debug (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"{0}: {1}"</span> form (type form))))
  (<span style="color: #0000FF;">cond</span>
   [(isinstance form hy.models.expression.HyExpression)
    (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"("</span> (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (stringify x debug) [x form])) <span style="color: #008000;">")"</span>)]
   [(isinstance form hy.models.dict.HyDict)
    (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"{"</span> (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (stringify x debug) [x form])) <span style="color: #008000;">"}"</span>)]
   [(isinstance form hy.models.list.HyList)
    (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"["</span> (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (stringify x debug) [x form])) <span style="color: #008000;">"]"</span>)]
   [(isinstance form hy.models.symbol.HySymbol)
    (.format <span style="color: #008000;">"{}"</span> form)]
   [(isinstance form hy.models.keyword.HyKeyword)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">these have some unicode prefix I want to remove</span>
    (.format <span style="color: #008000;">"{}"</span> (<span style="color: #006FE0;">cut</span> form 1))]
   [(<span style="color: #006FE0;">or</span> (isinstance form hy.models.string.HyString)
        (isinstance form unicode))
    (.format <span style="color: #008000;">"\"{}\""</span> form)]
   [<span style="color: #D0372D;">true</span>
    (.format <span style="color: #008000;">"{}"</span> form)]))
</pre>
</div>

<p>
Now, some examples. These cover most of what I can imagine coming up.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [serialize [stringify]])  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">tangled from the block above</span>

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">some examples that cover most of what I am doing.</span>
(<span style="color: #006FE0;">print</span> (stringify `(<span style="color: #006FE0;">+</span> 5 6.0)))
(<span style="color: #006FE0;">print</span> (stringify `(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">f</span> [x] (<span style="color: #006FE0;">*</span> 2 x))))
(<span style="color: #006FE0;">print</span> (stringify `(<span style="color: #006FE0;">get</span> {<span style="color: #008000;">"a"</span> 1 <span style="color: #008000;">"b"</span> 3} <span style="color: #008000;">"b"</span>)))
(<span style="color: #006FE0;">print</span> (stringify `(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> 4 5 (<span style="color: #006FE0;">*</span> 6 7)))))
(<span style="color: #006FE0;">print</span> (stringify `(import [numpy <span style="color: #D0372D;">:as</span> np])))
(<span style="color: #006FE0;">print</span> (stringify `(import [scipy.optimize [fsolve]])))
(<span style="color: #006FE0;">print</span> (stringify `(set [2 2 3])))
(<span style="color: #006FE0;">print</span> (stringify `(complex 4 5)))
(<span style="color: #006FE0;">print</span> (stringify `(<span style="color: #006FE0;">cons</span> 4 5)))
</pre>
</div>
<pre class="example">
(+ 5 6.0)
(defn f [x] (* 2 x))
(get {"a" 1 "b" 3} "b")
(print (+ 4 5 (* 6 7)))
(import [numpy :as np])
(import [scipy.optimize [fsolve]])
(set [2 2 3])
(complex 4 5)
(cons 4 5)
</pre>

<p>
Those all look promising. Maybe it looks like nothing happened. Something <i>did</i> happen! We took <i>code</i> that was quoted (and hence like a list of <i>data</i>), and converted it into a string representation of the code. Now that we have a string form, we can do things like write it to a file.
</p>

<p>
Next, we add a function that can write that to an executable script.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">scriptify</span> [form fname]
  (<span style="color: #0000FF;">with</span> [f (open fname <span style="color: #008000;">"w"</span>)]
        (.write f <span style="color: #008000;">"#!/usr/bin/env hy\n"</span>)
        (.write f (stringify form)))
  (<span style="color: #0000FF;">import</span> <span style="color: #006699;">os</span>)
  (os.chmod fname 0o755))
</pre>
</div>

<p>
Here is an example
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [serialize [stringify scriptify]])

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">make functions</span>
(<span style="color: #0000FF;">for</span> [x (<span style="color: #006FE0;">range</span> 1 4)]
  (scriptify
   `(<span style="color: #0000FF;">do</span>
     (<span style="color: #0000FF;">import</span> <span style="color: #006699;">sys</span>)
     (<span style="color: #0000FF;">defn</span> <span style="color: #006699;">f</span> [x]
       (<span style="color: #006FE0;">**</span> x ~x))
     (<span style="color: #006FE0;">print</span> (f (float (<span style="color: #006FE0;">get</span> sys.argv 1)))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">fname to write to</span>
   (.format <span style="color: #008000;">"h{}.hy"</span> x)))
</pre>
</div>

<p>
Here is the proof those programs got created.
</p>

<div class="org-src-container">

<pre class="src src-sh">ls h[0-9].hy
<span style="color: #006FE0;">echo</span>
cat h1.hy
</pre>
</div>

<pre class="example">
h1.hy
h2.hy
h3.hy

#!/usr/bin/env hy
(do (import sys) (defn f [x] (** x 1)) (print (f (float (get sys.argv 1)))))
</pre>

<p>
The code is all on one line, which doesn't matter or hy. Yep, if it didn't occur to you, we could take those strings and send them over the internet so they could get executed remotely. They are one read-str and eval away from being lisp code again. Yes there are security concerns with that. And an amazing way to get something done.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [serialize [*]])
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> (<span style="color: #006FE0;">read-str</span> (stringify `(<span style="color: #006FE0;">+</span> 4 5)))))
</pre>
</div>

<pre class="example">
9
</pre>

<p>
We can run those programs at the command line:
</p>
<div class="org-src-container">

<pre class="src src-sh">hy h2.hy 10
hy h3.hy 10
</pre>
</div>

<pre class="example">
100.0
1000.0
</pre>

<p>
Now for a more realistic test. I make some scripts related to the kinds of molecular simulation we do. These scripts just setup a model of bulk Cu or Pt, and print the generated object. In a real application we would compute some thing from this object.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [serialize [stringify scriptify]])

(<span style="color: #0000FF;">for</span> [element [<span style="color: #008000;">"Cu"</span> <span style="color: #008000;">"Pt"</span>]]
  (scriptify `(<span style="color: #0000FF;">do</span> (import [ase.lattice [bulk]])
                  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">we have to str the element to avoid a unicode error</span>
                  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">ase does not do unicode.</span>
                  (<span style="color: #006FE0;">setv</span> atoms (bulk (str ~element) <span style="color: #D0372D;">:a</span> 4.5 <span style="color: #D0372D;">:cubic</span> <span style="color: #D0372D;">True</span>))
                  (<span style="color: #006FE0;">print</span> atoms))
             (.format <span style="color: #008000;">"{}.hy"</span> element)))
</pre>
</div>

<p>
Here is what one of those scripts looks like
</p>

<div class="org-src-container">

<pre class="src src-sh">cat Pt.hy
</pre>
</div>

<pre class="example">
#!/usr/bin/env hy
(do (import [ase.lattice [bulk]]) (setv atoms (bulk (str "Pt") :a 4.5 :cubic True)) (print atoms))
</pre>

<p>
Note the comments are not in the generated script. These are evidently ignored in hy, and are not even elements. We can run this at the command line to. If this script did an actual calculation, we would have a mechanism to generate simulation scripts that run calculations and output the results we want!
</p>

<div class="org-src-container">

<pre class="src src-sh">hy Pt.hy
</pre>
</div>

<pre class="example">
Atoms(symbols='Pt4', positions=..., cell=[4.5, 4.5, 4.5], pbc=[True, True, True])
</pre>

<p>
So, we can write programs that <i>write</i> programs!
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Serialize as compiled Python</h2>
<div class="outline-text-2" id="text-1">
<p>
It could be convenient to run the generated programs from Python instead of hy. Here we consider how to do that. I adapted this code from hy.importer.write_hy_as_pyc.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [hy.importer <span style="color: #D0372D;">:as</span> hi])
(import [hy._compat [PY3 PY33 MAGIC wr_long long_type]])
(<span style="color: #0000FF;">import</span> <span style="color: #006699;">marshal</span>)
(<span style="color: #0000FF;">import</span> <span style="color: #006699;">os</span>)

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">hy2pyc</span> [code fname]
  <span style="color: #008000;">"Write CODE as Python compiled byte-code in FNAME."</span>

  (<span style="color: #006FE0;">setv</span> program (stringify code))

  (<span style="color: #006FE0;">setv</span> _ast (hi.import_buffer_to_ast
              program
              <span style="color: #008000;">"main"</span>))

  (<span style="color: #006FE0;">setv</span> code (hi.ast_compile _ast <span style="color: #008000;">"&lt;string&gt;"</span> <span style="color: #008000;">"exec"</span>))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">create file and close it so we get the size</span>
  (<span style="color: #0000FF;">with</span> [f (open fname <span style="color: #008000;">"wb"</span>)] <span style="color: #D0372D;">nil</span>)
  (<span style="color: #0000FF;">with</span> [f (open fname <span style="color: #008000;">"wb"</span>)]
        (<span style="color: #0000FF;">try</span>
         (<span style="color: #006FE0;">setv</span> st (os.fstat (f.fileno)))
         (<span style="color: #0000FF;">except</span> [e AttributeError]
           (<span style="color: #006FE0;">setv</span> st (os.stat fname))))
        (<span style="color: #006FE0;">setv</span> timestamp (long_type (. st st_mtime))))
  (<span style="color: #0000FF;">with</span> [fc (open fname <span style="color: #008000;">"wb"</span>)]
        (<span style="color: #0000FF;">if</span> PY3
          (.write fc b<span style="color: #008000;">"\0\0\0\0"</span>) <span style="color: #8D8D84; font-style: italic;">; I amnot sure this is right in hy with b""</span>
          (.write fc <span style="color: #008000;">"\0\0\0\0"</span>))
        (wr_long fc timestamp)
        (<span style="color: #0000FF;">when</span> PY33
          (wr_long fc st.st_size))
        (.dump marshal code fc)
        (.flush fc)
        (.seek fc 0 0)
        (.write fc MAGIC)))
</pre>
</div>
<p>
Now for an example.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [serialize [*]])

(hy2pyc `(<span style="color: #0000FF;">do</span>
          (<span style="color: #0000FF;">import</span> <span style="color: #006699;">sys</span>)
          (<span style="color: #0000FF;">defn</span> <span style="color: #006699;">f</span> [x]
            (<span style="color: #006FE0;">**</span> x 3))
          (<span style="color: #006FE0;">print</span> (.format <span style="color: #008000;">"Hy! {0}^3 is {1}."</span>
                          (<span style="color: #006FE0;">get</span> sys.argv 1)
                          (f (float (<span style="color: #006FE0;">get</span> sys.argv 1))))))
          <span style="color: #008000;">"main.pyc"</span>)
</pre>
</div>

<p>
Now we can execute it like this.
</p>
<div class="org-src-container">

<pre class="src src-sh">python main.pyc 4
</pre>
</div>
<pre class="example">
Hy! 4^3 is 64.0.
</pre>

<p>
Well, that worked fine too!
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary</h2>
<div class="outline-text-2" id="text-2">
<p>
In some ways this is similar to the string manipulation approach (they both generate programs after all), but there are these differences:
</p>
<ol class="org-ol">
<li>We do not have the indentation issues of generating Python.
</li>
<li>The code is edited in hy-mode with full language support.
</li>
<li>Instead of formatting, and string replacements, you have to think of what is quoted and what is evaluated. I find that easier to think about than with strings.
</li>
</ol>

<p>
There are some ways we could simplify this perhaps. In this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/">post</a> I added code to the built in python types so they could be represented as lisp code. We could add something like this to each of the hy.model objects so they natively can be represented as hy code. The repr functions on these should technically be used for that I think. On the other hand, this serialize code works fine, and lets me do what I want. It is pretty cool this is all possible!
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/07/Writing-hy-code-from-hy-code.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Another step towards HyDE</title>
      <link>http://jkitchin.github.io/blog/2016/04/06/Another-step-towards-HyDE</link>
      <pubDate>Wed, 06 Apr 2016 16:41:57 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">UVroSTShZIjG4QItitdrTw_4pFc=</guid>
      <description>Another step towards HyDE</description>
      <content:encoded><![CDATA[




<p>
<img src="/media/2016-04-06-Another-step-towards-HyDE/Hyde.png"> 
(In case that isn't clear, it is a Python with a Lisp, and somewhat how I feel trying to see what this is all about ;)
</p>

<p>
I have been chipping away at HyDE, the Hy Development Environment. So far I have reasonable support for eldoc in hy code, and some integration into lispy.
</p>

<p>
The executive summary here is:
</p>
<ol class="org-ol">
<li>We have a first approach at getting eldoc to work.
</li>
<li>We have better integration with lispy, including the inline describe and arg functionality, and jump to symbol.
</li>
</ol>

<p>
You may want to just watch the video to see what it is about: <a href="https://www.youtube.com/watch?v=m62oiB6Feeo">https://www.youtube.com/watch?v=m62oiB6Feeo</a> 
</p>

<p>
The full details of these implementations are described at the end of this post. For now, we just load the functionality here:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">mile-hy</span>)
</pre>
</div>

<pre class="example">
mile-hy
</pre>

<p>
Some examples of usage:
</p>

<div class="org-src-container">

<pre class="src src-hy">(list (<span style="color: #006FE0;">butlast</span> [12 34 56]))
</pre>
</div>

<pre class="example">
[12L, 34L]
</pre>




<p>
For details of the implementations see the following discussion.
</p>

<p>
<a href="https://github.com/jkitchin/jmax/blob/master/mile-hy.el">https://github.com/jkitchin/jmax/blob/master/mile-hy.el</a> includes:
</p>
<ul class="org-ul">
<li>Setting up hy-mode with a repl (partly from lispy)
</li>
<li>an eldoc function
</li>
<li>some hooks for hy-mode to setup some functionality.
</li>
<li>A hy src block expansion template for org-mode
</li>
<li>the contents of what I previously called ob-hy.el
</li>
</ul>

<p>
These things don't work without the code at <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy">https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy</a> which provides some hy functions to get eldoc strings, and file locations. These are still work in progress, but functional at this point.
</p>

<p>
I also adapted some parts of lispy to support hy better in my fork:
</p>
<ul class="org-ul">
<li><a href="https://github.com/jkitchin/lispy/blob/hydoc/le-hy.el">https://github.com/jkitchin/lispy/blob/hydoc/le-hy.el</a> 
</li>
<li><a href="https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el">https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el</a> 
</li>
</ul>

<p>
These are not fully ready to be integrated to lispy yet, as the functionality here depends on the hy code (in hylp.hy) that isn't part of hy yet. I hacked lispy anyway to see how easy it would be to extend it for hy. So far, it looks promising.
</p>

<p>
All of these put together lead to:
</p>
<ol class="org-ol">
<li><a href="https://github.com/jkitchin/jmax/blob/master/mile-hy.el#L20">eldoc support in hy</a> code
</li>
<li>lispy support for <a href="https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el#L247">C-1 descriptions</a> and <a href="https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el#L147">C-2 args</a> inline.
</li>
<li>lispy support for <a href="https://github.com/jkitchin/lispy/blob/hydoc/le-hy.el#L121">M-. to jump</a> to symbol definitions (although it is a tad hacky and uses <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy#L342">hy to generate an org-link</a> to open the code files at the line of the definition ;).
</li>
</ol>

<p>
It is far from fully functional and there are some issues to resolve. The code will also probably change as I resolve some of those issues, but it works well enough to put some ideas out there. Feedback is welcome!
</p>

<p>
The eldoc functions work pretty well for the hy stuff. They don't work too well on the python side. The function at <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy#L120">https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy#L120</a> is where some improvement is needed. Right now it really only catches a few types of symbols.
</p>

<p>
For learning hylang a documentation sprint would be great.
</p>
<ol class="org-ol">
<li>Add examples to the functions.
</li>
<li>Add documentation to the compiler @build definitions. Find a way to make this discoverable the way they are for functions and macros.
</li>
<li>Figure out how to get Python help in. It might be confusing because the syntax and examples will be different.
</li>
</ol>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/06/Another-step-towards-HyDE.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Getting hylp in hy</title>
      <link>http://jkitchin.github.io/blog/2016/04/03/Getting-hylp-in-hy</link>
      <pubDate>Sun, 03 Apr 2016 19:41:52 EDT</pubDate>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">AVdxSlW9H9qSZ9VdA-dAIU6lAt0=</guid>
      <description>Getting hylp in hy</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. hy version  0.11.0</a>
<ul>
<li><a href="#sec-1-1">1.1. Language</a></li>
<li><a href="#sec-1-2">1.2. Shadowed</a></li>
<li><a href="#sec-1-3">1.3. Macros</a></li>
<li><a href="#sec-1-4">1.4. Compiler functions</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
Hylang is a composite of hy functions, macros, compiler code, and Python. To me, this makes it critical to get to documentation and code easily to figure out what is happening. Here we look at how to get help.
</p>

<p>
I have hacked something called hydoc for hylang. This was a battle! There are functions, macros, and builtins that are defined in different places, and some things defined in hy, some in python, and some are done at compile time, &#x2026; I found a lot of things, but there are still some corner cases I am sure. For some information, I resorted to parsing the source files myself to get arguments and file positions.
</p>

<p>
See the main code here: <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy">https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy</a> and the cmd-line script here: <a href="https://github.com/jkitchin/hy/blob/hydoc/bin/hydoc">https://github.com/jkitchin/hy/blob/hydoc/bin/hydoc</a> 
</p>

<p>
It is the beginning of the HyDE, or Hy Development in Emacs. This is a precursor to getting eldoc working in Emacs for Hy. So, without further delay, here is an example command-line use. It is not too fast, but it works.
</p>

<div class="org-src-container">

<pre class="src src-sh">hydoc butlast
</pre>
</div>

<pre class="example">
Usage: Usage: (butlast coll)

Returns coll except of last element.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::46]]
</pre>

<p>
Yep, that is an org-mode link that jumps right to the source definition (in Emacs of course). We can also use it in hy. I have for now put this library (which contains functions and macros) in hy.core.hylp. It may not stay there.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [hy.core.hylp [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">hy.core.hylp</span>)

(? <span style="color: #008000;">"with"</span>)
</pre>
</div>

<pre class="example">
Usage: (with args &amp;rest body)

shorthand for nested with* loops:
  (with [x foo y bar] baz) -&gt;
  (with* [x foo]
    (with* [y bar]
      baz))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::34]]
</pre>

<p>
Compare that to:
</p>
<div class="org-src-container">

<pre class="src src-hy">(help butlast)
</pre>
</div>

<pre class="example">
Help on function butlast in module hy.core.language:

butlast(coll)
    Returns coll except of last element.
</pre>

<p>
pydoc/? is better because it works on macros too, and gives you more information, and in the form that you use in hy, e.g. <code>(butlast coll)</code> not <code>butlast(coll)</code>.
</p>

<p>
I should point out, this is not in hy core anywhere by my github fork right now. It is still being developed. And it isn't perfect or comprehensive yet.
</p>

<p>
Let's see how good. How about we auto-generate some documentation? We will try to generate help for all the core language functions, shadowed functions, macros, and the compiler @build functions.
</p>

<p>
This is still hackier than I would like, but there is some tricky name-mangling in hy if there is a - in the name, e.g. what we use for minus, and also if there is a * in the name, it seems to get expanded. I still don't understand why I need to eval all of this here, but it works, and I get an error about no attribute named key if I don't. It seems to have some consequences though of turning some things into Python objects (especially itertools). It is good enough to share for now. Maybe someone will have a good idea ;)
</p>

<p>
Here is the code that generates the docs with (in org-mode) links to the source! The output follows, and is pretty long. The nice thing about this is the docs are <i>generated</i>, so we can update them pretty readily with new versions.
</p>

<p>
One thing that stands out is the lack of documentation on the compiler defined things. It might be worth figuring out how to put documentation on them, perhaps as an optional argument to the build decorator?
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [hy.core.hylp [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">hy.core.hylp</span>)

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"*** hy version "</span> (. hy __version__))
(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Language"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-language-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Shadowed"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-shadow-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Macros"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-macro-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Compiler functions"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-compiler-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))
</pre>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> hy version  0.11.0</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Language</h3>
<div class="outline-text-3" id="text-1-1">
</div><ol class="org-ol"><li><a id="sec-1-1-1" name="sec-1-1-1"></a>*map<br  /><div class="outline-text-4" id="text-1-1-1">
<p>
Usage: (*map unknown args)
</p>

<p>
starmap(function, sequence) &#x2013;&gt; starmap object
</p>

<p>
Return an iterator whose values are returned from the function evaluated
with a argument tuple taken from the given sequence.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-2" name="sec-1-1-2"></a>accumulate<br  /><div class="outline-text-4" id="text-1-1-2">
<p>
Usage: (accumulate iterable &amp;optional [func operator.add])
</p>

<p>
accumulate(iterable[, func]) &#x2013;&gt; accumulate object
</p>

<p>
Return series of accumulated sums (or other binary function results).
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-3" name="sec-1-1-3"></a>butlast<br  /><div class="outline-text-4" id="text-1-1-3">
<p>
Usage: (butlast coll)
</p>

<p>
Returns coll except of last element.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-4" name="sec-1-1-4"></a>calling_module_name<br  /><div class="outline-text-4" id="text-1-1-4">
<p>
Usage: (calling_module_name &amp;optional [n 1])
</p>

<p>
Get the name of the module calling `n` levels up the stack from the
  `calling-module-name` function call (by default, one level up)
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-5" name="sec-1-1-5"></a>chain<br  /><div class="outline-text-4" id="text-1-1-5">
<p>
Usage: (chain unknown args)
</p>

<p>
chain(*iterables) &#x2013;&gt; chain object
</p>

<p>
Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-6" name="sec-1-1-6"></a>combinations<br  /><div class="outline-text-4" id="text-1-1-6">
<p>
Usage: (combinations unknown args)
</p>

<p>
combinations(iterable, r) &#x2013;&gt; combinations object
</p>

<p>
Return successive r-length combinations of elements in the iterable.
</p>

<p>
combinations(range(4), 3) &#x2013;&gt; (0,1,2), (0,1,3), (0,2,3), (1,2,3)
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-7" name="sec-1-1-7"></a>compress<br  /><div class="outline-text-4" id="text-1-1-7">
<p>
Usage: (compress unknown args)
</p>

<p>
compress(data, selectors) &#x2013;&gt; iterator over selected data
</p>

<p>
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-8" name="sec-1-1-8"></a>cons<br  /><div class="outline-text-4" id="text-1-1-8">
<p>
Usage: (cons a b)
</p>

<p>
Return a fresh cons cell with car = a and cdr = b
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-9" name="sec-1-1-9"></a>count<br  /><div class="outline-text-4" id="text-1-1-9">
<p>
Usage: (count unknown args)
</p>

<p>
count(start=0, step=1) &#x2013;&gt; count object
</p>

<p>
Return a count object whose .next() method returns consecutive values.
Equivalent to:
</p>

<p>
def count(firstval=0, step=1):
    x = firstval
    while 1:
        yield x
        x += step
</p>


<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-10" name="sec-1-1-10"></a>cycle<br  /><div class="outline-text-4" id="text-1-1-10">
<p>
Usage: (cycle unknown args)
</p>

<p>
cycle(iterable) &#x2013;&gt; cycle object
</p>

<p>
Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-11" name="sec-1-1-11"></a>dec<br  /><div class="outline-text-4" id="text-1-1-11">
<p>
Usage: (dec n)
</p>

<p>
Decrement n by 1
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-12" name="sec-1-1-12"></a>disassemble<br  /><div class="outline-text-4" id="text-1-1-12">
<p>
Usage: (disassemble tree &amp;optional [codegen false])
</p>

<p>
Return the python AST for a quoted Hy tree as a string.
   If the second argument is true, generate python code instead.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-13" name="sec-1-1-13"></a>distinct<br  /><div class="outline-text-4" id="text-1-1-13">
<p>
Usage: (distinct coll)
</p>

<p>
Return a generator from the original collection with duplicates
   removed
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-14" name="sec-1-1-14"></a>drop<br  /><div class="outline-text-4" id="text-1-1-14">
<p>
Usage: (drop count coll)
</p>

<p>
Drop `count` elements from `coll` and yield back the rest
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-15" name="sec-1-1-15"></a>drop_last<br  /><div class="outline-text-4" id="text-1-1-15">
<p>
Usage: (drop_last n coll)
</p>

<p>
Return a sequence of all but the last n elements in coll.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-16" name="sec-1-1-16"></a>drop_while<br  /><div class="outline-text-4" id="text-1-1-16">
<p>
Usage: (drop_while unknown args)
</p>

<p>
dropwhile(predicate, iterable) &#x2013;&gt; dropwhile object
</p>

<p>
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-17" name="sec-1-1-17"></a>filter<br  /><div class="outline-text-4" id="text-1-1-17">
<p>
Usage: (filter unknown args)
</p>

<p>
ifilter(function or None, sequence) &#x2013;&gt; ifilter object
</p>

<p>
Return those items of sequence for which function(item) is true.
If function is None, return the items that are true.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-18" name="sec-1-1-18"></a>first<br  /><div class="outline-text-4" id="text-1-1-18">
<p>
Usage: (first coll)
</p>

<p>
Return first item from `coll`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-19" name="sec-1-1-19"></a>flatten<br  /><div class="outline-text-4" id="text-1-1-19">
<p>
Usage: (flatten coll)
</p>

<p>
Return a single flat list expanding all members of coll
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-20" name="sec-1-1-20"></a>fraction<br  /><div class="outline-text-4" id="text-1-1-20">
<p>
Usage: (fraction unknown args)
</p>

<p>
This class implements rational numbers.
</p>

<p>
In the two-argument form of the constructor, Fraction(8, 6) will
produce a rational number equivalent to 4/3. Both arguments must
be Rational. The numerator defaults to 0 and the denominator
defaults to 1 so that Fraction(3) <code>= 3 and Fraction() =</code> 0.
</p>

<p>
Fractions can also be constructed from:
</p>

<ul class="org-ul">
<li>numeric strings similar to those accepted by the
float constructor (for example, '-2.3' or '1e10')
</li>

<li>strings of the form '123/456'
</li>

<li>float and Decimal instances
</li>

<li>other Rational instances (including integers)
</li>
</ul>



<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-21" name="sec-1-1-21"></a>gensym<br  /><div class="outline-text-4" id="text-1-1-21">
<p>
Usage: (gensym &amp;optional [g "G"])
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-22" name="sec-1-1-22"></a>group_by<br  /><div class="outline-text-4" id="text-1-1-22">
<p>
Usage: (group_by unknown args)
</p>

<p>
groupby(iterable[, keyfunc]) -&gt; create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).
</p>


<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-23" name="sec-1-1-23"></a>identity<br  /><div class="outline-text-4" id="text-1-1-23">
<p>
Usage: (identity x)
</p>

<p>
Returns the argument unchanged
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-24" name="sec-1-1-24"></a>inc<br  /><div class="outline-text-4" id="text-1-1-24">
<p>
Usage: (inc n)
</p>

<p>
Increment n by 1
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-25" name="sec-1-1-25"></a>input<br  /><div class="outline-text-4" id="text-1-1-25">
<p>
Usage: (input unknown args)
</p>

<p>
raw_input([prompt]) -&gt; string
</p>

<p>
Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-26" name="sec-1-1-26"></a>integer<br  /><div class="outline-text-4" id="text-1-1-26">
<p>
Usage: (integer x)
</p>

<p>
Return Hy kind of integer
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-27" name="sec-1-1-27"></a>interleave<br  /><div class="outline-text-4" id="text-1-1-27">
<p>
Usage: (interleave &amp;rest seqs)
</p>

<p>
Return an iterable of the first item in each of seqs, then the second etc.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-28" name="sec-1-1-28"></a>interpose<br  /><div class="outline-text-4" id="text-1-1-28">
<p>
Usage: (interpose item seq)
</p>

<p>
Return an iterable of the elements of seq separated by item
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-29" name="sec-1-1-29"></a>is_coll<br  /><div class="outline-text-4" id="text-1-1-29">
<p>
Usage: (is_coll coll)
</p>

<p>
Checks whether item is a collection
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-30" name="sec-1-1-30"></a>is_cons<br  /><div class="outline-text-4" id="text-1-1-30">
<p>
Usage: (is_cons c)
</p>

<p>
Check whether c can be used as a cons object
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-31" name="sec-1-1-31"></a>is_empty<br  /><div class="outline-text-4" id="text-1-1-31">
<p>
Usage: (is_empty coll)
</p>

<p>
Return True if `coll` is empty
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-32" name="sec-1-1-32"></a>is_even<br  /><div class="outline-text-4" id="text-1-1-32">
<p>
Usage: (is_even n)
</p>

<p>
Return true if n is an even number
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-33" name="sec-1-1-33"></a>is_every<br  /><div class="outline-text-4" id="text-1-1-33">
<p>
Usage: (is_every pred coll)
</p>

<p>
Return true if (pred x) is logical true for every x in coll, else false
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-34" name="sec-1-1-34"></a>is_float<br  /><div class="outline-text-4" id="text-1-1-34">
<p>
Usage: (is_float x)
</p>

<p>
Return True if x is float
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-35" name="sec-1-1-35"></a>is_instance<br  /><div class="outline-text-4" id="text-1-1-35">
<p>
Usage: (is_instance klass x)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-36" name="sec-1-1-36"></a>is_integer<br  /><div class="outline-text-4" id="text-1-1-36">
<p>
Usage: (is_integer x)
</p>

<p>
Return True if x in an integer
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-37" name="sec-1-1-37"></a>is_integer_char<br  /><div class="outline-text-4" id="text-1-1-37">
<p>
Usage: (is_integer_char x)
</p>

<p>
Return True if char `x` parses as an integer
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-38" name="sec-1-1-38"></a>is_iterable<br  /><div class="outline-text-4" id="text-1-1-38">
<p>
Usage: (is_iterable x)
</p>

<p>
Return true if x is iterable
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-39" name="sec-1-1-39"></a>is_iterator<br  /><div class="outline-text-4" id="text-1-1-39">
<p>
Usage: (is_iterator x)
</p>

<p>
Return true if x is an iterator
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-40" name="sec-1-1-40"></a>is_keyword<br  /><div class="outline-text-4" id="text-1-1-40">
<p>
Usage: (is_keyword k)
</p>

<p>
Check whether k is a keyword
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-41" name="sec-1-1-41"></a>is_neg<br  /><div class="outline-text-4" id="text-1-1-41">
<p>
Usage: (is_neg n)
</p>

<p>
Return true if n is &lt; 0
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-42" name="sec-1-1-42"></a>is_nil<br  /><div class="outline-text-4" id="text-1-1-42">
<p>
Usage: (is_nil x)
</p>

<p>
Return true if x is nil (None)
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-43" name="sec-1-1-43"></a>is_none<br  /><div class="outline-text-4" id="text-1-1-43">
<p>
Usage: (is_none x)
</p>

<p>
Return true if x is None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-44" name="sec-1-1-44"></a>is_numeric<br  /><div class="outline-text-4" id="text-1-1-44">
<p>
Usage: (is_numeric x)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-45" name="sec-1-1-45"></a>is_odd<br  /><div class="outline-text-4" id="text-1-1-45">
<p>
Usage: (is_odd n)
</p>

<p>
Return true if n is an odd number
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-46" name="sec-1-1-46"></a>is_pos<br  /><div class="outline-text-4" id="text-1-1-46">
<p>
Usage: (is_pos n)
</p>

<p>
Return true if n is &gt; 0
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-47" name="sec-1-1-47"></a>is_string<br  /><div class="outline-text-4" id="text-1-1-47">
<p>
Usage: (is_string x)
</p>

<p>
Return True if x is a string
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-48" name="sec-1-1-48"></a>is_symbol<br  /><div class="outline-text-4" id="text-1-1-48">
<p>
Usage: (is_symbol s)
</p>

<p>
Check whether s is a symbol
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-49" name="sec-1-1-49"></a>is_zero<br  /><div class="outline-text-4" id="text-1-1-49">
<p>
Usage: (is_zero n)
</p>

<p>
Return true if n is 0
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-50" name="sec-1-1-50"></a>islice<br  /><div class="outline-text-4" id="text-1-1-50">
<p>
Usage: (islice unknown args)
</p>

<p>
islice(iterable, [start,] stop [, step]) &#x2013;&gt; islice object
</p>

<p>
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-51" name="sec-1-1-51"></a>iterate<br  /><div class="outline-text-4" id="text-1-1-51">
<p>
Usage: (iterate f x)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-52" name="sec-1-1-52"></a>keyword<br  /><div class="outline-text-4" id="text-1-1-52">
<p>
Usage: (keyword value)
</p>

<p>
Create a keyword from the given value. Strings numbers and even objects
  with the <span class="underline"><span class="underline">name</span></span> magic will work
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-53" name="sec-1-1-53"></a>last<br  /><div class="outline-text-4" id="text-1-1-53">
<p>
Usage: (last coll)
</p>

<p>
Return last item from `coll`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-54" name="sec-1-1-54"></a>list*<br  /><div class="outline-text-4" id="text-1-1-54">
<p>
Usage: (list* hd &amp;rest tl)
</p>

<p>
Return a dotted list construed from the elements of the argument
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-55" name="sec-1-1-55"></a>macroexpand<br  /><div class="outline-text-4" id="text-1-1-55">
<p>
Usage: (macroexpand form)
</p>

<p>
Return the full macro expansion of form
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-56" name="sec-1-1-56"></a>macroexpand_1<br  /><div class="outline-text-4" id="text-1-1-56">
<p>
Usage: (macroexpand_1 form)
</p>

<p>
Return the single step macro expansion of form
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-57" name="sec-1-1-57"></a>map<br  /><div class="outline-text-4" id="text-1-1-57">
<p>
Usage: (map unknown args)
</p>

<p>
imap(func, *iterables) &#x2013;&gt; imap object
</p>

<p>
Make an iterator that computes the function using arguments from
each of the iterables.  Like map() except that it returns
an iterator instead of a list and that it stops when the shortest
iterable is exhausted instead of filling in None for shorter
iterables.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-58" name="sec-1-1-58"></a>merge_with<br  /><div class="outline-text-4" id="text-1-1-58">
<p>
Usage: (merge_with f &amp;rest maps)
</p>

<p>
Returns a map that consists of the rest of the maps joined onto
   the first. If a key occurs in more than one map, the mapping(s)
   from the latter (left-to-right) will be combined with the mapping in
   the result by calling (f val-in-result val-in-latter).
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-59" name="sec-1-1-59"></a>multicombinations<br  /><div class="outline-text-4" id="text-1-1-59">
<p>
Usage: (multicombinations unknown args)
</p>

<p>
combinations_with_replacement(iterable, r) &#x2013;&gt; combinations_with_replacement object
</p>

<p>
Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) &#x2013;&gt; AA AB AC BB BC CC
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-60" name="sec-1-1-60"></a>name<br  /><div class="outline-text-4" id="text-1-1-60">
<p>
Usage: (name value)
</p>

<p>
Convert the given value to a string. Keyword special character will be stripped.
  String will be used as is. Even objects with the <span class="underline"><span class="underline">name</span></span> magic will work
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-61" name="sec-1-1-61"></a>nth<br  /><div class="outline-text-4" id="text-1-1-61">
<p>
Usage: (nth coll n &amp;optional [default nil])
</p>

<p>
Return nth item in collection or sequence, counting from 0.
   Return nil if out of bounds unless specified otherwise.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-62" name="sec-1-1-62"></a>partition<br  /><div class="outline-text-4" id="text-1-1-62">
<p>
Usage: (partition coll &amp;optional [n 2] step [fillvalue -sentinel])
</p>

<p>
Chunks coll into n-tuples (pairs by default). The remainder, if any, is not
   included unless a fillvalue is specified. The step defaults to n, but can be
   more to skip elements, or less for a sliding window with overlap.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-63" name="sec-1-1-63"></a>permutations<br  /><div class="outline-text-4" id="text-1-1-63">
<p>
Usage: (permutations unknown args)
</p>

<p>
permutations(iterable[, r]) &#x2013;&gt; permutations object
</p>

<p>
Return successive r-length permutations of elements in the iterable.
</p>

<p>
permutations(range(3), 2) &#x2013;&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-64" name="sec-1-1-64"></a>product<br  /><div class="outline-text-4" id="text-1-1-64">
<p>
Usage: (product unknown args)
</p>

<p>
product(*iterables) &#x2013;&gt; product object
</p>

<p>
Cartesian product of input iterables.  Equivalent to nested for-loops.
</p>

<p>
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
</p>

<p>
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
</p>

<p>
product('ab', range(3)) &#x2013;&gt; ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) &#x2013;&gt; (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) &#x2026;
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-65" name="sec-1-1-65"></a>range<br  /><div class="outline-text-4" id="text-1-1-65">
<p>
Usage: (range unknown args)
</p>

<p>
xrange(stop) -&gt; xrange object
xrange(start, stop[, step]) -&gt; xrange object
</p>

<p>
Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is
slightly faster than range() and more memory efficient.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-66" name="sec-1-1-66"></a>read<br  /><div class="outline-text-4" id="text-1-1-66">
<p>
Usage: (read &amp;optional [from-file sys.stdin] [eof ""])
</p>

<p>
Read from input and returns a tokenized string.
   Can take a given input buffer to read from
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-67" name="sec-1-1-67"></a>read_str<br  /><div class="outline-text-4" id="text-1-1-67">
<p>
Usage: (read_str input)
</p>

<p>
Reads and tokenizes first line of input
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-68" name="sec-1-1-68"></a>reduce<br  /><div class="outline-text-4" id="text-1-1-68">
<p>
Usage: (reduce unknown args)
</p>

<p>
reduce(function, sequence[, initial]) -&gt; value
</p>

<p>
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-69" name="sec-1-1-69"></a>remove<br  /><div class="outline-text-4" id="text-1-1-69">
<p>
Usage: (remove unknown args)
</p>

<p>
ifilterfalse(function or None, sequence) &#x2013;&gt; ifilterfalse object
</p>

<p>
Return those items of sequence for which function(item) is false.
If function is None, return the items that are false.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-70" name="sec-1-1-70"></a>repeat<br  /><div class="outline-text-4" id="text-1-1-70">
<p>
Usage: (repeat unknown args)
</p>

<p>
repeat(object [,times]) -&gt; create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-71" name="sec-1-1-71"></a>repeatedly<br  /><div class="outline-text-4" id="text-1-1-71">
<p>
Usage: (repeatedly func)
</p>

<p>
Yield result of running func repeatedly
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-72" name="sec-1-1-72"></a>rest<br  /><div class="outline-text-4" id="text-1-1-72">
<p>
Usage: (rest coll)
</p>

<p>
Get all the elements of a coll, except the first.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-73" name="sec-1-1-73"></a>second<br  /><div class="outline-text-4" id="text-1-1-73">
<p>
Usage: (second coll)
</p>

<p>
Return second item from `coll`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-74" name="sec-1-1-74"></a>some<br  /><div class="outline-text-4" id="text-1-1-74">
<p>
Usage: (some pred coll)
</p>

<p>
Return the first logical true value of (pred x) for any x in coll, else nil
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-75" name="sec-1-1-75"></a>string<br  /><div class="outline-text-4" id="text-1-1-75">
<p>
Usage: (string x)
</p>

<p>
Cast x as current string implementation
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-76" name="sec-1-1-76"></a>take<br  /><div class="outline-text-4" id="text-1-1-76">
<p>
Usage: (take count coll)
</p>

<p>
Take `count` elements from `coll`, or the whole set if the total
    number of entries in `coll` is less than `count`.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-77" name="sec-1-1-77"></a>take_nth<br  /><div class="outline-text-4" id="text-1-1-77">
<p>
Usage: (take_nth n coll)
</p>

<p>
Return every nth member of coll
     raises ValueError for (not (pos? n))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-78" name="sec-1-1-78"></a>take_while<br  /><div class="outline-text-4" id="text-1-1-78">
<p>
Usage: (take_while unknown args)
</p>

<p>
takewhile(predicate, iterable) &#x2013;&gt; takewhile object
</p>

<p>
Return successive entries from an iterable as long as the
predicate evaluates to true for each entry.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-79" name="sec-1-1-79"></a>tee<br  /><div class="outline-text-4" id="text-1-1-79">
<p>
Usage: (tee unknown args)
</p>

<p>
tee(iterable, n=2) &#x2013;&gt; tuple of n independent iterators.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-80" name="sec-1-1-80"></a>xor<br  /><div class="outline-text-4" id="text-1-1-80">
<p>
Usage: (xor a b)
</p>

<p>
Perform exclusive or between two parameters
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-81" name="sec-1-1-81"></a>zip<br  /><div class="outline-text-4" id="text-1-1-81">
<p>
Usage: (zip unknown args)
</p>

<p>
izip(iter1 [,iter2 [&#x2026;]]) &#x2013;&gt; izip object
</p>

<p>
Return a izip object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.  Works like the zip()
function but consumes less memory by returning an iterator instead of
a list.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-82" name="sec-1-1-82"></a>zip_longest<br  /><div class="outline-text-4" id="text-1-1-82">
<p>
Usage: (zip_longest unknown args)
</p>

<p>
izip_longest(iter1 [,iter2 [&#x2026;]], [fillvalue=None]) &#x2013;&gt; izip_longest object
</p>

<p>
Return an izip_longest object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
</p>


<p>
<i>no code::-1</i>
</p>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Shadowed</h3>
<div class="outline-text-3" id="text-1-2">
</div><ol class="org-ol"><li><a id="sec-1-2-1" name="sec-1-2-1"></a>!=<br  /><div class="outline-text-4" id="text-1-2-1">
<p>
Usage: (!= &amp;rest args)
</p>

<p>
Shadow != operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-2" name="sec-1-2-2"></a>*<br  /><div class="outline-text-4" id="text-1-2-2">
<p>
Usage: (* &amp;rest args)
</p>

<p>
Shadow * operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-3" name="sec-1-2-3"></a>+<br  /><div class="outline-text-4" id="text-1-2-3">
<p>
Usage: (+ &amp;rest args)
</p>

<p>
Shadow + operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-4" name="sec-1-2-4"></a>-<br  /><div class="outline-text-4" id="text-1-2-4">
<p>
Usage: (- &amp;rest args)
</p>

<p>
Shadow - operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-5" name="sec-1-2-5"></a>/<br  /><div class="outline-text-4" id="text-1-2-5">
<p>
Usage: (/ &amp;rest args)
</p>

<p>
Shadow / operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-6" name="sec-1-2-6"></a>&lt;<br  /><div class="outline-text-4" id="text-1-2-6">
<p>
Usage: (&lt; &amp;rest args)
</p>

<p>
Shadow &lt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-7" name="sec-1-2-7"></a>&lt;=<br  /><div class="outline-text-4" id="text-1-2-7">
<p>
Usage: (&lt;= &amp;rest args)
</p>

<p>
Shadow &lt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-8" name="sec-1-2-8"></a>=<br  /><div class="outline-text-4" id="text-1-2-8">
<p>
Usage: (= &amp;rest args)
</p>

<p>
Shadow = operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-9" name="sec-1-2-9"></a>&gt;<br  /><div class="outline-text-4" id="text-1-2-9">
<p>
Usage: (&gt; &amp;rest args)
</p>

<p>
Shadow &gt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-10" name="sec-1-2-10"></a>&gt;=<br  /><div class="outline-text-4" id="text-1-2-10">
<p>
Usage: (&gt;= &amp;rest args)
</p>

<p>
Shadow &gt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Macros</h3>
<div class="outline-text-3" id="text-1-3">
</div><ol class="org-ol"><li><a id="sec-1-3-1" name="sec-1-3-1"></a>?<br  /><div class="outline-text-4" id="text-1-3-1">
<p>
Usage: (? sym)
</p>

<p>
Return help for SYM which is a string.
</p>

<p>
<a href="/media/2016-04-03-Getting-hylp-in-hy/hylp.hy">hylp.hy</a> 
</p>
</div>
</li>

<li><a id="sec-1-3-2" name="sec-1-3-2"></a>_&gt;<br  /><div class="outline-text-4" id="text-1-3-2">
<p>
Usage: (_&gt; head &amp;rest rest)
</p>

<p>
Threads the head through the rest of the forms. Inserts
   head as the second item in the first form of rest. If
   there are more forms, inserts the first form as the
   second item in the second form of rest, etc.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-3" name="sec-1-3-3"></a>_&gt;&gt;<br  /><div class="outline-text-4" id="text-1-3-3">
<p>
Usage: (_&gt;&gt; head &amp;rest rest)
</p>

<p>
Threads the head through the rest of the forms. Inserts
   head as the last item in the first form of rest. If there
   are more forms, inserts the first form as the last item
   in the second form of rest, etc.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-4" name="sec-1-3-4"></a>car<br  /><div class="outline-text-4" id="text-1-3-4">
<p>
Usage: (car thing)
</p>

<p>
Get the first element of a list/cons
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-5" name="sec-1-3-5"></a>cdr<br  /><div class="outline-text-4" id="text-1-3-5">
<p>
Usage: (cdr thing)
</p>

<p>
Get all the elements of a thing, except the first
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-6" name="sec-1-3-6"></a>cond<br  /><div class="outline-text-4" id="text-1-3-6">
<p>
Usage: (cond &amp;rest branches)
</p>

<p>
shorthand for nested ifs:
   (cond [foo bar] [baz quux]) -&gt;
   (if foo
     bar
     (if baz
       quux))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-7" name="sec-1-3-7"></a>defmacro/g_bang<br  /><div class="outline-text-4" id="text-1-3-7">
<p>
Usage: (defmacro/g_bang name args &amp;rest body)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-8" name="sec-1-3-8"></a>defmain<br  /><div class="outline-text-4" id="text-1-3-8">
<p>
Usage: (defmain args &amp;rest body)
</p>

<p>
Write a function named "main" and do the if <span class="underline"><span class="underline">main</span></span> dance
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-9" name="sec-1-3-9"></a>defn<br  /><div class="outline-text-4" id="text-1-3-9">
<p>
Usage: (defn name lambda-list &amp;rest body)
</p>

<p>
define a function `name` with signature `lambda-list` and body `body`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-10" name="sec-1-3-10"></a>doto<br  /><div class="outline-text-4" id="text-1-3-10">
<p>
Usage: (doto form &amp;rest expressions)
</p>

<p>
Performs a sequence of potentially mutating actions
   on an initial object, returning the resulting object
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-11" name="sec-1-3-11"></a>for<br  /><div class="outline-text-4" id="text-1-3-11">
<p>
Usage: (for args &amp;rest body)
</p>

<p>
shorthand for nested for loops:
  (for [x foo
        y bar]
    baz) -&gt;
  (for* [x foo]
    (for* [y bar]
      baz))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-12" name="sec-1-3-12"></a>hylp_info<br  /><div class="outline-text-4" id="text-1-3-12">
<p>
Usage: (hylp_info sym)
</p>

<p>
Return Usage, docstring filename, lineno for the string SYM.
</p>

<p>
<a href="/media/2016-04-03-Getting-hylp-in-hy/hylp.hy">hylp.hy</a> 
</p>
</div>
</li>

<li><a id="sec-1-3-13" name="sec-1-3-13"></a>if<br  /><div class="outline-text-4" id="text-1-3-13">
<p>
Usage: (if &amp;rest args)
</p>

<p>
if with elif
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-14" name="sec-1-3-14"></a>if_not<br  /><div class="outline-text-4" id="text-1-3-14">
<p>
Usage: (if_not test not-branch &amp;optional yes-branch)
</p>

<p>
Like `if`, but execute the first branch when the test fails
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-15" name="sec-1-3-15"></a>if_python2<br  /><div class="outline-text-4" id="text-1-3-15">
<p>
Usage: (if_python2 python2-form python3-form)
</p>

<p>
If running on python2, execute python2-form, else, execute python3-form
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-16" name="sec-1-3-16"></a>let<br  /><div class="outline-text-4" id="text-1-3-16">
<p>
Usage: (let variables &amp;rest body)
</p>

<p>
Execute `body` in the lexical context of `variables`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-17" name="sec-1-3-17"></a>lif<br  /><div class="outline-text-4" id="text-1-3-17">
<p>
Usage: (lif &amp;rest args)
</p>

<p>
Like `if`, but anything that is not None/nil is considered true.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-18" name="sec-1-3-18"></a>lif_not<br  /><div class="outline-text-4" id="text-1-3-18">
<p>
Usage: (lif_not test not-branch &amp;optional yes-branch)
</p>

<p>
Like `if-not`, but anything that is not None/nil is considered true.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-19" name="sec-1-3-19"></a>macro_error<br  /><div class="outline-text-4" id="text-1-3-19">
<p>
Usage: (macro_error location reason)
</p>

<p>
error out properly within a macro
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-20" name="sec-1-3-20"></a>unless<br  /><div class="outline-text-4" id="text-1-3-20">
<p>
Usage: (unless test &amp;rest body)
</p>

<p>
Execute `body` when `test` is false
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-21" name="sec-1-3-21"></a>when<br  /><div class="outline-text-4" id="text-1-3-21">
<p>
Usage: (when test &amp;rest body)
</p>

<p>
Execute `body` when `test` is true
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-22" name="sec-1-3-22"></a>with<br  /><div class="outline-text-4" id="text-1-3-22">
<p>
Usage: (with args &amp;rest body)
</p>

<p>
shorthand for nested with* loops:
  (with [x foo y bar] baz) -&gt;
  (with* [x foo]
    (with* [y bar]
      baz))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-23" name="sec-1-3-23"></a>with_gensyms<br  /><div class="outline-text-4" id="text-1-3-23">
<p>
Usage: (with_gensyms args &amp;rest body)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-24" name="sec-1-3-24"></a>yield_from<br  /><div class="outline-text-4" id="text-1-3-24">
<p>
Usage: (yield_from expr)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> Compiler functions</h3>
<div class="outline-text-3" id="text-1-4">
</div><ol class="org-ol"><li><a id="sec-1-4-1" name="sec-1-4-1"></a>!=<br  /><div class="outline-text-4" id="text-1-4-1">
<p>
Usage: (!= &amp;rest args)
</p>

<p>
Shadow != operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-2" name="sec-1-4-2"></a>%<br  /><div class="outline-text-4" id="text-1-4-2">
<p>
Usage: % defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-3" name="sec-1-4-3"></a>%=<br  /><div class="outline-text-4" id="text-1-4-3">
<p>
Usage: %= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-4" name="sec-1-4-4"></a>&amp;<br  /><div class="outline-text-4" id="text-1-4-4">
<p>
Usage: &amp; defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-5" name="sec-1-4-5"></a>&amp;=<br  /><div class="outline-text-4" id="text-1-4-5">
<p>
Usage: &amp;= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-6" name="sec-1-4-6"></a>*<br  /><div class="outline-text-4" id="text-1-4-6">
<p>
Usage: (* &amp;rest args)
</p>

<p>
Shadow * operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-7" name="sec-1-4-7"></a>**<br  /><div class="outline-text-4" id="text-1-4-7">
<p>
Usage: ** defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-8" name="sec-1-4-8"></a>**=<br  /><div class="outline-text-4" id="text-1-4-8">
<p>
Usage: **= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-9" name="sec-1-4-9"></a>*=<br  /><div class="outline-text-4" id="text-1-4-9">
<p>
Usage: *= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-10" name="sec-1-4-10"></a>+<br  /><div class="outline-text-4" id="text-1-4-10">
<p>
Usage: (+ &amp;rest args)
</p>

<p>
Shadow + operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-11" name="sec-1-4-11"></a>+=<br  /><div class="outline-text-4" id="text-1-4-11">
<p>
Usage: += defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-12" name="sec-1-4-12"></a>,<br  /><div class="outline-text-4" id="text-1-4-12">
<p>
Usage: , defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-13" name="sec-1-4-13"></a>-<br  /><div class="outline-text-4" id="text-1-4-13">
<p>
Usage: (- &amp;rest args)
</p>

<p>
Shadow - operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-14" name="sec-1-4-14"></a>.<br  /><div class="outline-text-4" id="text-1-4-14">
<p>
Usage: . defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-15" name="sec-1-4-15"></a>/<br  /><div class="outline-text-4" id="text-1-4-15">
<p>
Usage: (/ &amp;rest args)
</p>

<p>
Shadow / operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-16" name="sec-1-4-16"></a>//<br  /><div class="outline-text-4" id="text-1-4-16">
<p>
Usage: // defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-17" name="sec-1-4-17"></a>//=<br  /><div class="outline-text-4" id="text-1-4-17">
<p>
Usage: //= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-18" name="sec-1-4-18"></a>/=<br  /><div class="outline-text-4" id="text-1-4-18">
<p>
Usage: /= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-19" name="sec-1-4-19"></a>&lt;<br  /><div class="outline-text-4" id="text-1-4-19">
<p>
Usage: (&lt; &amp;rest args)
</p>

<p>
Shadow &lt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-20" name="sec-1-4-20"></a>&lt;&lt;<br  /><div class="outline-text-4" id="text-1-4-20">
<p>
Usage: &lt;&lt; defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-21" name="sec-1-4-21"></a>&lt;&lt;=<br  /><div class="outline-text-4" id="text-1-4-21">
<p>
Usage: &lt;&lt;= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-22" name="sec-1-4-22"></a>&lt;=<br  /><div class="outline-text-4" id="text-1-4-22">
<p>
Usage: (&lt;= &amp;rest args)
</p>

<p>
Shadow &lt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-23" name="sec-1-4-23"></a>=<br  /><div class="outline-text-4" id="text-1-4-23">
<p>
Usage: (= &amp;rest args)
</p>

<p>
Shadow = operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-24" name="sec-1-4-24"></a>&gt;<br  /><div class="outline-text-4" id="text-1-4-24">
<p>
Usage: (&gt; &amp;rest args)
</p>

<p>
Shadow &gt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-25" name="sec-1-4-25"></a>&gt;=<br  /><div class="outline-text-4" id="text-1-4-25">
<p>
Usage: (&gt;= &amp;rest args)
</p>

<p>
Shadow &gt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-26" name="sec-1-4-26"></a>&gt;&gt;<br  /><div class="outline-text-4" id="text-1-4-26">
<p>
Usage: &gt;&gt; defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-27" name="sec-1-4-27"></a>&gt;&gt;=<br  /><div class="outline-text-4" id="text-1-4-27">
<p>
Usage: &gt;&gt;= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-28" name="sec-1-4-28"></a>@<br  /><div class="outline-text-4" id="text-1-4-28">
<p>
Usage: @ defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-29" name="sec-1-4-29"></a>@=<br  /><div class="outline-text-4" id="text-1-4-29">
<p>
Usage: @= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-30" name="sec-1-4-30"></a>^<br  /><div class="outline-text-4" id="text-1-4-30">
<p>
Usage: ^ defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-31" name="sec-1-4-31"></a>^=<br  /><div class="outline-text-4" id="text-1-4-31">
<p>
Usage: ^= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-32" name="sec-1-4-32"></a>_=<br  /><div class="outline-text-4" id="text-1-4-32">
<p>
Usage: _= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-33" name="sec-1-4-33"></a>and<br  /><div class="outline-text-4" id="text-1-4-33">
<p>
Usage: and defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-34" name="sec-1-4-34"></a>apply<br  /><div class="outline-text-4" id="text-1-4-34">
<p>
Usage: apply defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-35" name="sec-1-4-35"></a>assert<br  /><div class="outline-text-4" id="text-1-4-35">
<p>
Usage: assert defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-36" name="sec-1-4-36"></a>assoc<br  /><div class="outline-text-4" id="text-1-4-36">
<p>
Usage: assoc defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-37" name="sec-1-4-37"></a>break<br  /><div class="outline-text-4" id="text-1-4-37">
<p>
Usage: break defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-38" name="sec-1-4-38"></a>continue<br  /><div class="outline-text-4" id="text-1-4-38">
<p>
Usage: continue defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-39" name="sec-1-4-39"></a>cut<br  /><div class="outline-text-4" id="text-1-4-39">
<p>
Usage: cut defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-40" name="sec-1-4-40"></a>def<br  /><div class="outline-text-4" id="text-1-4-40">
<p>
Usage: def defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-41" name="sec-1-4-41"></a>defclass<br  /><div class="outline-text-4" id="text-1-4-41">
<p>
Usage: defclass defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-42" name="sec-1-4-42"></a>defmacro<br  /><div class="outline-text-4" id="text-1-4-42">
<p>
Usage: defmacro defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-43" name="sec-1-4-43"></a>defreader<br  /><div class="outline-text-4" id="text-1-4-43">
<p>
Usage: defreader defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-44" name="sec-1-4-44"></a>del<br  /><div class="outline-text-4" id="text-1-4-44">
<p>
Usage: del defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-45" name="sec-1-4-45"></a>dict_comp<br  /><div class="outline-text-4" id="text-1-4-45">
<p>
Usage: dict_comp defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-46" name="sec-1-4-46"></a>dispatch_reader_macro<br  /><div class="outline-text-4" id="text-1-4-46">
<p>
Usage: dispatch_reader_macro defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-47" name="sec-1-4-47"></a>do<br  /><div class="outline-text-4" id="text-1-4-47">
<p>
Usage: do defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-48" name="sec-1-4-48"></a>eval<br  /><div class="outline-text-4" id="text-1-4-48">
<p>
Usage: eval defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-49" name="sec-1-4-49"></a>eval_and_compile<br  /><div class="outline-text-4" id="text-1-4-49">
<p>
Usage: eval_and_compile defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-50" name="sec-1-4-50"></a>eval_when_compile<br  /><div class="outline-text-4" id="text-1-4-50">
<p>
Usage: eval_when_compile defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-51" name="sec-1-4-51"></a>except<br  /><div class="outline-text-4" id="text-1-4-51">
<p>
Usage: except defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-52" name="sec-1-4-52"></a>fn<br  /><div class="outline-text-4" id="text-1-4-52">
<p>
Usage: fn defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-53" name="sec-1-4-53"></a>for*<br  /><div class="outline-text-4" id="text-1-4-53">
<p>
Usage: for* defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-54" name="sec-1-4-54"></a>genexpr<br  /><div class="outline-text-4" id="text-1-4-54">
<p>
Usage: genexpr defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-55" name="sec-1-4-55"></a>get<br  /><div class="outline-text-4" id="text-1-4-55">
<p>
Usage: get defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-56" name="sec-1-4-56"></a>global<br  /><div class="outline-text-4" id="text-1-4-56">
<p>
Usage: global defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-57" name="sec-1-4-57"></a>if*<br  /><div class="outline-text-4" id="text-1-4-57">
<p>
Usage: if* defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-58" name="sec-1-4-58"></a>import<br  /><div class="outline-text-4" id="text-1-4-58">
<p>
Usage: import defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-59" name="sec-1-4-59"></a>in<br  /><div class="outline-text-4" id="text-1-4-59">
<p>
Usage: in defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-60" name="sec-1-4-60"></a>is<br  /><div class="outline-text-4" id="text-1-4-60">
<p>
Usage: is defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-61" name="sec-1-4-61"></a>is_not<br  /><div class="outline-text-4" id="text-1-4-61">
<p>
Usage: is_not defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-62" name="sec-1-4-62"></a>lambda<br  /><div class="outline-text-4" id="text-1-4-62">
<p>
Usage: lambda defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-63" name="sec-1-4-63"></a>list_comp<br  /><div class="outline-text-4" id="text-1-4-63">
<p>
Usage: list_comp defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-64" name="sec-1-4-64"></a>nonlocal<br  /><div class="outline-text-4" id="text-1-4-64">
<p>
Usage: nonlocal defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-65" name="sec-1-4-65"></a>not<br  /><div class="outline-text-4" id="text-1-4-65">
<p>
Usage: not defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-66" name="sec-1-4-66"></a>not_in<br  /><div class="outline-text-4" id="text-1-4-66">
<p>
Usage: not_in defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-67" name="sec-1-4-67"></a>or<br  /><div class="outline-text-4" id="text-1-4-67">
<p>
Usage: or defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-68" name="sec-1-4-68"></a>quasiquote<br  /><div class="outline-text-4" id="text-1-4-68">
<p>
Usage: quasiquote defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-69" name="sec-1-4-69"></a>quote<br  /><div class="outline-text-4" id="text-1-4-69">
<p>
Usage: quote defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-70" name="sec-1-4-70"></a>raise<br  /><div class="outline-text-4" id="text-1-4-70">
<p>
Usage: raise defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-71" name="sec-1-4-71"></a>require<br  /><div class="outline-text-4" id="text-1-4-71">
<p>
Usage: require defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-72" name="sec-1-4-72"></a>set_comp<br  /><div class="outline-text-4" id="text-1-4-72">
<p>
Usage: set_comp defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-73" name="sec-1-4-73"></a>setv<br  /><div class="outline-text-4" id="text-1-4-73">
<p>
Usage: setv defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-74" name="sec-1-4-74"></a>try<br  /><div class="outline-text-4" id="text-1-4-74">
<p>
Usage: try defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-75" name="sec-1-4-75"></a>unquote<br  /><div class="outline-text-4" id="text-1-4-75">
<p>
Usage: unquote defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-76" name="sec-1-4-76"></a>unquote_splicing<br  /><div class="outline-text-4" id="text-1-4-76">
<p>
Usage: unquote_splicing defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-77" name="sec-1-4-77"></a>while<br  /><div class="outline-text-4" id="text-1-4-77">
<p>
Usage: while defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-78" name="sec-1-4-78"></a>with*<br  /><div class="outline-text-4" id="text-1-4-78">
<p>
Usage: with* defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-79" name="sec-1-4-79"></a>with_decorator<br  /><div class="outline-text-4" id="text-1-4-79">
<p>
Usage: with_decorator defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-80" name="sec-1-4-80"></a>yield<br  /><div class="outline-text-4" id="text-1-4-80">
<p>
Usage: yield defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-81" name="sec-1-4-81"></a>yield_from<br  /><div class="outline-text-4" id="text-1-4-81">
<p>
Usage: (yield_from expr)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-82" name="sec-1-4-82"></a>|<br  /><div class="outline-text-4" id="text-1-4-82">
<p>
Usage: | defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-83" name="sec-1-4-83"></a>|=<br  /><div class="outline-text-4" id="text-1-4-83">
<p>
Usage: |= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-84" name="sec-1-4-84"></a>~<br  /><div class="outline-text-4" id="text-1-4-84">
<p>
Usage: ~ defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li></ol>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/03/Getting-hylp-in-hy.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>ob-hy.el - or better integration of hylang in org-mode</title>
      <link>http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode</link>
      <pubDate>Fri, 01 Apr 2016 19:31:37 EDT</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">9wlG2HzzI7-88z-SmPn9f-oE0qg=</guid>
      <description>ob-hy.el - or better integration of hylang in org-mode</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tests</a>
<ul>
<li><a href="#sec-1-1">1.1. Simple</a></li>
<li><a href="#sec-1-2">1.2. vars in header</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Summary</a></li>
</ul>
</div>
</div>
<p>
The point of this post is to develop and test a more substantial integration of Hy into org-mode. We develop ob-hy.el here. This is based off of ob-clojure.el.
</p>

<p>
The next few blocks will get tangled to ob-hy.el. First, some variables.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">ob</span>)

(add-to-list 'org-structure-template-alist
             '(<span style="color: #008000;">"hy"</span> <span style="color: #008000;">"#+BEGIN_SRC hy\n?\n#+END_SRC"</span> <span style="color: #008000;">"&lt;src lang=\"hy\"&gt;\n?\n&lt;/src&gt;"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-tangle-lang-exts</span>)
(add-to-list 'org-babel-tangle-lang-exts '(<span style="color: #008000;">"hy"</span> . <span style="color: #008000;">"hy"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-default-header-args:hy</span> '())
(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-header-args:hy</span> '((<span style="color: #006FE0;">:results</span> . <span style="color: #008000;">"output"</span>)))
</pre>
</div>

<pre class="example">
org-babel-header-args:hy
</pre>

<p>
Next a function to expand the code body. This will allow us to pass vars in the header.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-expand-body:hy</span> (body params)
  <span style="color: #036A07;">"Expand BODY according to PARAMS, return the expanded body."</span>
  (<span style="color: #0000FF;">let*</span> ((vars (mapcar #'cdr (org-babel-get-header params <span style="color: #006FE0;">:var</span>)))
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (print-level nil)
         (print-length nil)
         (body (org-babel-trim
                (<span style="color: #0000FF;">if</span> (&gt; (length vars) 0)
                    (concat <span style="color: #008000;">"(let ["</span>
                            (mapconcat
                             (<span style="color: #0000FF;">lambda</span> (var)
                               (format
                                <span style="color: #008000;">"%S (quote %S)"</span>
                                (car var)
                                (cdr var)))
                             vars <span style="color: #008000;">"\n      "</span>)
                            <span style="color: #008000;">"]\n"</span> body <span style="color: #008000;">")"</span>)
                  body))))
    (<span style="color: #0000FF;">when</span> (not (member <span style="color: #008000;">"output"</span> result-params))
      (<span style="color: #0000FF;">setq</span> body (format <span style="color: #008000;">"(print (do  %s\n))"</span> body)))
    body))
</pre>
</div>

<pre class="example">
org-babel-expand-body:hy
</pre>

<p>
And a function to execute the body. We still use a simple approach to write the code to a temp-file, execute it, capture the output, and delete the file. This limits things to
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  <span style="color: #036A07;">"Execute a block of hy code with Babel."</span>
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>))
         result
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (body (org-babel-expand-body:hy body params)))

    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))

    (<span style="color: #0000FF;">unwind-protect</span>
        (<span style="color: #0000FF;">progn</span>
          (<span style="color: #0000FF;">cond</span>
           ((member <span style="color: #008000;">"body"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result body))
           ((member <span style="color: #008000;">"python"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py %s"</span> tempfile))))
           ((member <span style="color: #008000;">"ast"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py -a -np %s"</span> tempfile))))
           (t
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy %s"</span> tempfile)))))

          (<span style="color: #0000FF;">org-babel-result-cond</span> result-params
            result
            (<span style="color: #0000FF;">condition-case</span> nil (org-babel-script-escape result)
              (<span style="color: #ff0000; font-weight: bold;">error</span> result))))
      (delete-file tempfile))))

(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">ob-hy</span>)
</pre>
</div>

<pre class="example">
ob-hy
</pre>

<p>
Now we tangle and load those blocks.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(load-file <span style="color: #008000;">"ob-hy.el"</span>)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Next, we do some tests. They are all simple tests.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tests</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Simple</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
We can see how this turns into Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
print(u'Hy world')
</pre>

<p>
or the AST:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Module(
    body=[Expr(value=Call(func=Name(id='print'), args=[Str(s=u'Hy world')], keywords=[], starargs=None, kwargs=None))])
</pre>

<p>
Let's test :results value. It is not quite the value since we seem to get everything that is output from the script, but if you don't print stuff, it seems to get it right.
</p>

<div class="org-src-container">

<pre class="src src-hy"><span style="color: #008000;">"test"</span>
(<span style="color: #006FE0;">+</span> 1 2 3)
</pre>
</div>

<pre class="example">
6
</pre>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> vars in header</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Here we test out adding variables to the header lines.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="hy-world">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Interesting, I am not sure where the space between them comes from. Let's check out the :results body option. It will show us the hy script that gets run.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "world")]
(print "Hy" data))
</pre>

<p>
Nothing obvious about the space there. We can test out passing block results in here.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
Hy  world
</pre>

<p>
Here is the body of that:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "Hy world
")]
(print data))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary</h2>
<div class="outline-text-2" id="text-2">
<p>
It works well enough to make testing in org-mode pretty convenient. I can't think of anything else it "needs" right now, although communication with a repl might make it faster, and sessions are not supported at the moment. Saving that for another day ;)
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/01/ob-hy.el---or-better-integration-of-hylang-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>More on Hy and why I think it is a big deal</title>
      <link>http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal</link>
      <pubDate>Thu, 31 Mar 2016 13:41:43 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hylang]]></category>
      <guid isPermaLink="false">K3rprBTSYnrEBGagSwWNLrb8STo=</guid>
      <description>More on Hy and why I think it is a big deal</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Editing with hy-mode and lispy</a></li>
<li><a href="#sec-2">2. Python with no whitespace, or commas in lists</a></li>
<li><a href="#sec-3">3. No confusion in expressions in statements</a></li>
<li><a href="#sec-4">4. Proper multiline lambda functions</a></li>
<li><a href="#sec-5">5. Macros and Extensible syntax</a>
<ul>
<li><a href="#sec-5-1">5.1. Some math</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Interoperability with Python</a></li>
<li><a href="#sec-7">7. Integration of emacs and Hy</a></li>
<li><a href="#sec-8">8. Hypster and Hy Society.</a></li>
<li><a href="#sec-9">9. What do we still need?</a></li>
</ul>
</div>
</div>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/30/OMG-A-Lisp-that-runs-python/">Yesterday</a> I talked about <a href="https://github.com/hylang/hy">hylang</a> , a Lisp that basically compiles to and runs Python code. Today, I want to show a few reasons why this is a great idea, and an important one. Below I give a few examples of why the hylang approach is better (in my opinion of course) than Python with a few examples of things I have always wanted in Python but couldn't get.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Editing with hy-mode and lispy</h2>
<div class="outline-text-2" id="text-1">
<p>
There is a major mode for Hy: <a href="https://github.com/hylang/hy-mode">https://github.com/hylang/hy-mode</a> also on MELPA. It gives us some syntax highlighting and better access to a REPL.
</p>

<p>
Let's load lispy (<a href="https://github.com/abo-abo/lispy">https://github.com/abo-abo/lispy</a> ) for it so we also get amazing editing. I always wanted to use lispy style navigation and editing in Python, but the whitespace and indentation did not make it that easy. Problem solved with these. @abo-abo already added basic eval support for Hy to lispy since the post yesterday (<a href="https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c">https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c</a> ); Thanks!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-hook 'hy-mode-hook
          (<span style="color: #0000FF;">lambda</span> ()
            (lispy-mode 1)))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Python with no whitespace, or commas in lists</h2>
<div class="outline-text-2" id="text-2">
<p>
You can still use indentation (it is good style), but this works!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
(<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3) (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
(<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This looks nicer.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
  (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3)
    (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
    (<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This is a big deal too. Using Python in sessions in org-mode has always been a little complicated by the indentation and whitespace, especially with nested loops and functions. That problem is probably gone.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> No confusion in expressions in statements</h2>
<div class="outline-text-2" id="text-3">
<p>
In Python you can do this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 5
<span style="color: #0000FF;">print</span>(a)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
But not this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(a=5)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
  File "&lt;stdin&gt;", line 1
   print(a=5)
          ^
SyntaxError: invalid syntax
</pre>

<p>
You can't put assignment statements and expression statements anywhere you want, they are only legal syntax in some places. For example, a=5 above actually looks like the print function has an argument of a that set to 5. Not true in Lisp; there are only expressions! So this works fine.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">setv</span> a 5))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> a 5))
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
I just like this style of simple syntax.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Proper multiline lambda functions</h2>
<div class="outline-text-2" id="text-4">
<p>
Python syntax fundamentally limits you to one line lambdas. Not so for Hy. Let's use one in a filter to print even numbers. Here is an example with a two-liner but you could make them more complicated. In Python, you have to make a separate function for this. That isn't terrible, but if it is never used for anything else, it could be avoided.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="lambda">(<span style="color: #006FE0;">setv</span> a [0 1 2 3 4 5 6 7 8])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">display</span> [list filter]
  (<span style="color: #0000FF;">for</span> [x list] (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">filter</span> x) (<span style="color: #006FE0;">print</span> x))))

(display a (<span style="color: #0000FF;">lambda</span> [x]
             (<span style="color: #006FE0;">=</span> (<span style="color: #006FE0;">%</span> x 2) 0)))
</pre>
</div>

<pre class="example">
0
2
4
6
8
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Macros and Extensible syntax</h2>
<div class="outline-text-2" id="text-5">
<p>
It is not easy to get real macro (code expansion) behavior in Python. Yes, there are decorators, and closures, and related things that get close to it. But there are not lisp-like macros.
</p>

<p>
Here is a (too) simple macro to allow for infix notation. It only works for two arguments, but could be extended for multiple arguments.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">infix</span> [code]
  (<span style="color: #006FE0;">quasiquote</span> ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> (infix (1 + 1)))
</pre>
</div>
<pre class="example">
2
</pre>

<p>
If we want new syntax we can get it!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">$</span> [code]
  (<span style="color: #006FE0;">quasiquote</span>
   ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> #$(1 + 1))
</pre>
</div>

<pre class="example">
2
</pre>

<p>
Why is this nice? Here is a math example that shows why you might want to change syntax.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Some math</h3>
<div class="outline-text-3" id="text-5-1">
<p>
See <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/">http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/</a> for the Python version of solving the Bessel equation numerically. Here we do it with hylang.
</p>

<p>
Why would we want infix notation? Here is a good reason. The prefix notation is not easy to read. Compare:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">dzdx</span> = 1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
</pre>
</div>

<p>
The infix notation is simpler to read. Still, the code below is not that hard to figure out, especially if there was a generalized infix notation that allowed (with parens for explicit operation precedence):
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (nfx (1.0 / x**2) * ((-x * z) - ((x**2 - nu**2) * y))))
</pre>
</div>

<p>
So, here is the hylang equivalent to my previous Python version.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"hy-ode.png"</span>)
</pre>
</div>

<pre class="example">
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
None
</pre>


<div class="figure">
<p><img src="/media/2016-03-31-More-on-Hy-and-why-I-think-it-is-a-big-deal/hy-ode.png"> 
</p>
</div>

<p>
This looks really good to me, except for that prefix math. The array slice syntax is interesting. Not that obvious yet.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Interoperability with Python</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop">http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop</a> 
</p>

<p>
Write Hy code and use it in Python. Use Python code in Hy. Repeat. Sweet.
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Integration of emacs and Hy</h2>
<div class="outline-text-2" id="text-7">
<p>
This isn't so beautiful but it illustrates  a pretty awesome integration of Hy(python) into Emacs!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">hy</span> (body)
  `(<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
          (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
     (message (format <span style="color: #008000;">"code: %S"</span> ,body))
     (<span style="color: #0000FF;">with-temp-file</span> tempfile
       (mapc (<span style="color: #0000FF;">lambda</span> (form) (insert (format <span style="color: #008000;">"%s"</span> form))) ,body))
     (read (<span style="color: #0000FF;">unwind-protect</span>
               (shell-command-to-string
                (format <span style="color: #008000;">"hy %s"</span> tempfile))
             (delete-file tempfile)))))

(aref (<span style="color: #0000FF;">hy</span> '((import numpy)
            (setv a (numpy.array [1 2 3]))
            (setv b (numpy.array [1 2 3]))
            (print (* a b))))
      1)
</pre>
</div>

<pre class="example">
4
</pre>

<p>
This isn't perfect, and there are many ways it could break down. But if you are careful to make the output "read"able, you can literally embed Hy code in Emacs lisp and use the results, a total win for Science! I feel like it might need something like progn, but that would not change what this does dramatically.
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Hypster and Hy Society.</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://notes.pault.ag/hy-survival-guide/">http://notes.pault.ag/hy-survival-guide/</a> ROTFL. <b>ironically</b> of course ;)
</p>

<p>
And the <a href="https://twitter.com/hylang">@hylang</a> Twitter account is run by Hy Society. Nice.
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> What do we still need?</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li>Experience. Hy seems relatively young compared to other Lisps. It isn't clear yet if this could work like Python does at scale in research. I sure look forward to finding out though!
</li>
<li>Proper infix notation for engineering math. I could live with no operator precedence if it led to a quicker solution for now. As long as something like (1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)) is legal!
</li>
<li>A proper integration with org-mode and the REPL.
</li>
<li>Toolchains like emacs-lisp has. I just love those. Killer debugging, access to hyperlinked documentation, code navigation, &#x2026; Maybe integration with something like SLIME or CIDER? Hyder?
</li>
<li>Use it in a proper big project to find out where the limitations are, maybe Hycse as a companion to Pycse (<a href="http://kitchingroup.cheme.cmu.edu/pycse/">http://kitchingroup.cheme.cmu.edu/pycse/</a> )? or a rewrite of <a href="http://kitchingroup.cheme.cmu.edu/dft-book/">http://kitchingroup.cheme.cmu.edu/dft-book/</a> in Hy?
</li>
</ol>

<p>
Overall, I am pretty excited about this project. The syntax is a bit reminiscent of Clojure, and Racket, the former by design. Lots of new ideas still seem to be percolating in, so there is likely good stuff to see in the future!
</p>

<p>
I haven't used it enough to see the warts yet, but already the top issues I had with Python are largely addressed, so I see this as a way to continue progress with all the benefits of Python.
</p>

<img src="https://imgs.xkcd.com/comics/lisp_cycles.png">
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>OMG A Lisp that runs python</title>
      <link>http://jkitchin.github.io/blog/2016/03/30/OMG-A-Lisp-that-runs-python</link>
      <pubDate>Wed, 30 Mar 2016 17:10:17 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[lisp]]></category>
      <guid isPermaLink="false">dTe2pI6SbLTjMyWs8k1hagdJzL8=</guid>
      <description>OMG A Lisp that runs python</description>
      <content:encoded><![CDATA[



<p>
For a year now I have struggled with abandoning Python for Lisp. It's complicated, I have used Python for 15 years now, and have a lot of skill and knowledge in it. I have used emacs-lisp for about 5 years now, and have a far bit of skill with it too. They solve really different problems. Between the two, I find I <i>like</i> writing and editing elisp <b>lots</b> better than writing Python, except it lacks the scipy+numpy+matplotlib stack. I looked into Racket and Common Lisp, but they also don't really have that as nicely as Python does at the moment. It hit me earlier today that a Lisp that compiled to Python might be the right middle ground. I had seen this project Hy (<a href="http://docs.hylang.org/en/latest/quickstart.html">http://docs.hylang.org/en/latest/quickstart.html</a> ) earlier, but didn't connect the dots to this.
</p>

<p>
Let me do that here. First, an obligatory execute function to run org-mode code blocks.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))
    (<span style="color: #0000FF;">unwind-protect</span>
        (shell-command-to-string
         (format <span style="color: #008000;">"hy %s"</span> tempfile))
      (delete-file tempfile))))
</pre>
</div>

<pre class="example">
org-babel-execute:hy
</pre>

<p>
Now the basic Hello world example. It looks like lisp.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Now for a use that looks like Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">numpy</span>)
(<span style="color: #006FE0;">setv</span> a (numpy.array [1 2 3]))
(<span style="color: #006FE0;">setv</span> b (numpy.array [1 2 3]))
(<span style="color: #006FE0;">print</span> (numpy.dot a b))
</pre>
</div>

<pre class="example">
14
</pre>

<p>
WHAT!!!!
</p>

<p>
A simple plot? Surely it can't be so easy&#x2026;
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])
(plt.plot [1 2 4 8])
(plt.xlabel <span style="color: #008000;">"x"</span>)
(plt.ylabel <span style="color: #008000;">"y"</span>)
(plt.savefig <span style="color: #008000;">"hy-test.png"</span>)
</pre>
</div>

<pre class="example">
2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
</pre>


<div class="figure">
<p><img src="/media/2016-03-30-OMG-A-Lisp-that-runs-python/hy-test.png"> 
</p>
</div>

<p>
Wow. I am not sure what the warnings are, I seem to get them on my Mac for some reason. How about solving an equation?
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [scipy.optimize [fsolve]])
(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">objective</span> [x] (<span style="color: #006FE0;">-</span> 2 x))
(<span style="color: #006FE0;">print</span> (fsolve objective -1))
</pre>
</div>

<pre class="example">
[ 2.]
</pre>


<pre class="example">
     _.-^^---....,,--
 _--                  --_
&lt;                        &gt;)
|                         |
 \._                   _./
    ```--. . , ; .--'''
          | |   |
       .-=||  | |=-.
       `-=#$%&amp;%$#=-'
          | ;  :|
 _____.,-#%&amp;$@%#&amp;#~,._____
       _---~~(~~-_.
     _{        )   )
   ,   ) -~~- ( ,-' )_
  (  `-,_..`., )-- '_,)
 ( ` _)  (  -~( -_ `,  }
 (_-  _  ~_-~~~~`,  ,' )  &lt;---- My brain right now...
   `~ -^(    __;-,((()))
         ~~~~ {_ -_(())
                `\  }
                  { }
</pre>

<p>
I may not be able to sleep tonight&#x2026;
</p>

<p>
Ascii art courtesy of <a href="http://chris.com/ascii/index.php?art=people/body%20parts/brains">http://chris.com/ascii/index.php?art=people/body%20parts/brains</a> and <a href="http://www.ascii-code.com/ascii-art/weapons/explosives.php">http://www.ascii-code.com/ascii-art/weapons/explosives.php</a> .</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/30/OMG-A-Lisp-that-runs-python.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
