<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Wed, 26 Nov 2014 15:53:17 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>New publication in J. Physical Chemistry C on oxygen vacancies in perovskites</title>
      <link>http://jkitchin.github.io/blog/2014/11/26/New-publication-in-J-Physical-Chemistry-C-on-oxygen-vacancies-in-perovskites</link>
      <pubDate>Wed, 26 Nov 2014 10:52:54 EST</pubDate>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">qgiG8TJlrWTtQJAUC-qckNk2kKY=</guid>
      <description>New publication in J. Physical Chemistry C on oxygen vacancies in perovskites</description>
      <content:encoded><![CDATA[



<p>
"Effects of Concentration, Crystal Structure, Magnetism, and Electronic Structure Method on First-Principles Oxygen Vacancy Formation Energy Trends in Perovskites"
J. Phys. Chem. C, Article ASAP
DOI: 10.1021/jp507957n
</p>

<p>
Check out the amazing supporting information file: <a href="http://pubs.acs.org/doi/suppl/10.1021/jp507957n">http://pubs.acs.org/doi/suppl/10.1021/jp507957n</a> 
It has embedded data files and code in it for reproducing the results in the manuscript.
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">curnan-2014-effec-concen</span>,
  <span style="color: #8b008b;">author</span> =       {Curnan, Matthew T. and Kitchin, John R.},
  <span style="color: #8b008b;">title</span> =        {Effects of Concentration, Crystal Structure,
                  Magnetism, and Electronic Structure Method on
                  First-Principles Oxygen Vacancy Formation Energy
                  Trends in Perovskites},
  <span style="color: #8b008b;">journal</span> =      {The Journal of Physical Chemistry C},
  <span style="color: #8b008b;">volume</span> =       0,
  <span style="color: #8b008b;">number</span> =       0,
  <span style="color: #8b008b;">pages</span> =        {null},
  <span style="color: #8b008b;">year</span> =         2014,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/jp507957n</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;"> http://dx.doi.org/10.1021/jp507957n </span>},
  <span style="color: #8b008b;">eprint</span> =       { http://dx.doi.org/10.1021/jp507957n },
}
</pre>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/26/New-publication-in-J.-Physical-Chemistry-C-on-oxygen-vacancies-in-perovskites.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Machine-gradable quizzes in emacs+org-modex</title>
      <link>http://jkitchin.github.io/blog/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex</link>
      <pubDate>Sun, 23 Nov 2014 16:49:52 EST</pubDate>
      <category><![CDATA[org]]></category>
      <category><![CDATA[education]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">5xUSRYZKuVN9t_z_ZDnRsVaBgsM=</guid>
      <description>Machine-gradable quizzes in emacs+org-modex</description>
      <content:encoded><![CDATA[



<p>
In a previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/01/01/Interactive-quizzes-with-feedback-in-org-mode/">post</a> , we considered interactive quizzes in emacs and org-mode. Here we consider a variation of that idea with the aim of creating a machine-gradable quiz, i.e. a modern version of a scantron.
</p>

<p>
The idea is simple, we will let each question be represented by an org headline, and the choices will be clickable links that store the answer as a property in the headline. Each headline will have a unique id. The grading key will contain these ids and the correct answer, and a function will determine if the right answer was selected for each question.
</p>

<p>
Here is a simple link that will store the value of the link as a property. Note that the path must be at least two characters long to be recognized as a link, unless you wrap the link in double brackets. We will have the link insert a comment to indicate to the user what they chose. We do that because the PROPERTIES drawer is usually hidden, and it is not obvious it was changed.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type 
 <span style="color: #228b22;">"mc"</span> 
 (<span style="color: #8b0000;">lambda</span> (link)
   (<span style="color: #8b0000;">save-restriction</span>
     (org-narrow-to-subtree)
     (goto-char (point-max))
     (insert (concat
              (<span style="color: #8b0000;">unless</span> (bolp) <span style="color: #228b22;">"\n"</span>)
              (format <span style="color: #228b22;">"# you chose %s"</span> link))))
       
   (org-entry-put (point) <span style="color: #228b22;">"ANSWER"</span> link)))
</pre>
</div>

<p>
Next, we add a subheading with some questions to test the link.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Some questions</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><a id="ID-19C7BA30-A761-4C94-9F3B-E6010E263949" name="ID-19C7BA30-A761-4C94-9F3B-E6010E263949"></a><span class="section-number-3">1.1</span> question 1</h3>
<div class="outline-text-3" id="text-1-1">
<p>
What is 2 + 2?
</p>

<p>
<a href="a">a</a> 1
</p>

<p>
<a href="b">b</a> 2
</p>

<p>
<a href="c">c</a> 4
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><a id="ID-38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9" name="ID-38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"></a><span class="section-number-3">1.2</span> question 2</h3>
<div class="outline-text-3" id="text-1-2">
<p>
What is 2 - 2?
</p>

<p>
<a href="a">a</a> 0
</p>

<p>
<a href="b">b</a> 2
</p>

<p>
<a href="c">c</a> 4
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Grading</h2>
<div class="outline-text-2" id="text-2">
<p>
We will store an alist of id and answer for each problem. To grade, we simple map over the alist, go to the section with the id, and compare the answers. When the answer is correct, we save a point, and when not, no point. We can use the org-mode machinery to jump to the problems and get the stored answer. We put some feedback at the end of the file to see what was right, and what was wrong.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((key '((<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>)
              (<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>)))
       (MAX (length key))
       (points 0)
       (answer))
  
  (<span style="color: #8b0000;">dolist</span> (tup key)
    (<span style="color: #8b0000;">save-excursion</span>
      (org-open-link-from-string
       (format <span style="color: #228b22;">"id:%s"</span> (car tup)))
      (setq answer (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>))
      (<span style="color: #8b0000;">if</span> (string= answer (cdr tup))
          (<span style="color: #8b0000;">progn</span>
            (setq points (+ 1 points))
            (goto-char (point-max))
            (insert (format <span style="color: #228b22;">"# id:%s: %s correct\n"</span> (car tup) answer)))
        (goto-char (point-max))
        (insert (format <span style="color: #228b22;">"# id:%s: %s wrong (%s is correct)\n"</span>
                        (car tup)
                        answer
                        (cdr tup))))))
  (goto-char (point-max))
  (insert (format
           <span style="color: #228b22;">"#+GRADE: %s"</span> (/ (float points) (float MAX)))))
</pre>
</div>

<p>
That works pretty well. I need to think about how to codify the key, since this would usually be stored in some file. We would also need to wrap the code block in a function that we could call easily. The org-id key is easy, but not very readable. It would make it easy to keep a database of these problems though. 
</p>
<p>
Just for completeness, I want to save the key to a file, and use it. We simply write the alist in a file. Here are the contents, which are tangled to key.el. One alternative might be to have a solution copy of the quiz which has the answers in it, and we read the answers from the file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>)
 (<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>))
</pre>
</div>

<p>
Now, we read it in like this. The rest of the code is basically the same.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((key (<span style="color: #8b0000;">with-temp-buffer</span> 
              (insert-file-contents <span style="color: #228b22;">"key.el"</span>)
              (read (current-buffer))))
       (MAX (length key))
       (points 0)
       (answer))
  
  (<span style="color: #8b0000;">dolist</span> (tup key)
    (<span style="color: #8b0000;">save-excursion</span>
      (org-open-link-from-string
       (format <span style="color: #228b22;">"id:%s"</span> (car tup)))
      (setq answer (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>))
      (<span style="color: #8b0000;">if</span> (string= answer (cdr tup))
          (<span style="color: #8b0000;">progn</span>
            (setq points (+ 1 points))
            (goto-char (point-max))
            (insert (format <span style="color: #228b22;">"# id:%s: %s correct\n"</span> (car tup) answer)))
        (goto-char (point-max))
        (insert (format <span style="color: #228b22;">"# id:%s: %s wrong (%s is correct)\n"</span>
                        (car tup)
                        answer
                        (cdr tup))))))
  (goto-char (point-max))
  (insert (format
           <span style="color: #228b22;">"#+GRADE: %s"</span> (/ (float points) (float MAX)))))
</pre>
</div>

<p>
It is probably much easier to have a solution version of the quiz, and generate the key from it. For example, we can collect the ID and ANSWER from the problems in this file like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((key '()))
  (org-map-entries
   (<span style="color: #8b0000;">lambda</span> ()
     (<span style="color: #8b0000;">let</span> ((id) (ans))
       (<span style="color: #8b0000;">when</span> (and
              (setq id (org-entry-get (point) <span style="color: #228b22;">"ID"</span>))
              (setq ans (org-entry-get (point) <span style="color: #228b22;">"ANSWER"</span>)))
         (add-to-list 'key (cons id ans))))))
key)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #228b22;">"38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9"</span> . <span style="color: #228b22;">"a"</span>)
 (<span style="color: #228b22;">"19C7BA30-A761-4C94-9F3B-E6010E263949"</span> . <span style="color: #228b22;">"c"</span>))
</pre>
</div>

<p>
So, if we had a master solution file, we could read the key from there. That is the way to do this.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A helm interface to ps</title>
      <link>http://jkitchin.github.io/blog/2014/11/22/A-helm-interface-to-ps</link>
      <pubDate>Sat, 22 Nov 2014 12:57:42 EST</pubDate>
      <category><![CDATA[helm emacs]]></category>
      <guid isPermaLink="false">TOW03ZNV4izP7X9RRqp2zb-jvsI=</guid>
      <description>A helm interface to ps</description>
      <content:encoded><![CDATA[


<p>
Occassionally, I need to find the PID of a process to kill it or do something else. Usually I do the old-school unix thing  of piping the output of one command (ps) to another command (grep) to filter out interesting lines. Then, I can do something with that output.
</p>

<div class="org-src-container">

<pre class="src src-sh">ps aux | grep emacs
</pre>
</div>

<pre class="example">
jkitchin         4781   3.1  0.8  2639316  70432 s002  S    12:45PM   0:06.68 /usr/local/Cellar/emacs/HEAD/Emacs.app/Contents/MacOS/Emacs
jkitchin         4777   0.0  0.0  2433364    932 s002  S    12:45PM   0:00.00 /bin/bash /usr/local/bin/emacs
jkitchin         4874   0.0  0.0  2432784    604   ??  S    12:46PM   0:00.00 grep emacs
</pre>

<p>
Today, I will explore using helm in emacs to do something like that. The idea is to create a helm command that uses the output of ps as candidates, and then you select the process you want through the helm interface, and then select an action.
</p>

<p>
It is easy enough to get the output of the ps command in emacs like this. Here, we just get the first three results, and specify the output we want.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((results (split-string
                (shell-command-to-string
                 <span style="color: #228b22;">"ps x -o ruser,pid,command"</span>) <span style="color: #228b22;">"\n"</span>)))
  (loop for i from 1 to 3
        collect (elt results i)))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #228b22;">"jkitchin   139 /sbin/launchd"</span> <span style="color: #228b22;">"jkitchin   151 /usr/libexec/UserEventAgent (Aqua)"</span> <span style="color: #228b22;">"jkitchin   152 /usr/sbin/distnoted agent"</span>)
</pre>
</div>

<p>
These will be the candidates for the helm command. We will create a few actions. One will provide details about the pid, and one could in principle kill the pid or send some signal to it. We will just have these actions create message boxes for us to see helm in action. We will make the kill function interactive, so it allows an arbitrary signal to be sent. The other actions are placeholders for future actions, and so we can show off some shortcuts in helm later.
</p>

<p>
For the candidates, we will construct a list of cons cells where the car is a line from ps, and that is what will show in the helm selection interface, and the cdr will be the pid which we get by parsing the line to get the second element. When you select an entry in helm, the cdr of that entry (if it exists) is passed to the action function selected.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-candidates</span> ()
  <span style="color: #228b22;">"return a list of cons cells (line . pid) for the output of ps"</span>
  (loop for line in
        ;; <span style="color: #ff0000; font-weight: bold;">skip the first line which is a header</span>
        (cdr (split-string
              (shell-command-to-string
               <span style="color: #228b22;">"ps ax -o ruser,pid,command"</span>) <span style="color: #228b22;">"\n"</span>))
        collect
        (cons
         line
         (elt (split-string line) 1))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-details</span> (pid)
  <span style="color: #228b22;">"give details of PID."</span>
  (message-box <span style="color: #228b22;">"%s"</span> (shell-command-to-string (format <span style="color: #228b22;">"ps ux %s"</span> pid))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-kill</span> (pid)
  <span style="color: #228b22;">"Message box instead of killing PID."</span>
  (<span style="color: #8b0000;">let</span> ((SIG (read-string <span style="color: #228b22;">"Kill with signal: "</span>)))
    (message-box <span style="color: #228b22;">"Killing pid %s with signal %s"</span> pid SIG)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-hello</span> (pid)
  (message-box <span style="color: #228b22;">"Silly 3rd action for %s"</span> pid))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-bye</span> (pid)
  (message-box <span style="color: #228b22;">"Silly 4th action for %s"</span> pid))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">ps-byebye</span> (pid)
  (message-box <span style="color: #228b22;">"Silly 5th action for %s"</span> pid))

;; <span style="color: #ff0000; font-weight: bold;">the source variable for helm</span>
(setq helm-source-ps '((name . <span style="color: #228b22;">"ps output"</span>)
                       ;; <span style="color: #ff0000; font-weight: bold;">these are the entries you can select</span>
                       (candidates . ps-candidates)
                       ;; <span style="color: #ff0000; font-weight: bold;">these are the actions available for the</span>
                       ;; <span style="color: #ff0000; font-weight: bold;">selected entry. each function gets the cdr</span>
                       ;; <span style="color: #ff0000; font-weight: bold;">of the entry selected.</span>
                       (action . ((<span style="color: #228b22;">"details"</span> . ps-details)
                                  (<span style="color: #228b22;">"kill"</span> . ps-kill)
                                  (<span style="color: #228b22;">"hello"</span> . ps-hello)
                                  (<span style="color: #228b22;">"bye"</span> . ps-bye)
                                  (<span style="color: #228b22;">"byb-bye"</span> . ps-byebye)))))

;; <span style="color: #ff0000; font-weight: bold;">now we run the helm command</span>
(helm <span style="color: #cd0000;">:sources</span> '(helm-source-ps))
</pre>
</div>


<p>
You can navigate the helm interface with the arrows, or C-n (next/down) C-p (previous/up), or by typing in the pattern you want to match. There are only two actions here. The first one is the default action, which you can run by pressing tab or enter. The subtle difference between them is that tab leaves the helm window open, while enter runs the default action and closes the helm window. You can get it back with C-c h r (or M-x helm-resume). 
</p>

<p>
To get the kill function, you can press C-z to get the action menu, and then press enter. Helm provides a shortcut for this. C-e selects the second action, so when you remember what the second action is and you want it, you can skip the C-z activity. You can access the third action with C-j. There is a command like helm-select-4th-action, but it is not bound to a key, so we have to make one like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(define-key helm-map (kbd <span style="color: #228b22;">"C-k"</span>) 'helm-select-4th-action)
</pre>
</div>

<p>
You can also define a 5th action like this. It does not seem possible to define an arbitrary nth action, because you cannot get an input for n while helm uses the minibuffer. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">5th-action</span> ()
 (interactive)
 (<span style="color: #8b0000;">let</span> ((n 5))
   ;; <span style="color: #ff0000; font-weight: bold;">actions start at 0, so the 5th action is actually indexed at 4</span>
   (helm-select-nth-action (- n 1))))

(define-key helm-map (kbd <span style="color: #228b22;">"C-l"</span>) '5th-action)
</pre>
</div>

<p>
That is the proof of concept in using a helm interface to interact with unix commands. There are other actions you might choose, like renice, or maybe it is possible to suspend a job by pid. The real application for this I had in mind was interaction with the Torque queue system, where you might want to modify, kill jobs in the queue system this way. I could also see applications in user management, where you have some well defined functions to run, e.g. checking quotas, changing passwords, etc&#x2026; Clearly the utility of this approach rests heavily on there being a set of actions you do regularly enough to justify coding them into functions, and often enough you would remember to use your helm command! It is an interesting approach as an alternative to writing shell scripts to do this though.
</p>

<p>
This post might make more sense if you watch this video of the helm interface in action: <a href="http://www.youtube.com/watch?v=3FImB6OwHI0">http://www.youtube.com/watch?v=3FImB6OwHI0</a> </p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/22/A-helm-interface-to-ps.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>The loop macro in emacs lisp</title>
      <link>http://jkitchin.github.io/blog/2014/11/20/The-loop-macro-in-emacs-lisp</link>
      <pubDate>Thu, 20 Nov 2014 09:50:00 EST</pubDate>
      <category><![CDATA[emacs_lisp]]></category>
      <guid isPermaLink="false">MiNAccBMPmVFgJgu8OOvK5oKHoE=</guid>
      <description>The loop macro in emacs lisp</description>
      <content:encoded><![CDATA[


<p>
I was reading <a href="http://landoflisp.com">The Land Of Lisp</a> chapter on the loop macro in Common Lisp. I am not too familiar with it, or the implementation in emacs-lisp, so in this post we explore what it can do. Here I will explore some uses of the loop macro to do things I used to do in Python all the time.
</p>

<p>
Here is a simple example to generate a list of numbers with the loop macro..
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i
      below 5
      collect i)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">0</td>
<td class="right">1</td>
<td class="right">2</td>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>

<p>
Evidently, i starts at 0, and increments by one. We can specify a different value like this. Here we use the <code>to</code> token, which also includes the last value.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i from 2 to 10
  collect i)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">2</td>
<td class="right">3</td>
<td class="right">4</td>
<td class="right">5</td>
<td class="right">6</td>
<td class="right">7</td>
<td class="right">8</td>
<td class="right">9</td>
<td class="right">10</td>
</tr>
</tbody>
</table>

<p>
IF you want to go backwards:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i downfrom 10 to 2 collect i)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">10</td>
<td class="right">9</td>
<td class="right">8</td>
<td class="right">7</td>
<td class="right">6</td>
<td class="right">5</td>
<td class="right">4</td>
<td class="right">3</td>
<td class="right">2</td>
</tr>
</tbody>
</table>

<p>
And if you want an (de)increment different than one, use the <code>by</code> token.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i downfrom 10 to 2 by 3 collect i)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">10</td>
<td class="right">7</td>
<td class="right">4</td>
</tr>
</tbody>
</table>

<p>
We can use this to iterate over a list too. Let us collect the square of each element in a simple list. This is similar to the mapcar function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i in '(1 2 3 4)
  collect (* i i))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">4</td>
<td class="right">9</td>
<td class="right">16</td>
</tr>
</tbody>
</table>

<p>
You can combine the ideas to get something similar to the enumerate function in python. 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i
      from 0
      for month
      in '(january february march april may june july august september
                   october november december)
      collect (cons i month))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((0 . january)
 (1 . february)
 (2 . march)
 (3 . april)
 (4 . may)
 (5 . june)
 (6 . july)
 (7 . august)
 (8 . september)
 (9 . october)
 (10 . november)
 (11 . december))
</pre>
</div>

<p>
The loop stops because we run out of months to iterate over.  Here is a variation like the zip function in python.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for element1 in '(a b c d)
      for element2 in '(1 2 3 4)
      collect (list element1 element2))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="left">a</td>
<td class="right">1</td>
</tr>

<tr>
<td class="left">b</td>
<td class="right">2</td>
</tr>

<tr>
<td class="left">c</td>
<td class="right">3</td>
</tr>

<tr>
<td class="left">d</td>
<td class="right">4</td>
</tr>
</tbody>
</table>

<p>
We can sum in the loop:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i in '(100 200 300) sum i)
</pre>
</div>

<pre class="example">
600
</pre>

<p>
We can conditionally sum things in the loop, e.g. sum only the odd numbers.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i in '(1 2 3 4 5)
  when (oddp i)
  sum i)
</pre>
</div>

<pre class="example">
9
</pre>

<p>
We can find the minima and maxima in a list
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i in '(-1 0 1)
  minimize i)
</pre>
</div>

<pre class="example">
-1
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i in '(-1 0 1)
  maximize i)
</pre>
</div>

<pre class="example">
1
</pre>

<p>
You may want to do some action in the loop. Say we want to print even numbers from a list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i in '(1 2 3 4)
      when (evenp i)
      do (print i))
</pre>
</div>

<pre class="example">
2

4
</pre>

<p>
There are some ways to break out of a loop using <code>return</code> like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i upto 10
      when (= i 3)
      return 'done
      do (print i))
</pre>
</div>

<pre class="example">
0

1

2
</pre>

<p>
Alternatively, you can use while/until.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i downfrom 10
      do (print i)
      until (= i 6))
</pre>
</div>

<pre class="example">
10

9

8

7

6
</pre>

<p>
Or the while variation:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(loop for i downfrom 10
      do (print i)
      while (&gt; i 6))
</pre>
</div>

<pre class="example">
10

9

8

7

6
</pre>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary</h2>
<div class="outline-text-2" id="text-1">
<p>
This is not everything the loop macro can do! Here is what the help for that function says.
</p>

<pre class="example">
loop is an alias for `cl-loop' in `cl.el'.

(loop CLAUSE...)

The Common Lisp `loop' macro.
Valid clauses include:
  For clauses:
    for VAR from/upfrom/downfrom EXPR1 to/upto/downto/above/below EXPR2 by EXPR3
    for VAR = EXPR1 then EXPR2
    for VAR in/on/in-ref LIST by FUNC
    for VAR across/across-ref ARRAY
    for VAR being:
      the elements of/of-ref SEQUENCE [using (index VAR2)]
      the symbols [of OBARRAY]
      the hash-keys/hash-values of HASH-TABLE [using (hash-values/hash-keys V2)]
      the key-codes/key-bindings/key-seqs of KEYMAP [using (key-bindings VAR2)]
      the overlays/intervals [of BUFFER] [from POS1] [to POS2]
      the frames/buffers
      the windows [of FRAME]
  Iteration clauses:
    repeat INTEGER
    while/until/always/never/thereis CONDITION
  Accumulation clauses:
    collect/append/nconc/concat/vconcat/count/sum/maximize/minimize FORM
      [into VAR]
  Miscellaneous clauses:
    with VAR = INIT
    if/when/unless COND CLAUSE [and CLAUSE]... else CLAUSE [and CLAUSE...]
    named NAME
    initially/finally [do] EXPRS...
    do EXPRS...
    [finally] return EXPR

For more details, see Info node `(cl)Loop Facility'.
</pre>

<p>
It is obviously quite powerful, although the syntax seems quite different than the usual lisp code I have been writing. It is not clear when this is superior to something like mapcar/mapconcat, or the dolist/dotimes functions. 
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/20/The-loop-macro-in-emacs-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A hint system for problems in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/11/09/A-hint-system-for-problems-in-org-mode</link>
      <pubDate>Sun, 09 Nov 2014 09:55:17 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">ZGFvwKEGoKtMNrMQ_FtYYfuCkJM=</guid>
      <description>A hint system for problems in org-mode</description>
      <content:encoded><![CDATA[


<p>
I use org-mode to write problems for classes that I teach. Sometimes it is helpful to be able to provide hints about aspects of the problem. I have used drawers for that before. Here I will look at another approach. The idea is to store a unique id (org-id) in the problem headline. We will make hints somewhere else, and each hint will store the id they refer to in some property. We will run a command in the problem that finds the hints, and offers a menu you can select from.
</p>

<p>
In the next sections, we define a <a href="#sec-1">Problem statement</a>, a section with <a href="#sec-2">hints</a> in it, and finally <a href="#sec-3">code</a> that defines a hint function.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-EE9523FF-C4FF-45D9-BABA-8832A6E48C3B" name="ID-EE9523FF-C4FF-45D9-BABA-8832A6E48C3B"></a><span class="section-number-2">1</span> Problem statement</h2>
<div class="outline-text-2" id="text-1">

<p>
What is the seventh number in the Fibonacci series?
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Hints</h2>
<div class="outline-text-2" id="text-2">
<p>
Hints will be stored in headings somewhere. Here we put them in this file, but they could be stored in another file too. We give each hint a HINT property, with the problem id as the value. Here are three hints. In real example, the hints would not be this easy to find in the document. You might store them somewhere else, in another file for example.
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> What is the Fibonacci series?</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The $i<sup>th</sup> number in the Fibonacci series is equal to the sum of the previous two numbers in the series.
</p>
</div>
</div>


<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> What does the series start with?</h3>
<div class="outline-text-3" id="text-2-2">

<p>
The Fibonacci series starts with 1.
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Example of the series.</h3>
<div class="outline-text-3" id="text-2-3">
<p>
The Fibonacci series goes as 1, 1, 2, 3, 5, 8, &#x2026;
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> The hint code</h2>
<div class="outline-text-2" id="text-3">
<p>
We want to get the id from the problem the point is in, and then find hints for the problem. Then, we construct a menu and prompt the user to select a hint. I use a number to select the hint because it was easier to generate the menu that way. I like characters better, because you just have to press a key. With numbers you type the number and press enter. We open a new buffer with the contents of the hint in it. You can close the buffer by pressing q.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">hint</span> ()
  <span style="color: #228b22;">"Present a menu of hints for the problem at point"</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((id (org-entry-get (point) <span style="color: #228b22;">"ID"</span>))
        (entries '())
        (menu <span style="color: #228b22;">""</span>)
        choice)

    (<span style="color: #8b0000;">unless</span> id
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"No problem ID found"</span>))

    (org-map-entries
     (<span style="color: #8b0000;">lambda</span> ()
       (<span style="color: #8b0000;">save-restriction</span>
         (org-narrow-to-subtree)
         (add-to-list 'entries
                      (cons
                       (elt (org-heading-components) 4)
                       (buffer-string))
                      t)))
     (format <span style="color: #228b22;">"HINT=\"%s\""</span> id))

    ;; <span style="color: #ff0000; font-weight: bold;">generate menu string</span>
    (<span style="color: #8b0000;">dolist</span> (i (number-sequence 1 (length entries)))
      (setq menu (concat menu (format <span style="color: #228b22;">"[%s] %s\n"</span> (- i 1)
                                      (car (elt entries (- i 1)))))))

    (setq choice (elt entries (read-number (concat menu <span style="color: #228b22;">"Your choice: "</span>) 0)))
    ;; <span style="color: #ff0000; font-weight: bold;">this feels a little clunky. Maybe I could just save a marker to</span>
    ;; <span style="color: #ff0000; font-weight: bold;">the headline, and open it in a narrowed indirect buffer.</span>
    (<span style="color: #8b0000;">when</span> choice
      (switch-to-buffer <span style="color: #228b22;">"*hint*"</span>)
      (erase-buffer)
      (insert (cdr choice))
      
      (org-mode)
      (show-subtree)
      (setq buffer-read-only t)
      (use-local-map (copy-keymap org-mode-map))
      (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer)))
      )))
</pre>
</div>
<pre class="example">
hint
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Summary</h2>
<div class="outline-text-2" id="text-4">
<p>
This seems like an interesting way to provide hints, or related information in org-mode.  You could also consider using tags, or more sophisticated code  to determine what else is relevant. For example, you might keep track of some performance metric, and use some heuristic algorithm that ranks the related information. Or perhaps fuzzy text searching, or combinations of criteria. If the number of hits got large, then the menu approach here might not be the best one. Then, something like the occur interface might be more suitable.</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/09/A-hint-system-for-problems-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A context-sensitive file link menu in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/11/08/A-context-sensitive-file-link-menu-in-org-mode</link>
      <pubDate>Sat, 08 Nov 2014 10:24:14 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">N7fM4O8dLVofW1TAz418Q8wNbIg=</guid>
      <description>A context-sensitive file link menu in org-mode</description>
      <content:encoded><![CDATA[


<p>
I am still interested in various ways to get more functionality of org-links. For example, we looked at: 
</p>
<ol class="org-ol">
<li><a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/21/Enabling-right-clicks-in-org-mode-links/">enabling right clicks</a> on links
</li>
<li><a href="http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/">new links with menus</a> 
</li>
</ol>

<p>
When you click on a link, the function org-open-at-point runs, which is a <i>large</i> function that does a lot of things. One of them is to check if the link is defined in org-link-protocols, and to run the function definition there if it is. Here is a list of links defined for me. I defined a lot of these in org-ref, and my own init files, so you may not see these on your system.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(mapcar 'car org-link-protocols)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">google</td>
<td class="left">ResearcherID</td>
<td class="left">orcid</td>
<td class="left">message</td>
<td class="left">mac-outlook</td>
<td class="left">skim</td>
<td class="left">addressbook</td>
<td class="left">x-together-item</td>
<td class="left">rmail</td>
<td class="left">mhe</td>
<td class="left">irc</td>
<td class="left">info</td>
<td class="left">gnus</td>
<td class="left">docview</td>
<td class="left">bibtex</td>
<td class="left">bbdb</td>
<td class="left">ans</td>
<td class="left">exercise</td>
<td class="left">solution</td>
<td class="left">assignment</td>
<td class="left">doi</td>
<td class="left">bibentry</td>
<td class="left">Autocites</td>
<td class="left">autocites</td>
<td class="left">supercites</td>
<td class="left">Textcites</td>
<td class="left">textcites</td>
<td class="left">Smartcites</td>
<td class="left">smartcites</td>
<td class="left">footcitetexts</td>
<td class="left">footcites</td>
<td class="left">Parencites</td>
<td class="left">parencites</td>
<td class="left">Cites</td>
<td class="left">cites</td>
<td class="left">fnotecite</td>
<td class="left">Pnotecite</td>
<td class="left">pnotecite</td>
<td class="left">Notecite</td>
<td class="left">notecite</td>
<td class="left">footfullcite</td>
<td class="left">fullcite</td>
<td class="left">citeurl</td>
<td class="left">citedate*</td>
<td class="left">citedate</td>
<td class="left">citetitle*</td>
<td class="left">citetitle</td>
<td class="left">Citeauthor*</td>
<td class="left">Autocite*</td>
<td class="left">autocite*</td>
<td class="left">Autocite</td>
<td class="left">autocite</td>
<td class="left">supercite</td>
<td class="left">parencite*</td>
<td class="left">cite*</td>
<td class="left">Smartcite</td>
<td class="left">smartcite</td>
<td class="left">Textcite</td>
<td class="left">textcite</td>
<td class="left">footcitetext</td>
<td class="left">footcite</td>
<td class="left">Parencite</td>
<td class="left">parencite</td>
<td class="left">Cite</td>
<td class="left">Citeauthor</td>
<td class="left">Citealp</td>
<td class="left">Citealt</td>
<td class="left">Citep</td>
<td class="left">Citet</td>
<td class="left">citeyear*</td>
<td class="left">citeyear</td>
<td class="left">citeauthor*</td>
<td class="left">citeauthor</td>
<td class="left">citetext</td>
<td class="left">citenum</td>
<td class="left">citealp*</td>
<td class="left">citealp</td>
<td class="left">citealt*</td>
<td class="left">citealt</td>
<td class="left">citep*</td>
<td class="left">citep</td>
<td class="left">citet*</td>
<td class="left">citet</td>
<td class="left">nocite</td>
<td class="left">cite</td>
<td class="left">eqref</td>
<td class="left">nameref</td>
<td class="left">pageref</td>
<td class="left">ref</td>
<td class="left">label</td>
<td class="left">list-of-tables</td>
<td class="left">list-of-figures</td>
<td class="left">addbibresource</td>
<td class="left">bibliographystyle</td>
<td class="left">printbibliography</td>
<td class="left">nobibliography</td>
<td class="left">bibliography</td>
<td class="left">pydoc</td>
<td class="left">index</td>
<td class="left">attachfile</td>
<td class="left">msx</td>
<td class="left">id</td>
<td class="left">file+emacs</td>
<td class="left">file+sys</td>
</tr>
</tbody>
</table>

<p>
Interestingly, file links are not defined in org-link-protocols, they are handled separately. I would like to change the behavior of file+emacs links. Instead of just opening the file, I want a menu to give me the option to create the file if it does not exist, and to open it in emacs, or with a system program if the file does exist. Let us see what this link does.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(assoc <span style="color: #228b22;">"file+emacs"</span> org-link-protocols)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">file+emacs</td>
<td class="left">org-open-file-with-emacs</td>
<td class="left">nil</td>
</tr>
</tbody>
</table>

<p>
When you click on the link, it runs org-open-file-with-emacs, and there is no formatting function defined.
</p>

<p>
So, let us define a list of functions that could make a menu. A new variation we use in this post is that each element of the list will be a (key menu-name action-func visible-p) list. visible-p will be a function that determines if the function is listed in the menu. That way, our menu will be context specific.
</p>

<p>
We want an option to create a file if it does not exist, and if it does exist, a choice to open in emacs, or a system program. So the idea here is to create the menu in a variable (so it easy to add to later), then when you click on the link it will run a menu function that  filters the functions to run, and then prompt you for a selection. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">file+emacs-menu</span> '()
  <span style="color: #228b22;">"list of menu entries. (key name action visible).</span>
<span style="color: #228b22;">key is a character to select.</span>
<span style="color: #228b22;">name is what shows in the menu as [key]name</span>
<span style="color: #228b22;">action is a function that takes a path</span>
<span style="color: #228b22;">visible is a function that determines if the entry is in the menu."</span>)

(setq file+emacs-menu 
      '((<span style="color: #228b22;">"c"</span> <span style="color: #228b22;">"reate"</span>
         find-file ; <span style="color: #ff0000; font-weight: bold;">action function</span>
         (<span style="color: #8b0000;">lambda</span> (x) (not (file-exists-p x)))) ; <span style="color: #ff0000; font-weight: bold;">visible-p</span>
        (<span style="color: #228b22;">"o"</span> <span style="color: #228b22;">"pen"</span>
         org-open-file-with-emacs
         (<span style="color: #8b0000;">lambda</span> (x) (file-exists-p x)))
        (<span style="color: #228b22;">"e"</span> <span style="color: #228b22;">"xternal open"</span>
         (<span style="color: #8b0000;">lambda</span> (x) (org-open-file path '(16)))
         (<span style="color: #8b0000;">lambda</span> (x) (file-exists-p x)))))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">file+emacs-menu</span> (path)
  <span style="color: #228b22;">"menu command for file+emacs links"</span>
  (interactive)
  (<span style="color: #8b0000;">let*</span> ((filtered-menu-list (-filter
                              (<span style="color: #8b0000;">lambda</span> (x) (funcall (car (last x)) path))
                              file+emacs-menu))
         (menu-string (concat
                       (mapconcat
                        (<span style="color: #8b0000;">lambda</span> (tup)
                          (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
                                  (elt tup 1) <span style="color: #228b22;">" "</span>))
                        filtered-menu-list
                        <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
         (input (read-char-exclusive menu-string nil 1))
         (selected-func (and
                         input
                         (elt 
                          (assoc
                           (char-to-string input) filtered-menu-list)
                          2))))
    (<span style="color: #8b0000;">when</span> selected-func
      (funcall selected-func path))))
</pre>
</div>

<pre class="example">
file+emacs-menu
</pre>

<p>
Now we need to change the link definition in org-link-protocols. setf comes to the rescue. We just get the whole entry, and then setf the second position in it like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setf (elt (assoc <span style="color: #228b22;">"file+emacs"</span> org-link-protocols) 1)
  'file+emacs-menu)
</pre>
</div>

<pre class="example">
file+emacs-menu
</pre>

<p>
Here we just confirm we set it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(assoc <span style="color: #228b22;">"file+emacs"</span> org-link-protocols)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">file+emacs</td>
<td class="left">file+emacs-menu</td>
<td class="left">nil</td>
</tr>
</tbody>
</table>

<p>
Now, when we click on these links, we get our context specific menu. When 
</p>

<p>
This file exists: <a href="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/ase-db.org">ase-db.org</a> so we see this menu:
</p>

<div class="figure">
<p><img src="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/open-menu.png"> 
</p>
</div>

<p>
This file does not exist: <a href="test.noext">test.noext</a> 
So we see:
</p>

<div class="figure">
<p><img src="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/create-menu.png"> 
</p>
</div>

<p>
For these, we can select to open them in a pdf reader or MS Word from our new menu.
<a href="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/attaching-code-blocks-to-a-pdf.pdf">attaching-code-blocks-to-a-pdf.pdf</a> 
</p>

<p>
<a href="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/org-to-word.docx">org-to-word.docx</a> 
</p>

<p>
I admit this example was a little contrived. You can do most of these things with prefix commands, or more specific commands in emacs. But, I rarely remember those. I would have preferred to use the file link in this example, but it is not defined in org-link-protocols, so this style of modification would not work, and I did not want to add it to org-link-protocols just to show how to change it this way. 
</p>

<p>
This general approach would be very useful for links where there may be multiple contexts or actions that make sense. For file links, you may want do different things if the file already exists, or if it does not exist. As another example, my <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org#a-new-doi-link-for-org-mode">doi link</a> gives me a menu to:
</p>
<ol class="org-ol">
<li>open in <a href="http://dx.doi.org">http://dx.doi.org</a> 
</li>
<li>open the doi in Web of Science
</li>
<li>find citing articles in Web of Science
</li>
<li>search the doi in Google Scholar
</li>
<li>open the doi in CrossRef
</li>
<li>open the doi in Pubmed
</li>
<li>find the doi in my bibtex file
</li>
<li>get a bibtex entry for the doi
</li>
</ol>

<p>
I get all that from a click! org-ref offers similar functionality for cite links, where you might want to do different things from a click:
</p>
<ol class="org-ol">
<li>See preview of the citation
</li>
<li>open the bibtex entry
</li>
<li>open the pdf if you have it
</li>
<li>open the url for the entry
</li>
<li>any of the things I listed for the doi example above.
</li>
</ol>

<p>
I am sure there are many other things that might be useful to do!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/08/A-context-sensitive-file-link-menu-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Accessing web of science entry, citing and related articles from a doi in emacs</title>
      <link>http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</link>
      <pubDate>Tue, 04 Nov 2014 21:18:10 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[org-ref]]></category>
      <guid isPermaLink="false">4Q13snCzg0aAr06d3H0Sw7LWsd8=</guid>
      <description>Accessing web of science entry, citing and related articles from a doi in emacs</description>
      <content:encoded><![CDATA[



<p>
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with <a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=4DwqzHSXl8YdqGjGQ2z&preferencesSaved=">Web Of Science</a> , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API <a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf">http://wokinfo.com/media/pdf/OpenURL-guide.pdf</a> to make links to the things I am interested in here. Based on that document, here are three links based on a <a href="10.1021/jp047349j">10.1021/jp047349j</a> that take you to different Web Of Science (WOS) pages.
</p>


<ol class="org-ol">
<li>go to article in WOS: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j</a> 
</li>
<li>citing articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes</a> 
</li>
<li>related articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes</a> 
</li>
</ol>

<p>
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos</span> (doi)
  <span style="color: #228b22;">"Open Web of Science entry for DOI"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (format
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/%s"</span> doi)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-citing</span> (doi)
  <span style="color: #228b22;">"Open Web of Science citing articles entry. May be empty if none are found"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
    doi
    <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"</span>)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-related</span> (doi)
  <span style="color: #228b22;">"Open Web of Science related articles page."</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
           doi
           <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"</span>)))
</pre>
</div>

<pre class="example">
doi-utils-wos-related
</pre>

<p>
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things <a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/">here</a> about Scopus and issues with ISI that I note for reference to future me.
</p>

<p>
Some of these are now included in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">jmax-bibtex.el</a> and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>words - some interesting utilities for text in emacs</title>
      <link>http://jkitchin.github.io/blog/2014/11/03/words-some-interesting-utilities-for-text-in-emacs</link>
      <pubDate>Mon, 03 Nov 2014 11:31:45 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">zBeWt-UzQ9UsZMMHQc2CQsR8jKY=</guid>
      <description>words - some interesting utilities for text in emacs</description>
      <content:encoded><![CDATA[


<p>
Recently I <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/">posted</a> about an org-link with a menu. Here I extend the idea to a command that will do approximately the same thing. The idea is a command called words that will be run interactively. It will grab the word at point, or operate on a selected region, and then offer a menu to lookup the definition, find it in a thesaurus, google it, etc&#x2026; We structure the code so you can add functions to it later, without directly modifying this code. The only limitation of this code is that the functions must have a signature with no arguments. That does not seem terribly limiting, as we can check for a region, and use it if we want (see the words-google function).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-dictionary</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://dictionary.reference.com/browse/%s?s=t"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-thesaurus</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.thesaurus.com/browse/%s"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-google</span> ()
  (interactive)  
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.google.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))


(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">words-funcs</span> '()
 <span style="color: #228b22;">"functions to run in `</span><span style="color: #cd0000;">words</span><span style="color: #228b22;">'. Each entry is a list of (key menu-name function)."</span>)

(setq words-funcs
  '((<span style="color: #228b22;">"d"</span> <span style="color: #228b22;">"ictionary"</span> words-dictionary)
    (<span style="color: #228b22;">"t"</span> <span style="color: #228b22;">"hesaurus"</span> words-thesaurus)
    (<span style="color: #228b22;">"g"</span> <span style="color: #228b22;">"oogle"</span> words-google)))
 

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words</span> ()
  (interactive)
   (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     words-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
   (<span style="color: #8b0000;">let</span> ((input (read-char-exclusive)))
     (funcall
      (elt 
       (assoc
        (char-to-string input) words-funcs)
       2))))
</pre>
</div>

<pre class="example">
words
</pre>

<p>
This works nicely. Now, let us add a new function that looks up the word or selection on twitter. We just define a new function, and add the menu selection to the words-func variable. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-twitter</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"https://twitter.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"w"</span> <span style="color: #228b22;">"twitter"</span> words-twitter)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">d</td>
<td class="left">ictionary</td>
<td class="left">words-dictionary</td>
</tr>

<tr>
<td class="left">t</td>
<td class="left">hesaurus</td>
<td class="left">words-thesaurus</td>
</tr>

<tr>
<td class="left">g</td>
<td class="left">oogle</td>
<td class="left">words-google</td>
</tr>

<tr>
<td class="left">w</td>
<td class="left">twitter</td>
<td class="left">words-twitter</td>
</tr>
</tbody>
</table>

<p>
Finally, the most complicated idea: spelling and grammar. I know there is flyspell, and such, but they are build on an ancient dictionary. Here, for fun, we explore a web api. This next function is not a trivial one, and I will not explain it here beyond saying it sends a selection of text to a url, gets an xml response back, and that response is parsed and printed to a buffer by this function. The main point is to illustrate we can do interesting things with a selection of text!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-atd</span> ()
  <span style="color: #228b22;">"Send paragraph at point to After the deadline for spell and grammar checking."</span>
  (interactive)
  
  (<span style="color: #8b0000;">let*</span> ((url-request-method <span style="color: #228b22;">"POST"</span>)
         (url-request-data (format
                            <span style="color: #228b22;">"key=some-random-text-&amp;data=%s"</span>
                            (url-hexify-string
                             (thing-at-point 'paragraph))))
         (xml  (<span style="color: #8b0000;">with-current-buffer</span>
                   (url-retrieve-synchronously
                    <span style="color: #228b22;">"http://service.afterthedeadline.com/checkDocument"</span>)
                 (xml-parse-region url-http-end-of-headers (point-max))))
         (results (car xml))
         (errors (xml-get-children results 'error)))
    
    (switch-to-buffer-other-frame <span style="color: #228b22;">"*ATD*"</span>)
    (erase-buffer)
    (<span style="color: #8b0000;">dolist</span> (err errors)
      (<span style="color: #8b0000;">let*</span> ((children (xml-node-children err))
             ;; <span style="color: #ff0000; font-weight: bold;">for some reason I could not get the string out, and had to do this.</span>
             (s (car (last (nth 1 children))))
             ;; <span style="color: #ff0000; font-weight: bold;">the last/car stuff doesn't seem right. there is probably</span>
             ;; <span style="color: #ff0000; font-weight: bold;">a more idiomatic way to get this</span>
             (desc (last (car (xml-get-children children 'description))))
             (type (last (car (xml-get-children children 'type))))
             (suggestions (xml-get-children children 'suggestions))
             (options (xml-get-children (xml-node-name suggestions) 'option))
             (opt-string  (mapconcat
                           (<span style="color: #8b0000;">lambda</span> (el)
                             (<span style="color: #8b0000;">when</span> (listp el)
                               (car (last el))))
                           options
                           <span style="color: #228b22;">" "</span>)))

        (insert (format <span style="color: #228b22;">"** %s ** %s</span>
<span style="color: #228b22;">Description: %s</span>
<span style="color: #228b22;">Suggestions: %s</span>

<span style="color: #228b22;">"</span> s type desc opt-string))))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"s"</span> <span style="color: #228b22;">"spell/grammar"</span> words-atd)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<pre class="example">
words-atd
</pre>

<p>
My final words menu looks like: 
</p>

<div class="figure">
<p><img src="/media/2014-11-03-words---some-interesting-utilities-for-text-in-emacs/final-menu.png"> 
</p>
</div>

<p>
If I have the cursor in the previous paragraph, run the words command and select "s" I get a buffer with these contents:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> flyspell ** (spelling)</h2>
<div class="outline-text-2" id="text-1">
<p>
Description: (Spelling)
Suggestions: flywheel flyball
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> are build on ** (grammar)</h2>
<div class="outline-text-2" id="text-2">
<p>
Description: (Auxiliary Verb Agreement)
Suggestions: are built on
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> api ** (spelling)</h2>
<div class="outline-text-2" id="text-3">
<p>
Description: (Spelling)
Suggestions: app ape apt ai ami
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> url ** (spelling)</h2>
<div class="outline-text-2" id="text-4">
<p>
Description: (Spelling)
Suggestions: urn ure curl hurl burl
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> xml ** (spelling)</h2>
<div class="outline-text-2" id="text-5">
<p>
Description: (Spelling)
Suggestions: xl ml
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-6">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> an xml ** (grammar)</h2>
<div class="outline-text-2" id="text-7">
<p>
Description: (Wrong article)
Suggestions: a xml
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-8">
<p>
Description: (Hidden Verbs)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> is parsed ** (grammar)</h2>
<div class="outline-text-2" id="text-9">
<p>
Description: (Passive voice)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-10">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-11">
<p>
Description: (Hidden Verbs)
Suggestions: 
#+END<sub>EXAMPLE</sub>
</p>

<p>
It might be nice to link back to those words, so you could click on them and fix them, but that is a beyond today's goal. In summary, today we looked at a framework to create a user-modifiable menu of commands that are launched from a single command. Here we called the command words, and then built up some different things we might want to do with the word or selection at point. While you can of course just remember the individual commands, remembering one command and then being prompted might have some advantages.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/03/words---some-interesting-utilities-for-text-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A generalized org-link with an extendable menu of actions</title>
      <link>http://jkitchin.github.io/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions</link>
      <pubDate>Sun, 02 Nov 2014 19:33:14 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">Cf0O5RZ6zgyMNAxFnpLeAp2Dm7Q=</guid>
      <description>A generalized org-link with an extendable menu of actions</description>
      <content:encoded><![CDATA[


<p>
In org-ref the cite links are actually a menu of options. Here I want to explore generalizing the concept, and enable users to add new menu items. When you click on a cite link, it calls a function that constructs the menu as a string. Then, we read something from the minibuffer to say what should be done. We could store these things in variables, so that a user could add their own things. We need a list of characters, menu strings, and functions to run when to create the menu. Here we put together a little example code that shows the idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-a</span> (link)
  (message <span style="color: #228b22;">"You picked option A for %s"</span> link))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-b</span> (link)
  (message <span style="color: #228b22;">"You picked option B for %s"</span> link))

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">menu-funcs</span>
 '((<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"Option 1"</span> option-a)
   (<span style="color: #228b22;">"b"</span> <span style="color: #228b22;">"Option 2"</span> option-b)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">menu-click</span> (path)
  (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     menu-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
  (setq input (read-char-exclusive))
  (funcall
   (elt 
    (assoc
     (char-to-string input) menu-funcs)
    2)
   path))

(org-add-link-type
 <span style="color: #228b22;">"menu"</span>
 'menu-click)
</pre>
</div>

<p>
<a href="element">element</a>  Clicking on that link in Emacs gives me the desired menu!
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu.png"> 
</p>
</div>

<p>
and 
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu-response.png"> 
</p>
</div>

<p>
Now, we test adding a new function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-c</span> (link)
  (message <span style="color: #228b22;">"You picked option C for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"c"</span> <span style="color: #228b22;">"Option C"</span> option-c))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>
</tbody>
</table>

<p>
Well, that worked fine! You might want to append to the list instead of put it at the beginning, but that is really your choice.  
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-4</span> (link)
  (message <span style="color: #228b22;">"You picked option 4 for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"4"</span> <span style="color: #228b22;">"Option 4"</span> option-4) t)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>

<tr>
<td class="left">4</td>
<td class="left">Option 4</td>
<td class="left">option-4</td>
</tr>
</tbody>
</table>

<p>
I think this example more or less shows the basic idea here. These external functions may do a variety of things, like look up something on google, or some other web service, search for something on your hard drive, etc&#x2026; For example in org-ref, clicking on a cite link gives you options to open the bibtex file, a pdf, a url or notes. This would allow you to open other things too, if you felt like it. For better or worse, you can modify the behavior of the link after it is defined.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Annotating matplotlib figures</title>
      <link>http://jkitchin.github.io/blog/2014/11/01/Annotating-matplotlib-figures</link>
      <pubDate>Sat, 01 Nov 2014 10:35:15 EDT</pubDate>
      <category><![CDATA[python matplotlib]]></category>
      <guid isPermaLink="false">AcY0at1sX0APriSojYzVLBLbBHY=</guid>
      <description>Annotating matplotlib figures</description>
      <content:encoded><![CDATA[




<p>
There is a nice picture of an ethanolamine molecule <a href="http://en.wikipedia.org/wiki/Ethanolamine">here</a> . The first thing we consider is embedding this figure in a matplotlib figure. It is a little tricky because we have to create a special axes to put the image in. The axes are created in a fractional coordinate systems that is defined by [left, bottom, width, height]. Placing the figure where you want it is an iterative process that involves changing those values to get the image where you want.
</p>

<p>
So, note that (0, 0) is the bottome left corner of the figure, and (1, 1) is the upper right corner. So, to make an axes for the main figure that takes up 75% of the width and 80% of the height, and starts 20% from the left, 15% from the bottom, we use [0.2, 0.15, 0.75, 0.8]. That covers most of the space, and leaves room for labels.
</p>

<p>
The axes for the image is about the same, but it is a little trickier to figure out the width and height. In this example these arguments appear to just rescale the image.
</p>

<p>
Here is some code that puts the image near the upper left-corner of the plot.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">from</span> scipy.misc <span style="color: #8b0000;">import</span> imread
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">im</span> = imread(<span style="color: #228b22;">'images/Ethanolamine-2D-skeletal-B.png'</span>)

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">fig</span> = plt.figure(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">figsize</span>=(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>))
#                    <span style="color: #ff0000; font-weight: bold;">left bottom width height</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">f_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">15</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">75</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)

# <span style="color: #ff0000; font-weight: bold;">plot some function</span>
f_ax.plot(np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>), <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span> * np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>))
plt.xlabel(<span style="color: #228b22;">'some xlabel'</span>)
plt.ylabel(<span style="color: #228b22;">'Y'</span>)

# <span style="color: #ff0000; font-weight: bold;">axes for the image</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">i_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">22</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">frameon</span>=<span style="color: #8b0000;">False</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">xticks</span>=[], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">yticks</span>=[],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>)

# <span style="color: #ff0000; font-weight: bold;">add the image. zorder&gt;1 makes sure it is on top</span>
i_ax.imshow(im)

# <span style="color: #ff0000; font-weight: bold;">print dir(i_ax)</span>

plt.savefig(<span style="color: #228b22;">'images/fig-in-plot-2.png'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">dpi</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">300</span>)
</pre>
</div>

<div class="figure">
<p><img src="/media/2014-11-01-Annotating-matplotlib-figures/fig-in-plot-2.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A matplotlib figure with an embedded images.</p>
</div>


<p>
There it is.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/01/Annotating-matplotlib-figures.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
  </channel>
</rss>
