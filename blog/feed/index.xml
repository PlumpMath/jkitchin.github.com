<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Thu, 29 Jan 2015 12:35:02 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>Export org-mode to docx with citations via pandoc</title>
      <link>http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc</link>
      <pubDate>Thu, 29 Jan 2015 07:34:14 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[docx]]></category>
      <guid isPermaLink="false">SQ3JHeoJiZ9SqSQj6aLJepZ7lho=</guid>
      <description>Export org-mode to docx with citations via pandoc</description>
      <content:encoded><![CDATA[


<p>
Pandoc continues to develop, and since <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/07/17/Pandoc-does-org-mode-now/">the last time</a> I wrote about it there is improved support for citations. We will use that to convert org documents to Word documents that actually have citations and a bibliography in them. This post explores using helm-bibtex to insert pandoc compatible citations, and then using pandoc to convert the org file to a word document (docx). We can define the format of citations that helm-bibtex inserts in a function, and tell helm-bibtex to use it when in org mode.
</p>

<p>
Here is that code. This is just to give me a convenient tool to insert citations with searching in my bibtex file. I think you could just as easily use reftex for this, or an ido-completing function on bibtex keys. See <a href="http://johnmacfarlane.net/pandoc/README.html">Pandoc - Pandoc Userâ€™s Guide</a> for directions on citation format. The key is to format the cite links to the pandoc format.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-bibtex-format-pandoc-citation</span> (keys)
  (concat <span style="color: #008000;">"["</span> (mapconcat (<span style="color: #0000FF;">lambda</span> (key) (concat <span style="color: #008000;">"@"</span> key)) keys <span style="color: #008000;">"; "</span>) <span style="color: #008000;">"]"</span>))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">inform helm-bibtex how to format the citation in org-mode</span>
(setf (cdr (assoc 'org-mode helm-bibtex-format-citation-functions))
  'helm-bibtex-format-pandoc-citation)
</pre>
</div>
<pre class="example">
helm-bibtex-format-pandoc-citation
</pre>

<p>
Now, we can cite the org-mode book [@dominik-2010-org-mode], and some interesting papers on using org-mode [@schulte-2011-activ-docum; @schulte-2012-multi-languag]. You could pretty easily add pre and post text manually to these, after selecting and inserting them.
</p>

<p>
We need a bibliography file for pandoc to work. I will use a bibtex file, since I already have it and am using helm-bibtex to select keys. I found pandoc could not read my massive bibtex file, perhaps it does not support all the types yet, so I made a special small bibtex file for this. So, now all we need to do is convert this file to a docx. I use a function like this to do that. It uses an org-ref function to get the bibliography defined in this file, derives some file names, and then runs pandoc.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ox-export-to-docx-and-open</span> ()
 <span style="color: #036A07;">"Export the current org file as a docx via markdown."</span>
 (interactive)
 (<span style="color: #0000FF;">let*</span> ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is probably a full path</span>
        (current-file (buffer-file-name))
        (basename (file-name-sans-extension current-file))
        (docx-file (concat basename <span style="color: #008000;">".docx"</span>)))
   (save-buffer)
   (<span style="color: #0000FF;">when</span> (file-exists-p docx-file) (delete-file docx-file))
   (shell-command (format
                   <span style="color: #008000;">"pandoc -s -S --bibliography=%s %s -o %s"</span>
                   bibfile current-file docx-file))
   (org-open-file docx-file '(16))))
</pre>
</div>

<p>
And now we run it to get our docx.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(ox-export-to-docx-and-open)
</pre>
</div>

<p>
Here is the result: <a href="/media/2015-01-29-Export-org-mode-to-docx-with-citations-via-pandoc/org-to-docx-pandoc.docx">org-to-docx-pandoc.docx</a> 
</p>

<p>
It is not too bad. Not all the equations showed up below, and the figure did not appear for some reason. But, the citations went through fine.  A downside of this is the citation links are not clickable (but see <a href="#sec-7">Making pandoc links</a> for a way to do this), so they lack all the awesome features that org-ref gives them. Maybe pandoc can convert these to LaTeX links, but we already have such a good framework for that I do not see why you would want to do it. A better option is to figure out how to export the org file to an org file, and transform the org citation links to pandoc citations, then use pandoc on the temporarily transformed buffer. That way, you keep the cite links and their functionality, and ability to export to many formats, <i>and</i> get export to docx via pandoc.
</p>

<p>
There are other options in pandoc to fine tune the reference format (you need a csl file). That can be included in the org-file via file tags pretty easily. These citations are not links in the word document, and it does not look like they can be converted to footnotes, endnotes or interact with Endnote or Zotero at this time, but it is a step forward in getting a passable word document with references out of org-mode!
</p>

<p>
Since we are testing, let us try it some other typical features in an org-file.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Numbered list</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Item 1
</li>
<li>Item 2
</li>
<li>Item 3
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Bulleted list</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>item 1
</li>
<li>item 2
</li>
<li>item 3
<ul class="org-ul">
<li>subitem
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> definitions</h2>
<div class="outline-text-2" id="text-3">
<dl class="org-dl">
<dt> org-mode </dt><dd>tool for awesomeness
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Math</h2>
<div class="outline-text-2" id="text-4">
<p>
One equation:
<img src="ltxpng/org-to-docx-pandoc_71dd900d7f17a20875918a89a10eb146fccdd464.png" alt="\(e^{i\pi} - 1 = 0\)" />
</p>

<p>
A second equation:
</p>


<div class="figure">
<p><img src="ltxpng/org-to-docx-pandoc_fb56117cdd3c3ac81c363d24325cfc6b5a530420.png" alt="\begin{equation}
e^{i\pi} - 1 = 0
\end{equation}" /></p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> An image</h2>
<div class="outline-text-2" id="text-5">

<div id="icon" class="figure">
<p><img src="/media/2015-01-29-Export-org-mode-to-docx-with-citations-via-pandoc/emacs.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A little icon.</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> A table</h2>
<div class="outline-text-2" id="text-6">
<table id="my-table" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A little table.</caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>


<p>
a plain table
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><a id="ID-2958EFDC-CC33-4E2A-8A92-D2BE06EBB3F2" name="ID-2958EFDC-CC33-4E2A-8A92-D2BE06EBB3F2"></a><span class="section-number-2">7</span> Making pandoc links</h2>
<div class="outline-text-2" id="text-7">
<p>
Here I show a way to get clickable text on pandoc links. I found a nice library called <a href="https://github.com/rolandwalker/button-lock">button-lock</a> that uses a regular expression to attach text properties to matching text.
</p>

<p>
Below I repeat the citations so it is easy to see the effect after running the code block. Indeed, you get clickable text, even org-ref like capability. I think you could even add the idle-timer messages, and the org-ref menu.
</p>

<p>
Now, we can cite the org-mode book [@dominik-2010-org-mode], and some interesting papers on using org-mode [@schulte-2011-activ-docum; @schulte-2012-multi-languag]. You could pretty easily add pre and post text manually to these, after selecting and inserting them.
</p>

<p>
You would need to make this code run in when you open an org-file to get it to work every time.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">button-lock</span>)
(global-button-lock-mode)

(button-lock-set-button
 <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>
 (<span style="color: #0000FF;">lambda</span> ()
   (interactive)
   (re-search-backward <span style="color: #008000;">"@"</span>)
   (re-search-forward  <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
   (<span style="color: #0000FF;">let*</span> ((key (match-string-no-properties 1))
          (bibfile (cdr (org-ref-get-bibtex-key-and-file key))))
     (<span style="color: #0000FF;">if</span> bibfile
        (<span style="color: #0000FF;">save-excursion</span>
          (<span style="color: #0000FF;">with-temp-buffer</span>
            (insert-file-contents bibfile)
            (bibtex-search-entry key)
            (message (org-ref-bib-citation))))
       (message <span style="color: #008000;">"No entry found"</span>))))
 <span style="color: #006FE0;">:face</span> (list 'org-link))
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> References</h2>
<div class="outline-text-2" id="text-8">
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>New org-mode link to Web of Science</title>
      <link>http://jkitchin.github.io/blog/2015/01/28/New-org-mode-link-to-Web-of-Science</link>
      <pubDate>Wed, 28 Jan 2015 13:55:54 EST</pubDate>
      <category><![CDATA[uncategorized]]></category>
      <guid isPermaLink="false">6dYb6CvpWcX2w67rhyluY7avvTQ=</guid>
      <description>New org-mode link to Web of Science</description>
      <content:encoded><![CDATA[


<p>
For ages I have been trying to figure out how to make a link to open a search in Web of Science. Today, thanks to help from our library, I finally figured it out!
</p>

<p>
It turns out you can embed a search widget to Web of Science in a web page. See <a href="http://wokinfo.com/webtools/searchbox/">http://wokinfo.com/webtools/searchbox/</a> . Here is an example.
</p>


<form method="get" action="http://gateway.webofknowledge.com/gateway/Gateway.cgi" target="_blank">
<table style="background-color:#FFF; border:1px solid #999; width:354px;" cellspacing="0" cellpadding="6" border="0">
<tr>
<td><p><img border="0" src="http://wokinfo.com/img/webtools/woknameplate_flat2.png" width="311" height="36" alt="Web of Science"></p>
<p><strong><font face="Verdana, Geneva, sans-serif"><font size="2" color="#808080">Search Web of Science&#8482;</font></font></strong><br>
<input type="hidden" name="GWVersion" value="2">
<input type="hidden" name="SrcApp" value="WEB">
<input type="hidden" name="SrcAuth" value="HSB">
<input type="hidden" name="DestApp" value="UA">
<input type="hidden" name="DestLinkType" value="GeneralSearchSummary">
&nbsp;<input type="text" name="topic" size="27" maxlength="255" value="Enter a topic to search" onfocus="this.value='';">&nbsp;<input type="submit" name="btnWS" value="Search">&nbsp;<input type="reset" name="btnR" value="Reset"></p>
<p align="right"><font face="Arial, Helvetica, sans-serif"><font size="1">Copyright 2014 <a href="http://thomsonreuters.com" target="_blank">Thomson Reuters</a>&nbsp;&nbsp;&nbsp;</font></font></p>
</td>
</tr>
</table>
</form>

<p>
This simple form just sends a GET http request to a cgi script at Web of Knowledge. Awesome, we can create a url that does just that to make an org link! We will make a link that you can click on to open the web page, and a simple formatting function to make the link work in html too when we export it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #008000;">"wos"</span>
 (<span style="color: #0000FF;">lambda</span> (path)
   (browse-url
    (format  <span style="color: #008000;">"http://gateway.webofknowledge.com/gateway/Gateway.cgi?topic=%s&amp;GWVersion=2&amp;SrcApp=WEB&amp;SrcAuth=HSB&amp;DestApp=UA&amp;DestLinkType=GeneralSearchSummary"</span>
             (s-join <span style="color: #008000;">"+"</span>
              (split-string path)))))
 <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">formatting function. Assume html</span>
 (<span style="color: #0000FF;">lambda</span> (link desc format)
   (format <span style="color: #008000;">"&lt;a href=\"%s\"&gt;%s&lt;/a&gt;"</span>
           (format  <span style="color: #008000;">"http://gateway.webofknowledge.com/gateway/Gateway.cgi?topic=%s&amp;GWVersion=2&amp;SrcApp=WEB&amp;SrcAuth=HSB&amp;DestApp=UA&amp;DestLinkType=GeneralSearchSummary"</span>
             (s-join <span style="color: #008000;">"+"</span>
              (split-string path)))
           (format <span style="color: #008000;">"wos:%s"</span> link)
           )))
</pre>
</div>

<p>
Now, here is a link: <a href="http://gateway.webofknowledge.com/gateway/Gateway.cgi?topic=alloy+segregation&GWVersion=2&SrcApp=WEB&SrcAuth=HSB&DestApp=UA&DestLinkType=GeneralSearchSummary">wos:alloy segregation</a>
</p>

<p>
When I click on it in org-mode, Web of Science opens to articles that match that search. When I export the post to html, you should also see a link that opens to Web of Science (assuming you click on it from an IP address with access).
</p>

<p>
The link may not seem all that useful, but we can use the idea to highlight words, and send them to a web of science query, e.g. <a href="https://github.com/jkitchin/jmax/blob/master/words.el#L63">https://github.com/jkitchin/jmax/blob/master/words.el#L63</a> , or in org-ref to query web of science for the words you typed into helm-bibtex that do not match any references in your database. One more powerful tool in doing research for a living!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/28/New-org-mode-link-to-Web-of-Science.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Anatomy of a helm source</title>
      <link>http://jkitchin.github.io/blog/2015/01/24/Anatomy-of-a-helm-source</link>
      <pubDate>Sat, 24 Jan 2015 11:15:56 EST</pubDate>
      <category><![CDATA[helm]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">sKB9b8y5sNX60wQGXo0OvhrEk0c=</guid>
      <description>Anatomy of a helm source</description>
      <content:encoded><![CDATA[



<p>
I have been integrating <a href="https://github.com/emacs-helm/helm">helm</a> into my emacs work flows almost anywhere I need to make interactive selections and do something with them. In this post, I will go through the simplest helm examples I can think of that get you to writing your own example.
</p>

<p>
To run a helm selection process you basically just call a function that calls this minimal function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<p>
In that code, the symbol some-helm-source will provide the input for the helm buffer. Let us look at the simplest example here. Each source should have a name, a list of candidates, and an action that works on the selected candidate. We construct a source as a list of cons cells. Here, we make a source with the name "HELM at the Emacs", a static list of candidates, which are simply a list of numbers, and a single action that will operate on the selected candidate.
</p>

<p>
If you run this block, you will get a helm buffer, you can select an entry, press enter, and you should see a message box pop up telling you what entry you selected. I like to separate the source definition from the helm call like this, but only for readability.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq some-helm-source
      '((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . (1 2 3 4))
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (message-box <span style="color: #008000;">"%s"</span> candidate)))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<pre class="example">
3
</pre>


<p>
Not bad, but what if we want some dynamic candidates? The usual way we will do that is to define a function that calculates the candidates for us. Let us work out an example that just shows us random numbers between 0 and 10 to select from. In a real example, you would use this function to generate a list of candidates like bibtex keys, email-addresses, etc&#x2026;
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">random-candidates</span> ()
  <span style="color: #036A07;">"Return a list of 4 random numbers from 0 to 10"</span>
  (loop for i below 4 collect (random 10)))

(setq some-helm-source
      '((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . random-candidates)
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (message <span style="color: #008000;">"%s"</span> candidate)))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>


<p>
So far, we have looked at the simplest list of candidates: a simple list. It may be that this is not the most convenient way to see the candidates. We might like to have one set of candidates that we use for searching, but another set of equivalent candidates used for the action. For example, we might want a list of names for selecting, but then have the action work on the corresponding email address. Let us consider a case where we have a list of cons cells of names and email addresses.
</p>

<p>
We use the `, way to create the source variable to make sure our list of candidates is constructed. Then, in our function we take the selection and get the corresponding entry in the data a-list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq data '((<span style="color: #008000;">"John"</span> . <span style="color: #008000;">"john@email.com"</span>)
             (<span style="color: #008000;">"Jim"</span> . <span style="color: #008000;">"jim@email.com"</span>)
             (<span style="color: #008000;">"Jane"</span> . <span style="color: #008000;">"jane@email.com"</span>)
             (<span style="color: #008000;">"Jill"</span> . <span style="color: #008000;">"jill@email.com"</span>)))

(setq some-helm-source
      `((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . ,(mapcar 'car data))
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (message <span style="color: #008000;">"%s"</span> (cdr (assoc candidate data)))))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<pre class="example">
jim@email.com
</pre>

<p>
That is not too bad, and might be a general way to get to the data you want. But, helm can integrate this directly by using the a-list <i>directly</i> as the list of candidates. Helm will show you the car of each cell, but return the cdr of the selected entry.
</p>

<p>
Let us try this to make a function that will give us a helm buffer to select some names from, and then insert a comma separated list of emails from our selection at the point. We make our action function just return the list of marked candidates. Then we create a function that calls helm, and inserts a concatenated string.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq data '((<span style="color: #008000;">"John"</span> . <span style="color: #008000;">"john@email.com"</span>)
             (<span style="color: #008000;">"Jim"</span> . <span style="color: #008000;">"jim@email.com"</span>)
             (<span style="color: #008000;">"Jane"</span> . <span style="color: #008000;">"jane@email.com"</span>)
             (<span style="color: #008000;">"Jill"</span> . <span style="color: #008000;">"jill@email.com"</span>)))

(setq some-helm-source
      `((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . ,data)
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (helm-marked-candidates)))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-select-and-insert-emails</span> ()
  (interactive)
  (insert
   (mapconcat 'identity
              (helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
              <span style="color: #008000;">","</span>)))
</pre>
</div>
<pre class="example">
helm-select-and-insert-emails
</pre>


<p>
Here is what I get when I run the command, select John and Jill, and press enter: john@email.com,jill@email.com
</p>

<p>
That is it for this post. We looked at:
</p>

<ol class="org-ol">
<li>the simplest kind of helm interface with a fixed set of candidates
</li>
<li>A simple dynamic set of candidates
</li>
<li>A simple fixed set of candidates from a list of cons cells.
</li>
</ol>

<p>
This barely scratches the surface of helm, but is already enough to do some useful things.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/24/Anatomy-of-a-helm-source.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Equation of a plane through three points</title>
      <link>http://jkitchin.github.io/blog/2015/01/18/Equation-of-a-plane-through-three-points</link>
      <pubDate>Sun, 18 Jan 2015 10:48:21 EST</pubDate>
      <category><![CDATA[python]]></category>
      <guid isPermaLink="false">uH0_-wmonJy8FE7rjlkga9tlswU=</guid>
      <description>Equation of a plane through three points</description>
      <content:encoded><![CDATA[



<p>
We are given three points, and we seek the equation of the plane that goes through them. The method is straight forward. A plane is defined by the equation:
</p>

<p>
\(a x + b y + c z = d\)
</p>

<p>
and we just need the coefficients. The \(a, b, c\) coefficients are obtained from a vector normal to the plane, and \(d\) is calculated separately. We get the normal vector from the cross-product of two vectors connecting the points, and we get \(d\) from the dot product of the normal vector with any one of the point position vectors.
</p>

<p>
Finally, given the equation, we want to generate a mesh that samples the plane, and plot the mesh and original points to verify the plane goes through the points. Here is the implementation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #BA36A5;">p1</span> = np.array([1, 2, 3])
<span style="color: #BA36A5;">p2</span> = np.array([4, 6, 9])
<span style="color: #BA36A5;">p3</span> = np.array([12, 11, 9])

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">These two vectors are in the plane</span>
<span style="color: #BA36A5;">v1</span> = p3 - p1
<span style="color: #BA36A5;">v2</span> = p2 - p1

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the cross product is a vector normal to the plane</span>
<span style="color: #BA36A5;">cp</span> = np.cross(v1, v2)
<span style="color: #BA36A5;">a</span>, <span style="color: #BA36A5;">b</span>, <span style="color: #BA36A5;">c</span> = cp

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This evaluates a * x3 + b * y3 + c * z3 which equals d</span>
<span style="color: #BA36A5;">d</span> = np.dot(cp, p3)

<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'The equation is {0}x + {1}y + {2}z = {3}'</span>.<span style="color: #006FE0;">format</span>(a, b, c, d))

<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> mpl_toolkits.mplot3d <span style="color: #0000FF;">import</span> Axes3D
<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(111, projection=<span style="color: #008000;">'3d'</span>)

<span style="color: #BA36A5;">x</span> = np.linspace(-2, 14, 5)
<span style="color: #BA36A5;">y</span> = np.linspace(-2, 14, 5)
<span style="color: #BA36A5;">X</span>, <span style="color: #BA36A5;">Y</span> = np.meshgrid(x, y)

<span style="color: #BA36A5;">Z</span> = (d - a * X - b * Y) / c

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plot the mesh. Each array is 2D, so we flatten them to 1D arrays</span>
ax.plot(X.flatten(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Y.flatten(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Z.flatten(), <span style="color: #008000;">'bo '</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plot the original points. We use zip to get 1D lists of x, y and z</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">coordinates.</span>
ax.plot(*<span style="color: #006FE0;">zip</span>(p1, p2, p3), color=<span style="color: #008000;">'r'</span>, linestyle=<span style="color: #008000;">' '</span>, marker=<span style="color: #008000;">'o'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">adjust the view so we can see the point/plane alignment</span>
ax.view_init(0, 22)
plt.tight_layout()
plt.savefig(<span style="color: #008000;">'images/plane.png'</span>)
plt.show()
</pre>
</div>

<pre class="example">
The equation is 30x + -48y + 17z = -15
</pre>

<p>
<img src="/media/2015-01-18-Equation-of-a-plane-through-three-points/plane.png"> 
It looks like the blue points form a plane that contains the red points.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/18/Equation-of-a-plane-through-three-points.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>2014 Kitchin Research Group in a nutshell</title>
      <link>http://jkitchin.github.io/blog/2015/01/07/2014-Kitchin-Research-Group-in-a-nutshell</link>
      <pubDate>Wed, 07 Jan 2015 16:56:39 EST</pubDate>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">DBLoKoGD23rWqfLOhHonNqpVHgs=</guid>
      <description>2014 Kitchin Research Group in a nutshell</description>
      <content:encoded><![CDATA[



<p>
It was a good year for the Kitchin Research Group. Here are a few of our main accomplishments for the year.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Student accomplishments</h2>
<div class="outline-text-2" id="text-1">
<p>
Students are the backbone of our group. Steve Illes, Wenqin You, Meiheng Lu, and Nitish Govindarajan finished their MS degrees! Congratulations!
</p>

<p>
Mehak Chawla and John Michael both passed their PhD qualifying exams. Congratulations!
</p>

<p>
Prateek Mehta joined Bill Schneider's group at Notre Dame for his PhD!
</p>

<p>
Four new M.S. students have joined our group: Hari Thirumalai, Venkatesh Naik, Zhaofeng Chen, and Siddharth Deshpande. Welcome!
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Publications</h2>
<div class="outline-text-2" id="text-2">
<p>
It looks like seven publications this year. We have 5 out for review right now, so next year looks like a good one! Almost all of these were written in org-mode, with amazing, reproducible supporting information documents. Many thanks to my students, and co-authors.
</p>

<p>
Jacob Boes, Gamze Gumuslu, James Miller, Andrew Gellman, John Kitchin, Estimating bulk composition dependent H<sub>2</sub> adsorption energies on Cu<sub>x</sub>Pd<sub>1-x</sub> alloy (111) surfaces, accepted in ACS Catalysis (Dec. 2014) <a href="http://dx.doi.org/10.1021/cs501585k">http://dx.doi.org/10.1021/cs501585k</a> .
</p>

<p>
Matthew T. Curnan and John R. Kitchin, Effects of Concentration, Crystal Structure, Magnetism, and Electronic Structure Method on First-Principles Oxygen Vacancy Formation Energy Trends in Perovskites, J. Phys. Chem. C., <a href="http://dx.doi.org/10.1021/jp507957n">http://dx.doi.org/10.1021/jp507957n</a> .
</p>

<p>
Zhongnan Xu and John R. Kitchin, Probing the Coverage Dependence of Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals, J. Phys. Chem. C., <a href="http://dx.doi.org/10.1021/jp508805h">http://dx.doi.org/10.1021/jp508805h</a> .
</p>

<p>
Ethan L. Demeter , Shayna L. Hilburg , Newell R. Washburn , Terrence J. Collins , and John R. Kitchin, Electrocatalytic Oxygen Evolution with an Immobilized TAML Activator,  Journal of the American Chemical Society, 136(15) 5603-5606 (2014). <a href="http://dx.doi.org/10.1021/ja5015986">http://dx.doi.org/10.1021/ja5015986</a> 
</p>

<p>
Robert L. Thompson, Wei Shi, Erik Albenze, Victor A. Kusuma, David Hopkinson, Krishnan Damodaran,  Anita S. Lee, John R. Kitchin, David R. Luebke and Hunaid Nulwala, Probing the effect of electron donation on CO<sub>2</sub> absorbing 1,2,3-triazolide ionic liquids, RSC Advances, 4 (25), 12748-12755 (2014). <a href="http://dx.doi.org/10.1039/C3RA47097K">http://dx.doi.org/10.1039/C3RA47097K</a> .
</p>

<p>
Mehta, Prateek; Salvador, Paul; Kitchin, John, Identifying Potential BO<sub>2</sub> Oxide Polymorphs for Epitaxial Growth Candidates", ACS Applied Materials and Interfaces, 6(5), 3630-3639 (2014). <a href="http://pubs.acs.org/doi/full/10.1021/am4059149">http://pubs.acs.org/doi/full/10.1021/am4059149</a> .
</p>

<p>
Zhongnan Xu and John R Kitchin, Relating the Electronic Structure and Reactivity of the 3d Transition Metal Monoxide Surfaces, Catalysis Communications, 52, 60-64 (2014), <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">http://dx.doi.org/10.1016/j.catcom.2013.10.028</a> .
</p>

<p>
Our citations continue to grow:
</p>


<div class="figure">
<p><img src="/media/2015-01-07-2014-Kitchin-Research-Group-in-a-nutshell/2014-citations.png"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Presentations</h2>
<div class="outline-text-2" id="text-3">
<p>
We did not travel as much this year as we have in the past. Here is where we did go.
</p>

<p>
John Kitchin, "The next evolution in water oxidation", Department of Materials Science, Duke University, March 2014.
</p>

<p>
John Kitchin, A success story in using Python in a graduate chemical engineering course, SciPy 2014, June 2014.  <a href="https://www.youtube.com/watch?v=IsSMs-4GlT8">https://www.youtube.com/watch?v=IsSMs-4GlT8</a> 
</p>

<p>
John Kitchin, Jacob Boes, Gamze Gumuslu, James Miller, Andrew Gellman, "Bulk Composition Dependent H<sub>2</sub> Dissociative Adsorption Energies on Cu<sub>x</sub>Pd<sub>1-x</sub> Alloy Surfaces" Department of Energy - Basic Energy Science - Catalysis Program meeting, July 2014.
</p>

<p>
John Kitchin, Jacob Boes, Gamze Gumuslu, James Miller, Andrew Gellman, "Bulk Composition Dependent H<sub>2</sub> Dissociative Adsorption Energies on Cu<sub>x</sub>Pd<sub>1-x</sub> Alloy Surfaces", U. Missouri, Department of Chemical Engineering, September 2014.
</p>

<p>
Wenqin You, Hari C. Mantripragada, Edward S. Rubin and John Kitchin, Post-combustion CO<sub>2</sub> Capture Using Metal Organic Frameworks-Thermodynamic Analysis, Pittsburgh Coal Conference, October 2014.
</p>

<p>
Jacob R. Boes and John R. Kitchin, Estimating Bulk Composition Dependent H2 Dissociative Adsorption Energies on CuxPd1-x Alloy (111) Surfaces, AICHE Atlanta, Nov 2014.
</p>

<p>
Zhongnan Xu and John R. Kitchin, Coverage-Dependent Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals, AICHE Atlanta, Nov 2014.
</p>

<p>
Matthew Curnan and John R. Kitchin, Prediction of Phase Stability and Transition Pressures in BO<sub>2</sub> (B = Ti, V, Ru, Ir) Polymorphs Using DFT+U and Self-Consistent Linear Response Theory, AICHE Atlanta, Nov 2014.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Teaching</h2>
<div class="outline-text-2" id="text-4">
<p>
This year I taught a core course in reaction engineering <i>from Emacs</i> with Python and Emacs! I now teach two classes from Emacs: a graduate elective in molecular simulation (which I am teaching again this year), and a core MS course in reaction engineering.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Recognitions</h2>
<div class="outline-text-2" id="text-5">
<p>
Professor Kitchin was awarded the Philip L. Dowd Fellowship Award in recognition of his work in integrating org-mode into education <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/02/28/Professor-Kitchin-awarded-the-Philip-L-Dowd-Fellowship-Award/">(link)</a> .
</p>

<p>
Mehak Chawla was awarded a Prengle Fellowship (<a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/24/Mehak-Chawla-selected-as-the-H-William-and-Ruth-Hamilton-Prengle-Fellow-of-Chemical-Enginering-for-2013-2014/">link</a> ).
</p>

<p>
Jacob Boes was awarded a Bertucci fellowship!
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Software development</h2>
<div class="outline-text-2" id="text-6">
<p>
The most significant developments from our group this year were <a href="http://github.com/jkitchin/jmax">jmax</a> , an emacs starter-kit I developed, and <a href="http://github.com/jkitchin/org-ref">org-ref</a> , a bibliography/citation tool for scientific publications in org-mode. It is amazing. These can be found at <a href="http://github.com/jkitchin/jmax">http://github.com/jkitchin/jmax</a> and <a href="http://github.com/jkitchin/org-ref">http://github.com/jkitchin/org-ref</a> .
</p>

<p>
Python Computations in science and engineering reached a higher level of maturity: <a href="http://github.com/jkitchin/pycse">http://github.com/jkitchin/pycse</a> . We used this in my reaction engineering course quite a bit.
</p>

<p>
Zhongnan put his ase interface to Quantum Espresso here: <a href="https://github.com/zhongnanxu/espresso">https://github.com/zhongnanxu/espresso</a> 
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Social media</h2>
<div class="outline-text-2" id="text-7">
<p>
It looks like we had about 117 blog entries in 2014. The Kitchin Group blog has been growing in popularity:
</p>


<div class="figure">
<p><img src="/media/2015-01-07-2014-Kitchin-Research-Group-in-a-nutshell/kg-blog-sessions.png"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> What's next in 2015?</h2>
<div class="outline-text-2" id="text-8">
<p>
We will continue developing jmax into the finest scientific publishing tool there ever was.
</p>

<p>
We will write a lot of papers with jmax. I predict we write more than ten papers next year. That will be a group record.
</p>

<p>
More good things to come! Stay tuned!
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/07/2014-Kitchin-Research-Group-in-a-nutshell.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>Redirecting stderr in org-mode shell blocks</title>
      <link>http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks</link>
      <pubDate>Sun, 04 Jan 2015 08:59:04 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">FnSd1HUqeesF9gkoSEIMopOBpTk=</guid>
      <description>Redirecting stderr in org-mode shell blocks</description>
      <content:encoded><![CDATA[


<p>
Org-mode shell source blocks do not capture stderr. For example, in this block, with the default setup:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>

<pre class="example">
testing stdout
</pre>

<p>
You can see the second line is not in the output.
</p>

<p>
If you run this command, you get an <b>Org-Babel Error Output</b> buffer saying it is an illegal option.
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
</pre>
</div>

<p>
It would be nice to just capture that error, and show it.
</p>

<p>
We solved this problem in <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2/">Python</a> by redirecting stderr at runtime. It is not that simple in shell blocks, but we can do a similar thing. The code block is executed (I think) by saving the block to a temporary file, and then running org-babel-sh-command on the file. That magic happens inside the command shell-command-on-region. We just need to make that command redirect stderr. Here is a new shell command that does this. This next block can be tangled out to an executable command. This script takes one argument, which I believe is a filename (the temporary file containing the source block region).
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">!/bin/</span><span style="color: #0000FF;">bash</span>
{
bash $<span style="color: #BA36A5;">1</span>
} 2&gt;&amp;1
</pre>
</div>

<p>
Now, we set org-babel-sh-command to our new shell command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-sh-command <span style="color: #008000;">"./sh_stderr.sh"</span>)
</pre>
</div>

<pre class="example">
./sh_stderr.sh
</pre>

<p>
Now, it appears we get what we want:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
</pre>

<p>
And, with the bad option to date, we get:
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
<span style="color: #006FE0;">echo</span>
</pre>
</div>
<pre class="example">
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>

<p>
Not bad! I have not tested this very thoroughly, i.e. beyond these little examples, but it seems like it could work.
</p>

<p>
Achim Gratz suggested this simpler approach that does not involve any external scripts. The : at the end is important!
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #0000FF;">exec</span> 2&gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
date -g
:
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>New publication in ACS Catalysis on alloy reactivity across composition space</title>
      <link>http://jkitchin.github.io/blog/2014/12/24/New-publication-in-ACS-Catalysis-on-alloy-reactivity-across-composition-space</link>
      <pubDate>Wed, 24 Dec 2014 13:15:36 EST</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publication]]></category>
      <guid isPermaLink="false">twlGl25UOGDwLgqOMvOhIyfLiR4=</guid>
      <description>New publication in ACS Catalysis on alloy reactivity across composition space</description>
      <content:encoded><![CDATA[



<p>
In this new paper we present a method to estimate the reactivity of an alloy surface with a distribution of active sites across composition space. We use hydrogen-deuterium exchange as the probe reaction, and compare our results to experiments from the Gellman group. Congratulations Jake!
</p>


<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">boes-2014-estim-bulk</span>,
  <span style="color: #8b008b;">author</span> =       {Jacob R. Boes and Gamze Gumuslu and James B. Miller
                  and Andrew J. Gellman and John R. Kitchin},
  <span style="color: #8b008b;">title</span> =        {Estimating Bulk Composition Dependent H<span style="color: #228b22;">$_2$</span>
                  Adsorption Energies on Cu<span style="color: #228b22;">$_x$</span>Pd<span style="color: #228b22;">$_{1-x}$</span> Alloy (111)
                  Surfaces},
  <span style="color: #8b008b;">journal</span> =      {ACS Catalysis},
  <span style="color: #8b008b;">volume</span> =       0,
  <span style="color: #8b008b;">number</span> =       {ja},
  <span style="color: #8b008b;">pages</span> =        {null},
  <span style="color: #8b008b;">year</span> =         2014,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/cs501585k</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;"> http://dx.doi.org/10.1021/cs501585k </span>},
  <span style="color: #8b008b;">eprint</span> =       { http://dx.doi.org/10.1021/cs501585k },
}
</pre>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/24/New-publication-in-ACS-Catalysis-on-alloy-reactivity-across-composition-space.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>A prototype implementation of jasp in emacs-lisp</title>
      <link>http://jkitchin.github.io/blog/2014/12/24/A-prototype-implementation-of-jasp-in-emacs-lisp</link>
      <pubDate>Wed, 24 Dec 2014 11:41:00 EST</pubDate>
      <category><![CDATA[lisp]]></category>
      <category><![CDATA[vasp]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[ase]]></category>
      <guid isPermaLink="false">GB14oL8NufR3GRSfetF6V-_v3KU=</guid>
      <description>A prototype implementation of jasp in emacs-lisp</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. The Atom class</a></li>
<li><a href="#sec-2">2. The Atoms class</a></li>
<li><a href="#sec-3">3. The Calculator class</a></li>
<li><a href="#sec-4">4. Putting it all together to run calculations</a></li>
<li><a href="#sec-5">5. Summary thoughts</a></li>
</ul>
</div>
</div>

<p>
I want to try implementing an interface to <a href="http://www.vasp.at">VASP</a> in emacs-lisp. VASP is a program that uses density functional theory to calculate properties of materials. VASP was designed for the user to create several text-based input files that contain an atomic geometry, and calculation parameters. Then you run the VASP program, which reads those input files and generates output files. Finally, you parse out the results you want from the output files. 
</p>

<p>
It is moderately tedious to do that, so we already have a very extensive Python interface (<a href="http://github.com/jkitchin/jasp">http://github.com/jkitchin/jasp</a> ) that automates the input file creation and output file parsing, and with org-mode we have a pretty good literate research environment to document what we do. But, the Python/emacs environment is not as integrated as the emacs-lisp/emacs environment is, particularly when it comes to accessing documentation. So, I want to try out a lisp approach to see what this would look like, and if it has any benefits.
</p>

<p>
The bare bones implementation will have an Atom object, to store the type of atom and its coordinates, an Atoms object which will be a collection of atoms, and a unit cell, and a Calculator object that will store calculation parameters.
</p>

<p>
Then, we will try using it to see what advantages it might have. This will be a moderately long post.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> The Atom class</h2>
<div class="outline-text-2" id="text-1">
<p>
This is my first serious effort to use the <a href="https://www.gnu.org/software/emacs/manual/html_node/eieio/">object system</a> in emacs-lisp, so I do not claim it is optimal, or beautiful. It is functional though. We make a simple Atom class that holds the chemical symbol, and xyz coordinates. We do not consider having a magnetic moment at this point, and this class has no methods.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defclass</span> <span style="color: #4682b4;">Atom</span> ()
  ((symbol <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:symbol</span>
           <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"A string for the chemical symbol"</span>)
   (x <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:x</span>
      <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"The x coordinate"</span>)
   (y <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:y</span>
      <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"The y coordinate"</span>)
   (z <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:z</span>
      <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"The z coordinate"</span>))
 <span style="color: #228b22;">"A class to represent an atom."</span>)

(<span style="color: #8b0000;">provide</span> '<span style="color: #cd0000;">Atom</span>)
</pre>
</div>

<pre class="example">
Atom
</pre>

<p>
Let us try it out. We make an Atom, then get the symbol using the oref function. I don't think we need a "Name" for the atom, so the second argument is nil.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
</pre>
</div>

<pre class="example">
[object Atom nil "C" 0 0 0]
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((a1 (Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0  <span style="color: #cd0000;">:z</span> 0)))
  (oref a1 symbol))
</pre>
</div>

<pre class="example">
C
</pre>

<p>
It is not difficult to modify an Atom object. We use oset.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((a1 (Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0  <span style="color: #cd0000;">:z</span> 0)))
  (oset a1 x 2.5)
  a1)
</pre>
</div>

<pre class="example">
[object Atom nil "C" 2.5 0 0]
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> The Atoms class</h2>
<div class="outline-text-2" id="text-2">
<p>
We need at Atoms object, which will store a list of Atom objects, and a unit cell. I do not know how to make this class act like a list the way that the Atoms object in ase acts. We will have to access the list of atoms as a slot. We define one method here to get the ith atom from the object.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defclass</span> <span style="color: #4682b4;">Atoms</span> ()
  ((atoms <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:atoms</span>
          <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"A list of `</span><span style="color: #cd0000;">Atom</span><span style="color: #228b22;">' objects"</span>)
   (cell <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:cell</span>
         <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"A 3-tuple of lengths of an orthorhombic unit cell"</span>))
  <span style="color: #228b22;">"A class to represent an atoms object."</span>)


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">get-atom</span> ((atoms Atoms) <span style="color: #4682b4;">&amp;rest</span> args)
  <span style="color: #228b22;">"Get a list of atoms in ARGS.</span>
<span style="color: #228b22;">Return atom if ARGS contains one element, a list of atom objects</span>
<span style="color: #228b22;">otherwise."</span>
  (<span style="color: #8b0000;">cond</span>
   ((= 1 (length args))
    (elt (oref atoms atoms) (car args)))
   (t
    (mapcar (<span style="color: #8b0000;">lambda</span> (i)
              (elt (oref atoms atoms) i))
            args))))

(<span style="color: #8b0000;">provide</span> '<span style="color: #cd0000;">Atoms</span>)
</pre>
</div>

<pre class="example">
get-atom
</pre>

<p>
That seems to do what we need. It has some limitations:
</p>
<ol class="org-ol">
<li>We only allowed for orthorhombic unit cells
</li>
<li>We did not enable any constraints or magnetic moments on the atoms.
</li>
</ol>

<p>
Here is an example Atoms object. Note we use `, notation to ensure each Atom is created, since Atom is a constructor function that returns the object.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(Atoms nil
       <span style="color: #cd0000;">:atoms</span> `(,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
                ,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"O"</span> <span style="color: #cd0000;">:x</span> 1.1 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0))
       <span style="color: #cd0000;">:cell</span> '(8 9 10))
</pre>
</div>

<pre class="example">
[object Atoms nil ([object Atom nil "C" 0 0 0] [object Atom nil "O" 1.1 0 0]) (8 9 10)]
</pre>

<p>
We can drill into the object, e.g. to get the second atom:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((A1 (Atoms nil
                 <span style="color: #cd0000;">:atoms</span> `(,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
                          ,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"O"</span> <span style="color: #cd0000;">:x</span> 1.1 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0))
                 <span style="color: #cd0000;">:cell</span> '(8 9 10))))
  (get-atom A1 1))
</pre>
</div>

<pre class="example">
[object Atom nil "O" 1.1 0 0]
</pre>

<p>
We can modify the atoms in place like this. Suppose we want to change the symbol of the first atom to "O". We use setf for this too.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((A1 (Atoms nil
                 <span style="color: #cd0000;">:atoms</span> `(,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
                          ,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"O"</span> <span style="color: #cd0000;">:x</span> 1.1 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0))
                 <span style="color: #cd0000;">:cell</span> '(8 9 10))))
  (oset (get-atom A1 0) symbol <span style="color: #228b22;">"O"</span>)
  A1)
</pre>
</div>

<pre class="example">
[object Atoms nil ([object Atom nil "O" 0 0 0] [object Atom nil "O" 1.1 0 0]) (8 9 10)]
</pre>

<p>
The only think I do not like about this syntax is the need to get the list of atoms from the object. That is a little clunkier than the Python analog where the object is a list itself. That may be just my inexperience with emacs-lisp. Probably you can define some getter function to smooth this over.
</p>

<p>
This Atoms class lacks much of the functionality of the <a href="https://wiki.fysik.dtu.dk/ase/ase/atoms.html">ase.Atoms</a> class, but it is sufficient for this prototype.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> The Calculator class</h2>
<div class="outline-text-2" id="text-3">
<p>
Next, we need our Calculator. This will store the parameters, and be responsible for creating the INCAR, POSCAR, KPOINTS, and POTCAR files, running a calculation, and getting data from the output. We also create a with-current-directory macro that will temporarily change the working directory since VASP uses the same filenames over and over, but in different directories. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defmacro</span> <span style="color: #8b2323;">with-current-directory</span> (directory <span style="color: #4682b4;">&amp;rest</span> body)
  <span style="color: #228b22;">"Set the working directory temporarily set to DIRECTORY and run BODY.</span>
<span style="color: #228b22;">DIRECTORY is expanded, and create it and its parents if needed."</span>
  `(<span style="color: #8b0000;">progn</span>
     (<span style="color: #8b0000;">unless</span> (file-exists-p (file-name-as-directory
                             (expand-file-name ,directory)))
       (make-directory ,directory t))
     
     (<span style="color: #8b0000;">let</span> ((default-directory (file-name-as-directory
                                (expand-file-name ,directory)))) 
        ,@body)))


(<span style="color: #8b0000;">defclass</span> <span style="color: #4682b4;">Jasp</span> ()
  ((wd <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:wd</span>
       <span style="color: #cd0000;">:initform</span> <span style="color: #228b22;">"."</span>  ; <span style="color: #ff0000; font-weight: bold;">default to the current working directory</span>
       <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"Directory to run calculation in."</span>)
   (encut <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:encut</span>
          <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"Positive number in eV for planewave cutoff.</span>
<span style="color: #228b22;">See URL `</span><span style="color: #cd0000;">http://cms.mpi.univie.ac.at/vasp/vasp/ENCUT_tag.html</span><span style="color: #228b22;">'."</span>)
   (nbands <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:nbands</span>
           <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"Integer number of bands.</span>
<span style="color: #228b22;">See URL `</span><span style="color: #cd0000;">http://cms.mpi.univie.ac.at/vasp/vasp/NBANDS_tag.html</span><span style="color: #228b22;">'."</span>)
   (kpts <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:kpts</span>
         <span style="color: #cd0000;">:initform</span> (1 1 1)  ; <span style="color: #ff0000; font-weight: bold;">default value</span>
         <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"3-tuple for Monkhorst-Pack K-point grid."</span>)
   (xc <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:xc</span>
       <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"String of exchange correlation functional."</span>)
   (atoms <span style="color: #cd0000;">:initarg</span> <span style="color: #cd0000;">:atoms</span>
          <span style="color: #cd0000;">:documentation</span> <span style="color: #228b22;">"An `</span><span style="color: #cd0000;">Atoms</span><span style="color: #228b22;">' object."</span>))
 <span style="color: #228b22;">"A class to represent a calculator that runs VASP."</span>)


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">view-atoms</span> ((calc Jasp))
  <span style="color: #228b22;">"Open the ase-gui"</span>
  (<span style="color: #8b0000;">unless</span> (and (file-exists-p <span style="color: #228b22;">"POSCAR"</span>)
               (file-exists-p <span style="color: #228b22;">"POTCAR"</span>))
    (write-poscar calc)
    (write-potcar calc))
  (shell-command <span style="color: #228b22;">"ase-gui POSCAR"</span>))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">write-poscar</span> ((calc Jasp))
  <span style="color: #228b22;">"create a POSCAR file for CALC."</span>
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"POSCAR"</span>
    (insert <span style="color: #228b22;">"Created by jasp.el\n"</span>)
    (insert <span style="color: #228b22;">"  1.0"</span>) ; <span style="color: #ff0000; font-weight: bold;">unit cell scale factor</span>
    (<span style="color: #8b0000;">let*</span> ((atoms (oref calc atoms))
           (cell (oref atoms cell)))
      (loop for v in cell
            for i below (length cell)     
            do
            (insert <span style="color: #228b22;">"\n"</span>)
            (loop for j below (length cell)
                  do
                  (<span style="color: #8b0000;">if</span> (equal i j)
                      (insert (format <span style="color: #228b22;">" %f "</span> (float (elt cell i))))
                    (insert (format <span style="color: #228b22;">" %f "</span> 0.0 ))))))
    ;; <span style="color: #ff0000; font-weight: bold;">The next line is counts for each atom type. For each number in</span>
    ;; <span style="color: #ff0000; font-weight: bold;">this line, there will be a copy of the POTCAR in the POTCAR</span>
    ;; <span style="color: #ff0000; font-weight: bold;">file. In ase, we sort the atoms and group them so that there is</span>
    ;; <span style="color: #ff0000; font-weight: bold;">only one POTCAR per atom. We do not do that here yet. We will</span>
    ;; <span style="color: #ff0000; font-weight: bold;">have a POTCAR for each atom.</span>
    (insert <span style="color: #228b22;">"\n"</span>)
    (loop for atom in (oref (oref calc atoms) atoms)
          do (insert (format <span style="color: #228b22;">"1 "</span>)))
    
    ;; <span style="color: #ff0000; font-weight: bold;">now we do the atoms</span>
    (insert <span style="color: #228b22;">"\nCartesian\n"</span>)
    (loop for atom in (oref (oref calc atoms) atoms)
          do
          (insert
           (format <span style="color: #228b22;">"%f %f %f\n"</span>
                   (oref atom x)
                   (oref atom y)
                   (oref atom z))))
    (buffer-string)))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">write-kpoints</span> ((calc Jasp))
  <span style="color: #228b22;">"Create KPOINTS file for CALC. </span>
<span style="color: #228b22;">Limited to automatic generation, and no offset."</span>
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"KPOINTS"</span>
    (insert <span style="color: #228b22;">"Automatic mesh</span>
<span style="color: #228b22;">0</span>
<span style="color: #228b22;">Monkhorst-Pack</span>
<span style="color: #228b22;">"</span>)
    (<span style="color: #8b0000;">dolist</span> (k (oref calc kpts))
      (insert (format <span style="color: #228b22;">"%4d "</span> k)))
    (insert <span style="color: #228b22;">"\n0.0 0.0 0.0"</span>)
    (buffer-string)))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">write-potcar</span> ((calc Jasp))
  <span style="color: #228b22;">"Generate the POTCAR file for CALC.</span>
<span style="color: #228b22;">No `</span><span style="color: #cd0000;">Atom</span><span style="color: #228b22;">' grouping is done, there is one POTCAR for each atom."</span>
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"POTCAR"</span>
    (<span style="color: #8b0000;">let</span> ((xc (oref calc xc))
          (atoms (oref calc atoms))
          (vasp_pp_path (getenv <span style="color: #228b22;">"VASP_PP_PATH"</span>)))
      (loop for atom in (oref atoms atoms)
            do
            (insert-file-contents
             (f-join
              vasp_pp_path
              (concat <span style="color: #228b22;">"potpaw_"</span> xc)
              (oref atom symbol)
              <span style="color: #228b22;">"POTCAR"</span>))))
    (buffer-string)))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">write-incar</span> ((calc Jasp))
  <span style="color: #228b22;">"Generate the INCAR file for CALC."</span>
  (<span style="color: #8b0000;">with-temp-file</span> <span style="color: #228b22;">"INCAR"</span>
    (insert (format <span style="color: #228b22;">"ENCUT = %f\n"</span> (oref calc encut)))
    (insert (format <span style="color: #228b22;">"NBANDS = %d\n"</span> (oref calc nbands)))
    (buffer-string)))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">run</span> ((calc Jasp))
  <span style="color: #228b22;">"Write out input files, and run VASP as a simple shell command"</span>
  (write-poscar calc)
  (write-kpoints calc)
  (write-potcar calc)
  (write-incar calc)
  (shell-command <span style="color: #228b22;">"vasp"</span>))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">update</span> ((calc Jasp))
  <span style="color: #228b22;">"Run vasp if needed for CALC.</span>
<span style="color: #228b22;">We just check for a properly ended OUTCAR."</span>
  (with-current-directory
   (oref calc wd)
   (<span style="color: #8b0000;">unless</span> (and (file-exists-p <span style="color: #228b22;">"OUTCAR"</span>)
                (<span style="color: #8b0000;">with-temp-buffer</span>
                  (insert-file-contents <span style="color: #228b22;">"OUTCAR"</span>)
                  (re-search-forward
                  <span style="color: #228b22;">"                 Voluntary context switches:"</span>
                  (point-max)
                  t)))
     (run calc))))


(<span style="color: #8b0000;">defmethod</span> <span style="color: #8b2323;">get-potential-energy</span> ((calc Jasp))
  <span style="color: #228b22;">"Get potential energy from CALC."</span>
  (update calc)
  (with-current-directory
   (oref calc wd)
   (<span style="color: #8b0000;">with-temp-buffer</span>
     (insert-file-contents <span style="color: #228b22;">"OUTCAR"</span>)
     ;; <span style="color: #ff0000; font-weight: bold;">go to last entry</span>
     (<span style="color: #8b0000;">while</span> (re-search-forward
             <span style="color: #228b22;">"free  energy   TOTEN  =\\s-*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">(</span><span style="color: #228b22;">[-]?[0-9]*\\.[0-9]*</span><span style="color: #228b22;">\\</span><span style="color: #228b22;">)</span><span style="color: #228b22;"> eV"</span>
             (point-max)
             t)
       nil)
     ;; <span style="color: #ff0000; font-weight: bold;">return last match</span>
     (string-to-number  (match-string 1)))))

(<span style="color: #8b0000;">provide</span> '<span style="color: #cd0000;">jasp</span>)
</pre>
</div>

<pre class="example">
get-potential-energy
</pre>


<p>
This is worth some discussion. On one hand, the constructor is a bit more verbose than the implementation in Python. In Python we use a context handler in place of the macro here. On the other hand, that verbosity comes with detailed, accessible documentation for each argument. We only considered the simplest of input arguments. It might be trickier to include lists, and other types of input. But I think those can all be worked out like they were in ase. We only implemented the simplest job control logic, but that also can be worked out. The biggest challenge might be getting more complex data from the output. Nearly everything can be obtained from vasprun.xml also, in the event that parsing is to slow or difficult.
</p>

<p>
Now, let us test this out. We can make a calculator:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq calc (Jasp
            nil
            <span style="color: #cd0000;">:xc</span> <span style="color: #228b22;">"PBE"</span>
            <span style="color: #cd0000;">:encut</span> 350
            <span style="color: #cd0000;">:nbands</span> 6
            <span style="color: #cd0000;">:atoms</span> (Atoms
                    nil
                    <span style="color: #cd0000;">:atoms</span> `(,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
                             ,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"O"</span> <span style="color: #cd0000;">:x</span> 1.1 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0))
                    <span style="color: #cd0000;">:cell</span> '(8 9 10))))
</pre>
</div>

<pre class="example">
[object Jasp nil "." 350 6 (1 1 1) "PBE" [object Atoms nil ([object Atom nil "C" 0 0 0] [object Atom nil "O" 1.1 0 0]) (8 9 10)]]
</pre>

<p>
We can call the class functions like this. Here we write out the corresponding POSCAR:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(write-poscar calc)
</pre>
</div>

<pre class="example">
Created by jasp.el
  1.0
 8.000000  0.000000  0.000000 
 0.000000  9.000000  0.000000 
 0.000000  0.000000  10.000000 
1 1 
Cartesian
0.000000 0.000000 0.000000
1.100000 0.000000 0.000000
</pre>

<p>
It looks a little backward if you have only seen Python, where this would be calc.write<sub>poscar</sub>(). It is almost the same characters, just a different order (and no . in lisp)!
</p>

<p>
Here we get the KPOINTS file:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(write-kpoints calc)
</pre>
</div>

<pre class="example">
Automatic mesh
0
Monkhorst-Pack
   1    1    1 
0.0 0.0 0.0
</pre>


<p>
I cannot show the POTCAR file for licensing reasons, but it works.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(write-potcar calc)
</pre>
</div>

<p>
and the INCAR file:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(write-incar calc)
</pre>
</div>

<pre class="example">
ENCUT = 350.000000
NBANDS = 6
</pre>

<p>
We run a calculation like this. This will run vasp directly (not through the queue system). 
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(run calc)
</pre>
</div>

<pre class="example">
0
</pre>

<p>
The returned 0 means the shell command finished correctly.
</p>

<p>
And we retrieve the potential energy like this:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(get-potential-energy calc)
</pre>
</div>

<pre class="example">
-14.687906
</pre>

<p>
Not bad. That is close to the result we got from a similar calculation <a href="http://kitchingroup.cheme.cmu.edu/dft-book/dft.html#sec-3-3-1">here</a> . 
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Putting it all together to run calculations</h2>
<div class="outline-text-2" id="text-4">
<p>
If we put this all together the way we might use it in practice, it looks like this. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(load-file <span style="color: #228b22;">"Atom.el"</span>)
(load-file <span style="color: #228b22;">"Atoms.el"</span>)
(load-file <span style="color: #228b22;">"Jasp.el"</span>)

(<span style="color: #8b0000;">let*</span> ((co (Atoms
            nil
            <span style="color: #cd0000;">:atoms</span> `(,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
                     ,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"O"</span> <span style="color: #cd0000;">:x</span> 1.1 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0))
            <span style="color: #cd0000;">:cell</span> '(8 9 10)))

       (calc (Jasp
              nil
              <span style="color: #cd0000;">:xc</span> <span style="color: #228b22;">"PBE"</span>
              <span style="color: #cd0000;">:nbands</span> 6
              <span style="color: #cd0000;">:encut</span> 350
              <span style="color: #cd0000;">:atoms</span> co)))
  
  (get-potential-energy calc))
</pre>
</div>

<pre class="example">
-14.687906
</pre>

<p>
Compare this with this Python code which does approximately the same thing:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase <span style="color: #8b0000;">import</span> Atoms, Atom
<span style="color: #8b0000;">from</span> jasp <span style="color: #8b0000;">import</span> *

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">co</span> = Atoms([Atom(<span style="color: #228b22;">'C'</span>, [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>,   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>]),
            Atom(<span style="color: #228b22;">'O'</span>, [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>])],
            <span style="color: #000000; background-color: #cccccc; font-weight: bold;">cell</span>=(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span>., <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span>., <span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span>.))

<span style="color: #8b0000;">with</span> jasp(<span style="color: #228b22;">'molecules/simple-co'</span>, <span style="color: #ff0000; font-weight: bold;">#output dir</span>
          <span style="color: #000000; background-color: #cccccc; font-weight: bold;">xc</span>=<span style="color: #228b22;">'PBE'</span>,  <span style="color: #ff0000; font-weight: bold;"># the exchange-correlation functional</span>
          <span style="color: #000000; background-color: #cccccc; font-weight: bold;">nbands</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">6</span>,  <span style="color: #ff0000; font-weight: bold;"># number of bands</span>
          <span style="color: #000000; background-color: #cccccc; font-weight: bold;">encut</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">350</span>, <span style="color: #ff0000; font-weight: bold;"># planewave cutoff</span>
          <span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span>=co) <span style="color: #8b0000;">as</span> calc:
    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'energy = {0} eV'</span>.format(co.get_potential_energy())
</pre>
</div>

<p>
They look pretty similar. One thing clearly missing from emacs-lisp that Python has is full support for numerics and plotting. Some of this could be addressed via <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs/">Pymacs</a> , but certainly not all of it. Some of it could also be handled using org-mode to enable data from emacs-lisp to go to other code blocks that can handle it. 
</p>

<p>
Finally, for a little fun, we illustrate mapping over a range of bond lengths. There is more than one way to do this. For example, we could create a list of calculators, and then run over them. Here we create one calculator, and just change the x position in a loop. We use the more general setf approach instead of oset to see what it looks like.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((co (Atoms
            nil
            <span style="color: #cd0000;">:atoms</span> `(,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"C"</span> <span style="color: #cd0000;">:x</span> 0 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0)
                     ,(Atom nil <span style="color: #cd0000;">:symbol</span> <span style="color: #228b22;">"O"</span> <span style="color: #cd0000;">:x</span> 1.1 <span style="color: #cd0000;">:y</span> 0 <span style="color: #cd0000;">:z</span> 0))
            <span style="color: #cd0000;">:cell</span> '(8 9 10)))
       (calc (Jasp
              nil
              <span style="color: #cd0000;">:wd</span> nil
              <span style="color: #cd0000;">:xc</span> <span style="color: #228b22;">"PBE"</span>
              <span style="color: #cd0000;">:nbands</span> 6
              <span style="color: #cd0000;">:encut</span> 350
              <span style="color: #cd0000;">:atoms</span> co)))
  (<span style="color: #8b0000;">dolist</span> (d '(1.05 1.1 1.15 1.2 1.25))
    ;; <span style="color: #ff0000; font-weight: bold;">change working directory</span>
    (setf (oref calc wd) (format <span style="color: #228b22;">"co-%s"</span> d))
    ;; <span style="color: #ff0000; font-weight: bold;">set x-coordinate on oxygen atom</span>
    (setf (oref (elt (oref co atoms) 1) x) d)
    (print (format <span style="color: #228b22;">"d = %s\nEnergy = %s eV"</span>
                   d
                   (get-potential-energy calc)))))
</pre>
</div>

<pre class="example">
"d = 1.05
Energy = -14.195892 eV"

"d = 1.1
Energy = -14.698456 eV"

"d = 1.15
Energy = -14.814809 eV"

"d = 1.2
Energy = -14.660395 eV"

"d = 1.25
Energy = -14.319904 eV"
</pre>

<p>
See <a href="http://kitchingroup.cheme.cmu.edu/dft-book/dft.html#sec-3-4-1">http://kitchingroup.cheme.cmu.edu/dft-book/dft.html#sec-3-4-1</a> for how this was done in Python. It looks pretty similar to me.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-5">
<p>
We implemented a bare bones emacs-lisp calculator for VASP. The library automates creation of input files, running the calculation, and parsing the output.
</p>

<p>
It seems pretty feasible to implement a pretty complete interface to VASP in emacs-lisp. The main reasons to do this are:
</p>
<ol class="org-ol">
<li>Integrated access to documentation
</li>
<li>Emacs editing of emacs-lisp code 
</li>
<li>Integration with org-mode
</li>
</ol>

<p>
Even with Python editor that had access to documentation as deeply integrated as emacs has with emacs-lisp, it would still just be a Python editor, i.e. you probably could not use the editor to write org-mode, LaTeX, etc&#x2026; It is time to recognize we need both scientific document creation <i>and</i> code editing capability in the same place! This kind of suggests a need to get a better Python environment going in Emacs, which deeper integration of the documentation. See <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/12/20/A-new-mode-for-Python-documentation/">this</a> post for some progress in that area!
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/24/A-prototype-implementation-of-jasp-in-emacs-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
    <item>
      <title>New export function for Matlab posts in blogofile</title>
      <link>http://jkitchin.github.io/blog/2014/12/24/New-export-function-for-Matlab-posts-in-blogofile</link>
      <pubDate>Wed, 24 Dec 2014 10:41:37 EST</pubDate>
      <category><![CDATA[matlab]]></category>
      <guid isPermaLink="false">iYGZMYy_YqaX5im0SI9l8BBGlfI=</guid>
      <description>New export function for Matlab posts in blogofile</description>
      <content:encoded><![CDATA[



<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   <!--
This HTML was auto-generated from MATLAB code.
To make changes, update the MATLAB code and republish this document.
      --><title>New export function for Matlab posts in blogofile</title><meta name="generator" content="MATLAB 8.4"><link rel="schema.DC" href="http://purl.org/dc/elements/1.1/"><meta name="DC.date" content="2014-12-24"><meta name="DC.source" content="blogofile.m"><style type="text/css">
html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,font,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td{margin:0;padding:0;border:0;outline:0;font-size:100%;vertical-align:baseline;background:transparent}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:before,blockquote:after,q:before,q:after{content:'';content:none}:focus{outine:0}ins{text-decoration:none}del{text-decoration:line-through}table{border-collapse:collapse;border-spacing:0}

html { min-height:100%; margin-bottom:1px; }
html body { height:100%; margin:0px; font-family:Arial, Helvetica, sans-serif; font-size:10px; color:#000; line-height:140%; background:#fff none; overflow-y:scroll; }
html body td { vertical-align:top; text-align:left; }

h1 { padding:0px; margin:0px 0px 25px; font-family:Arial, Helvetica, sans-serif; font-size:1.5em; color:#d55000; line-height:100%; font-weight:normal; }
h2 { padding:0px; margin:0px 0px 8px; font-family:Arial, Helvetica, sans-serif; font-size:1.2em; color:#000; font-weight:bold; line-height:140%; border-bottom:1px solid #d6d4d4; display:block; }
h3 { padding:0px; margin:0px 0px 5px; font-family:Arial, Helvetica, sans-serif; font-size:1.1em; color:#000; font-weight:bold; line-height:140%; }

a { color:#005fce; text-decoration:none; }
a:hover { color:#005fce; text-decoration:underline; }
a:visited { color:#004aa0; text-decoration:none; }

p { padding:0px; margin:0px 0px 20px; }
img { padding:0px; margin:0px 0px 20px; border:none; }
p img, pre img, tt img, li img, h1 img, h2 img { margin-bottom:0px; } 

ul { padding:0px; margin:0px 0px 20px 23px; list-style:square; }
ul li { padding:0px; margin:0px 0px 7px 0px; }
ul li ul { padding:5px 0px 0px; margin:0px 0px 7px 23px; }
ul li ol li { list-style:decimal; }
ol { padding:0px; margin:0px 0px 20px 0px; list-style:decimal; }
ol li { padding:0px; margin:0px 0px 7px 23px; list-style-type:decimal; }
ol li ol { padding:5px 0px 0px; margin:0px 0px 7px 0px; }
ol li ol li { list-style-type:lower-alpha; }
ol li ul { padding-top:7px; }
ol li ul li { list-style:square; }

.content { font-size:1.2em; line-height:140%; padding: 20px; }

pre, code { font-size:12px; }
tt { font-size: 1.2em; }
pre { margin:0px 0px 20px; }
pre.codeinput { padding:10px; border:1px solid #d3d3d3; background:#f7f7f7; }
pre.codeoutput { padding:10px 11px; margin:0px 0px 20px; color:#4c4c4c; }
pre.error { color:red; }

@media print { pre.codeinput, pre.codeoutput { word-wrap:break-word; width:100%; } }

span.keyword { color:#0000FF }
span.comment { color:#228B22 }
span.string { color:#A020F0 }
span.untermstring { color:#B20000 }
span.syscmd { color:#B28C00 }

.footer { width:auto; padding:10px 0px; margin:25px 0px 0px; border-top:1px dotted #878787; font-size:0.8em; line-height:140%; font-style:italic; color:#878787; text-align:left; float:none; }
.footer p { margin:0px; }
.footer a { color:#878787; }
.footer a:hover { color:#878787; text-decoration:underline; }
.footer a:visited { color:#878787; }

table th { padding:7px 5px; text-align:left; vertical-align:middle; border: 1px solid #d6d4d4; font-weight:bold; }
table td { padding:7px 5px; text-align:left; vertical-align:top; border:1px solid #d6d4d4; }





  </style></head><body><div class="content"><h1>New export function for Matlab posts in blogofile</h1><!--introduction--><p>categories: matlab</p><!--/introduction--><h2>Contents</h2><div><ul><li><a href="#1">Summary</a></li><li><a href="#3">Conclusions</a></li></ul></div><h2>Summary<a name="1"></a></h2><p>This is just a test blog post to see if I can publish an m-file to my blogofile blog. You should be able to do interesting things in Matlab like</p><pre class="language-matlab">grabcode(<span class="string">'this url'</span>)
</pre><p>to get the code in this post.</p><p><img src="/media/2014-12-24-New-export-function-for-Matlab-posts-in-blogofile/blogofile_eq17467035999183504765.png" alt="$$e^{\pi i} + 1 = 0$$"></p><pre class="codeinput">exp(pi*i) + 1
</pre><pre class="codeoutput">
ans =

   0.0000e+00 + 1.2246e-16i

</pre><h2>Conclusions<a name="3"></a></h2><p>It works! Have a happy holiday!</p><p class="footer"><br><a href="http://www.mathworks.com/products/matlab/">Published with MATLAB&reg; R2014b</a><br></p></div><!--
 ##### SOURCE BEGIN #####
%% New export function for Matlab posts in blogofile
%
% categories: matlab
% 

%% Summary
% This is just a test blog post to see if I can publish an m-file to my
% blogofile blog. You should be able to do interesting things in Matlab
% like 
% 
%   grabcode('this url')
% 
% to get the code in this post.

%%
% 
% $$e^{\pi i} + 1 = 0$$
% 
exp(pi*i) + 1

%% Conclusions
% It works! Have a happy holiday!

##### SOURCE END ##### 
--></body></html>]]></content:encoded>
    </item>
    <item>
      <title>Building atomic clusters in ase</title>
      <link>http://jkitchin.github.io/blog/2014/12/22/Building-atomic-clusters-in-ase</link>
      <pubDate>Mon, 22 Dec 2014 08:55:38 EST</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[ase]]></category>
      <guid isPermaLink="false">CJDm8f5T_qPEwomEtR2_jgzbiq0=</guid>
      <description>Building atomic clusters in ase</description>
      <content:encoded><![CDATA[



<p>
I was perusing the <a href="https://wiki.fysik.dtu.dk/ase/epydoc/">ase</a> codebase, and came across the <a href="https://wiki.fysik.dtu.dk/ase/epydoc/ase.cluster-module.html">cluster module</a> . This does not seem to be documented in the main docs, so here are some examples of using it. The module provides some functions to make atomic clusters for simulations.
</p>

<p>
Below I show some typical usage. First, we look at an icosahedron with three shells.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.icosahedron <span style="color: #8b0000;">import</span> Icosahedron
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = Icosahedron(<span style="color: #228b22;">'Au'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">noshells</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
<span style="color: #8b0000;">print</span> atoms

write(<span style="color: #228b22;">'images/Au-icosahedron-3.png'</span>, atoms)
</pre>
</div>

<pre class="example">
Atoms(symbols='Au55', positions=..., tags=..., cell=[9.816495585723144, 9.816495585723144, 9.816495585723144], pbc=[False, False, False])
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/Au-icosahedron-3.png"> 
</p>
</div>

<p>
Even with only three shells, there are already 55 atoms in this cluster!
</p>


<p>
How about a decahedron? There are more parameters to set here. I am not sure what the depth of the Marks re-entrance is.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.decahedron <span style="color: #8b0000;">import</span> Decahedron
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = Decahedron(<span style="color: #228b22;">'Pt'</span>,
                   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">p</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>,  <span style="color: #ff0000; font-weight: bold;"># natoms on 100 face normal to 5-fold axis</span>
                   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">q</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>,  <span style="color: #ff0000; font-weight: bold;"># natoms 0n 100 parallel to 5-fold axis</span>
                   <span style="color: #000000; background-color: #cccccc; font-weight: bold;">r</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>)  <span style="color: #ff0000; font-weight: bold;"># depth of the Marks re-entrance?</span>

<span style="color: #8b0000;">print</span>(<span style="color: #228b22;">'#atoms = {}'</span>.format<span style="color: #cd0000;">(len</span>(atoms)))

write(<span style="color: #228b22;">'images/decahedron.png'</span>, atoms)
</pre>
</div>

<pre class="example">
#atoms = 156
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/decahedron.png"> 
</p>
</div>

<p>
You can see the 5-fold symmetry here. We can make octahedra too. Here, the length is the number of atoms on the edge.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.octahedron <span style="color: #8b0000;">import</span> Octahedron
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = Octahedron(<span style="color: #228b22;">'Cu'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">length</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>)
<span style="color: #8b0000;">print</span> atoms
write(<span style="color: #228b22;">'images/octahedron.png'</span>, atoms)
</pre>
</div>

<pre class="example">
Cluster(symbols='Cu85', positions=..., cell=[14.44, 14.44, 14.44], pbc=[False, False, False])
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/octahedron.png"> 
</p>
</div>

<p>
Finally, we can make particles based on a Wulff construction! We provide a list of surfaces, and their surface energies, with an approximate size we want, the structure to make the particle in, and what to do if there is not an exact number of atoms matching our size. We choose to round below here, so that the particle is not bigger than our size. In this example I totally made up the surface energies, with (100) as the lowest, so the particle comes out looking like a cube.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.cluster.wulff <span style="color: #8b0000;">import</span> wulff_construction
<span style="color: #8b0000;">from</span> ase.io <span style="color: #8b0000;">import</span> write

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">atoms</span> = wulff_construction(<span style="color: #228b22;">'Pd'</span>,
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">surfaces</span>=[(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>),
                                     (<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>),
                                     (<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>)],
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">energies</span>=[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">15</span>],
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">size</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">100</span>,
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">structure</span>=<span style="color: #228b22;">'fcc'</span>,
                           <span style="color: #000000; background-color: #cccccc; font-weight: bold;">rounding</span>=<span style="color: #228b22;">'below'</span>)

<span style="color: #8b0000;">print</span> atoms
write(<span style="color: #228b22;">'images/wulff.png'</span>, atoms)
</pre>
</div>
<pre class="example">
Cluster(symbols='Pd63', positions=..., cell=[7.779999999999999, 7.779999999999999, 7.779999999999999], pbc=[False, False, False])
</pre>


<div class="figure">
<p><img src="/media/2014-12-22-Building-atomic-clusters-in-ase/wulff.png"> 
</p>
</div>

<p>
This is one handy module, if you need to make clusters for some kind of simulation!</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/12/22/Building-atomic-clusters-in-ase.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content:encoded>
    </item>
  </channel>
</rss>
