<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sun, 09 Nov 2014 14:56:49 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <item>
      <title>A hint system for problems in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/11/09/A-hint-system-for-problems-in-org-mode</link>
      <pubDate>Sun, 09 Nov 2014 09:55:17 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">ZGFvwKEGoKtMNrMQ_FtYYfuCkJM=</guid>
      <description>A hint system for problems in org-mode</description>
      <content:encoded><![CDATA[


<p>
I use org-mode to write problems for classes that I teach. Sometimes it is helpful to be able to provide hints about aspects of the problem. I have used drawers for that before. Here I will look at another approach. The idea is to store a unique id (org-id) in the problem headline. We will make hints somewhere else, and each hint will store the id they refer to in some property. We will run a command in the problem that finds the hints, and offers a menu you can select from.
</p>

<p>
In the next sections, we define a <a href="#sec-1">Problem statement</a>, a section with <a href="#sec-2">hints</a> in it, and finally <a href="#sec-3">code</a> that defines a hint function.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-EE9523FF-C4FF-45D9-BABA-8832A6E48C3B" name="ID-EE9523FF-C4FF-45D9-BABA-8832A6E48C3B"></a><span class="section-number-2">1</span> Problem statement</h2>
<div class="outline-text-2" id="text-1">

<p>
What is the seventh number in the Fibonacci series?
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Hints</h2>
<div class="outline-text-2" id="text-2">
<p>
Hints will be stored in headings somewhere. Here we put them in this file, but they could be stored in another file too. We give each hint a HINT property, with the problem id as the value. Here are three hints. In real example, the hints would not be this easy to find in the document. You might store them somewhere else, in another file for example.
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> What is the Fibonacci series?</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The $i<sup>th</sup> number in the Fibonacci series is equal to the sum of the previous two numbers in the series.
</p>
</div>
</div>


<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> What does the series start with?</h3>
<div class="outline-text-3" id="text-2-2">

<p>
The Fibonacci series starts with 1.
</p>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3"><span class="section-number-3">2.3</span> Example of the series.</h3>
<div class="outline-text-3" id="text-2-3">
<p>
The Fibonacci series goes as 1, 1, 2, 3, 5, 8, &#x2026;
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> The hint code</h2>
<div class="outline-text-2" id="text-3">
<p>
We want to get the id from the problem the point is in, and then find hints for the problem. Then, we construct a menu and prompt the user to select a hint. I use a number to select the hint because it was easier to generate the menu that way. I like characters better, because you just have to press a key. With numbers you type the number and press enter. We open a new buffer with the contents of the hint in it. You can close the buffer by pressing q.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">hint</span> ()
  <span style="color: #228b22;">"Present a menu of hints for the problem at point"</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((id (org-entry-get (point) <span style="color: #228b22;">"ID"</span>))
        (entries '())
        (menu <span style="color: #228b22;">""</span>)
        choice)

    (<span style="color: #8b0000;">unless</span> id
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #228b22;">"No problem ID found"</span>))

    (org-map-entries
     (<span style="color: #8b0000;">lambda</span> ()
       (<span style="color: #8b0000;">save-restriction</span>
         (org-narrow-to-subtree)
         (add-to-list 'entries
                      (cons
                       (elt (org-heading-components) 4)
                       (buffer-string))
                      t)))
     (format <span style="color: #228b22;">"HINT=\"%s\""</span> id))

    ;; <span style="color: #ff0000; font-weight: bold;">generate menu string</span>
    (<span style="color: #8b0000;">dolist</span> (i (number-sequence 1 (length entries)))
      (setq menu (concat menu (format <span style="color: #228b22;">"[%s] %s\n"</span> (- i 1)
                                      (car (elt entries (- i 1)))))))

    (setq choice (elt entries (read-number (concat menu <span style="color: #228b22;">"Your choice: "</span>) 0)))
    ;; <span style="color: #ff0000; font-weight: bold;">this feels a little clunky. Maybe I could just save a marker to</span>
    ;; <span style="color: #ff0000; font-weight: bold;">the headline, and open it in a narrowed indirect buffer.</span>
    (<span style="color: #8b0000;">when</span> choice
      (switch-to-buffer <span style="color: #228b22;">"*hint*"</span>)
      (erase-buffer)
      (insert (cdr choice))
      
      (org-mode)
      (show-subtree)
      (setq buffer-read-only t)
      (use-local-map (copy-keymap org-mode-map))
      (local-set-key <span style="color: #228b22;">"q"</span> #'(<span style="color: #8b0000;">lambda</span> () (interactive) (kill-buffer)))
      )))
</pre>
</div>
<pre class="example">
hint
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Summary</h2>
<div class="outline-text-2" id="text-4">
<p>
This seems like an interesting way to provide hints, or related information in org-mode.  You could also consider using tags, or more sophisticated code  to determine what else is relevant. For example, you might keep track of some performance metric, and use some heuristic algorithm that ranks the related information. Or perhaps fuzzy text searching, or combinations of criteria. If the number of hits got large, then the menu approach here might not be the best one. Then, something like the occur interface might be more suitable.</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/09/A-hint-system-for-problems-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A context-sensitive file link menu in org-mode</title>
      <link>http://jkitchin.github.io/blog/2014/11/08/A-context-sensitive-file-link-menu-in-org-mode</link>
      <pubDate>Sat, 08 Nov 2014 10:24:14 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">N7fM4O8dLVofW1TAz418Q8wNbIg=</guid>
      <description>A context-sensitive file link menu in org-mode</description>
      <content:encoded><![CDATA[


<p>
I am still interested in various ways to get more functionality of org-links. For example, we looked at: 
</p>
<ol class="org-ol">
<li><a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/21/Enabling-right-clicks-in-org-mode-links/">enabling right clicks</a> on links
</li>
<li><a href="http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/">new links with menus</a> 
</li>
</ol>

<p>
When you click on a link, the function org-open-at-point runs, which is a <i>large</i> function that does a lot of things. One of them is to check if the link is defined in org-link-protocols, and to run the function definition there if it is. Here is a list of links defined for me. I defined a lot of these in org-ref, and my own init files, so you may not see these on your system.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(mapcar 'car org-link-protocols)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">google</td>
<td class="left">ResearcherID</td>
<td class="left">orcid</td>
<td class="left">message</td>
<td class="left">mac-outlook</td>
<td class="left">skim</td>
<td class="left">addressbook</td>
<td class="left">x-together-item</td>
<td class="left">rmail</td>
<td class="left">mhe</td>
<td class="left">irc</td>
<td class="left">info</td>
<td class="left">gnus</td>
<td class="left">docview</td>
<td class="left">bibtex</td>
<td class="left">bbdb</td>
<td class="left">ans</td>
<td class="left">exercise</td>
<td class="left">solution</td>
<td class="left">assignment</td>
<td class="left">doi</td>
<td class="left">bibentry</td>
<td class="left">Autocites</td>
<td class="left">autocites</td>
<td class="left">supercites</td>
<td class="left">Textcites</td>
<td class="left">textcites</td>
<td class="left">Smartcites</td>
<td class="left">smartcites</td>
<td class="left">footcitetexts</td>
<td class="left">footcites</td>
<td class="left">Parencites</td>
<td class="left">parencites</td>
<td class="left">Cites</td>
<td class="left">cites</td>
<td class="left">fnotecite</td>
<td class="left">Pnotecite</td>
<td class="left">pnotecite</td>
<td class="left">Notecite</td>
<td class="left">notecite</td>
<td class="left">footfullcite</td>
<td class="left">fullcite</td>
<td class="left">citeurl</td>
<td class="left">citedate*</td>
<td class="left">citedate</td>
<td class="left">citetitle*</td>
<td class="left">citetitle</td>
<td class="left">Citeauthor*</td>
<td class="left">Autocite*</td>
<td class="left">autocite*</td>
<td class="left">Autocite</td>
<td class="left">autocite</td>
<td class="left">supercite</td>
<td class="left">parencite*</td>
<td class="left">cite*</td>
<td class="left">Smartcite</td>
<td class="left">smartcite</td>
<td class="left">Textcite</td>
<td class="left">textcite</td>
<td class="left">footcitetext</td>
<td class="left">footcite</td>
<td class="left">Parencite</td>
<td class="left">parencite</td>
<td class="left">Cite</td>
<td class="left">Citeauthor</td>
<td class="left">Citealp</td>
<td class="left">Citealt</td>
<td class="left">Citep</td>
<td class="left">Citet</td>
<td class="left">citeyear*</td>
<td class="left">citeyear</td>
<td class="left">citeauthor*</td>
<td class="left">citeauthor</td>
<td class="left">citetext</td>
<td class="left">citenum</td>
<td class="left">citealp*</td>
<td class="left">citealp</td>
<td class="left">citealt*</td>
<td class="left">citealt</td>
<td class="left">citep*</td>
<td class="left">citep</td>
<td class="left">citet*</td>
<td class="left">citet</td>
<td class="left">nocite</td>
<td class="left">cite</td>
<td class="left">eqref</td>
<td class="left">nameref</td>
<td class="left">pageref</td>
<td class="left">ref</td>
<td class="left">label</td>
<td class="left">list-of-tables</td>
<td class="left">list-of-figures</td>
<td class="left">addbibresource</td>
<td class="left">bibliographystyle</td>
<td class="left">printbibliography</td>
<td class="left">nobibliography</td>
<td class="left">bibliography</td>
<td class="left">pydoc</td>
<td class="left">index</td>
<td class="left">attachfile</td>
<td class="left">msx</td>
<td class="left">id</td>
<td class="left">file+emacs</td>
<td class="left">file+sys</td>
</tr>
</tbody>
</table>

<p>
Interestingly, file links are not defined in org-link-protocols, they are handled separately. I would like to change the behavior of file+emacs links. Instead of just opening the file, I want a menu to give me the option to create the file if it does not exist, and to open it in emacs, or with a system program if the file does exist. Let us see what this link does.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(assoc <span style="color: #228b22;">"file+emacs"</span> org-link-protocols)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">file+emacs</td>
<td class="left">org-open-file-with-emacs</td>
<td class="left">nil</td>
</tr>
</tbody>
</table>

<p>
When you click on the link, it runs org-open-file-with-emacs, and there is no formatting function defined.
</p>

<p>
So, let us define a list of functions that could make a menu. A new variation we use in this post is that each element of the list will be a (key menu-name action-func visible-p) list. visible-p will be a function that determines if the function is listed in the menu. That way, our menu will be context specific.
</p>

<p>
We want an option to create a file if it does not exist, and if it does exist, a choice to open in emacs, or a system program. So the idea here is to create the menu in a variable (so it easy to add to later), then when you click on the link it will run a menu function that  filters the functions to run, and then prompt you for a selection. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">file+emacs-menu</span> '()
  <span style="color: #228b22;">"list of menu entries. (key name action visible).</span>
<span style="color: #228b22;">key is a character to select.</span>
<span style="color: #228b22;">name is what shows in the menu as [key]name</span>
<span style="color: #228b22;">action is a function that takes a path</span>
<span style="color: #228b22;">visible is a function that determines if the entry is in the menu."</span>)

(setq file+emacs-menu 
      '((<span style="color: #228b22;">"c"</span> <span style="color: #228b22;">"reate"</span>
         find-file ; <span style="color: #ff0000; font-weight: bold;">action function</span>
         (<span style="color: #8b0000;">lambda</span> (x) (not (file-exists-p x)))) ; <span style="color: #ff0000; font-weight: bold;">visible-p</span>
        (<span style="color: #228b22;">"o"</span> <span style="color: #228b22;">"pen"</span>
         org-open-file-with-emacs
         (<span style="color: #8b0000;">lambda</span> (x) (file-exists-p x)))
        (<span style="color: #228b22;">"e"</span> <span style="color: #228b22;">"xternal open"</span>
         (<span style="color: #8b0000;">lambda</span> (x) (org-open-file path '(16)))
         (<span style="color: #8b0000;">lambda</span> (x) (file-exists-p x)))))


(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">file+emacs-menu</span> (path)
  <span style="color: #228b22;">"menu command for file+emacs links"</span>
  (interactive)
  (<span style="color: #8b0000;">let*</span> ((filtered-menu-list (-filter
                              (<span style="color: #8b0000;">lambda</span> (x) (funcall (car (last x)) path))
                              file+emacs-menu))
         (menu-string (concat
                       (mapconcat
                        (<span style="color: #8b0000;">lambda</span> (tup)
                          (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
                                  (elt tup 1) <span style="color: #228b22;">" "</span>))
                        filtered-menu-list
                        <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
         (input (read-char-exclusive menu-string nil 1))
         (selected-func (and
                         input
                         (elt 
                          (assoc
                           (char-to-string input) filtered-menu-list)
                          2))))
    (<span style="color: #8b0000;">when</span> selected-func
      (funcall selected-func path))))
</pre>
</div>

<pre class="example">
file+emacs-menu
</pre>

<p>
Now we need to change the link definition in org-link-protocols. setf comes to the rescue. We just get the whole entry, and then setf the second position in it like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setf (elt (assoc <span style="color: #228b22;">"file+emacs"</span> org-link-protocols) 1)
  'file+emacs-menu)
</pre>
</div>

<pre class="example">
file+emacs-menu
</pre>

<p>
Here we just confirm we set it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(assoc <span style="color: #228b22;">"file+emacs"</span> org-link-protocols)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">file+emacs</td>
<td class="left">file+emacs-menu</td>
<td class="left">nil</td>
</tr>
</tbody>
</table>

<p>
Now, when we click on these links, we get our context specific menu. When 
</p>

<p>
This file exists: <a href="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/ase-db.org">ase-db.org</a> so we see this menu:
</p>

<div class="figure">
<p><img src="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/open-menu.png"> 
</p>
</div>

<p>
This file does not exist: <a href="test.noext">test.noext</a> 
So we see:
</p>

<div class="figure">
<p><img src="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/create-menu.png"> 
</p>
</div>

<p>
For these, we can select to open them in a pdf reader or MS Word from our new menu.
<a href="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/attaching-code-blocks-to-a-pdf.pdf">attaching-code-blocks-to-a-pdf.pdf</a> 
</p>

<p>
<a href="/media/2014-11-08-A-context-sensitive-file-link-menu-in-org-mode/org-to-word.docx">org-to-word.docx</a> 
</p>

<p>
I admit this example was a little contrived. You can do most of these things with prefix commands, or more specific commands in emacs. But, I rarely remember those. I would have preferred to use the file link in this example, but it is not defined in org-link-protocols, so this style of modification would not work, and I did not want to add it to org-link-protocols just to show how to change it this way. 
</p>

<p>
This general approach would be very useful for links where there may be multiple contexts or actions that make sense. For file links, you may want do different things if the file already exists, or if it does not exist. As another example, my <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org#a-new-doi-link-for-org-mode">doi link</a> gives me a menu to:
</p>
<ol class="org-ol">
<li>open in <a href="http://dx.doi.org">http://dx.doi.org</a> 
</li>
<li>open the doi in Web of Science
</li>
<li>find citing articles in Web of Science
</li>
<li>search the doi in Google Scholar
</li>
<li>open the doi in CrossRef
</li>
<li>open the doi in Pubmed
</li>
<li>find the doi in my bibtex file
</li>
<li>get a bibtex entry for the doi
</li>
</ol>

<p>
I get all that from a click! org-ref offers similar functionality for cite links, where you might want to do different things from a click:
</p>
<ol class="org-ol">
<li>See preview of the citation
</li>
<li>open the bibtex entry
</li>
<li>open the pdf if you have it
</li>
<li>open the url for the entry
</li>
<li>any of the things I listed for the doi example above.
</li>
</ol>

<p>
I am sure there are many other things that might be useful to do!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/08/A-context-sensitive-file-link-menu-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Accessing web of science entry, citing and related articles from a doi in emacs</title>
      <link>http://jkitchin.github.io/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</link>
      <pubDate>Tue, 04 Nov 2014 21:18:10 EST</pubDate>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[org-ref]]></category>
      <guid isPermaLink="false">4Q13snCzg0aAr06d3H0Sw7LWsd8=</guid>
      <description>Accessing web of science entry, citing and related articles from a doi in emacs</description>
      <content:encoded><![CDATA[



<p>
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with <a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&search_mode=GeneralSearch&SID=4DwqzHSXl8YdqGjGQ2z&preferencesSaved=">Web Of Science</a> , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API <a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf">http://wokinfo.com/media/pdf/OpenURL-guide.pdf</a> to make links to the things I am interested in here. Based on that document, here are three links based on a <a href="10.1021/jp047349j">10.1021/jp047349j</a> that take you to different Web Of Science (WOS) pages.
</p>


<ol class="org-ol">
<li>go to article in WOS: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info:doi/10.1021/jp047349j</a> 
</li>
<li>citing articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.citing=yes</a> 
</li>
<li>related articles: <a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes">http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&rft_id=info%3Adoi%2F10.1021/jp047349j&svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&svc.related=yes</a> 
</li>
</ol>

<p>
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos</span> (doi)
  <span style="color: #228b22;">"Open Web of Science entry for DOI"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (format
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/%s"</span> doi)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-citing</span> (doi)
  <span style="color: #228b22;">"Open Web of Science citing articles entry. May be empty if none are found"</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat
    <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
    doi
    <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"</span>)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">doi-utils-wos-related</span> (doi)
  <span style="color: #228b22;">"Open Web of Science related articles page."</span>
  (interactive <span style="color: #228b22;">"sDOI: "</span>)
  (browse-url
   (concat <span style="color: #228b22;">"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F"</span>
           doi
           <span style="color: #228b22;">"&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"</span>)))
</pre>
</div>

<pre class="example">
doi-utils-wos-related
</pre>

<p>
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things <a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/">here</a> about Scopus and issues with ISI that I note for reference to future me.
</p>

<p>
Some of these are now included in <a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el">jmax-bibtex.el</a> and <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">doi-utils.org</a> .
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>words - some interesting utilities for text in emacs</title>
      <link>http://jkitchin.github.io/blog/2014/11/03/words-some-interesting-utilities-for-text-in-emacs</link>
      <pubDate>Mon, 03 Nov 2014 11:31:45 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">zBeWt-UzQ9UsZMMHQc2CQsR8jKY=</guid>
      <description>words - some interesting utilities for text in emacs</description>
      <content:encoded><![CDATA[


<p>
Recently I <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions/">posted</a> about an org-link with a menu. Here I extend the idea to a command that will do approximately the same thing. The idea is a command called words that will be run interactively. It will grab the word at point, or operate on a selected region, and then offer a menu to lookup the definition, find it in a thesaurus, google it, etc&#x2026; We structure the code so you can add functions to it later, without directly modifying this code. The only limitation of this code is that the functions must have a signature with no arguments. That does not seem terribly limiting, as we can check for a region, and use it if we want (see the words-google function).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-dictionary</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://dictionary.reference.com/browse/%s?s=t"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-thesaurus</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.thesaurus.com/browse/%s"</span>
    (thing-at-point 'word))))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-google</span> ()
  (interactive)  
  (browse-url
   (format
    <span style="color: #228b22;">"http://www.google.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))


(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">words-funcs</span> '()
 <span style="color: #228b22;">"functions to run in `</span><span style="color: #cd0000;">words</span><span style="color: #228b22;">'. Each entry is a list of (key menu-name function)."</span>)

(setq words-funcs
  '((<span style="color: #228b22;">"d"</span> <span style="color: #228b22;">"ictionary"</span> words-dictionary)
    (<span style="color: #228b22;">"t"</span> <span style="color: #228b22;">"hesaurus"</span> words-thesaurus)
    (<span style="color: #228b22;">"g"</span> <span style="color: #228b22;">"oogle"</span> words-google)))
 

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words</span> ()
  (interactive)
   (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     words-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
   (<span style="color: #8b0000;">let</span> ((input (read-char-exclusive)))
     (funcall
      (elt 
       (assoc
        (char-to-string input) words-funcs)
       2))))
</pre>
</div>

<pre class="example">
words
</pre>

<p>
This works nicely. Now, let us add a new function that looks up the word or selection on twitter. We just define a new function, and add the menu selection to the words-func variable. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-twitter</span> ()
  (interactive)
  (browse-url
   (format
    <span style="color: #228b22;">"https://twitter.com/search?q=%s"</span>
    (<span style="color: #8b0000;">if</span> (region-active-p)
        (url-hexify-string (buffer-substring (region-beginning)
                                             (region-end)))
      (thing-at-point 'word)))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"w"</span> <span style="color: #228b22;">"twitter"</span> words-twitter)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">d</td>
<td class="left">ictionary</td>
<td class="left">words-dictionary</td>
</tr>

<tr>
<td class="left">t</td>
<td class="left">hesaurus</td>
<td class="left">words-thesaurus</td>
</tr>

<tr>
<td class="left">g</td>
<td class="left">oogle</td>
<td class="left">words-google</td>
</tr>

<tr>
<td class="left">w</td>
<td class="left">twitter</td>
<td class="left">words-twitter</td>
</tr>
</tbody>
</table>

<p>
Finally, the most complicated idea: spelling and grammar. I know there is flyspell, and such, but they are build on an ancient dictionary. Here, for fun, we explore a web api. This next function is not a trivial one, and I will not explain it here beyond saying it sends a selection of text to a url, gets an xml response back, and that response is parsed and printed to a buffer by this function. The main point is to illustrate we can do interesting things with a selection of text!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">words-atd</span> ()
  <span style="color: #228b22;">"Send paragraph at point to After the deadline for spell and grammar checking."</span>
  (interactive)
  
  (<span style="color: #8b0000;">let*</span> ((url-request-method <span style="color: #228b22;">"POST"</span>)
         (url-request-data (format
                            <span style="color: #228b22;">"key=some-random-text-&amp;data=%s"</span>
                            (url-hexify-string
                             (thing-at-point 'paragraph))))
         (xml  (<span style="color: #8b0000;">with-current-buffer</span>
                   (url-retrieve-synchronously
                    <span style="color: #228b22;">"http://service.afterthedeadline.com/checkDocument"</span>)
                 (xml-parse-region url-http-end-of-headers (point-max))))
         (results (car xml))
         (errors (xml-get-children results 'error)))
    
    (switch-to-buffer-other-frame <span style="color: #228b22;">"*ATD*"</span>)
    (erase-buffer)
    (<span style="color: #8b0000;">dolist</span> (err errors)
      (<span style="color: #8b0000;">let*</span> ((children (xml-node-children err))
             ;; <span style="color: #ff0000; font-weight: bold;">for some reason I could not get the string out, and had to do this.</span>
             (s (car (last (nth 1 children))))
             ;; <span style="color: #ff0000; font-weight: bold;">the last/car stuff doesn't seem right. there is probably</span>
             ;; <span style="color: #ff0000; font-weight: bold;">a more idiomatic way to get this</span>
             (desc (last (car (xml-get-children children 'description))))
             (type (last (car (xml-get-children children 'type))))
             (suggestions (xml-get-children children 'suggestions))
             (options (xml-get-children (xml-node-name suggestions) 'option))
             (opt-string  (mapconcat
                           (<span style="color: #8b0000;">lambda</span> (el)
                             (<span style="color: #8b0000;">when</span> (listp el)
                               (car (last el))))
                           options
                           <span style="color: #228b22;">" "</span>)))

        (insert (format <span style="color: #228b22;">"** %s ** %s</span>
<span style="color: #228b22;">Description: %s</span>
<span style="color: #228b22;">Suggestions: %s</span>

<span style="color: #228b22;">"</span> s type desc opt-string))))))

(add-to-list 'words-funcs
  '(<span style="color: #228b22;">"s"</span> <span style="color: #228b22;">"spell/grammar"</span> words-atd)
  t) ; <span style="color: #ff0000; font-weight: bold;">append</span>
</pre>
</div>

<pre class="example">
words-atd
</pre>

<p>
My final words menu looks like: 
</p>

<div class="figure">
<p><img src="/media/2014-11-03-words---some-interesting-utilities-for-text-in-emacs/final-menu.png"> 
</p>
</div>

<p>
If I have the cursor in the previous paragraph, run the words command and select "s" I get a buffer with these contents:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> flyspell ** (spelling)</h2>
<div class="outline-text-2" id="text-1">
<p>
Description: (Spelling)
Suggestions: flywheel flyball
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> are build on ** (grammar)</h2>
<div class="outline-text-2" id="text-2">
<p>
Description: (Auxiliary Verb Agreement)
Suggestions: are built on
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> api ** (spelling)</h2>
<div class="outline-text-2" id="text-3">
<p>
Description: (Spelling)
Suggestions: app ape apt ai ami
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> url ** (spelling)</h2>
<div class="outline-text-2" id="text-4">
<p>
Description: (Spelling)
Suggestions: urn ure curl hurl burl
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> xml ** (spelling)</h2>
<div class="outline-text-2" id="text-5">
<p>
Description: (Spelling)
Suggestions: xl ml
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-6">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> an xml ** (grammar)</h2>
<div class="outline-text-2" id="text-7">
<p>
Description: (Wrong article)
Suggestions: a xml
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-8">
<p>
Description: (Hidden Verbs)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> is parsed ** (grammar)</h2>
<div class="outline-text-2" id="text-9">
<p>
Description: (Passive voice)
Suggestions: 
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> selection ** (suggestion)</h2>
<div class="outline-text-2" id="text-10">
<p>
Description: (Complex Expression)
Suggestions: choice
</p>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11"><span class="section-number-2">11</span> a selection of ** (grammar)</h2>
<div class="outline-text-2" id="text-11">
<p>
Description: (Hidden Verbs)
Suggestions: 
#+END<sub>EXAMPLE</sub>
</p>

<p>
It might be nice to link back to those words, so you could click on them and fix them, but that is a beyond today's goal. In summary, today we looked at a framework to create a user-modifiable menu of commands that are launched from a single command. Here we called the command words, and then built up some different things we might want to do with the word or selection at point. While you can of course just remember the individual commands, remembering one command and then being prompted might have some advantages.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/03/words---some-interesting-utilities-for-text-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>A generalized org-link with an extendable menu of actions</title>
      <link>http://jkitchin.github.io/blog/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions</link>
      <pubDate>Sun, 02 Nov 2014 19:33:14 EST</pubDate>
      <category><![CDATA[org]]></category>
      <guid isPermaLink="false">Cf0O5RZ6zgyMNAxFnpLeAp2Dm7Q=</guid>
      <description>A generalized org-link with an extendable menu of actions</description>
      <content:encoded><![CDATA[


<p>
In org-ref the cite links are actually a menu of options. Here I want to explore generalizing the concept, and enable users to add new menu items. When you click on a cite link, it calls a function that constructs the menu as a string. Then, we read something from the minibuffer to say what should be done. We could store these things in variables, so that a user could add their own things. We need a list of characters, menu strings, and functions to run when to create the menu. Here we put together a little example code that shows the idea.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-a</span> (link)
  (message <span style="color: #228b22;">"You picked option A for %s"</span> link))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-b</span> (link)
  (message <span style="color: #228b22;">"You picked option B for %s"</span> link))

(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">menu-funcs</span>
 '((<span style="color: #228b22;">"a"</span> <span style="color: #228b22;">"Option 1"</span> option-a)
   (<span style="color: #228b22;">"b"</span> <span style="color: #228b22;">"Option 2"</span> option-b)))

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">menu-click</span> (path)
  (message
   (concat
    (mapconcat
     (<span style="color: #8b0000;">lambda</span> (tup)
       (concat <span style="color: #228b22;">"["</span> (elt tup 0) <span style="color: #228b22;">"]"</span>
               (elt tup 1) <span style="color: #228b22;">" "</span>))
     menu-funcs <span style="color: #228b22;">""</span>) <span style="color: #228b22;">": "</span>))
  (setq input (read-char-exclusive))
  (funcall
   (elt 
    (assoc
     (char-to-string input) menu-funcs)
    2)
   path))

(org-add-link-type
 <span style="color: #228b22;">"menu"</span>
 'menu-click)
</pre>
</div>

<p>
<a href="element">element</a>  Clicking on that link in Emacs gives me the desired menu!
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu.png"> 
</p>
</div>

<p>
and 
</p>


<div class="figure">
<p><img src="/media/2014-11-02-A-generalized-org-link-with-an-extendable-menu-of-actions/menu-response.png"> 
</p>
</div>

<p>
Now, we test adding a new function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-c</span> (link)
  (message <span style="color: #228b22;">"You picked option C for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"c"</span> <span style="color: #228b22;">"Option C"</span> option-c))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>
</tbody>
</table>

<p>
Well, that worked fine! You might want to append to the list instead of put it at the beginning, but that is really your choice.  
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">option-4</span> (link)
  (message <span style="color: #228b22;">"You picked option 4 for %s"</span> link))

(add-to-list 'menu-funcs
 '(<span style="color: #228b22;">"4"</span> <span style="color: #228b22;">"Option 4"</span> option-4) t)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">c</td>
<td class="left">Option C</td>
<td class="left">option-c</td>
</tr>

<tr>
<td class="left">a</td>
<td class="left">Option 1</td>
<td class="left">option-a</td>
</tr>

<tr>
<td class="left">b</td>
<td class="left">Option 2</td>
<td class="left">option-b</td>
</tr>

<tr>
<td class="left">4</td>
<td class="left">Option 4</td>
<td class="left">option-4</td>
</tr>
</tbody>
</table>

<p>
I think this example more or less shows the basic idea here. These external functions may do a variety of things, like look up something on google, or some other web service, search for something on your hard drive, etc&#x2026; For example in org-ref, clicking on a cite link gives you options to open the bibtex file, a pdf, a url or notes. This would allow you to open other things too, if you felt like it. For better or worse, you can modify the behavior of the link after it is defined.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/02/A-generalized-org-link-with-an-extendable-menu-of-actions.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Annotating matplotlib figures</title>
      <link>http://jkitchin.github.io/blog/2014/11/01/Annotating-matplotlib-figures</link>
      <pubDate>Sat, 01 Nov 2014 10:35:15 EDT</pubDate>
      <category><![CDATA[python matplotlib]]></category>
      <guid isPermaLink="false">AcY0at1sX0APriSojYzVLBLbBHY=</guid>
      <description>Annotating matplotlib figures</description>
      <content:encoded><![CDATA[




<p>
There is a nice picture of an ethanolamine molecule <a href="http://en.wikipedia.org/wiki/Ethanolamine">here</a> . The first thing we consider is embedding this figure in a matplotlib figure. It is a little tricky because we have to create a special axes to put the image in. The axes are created in a fractional coordinate systems that is defined by [left, bottom, width, height]. Placing the figure where you want it is an iterative process that involves changing those values to get the image where you want.
</p>

<p>
So, note that (0, 0) is the bottome left corner of the figure, and (1, 1) is the upper right corner. So, to make an axes for the main figure that takes up 75% of the width and 80% of the height, and starts 20% from the left, 15% from the bottom, we use [0.2, 0.15, 0.75, 0.8]. That covers most of the space, and leaves room for labels.
</p>

<p>
The axes for the image is about the same, but it is a little trickier to figure out the width and height. In this example these arguments appear to just rescale the image.
</p>

<p>
Here is some code that puts the image near the upper left-corner of the plot.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">from</span> scipy.misc <span style="color: #8b0000;">import</span> imread
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">im</span> = imread(<span style="color: #228b22;">'images/Ethanolamine-2D-skeletal-B.png'</span>)

<span style="color: #000000; background-color: #cccccc; font-weight: bold;">fig</span> = plt.figure(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">figsize</span>=(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>))
#                    <span style="color: #ff0000; font-weight: bold;">left bottom width height</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">f_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">15</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">75</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>)

# <span style="color: #ff0000; font-weight: bold;">plot some function</span>
f_ax.plot(np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>), <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span> * np.arange(<span style="color: #000000; background-color: #cccccc; font-weight: bold;">10</span>))
plt.xlabel(<span style="color: #228b22;">'some xlabel'</span>)
plt.ylabel(<span style="color: #228b22;">'Y'</span>)

# <span style="color: #ff0000; font-weight: bold;">axes for the image</span>
<span style="color: #000000; background-color: #cccccc; font-weight: bold;">i_ax</span> = fig.add_axes([<span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">22</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">8</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">0</span>.<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">frameon</span>=<span style="color: #8b0000;">False</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">xticks</span>=[], <span style="color: #000000; background-color: #cccccc; font-weight: bold;">yticks</span>=[],
                    <span style="color: #000000; background-color: #cccccc; font-weight: bold;">zorder</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>)

# <span style="color: #ff0000; font-weight: bold;">add the image. zorder&gt;1 makes sure it is on top</span>
i_ax.imshow(im)

# <span style="color: #ff0000; font-weight: bold;">print dir(i_ax)</span>

plt.savefig(<span style="color: #228b22;">'images/fig-in-plot-2.png'</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">dpi</span>=<span style="color: #000000; background-color: #cccccc; font-weight: bold;">300</span>)
</pre>
</div>

<div class="figure">
<p><img src="/media/2014-11-01-Annotating-matplotlib-figures/fig-in-plot-2.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A matplotlib figure with an embedded images.</p>
</div>


<p>
There it is.</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/11/01/Annotating-matplotlib-figures.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Generating your bibliography in another file</title>
      <link>http://jkitchin.github.io/blog/2014/10/30/Generating-your-bibliography-in-another-file</link>
      <pubDate>Thu, 30 Oct 2014 19:42:35 EDT</pubDate>
      <category><![CDATA[bibtex]]></category>
      <guid isPermaLink="false">oztog6TAGyeAKMDvrygUnGjA-7k=</guid>
      <description>Generating your bibliography in another file</description>
      <content:encoded><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Getting the references in another file</a></li>
</ul>
</div>
</div>

<p>
It has been proposal season. This particular round of proposals had a requirement to print the references in a separate file from the proposal. Usually I just build a pdf from org-mode, and then manually separate the references. That is not very fun if you have to do it several times. Here we examine a way to avoid this issue by using a new nobibliography link from org-ref with the bibentry LaTeX package.
</p>

<p>
We wrote this paper <a href="#mehta-2014-ident-poten">mehta-2014-ident-poten</a> and this one <a href="#xu-2014-relat">xu-2014-relat</a>.
</p>

<p>

<h1>Bibliography</h1>
<ul><li><a id="mehta-2014-ident-poten">[mehta-2014-ident-poten] Prateek Mehta, Paul Salvador, John \& Kitchin, Identifying Potential \ce{BO2} Oxide Polymorphs for  Epitaxial Growth Candidates, <i>ACS Appl. Mater. Interfaces</i>, <b>6(5)</b>, 3630-3639 (2014). <a href="http://dx.doi.org/10.1021/am4059149">link</a>. <a href="http://dx.doi.org/10.1021/am4059149">doi</a>.</a></li>
<li><a id="xu-2014-relat">[xu-2014-relat] Zhongnan Xu \& John Kitchin, Relating the Electronic Structure and Reactivity of  the 3d Transition Metal Monoxide Surfaces, <i>Catalysis Communications</i>, <b>52()</b>, 60-64 (2014). <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">link</a>. <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">doi</a>.</a></li>
</ul>
</p>

<p>
Here is the resulting pdf, with no references: <a href="separate-bib.pdf">separate-bib.pdf</a>.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Getting the references in another file</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, we need to get the reference file. We create a new file, in org-mode, mostly for the convenience of exporting that to a pdf. Here is the code that does that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((base (file-name-sans-extension
              (file-name-nondirectory (buffer-file-name))))
       (bbl (concat base <span style="color: #228b22;">".bbl"</span>))
       (orgfile (concat base <span style="color: #228b22;">"-references.org"</span>))
       (pdffile (concat base <span style="color: #228b22;">"-references.pdf"</span>)))
  (<span style="color: #8b0000;">with-temp-file</span> orgfile
    (insert 
     (format <span style="color: #228b22;">"#+LATEX_CLASS: cmu-article</span>
<span style="color: #228b22;">#+OPTIONS: toc:nil</span>

<span style="color: #228b22;">#+BEGIN_LaTeX</span>
<span style="color: #228b22;">\\input{%s}</span>
<span style="color: #228b22;">#+END_LaTeX</span>
<span style="color: #228b22;">"</span> bbl)))

  (find-file orgfile)
  (org-latex-export-to-pdf)
  (org-open-file pdffile))
</pre>
</div>

<p>
And, here is the reference file: <a href="/media/2014-10-30-Generating-your-bibliography-in-another-file/separate-bib.pdf">separate-bib.pdf</a> 
</p>

<p>
I think this would be integrated into a noexport build section of a document that would generate the pdf and references. 
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/30/Generating-your-bibliography-in-another-file.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>New publication in J. Physical Chemistry C</title>
      <link>http://jkitchin.github.io/blog/2014/10/21/New-publication-in-J-Physical-Chemistry-C</link>
      <pubDate>Tue, 21 Oct 2014 08:30:27 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publ]]></category>
      <guid isPermaLink="false">rUumQGEHsoYSkADSmrZnhW_FdHo=</guid>
      <description>New publication in J. Physical Chemistry C</description>
      <content:encoded><![CDATA[


<p>
"Probing the Coverage Dependence of Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals"
</p>

<p>
Zhongnan Xu and John R. Kitchin
J. Phys. Chem. C, Just Accepted Manuscript
DOI: <a href="10.1021/jp508805h">10.1021/jp508805h</a>
Publication Date (Web): October 14, 2014
Copyright © 2014 American Chemical Society
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #8b2323;">@article</span>{<span style="color: #cd0000;">xu-2014-probin-cover</span>,
  <span style="color: #8b008b;">author</span> =       {Zhongnan Xu and John R. Kitchin},
  <span style="color: #8b008b;">title</span> =        {Probing the Coverage Dependence of Site and
                  Adsorbate Configurational Correlations on (111)
                  Surfaces of Late Transition Metals},
  <span style="color: #8b008b;">journal</span> =      {J. Phys. Chem. C},
  <span style="color: #8b008b;">volume</span> =       {nil},
  <span style="color: #8b008b;">number</span> =       {nil},
  <span style="color: #8b008b;">pages</span> =        141014152600009,
  <span style="color: #8b008b;">year</span> =         2014,
  <span style="color: #8b008b;">doi</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">10.1021/jp508805h</span>},
  <span style="color: #8b008b;">url</span> =          {<span style="color: #3a5fcd; text-decoration: underline;">http://dx.doi.org/10.1021/jp508805h</span>},
}
</pre>
</div>

<p>
<a href="http://dx.doi.org/10.1021/jp508805h">http://dx.doi.org/10.1021/jp508805h</a> 
</p>

<p>
Congratulations Zhongnan!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/21/New-publication-in-J.-Physical-Chemistry-C.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Using Pymacs to integrate Python into Emacs</title>
      <link>http://jkitchin.github.io/blog/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs</link>
      <pubDate>Sun, 19 Oct 2014 09:33:08 EDT</pubDate>
      <category><![CDATA[python]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">A5OvYHGpZAZwz5h8XmQIZWiVqqU=</guid>
      <description>Using Pymacs to integrate Python into Emacs</description>
      <content:encoded><![CDATA[


<p>
<a href="https://github.com/pinard/Pymacs">Pymacs</a> is a project that aims to integrate Python into Emacs, and vice versa. In this post, I am going to examine the Python into Emacs integration. I cloned the git repository, ran make install, and setup my init.el file like this, as suggested in the manual.
</p>

<pre class="example">
(add-to-list 'load-path (expand-file-name "Pymacs" starter-kit-dir))
(require 'pymacs)
(autoload 'pymacs-apply "pymacs")
(autoload 'pymacs-call "pymacs")
(autoload 'pymacs-eval "pymacs" nil t)
(autoload 'pymacs-exec "pymacs" nil t)
(autoload 'pymacs-load "pymacs" nil t)
(autoload 'pymacs-autoload "pymacs")
</pre>

<p>
Pymacs provides some mapping of Python modules to emacs-lisp functions. You load modules in emacs-lisp, and then a dash-mangled version of the Python functions are available, <i>in emacs lisp</i>. Here is an example. We will load numpy, and find the maximum element of an array. For comparison, here is the Python script.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">print</span> np.max(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Now, the corresponding emacs version using Pymacs.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(np-max (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Neat! The dot notation is basically replaced with dash notation, and we use a lisp list as the argument instead of an array. Otherwise, this looks almost identical. Now, let us consider something more complicated, and get the determinant of the array. We add a PREFIX to the load statement for numpy.linalg similar to what we would do in Python:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> numpy.linalg <span style="color: #8b0000;">as</span> la
<span style="color: #8b0000;">print</span> la.det(np.array([[<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>], [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">4</span>]]))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
And in emacs-lisp:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"numpy"</span> <span style="color: #228b22;">"np-"</span>)
(pymacs-load <span style="color: #228b22;">"numpy.linalg"</span> <span style="color: #228b22;">"la-"</span>)
(la-det (np-array '((1 1) (2 4))))
</pre>
</div>

<pre class="example">
2.0
</pre>

<p>
We can call functions from matplotlib to make a figure. For example:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"matplotlib.pyplot"</span> <span style="color: #228b22;">"plt-"</span>)
(<span style="color: #8b0000;">let*</span> ((x  '(1 2 3 4))
       (y  (mapcar (<span style="color: #8b0000;">lambda</span> (z) (* z z)) x)))
  (plt-plot x y)
  (plt-xlabel <span style="color: #228b22;">"x values"</span>)
  (plt-ylabel <span style="color: #228b22;">"x$^2$"</span>)
  (plt-savefig <span style="color: #228b22;">"plt-pymacs.png"</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-10-19-Using-Pymacs-to-integrate-Python-into-Emacs/plt-pymacs.png"> 
</p>
</div>

<p>
This was a little subtle. It was necessary to save the lists as variables, and use the variables in the plot command.
</p>

<p>
I am not sure what this offers over just having a Python block present in org-mode though. Maybe it is more useful in emacs-lisp libraries where you want to bring in some numerical analysis. Or if you have some custom library of Python you would like to use in elisp. Here is a highly contrived example. Suppose we have a Python module with this special function that converts an argument to "J":
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">special_func</span>(x):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">"J"</span>
</pre>
</div>

<p>
In Python, we might use it like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> my_python <span style="color: #8b0000;">as</span> mp
<span style="color: #8b0000;">print</span> [mp.special_func(x) <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> [<span style="color: #000000; background-color: #cccccc; font-weight: bold;">1</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">2</span>, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>]]
</pre>
</div>

<pre class="example">
['J', 'J', 'J']
</pre>

<p>
We can import the module, and use the function in emacs-lisp too. The underscore in the function name is turned into a dash, which is a little confusing, but it works otherwise.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"my_python"</span> <span style="color: #228b22;">"mp-"</span>)
(mapcar 'mp-special-func '(1 2 3))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">J</td>
<td class="left">J</td>
<td class="left">J</td>
</tr>
</tbody>
</table>


<p>
It does not seem possible to do everything though. For example, It is not clear how to pass functions through either side. For example, this does not work for fsolve, although it seems like it should. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(pymacs-load <span style="color: #228b22;">"scipy.optimize"</span> <span style="color: #228b22;">"so-"</span>)

(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">objective</span> (x)
  (- x 5))

(so-fsolve 'objective 3)
</pre>
</div>

<p>
I get an error like this:
</p>
<pre class="example">
Pymacs loading scipy.optimize...done
pymacs-report-error: Python: Emacs: "(wrong-type-argument number-or-marker-p (pymacs-python . 47))"
</pre>

<p>
The Python equivalent is here:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fsolve
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(x):
    <span style="color: #8b0000;">return</span> x - <span style="color: #000000; background-color: #cccccc; font-weight: bold;">5</span>

<span style="color: #8b0000;">print</span> fsolve(objective, <span style="color: #000000; background-color: #cccccc; font-weight: bold;">3</span>)
</pre>
</div>

<pre class="example">
[ 5.]
</pre>

<p>
There is an open question on StackOverflow <a href="http://stackoverflow.com/questions/25471580/can-you-use-a-function-as-an-argument-to-a-python-function-in-pymacs">here</a> on this issue. Overall, I find the project very interesting. It would be awesome if you could extend emacs more easily in other languages, especially scripting languages such as Python that have numerical and plotting capabilities. Right now, this is possible in limited ways. For example, Xah Lee describes an <a href="http://ergoemacs.org/emacs/elisp_perl_wrapper.html">approach</a> where an arbitrary script can take data on stdin, process it, and output the results to stdout. Emacs can capture this and use it to modify the buffer. This uses the <code>shell-command</code> features in Emacs. These scripts could be written in Python, Perl, Ruby, etc&#x2026; This seems like a simpler and more flexible approach, except that it requires creating the shell commands and putting them on the executable path (as opposed to having Python modules on a PYTHONPATH). These lack the deep integration of documentation you get with emacs-lisp and Python functions.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/19/Using-Pymacs-to-integrate-Python-into-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
    <item>
      <title>Generate emacs-lisp documentation</title>
      <link>http://jkitchin.github.io/blog/2014/10/17/Generate-emacs-lisp-documentation</link>
      <pubDate>Fri, 17 Oct 2014 14:39:49 EDT</pubDate>
      <category><![CDATA[emacs_lisp]]></category>
      <guid isPermaLink="false">h7qO-ywtQxNM2s9adKVNLlz1jb0=</guid>
      <description>Generate emacs-lisp documentation</description>
      <content:encoded><![CDATA[



<p>
Emacs has some pretty amazing features to get help on a function (describe-function), to navigate quickly to functions in an elisp file (speedbar and imenu). Other languages have tools for generating documentation for all the functions in a file, e.g. epydoc, javadoc, Doxygen,&#x2026; I have not found an equivalent to this in emacs-lisp. Here, we explore some options to get something similar to this. Our goal will be to take an emacs-lisp file, and generate an org-file of documentation, and then convert that to PDF for reading.
</p>

<p>
Say we have a function, jmax-bibtex-next-entry, and we want some information about it. Here are three functions that give us the argument list, documentation string, and function definition.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(help-function-arglist 'jmax-bibtex-next-entry)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">&amp;optional</td>
<td class="left">n</td>
</tr>
</tbody>
</table>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(documentation 'jmax-bibtex-next-entry)
</pre>
</div>

<pre class="example">
Jump to the beginning of the next bibtex entry. N is a prefix
argument. If it is numeric, jump that many entries
forward. Negative numbers do nothing.
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(symbol-function 'jmax-bibtex-next-entry)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">(&amp;optional n)</td>
<td class="left">Jump to the beginning of the next bibtex entry. N is a prefix\nargument. If it is numeric, jump that many entries\nforward. Negative numbers do nothing.</td>
<td class="left">(interactive P)</td>
<td class="left">(if (= (point) (save-excursion (bibtex-beginning-of-entry))) (progn (forward-char) (bibtex-next-entry)))</td>
<td class="left">(if (re-search-forward bibtex-entry-head nil t (and (numberp n) n)) (progn (bibtex-beginning-of-entry)))</td>
</tr>
</tbody>
</table>

<p>
That will not always be the code we wrote, but it is functionally similar.
</p>

<p>
So we could create an org-entry like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">fun2org</span> (function-symbol)
  (<span style="color: #8b0000;">let</span> ((args (help-function-arglist function-symbol))
        (doc  (documentation function-symbol))
        (code (symbol-function function-symbol)))
    (format <span style="color: #228b22;">"** %s %s</span>
<span style="color: #228b22;">%s</span>

<span style="color: #228b22;">#+BEGIN_SRC emacs-lisp</span>
<span style="color: #228b22;">%S</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span> function-symbol args doc code)))

(fun2org 'jmax-bibtex-next-entry)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-org"><span style="color: #8b008b;">** jmax-bibtex-next-entry (&amp;optional n)</span>
Jump to the beginning of the next bibtex entry. N is a prefix
argument. If it is numeric, jump that many entries
forward. Negative numbers do nothing.

<span style="color: #ff0000; font-weight: bold;">#+BEGIN_SRC emacs-lisp</span>
<span style="background-color: #b0c4de;">(</span><span style="color: #8b0000; background-color: #b0c4de;">lambda</span><span style="background-color: #b0c4de;"> (</span><span style="color: #4682b4; background-color: #b0c4de;">&amp;optional</span><span style="background-color: #b0c4de;"> n) </span><span style="color: #228b22; background-color: #b0c4de;">"Jump to the beginning of the next bibtex entry. N is a prefix</span><span style="background-color: #b0c4de;">
</span><span style="color: #228b22; background-color: #b0c4de;">argument. If it is numeric, jump that many entries</span><span style="background-color: #b0c4de;">
</span><span style="color: #228b22; background-color: #b0c4de;">forward. Negative numbers do nothing."</span><span style="background-color: #b0c4de;"> (interactive </span><span style="color: #228b22; background-color: #b0c4de;">"P"</span><span style="background-color: #b0c4de;">) (</span><span style="color: #8b0000; background-color: #b0c4de;">if</span><span style="background-color: #b0c4de;"> (= (point) (</span><span style="color: #8b0000; background-color: #b0c4de;">save-excursion</span><span style="background-color: #b0c4de;"> (bibtex-beginning-of-entry))) (</span><span style="color: #8b0000; background-color: #b0c4de;">progn</span><span style="background-color: #b0c4de;"> (forward-char) (bibtex-next-entry))) (</span><span style="color: #8b0000; background-color: #b0c4de;">if</span><span style="background-color: #b0c4de;"> (re-search-forward bibtex-entry-head nil t (and (numberp n) n)) (</span><span style="color: #8b0000; background-color: #b0c4de;">progn</span><span style="background-color: #b0c4de;"> (bibtex-beginning-of-entry))))
</span><span style="color: #ff0000; font-weight: bold;">#+END_SRC</span>
</pre>
</div>

<p>
The code is not that beautifully indented, but it is optional. 
</p>

<p>
For variables, there are similar functions to get their documentation:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(documentation-property 'jmax-bibtex-journal-abbreviations 'variable-documentation)
</pre>
</div>

<pre class="example">
List of (string journal-full-name journal-abbreviation). Find abbreviations at http://cassi.cas.org/search.jsp.
</pre>

<p>
The problem still is, you have to know the variable and function names in advance. I want to take a file, and generate this for each function, and variable. 
</p>

<p>
I posted a question on <a href="http://stackoverflow.com/questions/26330363/how-do-i-get-a-list-of-functions-defined-in-an-emacs-lisp-file/26360946?iemail=1&noredirect=1#26360946">StackOverflow</a> on how to get the functions defined in a file. The most feasible suggestion was to use the variable load-history, which contains a history of the variables and functions loaded, and the files they are in.
</p>

<p>
Here is an example of getting the entries associated with jmax-bibtex.el
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(cdr (assoc <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span> load-history ))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(jmax-bibtex-journal-abbreviations
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-generate-longtitles)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-generate-shorttitles)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-stringify-journal-name)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-set-journal-string)
 jmax-nonascii-latex-replacements
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-replace-nonascii)
 jmax-lower-case-words
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-title-case-article)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-sentence-case-article)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-next-entry)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-previous-entry)
 (<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">.</span> jmax-bibtex-mode-keys)
 (<span style="color: #8b0000;">provide</span> <span style="color: #cd0000;">.</span> jmax-bibtex))
</pre>
</div>

<p>
Each element in this case is either a variable, defun or provide. Here, we can use this to print some information about the variables defined in this file. I think it is sufficient to check if the element in the list is a symbol, because all the other elements are cons elements. I suppose there are other possibilities, including defcustom, defgroup, defalias, defsubst, and maybe others.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">dolist</span> (element (cdr
                  (assoc
                   <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>
                   load-history )))
  (<span style="color: #8b0000;">when</span> (symbolp element)
    (princ 
    (format <span style="color: #228b22;">"%s</span>
<span style="color: #228b22;">Documentation: %s</span>

<span style="color: #228b22;">"</span> element (documentation-property element 'variable-documentation)))))
</pre>
</div>

<pre class="example">
jmax-bibtex-journal-abbreviations
Documentation: List of (string journal-full-name journal-abbreviation). Find abbreviations at http://cassi.cas.org/search.jsp.

jmax-nonascii-latex-replacements
Documentation: Cons list of non-ascii characters and their LaTeX representations

jmax-lower-case-words
Documentation: List of words to keep lowercase
</pre>

<p>
We can handle functions by checking if an element is a cons cell with a first element of defun.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">dolist</span> (element (cdr
                  (assoc
                   <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>
                   load-history )))
  (<span style="color: #8b0000;">when</span> (and (consp element)
             (eq (car element) 'defun))
    (princ (format <span style="color: #228b22;">"%s is a function\n"</span> (cdr element))))))
</pre>
</div>

<pre class="example">
jmax-bibtex-generate-longtitles is a function
jmax-bibtex-generate-shorttitles is a function
jmax-stringify-journal-name is a function
jmax-set-journal-string is a function
jmax-replace-nonascii is a function
jmax-title-case-article is a function
jmax-sentence-case-article is a function
jmax-bibtex-next-entry is a function
jmax-bibtex-previous-entry is a function
jmax-bibtex-mode-keys is a function
</pre>


<p>
So, we have the important pieces to mash up what I am looking for. Let us refine the goal. I want to create a PDF documentation of what is in an elisp file with a section on variables, and a section on functions. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let*</span> ((elements (cdr
                  (assoc
                   <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>
                   load-history)))
       (vars (-filter 'symbolp elements))
       (funcons (-filter (<span style="color: #8b0000;">lambda</span> (x)
                           (and (consp x)
                                (eq 'defun (car x))))
                         elements))
       (funcs (mapcar 'cdr funcons)))
  (switch-to-buffer <span style="color: #228b22;">"*org-doc*"</span>)
  (erase-buffer)
  (insert (format <span style="color: #228b22;">"#+TITLE: Documentation for %s</span>
<span style="color: #228b22;">#+OPTIONS: toc:nil</span>
<span style="color: #228b22;">\\maketitle</span>
<span style="color: #228b22;">\\tableofcontents</span>
<span style="color: #228b22;">"</span> <span style="color: #228b22;">"/Users/jkitchin/Dropbox/kitchingroup/jmax/jmax-bibtex.el"</span>))
  (insert <span style="color: #228b22;">"* Variables\n"</span>)
  (<span style="color: #8b0000;">dolist</span> (var (sort vars 'string-lessp))
    (insert (format <span style="color: #228b22;">"** %s</span>
<span style="color: #228b22;">Documentation: %s\n\n"</span> var  (documentation-property var 'variable-documentation))))

  (insert <span style="color: #228b22;">"* Functions\n\n"</span>)
  (<span style="color: #8b0000;">dolist</span> (funcs (sort funcs 'string-lessp))
    (insert (format <span style="color: #228b22;">"** %s %s</span>
<span style="color: #228b22;">Documentation: %s</span>

<span style="color: #228b22;">Code:</span>
<span style="color: #228b22;">#+BEGIN_SRC emacs-lisp</span>
<span style="color: #228b22;">%S</span>
<span style="color: #228b22;">#+END_SRC</span>
<span style="color: #228b22;">"</span>
                    funcs
                    (or (help-function-arglist funcs) <span style="color: #228b22;">""</span>)
                    (documentation funcs)
                    (symbol-function funcs))))

  (org-mode)
  (write-file <span style="color: #228b22;">"jmax-bibtex-doc.org"</span>)
  (org-export-to-file 'latex <span style="color: #228b22;">"jmax-bibtex-doc.tex"</span>)
  (org-latex-compile <span style="color: #228b22;">"jmax-bibtex-doc.tex"</span>)
  (kill-buffer <span style="color: #228b22;">"*org-doc*"</span>)
  (kill-buffer <span style="color: #228b22;">"jmax-bibtex-doc.org"</span>))
</pre>
</div>

<p>
Here is the resulting pdf: <a href="/media/2014-10-17-Generate-emacs-lisp-documentation/jmax-bibtex-doc.pdf">jmax-bibtex-doc.pdf</a> . It is not too bad. The code is not beautiful, and it would take some work to get that looking nice. It might be nice to find all instances of '` and replace them with links to variable names, but I leave that for another day. There is also no information about the header comments, but I leave this for another day to.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/10/17/Generate-emacs-lisp-documentation.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content:encoded>
    </item>
  </channel>
</rss>
