<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-03-14T17:51:53Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A helm-mu4e contact selector]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/03/14/A-helm-mu4e-contact-selector" />
    <id>http://jkitchin.github.io/blog/2015/03/14/A-helm-mu4e-contact-selector</id>
    <updated>2015-03-14T10:21:09Z</updated>
    <published>2015-03-14T10:21:09Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="helm" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="email" />
    <summary type="html"><![CDATA[A helm-mu4e contact selector]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/03/14/A-helm-mu4e-contact-selector"><![CDATA[


<p>
I have been using <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html">mu4e</a> in Emacs for email for about three months now. It is pretty good, and I hardly ever use the gmail web interface any more. The email completion in mu4e is ok, but I am frequently surprised at what it does not find, and totally spoiled by how good Gmail is at this. The built in completion seems to get lost if you don't start the search with the first few letters. Not always, but too often for me. I don't always remember the first letters, and want to search by name, or company. I would love to search by tags in org-contacts. This should be simple in helm, where you can build up candidates with different bits of information. Here I explore a helm interface, which I think might be better than the built in mu4e support, and even be better than gmail.
</p>

<p>
In my dream email completer, I want some easy way to define my own groups, I want to use org-contacts (and its tags), and I want every email address in the mails I have in my archive as completion candidates.  helm supports multiple sources, so I initially tried a separate source for each of these. Preliminary efforts suggested it is not possible to mark multiple selections from different sources and pass them all to one function. So, we combine all email candidates into one list of (searchable-string . email-address) cons cells. To get an idea of how many contacts we are looking at:
</p>

<p>
Here is what I have in my org-contacts file:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(length (org-contacts-db))
</pre>
</div>

<pre class="example">
173
</pre>

<p>
And here is what mu4e knows about. Interestingly, it takes a while for this variable to get populated because the request is asynchronous. After the first time though it sticks around. I think just opening mu4e will populate this variable.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(length mu4e~contacts-for-completion)
</pre>
</div>

<pre class="example">
12717
</pre>

<p>
So, I have close to 13,000 potential email addresses to choose from. For my email groups, I will just use a list of cons cells like (group-name . "comma-separated emails"). Then, I will loop through the org-contacts-db and the mu4e completion list to make the helm candidates. Finally, we add some functions to open our org-contact, and to tag org-contacts so it is easier to make groups.
</p>

<p>
Here is the code I have been using.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">here we set aliases for groups.</span>
(setq email-groups
      '((<span style="color: #008000;">"ms"</span> . <span style="color: #008000;">"email1, email2"</span>)
        (<span style="color: #008000;">"phd"</span> . <span style="color: #008000;">"email3, email4"</span>)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-contacts-open-from-email</span> (email)
  <span style="color: #036A07;">"Open org-contact with matching EMAIL. If no match, create new</span>
<span style="color: #036A07;">entry with prompts for first and last name."</span>
  (<span style="color: #0000FF;">let</span> ((contact (<span style="color: #0000FF;">catch</span> '<span style="color: #D0372D;">contact</span>
                   (loop for contact in  (org-contacts-db)
                         do
                         (<span style="color: #0000FF;">when</span> (string= email (cdr (assoc <span style="color: #008000;">"EMAIL"</span> (elt contact 2))))
                           (<span style="color: #0000FF;">throw</span> '<span style="color: #D0372D;">contact</span> contact))))))

    (<span style="color: #0000FF;">unless</span> contact
                (set-buffer (find-file-noselect (ido-completing-read
                                                 <span style="color: #008000;">"Select org-contact file: "</span>
                                                 org-contacts-files)))
                (goto-char (point-max))
                (insert (format  <span style="color: #008000;">"\n* %s %s\n"</span>
                                 (read-input <span style="color: #008000;">"First name: "</span>)
                                 (read-input <span style="color: #008000;">"Last name: "</span>)))
                (org-entry-put (point) <span style="color: #008000;">"EMAIL"</span> email)
                (save-buffer))

    (<span style="color: #0000FF;">when</span> contact
      (find-file  (cdr (assoc <span style="color: #008000;">"FILE"</span> (elt contact 2))))
      (goto-char (elt contact 1))
      (show-subtree))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-contacts-tag-selection</span> (selection)
  <span style="color: #036A07;">"Prompts you for a tag, and tags each entry in org-contacts</span>
<span style="color: #036A07;">that has a matching email in `</span><span style="color: #D0372D;">helm-marked-candidates</span><span style="color: #036A07;">'. Ignore</span>
<span style="color: #036A07;">emails that are not in an org-contact file. I am not sure what</span>
<span style="color: #036A07;">the best thing to do there is. Probably prompt for a file, and</span>
<span style="color: #036A07;">add an entry to the end of it."</span>
  (<span style="color: #0000FF;">save-excursion</span>
    (<span style="color: #0000FF;">let</span> ((tag (read-input <span style="color: #008000;">"Tag: "</span>)))
      (loop for email in (helm-marked-candidates)
            do
            (<span style="color: #0000FF;">let</span> ((contact (<span style="color: #0000FF;">catch</span> '<span style="color: #D0372D;">contact</span>
                             (loop for contact in  (org-contacts-db)
                                   do
                                   (<span style="color: #0000FF;">when</span> (string=
                                          email
                                          (cdr (assoc
                                                <span style="color: #008000;">"EMAIL"</span>
                                                (elt contact 2))))
                                     (<span style="color: #0000FF;">throw</span> '<span style="color: #D0372D;">contact</span> contact))))))
              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">add new contact and tag it</span>
              (<span style="color: #0000FF;">unless</span> contact
                (set-buffer (find-file-noselect (ido-completing-read
                                                 <span style="color: #008000;">"Select org-contact file: "</span>
                                                 org-contacts-files)))
                (goto-char (point-max))
                (insert (format  <span style="color: #008000;">"\n* %s %s\n"</span>
                                 (read-input <span style="color: #008000;">"First name: "</span>)
                                 (read-input <span style="color: #008000;">"Last name: "</span>)))
                (org-entry-put (point) <span style="color: #008000;">"EMAIL"</span> email)
                (org-set-tags-to (list tag))
                (save-buffer))
              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">update tags on existing entry</span>
              (<span style="color: #0000FF;">when</span> contact
                (find-file-noselect  (cdr (assoc <span style="color: #008000;">"FILE"</span> (elt contact 2))))
                (set-buffer (marker-buffer (elt contact 1)))
                (goto-char (elt contact 1))
                (org-set-tags-to (append (org-get-tags) (list tag)))))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">j-insert-emails</span> ()
  <span style="color: #036A07;">"Helm interface to email addresses"</span>
  (interactive)

  (helm <span style="color: #006FE0;">:sources</span> `(((name . <span style="color: #008000;">"Email address candidates"</span>)
                   (candidates . ,(append
                                   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">my aliases</span>
                                   email-groups
                                   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">org-contacts</span>
                                   (loop for contact in (org-contacts-db)
                                         collect
                                         (cons (format
                                                <span style="color: #008000;">"%s %s %s &lt;%s&gt; org-contact"</span>
                                                (cdr (assoc <span style="color: #008000;">"FIRSTNAME"</span> (elt contact 2)))
                                                (cdr (assoc <span style="color: #008000;">"LASTNAME"</span> (elt contact 2)))
                                                (cdr (assoc <span style="color: #008000;">"TAGS"</span> (elt contact 2)))
                                                (cdr (assoc <span style="color: #008000;">"EMAIL"</span> (elt contact 2))))
                                               (cdr (assoc <span style="color: #008000;">"EMAIL"</span> (elt contact 2)))))
                                   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">mu contacts</span>
                                   (loop for contact in mu4e~contacts-for-completion
                                         collect (cons contact contact))))
                   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">only action is to insert string at point.</span>
                   (action . ((<span style="color: #008000;">"insert"</span> . (<span style="color: #0000FF;">lambda</span> (x)
                                            (insert
                                             (mapconcat
                                              'identity
                                              (helm-marked-candidates)
                                              <span style="color: #008000;">","</span>))))
                              (<span style="color: #008000;">"open"</span> . org-contacts-open-from-email)
                              (<span style="color: #008000;">"tag"</span>  . org-contacts-tag-selection)))))))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Finally, let us bind this to something probably convenient. I use c-c ] for</span>
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">citations. Lets try that in compose mode.</span>
(define-key mu4e-compose-mode-map <span style="color: #008000;">"\C-c]"</span> 'j-insert-emails)
</pre>
</div>
<pre class="example">
j-insert-emails
</pre>

<p>
Now, I have a sweet helm interface with nearly 13,000 email candidates (there is a decent amount of duplication in this list, and some garbage emails from spam, but helm is so fast, this does not bother me). I can pretty quickly narrow to any tagged set of emails from org-contacts with a search that looks like :phd: for example, or [^phd]:group: to get org-contacts tagged group, but not phd. I can narrow the selection on first name, lastname, parts of email addresses, tags in org-contacts, etc&#x2026; I can open a contact, or tag contacts, even add new contacts to org-contacts. I have been using this for a few weeks, and so far I like it. Occasionally I find mu4e~contacts-for-completion is empty, and then I only get my org-contacts emails, but that seems to only happen when I first open emacs. Since Emacs is usually open for days at a time, this has not been an issue very often.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/14/A-helm-mu4e-contact-selector.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Making org-mode Python sessions look better]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/03/12/Making-org-mode-Python-sessions-look-better" />
    <id>http://jkitchin.github.io/blog/2015/03/12/Making-org-mode-Python-sessions-look-better</id>
    <updated>2015-03-12T18:58:57Z</updated>
    <published>2015-03-12T10:45:25Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Making org-mode Python sessions look better]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/03/12/Making-org-mode-Python-sessions-look-better"><![CDATA[


<p>
Using sessions for python in org-mode has always bugged me a little bit. Mostly the appearance of &gt;&gt;&gt; and &#x2026; in the output. For example:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> 8
</pre>
</div>

<pre class="example">
&gt;&gt;&gt; &gt;&gt;&gt; &gt;&gt;&gt; 8
</pre>

<p>
Today on the org-mode mailing list someone suggested a <a href="http://thread.gmane.org/gmane.emacs.orgmode/95980/focus=96011">patch</a> that might fix that up. Hopefully that patch makes it into org-mode, but if you run off of ELPA like I do it will be some time before it appears in your working version.
</p>

<p>
In the meantime, inspired by my <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode/">recent post</a> on updating multiple results, here we add a new hook function that removes these annoying characters from a Python session results section. Here is my version of this code.
"^: &gt;&gt;&gt;$"
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-python-strip-session-chars</span> ()
  <span style="color: #036A07;">"Remove &gt;&gt;&gt; and ... from a Python session output."</span>
  (<span style="color: #0000FF;">when</span> (and (string=
              <span style="color: #008000;">"python"</span>
              (org-element-property <span style="color: #006FE0;">:language</span> (org-element-at-point)))
             (string-match
              <span style="color: #008000;">":session"</span>
              (org-element-property <span style="color: #006FE0;">:parameters</span> (org-element-at-point))))

    (<span style="color: #0000FF;">save-excursion</span>
      (<span style="color: #0000FF;">when</span> (org-babel-where-is-src-block-result)
        (goto-char (org-babel-where-is-src-block-result))
        (end-of-line 1)
        <span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">(while (looking-at "[\n\r\t\f ]") (forward-char 1))</span>
        (<span style="color: #0000FF;">while</span> (re-search-forward
                <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">&gt;&gt;&gt; </span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\\.\\.\\. </span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">: $</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">: &gt;&gt;&gt;$</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>
                (org-element-property <span style="color: #006FE0;">:end</span> (org-element-at-point))
                t)
          (replace-match <span style="color: #008000;">""</span>)
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this enables us to get rid of blank lines and blank : &gt;&gt;&gt;</span>
          (beginning-of-line)
          (<span style="color: #0000FF;">when</span> (looking-at <span style="color: #008000;">"^$"</span>)
            (kill-line)))))))

(add-hook 'org-babel-after-execute-hook 'org-babel-python-strip-session-chars)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">org-babel-python-strip-session-chars</td>
<td class="left">(lambda nil (org-refresh-images))</td>
</tr>
</tbody>
</table>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([3, 4, 5])
plt.show()

<span style="color: #0000FF;">def</span> <span style="color: #006699;">f</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x</span> = 2 * s
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">blank lines look like indentation errors</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> x

<span style="color: #0000FF;">print</span> f(4)
</pre>
</div>

<pre class="example">
[&lt;matplotlib.lines.Line2D object at 0x10955c290&gt;]
8
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> f(9)
</pre>
</div>

<pre class="example">
18
</pre>

<p>
Here we can make an inline figure.
</p>
<div class="org-src-container">

<pre class="src src-python">plt.figure()
plt.plot([3, 4.5, 5])
plt.savefig(<span style="color: #008000;">'images/session-fig.png'</span>)
<span style="color: #008000;">'images/session-fig.png'</span>
</pre>
</div>

<p>
<img src="/media/2015-03-12-Making-org-mode-Python-sessions-look-better/session-fig.png"> 
Not bad. It seems to work! Maybe this will make sessions more usable for me.
</p>

<p>
<span class="timestamp-wrapper"><span class="timestamp">[2015-03-12 Thu]</span></span> New corner case, do not cause an error when results are silenced.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> 6
</pre>
</div>


<p>
Testing getting rid of blank lines and empty : &gt;&gt;&gt; lines.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 2
<span style="color: #BA36A5;">b</span> = 3
<span style="color: #BA36A5;">c</span> = 4
<span style="color: #0000FF;">print</span>
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'a=      '</span>, a
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'b =     '</span>, b
<span style="color: #0000FF;">print</span> <span style="color: #008000;">'a + b = '</span>, a+b
</pre>
</div>

<pre class="example">
a=       2
b =      3
a + b =  5
</pre>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/12/Making-org-mode-Python-sessions-look-better.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Updating Multiple RESULTS blocks in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode</id>
    <updated>2015-03-11T17:33:51Z</updated>
    <published>2015-03-11T17:33:51Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Updating Multiple RESULTS blocks in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode"><![CDATA[



<p>
There was a recent question on the org-mode mailing list about getting multiple named block results to update when a named code block is run. I suppose you might want to do this if you need to see the results in more than one place. org-mode (at the moment) only updates the first named block that it finds from the beginning of the buffer. Challenge accepted ;)
</p>

<p>
Here is a function that will update all the named RESULTS blocks. The idea is to make a hook function that runs after you run a block. The hook function will get the block name, and if there is one, find all the named results in the buffer and update them.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">update-results</span> ()
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get name of src block</span>
  (<span style="color: #0000FF;">let</span> ((name (org-element-property <span style="color: #006FE0;">:name</span> (org-element-at-point)))
        (results)
        (begin))
    (<span style="color: #0000FF;">when</span> name
      (setq results
            (<span style="color: #0000FF;">save-excursion</span>
              (goto-char (org-babel-find-named-result name))
              (forward-line)
              (buffer-substring
               (point) (org-element-property <span style="color: #006FE0;">:end</span> (org-element-at-point)))))
      (<span style="color: #0000FF;">save-excursion</span>
        (goto-char (point-min))
        (<span style="color: #0000FF;">while</span> (setq begin (org-babel-find-named-result name (point)))
          (goto-char begin)
          (forward-line)
          (setf (buffer-substring
                 (point)
                 (org-element-property <span style="color: #006FE0;">:end</span> (org-element-at-point)))
                results))))))

(add-hook 'org-babel-after-execute-hook 'update-results)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">update-results</td>
<td class="left">(lambda nil (org-refresh-images))</td>
</tr>
</tbody>
</table>

<p>
Now let us test it out. Here is an unnamed block that should be ignored.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span> 4
</pre>
</div>

<pre class="example">
4
</pre>

<p>
Here we have a named results block from a code block we will see later.
</p>
<pre class="example">
[0.0825119635983067, 0.12793443834890417, 0.5235765147357154]
</pre>

<p>
Here is our named code block that just prints three random numbers.
</p>

<div class="org-src-container">

<pre class="src src-python" id="testcode"><span style="color: #0000FF;">import</span> random

<span style="color: #0000FF;">print</span> [random.random() <span style="color: #0000FF;">for</span> i <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">range</span>(3)]
</pre>
</div>

<pre class="example">
[0.0825119635983067, 0.12793443834890417, 0.5235765147357154]
</pre>

<p>
Swell, everytime I run the block, the named results get updated everywhere! It isn't tested more than this post, so I would spend some time trying out your use cases before doing anything mission critical. Your mileage might vary. For example, if you have a named block outside a narrowed region it is not clear to me it would update. In other words, there might be other corners where this doesn't update like you thing.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/11/Updating-Multiple-RESULTS-blocks-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Bibtex Entries from Arxiv.org]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/03/09/Bibtex-Entries-from-Arxiv-org" />
    <id>http://jkitchin.github.io/blog/2015/03/09/Bibtex-Entries-from-Arxiv-org</id>
    <updated>2015-03-09T15:14:52Z</updated>
    <published>2015-03-09T15:14:52Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bibtex" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Bibtex Entries from Arxiv.org]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/03/09/Bibtex-Entries-from-Arxiv-org"><![CDATA[



<p>
<a href="http://arxiv.org">http://arxiv.org</a> is an open-source physics preprint server where copies of scientific manuscripts can be found. For example, <a href="http://arxiv.org/abs/0801.1144">http://arxiv.org/abs/0801.1144</a> is a paper I wrote, and you can find the PDF for that paper here: <a href="http://arxiv.org/pdf/0801.1144v1">http://arxiv.org/pdf/0801.1144v1</a> . Each entry at Arxiv has an arxiv number, and for this paper the number is "0801.1144". In this post, we explore some capabilities of the <a href="https://github.com/jkitchin/org-ref/blob/master/arxiv.el">arxiv.el</a> library which is part of org-ref (<a href="https://github.com/jkitchin/org-ref">https://github.com/jkitchin/org-ref</a> ).
</p>

<p>
To use this library, get the org-ref distribution, make sure it is on your path, and then require the library:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">arxiv</span>)
</pre>
</div>

<p>
First, there is a new org-link:  <a href="http://arxiv.org/abs/0801.1144">arxiv:0801.1144</a>. This is a clickable link that simply opens arxiv.org at the URL for an arxiv number, and exports as a link to that entry in arxiv.
</p>

<p>
On the right hand side of the arxiv page, there is a link under References &amp; Citations that takes you to a page where you can get a bibtex entry. The link for this entry is <a href="http://adsabs.harvard.edu/cgi-bin/bib_query?arXiv:0801.1144">http://adsabs.harvard.edu/cgi-bin/bib_query?arXiv:0801.1144</a> . On that page, there is a link to a bibtex entry (<a href="http://adsabs.harvard.edu/cgi-bin/nph-bib_query?bibcode=2008PhRvB..77g5437K&data_type=BIBTEX&db_key=PHY&nocookieset=1">http://adsabs.harvard.edu/cgi-bin/nph-bib_query?bibcode=2008PhRvB..77g5437K&data_type=BIBTEX&db_key=PHY&nocookieset=1</a> ).  We can construct this link pretty easily, we just need the bibcode for that entry. arxiv.el provides a function for that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(arxiv-get-bibliographic-code <span style="color: #008000;">"0801.1144"</span>)
</pre>
</div>

<pre class="example">
2008PhRvB..77g5437K
</pre>

<p>
Next, once we have a url, we can get the text of the bibtex entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(arxiv-get-bibtex-entry <span style="color: #008000;">"2008PhRvB..77g5437K"</span>)
</pre>
</div>

<pre class="example">
@ARTICLE{2008PhRvB..77g5437K,
   author = {{Kitchin}, J.~R. and {Reuter}, K. and {Scheffler}, M.},
    title = "{Alloy surface segregation in reactive environments: First-principles atomistic thermodynamics study of Ag$_{3}$Pd(111) in oxygen atmospheres}",
  journal = {\prb},
archivePrefix = "arXiv",
   eprint = {0801.1144},
 primaryClass = "cond-mat.mtrl-sci",
 keywords = {Ab initio calculations of adsorbate structure and reactions, Density functional theory local density approximation gradient and other corrections, Oxidation},
     year = 2008,
    month = feb,
   volume = 77,
   number = 7,
      eid = {075437},
    pages = {075437},
      doi = {10.1103/PhysRevB.77.075437},
   adsurl = {http://adsabs.harvard.edu/abs/2008PhRvB..77g5437K},
  adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}
</pre>

<p>
Finally, arxiv.el wraps those to functions together into an interactive function <code>arxiv-add-bibtex-entry</code> which prompts you for an arxiv number, and then a bibtex file, and then adds the text above to your bibtex file. You can then clean the entry as you see fit. It is also possible to get the pdf for an arxiv entry via <code>arxiv-get-pdf</code>. This is an interactive function that will prompt you for an arxiv number and a pdf file name, and it will then get the pdf for you and open it. I have not integrated this with the bibtex entry function yet, but one would ideally clean the bibtex entry to get a uniform key, and then get the pdf and name it according to the key like we do in org-ref.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(arxiv-get-pdf <span style="color: #008000;">"0801.1144"</span> <span style="color: #008000;">"0801.1144.pdf"</span>)
</pre>
</div>

<p>
If you use <a href="https://github.com/jkitchin/jmax/blob/master/words.el">words.el</a> you will find a new function <code>words-arxiv</code> which allows you to search the selected text or word at point on arxiv.org.
</p>

<p>
I do not use arxiv.org a lot, so this is not super well tested on many articles in arxiv.org, but it has worked on the few examples I have tested so far.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/09/Bibtex-Entries-from-Arxiv.org.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication in Surface Science on alloy core level shifts]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/03/03/New-publication-in-Surface-Science-on-alloy-core-level-shifts" />
    <id>http://jkitchin.github.io/blog/2015/03/03/New-publication-in-Surface-Science-on-alloy-core-level-shifts</id>
    <updated>2015-03-03T19:18:00Z</updated>
    <published>2015-03-03T19:18:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <summary type="html"><![CDATA[New publication in Surface Science on alloy core level shifts]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/03/03/New-publication-in-Surface-Science-on-alloy-core-level-shifts"><![CDATA[



<p>
In this collaborative paper with the Gellman group, we show an anomalous core-level shift in Cu-Pd alloys that corresponds to a composition-dependent alloy crystal structure. We use DFT to model the core level shifts. Congratulations Jake!
</p>

<p>
<a href="http://www.sciencedirect.com/science/article/pii/S0039602815000461">http://www.sciencedirect.com/science/article/pii/S0039602815000461</a> 
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">Boes2015</span>,
  <span style="color: #BA36A5;">title</span> =        "Core level shifts in Cu-Pd alloys as a function of bulk
                  composition and structure ",
  <span style="color: #BA36A5;">journal</span> =      "Surface Science ",
  <span style="color: #BA36A5;">volume</span> =       "",
  <span style="color: #BA36A5;">number</span> =       "0",
  <span style="color: #BA36A5;">pages</span> =        " - ",
  <span style="color: #BA36A5;">year</span> =         "2015",
  <span style="color: #BA36A5;">note</span> =         "",
  <span style="color: #BA36A5;">issn</span> =         "0039-6028",
  <span style="color: #BA36A5;">doi</span> =          "http://dx.doi.org/<span style="color: #006DAF; text-decoration: underline;">10.1016/j.susc.2015.02.011</span>",
  <span style="color: #BA36A5;">url</span> =
                  "http://www.sciencedirect.com/science/article/pii/S0039602815000461",
  <span style="color: #BA36A5;">author</span> =       "Jacob Boes and Peter Kondratyuk and Chunrong Yin and James
                  B. Miller and Andrew J. Gellman and John R. Kitchin",
}
</pre>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/03/03/New-publication-in-Surface-Science-on-alloy-core-level-shifts.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[org-mode links meet hydra]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra" />
    <id>http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra</id>
    <updated>2015-02-22T19:06:41Z</updated>
    <published>2015-02-22T19:06:41Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="hydra" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[org-mode links meet hydra]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra"><![CDATA[


<p>
I have played with a lot of options to give org-mode links extra functionality. Here are a few of the ideas I have looked at so far.
</p>

<ol class="org-ol">
<li><a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/21/Enabling-right-clicks-in-org-mode-links/">Enabling right clicks on links</a> 
</li>
<li>A home made minibuffer menu in org-ref
</li>
<li>A helm buffer in org-ref
</li>
</ol>

<p>
Here, I want to explore a hydra menu for a link. The idea is pretty simple, we need functions that do something with the link at point, and a hydra interface to call them. This turned out to be a little tricky. I could not get the path from the link in the link lambda function, and we need a way to pass the path to the function. I use a global variable for that. I wish there was another way to do that, but this does actually work. We illustrate it here with a more functional doi link.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">doi-crossref</span> ()
  <span style="color: #036A07;">"Search DOI in CrossRef."</span>
  (interactive)
  (browse-url
   (format
    <span style="color: #008000;">"http://search.crossref.org/?q=%s"</span> *doi-hydra-path*)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">doi-google-scholar</span> ()
  <span style="color: #036A07;">"Google scholar the doi."</span>
  (interactive)
  (browse-url
   (format
    <span style="color: #008000;">"http://scholar.google.com/scholar?q=%s"</span> *doi-hydra-path*)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">doi-pubmed</span> ()
  <span style="color: #036A07;">"Pubmed the doi."</span>
  (interactive)
  (browse-url
   (format
    <span style="color: #008000;">"http://www.ncbi.nlm.nih.gov/pubmed/?term=%s"</span>
    (url-hexify-string *doi-hydra-path*))))

 (defhydra doi-hydra ()
   <span style="color: #008000;">"org-ref"</span>
   (<span style="color: #008000;">"c"</span> doi-crossref <span style="color: #008000;">"Crossref"</span>)
   (<span style="color: #008000;">"g"</span> doi-google-scholar <span style="color: #008000;">"Google Scholar"</span>)
   (<span style="color: #008000;">"p"</span> doi-pubmed <span style="color: #008000;">"Pubmed"</span>))

(org-add-link-type <span style="color: #008000;">"doi"</span>
  (<span style="color: #0000FF;">lambda</span> (path) (setq *doi-hydra-path* path) (doi-hydra/body)))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">(path)</td>
<td class="left">(setq <b>doi-hydra-path</b> path)</td>
<td class="left">(doi-hydra/body)</td>
</tr>
</tbody>
</table>

<p>
Now for a test, <a href="10.1021/jp047349j">10.1021/jp047349j</a>.
</p>

<p>
It works fine, when you click on a link, you get a minibuffer menu with context hints, and pressing any other key than is defined simply cancels the command.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/22/org-mode-links-meet-hydra.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[org-ref meets hydra]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/20/org-ref-meets-hydra" />
    <id>http://jkitchin.github.io/blog/2015/02/20/org-ref-meets-hydra</id>
    <updated>2015-02-20T21:17:20Z</updated>
    <published>2015-02-20T21:17:20Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[org-ref meets hydra]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/20/org-ref-meets-hydra"><![CDATA[


<p>
I am enjoying learning about <a href="https://github.com/abo-abo/hydra">abo-abo/hydra</a> , which is a nice package for making minibuffer menus to run commands. It is light-weight solution that does not mess up your window too much, and it is easier to use than any home-grown solution I have made in the past. Here is a simple little code that gives me three options when I press "zz" quickly (a key-chord). I can press "c" to put in a cite link using helm, "r" to insert a ref link using helm, and "l" to insert a new label. Any other key just cancels the menu. One thing to remember ("zz"), and hints for the rest!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">hydra</span>)
(setq hydra-is-helpful t)

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">key-chord</span>)
(key-chord-mode 1)
(key-chord-define-global
 <span style="color: #008000;">"zz"</span>
 (defhydra org-ref-hydra ()
   <span style="color: #008000;">"org-ref"</span>
   (<span style="color: #008000;">"c"</span> org-ref-helm-insert-cite-link <span style="color: #008000;">"cite"</span>)
   (<span style="color: #008000;">"r"</span> org-ref-helm-insert-ref-link <span style="color: #008000;">"ref"</span>)
   (<span style="color: #008000;">"l"</span> org-ref-helm-insert-label-link <span style="color: #008000;">"label"</span>)
   (<span style="color: #008000;">"R"</span> org-ref <span style="color: #008000;">"org-ref"</span>)))
</pre>
</div>

<pre class="example">
org-ref-hydra/body
</pre>

<p>
Pretty nice. Check out the nice hydra interface to <a href="https://github.com/jkitchin/jmax/blob/master/words.el">words.el</a> . A simple press of "ww" gets you easy access to single key presses of all the nice words functions. What would you hydra for?</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/20/org-ref-meets-hydra.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication on effects of Linear Response U on OER trends]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/09/New-publication-on-effects-of-Linear-Response-U-on-OER-trends" />
    <id>http://jkitchin.github.io/blog/2015/02/09/New-publication-on-effects-of-Linear-Response-U-on-OER-trends</id>
    <updated>2015-03-03T19:27:28Z</updated>
    <published>2015-02-09T19:18:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <summary type="html"><![CDATA[New publication on effects of Linear Response U on OER trends]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/09/New-publication-on-effects-of-Linear-Response-U-on-OER-trends"><![CDATA[



<p>
In this paper we explore the role DFT+U on oxygen evolution reactivity trends, and the role that linear response U can play in predicting these properties. Congratulations Zhongnan!
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">xu-2015-linear-respon</span>,
  <span style="color: #BA36A5;">author</span> = {Xu, Zhongnan and Rossmeisl, Jan and Kitchin, John R.},
  <span style="color: #BA36A5;">title</span> = {A Linear Response {DFT}+{U} Study of Trends in the Oxygen
                  Evolution Activity of Transition Metal Rutile Dioxides},
  <span style="color: #BA36A5;">journal</span> = {The Journal of Physical Chemistry C},
  <span style="color: #BA36A5;">volume</span> = 0,
  <span style="color: #BA36A5;">number</span> = 0,
  <span style="color: #BA36A5;">pages</span> = {null},
  <span style="color: #BA36A5;">year</span> = 2015,
  <span style="color: #BA36A5;">doi</span> = {<span style="color: #006DAF; text-decoration: underline;">10.1021/jp511426q</span>},
  <span style="color: #BA36A5;">url</span> = {<span style="color: #006DAF; text-decoration: underline;"> http://dx.doi.org/10.1021/jp511426q </span>},
  <span style="color: #BA36A5;">eprint</span> = { http://dx.doi.org/10.1021/jp511426q },
}
</pre>
</div>

<p>
<a href="http://pubs.acs.org/doi/abs/10.1021/jp511426q">http://pubs.acs.org/doi/abs/10.1021/jp511426q</a> 
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/09/New-publication-on-effects-of-Linear-Response-U-on-OER-trends.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Extending the org-mode link syntax with attributes]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes" />
    <id>http://jkitchin.github.io/blog/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes</id>
    <updated>2015-02-05T10:06:25Z</updated>
    <published>2015-02-05T10:06:25Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Extending the org-mode link syntax with attributes]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes"><![CDATA[


<p>
I make super heavy use of links in org-mode. I use them extensively in org-ref to create functional citations. One detail that has never been very satisfactory is the need for pre/post text in citations. I don't need that capability often, but it seems important to some. I have implemented a kind of clunky solution where I use the description part of a link with the pre/post text separated by a ::. Although that works, I dislike the way it looks, the need to parse it, and that the description covers the link.
</p>

<pre class="example">
[[cite:key][pre text::post text]]
</pre>

<p>
Some <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2010-08/msg00404.html">time ago</a> there was a suggestion of how to extend the link syntax, which was to my knowledge never implemented. Here is the proposed syntax:
</p>
<pre class="example">
$[link http://google.com
         :last-followed [2009-02-25 Wed 02:00]
         :label "click here for evil search engine"
         :export-label "click here for nice search engine"]
</pre>

<p>
This is interesting because this syntax suggests the link has attributes which can be updated.
</p>

<p>
We will show here how to implement part of this idea with the existing link syntax. We will make a link that has attributes like that. The basic idea is to simply incorporate the attributes into the path, and use lisp to read them. We will wrap the link path in parentheses and read that as a lisp data structure. So, a link like <i>link:key :pre "some pre text" :post "some post text"</i> will be parsed as:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(read <span style="color: #008000;">"(key :pre \"some pre text\" :post \"some post text\")"</span>)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">key</td>
<td class="left">:pre</td>
<td class="left">some pre text</td>
<td class="left">:post</td>
<td class="left">some post text</td>
</tr>
</tbody>
</table>

<p>
The car of that list is the key, and the cdr contains the attributes. The quotes are necessary here to make sure all the text is correctly parsed as a single element for each attribute. So, here is an example link
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #008000;">"slink"</span>
 <span style="color: #8D8D84;">;;  </span><span style="color: #8D8D84; font-style: italic;">follow function</span>
 (<span style="color: #0000FF;">lambda</span> (path)
   (<span style="color: #0000FF;">let*</span> ((data (read (format <span style="color: #008000;">"(%s)"</span> path)))
          (head (car data))
          (plist (cdr data))
          (link (org-element-context))
          (begin (org-element-property <span style="color: #006FE0;">:begin</span> link))
          (end (org-element-property <span style="color: #006FE0;">:end</span> link)))
     (setq plist (plist-put plist <span style="color: #006FE0;">:last-clicked</span> (current-time-string)))
     (<span style="color: #0000FF;">save-excursion</span>
     (setf (buffer-substring begin end) <span style="color: #008000;">""</span>)
     (goto-char begin)
     (insert (format <span style="color: #008000;">"[[slink:%s %s]]"</span> head
         (substring (format <span style="color: #008000;">"%S"</span> plist) 1 -1))))))
 <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">format function</span>
 (<span style="color: #0000FF;">lambda</span> (path description backend)
   (<span style="color: #0000FF;">let*</span> ((data (read (concat <span style="color: #008000;">"("</span> path <span style="color: #008000;">")"</span>)))
          (head (car data))
          (plist (cadr data)))
     (format <span style="color: #008000;">"\\%s[%s][%s]{%s}"</span>
             (plist-get plist <span style="color: #006FE0;">:type</span>)
             (plist-get plist <span style="color: #006FE0;">:pre</span>)
             (plist-get plist <span style="color: #006FE0;">:post</span>)
             head))))
</pre>
</div>

<p>
Now, each time I click on this link, the time stamp gets updated.
</p>

<p>
\nil[nil][nil]{kitchin-2010}
</p>

<pre class="example">
[[slink:kitchin-2010 :pre "See for example" :post "page 47" :type "cite" :last-clicked "Thu Feb  5 09:31:15 2015"]]
</pre>


<p>
And, the generic export of this link is:
</p>

<pre class="example">
\cite[See for example][page 47]{kitchin-2010}
</pre>

<p>
Is this a good idea? I am not using this for anything right now. Sometimes my version of org-mode has trouble recognizing that is a link. It is strange, as I am typing, sometimes it flashes in and out of being recognized as a link. Anyway, it is an interesting idea!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/05/Extending-the-org-mode-link-syntax-with-attributes.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Helm at the Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/04/Helm-at-the-Emacs" />
    <id>http://jkitchin.github.io/blog/2015/02/04/Helm-at-the-Emacs</id>
    <updated>2015-02-04T08:47:40Z</updated>
    <published>2015-02-04T08:47:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="helm" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Helm at the Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/04/Helm-at-the-Emacs"><![CDATA[


<p>
I have written several (<a href="http://kitchingroup.cheme.cmu.edu/blog/2015/01/24/Anatomy-of-a-helm-source/">intro</a> , <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/02/01/Handling-multiple-selections-in-helm/">multiple args</a> , <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/02/03/helm-and-prefix-functions/">prefix args)</a> times about using Helm in Emacs so far. Today, I want to share a way I use helm to get me where I want to be in Emacs for my daily activities. This came out of a desire to have single command that would give me a lot of options to open exactly the buffer/file I wanted when I need it. I call the command hotspots, and it is bound to f9 for me, so when I press f9 I get a helm buffer to select what I want from.
</p>

<p>
So, what kinds of things do I want. First, I want to be able to open my mail, calendar, News feed or agenda from this command. Second, I have a list of hotspots I developed using the code at <a href="http://ergoemacs.org/emacs/emacs_hotkey_open_file_fast.html">http://ergoemacs.org/emacs/emacs_hotkey_open_file_fast.html</a> , which I want easy access to. Third, I want to be able to open any org-file in my agenda list. Fourth, any bookmark I have, or to set a bookmark. Fifth, I want recent files as candidates. There is certainly some redundancy in their, but that is ok, it gets me where I want to be.
</p>

<p>
Here is the code that does that for me. There are six helm sources that provide candidates and actions.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">hotspots</span> ()
  <span style="color: #036A07;">"helm interface to my hotspots, which includes my locations,</span>
<span style="color: #036A07;">org-files and bookmarks"</span>
  (interactive)
  (helm <span style="color: #006FE0;">:sources</span> `(((name . <span style="color: #008000;">"Mail and News"</span>)
                    (candidates . ((<span style="color: #008000;">"Mail"</span> . (<span style="color: #0000FF;">lambda</span> ()
                                               (<span style="color: #0000FF;">if</span> (get-buffer <span style="color: #008000;">"*mu4e-headers*"</span>)
                                                   (<span style="color: #0000FF;">progn</span>
                                                     (switch-to-buffer <span style="color: #008000;">"*mu4e-headers*"</span>)
                                                     (delete-other-windows))

                                                 (mu4e))))
                                   (<span style="color: #008000;">"Calendar"</span> . (<span style="color: #0000FF;">lambda</span> ()  (browse-url <span style="color: #008000;">"https://www.google.com/calendar/render"</span>)))
                                   (<span style="color: #008000;">"RSS"</span> . elfeed)
                                   (<span style="color: #008000;">"Agenda"</span> . (<span style="color: #0000FF;">lambda</span> () (org-agenda <span style="color: #008000;">""</span> <span style="color: #008000;">"w"</span>)))))
                    (action . ((<span style="color: #008000;">"Open"</span> . (<span style="color: #0000FF;">lambda</span> (x) (funcall x))))))
                   ((name . <span style="color: #008000;">"My Locations"</span>)
                    (candidates . ((<span style="color: #008000;">"master"</span> . <span style="color: #008000;">"~/Dropbox/org-mode/master.org"</span>)
                                   (<span style="color: #008000;">".emacs.d"</span> . <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax"</span> )
                                   (<span style="color: #008000;">"blog"</span> . <span style="color: #008000;">"~/blogofile-jkitchin.github.com/_blog/blog.org"</span>)
                                   (<span style="color: #008000;">"ese"</span> . <span style="color: #008000;">"~/Dropbox/books/ese-book/ese.org"</span> )
                                   (<span style="color: #008000;">"passwords"</span> . <span style="color: #008000;">"~/Dropbox/org-mode/passwords.org.gpg"</span>)
                                   (<span style="color: #008000;">"Pycse"</span> . <span style="color: #008000;">"~/Dropbox/books/pycse/pycse.org"</span>)
                                   (<span style="color: #008000;">"references"</span> . <span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>)
                                   (<span style="color: #008000;">"notes"</span> . <span style="color: #008000;">"~/Dropbox/bibliography/notes.org"</span>)
                                   (<span style="color: #008000;">"journal"</span> . <span style="color: #008000;">"~/Dropbox/org-mode/journal.org"</span>)
                                   (<span style="color: #008000;">"tasks"</span> . <span style="color: #008000;">"~/Dropbox/org-mode/tasks.org"</span>)))
                    (action . ((<span style="color: #008000;">"Open"</span> . (<span style="color: #0000FF;">lambda</span> (x) (find-file x))))))

                   ((name . <span style="color: #008000;">"My org files"</span>)
                    (candidates . ,(f-entries <span style="color: #008000;">"~/Dropbox/org-mode"</span>))
                    (action . ((<span style="color: #008000;">"Open"</span> . (<span style="color: #0000FF;">lambda</span> (x) (find-file x))))))
                   helm-source-recentf
                   helm-source-bookmarks
                   helm-source-bookmark-set)))
</pre>
</div>

<p>
Interesting to me is that there are not a lot of actions in here. I mostly use this command for navigation to various places. For example, I press f9, type meet, and I can quickly get to the meetings file in my agenda list, or I can type the first few letters of a student's name and open the org-file associated with them. Or I press f9 and go down an entry to open my calendar, etc&#x2026; I find this enormously helpful because it opens these files no matter where I am in Emacs, and it relieves my mind from remembering where they are, or the keystrokes/commands to get to them.</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/04/Helm-at-the-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
