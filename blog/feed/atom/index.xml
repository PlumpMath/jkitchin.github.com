<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-08-14T15:46:02Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Jump to most recent timestamp in an org document]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/08/14/Jump-to-most-recent-timestamp-in-an-org-document" />
    <id>http://jkitchin.github.io/blog/2014/08/14/Jump-to-most-recent-timestamp-in-an-org-document</id>
    <updated>2014-08-14T11:45:42Z</updated>
    <published>2014-08-14T11:45:42Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Jump to most recent timestamp in an org document]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/08/14/Jump-to-most-recent-timestamp-in-an-org-document"><![CDATA[


<p>
Timestamps serve many purposes in an org document: deadlines, scheduled time, record of time, etc&#x2026; Depending on the document, you may have organized a set of tasks logically, but you are completing them in some other order. Here, we examine how to jump to the most recent timestamp. 
</p>

<p>
Here is an example of an inactive (will not cause an agenda entry) timestamp <span class="timestamp-wrapper"><span class="timestamp">[2014-08-07 Thu]</span></span> and an active timestamp <span class="timestamp-wrapper"><span class="timestamp">&lt;2014-08-13 Wed&gt;</span></span>. You can also have times in the timestamps, e.g. <span class="timestamp-wrapper"><span class="timestamp">&lt;2014-08-14 Thu 13:00&gt;</span></span> or <span class="timestamp-wrapper"><span class="timestamp">&lt;2014-08-14 Thu 14:00&gt;</span></span>. There may be a timestamp that is in the future <span class="timestamp-wrapper"><span class="timestamp">[2014-08-15 Fri]</span></span>.
</p>

<p>
We may have some headlines with a due date.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Headline with duedate</h2>
<div class="outline-text-2" id="text-1">
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Analyzing the timestamps in this file</h2>
<div class="outline-text-2" id="text-2">
<p>
We can get a sorted list of the time-stamps like this.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(sort (org-element-map (org-element-parse-buffer) 'timestamp
	(lambda (timestamp)
	  (org-element-property :raw-value timestamp))) 'org-time&gt;)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left"><span class="timestamp-wrapper"><span class="timestamp">[2014-08-15 Fri]</span></span></td>
<td class="left"><span class="timestamp-wrapper"><span class="timestamp">&lt;2014-08-14 Thu 14:00&gt;</span></span></td>
<td class="left"><span class="timestamp-wrapper"><span class="timestamp">&lt;2014-08-14 Thu 13:00&gt;</span></span></td>
<td class="left"><span class="timestamp-wrapper"><span class="timestamp">&lt;2014-08-13 Wed&gt;</span></span></td>
<td class="left"><span class="timestamp-wrapper"><span class="timestamp">[2014-08-07 Thu]</span></span></td>
</tr>
</tbody>
</table>

<p>
Interestingly, the deadline timestamp does not appear in this list! I am not sure why it doesn't show up.
</p>

<p>
Unfortunately, having those time stamps in this buffer will complicate further analysis, because org-mode will parse them too. What we need to do next is figure out a way to sort with the positions, so we can jump to it.
</p>

<p>
Side bar: How to sort a cons list based on the first element of each cons cell? Here are two examples.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(cl-sort '((3 . "a") (2 . "b") (1 . "c")) '&gt; :key 'car)
</pre>
</div>

<p>
((3 . a) (2 . b) (1 . c))
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp">(sort '((3 . "a") (2 . "b") (1 . "c"))
      (lambda (a b)
	(&gt; (car a) (car b))))
</pre>
</div>

<p>
((3 . a) (2 . b) (1 . c))
</p>


<p>
So, we just build up a sorted cons-list of timestamps and their beginning characters, then pop the top entry off and jump to it. Here is the code. Running this jumps directly to the most recent (which could be in the future) timestamp.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(let ((timestamps (cl-sort
		   (org-element-map (org-element-parse-buffer) 'timestamp
		     (lambda (timestamp)
		       `(,(org-element-property :raw-value timestamp) . ,(org-element-property :begin timestamp))))
		   'org-time&gt; :key 'car)))
  (goto-char
   (cdr
    (pop timestamps))))
</pre>
</div>

<p>
There are some limitations here:
</p>
<ol class="org-ol">
<li>Only free timestamps are shown, timestamps associated with deadlines and scheduling do not appear to be considered here. You would need to map over the headlines and check for deadlines to get these I think.
</li>
<li>The code block above finds the timestamp with the highest time value, which may be in the future. It is an interesting exercise to think about how to find the most recent timestamp that is not in the future.
</li>
</ol>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/14/Jump-to-most-recent-timestamp-in-an-org-document.org">org-mode source</a><p><p>Org-mode version = 8.2.7c</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using org-mode outside of Emacs - sort of]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/08/11/Using-org-mode-outside-of-Emacs-sort-of" />
    <id>http://jkitchin.github.io/blog/2014/08/11/Using-org-mode-outside-of-Emacs-sort-of</id>
    <updated>2014-08-11T20:22:43Z</updated>
    <published>2014-08-11T20:22:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Using org-mode outside of Emacs - sort of]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/08/11/Using-org-mode-outside-of-Emacs-sort-of"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Extracting tables from an org-file</a></li>
<li><a href="#sec-2">2. Running code in an org-file</a></li>
</ul>
</div>
</div>
<p>
I recently posted about using Emacs for scripts (<a href="http://kitchingroup.cheme.cmu.edu/blog/2014/08/06/Writing-scripts-in-Emacs-lisp/">http://kitchingroup.cheme.cmu.edu/blog/2014/08/06/Writing-scripts-in-Emacs-lisp/</a> ). Someone was probably wondering, why would you do that, when you could use shell, python or perl? A good reason is to write scripts that can access data or code inside an org-file! This would allow you to leverage the extensive support for org-mode in Emacs, without a user necessarily even needing to use Emacs. Let us consider some examples. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Extracting tables from an org-file</h2>
<div class="outline-text-2" id="text-1">
<p>
If tables are named in org-mode, it is possible to extract the contents. Here is a table:
</p>

<table id="data-1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">4</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">9</td>
</tr>
</tbody>
</table>

<p>
Another table might look like
</p>

<table id="data-2" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">a</td>
<td class="right">b</td>
</tr>

<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">8</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">27</td>
</tr>
</tbody>
</table>


<p>
It would be convenient to have a command-line utility that could extract the data from that table with a syntax like:
</p>

<div class="org-src-container">

<pre class="src src-sh">extract-org-table tblname orgfile --format lisp|csv|tab
</pre>
</div>


<p>
Here is one way to do it:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">;; org-table tblname orgfile lisp|csv|tab

(let ((tblname (pop command-line-args-left))
      (org-file (pop command-line-args-left))
      (format)
      (table)
      (content))
  (when command-line-args-left
    (setq format (pop command-line-args-left)))
  (find-file org-file)
  (setq table 
	(org-element-map (org-element-parse-buffer) 'table 
	  (lambda (element)
	    (when (string= tblname (org-element-property :name element))
	      element))
	  nil ;info
	  t )) ; first-match

  (unless table
    (error "no table found for %s" tblname))

  (when table
    (goto-char (org-element-property :contents-begin table))
    (let ((contents (org-table-to-lisp)))
      (if (string= format "lisp")
	  (print contents)
	;else      
	(dolist (row contents)
	  (unless (eq row 'hline)
	    (cond
	     ((string= format "csv")
	      (princ (mapconcat 'identity row ",")))
	     ((string= format "tab")
	      (princ (mapconcat 'identity row "\t")))
	     (t
	      (error "unsupported format: %s" format)))
	    (princ "\n")))))))
</pre>
</div>

<p>
Let us try it out. <a href="org-babel-tangle">org-babel-tangle</a>
</p>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-2 org-outside-emacs.org lisp
</pre>
</div>

<pre class="example">
(("a" "b") ("1" "1") ("2" "8") ("3" "27"))
</pre>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-1 org-outside-emacs.org csv
</pre>
</div>

<pre class="example">
x,y
1,1
2,4
3,9
</pre>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-2 org-outside-emacs.org tab
</pre>
</div>

<pre class="example">
a       b
1       1
2       8
3       27
</pre>

<p>
That looks pretty reasonable, and you could even pipe the output to another classic unix command like cut to get a single column. Let us get the second column here.
</p>

<div class="org-src-container">

<pre class="src src-sh">./extract-org-table data-1 org-outside-emacs.org csv | cut -d , -f 2
</pre>
</div>

<pre class="example">
y
1
4
9
</pre>

<p>
That is starting to look like using data from an org-file, but outside of org. Of course, we are using org-mode, via emacs, but the point is a user might not have to know that, as long as a fairly recent Emacs and org-mode was installed on their system.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Running code in an org-file</h2>
<div class="outline-text-2" id="text-2">
<p>
It may be that there is code in an org-file that you might want to use, but for some reason choose not to cut and paste from the org-file to some script. Here is a simple code block:
</p>

<div class="org-src-container">

<pre class="src src-python" id="python-block">import time
with open('results.dat', 'w') as f:
    f.write(time.asctime())
</pre>
</div>

<p>
To call this externally we have to find the block and then run it.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp">;; org-run blockname org-file
;; run a code block in an org file
(let ((blockname (pop command-line-args-left))
      (org-file (pop command-line-args-left))
      (src))
  (find-file org-file)
  (setq src
	(org-element-map (org-element-parse-buffer) 'src-block
	  (lambda (element)
	    (when (string= blockname (org-element-property :name element))
	      element))
	  nil ;info
	  t )) ; first-match
  (when src
     (goto-char (org-element-property :begin src))
     ;; since we start with a fresh emacs, we have to configure some things.
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)))
     (let ((org-confirm-babel-evaluate nil))
       (org-babel-execute-src-block))))
</pre>
</div>

<p>
<a href="org-babel-tangle">org-babel-tangle</a>
</p>

<div class="org-src-container">

<pre class="src src-sh">./org-call.el python-block org-outside-emacs.org
cat results.dat
</pre>
</div>

<pre class="example">
Mon Aug 11 20:17:01 2014
</pre>

<p>
That demonstrates it is possible to call source blocks, but this is pretty limited in capability. You can only call a block; we did not capture any output from the block, only its side effects, e.g. it changed a file that we can examine. We have limited capability to set data into the block, other than through files. It might be possible to hack up something that runs org-babel-execute-src-block with constructed arguments that enables something like a var to be passed in. That is beyond today's post. When I get around to it, here is a reminder of how it might be possible to feed stdin to an emacs script: <a href="http://stackoverflow.com/questions/2879746/idomatic-batch-processing-of-text-in-emacs">http://stackoverflow.com/questions/2879746/idomatic-batch-processing-of-text-in-emacs</a> .
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/11/Using-org-mode-outside-of-Emacs---sort-of.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[What we are using org-mode for]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/08/08/What-we-are-using-org-mode-for" />
    <id>http://jkitchin.github.io/blog/2014/08/08/What-we-are-using-org-mode-for</id>
    <updated>2014-08-08T13:59:59Z</updated>
    <published>2014-08-08T13:59:59Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[What we are using org-mode for]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/08/08/What-we-are-using-org-mode-for"><![CDATA[


<p>
About four years ago I picked up Emacs again, because of org-mode. It started as an experiment to see if org-mode might be a solution to managing my growing list of obligations. Since then I have learned alot about org-mode. I was feeling reflective today, so here I describe a few of the things we are doing with it now, besides just organizing my obligations! I have found org-mode useful for many other things.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> This blog</h2>
<div class="outline-text-2" id="text-1">
<p>
Every entry of this blog is written in org-mode and exported to an HTML file (<a href="https://github.com/jkitchin/jmax/blob/master/user/blogofile.el">https://github.com/jkitchin/jmax/blob/master/user/blogofile.el</a> ) that is compiled by blogofile (<a href="http://www.blogofile.com/">http://www.blogofile.com/</a> ). Thanks to some emacs-lisp code, each post has the raw org-file linked to it so you can see exactly how the page was made.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Writing large technical documents/books</h2>
<div class="outline-text-2" id="text-2">
<p>
I used org-mode to write my book on modeling materials properties using density functional theory (<a href="http://kitchingroup.cheme.cmu.edu/dft-book">http://kitchingroup.cheme.cmu.edu/dft-book</a> ). This book has over 100 Python code examples that are integrated with the narrative text, including equations, figures and references.
</p>

<p>
I also used org-mode to write "Python computations in Science and Engineering" (<a href="http://kitchingroup.cheme.cmu.edu/pycse">http://kitchingroup.cheme.cmu.edu/pycse</a> ), which shows that Python can be used extensively for solving scientific and engineering problems.
</p>

<p>
These "books" are not published in any traditional way; their value is in the org-format where the code is executable.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Writing scientific publications</h2>
<div class="outline-text-2" id="text-3">
<p>
The following papers from our group were written in org-mode. The supporting information files all contain embedded org-files with all of the code used to generate figures and analysis, as well as the data to make the papers reproducible and reusable. These papers include both experimental and computational work.
</p>

<ol class="org-ol">
<li>Spencer D. Miller, Vladimir V. Pushkarev, Andrew J. Gellman and John R. Kitchin, Simulating Temperature Programmed Desorption of Oxygen on Pt(111) Using DFT Derived Coverage Dependent Desorption Barriers, Topics In Catalysis, 57(1), 106-117 (2013). <a href="http://link.springer.com/article/10.1007%2Fs11244-013-0166-3">http://link.springer.com/article/10.1007%2Fs11244-013-0166-3</a> 
</li>

<li>Alex Hallenbeck and John R. Kitchin, Effects of O<sub>2</sub> and SO<sub>2</sub> on the Capture Capacity of a Primary-Amine Based Polymeric CO2 Sorbent, I&amp;ECR, 52 (31), 10788-10794 (2013). <a href="http://dx.doi.org/10.1021/ie400582a">http://dx.doi.org/10.1021/ie400582a</a> . 
</li>

<li>Mehta, Prateek; Salvador, Paul; Kitchin, John, Identifying Potential BO<sub>2</sub> Oxide Polymorphs for Epitaxial Growth Candidates", ACS Applied Materials and Interfaces, 6(5), 3630-3639 (2014). <a href="http://pubs.acs.org/doi/full/10.1021/am4059149">http://pubs.acs.org/doi/full/10.1021/am4059149</a> .
</li>

<li>Zhongnan Xu and John R Kitchin, Relating the Electronic Structure and Reactivity of the 3d Transition Metal Monoxide Surfaces, Catalysis Communications, 52, 60-64 (2014),        <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">http://dx.doi.org/10.1016/j.catcom.2013.10.028</a> . 
</li>
</ol>

<p>
We have several more papers in progress that are being written in org-mode. We just export the LaTeX manuscript (<a href="https://github.com/jkitchin/jmax/blob/master/ox-manuscript.el">https://github.com/jkitchin/jmax/blob/master/ox-manuscript.el</a> ) and submit it. My students now use org-mode to produce reports for their PhD qualifying exams, MS project reports, and other internal reports I ask them to write. I have used it for writing internal memos and reports for the Department. I occasionally use it to write technical emails.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Writing software</h2>
<div class="outline-text-2" id="text-4">
<p>
I have used org-mode in three serious software development efforts. So far, all of them have been in emacs-lisp.
</p>

<ol class="org-ol">
<li>org-ref is an extension of org-mode that provides deeply integrated citation and referencing in org-mode documents using bibtex as the reference database. The software is written in emacs-lisp, in an org-file, and the source code is tangled out of it. See <a href="https://github.com/jkitchin/jmax/blob/master/org/org-ref.org">https://github.com/jkitchin/jmax/blob/master/org/org-ref.org</a> . The code is about 1700 lines long.
</li>

<li>doi-utils is a smaller package that allows you to download bibtex entries and pdfs from a DOI. See <a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org">https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org</a> 
</li>

<li>org-show is an emacs-lisp package for using org-files to give presentations. See  <a href="https://github.com/jkitchin/jmax/blob/master/org/org-show.org">https://github.com/jkitchin/jmax/blob/master/org/org-show.org</a> . 
</li>
</ol>

<p>
This literate programming approach to writing software is interesting. You can document via narrative text what the software does, and how it works, sometimes as you write the code. I have not used org-mode to write a large Python project yet. I am considering it.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Giving presentations</h2>
<div class="outline-text-2" id="text-5">
<p>
For some examples of using org-show, see:
  a. Org-mode is awesome  <a href="https://www.youtube.com/watch?v=fgizHHd7nOo">https://www.youtube.com/watch?v=fgizHHd7nOo</a> 
  b. Using org-ref <a href="https://www.youtube.com/watch?v=JyvpSVl4_dg">https://www.youtube.com/watch?v=JyvpSVl4_dg</a> 
  c. The org-show show <a href="https://www.youtube.com/watch?v=JZ8RK-R9O_g">https://www.youtube.com/watch?v=JZ8RK-R9O_g</a> 
  d. Scipy 2014: Python in teaching <a href="https://www.youtube.com/watch?v=IsSMs-4GlT8">https://www.youtube.com/watch?v=IsSMs-4GlT8</a> 
  e. Scipy 2013: reproducible research talk in Beamer generated from org-mode  <a href="https://www.youtube.com/watch?v=1-dUkyn_fZA">https://www.youtube.com/watch?v=1-dUkyn_fZA</a> 
</p>

<p>
Presenting from org-mode takes some adjustment, but it really lets you strip something down to what is important, with few distractions!
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Teaching classes</h2>
<div class="outline-text-2" id="text-6">
<p>
The book on dft that I wrote has been used in a graduate course several times. The last time I taught it we actually used the org-file directly in class during lecture, and I had students turn in their assignments with org-mode. That was done on a computer cluster I administer, so everyone had the emacs/org-mode setup I created.
</p>

<p>
This fall I am teaching a graduate MS course in chemical reaction engineering. It will be taught from org-mode. All the notes are in org-mode, all the assignments are in org-mode. Emacs will communicate with a git-server I run that will provide authenticated delivery of course materials and assignments. Grading is all done through org-mode, with the grades stored directly in the assignment files. The source code behind this effort is located for now at <a href="https://github.com/jkitchin/jmax/tree/master/techela">https://github.com/jkitchin/jmax/tree/master/techela</a> . There is no course website; students will run M-x techela, select their course, and the syllabus.org file will be updated and shown, with org-links to get assignments, open lecture notes, etc&#x2026; The students will do all this on their own laptop, with a preinstalled version of <a href="https://github.com/jkitchin/jmax">https://github.com/jkitchin/jmax</a> , Enthought Canopy Python, git, ssh and TeXLive.
</p>

<p>
I am needless to say, very excited to try it!
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Managing obligations</h2>
<div class="outline-text-2" id="text-7">
<p>
And of course, I still use org-mode to manage my daily job responsibilities as a professor:
</p>
<ol class="org-ol">
<li>Running a research group of ~10 PhD and MS students, managing grants, paper deadlines,&#x2026; I share org-files with my students through Dropbox to keep some activities coordinated.
</li>
<li>Teaching classes
</li>
<li>Department, college, university committee duties
</li>
<li>Preparing for professional meetings
</li>
<li>Conference organization
</li>
<li>Keeping track of personal things
</li>
<li>etc&#x2026;
</li>
</ol>

<p>
I just counted the lines of the files in my org-agenda: 
</p>

<div class="org-src-container">

<pre class="src src-sh">wc -l ~/Dropbox/org-mode/*.org
</pre>
</div>

<pre class="example">
    346 /c/Users/jkitchin/Dropbox/org-mode/abet.org
     28 /c/Users/jkitchin/Dropbox/org-mode/advising.org
    854 /c/Users/jkitchin/Dropbox/org-mode/cheme-undergrad-committee.org
    745 /c/Users/jkitchin/Dropbox/org-mode/committees.org
  11187 /c/Users/jkitchin/Dropbox/org-mode/contacts.org
    451 /c/Users/jkitchin/Dropbox/org-mode/department.org
      2 /c/Users/jkitchin/Dropbox/org-mode/email+gnus.org
     91 /c/Users/jkitchin/Dropbox/org-mode/email.org
    611 /c/Users/jkitchin/Dropbox/org-mode/gilgamesh.org
     91 /c/Users/jkitchin/Dropbox/org-mode/gnus.org
      6 /c/Users/jkitchin/Dropbox/org-mode/group.org
    749 /c/Users/jkitchin/Dropbox/org-mode/journal.org
    274 /c/Users/jkitchin/Dropbox/org-mode/lab.org
    352 /c/Users/jkitchin/Dropbox/org-mode/manuscripts.org
    117 /c/Users/jkitchin/Dropbox/org-mode/master.org
   1239 /c/Users/jkitchin/Dropbox/org-mode/meetings.org
    513 /c/Users/jkitchin/Dropbox/org-mode/notes.org
    118 /c/Users/jkitchin/Dropbox/org-mode/org-course.org
    182 /c/Users/jkitchin/Dropbox/org-mode/personal.org
    485 /c/Users/jkitchin/Dropbox/org-mode/prj-doe-early-career.org
    109 /c/Users/jkitchin/Dropbox/org-mode/prj-exxon.org
     25 /c/Users/jkitchin/Dropbox/org-mode/prj-gcep-project.org
     15 /c/Users/jkitchin/Dropbox/org-mode/prj-simonseed.org
     83 /c/Users/jkitchin/Dropbox/org-mode/prj-task-191.org
      8 /c/Users/jkitchin/Dropbox/org-mode/prj-task-203.org
    349 /c/Users/jkitchin/Dropbox/org-mode/prj-task-97-mat.org
    238 /c/Users/jkitchin/Dropbox/org-mode/proposals.org
    378 /c/Users/jkitchin/Dropbox/org-mode/research.org
      7 /c/Users/jkitchin/Dropbox/org-mode/researcher-ids.org
    110 /c/Users/jkitchin/Dropbox/org-mode/reviews.org
    619 /c/Users/jkitchin/Dropbox/org-mode/software.org
    629 /c/Users/jkitchin/Dropbox/org-mode/tasks.org
      2 /c/Users/jkitchin/Dropbox/org-mode/taxes.org
  21013 total
</pre>

<p>
hmm&#x2026; that contacts file is big. My agenda might speed up if I move it out. It is not so slow that it bothers me though. That happens when you dump gmail contacts to org-contacts. That is even after cleaning up all the obviously bad entries!
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Summary</h2>
<div class="outline-text-2" id="text-8">
<p>
There is hardly an area in my work not touched by org-mode these days! 
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/08/What-we-are-using-org-mode-for.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Writing scripts in Emacs-lisp]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/08/06/Writing-scripts-in-Emacs-lisp" />
    <id>http://jkitchin.github.io/blog/2014/08/06/Writing-scripts-in-Emacs-lisp</id>
    <updated>2014-08-07T16:39:32Z</updated>
    <published>2014-08-06T14:27:58Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Writing scripts in Emacs-lisp]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/08/06/Writing-scripts-in-Emacs-lisp"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Addition based on Trevor's comment</a></li>
</ul>
</div>
</div>

<p>
I have written lots of script commands, mostly in Python, occasionally in bash. Today I learned you can also write them in emacs-lisp (<a href="http://www.emacswiki.org/emacs/EmacsScripts">http://www.emacswiki.org/emacs/EmacsScripts</a> ). There is an interesting wrinkle on the first line which specifies how to run the command, which is explained in the emacswiki page.
</p>

<p>
Here is an example script that just prints some information about Emacs and the command line args you pass to it. We use some Local variables at the end to make the script open in emacs-lisp mode for editing. $0 in shell language is the name of the script being run, so the header here simply loads the script into emacs, and then runs the main function. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">:;exec emacs -batch -l "$0" -f main "$@"

(defun main ()
  (print (version))
  (print (format "I did it. you passed in %s" command-line-args-left)))

;; Local Variables:
;; mode: emacs-lisp
;; End:
</pre>
</div>

<p>
We need to tangle this code block to get the script. 
<a href="org-babel-tangle">org-babel-tangle</a>
</p>

<p>
Since we do not have a regular shebang, we manually change the mode to make it executable, and then call the script with some arguments.
</p>

<div class="org-src-container">

<pre class="src src-sh">chmod +x test.el
./test.el arg1 arg2
</pre>
</div>

<pre class="example">
"GNU Emacs 22.1.1 (mac-apple-darwin)
 of 2014-06-05 on osx105.apple.com"

"I did it. you passed in (arg1 arg2)"
</pre>

<p>
Hahah! I guess the emacs on my path is an old one! Ironically, the Emacs I am writing in is much more modern (but not on the path).
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(version)
</pre>
</div>

<pre class="example">
GNU Emacs 24.3.1 (x86_64-apple-darwin, NS apple-appkit-1038.36)
 of 2013-03-13 on bob.porkrind.org
</pre>

<p>
And it is evidence I wrote this on a Mac. First Mac post ever.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Addition based on Trevor's comment</h2>
<div class="outline-text-2" id="text-1">
<p>
Also according to <a href="http://www.emacswiki.org/emacs/EmacsScripts">http://www.emacswiki.org/emacs/EmacsScripts</a> , there is the following option:
</p>

<pre class="example">
#!emacs --script
</pre>

<p>
as the shebang line. That did not work on my mac, but a small variation did with the absolute path to emacs. You still define the function in the script file, but you finally have to call the function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun main ()
  (print (version))
  (print (format "I did it. you passed in %s" command-line-args-left)))

(main)
;; Local Variables:
;; mode: emacs-lisp
;; End:
</pre>
</div>


<div class="org-src-container">

<pre class="src src-sh">./test2.el arg1 arg2 arg3
</pre>
</div>

<pre class="example">
"GNU Emacs 22.1.1 (mac-apple-darwin)
 of 2014-06-05 on osx105.apple.com"

"Called with (/usr/bin/emacs --no-splash -scriptload ./test2.el arg1 arg2 arg3)"

"I did it. you passed in (arg1 arg2 arg3)"
</pre>

<p>
Now, how do you do this python style so one file is a script and library at once? In python that is done with:
</p>

<div class="org-src-container">

<pre class="src src-python">def main ():
    ... put some module code here

if __name__ == '__main__':
    main()
</pre>
</div>

<p>
We can check the command line-args to see if there is a clue there.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun main ()
  (print (version))
  (print (format "Called with %s" command-line-args))
  (print (format "I did it. you passed in %s" command-line-args-left)))

(main)
;; Local Variables:
;; mode: emacs-lisp
;; End:
</pre>
</div>

<div class="org-src-container">

<pre class="src src-sh">./test3.el arg1
</pre>
</div>

<pre class="example">
"GNU Emacs 22.1.1 (mac-apple-darwin)
 of 2014-06-05 on osx105.apple.com"

"Called with (/usr/bin/emacs --no-splash -scriptload ./test3.el arg1)"

"I did it. you passed in (arg1)"
</pre>

<p>
And apparently, this means when called with &#x2013;script, we see "-scriptload" as a command line arg. Strange, but workable. We just look for that, and if we see it run as a script, and if not do nothing.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun main ()
  (print (version))
  (print (format "Called with %s" command-line-args))
  (print (format "I did it. you passed in %s" command-line-args-left)))

(when (member "-scriptload" command-line-args)
  (main))
</pre>
</div>

<p>
Here we run as a script.
</p>

<div class="org-src-container">

<pre class="src src-sh">./test4.el arg1
</pre>
</div>

<pre class="example">
"GNU Emacs 22.1.1 (mac-apple-darwin)
 of 2014-06-05 on osx105.apple.com"

"Called with (/usr/bin/emacs --no-splash -scriptload ./test4.el arg1)"

"I did it. you passed in (arg1)"
</pre>

<p>
Now, we try loading the file, and calling our function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(load-file "test4.el")
(main)
</pre>
</div>

<pre class="example">
I did it. you passed in nil
</pre>

<p>
Sweet. An emacs script and library in one. Now, I just need to get my modern emacs on the path!
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/08/06/Writing-scripts-in-Emacs-lisp.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Pandoc does org-mode now]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/07/17/Pandoc-does-org-mode-now" />
    <id>http://jkitchin.github.io/blog/2014/07/17/Pandoc-does-org-mode-now</id>
    <updated>2014-07-17T10:04:41Z</updated>
    <published>2014-07-17T10:04:41Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="uncategorized" />
    <summary type="html"><![CDATA[Pandoc does org-mode now]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/07/17/Pandoc-does-org-mode-now"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. A subsection with some equations</a></li>
<li><a href="#sec-2">2. A section with a figure</a></li>
<li><a href="#sec-3">3. A section with a table</a></li>
<li><a href="#sec-4">4. Some citations</a></li>
<li><a href="#sec-5">5. some source code</a></li>
</ul>
</div>
</div>

<p>
Pandoc (<a href="http://johnmacfarlane.net/pandoc/">http://johnmacfarlane.net/pandoc/</a> ) is a document converter. It does a pretty good job of converting a document in one format to another. Pandoc also knows about org-mode now, and can convert an org-file to a Word document! We are going to test it out in this post to see what it does well with.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> A subsection with some equations</h2>
<div class="outline-text-2" id="text-1">
<p>
Einstein showed us that \(E = mc^2\). 
</p>

<p>
A matrix looks like this:
</p>

\begin{equation}
\begin{matrix}
  a & b & c \\
  d & e & f \\
  g & h & i
 \end{matrix}
\end{equation}
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> A section with a figure</h2>
<div class="outline-text-2" id="text-2">
<p>
Here is a figure in the document.
</p>


<div class="figure">
<p><img src="/media/2014-07-17-Pandoc-does-org-mode-now/cos-plot.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A cosine function.</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> A section with a table</h2>
<div class="outline-text-2" id="text-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A simple table.</caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2</td>
<td class="right">4</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">9</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Some citations</h2>
<div class="outline-text-2" id="text-4">
<p>
For fun, a reference to the org-mode book <a href="#dominik-2010-org-mode">dominik-2010-org-mode</a>.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> some source code</h2>
<div class="outline-text-2" id="text-5">
<p>
here is a python block.
</p>

<div class="org-src-container">

<pre class="src src-python">print 'hello pandoc'
</pre>
</div>

<pre class="example">
hello pandoc
</pre>

<p>
and finally, we write a block that will convert this file to a word document.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(save-buffer)
(shell-command "pandoc -s -s org-to-word.org -o org-to-word.docx")
</pre>
</div>

<pre class="example">
0
</pre>

<p>
Now, here is that <a href="/media/2014-07-17-Pandoc-does-org-mode-now/org-to-word.docx">org-to-word.docx</a> 
</p>

<p>
it is pretty good, and blazing fast. The output is not quite as good as the native org to pdf (<a href="/media/2014-07-17-Pandoc-does-org-mode-now/org-to-word.pdf">org-to-word.pdf</a> ), but since the translation is happening outside of Emacs the results are still pretty impressive, and if you need a Word document there is no substitute <sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>. The simple equation was translated to a Word equation format (cool!) but the matrix did not show up in the word document, nor did the figure caption. The code does show up, but the lines are not numbered as they are in the pdf. The citation did not work out of the box. The User guide suggests it might be possible to get this to work with a citations extension though.
</p>

<p>
I am impressed that the Word document has proper section headings. Overall, my impression is that this is a very good way to get 90+% of the way to a finished word document with an org-source file!
</p>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p class="footpara">
Ok, there is the ODT export engine. So far I have not been able to make that export documents that Word can open though, and it takes more configuration than just installing Pandoc.
</p></div>


</div>
</div><p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/07/17/Pandoc-does-org-mode-now.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Org-mode is awesome]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/07/12/Org-mode-is-awesome" />
    <id>http://jkitchin.github.io/blog/2014/07/12/Org-mode-is-awesome</id>
    <updated>2014-07-14T16:31:42Z</updated>
    <published>2014-07-12T16:12:48Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org" />
    <summary type="html"><![CDATA[Org-mode is awesome]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/07/12/Org-mode-is-awesome"><![CDATA[



<p>
I made a video on Youtube (<a href="https://www.youtube.com/watch?v=fgizHHd7nOo">https://www.youtube.com/watch?v=fgizHHd7nOo</a> ) demonstrating how we use Emacs and org-mode. The source for that file can be found <a href="/media/2014-07-12-Org-mode-is-awesome/why-org-mode.org">here</a> .
</p>

<p>
There are some other good org-mode videos out there. Here are few:
</p>

<ul class="org-ul">
<li><a href="https://www.youtube.com/watch?v=oJTwQvgfgMM">Emacs Org-mode - a system for note-taking and project planning</a> (Carsten Dominik)
</li>
<li><a href="https://www.youtube.com/watch?v=6W82EdwQhxU">Hack Emacs - An Overview of Org Mode</a> 
</li>
<li><a href="https://www.youtube.com/watch?v=nsGYet02bEk">Hack Emacs - Org Mode In Depth: Managing Structure</a> 
</li>
<li><a href="http://www.youtube.com/watch?v=1-dUkyn_fZA">Emacs + org-mode + python in reproducible research; SciPy 2013 Presentation</a> 
</li>
<li><a href="http://www.youtube.com/watch?v=JyvpSVl4_dg">Using org-ref</a> 
</li>
<li><a href="http://vimeo.com/99167082">Emacs Org-mode Bibtex Screencast</a> 
</li>
</ul>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/07/12/Org-mode-is-awesome.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another parsing of links for citations with pre and post text.]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/06/26/Another-parsing-of-links-for-citations-with-pre-and-post-text" />
    <id>http://jkitchin.github.io/blog/2014/06/26/Another-parsing-of-links-for-citations-with-pre-and-post-text</id>
    <updated>2014-06-26T20:16:43Z</updated>
    <published>2014-06-26T20:16:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="org-ref" />
    <summary type="html"><![CDATA[Another parsing of links for citations with pre and post text.]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/06/26/Another-parsing-of-links-for-citations-with-pre-and-post-text"><![CDATA[



<p>
Some LaTeX citations look like \cite[pretext][post text]{key}. Here I explore parsing a link like <a href="#(pre text)(post text)key">(pre text)(post text)key</a>. Note you cannot use [] inside the link, as it breaks the link syntax. Also, these links must be wrapped in <code>[[]]</code> because of the parentheses and spaces in the parentheses. This is a very different approach than used <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/05/19/Exporting-citations-with-biblatex/">here</a> which used the description of the link to define the pre and post text. The disadvantage of that approach is that the key is hidden, whereas in this approach it is not; you can see the key and pre/post text.
</p>

<p>
The basic strategy will be to use a regexp to parse the link path. The regexp below is pretty hairy, but basically it looks for optional text in () and uses numbered groups to store what is found. Then, we use what we found to construct the LaTeX syntax. We redefine the function in org-ref that gets the key for clicking, and we redefine the cite format function. The result is that we retain the click functionality that shows us what the key refers to.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun org-ref-parse-key (s)
  "return pretext, posttext and bibtex key from a string like \"(pre text)(post text)bibtexkey\""
  (string-match "\\(?1:(\\(?2:[^)]*\\))\\)?\\(?3:(\\(?4:[^]]*\\))\\)?\\(?5:.*\\)" s)
  ;; return pretext postext key
  (list (match-string 2 s) (match-string 4 s) (match-string 5 s)))

(defun org-ref-get-bibtex-key-and-file (&amp;optional key)
  "returns the bibtex key and file that it is in. If no key is provided, get one under point"
 (interactive)
 (let ((org-ref-bibliography-files (org-ref-find-bibliography))
       (file))
   (unless key
     ;; get the key
     (setq key (nth 2 (org-ref-parse-key (org-ref-get-bibtex-key-under-cursor)))))
   (setq file     (catch 'result
		    (loop for file in org-ref-bibliography-files do
			  (if (org-ref-key-in-file-p key (file-truename file)) 
			      (throw 'result file)))))
   (cons key file)))

(defun org-ref-format-cite (keyword desc format)
   (cond
    ((eq format 'latex)
     (let* ((results (org-ref-parse-key keyword))
	    (pretext (nth 0 results))
	    (posttext (nth 1 results))
	    (key (nth 2 results)))
       (concat "\\cite" 
	       (when pretext (format "[%s]" pretext))
	       (when posttext (format "[%s]" posttext))
	       (format "{%s}" key))))))
</pre>
</div>

<pre class="example">
org-ref-format-cite
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-ref-format-cite "(pre text)(post text)key" nil 'latex)
</pre>
</div>

<pre class="example">
\cite[pre text][post text]{key}
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-ref-format-cite "(pre text)key" nil 'latex)
</pre>
</div>

<pre class="example">
\cite[pre text]{key}
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-ref-format-cite "key" nil 'latex)
</pre>
</div>

<pre class="example">
\cite{key}
</pre>

<p>
It looks like they all work! Let us test the links: <a href="#mehta-2014-ident-poten">mehta-2014-ident-poten</a>, <a href="#(pre text)mehta-2014-ident-poten">(pre text)mehta-2014-ident-poten</a> and <a href="#(pre text)(post text)biskup-2014-insul-ferrom-films">(pre text)(post text)biskup-2014-insul-ferrom-films</a>. a multiple citation <a href="#mehta-2014-ident-poten">mehta-2014-ident-poten</a>,<a href="#thompson-2014-co2-react">thompson-2014-co2-react</a>,<a href="#calle-vallejo-2013-number">calle-vallejo-2013-number</a>.
</p>

<p>
This seems to work from an export point of view. You can not mix multiple citations with this syntax, and I did not define the html export above. Otherwise, it looks like this might be a reasonable addition to org-ref.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/06/26/Another-parsing-of-links-for-citations-with-pre-and-post-text..org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using org-files like el-files]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/06/24/Using-org-files-like-el-files" />
    <id>http://jkitchin.github.io/blog/2014/06/24/Using-org-files-like-el-files</id>
    <updated>2014-06-24T21:34:15Z</updated>
    <published>2014-06-24T21:32:58Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Using org-files like el-files]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/06/24/Using-org-files-like-el-files"><![CDATA[


<p>
I wrote some emacs-lisp code in org-mode, and load them with org-babel-load-file. I thought it would be nice if there was load path for org-files, similar to the one for lisp files. Here I document what it might look like.
</p>

<p>
We need a load path to search for the org-file.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-load-path '("~/Dropbox/kitchingroup/jmax/"))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">~/Dropbox/kitchingroup/jmax/</td>
</tr>
</tbody>
</table>

<p>
Next, we need the function to do the loading. We need to find the org-file, and then load it.
</p>



<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun org-require (orgfile)
  "orgfile is a symbol to be loaded"
  (let ((org-file (concat (symbol-name orgfile) ".org"))
	(path))

  ;; find the org-file
  (catch 'result
    (loop for dir in org-load-path do
	  (when (file-exists-p
		 (setq path
		       (concat
			(directory-file-name dir)
			"/"
			org-file)))
	    (throw 'result path))))
  (org-babel-load-file path)))


(org-require 'org-ref)
</pre>
</div>

<pre class="example">
Loaded ~/Dropbox/kitchingroup/jmax/org-ref.el
</pre>

<p>
That looks pretty simple. You do need write access to the location where the org-file is though. Let us look at a version that copies the file to a temporary directory. For some reason, I am not able to use org-babel-load-file with this. But, it does look like I can tangle the file, and assuming (big assumption) that the file tangles to a regularly named .el file, this seems to work too.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun org-require (orgfile)
  "orgfile is a symbol to be loaded"
  (let ((org-file (concat (symbol-name orgfile) ".org"))
        (el-file (concat (symbol-name orgfile) ".el"))
	(path))

  ;; find the org-file
  (catch 'result
    (loop for dir in org-load-path do
	  (when (file-exists-p
		 (setq path
		       (concat
			(directory-file-name dir)
			"/"
			org-file)))
	    (throw 'result path))))
  (copy-file path temporary-file-directory t)

  (org-babel-tangle-file (concat temporary-file-directory (file-name-nondirectory path)))
  (load-file (concat temporary-file-directory el-file))
))

(org-require 'org-ref)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
This actually seems pretty reasonable. I have not thought about complications but for simple cases, e.g. single org-file, it looks ok.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/06/24/Using-org-files-like-el-files.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Better integration of org-mode and email]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/06/08/Better-integration-of-org-mode-and-email" />
    <id>http://jkitchin.github.io/blog/2014/06/08/Better-integration-of-org-mode-and-email</id>
    <updated>2014-06-08T20:57:53Z</updated>
    <published>2014-06-08T20:57:53Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="email" />
    <summary type="html"><![CDATA[Better integration of org-mode and email]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/06/08/Better-integration-of-org-mode-and-email"><![CDATA[


<p>
I like to email org-mode headings and content to people. It would be nice to have some records of when a heading was sent, and to whom. We store this information in a heading. It is pretty easy to write a simple function that emails a selected region.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun email-region (start end)
  "Send region as the body of an email."
  (interactive "r")
  (let ((content (buffer-substring start end)))
    (compose-mail)
    (message-goto-body)
    (insert content)
    (message-goto-to)))
</pre>
</div>

<p>
that function is not glamorous, and you still have to fill in the email fields, and unless you use gnus and org-contacts, the only record keeping is through the email provider. 
</p>

<p>
What I would like is to send a whole heading in an email. The headline should be the subject, and if there are TO, CC or BCC properties, those should be used. If there is <i>no TO</i>, then I want to grab the TO from the email after you enter it and store it as a property. You should be able to set OTHER-HEADERS as a property (this is just for fun. There is no practical reason for this yet). After you send the email, it should record in the heading when it was sent.
</p>

<p>
It turned out that is a relatively tall order. While it is easy to setup the email if you have everything in place, it is tricky to get the information on TO and the time sent <i>after</i> the email is sent. Past lispers had a lot of ideas to make this possible, and a day of digging got me to the answer. You can specify some "action" functions that get called at various times, e.g. after sending, and a return action when the compose window is done. Unfortunately, I could not figure out any way to do things except to communicate through some global variables.
</p>

<p>
So here is the code that lets me send org-headings, with the TO, CC, BCC properties, and that records when I sent the email after it is sent.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defvar *email-heading-point* nil
  "global variable to store point in for returning")

(defvar *email-to-addresses* nil
  "global variable to store to address in email")

(defun email-heading-return ()
  "after returning from compose do this"
  (switch-to-buffer (marker-buffer  *email-heading-point*))
  (goto-char (marker-position  *email-heading-point*))
  (setq *email-heading-point* nil)
  (org-set-property "SENT-ON" (current-time-string))
  ;; reset this incase you added new ones
  (org-set-property "TO" *email-to-addresses*)
  )

(defun email-send-action ()
  "send action for compose-mail"
  (setq *email-to-addresses* (mail-fetch-field "To")))

(defun email-heading ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

save when it was sent as s SENT property. this is overwritten on
subsequent sends. could save them all in a logbook?
"
  (interactive)
  ; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (org-mark-subtree)
  (let ((content (buffer-substring (point) (mark)))
	(TO (org-entry-get (point) "TO" t))
	(CC (org-entry-get (point) "CC" t))
	(BCC (org-entry-get (point) "BCC" t))
	(SUBJECT (nth 4 (org-heading-components)))
	(OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
	(continue nil)
	(switch-function nil)
	(yank-action nil)
	(send-actions '((email-send-action . nil)))
	(return-action '(email-heading-return)))
    
    (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
    (message-goto-body)
    (insert content)
    (when CC
      (message-goto-cc)
      (insert CC))
    (when BCC
      (message-goto-bcc)
      (insert BCC))
    (if TO
	(message-goto-body)
      (message-goto-to))       
    ))
</pre>
</div>

<p>
This works pretty well for me. Since I normally use this to send tasks to people, it keeps the task organized where I want it, and I can embed an org-id in the email so if the person replies to it telling me the task is done, I can easily navigate to the task to mark it off. Pretty handy.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/06/08/Better-integration-of-org-mode-and-email.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Finding emails from tags from org-contacts database]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/06/05/Finding-emails-from-tags-from-org-contacts-database" />
    <id>http://jkitchin.github.io/blog/2014/06/05/Finding-emails-from-tags-from-org-contacts-database</id>
    <updated>2014-06-05T14:42:21Z</updated>
    <published>2014-06-05T14:42:21Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Finding emails from tags from org-contacts database]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/06/05/Finding-emails-from-tags-from-org-contacts-database"><![CDATA[



<p>
Org-mode has a contacts manager called org-contacts. If you set it up, you can use it to insert email addresses using a tag in message-mode. Out of the box though, it only works on one tag. You cannot do something like +group-phd to get entries tagged group but not tagged phd. Here we develop a function to do that for us. 
</p>

<p>
We could use the org-files and map the headings to do this, but org-contacts has already done this and has a database we can use instead. We get the database from org-contacts-filter. Here is the first entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(car (org-contacts-filter))
</pre>
</div>

<p>
(Chris Jones #&lt;marker at 1 in contacts.org&gt; ((FILE . c:/Users/jkitchin/Dropbox/org-mode/contacts.org) (TAGS . :co2:) (ALLTAGS . :co2:) (BLOCKED . ) (COMPANY . Georgia Tech, Chemical Engineering) (EMAIL . Christopher.Jones@chbe.gatech.edu) (CATEGORY . contacts)))
</p>

<p>
It looks like we have (name marker (cons cells)) for each entry. We can get the tags associated with that entry like this.
</p>

<p>
We can get the tags for an entry with this code:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(let ((entry (car (org-contacts-filter))))
  (cdr (assoc "TAGS" (nth 2 entry))))
</pre>
</div>

<pre class="example">
:co2:
</pre>

<p>
We will use some code for org tags. Notably, from a tags expression, we can automatically generate code that tells us if we have a match. Here we generate the code to test for a match on "+co2-group".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(let ((todo-only nil))
  (cdr (org-make-tags-matcher "+co2-group")))
</pre>
</div>

<p>
(and (progn (setq org-cached-props nil) (and (not (member group tags-list)) (member co2 tags-list))) t)
</p>

<p>
Note we will have to bind tags-list before we eval this.
</p>

<p>
So to use it, we need to split the tags from an org-contacts entry into a list of strings. It appears each entry just has the tag string, so we split the substring (skipping first and last characters) by ":" to get the list. We do that here, and test if a list of tags containing "co2" is matched by the expression "co2-junior".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(let* ((tags-list (split-string (substring ":co2:" 1 -1) ":"))
       (todo-only nil))
  (eval (cdr (org-make-tags-matcher "co2-junior"))))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
It is. So, now we just need to loop through the database, and collect entries that match.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(defun insert-emails-from-tags (tag-expression)
  "insert emails from org-contacts that match the tags expression. For example:
group-phd will match entries tagged with group but not with phd."
  (interactive "sTags: ")
  (insert
   (mapconcat 'identity
	      (loop for contact in (org-contacts-filter)
		    for contact-name = (car contact)
		    for email = (org-contacts-strip-link (car (org-contacts-split-property
							       (or
								(cdr (assoc-string org-contacts-email-property
										   (caddr contact)))
								""))))
		    for tags = (cdr (assoc "TAGS" (nth 2 contact)))
		    for tags-list = (if tags
					(split-string (substring (cdr (assoc "TAGS" (nth 2 contact))) 1 -1) ":")
				      '())
		    if (let ((todo-only nil))
			 (eval (cdr (org-make-tags-matcher tag-expression))))
		    
		    collect (org-contacts-format-email contact-name email))
	      ",")))
</pre>
</div>

<p>
This is not quite completion in message-mode, but it is good enough. You put your cursor in the To field, and run that command, enter the tag expression, and you will get your emails!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/06/05/Finding-emails-from-tags-from-org-contacts-database.org">org-mode source</a><p><p>Org-mode version = 8.2.6</p>]]></content>
  </entry>
</feed>
