<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-02-09T20:23:40Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Sorting fields in bibtex entries]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/09/Sorting-fields-in-bibtex-entries" />
    <id>http://jkitchin.github.io/blog/2014/02/09/Sorting-fields-in-bibtex-entries</id>
    <updated>2014-02-09T15:22:18Z</updated>
    <published>2014-02-09T15:22:18Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bibtex" />
    <summary type="html"><![CDATA[Sorting fields in bibtex entries]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/09/Sorting-fields-in-bibtex-entries"><![CDATA[



<p>
I like consistency. In particular, for bibtex entries, I would like
all the fields to be in the same order, and in all caps. Why? Because then I know where to look, and incorrect entries stand out more easily. My current
bibtex file does not look like this! That is a result of adding bibtex
entries from various journals, which all have different
conventions. Today, I am going to look at a way to achieve what I
want.
</p>

<p>
The principle idea is that we will parse the bibtex file into a list
of entries represented by a convenient data structure. Then, we will
format each entry the way we want, and print the result back out to a
new file. I will use <a href="https://bibtexparser.readthedocs.org/en/latest/index.html">bibtexparser</a> and python to do this. 
</p>

<p>
Let us examine what bibtexparser does for us. Here we read in a file
and get the entries. Each entry is represented as a dictionary.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> bibtexparser.bparser <span style="color: #8b0000;">import</span> BibTexParser

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'../../CMU/proposals/link-to-2014/bo2-polymorphs/bo2-polymorphs.bib'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> bibfile:
    <span style="color: #8b008b;">bp</span> = BibTexParser(bibfile)
    <span style="color: #8b008b;">entries</span> = bp.get_entry_list()

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">look at the first entry</span>
<span style="color: #8b0000;">print</span> entries[0]
</pre>
</div>

<pre class="example">
{u'title': u'Effect of growth conditions on formation of TiO2-II\nthin films in atomic layer deposition process', u'journal': u'Journal of Crystal Growth', u'author': u'Aarik, J. and Aidla, A. and Sammelselg, V. and\nUustare, T.', u'number': u'3', 'id': 'aarik-1997-effec-tio2', u'volume': u'181', u'link': u'&lt;Go to ISI&gt;://A1997YD52700011', u'year': u'1997', 'type': u'article', u'pages': u'259-264'}
</pre>


<p>
Let us take a moment to analyze our bibtex file. Let us see how many
types of entries we have. That gives a chance to practice <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/05/29/Getting-a-dictionary-of-counts/">counting</a> .
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> bibtexparser.bparser <span style="color: #8b0000;">import</span> BibTexParser

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'../../CMU/proposals/link-to-2014/bo2-polymorphs/bo2-polymorphs.bib'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> bibfile:
    <span style="color: #8b008b;">bp</span> = BibTexParser(bibfile)
    <span style="color: #8b008b;">entries</span> = bp.get_entry_list()

<span style="color: #8b008b;">types</span> = [entry[<span style="color: #228b22;">'type'</span>] <span style="color: #8b0000;">for</span> entry <span style="color: #8b0000;">in</span> entries]
<span style="color: #8b0000;">print</span> <span style="color: #cd0000;">dict</span>((typ, types.count(typ)) <span style="color: #8b0000;">for</span> typ <span style="color: #8b0000;">in</span> types)
</pre>
</div>

<pre class="example">
{u'inbook': 2, u'article': 90, u'book': 4, u'misc': 3, u'phdthesis': 1}
</pre>

<p>
Indeed, there are a lot of entries that we do not want to do by hand. Here is the order I would like the fields to be for articles. A similar order for the other types would be fine too.
</p>

<pre class="example">
AUTHOR
TITLE
JOURNAL
VOLUME
ISSUE
PAGES
YEAR
DOI
URL or link
other fields
</pre>

<p>
Bibtex lets you define arbitrary fields, and we do not want to lose
these in the entries. I have for example defined fields for the path to a pdf, or to a notes file in some files. We will use python sets to handle this for
us. With sets, we can conveniently compute the difference in fields between our ordered list, and the entry. Here is an example. We have a master list of keys, and an entry
with extra keys. We use the <code>difference</code> function to get the list of
extra keys. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">entry</span> = <span style="color: #cd0000;">set</span>([<span style="color: #228b22;">'author'</span>, <span style="color: #228b22;">'title'</span>, <span style="color: #228b22;">'journal'</span>, <span style="color: #228b22;">'field1'</span>])
<span style="color: #8b008b;">master</span> = <span style="color: #cd0000;">set</span>([<span style="color: #228b22;">'author'</span>, <span style="color: #228b22;">'title'</span>])

<span style="color: #8b0000;">print</span> entry.difference(master)
</pre>
</div>

<pre class="example">
set(['journal', 'field1'])
</pre>

<p>
So, we will use the list we want the order of, and then add the rest
of the keys.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> bibtexparser.bparser <span style="color: #8b0000;">import</span> BibTexParser

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'../../CMU/proposals/link-to-2014/bo2-polymorphs/bo2-polymorphs.bib'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> bibfile:
    <span style="color: #8b008b;">bp</span> = BibTexParser(bibfile)
    <span style="color: #8b008b;">entries</span> = bp.get_entry_list()

<span style="color: #8b008b;">field_order</span> = [<span style="color: #228b22;">'author'</span>, <span style="color: #228b22;">'title'</span>, <span style="color: #228b22;">'journal'</span>, <span style="color: #228b22;">'volume'</span>, <span style="color: #228b22;">'issue'</span> <span style="color: #228b22;">'pages'</span>, <span style="color: #228b22;">'year'</span>, <span style="color: #228b22;">'doi'</span>, <span style="color: #228b22;">'url'</span>, <span style="color: #228b22;">'link'</span>]

<span style="color: #8b008b;">entry_keys</span> = <span style="color: #cd0000;">set</span>(entries[0].keys())
<span style="color: #8b0000;">print</span> entry_keys.difference(field_order)
</pre>
</div>
<pre class="example">
set([u'number', 'id', 'type', u'pages'])
</pre>

<p>
You can see a subtlety here, the pages key is a unicode string, but
our field<sub>order</sub> is a regular string. Also, number is a unicode
string. It appears that all the keys are unicode except type and id. In the next block we will address that. 
</p>

<p>
You should probably go ahead and <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/01/08/Finding-bibtex-entries-with-non-ascii-characters/">remove non-ascii characters</a> from your bib-file. We got lucky with this entry, but some entries have non-ascii characters and these cause errors. 
</p>

<p>
So we need to specify the order of fields, how they should be formatted, and whether we should wrap the field contents into a nice block. We do that in the next block. Note that in the formats we use double {{ to get a literal { when we use string formatting. We use the formats to wrap the fields in brackets or quotes as needed. We use the textwrap module to neatly wrap multiline fields with indentation of the second line and beyond. By some iteration, I have made this print an entry that emacs-bibtex likes, and does not need to further reformat.
</p>

<p>
WARNING: The code below creates new files, and deletes files. Make sure you pay attention to this to avoid losing your own files. You do keep your bib-file under version control right ;).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> bibtexparser.bparser <span style="color: #8b0000;">import</span> BibTexParser
<span style="color: #8b0000;">import</span> textwrap

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'../../CMU/proposals/link-to-2014/bo2-polymorphs/bo2-polymorphs.bib'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> bibfile:
    <span style="color: #8b008b;">bp</span> = BibTexParser(bibfile)
    <span style="color: #8b008b;">entries</span> = bp.get_entry_list()

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">field, format, wrap or not</span>
<span style="color: #8b008b;">field_order</span> = [(u<span style="color: #228b22;">'author'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'title'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'journal'</span>,<span style="color: #228b22;">'"{0}",\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'volume'</span>,<span style="color: #228b22;">'{0},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'number'</span>, <span style="color: #228b22;">'{0},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'pages'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'year'</span>, <span style="color: #228b22;">'{0},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'doi'</span>,<span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">False</span>),
               (u<span style="color: #228b22;">'url'</span>,<span style="color: #228b22;">'{{\url{{{0}}}}},\n'</span>, <span style="color: #cd0000;">False</span>),
               (u<span style="color: #228b22;">'link'</span>,<span style="color: #228b22;">'{{\url{{{0}}}}},\n'</span>, <span style="color: #cd0000;">False</span>)]

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">pick an entry, this time second to last one</span>
<span style="color: #8b008b;">entry</span> = entries[-2]
<span style="color: #8b008b;">keys</span> = <span style="color: #cd0000;">set</span>(entry.keys())

<span style="color: #8b008b;">extra_fields</span> = keys.difference([f[0] <span style="color: #8b0000;">for</span> f <span style="color: #8b0000;">in</span> field_order])

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">we do not want these in our entry, they go in the "header"</span>
extra_fields.remove(<span style="color: #228b22;">'type'</span>)
extra_fields.remove(<span style="color: #228b22;">'id'</span>)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now build up our entry string</span>
<span style="color: #8b008b;">s</span> = <span style="color: #228b22;">'@{type}{{{id},\n'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #cd0000;">type</span>=entry[<span style="color: #228b22;">'type'</span>].upper(),
                              <span style="color: #cd0000;">id</span>=entry[<span style="color: #228b22;">'id'</span>])

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now handle the ordered fields, then the extra fields</span>
<span style="color: #8b0000;">for</span> field, fmt, wrap <span style="color: #8b0000;">in</span> field_order:
    <span style="color: #8b0000;">if</span> field <span style="color: #8b0000;">in</span> entry:
        <span style="color: #8b008b;">s1</span> = <span style="color: #228b22;">'  {0} ='</span>.<span style="color: #cd0000;">format</span>(field.upper())
        <span style="color: #8b008b;">s2</span> = fmt.<span style="color: #cd0000;">format</span>(entry[field])
        <span style="color: #8b008b;">s3</span> = <span style="color: #228b22;">'{0:17s}{1}'</span>.<span style="color: #cd0000;">format</span>(s1, s2)
        <span style="color: #8b0000;">if</span> wrap:
            <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">fill seems to remove trailing '\n'</span>
            <span style="color: #8b008b;">s3</span> = textwrap.fill(s3, subsequent_indent=<span style="color: #228b22;">' '</span>*18, width=70) + <span style="color: #228b22;">'\n'</span>
        <span style="color: #8b008b;">s</span> += s3  

<span style="color: #8b0000;">for</span> field <span style="color: #8b0000;">in</span> extra_fields:
    <span style="color: #8b0000;">if</span> field <span style="color: #8b0000;">in</span> entry:
        <span style="color: #8b008b;">s1</span> = <span style="color: #228b22;">'  {0} ='</span>.<span style="color: #cd0000;">format</span>(field.upper())
        <span style="color: #8b008b;">s2</span> = entry[field]
        <span style="color: #8b008b;">s3</span> = <span style="color: #228b22;">'{0:17s}{{{1}}}'</span>.<span style="color: #cd0000;">format</span>(s1, s2)
        <span style="color: #8b008b;">s3</span> = textwrap.fill(s3, subsequent_indent=<span style="color: #228b22;">' '</span>*18, width=70) + <span style="color: #228b22;">'\n'</span>
        <span style="color: #8b008b;">s</span> += s3  

<span style="color: #8b008b;">s</span> += <span style="color: #228b22;">'}\n\n'</span>

<span style="color: #8b0000;">print</span> s
</pre>
</div>

<pre class="example">
@ARTICLE{yang-2008-anatas-tio2,
  AUTHOR =       {Yang, H. G. and Sun, C. H. and Qiao, S. Z. and Zou,
                  J. and Liu, G. and Smith, S. C. and Cheng, H. M. and
                  Lu, G. Q.},
  TITLE =        {Anatase \ce{TiO_2} single crystals with a large
                  percentage of reactive facets},
  JOURNAL =      "Nature",
  VOLUME =       453,
  NUMBER =       7195,
  PAGES =        {638-U4},
  YEAR =         2008,
  DOI =          {10.1038/nature06964},
  LINK =         {\url{http://www.nature.com/nature/journal/v453/n7195/pdf/nature06964.pdf}},
  KEYWORD =      {TOTAL-ENERGY CALCULATIONS WAVE BASIS-SET
                  HYDROTHERMAL CONDITIONS TITANIUM-DIOXIDE SURFACE
                  OXIDE NANOSTRUCTURES NANOPARTICLES NANOCRYSTALS
                  EFFICIENCY}
}
</pre>

<p>
That looks pretty good. Now, we are ready to try the whole file. We simply loop through all the entries, and append the string to a file for each entry. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> bibtexparser.bparser <span style="color: #8b0000;">import</span> BibTexParser
<span style="color: #8b0000;">import</span> os, textwrap

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'../../CMU/proposals/link-to-2014/bo2-polymorphs/bo2-polymorphs.bib'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> bibfile:
    <span style="color: #8b008b;">bp</span> = BibTexParser(bibfile)
    <span style="color: #8b008b;">entries</span> = bp.get_entry_list()

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">field, format, wrap or not</span>
<span style="color: #8b008b;">field_order</span> = [(u<span style="color: #228b22;">'author'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'title'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'journal'</span>,<span style="color: #228b22;">'"{0}",\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'volume'</span>,<span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'number'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'pages'</span>, <span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'year'</span>, <span style="color: #228b22;">'{0},\n'</span>, <span style="color: #cd0000;">True</span>),
               (u<span style="color: #228b22;">'doi'</span>,<span style="color: #228b22;">'{{{0}}},\n'</span>, <span style="color: #cd0000;">False</span>),
               (u<span style="color: #228b22;">'url'</span>,<span style="color: #228b22;">'{{\url{{{0}}}}},\n'</span>, <span style="color: #cd0000;">False</span>),
               (u<span style="color: #228b22;">'link'</span>,<span style="color: #228b22;">'{{\url{{{0}}}}},\n'</span>, <span style="color: #cd0000;">False</span>)]

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">rm file if it exists. this is a new file, not our bibliography!</span>
<span style="color: #8b0000;">if</span> os.path.exists(<span style="color: #228b22;">'bib.bib'</span>): os.unlink(<span style="color: #228b22;">'bib.bib'</span>)

<span style="color: #8b0000;">for</span> entry <span style="color: #8b0000;">in</span> entries:
    
    <span style="color: #8b008b;">keys</span> = <span style="color: #cd0000;">set</span>(entry.keys())

    <span style="color: #8b008b;">extra_fields</span> = keys.difference([f[0] <span style="color: #8b0000;">for</span> f <span style="color: #8b0000;">in</span> field_order])
    <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">we do not want these in our entry</span>
    extra_fields.remove(<span style="color: #228b22;">'type'</span>)
    extra_fields.remove(<span style="color: #228b22;">'id'</span>)

    <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now build up our entry string</span>
    <span style="color: #8b008b;">s</span> = <span style="color: #228b22;">'@{type}{{{id},\n'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #cd0000;">type</span>=entry[<span style="color: #228b22;">'type'</span>].upper(),
                                  <span style="color: #cd0000;">id</span>=entry[<span style="color: #228b22;">'id'</span>])

    <span style="color: #8b0000;">for</span> field, fmt, wrap <span style="color: #8b0000;">in</span> field_order:
        <span style="color: #8b0000;">if</span> field <span style="color: #8b0000;">in</span> entry:
            <span style="color: #8b008b;">s1</span> = <span style="color: #228b22;">'  {0} ='</span>.<span style="color: #cd0000;">format</span>(field.upper())
            <span style="color: #8b008b;">s2</span> = fmt.<span style="color: #cd0000;">format</span>(entry[field])
            <span style="color: #8b008b;">s3</span> = <span style="color: #228b22;">'{0:17s}{1}'</span>.<span style="color: #cd0000;">format</span>(s1, s2)
            <span style="color: #8b0000;">if</span> wrap:
                <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">fill seems to remove trailing '\n'</span>
                <span style="color: #8b008b;">s3</span> = textwrap.fill(s3, subsequent_indent=<span style="color: #228b22;">' '</span>*18, width=70) + <span style="color: #228b22;">'\n'</span>
            <span style="color: #8b008b;">s</span> += s3  

    <span style="color: #8b0000;">for</span> field <span style="color: #8b0000;">in</span> extra_fields:
        <span style="color: #8b0000;">if</span> field <span style="color: #8b0000;">in</span> entry:
            <span style="color: #8b008b;">s1</span> = <span style="color: #228b22;">'  {0} ='</span>.<span style="color: #cd0000;">format</span>(field.upper())
            <span style="color: #8b008b;">s2</span> = entry[field]
            <span style="color: #8b008b;">s3</span> = <span style="color: #228b22;">'{0:17s}{{{1}}}'</span>.<span style="color: #cd0000;">format</span>(s1, s2)
            <span style="color: #8b008b;">s3</span> = textwrap.fill(s3, subsequent_indent=<span style="color: #228b22;">' '</span>*18, width=70) + <span style="color: #228b22;">'\n'</span>
            <span style="color: #8b008b;">s</span> += s3  

    <span style="color: #8b008b;">s</span> += <span style="color: #228b22;">'}\n\n'</span>

    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'bib.bib'</span>, <span style="color: #228b22;">'a'</span>) <span style="color: #8b0000;">as</span> f:
        f.write(s)
</pre>
</div>

<p>
This results in <a href="/media/2014-02-09-Sorting-fields-in-bibtex-entries/bib.bib">bib.bib</a> with 100 entries, which according to emacs is a syntactically correct bibtex file, and which builds this bibliography <a href="/media/2014-02-09-Sorting-fields-in-bibtex-entries/bib.pdf">bib.pdf</a> , which also has 100 entries. That usually means everything is in order (minor intention of pun there). More importantly, the fields are ordered the way I want them! 
</p>

<p>
Getting to this point was an iterative process. You will want to make sure the original bib file is under version control or backed up someway, in case something happens during this transformation! 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/09/Sorting-fields-in-bibtex-entries.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Separating code blocks from results in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/08/Separating-code-blocks-from-results-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/02/08/Separating-code-blocks-from-results-in-org-mode</id>
    <updated>2014-02-08T09:15:39Z</updated>
    <published>2014-02-08T08:54:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Separating code blocks from results in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/08/Separating-code-blocks-from-results-in-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Appendix of code</a>
<ul>
<li><a href="#sec-1-1">1.1. Area of a circle</a></li>
<li><a href="#sec-1-2">1.2. Hello function</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
I often put my code blocks right where I need them in my org documents. It usually has a section explaining what I want to do, then the code block that implements the idea, following by the output. Sometimes the code blocks are long, however, and it might be desirable for that code to be in an appendix. <sup><a id="fnr.1" name="fnr.1" class="footref" href="#fn.1">1</a></sup>
</p>

<p>
Org-mode enables this with #+CALL. For example, I have a function named <code>circle-area</code> in the appendix of this post that calculates the area of a circle given its radius. The function is "named" by a line like this:
</p>

<pre class="example">
#+name: function-name
</pre>

<p>
I can use the function like this:
</p>

<pre class="example">
#+CALL: circle-area(1)
</pre>

<pre class="example">
3.14159265359
</pre>

<p>
That is pretty nice. You can separate the code out from the main document. You still have to put the #+CALL: line in though. It may be appropriate to put a call inline with your text. If you add the following sentence, and put your cursor on the call<sub>circle</sub>-area and press C-c C-c, the output is put in verbatim markers right after it. 
</p>

<pre class="example">
The area of a circle with unit radius is call_circle-area(1).
</pre>

<p>
The area of a circle with unit radius is <code>3.14159265359</code>. 
</p>

<p>
Here is another interesting way to do it. We can specify a named results block. Let us consider another function named <code>hello-block</code> that prints output. We specify a named results block like this:
</p>

<pre class="example">
#+RESULTS: function-name
</pre>

<p>
Now, whenever you execute that block, the results will get put where this line is like this.
</p>

<pre class="example">
hello John
</pre>

<p>
These could be useful approaches to making the "top" of your document cleaner, with less code in it. The code of course is still in the document, but at the end, in an appendix for example. This kind of separation might make it a little harder to find the code, and to reevaluate it,<sup><a id="fnr.2" name="fnr.2" class="footref" href="#fn.2">2</a></sup> but it might improve the readability for others. 
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Appendix of code</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Area of a circle</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-python" id="circle-area"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">return</span> np.pi * r**2
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Hello function</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">

<pre class="src src-python" id="hello-block"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'hello '</span> + name
</pre>
</div>
</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" name="fn.1" class="footnum" href="#fnr.1">1</a></sup> <p>
I know I can pretty conveniently collapse a code block by pressing tab on the header. Sometimes that is not enough.
</p></div>

<div class="footdef"><sup><a id="fn.2" name="fn.2" class="footnum" href="#fnr.2">2</a></sup> <p>
It is not much harder, C-s will let you search for the named block. I do not know if there are nice convenient navigation commands for this.
</p></div>


</div>
</div><p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/08/Separating-code-blocks-from-results-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication in Applied Materials and Interfaces]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/06/New-publication-in-Applied-Materials-and-Interfaces" />
    <id>http://jkitchin.github.io/blog/2014/02/06/New-publication-in-Applied-Materials-and-Interfaces</id>
    <updated>2014-02-06T16:04:06Z</updated>
    <published>2014-02-06T16:04:06Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <summary type="html"><![CDATA[New publication in Applied Materials and Interfaces]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/06/New-publication-in-Applied-Materials-and-Interfaces"><![CDATA[


<p>
<b>Identifying Potential BO2 Oxide Polymorphs for Epitaxial Growth Candidates</b>,
by Prateek Mehta, Paul A. Salvador, and John R. Kitchin
<a href="http://pubs.acs.org/doi/full/10.1021/am4059149">http://pubs.acs.org/doi/full/10.1021/am4059149</a> 
</p>

<p>
Transition metal dioxides (BO2) exhibit a number of polymorphic structures with distinct properties, but the isolation of different polymorphs for a given composition is carried out using trial and error experimentation. We present computational studies of the relative stabilities and equations of state for six polymorphs (anatase, brookite, rutile, columbite, pyrite, and fluorite) of five different BO2 dioxides (B = Ti, V, Ru, Ir, and Sn). These properties were computed in a consistent fashion using several exchange correlation functionals within the density functional theory formalism, and the effects of the different functionals are discussed relative to their impact on predictive synthesis. We compare the computational results to prior observations of high-pressure synthesis and epitaxial film growth and then use this discussion to predict new accessible polymorphs in the context of epitaxial stabilization using isostructural substrates. For example, the relative stabilities of the columbite polymorph for VO2 and RuO2 are similar to those of TiO2 and SnO2, the latter two of which have been previously stabilized as epitaxial films.
</p>

<p>
As with other recent papers, the supporting information file contains embedded data files that enable the reproduction of the data and figures in the paper.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/06/New-publication-in-Applied-Materials-and-Interfaces.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Invisible text in emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/06/Invisible-text-in-emacs" />
    <id>http://jkitchin.github.io/blog/2014/02/06/Invisible-text-in-emacs</id>
    <updated>2014-02-06T09:03:02Z</updated>
    <published>2014-02-06T09:02:44Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Invisible text in emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/06/Invisible-text-in-emacs"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#beginner">1. subsection 1</a></li>
<li><a href="#sec-2">2. subsection 2</a></li>
<li><a href="#sec-3">3. subsection 3</a></li>
</ul>
</div>
</div>
<p>
Emacs supports <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Invisible-Text.html">invisible text</a> . In other words, you can use code to set properties on text in a buffer that make it visible, or invisible. You can use code to change the invisibility properties of text. 
</p>

<p>
I have been exploring ways to conditionally navigate in org documents using links. These links may validate that some property has been set in a heading, for example. An alternative approach is to make regions visible, depending on some criteria. That is what we do today. You will probably want to see this  <a href="/media/2014-02-06-Invisible-text-in-emacs/invisible-text.swf">video</a> , since what happens in this post is dynamic, and you will not see visible and invisible text.
</p>

<p>
What I have below here are a set of headings with properties that indicate what "level" they are at: beginner, medium and advanced. 
First, we mark each org subtree  with an overlay that has an 'invisible property that contains the "level". Then, we add the "level" to the list of symbols that marks invisible sections.  If you run this block, the headings all disappear.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-map-entries (<span style="color: #8b0000;">lambda</span> () 
                   (<span style="color: #8b0000;">let</span> ((level (org-entry-get (point) <span style="color: #228b22;">"level"</span>))
                          (symbol-level))
                     (<span style="color: #8b0000;">when</span> level
                       (setq symbol-level (intern level))
                       (org-mark-subtree)                 
                       (overlay-put (make-overlay (point) (mark))
                                    'invisible 
                                    symbol-level)
                       <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">make regions with symbol-level invisible</span>
                       (add-to-invisibility-spec `(,symbol-level))))))
</pre>
</div>

<p>
Now, we can selectively make them appear with these links.
</p>

<p>
<pre>elisp:(remove-from-invisibility-spec '(beginner))</pre> 
</p>

<p>
<pre>elisp:(remove-from-invisibility-spec '(medium))</pre> 
</p>

<p>
<pre>elisp:(remove-from-invisibility-spec '(advanced))</pre> 
</p>

<p>
I imagine this could be useful to show selective content based on user choices. I am not sure it is better than links to external files. I imagine you would have to open this org file by some elisp command that would run the block at the top to make everything invisible, and then show it to the user. You could definitely build in more complex code to determine if a user was allowed to open a section. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">level2-p</span> ()
  <span style="color: #228b22;">"return if user is ready for level 2 based on value of property named correct"</span>
  (interactive)
  (<span style="color: #8b0000;">save-excursion</span>
    (org-open-link-from-string <span style="color: #228b22;">"[[#beginner]]"</span>)
    (<span style="color: #8b0000;">let</span> ((val (org-entry-get (point) <span style="color: #228b22;">"correct"</span>)))
      (<span style="color: #8b0000;">if</span> (and val (string= val <span style="color: #228b22;">"true"</span>))
          t
        nil))))
</pre>
</div>

<pre class="example">
level2-p
</pre>

<p>
Now, we can build this link: <pre>elisp:(when (level2-p) (remove-from-invisibility-spec '(medium)))</pre> 
</p>

<p>
This will show the medium level, provided we have already opened the beginner level and set the property value correctly.
</p>

<div id="outline-container-beginner" class="outline-2">
<h2 id="beginner"><a id="sec-1"></a><span class="section-number-2">1</span> subsection 1</h2>
<div class="outline-text-2" id="text-beginner">
<p>
some text in 1
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> subsection 2</h2>
<div class="outline-text-2" id="text-2">
<p>
more text in 2
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> subsection 3</h2>
<div class="outline-text-2" id="text-3">
<p>
last section 3
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/06/Invisible-text-in-emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Add time to a deadline]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/05/Add-time-to-a-deadline" />
    <id>http://jkitchin.github.io/blog/2014/02/05/Add-time-to-a-deadline</id>
    <updated>2014-02-05T09:41:04Z</updated>
    <published>2014-02-05T09:41:04Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Add time to a deadline]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/05/Add-time-to-a-deadline"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. s1</a></li>
<li><a href="#sec-2">2. s1</a></li>
<li><a href="#sec-3">3. s1</a></li>
</ul>
</div>
</div>
<p>
I have an application where an org-file is a template with some due dates in it. I would like to update the deadlines to make them all relative to today. In this post I explore a way to do that. The strategy is to find deadlines, parse the time out of the time stamp, add an appropriate amount of time, and replace the time stamp. For this exercise, we use this org-file, which has one DEADLINE of "2014-01-13 Mon", and I want to add 60 days to the time stamp. 
</p>

<p>
Amazingly, emacs can parse time strings into a format that it can understand. I do not claim to understand what this function returns, but it is some representation of time that emacs understands.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>)
</pre>
</div>

<p>
(21203 11392)
</p>

<p>
Now, we can add time to that format. Let us say I want to add 60 days. In emacs, we add seconds to a time, so 60 days is 60 days * 24 hours * 60 minutes * 60 seconds, or in elisp: (* 60 24 60 60).
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((sixty-days (seconds-to-time (* 60 24 60 60))))
  (time-add (date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>) sixty-days))
</pre>
</div>

<p>
(21282 18048 0 0)
</p>

<p>
That does not make too much sense, so we can use another function to format it like a new time stamp.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">let</span> ((sixty-days (seconds-to-time (* 60 24 60 60))))
  (format-time-string <span style="color: #228b22;">"&lt;%Y-%m-%d %a&gt;"</span>
                      (time-add (date-to-time <span style="color: #228b22;">"&lt;2014-01-13 Mon&gt;"</span>) sixty-days)))
</pre>
</div>

<p>
<span class="timestamp-wrapper"><span class="timestamp">&lt;2014-03-13 Thu&gt;</span></span>
</p>

<p>
Beautiful. We just got a timestamp that is 60 days later than the original timestamp. Now we just search forward to find deadline, get the time stamp, add the time to it, and replace the line. I specifically want to change deadlines, so we will develop a regular expression for that. Here is a block that searches forward for a DEADLINE, parses it, adds 60 days to it, and replaces the deadline. The regular expression is limited to timestamps that look like &lt;yyyy-mm-dd day&gt;, i.e. no warnings or repeaters are found. In this post, there is subheading that looks like this initially:
</p>

<p>
#+BEGIN<sub>EXAMPLE</sub>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> s1</h2>
<div class="outline-text-2" id="text-1">
<p>
#+END<sub>EXAMPLE</sub>
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">progn</span>
  (<span style="color: #8b0000;">save-excursion</span>
    <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">go to timestamp</span>
    (re-search-forward <span style="color: #228b22;">"DEADLINE:\\s-*&lt;</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{4\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{2\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">[0-9]\\{2\\}</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">\\s-</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">(</span><span style="color: #228b22;">Mon</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Tue</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Wed</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Thu</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Fri</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Sat</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">|</span><span style="color: #228b22;">Sun</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22; font-weight: bold;">\\</span><span style="color: #228b22; font-weight: bold;">)</span><span style="color: #228b22;">&gt;"</span>)
    (<span style="color: #8b0000;">let</span> ((ts (match-string 1)) <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">this is the timestamp</span>
          (sixty-days (seconds-to-time (* 60 24 60 60)))
          (new-ts))
      (setq new-ts (format-time-string <span style="color: #228b22;">"    DEADLINE: &lt;%Y-%m-%d %a&gt;"</span>
                                       (time-add (date-to-time ts) sixty-days)))
      <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">now we kill the old time stamp, and insert the new one</span>
      (beginning-of-line)
      (kill-line)
      (insert new-ts))))
</pre>
</div>

<p>
After we run the code above, the deadline looks like this:
#+BEGIN<sub>EXAMPLE</sub>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> s1</h2>
<div class="outline-text-2" id="text-2">
<p>
#+END<sub>EXAMPLE</sub>
</p>

<p>
We succeeded in moving it by 60 days. An interesting application of this would be to make all the deadlines in an org-file relative to some baseline date. For example, you have a series of deadlines for assignments throughout a semester, and it would be tedious to update these by hand. Suppose you could just establish a new beginning date, and make all deadlines relative to that date with a command. That seems useful. 
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> s1</h2>
<div class="outline-text-2" id="text-3">
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/05/Add-time-to-a-deadline.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Literate programming example with Fortran and org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode</id>
    <updated>2014-02-06T10:28:38Z</updated>
    <published>2014-02-04T10:22:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <category scheme="http://jkitchin.github.io/blog" term="literate-programming" />
    <summary type="html"><![CDATA[Literate programming example with Fortran and org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. A slightly more complicated example.</a></li>
<li><a href="#sec-2">2. Summary key points</a></li>
</ul>
</div>
</div>
<p>
Update: see a short video of how this post works here: <a href="/media/2014-02-04-Literate-programming-example-with-Fortran-and-org-mode/literate-programming.swf">video</a> 
</p>

<p>
I want to illustrate the literate programming capabilities of org-mode. One idea in literate programming is to have code in blocks surrounded by explanatory text. There is a process called "tangling", which extracts the code, and possibly compiles and runs it. I have typically used python and emacs-lisp in org-mode, but today we look at using Fortran. 
</p>

<p>
The first simple example is a hello world fortran program. Typically you create a file containing code like this:
</p>

<div class="org-src-container">

<pre class="src src-fortran"><span style="color: #8b0000;">PROGRAM</span> <span style="color: #8b2323;">hello</span>

<span style="color: #8b0000;">PRINT</span> *, <span style="color: #228b22;">"Hello world"</span>

<span style="color: #8b0000;">END</span> <span style="color: #8b0000;">PROGRAM</span> <span style="color: #8b2323;">hello</span>
</pre>
</div>

<p>
That file can be named something like hello.f90. We specify that in the source block header like this:
</p>

<pre class="example">
:tangle hello.f90
</pre>

<p>
There are a variety of ways to build your program. Let us create a makefile to do it. We will specify that this block is tangled to a Makefile like this:
</p>
<pre class="example">
:tangle Makefile
</pre>

<p>
Our Makefile will have three targets: 
</p>
<ol class="org-ol">
<li>hello, which compiles our program to an executable called a.out. 
</li>
<li>execute, which depends on hello, and runs the executable
</li>
<li>clean, which deletes a.out if it exists
</li>
</ol>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #8b2323;">hello</span>:  hello.f90
        gfortran hello.f90

<span style="color: #8b2323;">execute</span>: hello
        ./a.out

<span style="color: #8b2323;">clean</span>:
        rm -f a.out *.o
</pre>
</div>

<p>
Now, we can run <pre>elisp:(org-babel-tangle)</pre> , which will extract these files to the current directory. Here is evidence that the files exist.
</p>

<div class="org-src-container">

<pre class="src src-sh">ls
</pre>
</div>

<pre class="example">
hello.f90
literate.org
Makefile
</pre>

<p>
Let us go a step further, and use the makefile to execute our program. The first time you run this, you will see that the 
</p>

<div class="org-src-container">

<pre class="src src-sh">make clean execute
</pre>
</div>

<pre class="example">
rm -f a.out *.o
gfortran hello.f90
./a.out
 Hello world
</pre>

<p>
That works well! The only really inconvenient issue is that if you update the Fortran code above, you have to manually rerun  <pre>elisp:(org-babel-tangle)</pre> , then run the <code>make execute</code> command. We can combine that in a single block, where you do both things at once. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(shell-command-to-string <span style="color: #228b22;">"make clean execute"</span>)
</pre>
</div>

<pre class="example">
rm -f a.out *.o
gfortran hello.f90
./a.out
 Hello world
</pre>

<p>
That is it in a nutshell. We had a source block for a Fortran program, and a source block for the Makefile. After tangling the org-file, we have those files available for us to use. Next, let us consider a little more complicated example.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> A slightly more complicated example.</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, let us consider a Fortran code with two files. We will define a module file, and a program file. The module file contains a function to compute the area of a circle as a function of its radius. Here is our module file, which is tangled to circle.f90.
</p>

<div class="org-src-container">

<pre class="src src-fortran">MODULE Circle
      <span style="color: #4682b4;">implicit None</span>
      public :: area
<span style="color: #ff0000; font-weight: bold;">c</span><span style="color: #ff0000; font-weight: bold;">ontains</span>
      <span style="color: #8b0000;">function</span> <span style="color: #8b2323;">area</span>(r) 
      <span style="color: #4682b4;">implicit none</span>
      <span style="color: #4682b4;">real</span>, intent(in) :: r
      <span style="color: #4682b4;">real</span> :: area
      area = 3.14159 * r**2
      <span style="color: #8b0000;">return</span>
      <span style="color: #8b0000;">end</span> <span style="color: #8b0000;">function</span> <span style="color: #8b2323;">area</span>
<span style="color: #8b0000;">END</span> MODULE Circle
</pre>
</div>

<p>
Now, we write a program that will print a table of circle areas. Here we hard-code an array of 5 radius values, then loop through the values and get the area of the circle with that radius. We will print some output that generates an org-mode <a href="http://orgmode.org/manual/Tables.htm">table</a> . In this program, we <code>use</code> our module defined above.
</p>

<div class="org-src-container">

<pre class="src src-fortran"><span style="color: #8b0000;">program</span> <span style="color: #8b2323;">main</span>
      
use circle, only: area

<span style="color: #4682b4;">implicit none</span>
<span style="color: #4682b4;">integer</span> :: i
<span style="color: #4682b4;">REAL</span>, <span style="color: #4682b4;">DIMENSION</span>(<span style="color: #8b008b;">5</span>) :: R
R = (/1.0, 2.0, 3.0, 4.0, 5.0 /)

<span style="color: #8b0000;">print</span> *, <span style="color: #228b22;">"#+tblname: circle-area"</span>
<span style="color: #ff0000; font-weight: bold;">d</span><span style="color: #ff0000; font-weight: bold;">o i = 1, 5</span>
  <span style="color: #8b0000;">print</span> *, <span style="color: #228b22;">"|"</span>, R(i), <span style="color: #228b22;">"|"</span>, area(R(i)), <span style="color: #228b22;">"|"</span>
<span style="color: #8b0000;">end</span> <span style="color: #8b0000;">do</span>

<span style="color: #8b0000;">end</span> <span style="color: #8b0000;">program</span> <span style="color: #8b2323;">main</span>
</pre>
</div>

<p>
Now, we make a makefile that will build this program. I use a different name for the file, since we already have a Makefile in this directory from the last example.  I also put @ at the front of each command in the makefile to suppress it from being echoed when we run it. Later, we will use the makefile to compile the program, and then run it, and we only want the output of the program. 
</p>

<p>
The compiling instructions are more complex. We have to compile the circle module first, and then the main program. Here is our makefile. 
</p>

<div class="org-src-container">

<pre class="src src-makefile"><span style="color: #8b2323;">circle</span>:
        <span style="color: #4682b4;">@</span>gfortran -c circle.f90

<span style="color: #8b2323;">main</span>: circle
        <span style="color: #4682b4;">@</span>gfortran -c main.f90
        <span style="color: #4682b4;">@</span>gfortran circle.o main.o -o main

<span style="color: #8b2323;">clean</span>:
        <span style="color: #4682b4;">@</span>rm -f *.o main
</pre>
</div>

<p>
Now, we run this block, which tangles out our new files.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">main.f90</td>
<td class="left">circle.f90</td>
<td class="left">hello.f90</td>
<td class="left">makefile-main</td>
<td class="left">Makefile</td>
</tr>
</tbody>
</table>

<p>
Note that results above show we have tangled <i>all</i> the source blocks in this file. You can limit the scope of tangling, by narrowing to a subtree, but that is beyond our aim for today.
</p>

<p>
Finally, we are ready to build our program. We specify the new makefile with the <code>-f</code> option to make. We use the clean target to get rid of old results, and then the main target with builds the program. Since main depends on circle, the circle file is compiled first. 
</p>

<p>
Note in this block I use this header:
</p>
<pre class="example">
#+BEGIN_SRC sh :results raw
</pre>

<p>
That will tell the block to output the results directly in the buffer. I have the fortran code prename the table, and put | around the entries, so this entry is output directly as an org table. 
</p>

<div class="org-src-container">

<pre class="src src-sh">make -f makefile-main clean main
./main
</pre>
</div>

<table id="circle-area" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">1.000000</td>
<td class="right">3.141590</td>
</tr>

<tr>
<td class="right">2.000000</td>
<td class="right">12.56636</td>
</tr>

<tr>
<td class="right">3.000000</td>
<td class="right">28.27431</td>
</tr>

<tr>
<td class="right">4.000000</td>
<td class="right">50.26544</td>
</tr>

<tr>
<td class="right">5.000000</td>
<td class="right">78.53975</td>
</tr>
</tbody>
</table>



<p>
It takes some skill getting used to using <code>:results raw</code>. The results are not replaced if you run the code again. That can be inconvenient if you print a very large table, which you must manually delete. 
</p>


<p>
Now that we have a named org table, I can use that table as data in other source blocks, e.g. here in python. You define variables in the header name by referring to the tblname like this.
</p>

<pre class="example">
#+BEGIN_SRC python :var data=circle-area
</pre>

<p>
Then, data is available as a variable in your code. Let us try it and plot the area vs. radius here. For more fun, we will make the plot <a href="http://xkcd.com/">xkcd</a> , so it looks like I sketched it by hand.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.xkcd()

<span style="color: #8b0000;">print</span> data <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">data is a list </span>
<span style="color: #8b008b;">data</span> = np.array(data)
plt.plot(data[:, 0], data[:, 1])
plt.xlabel(<span style="color: #228b22;">'radius'</span>)
plt.ylabel(<span style="color: #228b22;">'area'</span>)
plt.savefig(<span style="color: #228b22;">'circle-area.png'</span>)
</pre>
</div>

<pre class="example">
[[1.0, 3.14159], [2.0, 12.56636], [3.0, 28.27431], [4.0, 50.26544], [5.0, 78.53975]]
</pre>


<div class="figure">
<p><img src="/media/2014-02-04-Literate-programming-example-with-Fortran-and-org-mode/circle-area.png"> 
</p>
</div>

<p>
It appears the area increases quadratically with radius. No surprise there! For fun, let us show that. If we divide each area by \(r^2\), we should get back &pi;. Let us do this in emacs-lisp, just to illustrate how flexibly we can switch between languages. In lisp, the data structure will be a list of items like ((radius1 area1) (radius2 area2)&#x2026;). So, we just map a function that divides the area (the second element of an entry) by the square of the first element. My lisp-fu is only average, so I use the <code>nth</code> function to get those elements. We also load the calc library to get the math-pow function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">require</span> '<span style="color: #cd0000;">calc</span>)
(mapcar (<span style="color: #8b0000;">lambda</span> (x) (/ (nth 1 x) (math-pow (nth 0 x) 2))) data)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
<td class="right">3.14159</td>
</tr>
</tbody>
</table>


<p>
Indeed, we get &pi; for each element, which shows in fact that the area does increase quadratically with radius.
</p>

<p>
You can learn more about tangling source code from org-mode here <a href="http://orgmode.org/manual/Extracting-source-code.html">http://orgmode.org/manual/Extracting-source-code.html</a> .
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary key points</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>You can organize source files in org-mode as source blocks which can be "tangled" to "real" source code.
</li>
<li>You can build into your org-file(s) even the Makefile, or other building instructions.
</li>
<li>You can even run the build program, and the resulting programs from org-mode to capture data.
</li>
<li>Once that data is in org-mode, you can reuse it in other source blocks, including other languages. 
</li>
</ol>

<p>
What benefits could there be for this? One is you work in org-mode, which allows you to structure a document in different ways than code does. You can use headings to make the hierarchy you want. You can put links in places that allow you to easily navigate the document. Second, you can build in the whole workflow into your document, from building to execution. Third, you could have a self-contained file that extracts what someone else needs, but which has documentation and explanation built into it, <i>which you wrote as you developed the program</i>, rather than as an afterthought. You can still edit each block in its native emacs-mode, and have org-mode too. That is something like having cake, <i>and eating it too</i>!
</p>

<p>
Downsides? Probably. Most IDE/project type environments are designed for code. These tools offer nice navigation between functions and files. I don't use those tools, but I imagine if you are hooked on them, you might have to learn something new this way.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/04/Literate-programming-example-with-Fortran-and-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Reproducing the research]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/04/Reproducing-the-research" />
    <id>http://jkitchin.github.io/blog/2014/02/04/Reproducing-the-research</id>
    <updated>2014-02-04T07:26:18Z</updated>
    <published>2014-02-04T07:26:18Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Reproducing the research]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/04/Reproducing-the-research"><![CDATA[


<p>
We have over the past year published a few papers using org-mode. You can find one of them here: <a href="http://pubs.acs.org/doi/abs/10.1021/ie400582a">http://pubs.acs.org/doi/abs/10.1021/ie400582a</a> . There is a corresponding <a href="http://pubs.acs.org/doi/suppl/10.1021/ie400582a/suppl_file/ie400582a_si_001.pdf">supporting information</a> file that is freely available, which contains within it an org-mode file that documents our work, and that contains the data in it. In this post, I want to explore how easy it is to access that data, and use it. First, download the file:
</p>

<div class="org-src-container">

<pre class="src src-sh">wget http://pubs.acs.org/doi/suppl/10.1021/ie400582a/suppl_file/ie400582a_si_001.pdf
</pre>
</div>

<p>
Then, open it in Acrobat Reader, and extract the org-file. I saved it as <a href="/media/2014-02-04-Reproducing-the-research/supporting-information.org">supporting-information.org</a> . In that file, there is a table of data that is the SO<sub>2</sub> adsorption and desorption capacity of a resin as a function of cycles. The table is named <code>so2-capacity-1</code>.
</p>

<p>
Here is how simple it is to grab that data, and use it. We need to use this header in our source block:
</p>
<pre class="example">
#+BEGIN_SRC python :var data=supporting-information.org:so2-capacity-1
</pre>

<p>
In the block, <code>data</code> will be a list of lists. I like to convert it into a numpy array, so that indexing it is simple to extract out the data.  
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b008b;">data</span> = np.array(data)
<span style="color: #8b008b;">cycles</span> = data[:, 0]
<span style="color: #8b008b;">ads_cap</span> = data[:, 1]
<span style="color: #8b008b;">des_cap</span> = data[:, 2]

<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
plt.plot(cycles, ads_cap, cycles, des_cap)
plt.legend([<span style="color: #228b22;">'Ads. capacity'</span>, <span style="color: #228b22;">'Des. capacity'</span>])
plt.xlabel(<span style="color: #228b22;">'# Cycles'</span>)
plt.ylabel(<span style="color: #228b22;">'Capacity (mol/kg)'</span>)
plt.savefig(<span style="color: #228b22;">'images/si-image.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-02-04-Reproducing-the-research/si-image.png"> 
</p>
</div>

<p>
That is pretty easy. There are also Excel sheets embedded in that supporting information file, along with scripts that illustrate how to use the data in the Excel sheets for further analysis. How about that for data sharing!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/04/Reproducing-the-research.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using YAML in python for structured data]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/03/Using-YAML-in-python-for-structured-data" />
    <id>http://jkitchin.github.io/blog/2014/02/03/Using-YAML-in-python-for-structured-data</id>
    <updated>2014-02-03T09:36:29Z</updated>
    <published>2014-02-03T09:36:29Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="yaml" />
    <category scheme="http://jkitchin.github.io/blog" term="template" />
    <summary type="html"><![CDATA[Using YAML in python for structured data]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/03/Using-YAML-in-python-for-structured-data"><![CDATA[


<p>
<a href="http://www.yaml.org/">YAML</a> is a data format that is most text, with some indentation. It is like JSON, but without the braces. What is important here is that you can read a yaml document into a python dictionary. Here is an example of reading a yaml string so you can see the format.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> yaml
<span style="color: #8b008b;">document</span> = <span style="color: #228b22;">"""</span>
<span style="color: #228b22;">a: 1</span>
<span style="color: #228b22;">b:</span>
<span style="color: #228b22;">  c: 3</span>
<span style="color: #228b22;">  d: 4</span>
<span style="color: #228b22;">"""</span>
<span style="color: #8b0000;">print</span> yaml.load(document)
</pre>
</div>

<pre class="example">
{'a': 1, 'b': {'c': 3, 'd': 4}}
</pre>

<p>
Everything indented by the same level is grouped in its own dictionary. If we put that string into a file (<a href="/media/2014-02-03-Using-YAML-in-python-for-structured-data/test.yaml">test.yaml</a> ), we can read that in to python like this.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> yaml
<span style="color: #8b008b;">document</span> = <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'test.yaml'</span>).read()
<span style="color: #8b0000;">print</span> yaml.load(document)
</pre>
</div>

<pre class="example">
{'a': 1, 'b': {'c': 3, 'd': 4}}
</pre>

<p>
That example is pretty trivial. What I want to do is have  yaml file that represents a course syllabus. Then, if I had a set of these files, I could write code to analyze the collection of syllabi. For example, to figure out how many units of particular category there are. Alternatively, I could create different representations of the document, e.g. a pdf or html file for students or accreditation boards. Below is a YAML representtion of an ABET syllabus. It is pretty readable for a person.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> yaml
<span style="color: #8b008b;">document</span> = <span style="color: #228b22;">"""</span>
<span style="color: #228b22;">course:</span>
<span style="color: #228b22;">  course-number: 06-364</span>
<span style="color: #228b22;">  title: Chemical Reaction Engineering</span>
<span style="color: #228b22;">  units: 9</span>
<span style="color: #228b22;">  description: Fundamental concepts in the kinetic modeling of chemical reactions, the treatment and analysis of rate data. Multiple reactions and reaction mechanisms. Analysis and design of ideal and non-ideal reactor systems. Energy effects and mass transfer in reactor systems. Introductory principles in heterogeneous catalysis. </span>

<span style="color: #228b22;">  textbook: H. S. Fogler, Elements of Chemical Reaction Engineering, 4th edition, Prentice Hall, New York, 2006.</span>
<span style="color: #228b22;">  prerequisites: [06-321, 06-323, 09-347]</span>
<span style="color: #228b22;">  required: Yes</span>

<span style="color: #228b22;">  goals:</span>
<span style="color: #228b22;">    goal1: </span>
<span style="color: #228b22;">      description: To analyze kinetic data and obtain rate laws </span>
<span style="color: #228b22;">      outcomes: [a, k]</span>
<span style="color: #228b22;">      criteria: [A, F]</span>
<span style="color: #228b22;">    goal2:</span>
<span style="color: #228b22;">      description: To develop a mechanism that is consistent with an experimental rate law </span>
<span style="color: #228b22;">    goal3:</span>
<span style="color: #228b22;">      description: To understand the behavior of different reactor types when they are used either individually or in combination </span>
<span style="color: #228b22;">    goal4: </span>
<span style="color: #228b22;">      description: To choose a reactor and determine its size for a given application</span>
<span style="color: #228b22;">    goal5:</span>
<span style="color: #228b22;">      description: To work with mass and energy balances in the design of non-isothermal reactors </span>
<span style="color: #228b22;">    goal6:</span>
<span style="color: #228b22;">      description: To understand the importance of selectivity and know the strategies that are commonly used in maximizing yields</span>
<span style="color: #228b22;">    goal7:</span>
<span style="color: #228b22;">      description: To effectively use mathematical software in the design of reactors and analysis of data </span>

<span style="color: #228b22;">  topics:</span>
<span style="color: #228b22;">    - Conversion and reactor sizing</span>
<span style="color: #228b22;">    - Rate laws and stoichiometry</span>
<span style="color: #228b22;">    - Isothermal reactor design</span>
<span style="color: #228b22;">    - Collection and analysis of rate data</span>
<span style="color: #228b22;">    - Multiple reactions and selectivity</span>
<span style="color: #228b22;">    - Non-elementary reaction kinetics</span>
<span style="color: #228b22;">    - Non-isothermal reactor design</span>
<span style="color: #228b22;">    - Unsteady operation of reactors</span>
<span style="color: #228b22;">    - Catalysis and catalytic reactors</span>
<span style="color: #228b22;">"""</span>
<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'06-364.yaml'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
    f.write(document)

<span style="color: #8b0000;">print</span> yaml.load(document)
</pre>
</div>

<pre class="example">
{'course': {'description': 'Fundamental concepts in the kinetic modeling of chemical reactions, the treatment and analysis of rate data. Multiple reactions and reaction mechanisms. Analysis and design of ideal and non-ideal reactor systems. Energy effects and mass transfer in reactor systems. Introductory principles in heterogeneous catalysis.', 'title': 'Chemical Reaction Engineering', 'prerequisites': ['06-321', '06-323', '09-347'], 'topics': ['Conversion and reactor sizing', 'Rate laws and stoichiometry', 'Isothermal reactor design', 'Collection and analysis of rate data', 'Multiple reactions and selectivity', 'Non-elementary reaction kinetics', 'Non-isothermal reactor design', 'Unsteady operation of reactors', 'Catalysis and catalytic reactors'], 'required': True, 'textbook': 'H. S. Fogler, Elements of Chemical Reaction Engineering, 4th edition, Prentice Hall, New York, 2006.', 'goals': {'goal6': {'description': 'To understand the importance of selectivity and know the strategies that are commonly used in maximizing yields'}, 'goal7': {'description': 'To effectively use mathematical software in the design of reactors and analysis of data'}, 'goal4': {'description': 'To choose a reactor and determine its size for a given application'}, 'goal5': {'description': 'To work with mass and energy balances in the design of non-isothermal reactors'}, 'goal2': {'description': 'To develop a mechanism that is consistent with an experimental rate law'}, 'goal3': {'description': 'To understand the behavior of different reactor types when they are used either individually or in combination'}, 'goal1': {'outcomes': ['a', 'k'], 'description': 'To analyze kinetic data and obtain rate laws', 'criteria': ['A', 'F']}}, 'units': 9, 'course-number': '06-364'}}
</pre>




<p>
You can see here the whole document is now stored as a dictionary. You
might ask why? I have the following interests:
</p>
<ol class="org-ol">
<li>If I have a set of these files, I could loop through them and
generate some kind of summary, e.g. total units of some category.
</li>
<li>I could generate a consistent format using a template. 
</li>
</ol>

<p>
Let us explore the template. We will generate a LaTeX document using
the Cheetah template engine (<a href="http://www.cheetahtemplate.org/">http://www.cheetahtemplate.org/</a> ). I have also used <a href="http://www.makotemplates.org/">Mako</a> , and <a href="http://jinja.pocoo.org/">jinja</a> . A
template is a fancy string that has code in that can be evaluated and
substituted at generation time. We use this to replace elements of the
template with data from our yaml document.  Below I created a template
that generates a LaTeX document.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> yaml
<span style="color: #8b0000;">from</span> Cheetah.Template <span style="color: #8b0000;">import</span> Template

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'06-364.yaml'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">document</span> = yaml.load(f.read())

<span style="color: #8b008b;">data</span> = document[<span style="color: #228b22;">'course'</span>]

<span style="color: #8b008b;">template</span> = r<span style="color: #228b22;">'''\documentclass{article}</span>
<span style="color: #228b22;">\renewcommand{\abstractname}{Course Description}</span>

<span style="color: #228b22;">\begin{document}</span>
<span style="color: #228b22;">\title{$data['course-number'] $data['title']}</span>
<span style="color: #228b22;">\maketitle</span>
<span style="color: #228b22;">\begin{abstract}</span>
<span style="color: #228b22;">$data['description']</span>
<span style="color: #228b22;">\end{abstract}</span>

<span style="color: #228b22;">\textbf{Required:} $data['required']</span>

<span style="color: #228b22;">\textbf{Prerequisites:} #echo ', '.join($data['prerequisites'])</span>

<span style="color: #228b22;">{\textbf{Textbook:} $data['textbook']</span>

<span style="color: #228b22;">\section{Course goals}</span>
<span style="color: #228b22;">\begin{enumerate}</span>
<span style="color: #228b22;">#for $goal in $data['goals']</span>
<span style="color: #228b22;">\item $data['goals'][$goal]['description'] \label{$goal}</span>
<span style="color: #228b22;">#end for</span>
<span style="color: #228b22;">\end{enumerate}</span>

<span style="color: #228b22;">\section{Topics}</span>
<span style="color: #228b22;">\begin{itemize}</span>
<span style="color: #228b22;">#for $topic in $data['topics']</span>
<span style="color: #228b22;">\item $topic</span>
<span style="color: #228b22;">#end for</span>
<span style="color: #228b22;">\end{itemize}</span>
<span style="color: #228b22;">\end{document}'''</span>

<span style="color: #8b008b;">t</span> = Template(template, searchList=<span style="color: #cd0000;">locals</span>())

<span style="color: #ff0000; font-weight: bold;">#</span><span style="color: #ff0000; font-weight: bold;">import sys; sys.exit()</span>
<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'06-364.tex'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
    f.write(t.respond())
</pre>
</div>

<pre class="example">
None
</pre>

<p>
You can see the results of the tex file here: <a href="/media/2014-02-03-Using-YAML-in-python-for-structured-data/06-364.tex">06-364.tex</a> , and the
corresponding pdf here: <a href="/media/2014-02-03-Using-YAML-in-python-for-structured-data/06-364.pdf">06-364.pdf</a> . It is not spectacular by any
means, but if I had 16 of these to create, this sure would be
convenient! And if we need some other format, we just make a new template!
</p>

<p>
Some notes about this:
</p>
<ol class="org-ol">
<li>The course goals are not in the order defined in the yaml file. That is not too surprising, since dictionaries do not preserve order.
</li>
<li>Yes in yaml apparently is read in as a boolean, so in the pdf, it is printed as True.
</li>
<li>I have not thought about how to prepare a table that maps student outcomes (a-k in ABET) to the course goals
</li>
<li>It would be nice if there were links in the pdf to other syllabi, e.g. the prerequisites. See <a href="http://ctan.mirrorcatalogs.com/macros/latex/required/tools/xr.pdf">http://ctan.mirrorcatalogs.com/macros/latex/required/tools/xr.pdf</a> 
</li>
</ol>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/03/Using-YAML-in-python-for-structured-data.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Printing unicode characters in Python strings]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/02/02/Printing-unicode-characters-in-Python-strings" />
    <id>http://jkitchin.github.io/blog/2014/02/02/Printing-unicode-characters-in-Python-strings</id>
    <updated>2014-02-02T12:18:16Z</updated>
    <published>2014-02-02T12:18:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="unicode" />
    <summary type="html"><![CDATA[Printing unicode characters in Python strings]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/02/02/Printing-unicode-characters-in-Python-strings"><![CDATA[


<p>
Are you tired of printing strings like this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> <span style="color: #228b22;">'The volume is {0} Angstrom^3'</span>.<span style="color: #cd0000;">format</span>(125)
</pre>
</div>

<pre class="example">
The volume is 125 Angstrom^3
</pre>

<p>
Wish you could get Å in your string? That is the unicode character
U+212B. We can get that to print in Python, but we have to create it
in a unicode string, and print the string properly encoded. Let us try
it out.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> u<span style="color: #228b22;">'\u212B'</span>.encode(<span style="color: #228b22;">'utf-8'</span>)
</pre>
</div>

<pre class="example">
Å
</pre>

<p>
We use u'' to indicate a unicode string. Note we have to encode the
string to print it, or will get this error:
</p>

<pre class="example">
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeEncodeError: 'ascii' codec can't encode character u'\u212b' in position 0: ordinal not in range(128)
</pre>

<p>
Do more, do more, we wish we could! Unicode also supports some
superscripted and subscripted numbers
(<a href="http://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts">http://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts</a> ). Let
us see that in action.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> u<span style="color: #228b22;">'\u212B\u00B3'</span>.encode(<span style="color: #228b22;">'utf-8'</span>)
</pre>
</div>

<pre class="example">
Å³
</pre>

<p>
Pretty sweet. The code is not all that readable if you aren't fluent
in unicode, but if it was buried in some library it would just print
something nice looking. We can use this to print chemical formulas
too.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> u<span style="color: #228b22;">'''The chemical formula of water is H\u2082O.</span>
<span style="color: #228b22;">Water dissociates into H\u207A and OH\u207B'''</span>.encode(<span style="color: #228b22;">'utf-8'</span>)
</pre>
</div>

<p>
=The chemical formula of water is H₂O.
Water dissociates into H⁺ and OH⁻
</p>

<p>
There are other encodings too. See the symbols here: <a href="http://en.wikipedia.org/wiki/Number_Forms">http://en.wikipedia.org/wiki/Number_Forms</a> 
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> u<span style="color: #228b22;">'1/4 or \u00BC'</span>.encode(<span style="color: #228b22;">'latin-1'</span>)
</pre>
</div>

<pre class="example">
1/4 or ¼
</pre>

<p>
That seems like:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> u<span style="color: #228b22;">'A good idea\u00AE'</span>.encode(<span style="color: #228b22;">'latin-1'</span>)
</pre>
</div>

<pre class="example">
A good idea®
</pre>

<p>
I can not tell how you know exactly what encoding to use. If you use
utf-8 in the example above, you get a stray character in front of the
desired trademark symbol. Still, it is interesting you can get
prettier symbols!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/02/02/Printing-unicode-characters-in-Python-strings.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using tags to filter lists in Python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/01/29/Using-tags-to-filter-lists-in-Python" />
    <id>http://jkitchin.github.io/blog/2014/01/29/Using-tags-to-filter-lists-in-Python</id>
    <updated>2014-01-29T12:52:53Z</updated>
    <published>2014-01-29T12:52:51Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Using tags to filter lists in Python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/01/29/Using-tags-to-filter-lists-in-Python"><![CDATA[


<p>
Suppose you have a collection of items in a list, and you want to filter the list based on some properties of the items, and then accumulate some other property on the filtered items. We will look at some strategies for this here.
</p>

<p>
The particular application is that I have a list of courses that make up a curriculum, and I want to summarize the curriculum in a variety of ways. For example, I might want to know how many Gen Ed courses there are, or how many math, chemistry, biology and physics courses there are. I may want to know how may units overall are required. 
</p>

<p>
A course will be represented by a class, which simply holds the data about the course. Here we consider the course number (which is really a string), the number of units of the course, and what category the course fits into. There will be 7 categories here: chemistry, biology, physics, math, engineering, general education, and free elective.
</p>

<p>
We will use some binary math to represent the categories. Essentially we define tags as if they are binary numbers, and then we can use binary operators to tell if an item is tagged a particular way. We use &amp; to do a logical AND between a variable and a TAG. If it comes out True, the variable has that tag.
</p>

<p>
This works basically by defining a TAG like a binary number, e.g. TAG1 = 100,
TAG2 = 010, TAG3 = 001. Then, if you have a number like 110, you know it is tagged with TAG1 and TAG2, but not TAG3. We can figure that out with code too. 
</p>
<pre class="example">
100 &amp; 110 = 100 = 1
010 &amp; 110 = 010 = 2
</pre>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">print</span> 1 &amp; 3
<span style="color: #8b0000;">print</span> 2 &amp; 3
</pre>
</div>

<pre class="example">
1
2
</pre>

<p>
Let us try out an example. The easiest way to define the tags, is as powers of two.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">define some tags</span>
<span style="color: #8b008b;">TAG1</span> = 2**0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">100</span>
<span style="color: #8b008b;">TAG2</span> = 2**1  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">010</span>

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now define a variable that is "tagged"</span>
<span style="color: #8b008b;">a</span> = TAG1
<span style="color: #8b0000;">print</span> a &amp; TAG1 <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">remember that 0 = False, everything else is true</span>
<span style="color: #8b0000;">print</span> a &amp; TAG2
</pre>
</div>

<pre class="example">
1
0
</pre>

<p>
We can use multiple tags by adding them together.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">define some tags</span>
<span style="color: #8b008b;">TAG1</span> = 2**0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">100</span>
<span style="color: #8b008b;">TAG2</span> = 2**1  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">010</span>
<span style="color: #8b008b;">TAG3</span> = 2**2  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">001</span>

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now define a variable that is "tagged"</span>
<span style="color: #8b008b;">a</span> = TAG1 + TAG2  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">1 + 2 = 3 = 110 in binary</span>
<span style="color: #8b0000;">print</span> a &amp; TAG1 
<span style="color: #8b0000;">print</span> a &amp; TAG2
<span style="color: #8b0000;">print</span> a &amp; TAG3
</pre>
</div>

<pre class="example">
1
2
0
</pre>

<p>
You can see that the variable is not tagged by TAG3, but is tagged with TAG1 and TAG2. We might want to tag an item with more than one tag.  We create groups of tags by simply adding them together. We can still check if a variable has a particular tag like we did before.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">define some tags</span>
<span style="color: #8b008b;">TAG1</span> = 2**0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">100</span>
<span style="color: #8b008b;">TAG2</span> = 2**1  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">010</span>
<span style="color: #8b008b;">TAG3</span> = 2**2  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">001</span>

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now define a variable that is "tagged"</span>
<span style="color: #8b008b;">a</span> = TAG1 + TAG2  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">1 + 2 = 3 = 110 in binary</span>
<span style="color: #8b0000;">print</span> a &amp; TAG1
<span style="color: #8b0000;">print</span> a &amp; TAG2
<span style="color: #8b0000;">print</span> a &amp; TAG3
</pre>
</div>

<pre class="example">
1
2
0
</pre>

<p>
It is trickier to say if a variable is tagged with a particular set of tags. Let us consider why. The binary representation of TAG1 + TAG2 is 110. The binary representation of TAG2 + TAG3 is 011. If we simply consider (TAG1 + TAG2) &amp; (TAG2 &amp; TAG3) we get 010. That actually tells us that we do not have a match, because 010 is not equal to (TAG2 &amp; TAG3 = 011). In other words, the logical AND of the tag with some sum of tags is equal to the sum of tags when there is a match. So, we can check if that is the case with an equality comparison.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">define some tags</span>
<span style="color: #8b008b;">TAG1</span> = 2**0  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">100</span>
<span style="color: #8b008b;">TAG2</span> = 2**1  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">010</span>
<span style="color: #8b008b;">TAG3</span> = 2**2  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">001</span>

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">Now define a variable that is "tagged"</span>
<span style="color: #8b008b;">a</span> = TAG1 + TAG2  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">1 + 2 = 3 = 110 in binary</span>
<span style="color: #8b0000;">print</span> (a &amp; (TAG1 + TAG2)) == TAG1 + TAG2
<span style="color: #8b0000;">print</span> (a &amp; (TAG1 + TAG3)) == TAG1 + TAG3
<span style="color: #8b0000;">print</span> (a &amp; (TAG2 + TAG3)) == TAG2 + TAG3
</pre>
</div>

<pre class="example">
True
False
False
</pre>

<p>
Ok, enough binary math, let us see an application. Below we create a set of tags indicating the category a course falls into, a class definition to store course data in attributes of an object, and a list of courses. Then, we show some examples of list comprehension filtering based on the tags to summarize properties of the list. The logical comparisons are simple below, as the courses are not multiply tagged at this point.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">CHEMISTRY</span> = 2**0
<span style="color: #8b008b;">BIOLOGY</span> = 2**1
<span style="color: #8b008b;">PHYSICS</span> = 2**2
<span style="color: #8b008b;">MATH</span> = 2**3
<span style="color: #8b008b;">ENGINEERING</span> = 2**4
<span style="color: #8b008b;">GENED</span> = 2**5
<span style="color: #8b008b;">FREE</span> = 2**6

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">Course</span>:
    <span style="color: #228b22;">'''simple container for course information'''</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, number, units, category):
        <span style="color: #8b0000;">self</span>.number = number
        <span style="color: #8b0000;">self</span>.units = units
        <span style="color: #8b0000;">self</span>.category = category
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #8b0000;">self</span>.number


<span style="color: #8b008b;">courses</span> = [Course(<span style="color: #228b22;">'09-105'</span>, 9, CHEMISTRY),
           Course(<span style="color: #228b22;">'09-106'</span>, 9, CHEMISTRY),
           Course(<span style="color: #228b22;">'33-105'</span>, 12, PHYSICS),
           Course(<span style="color: #228b22;">'33-106'</span>, 12, PHYSICS),
           Course(<span style="color: #228b22;">'21-120'</span>, 10, MATH),
           Course(<span style="color: #228b22;">'21-122'</span>, 10, MATH),
           Course(<span style="color: #228b22;">'21-259'</span>, 10, MATH),
           Course(<span style="color: #228b22;">'06-100'</span>, 12, ENGINEERING),
           Course(<span style="color: #228b22;">'xx-xxx'</span>, 9, GENED),     
           Course(<span style="color: #228b22;">'xx-xxx'</span>, 9, FREE), 
           Course(<span style="color: #228b22;">'03-232'</span>, 9, BIOLOGY)]

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">print the total units</span>
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">' Total units = {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #cd0000;">sum</span>([x.units <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> courses]))

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">get units of math required</span>
<span style="color: #8b008b;">math_units</span> = <span style="color: #cd0000;">sum</span>([x.units  <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> courses <span style="color: #8b0000;">if</span> x.category &amp; MATH])

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">get total units of math, chemistry, physics and biology a | b is a</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">logical OR. This gives a prescription for tagged with MATH OR</span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">CHEMISTRY OR PHYSICS OR BIOLOGY</span>
<span style="color: #8b008b;">BASIC_MS</span> = MATH | CHEMISTRY | PHYSICS | BIOLOGY

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">total units in those categories</span>
<span style="color: #8b008b;">basic_math_science</span> = <span style="color: #cd0000;">sum</span>([x.units <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> courses <span style="color: #8b0000;">if</span> x.category &amp; BASIC_MS])

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'We require {0} units of math out of {1} units of basic math and science courses.'</span>.<span style="color: #cd0000;">format</span>(math_units, basic_math_science)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">We are required to have at least 96 units of Math and Sciences.</span>
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'We are compliant on number of Math and science: '</span>,basic_math_science &gt;= 96
</pre>
</div>

<pre class="example">
 Total units = 111
We require 30 units of math out of 81 units of basic math and science courses.
We are compliant on number of Math and science:  False
</pre>

<p>
That is all for this example. With more data for each course, you could see what courses are taken in what semesters, how many units are in each semester, maybe create a prerequisite map, and view the curriculum by categories of courses, etc&#x2026;</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/01/29/Using-tags-to-filter-lists-in-Python.org">org-mode source</a><p><p>Org-mode version = 8.2.5g</p>]]></content>
  </entry>
</feed>
