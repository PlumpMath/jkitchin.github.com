<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2014-04-23T01:00:44Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Putting link references to lines of code in a source block]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/22/Putting-link-references-to-lines-of-code-in-a-source-block" />
    <id>http://jkitchin.github.io/blog/2014/04/22/Putting-link-references-to-lines-of-code-in-a-source-block</id>
    <updated>2014-04-22T20:59:30Z</updated>
    <published>2014-04-22T20:59:30Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Putting link references to lines of code in a source block]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/22/Putting-link-references-to-lines-of-code-in-a-source-block"><![CDATA[


<p>
I keep forgetting about this interesting gem of a feature in org-mode code blocks. You can put references to specific lines of code outside the block!
<a href="http://orgmode.org/manual/Literal-examples.html#Literal-examples">http://orgmode.org/manual/Literal-examples.html#Literal-examples</a> 
</p>

<p>
The following code block has some references in it that we can refer to later:
</p>
<pre class="example">
#+BEGIN_SRC emacs-lisp -n -r
<span id="coderef-sc" class="coderef-off">(save-excursion (sc)</span>
<span id="coderef-jump" class="coderef-off">  (goto-char (point-min))) (jump)</span>
#+END_SRC
</pre>


<div class="org-src-container">

<pre class="src src-emacs-lisp"><span id="coderef-sc" class="coderef-off"><span class="linenr">1: </span>(<span style="color: #8b0000;">save-excursion</span></span>
<span id="coderef-jump" class="coderef-off"><span class="linenr">2: </span>  (goto-char (point-min)))</span>
</pre>
</div>


<p>
In line <pre>(sc)</pre> we remember the current position. <pre>(jump)</pre> jumps to point-min.
</p>

<p>
To make this work with python we have to make a slight change to the reference format in the header.
</p>

<pre class="example">
#+BEGIN_SRC python -n -r -l "#(ref:%s)"
<span id="coderef-for" class="coderef-off">for i in range(5):                # (for)</span>
<span id="coderef-body" class="coderef-off">    print i                       # (body)</span>
#+END_SRC
</pre>

<div class="org-src-container">

<pre class="src src-python"><span id="coderef-for" class="coderef-off"><span class="linenr">1: </span><span style="color: #8b0000;">for</span> i <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">range</span>(5):</span>
<span id="coderef-body" class="coderef-off"><span class="linenr">2: </span>    <span style="color: #8b0000;">print</span> i</span>
</pre>
</div>

<pre class="example">
0
1
2
3
4
</pre>


<p>
In line <pre>(for)</pre> we initialize the loop, and in line <pre>(body)</pre> we run it.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/22/Putting-link-references-to-lines-of-code-in-a-source-block.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[The sqlite variation of ase.db]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/17/The-sqlite-variation-of-ase-db" />
    <id>http://jkitchin.github.io/blog/2014/04/17/The-sqlite-variation-of-ase-db</id>
    <updated>2014-04-17T15:51:20Z</updated>
    <published>2014-04-17T15:51:20Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="vasp" />
    <category scheme="http://jkitchin.github.io/blog" term="ase" />
    <summary type="html"><![CDATA[The sqlite variation of ase.db]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/17/The-sqlite-variation-of-ase-db"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Exploring the database with sqlite</a></li>
<li><a href="#sec-2">2. The python interface to the ase-db</a></li>
<li><a href="#sec-3">3. Summary</a></li>
</ul>
</div>
</div>

<p>
In a recent <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/26/writing-VASP-calculations-to-ase-db-formats/">post</a> we explored writing VASP calculations to an ase database in json format. Today we explore a similar idea, but writing to sqlite. I have incorporated the code from the previous post into a utils module in jasp.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> jasp.utils <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">print</span> get_jasp_dirs(<span style="color: #228b22;">'/home-research/jkitchin/research/rutile-atat'</span>)
</pre>
</div>

<pre class="example">
['/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/0', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/1', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/10', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/11', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/12', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/13', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/14', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/15', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/16', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/17', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/2', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/3', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/4', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/5', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/59', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/6', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/66', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/7', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/73', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/74', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/78', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/8', '/home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/9']
</pre>

<p>
That new function <code>get_jasp_dirs</code> just returns a list of directories that are known finished VASP calculations. We will use a functional style of programming to map a function onto each directory in that list.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> jasp <span style="color: #8b0000;">import</span> *
<span style="color: #8b0000;">from</span> jasp.utils <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">from</span> ase.db <span style="color: #8b0000;">import</span> connect

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">I want a sqlite extension, so we have to specify db as the type, which means sqlite</span>
<span style="color: #8b008b;">c</span> = connect(<span style="color: #228b22;">'vaspdb.sqlite'</span>, <span style="color: #cd0000;">type</span>=<span style="color: #228b22;">'db'</span>)

<span style="color: #8b008b;">dirs</span> = get_jasp_dirs(<span style="color: #228b22;">'/home-research/jkitchin/research/rutile-atat'</span>)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">write</span>(directory):
    <span style="color: #8b0000;">with</span> jasp(directory) <span style="color: #8b0000;">as</span> calc:
        <span style="color: #8b008b;">atoms</span> = calc.get_atoms()
        <span style="color: #8b008b;">calc.results</span>[<span style="color: #228b22;">'energy'</span>] = atoms.get_potential_energy()
        <span style="color: #8b008b;">calc.results</span>[<span style="color: #228b22;">'forces'</span>] = atoms.get_forces()
    <span style="color: #8b0000;">print</span> c.write(atoms), directory

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">functional approach to writing</span>
<span style="color: #cd0000;">map</span>(write, dirs)
</pre>
</div>

<pre class="example">
1 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/0
2 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/1
3 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/10
4 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/11
5 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/12
6 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/13
7 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/14
8 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/15
9 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/16
10 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/17
11 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/2
12 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/3
13 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/4
14 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/5
15 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/59
16 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/6
17 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/66
18 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/7
19 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/73
20 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/74
21 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/78
22 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/8
23 /home-research/jkitchin/research/rutile-atat/RuTi_O_rutile/9
</pre>

<p>
Now, we have a sqlite database. Let us explore that a bit before using the python interface again. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Exploring the database with sqlite</h2>
<div class="outline-text-2" id="text-1">
<p>
First we see the tables.
</p>

<div class="org-src-container">

<pre class="src src-sqlite">.tables
</pre>
</div>

<pre class="example">
keywords           species            text_key_values  
number_key_values  systems          
</pre>

<p>
We can see details of the tables like this.
</p>
<div class="org-src-container">

<pre class="src src-sqlite">select * from sqlite_master;
</pre>
</div>

<pre class="example">
table|systems|systems|2|CREATE TABLE systems (
    id integer primary key autoincrement,
    unique_id text unique,
    ctime real,
    mtime real,
    user text,
    numbers blob,
    positions blob,
    cell blob,
    pbc integer,
    initial_magmoms blob,
    initial_charges blob,
    masses blob,
    tags blob,
    momenta blob,
    constraints text,
    calculator text,
    calculator_parameters text,
    energy real,
    free_energy real,
    forces blob,
    stress blob,
    dipole blob,
    magmoms blob,
    magmom blob,
    charges blob,
    data text)
index|sqlite_autoindex_systems_1|systems|3|
table|sqlite_sequence|sqlite_sequence|4|CREATE TABLE sqlite_sequence(name,seq)
table|species|species|5|CREATE TABLE species (
    Z integer,
    n integer,
    id text,
    foreign key (id) references systems(id))
table|keywords|keywords|6|CREATE TABLE keywords (
    keyword text,
    id text,
    foreign key (id) references systems(id))
table|text_key_values|text_key_values|8|CREATE TABLE text_key_values (
    key text,
    value text,
    id text,
    foreign key (id) references systems(id))
table|number_key_values|number_key_values|10|CREATE TABLE number_key_values (
    key text,
    value real,
    id text,
    foreign key (id) references systems (id))
index|unique_id_index|systems|11|CREATE INDEX unique_id_index on systems(unique_id)
index|ctime_index|systems|12|CREATE INDEX ctime_index on systems(ctime)
index|user_index|systems|13|CREATE INDEX user_index on systems(user)
index|calculator_index|systems|14|CREATE INDEX calculator_index on systems(calculator)
index|species_index|species|15|CREATE INDEX species_index on species(Z)
index|keyword_index|keywords|16|CREATE INDEX keyword_index on keywords(keyword)
index|text_index|text_key_values|17|CREATE INDEX text_index on text_key_values(key)
index|number_index|number_key_values|18|CREATE INDEX number_index on number_key_values(key)
</pre>

<p>
Let us see one entry from the systems table.
</p>

<div class="org-src-container">

<pre class="src src-sqlite">select * from systems where id=1;
</pre>
</div>

<pre class="example">
id|unique_id|ctime|mtime|user|numbers|positions|cell|pbc|initial_magmoms|initial_charges|masses|tags|momenta|constraints|calculator|calculator_parameters|energy|free_energy|forces|stress|dipole|magmoms|magmom|charges|data
1|3ed58bb16897177be0ed56400c90b6f4|14.2361260035084|14.2361260035084|jkitchin|@|7|||||||vasp|{"incar": {"doc": "INCAR parameters", "nbands": 43, "sigma": 0.1, "prec": "high", "encut": 350.0}, "doc": "JSON representation of a VASP calculation.\n\nenergy is in eV\nforces are in eV/\\AA\nstress is in GPa (sxx, syy, szz,  syz, sxz, sxy)\nmagnetic moments are in Bohr-magneton\nThe density of states is reported with E_f at 0 eV.\nVolume is reported in \\AA^3\nCoordinates and cell parameters are reported in \\AA\n\nIf atom-projected dos are included they are in the form:\n{ados:{energy:data, {atom index: {orbital : dos}}}\n", "potcar": [["Ru", "potpaw_PBE/Ru/POTCAR", "dee616f2a1e7a5430bb588f1710bfea3001d54ea"], ["O", "potpaw_PBE/O/POTCAR", "9a0489b46120b0cad515d935f44b5fbe3a3b1dfa"]], "input": {"kpts": [6, 6, 10], "kpts_nintersections": null, "reciprocal": false, "setups": {}, "xc": "PBE", "txt": "-", "gamma": true}, "atoms": {"cell": [[4.526933343669885, 0.0, 0.0], [0.0, 4.526933343669885, 0.0], [0.0, 0.0, 3.095292162609941]], "symbols": ["O", "O", "O", "O", "Ru", "Ru"], "tags": [0, 0, 0, 0, 0, 0], "pbc": [true, true, true], "positions": [[1.3820537023391204, 1.3820537023391204, 0.0], [3.1448796413307645, 3.1448796413307645, 0.0], [3.645520374174063, 0.8814129694958222, 1.5476460813049704], [0.8814129694958222, 3.645520374174063, 1.5476460813049704], [0.0, 0.0, 0.0], [2.2634666718349425, 2.2634666718349425, 1.5476460813049704]]}, "data": {"stress": [0.0884313161515024, 0.0884313161515024, 0.06042693164307849, -0.0, -0.0, -0.0], "doc": "Data from the output of the calculation", "volume": 63.432210741434858, "total_energy": -44.251496, "forces": [[-0.023609, -0.023609, 0.0], [0.023609, 0.023609, 0.0], [-0.023609, 0.023609, 0.0], [0.023609, -0.023609, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]], "fermi_level": 5.0374}, "metadata": {"date.created": 1395241327.477995, "uuid": "7081ee4a-af77-11e3-a6e6-003048f5e49e", "date.created.ascii": "Wed Mar 19 11:02:07 2014", "user.username": "jkitchin", "atoms.resort": [2, 3, 4, 5, 0, 1], "user.email": "jkitchin@andrew.cmu.edu", "user.fullname": "John Kitchin", "O.potential.git_hash": "9a0489b46120b0cad515d935f44b5fbe3a3b1dfa", "atoms.tags": [0, 0, 0, 0, 0, 0], "O.potential.path": "potpaw_PBE/O/POTCAR", "Ru.potential.path": "potpaw_PBE/Ru/POTCAR", "Ru.potential.git_hash": "dee616f2a1e7a5430bb588f1710bfea3001d54ea"}}|-44.251496||+|||||{"keywords": [], "data": {}, "key_value_pairs": {}}
</pre>

<p>
How about the species table:
</p>
<div class="org-src-container">

<pre class="src src-sqlite">select * from species where id=1;
</pre>
</div>

<pre class="example">
Z|n|id
8|4|1
44|2|1
</pre>

<p>
Now we can find a calculation with two Ru and 4 oxygen atoms, but it takes some sqlite knowledge.
</p>

<div class="org-src-container">

<pre class="src src-sqlite">select sp1.id,sys.id 
from species as sp1 
inner join
species as sp2
on sp1.id = sp2.id
inner join systems as sys
on sp1.id=sys.id
where (sp1.Z=44 and sp1.n=2) and (sp2.Z=8 and sp2.n=4);
</pre>
</div>

<pre class="example">
id|id
1|1
</pre>

<p>
That is an expected result. Let us get back to the python interface.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> The python interface to the ase-db</h2>
<div class="outline-text-2" id="text-2">
<p>
Let us search for entries containing 2 Ru atoms and 4 O atoms again. We know this should be the first entry from before. Note how much simpler this syntax is.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> ase.db <span style="color: #8b0000;">import</span> connect

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">I want a sqlite extension, so we have to specify db as the type, which means sqlite</span>
<span style="color: #8b008b;">c</span> = connect(<span style="color: #228b22;">'vaspdb.sqlite'</span>, <span style="color: #cd0000;">type</span>=<span style="color: #228b22;">'db'</span>)

<span style="color: #8b0000;">for</span> row <span style="color: #8b0000;">in</span> c.select(<span style="color: #228b22;">'Ru=2,O=4'</span>): <span style="color: #8b0000;">print</span> row
</pre>
</div>

<pre class="example">
{'ctime': 14.236126003508412, 'energy': -44.251496, 'tags': array([0, 0, 0, 0, 0, 0], dtype=int32), 'positions': array([[ 1.3820537 ,  1.3820537 ,  0.        ],
       [ 3.14487964,  3.14487964,  0.        ],
       [ 3.64552037,  0.88141297,  1.54764608],
       [ 0.88141297,  3.64552037,  1.54764608],
       [ 0.        ,  0.        ,  0.        ],
       [ 2.26346667,  2.26346667,  1.54764608]]), 'calculator': u'vasp', 'calculator_parameters': {u'incar': {u'doc': u'INCAR parameters', u'prec': u'high', u'nbands': 43, u'sigma': 0.1, u'encut': 350.0}, u'doc': u'JSON representation of a VASP calculation.\n\nenergy is in eV\nforces are in eV/\\AA\nstress is in GPa (sxx, syy, szz,  syz, sxz, sxy)\nmagnetic moments are in Bohr-magneton\nThe density of states is reported with E_f at 0 eV.\nVolume is reported in \\AA^3\nCoordinates and cell parameters are reported in \\AA\n\nIf atom-projected dos are included they are in the form:\n{ados:{energy:data, {atom index: {orbital : dos}}}\n', u'potcar': [[u'Ru', u'potpaw_PBE/Ru/POTCAR', u'dee616f2a1e7a5430bb588f1710bfea3001d54ea'], [u'O', u'potpaw_PBE/O/POTCAR', u'9a0489b46120b0cad515d935f44b5fbe3a3b1dfa']], u'input': {u'kpts': array([ 6,  6, 10]), u'reciprocal': False, u'xc': u'PBE', u'kpts_nintersections': None, u'setups': {}, u'txt': u'-', u'gamma': True}, u'atoms': {u'cell': array([[ 4.52693334,  0.        ,  0.        ],
       [ 0.        ,  4.52693334,  0.        ],
       [ 0.        ,  0.        ,  3.09529216]]), u'symbols': [u'O', u'O', u'O', u'O', u'Ru', u'Ru'], u'tags': array([0, 0, 0, 0, 0, 0]), u'pbc': array([ True,  True,  True], dtype=bool), u'positions': array([[ 1.3820537 ,  1.3820537 ,  0.        ],
       [ 3.14487964,  3.14487964,  0.        ],
       [ 3.64552037,  0.88141297,  1.54764608],
       [ 0.88141297,  3.64552037,  1.54764608],
       [ 0.        ,  0.        ,  0.        ],
       [ 2.26346667,  2.26346667,  1.54764608]])}, u'data': {u'stress': array([ 0.08843132,  0.08843132,  0.06042693, -0.        , -0.        , -0.        ]), u'doc': u'Data from the output of the calculation', u'volume': 63.43221074143486, u'total_energy': -44.251496, u'forces': array([[-0.023609, -0.023609,  0.      ],
       [ 0.023609,  0.023609,  0.      ],
       [-0.023609,  0.023609,  0.      ],
       [ 0.023609, -0.023609,  0.      ],
       [ 0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      ]]), u'fermi_level': 5.0374}, u'metadata': {u'date.created': 1395241327.477995, u'uuid': u'7081ee4a-af77-11e3-a6e6-003048f5e49e', u'date.created.ascii': u'Wed Mar 19 11:02:07 2014', u'user.username': u'jkitchin', u'atoms.resort': array([2, 3, 4, 5, 0, 1]), u'user.email': u'jkitchin@andrew.cmu.edu', u'user.fullname': u'John Kitchin', u'O.potential.git_hash': u'9a0489b46120b0cad515d935f44b5fbe3a3b1dfa', u'atoms.tags': array([0, 0, 0, 0, 0, 0]), u'O.potential.path': u'potpaw_PBE/O/POTCAR', u'Ru.potential.path': u'potpaw_PBE/Ru/POTCAR', u'Ru.potential.git_hash': u'dee616f2a1e7a5430bb588f1710bfea3001d54ea'}}, 'cell': array([[ 4.52693334,  0.        ,  0.        ],
       [ 0.        ,  4.52693334,  0.        ],
       [ 0.        ,  0.        ,  3.09529216]]), 'numbers': array([ 8,  8,  8,  8, 44, 44], dtype=int32), 'forces': array([[-0.023609, -0.023609,  0.      ],
       [ 0.023609,  0.023609,  0.      ],
       [-0.023609,  0.023609,  0.      ],
       [ 0.023609, -0.023609,  0.      ],
       [ 0.      ,  0.      ,  0.      ],
       [ 0.      ,  0.      ,  0.      ]]), 'mtime': 14.236126003508412, 'pbc': array([ True,  True,  True], dtype=bool), 'id': 1, 'unique_id': u'3ed58bb16897177be0ed56400c90b6f4', 'user': u'jkitchin'}
</pre>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Summary</h2>
<div class="outline-text-2" id="text-3">
<p>
It is not yet obvious what the advantage of the sqlite format over the json format is. One is that you can use SQL to create queries, which is probably more powerful than the ase-db format. It is a little mysterious how the ase-db searches the json format to me.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/17/The-sqlite-variation-of-ase.db.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Finding the maximum power of a photovoltaic device.]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device" />
    <id>http://jkitchin.github.io/blog/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device</id>
    <updated>2014-04-15T20:38:10Z</updated>
    <published>2014-04-15T20:38:10Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="optimization" />
    <summary type="html"><![CDATA[Finding the maximum power of a photovoltaic device.]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device"><![CDATA[



<p>
A photovoltaic device is characterized by a current-voltage relationship. Let us say, for argument's sake, that the relationship is known and defined by
</p>

<p>
\(i = 0.5 - 0.5 * V^2\)
</p>

<p>
The voltage is highest when the current is equal to zero, but of course then you get no power. The current is highest when the voltage is zero, i.e. short-circuited, but there is again no power. We seek the highest power condition, which is to find the maximum of \(i V\). This is a constrained optimization. We solve it by creating an objective function that returns the negative of (\i V\), and then find the minimum.
</p>

<p>
First, let us examine the i-V relationship.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b008b;">V</span> = np.linspace(0, 1)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">i</span>(V):
    <span style="color: #8b0000;">return</span> 0.5 - 0.5 * V**2
plt.plot(V, i(V))
plt.savefig(<span style="color: #228b22;">'images/iV.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-04-15-Finding-the-maximum-power-of-a-photovoltaic-device./iV.png"> 
</p>
</div>


<p>
Now, let us be sure there is a maximum in power.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np

<span style="color: #8b008b;">V</span> = np.linspace(0, 1)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">i</span>(V):
    <span style="color: #8b0000;">return</span> 0.5 - 0.5 * V**2
plt.plot(V, i(V) * V)
plt.savefig(<span style="color: #228b22;">'images/P1.png'</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2014-04-15-Finding-the-maximum-power-of-a-photovoltaic-device./P1.png"> 
</p>
</div>

<p>
You can see in fact there is a maximum, near V=0.6. We could solve this problem analytically by taking the appropriate derivative and solving it for zero. That still might require solving a nonlinear problem though. We will directly setup and solve the constrained optimization. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> scipy.optimize <span style="color: #8b0000;">import</span> fmin_slsqp
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">objective</span>(X):
    <span style="color: #8b008b;">i</span>, <span style="color: #8b008b;">V</span> = X
    <span style="color: #8b0000;">return</span> - i * V

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">eqc</span>(X):
    <span style="color: #228b22;">'equality constraint'</span>
    <span style="color: #8b008b;">i</span>, <span style="color: #8b008b;">V</span> = X
    <span style="color: #8b0000;">return</span> (0.5 - 0.5 * V**2) - i

<span style="color: #8b008b;">X0</span> = [0.2, 0.6]
<span style="color: #8b008b;">X</span> = fmin_slsqp(objective, X0, eqcons=[eqc])

<span style="color: #8b008b;">imax</span>, <span style="color: #8b008b;">Vmax</span> = X


<span style="color: #8b008b;">V</span> = np.linspace(0, 1)

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">i</span>(V):
    <span style="color: #8b0000;">return</span> 0.5 - 0.5 * V**2
plt.plot(V, i(V), Vmax, imax, <span style="color: #228b22;">'ro'</span>)
plt.savefig(<span style="color: #228b22;">'images/P2.png'</span>)
</pre>
</div>

<pre class="example">
Optimization terminated successfully.    (Exit mode 0)
            Current function value: -0.192450127337
            Iterations: 5
            Function evaluations: 20
            Gradient evaluations: 5
</pre>


<div class="figure">
<p><img src="/media/2014-04-15-Finding-the-maximum-power-of-a-photovoltaic-device./P2.png"> 
</p>
</div>

<p>
You can see the maximum power is approximately 0.2 (unspecified units), at the conditions indicated by the red dot in the figure above.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/15/Finding-the-maximum-power-of-a-photovoltaic-device..org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Popup tips on bibtex links in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/12/Popup-tips-on-bibtex-links-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2014/04/12/Popup-tips-on-bibtex-links-in-org-mode</id>
    <updated>2014-04-12T14:15:45Z</updated>
    <published>2014-04-12T14:15:45Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="uncategorized" />
    <summary type="html"><![CDATA[Popup tips on bibtex links in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/12/Popup-tips-on-bibtex-links-in-org-mode"><![CDATA[



<p>
I want to explore using popup tips to display richer information about org-mode links. The idea is to have something like a tooltip that displays the bibtex entry when you hover over it, or click on it. 
</p>

<p>
<a href="https://github.com/auto-complete/popup-el/blob/master/popup.el">https://github.com/auto-complete/popup-el/blob/master/popup.el</a> 
</p>

<p>
Here is a canonical example of a popup.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(popup-tip <span style="color: #228b22;">"Hello, World!"</span>)
</pre>
</div>

<pre class="example">
t
</pre>


<div class="figure">
<p><img src="/media/2014-04-12-Popup-tips-on-bibtex-links-in-org-mode/hello-world-popup.png"> 
</p>
</div>

<p>
All I need to do is figure out a simple way to get the bibtex entry as a string, and pop it up when a link is clicked on.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #228b22;">"test"</span>
 <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">this function is run when you click</span>
 (<span style="color: #8b0000;">lambda</span> (link-string) 
   (popup-tip link-string))
 <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">formatting</span>
(<span style="color: #8b0000;">lambda</span> (keyword desc format)
   (<span style="color: #8b0000;">cond</span>
    ((eq format 'html) (format <span style="color: #228b22;">"&lt;pre&gt;%s:%s&lt;/pre&gt;"</span> keyword desc)))))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">(link-string)</td>
<td class="left">(popup-tip link-string)</td>
</tr>

<tr>
<td class="left">lambda</td>
<td class="left">(keyword desc format)</td>
<td class="left">(cond ((eq format (quote html)) (format &lt;pre&gt;%s:%s&lt;/pre&gt; keyword desc)))</td>
</tr>
</tbody>
</table>

<p>
Now we give it a try.   <pre>test:show-me-the-popup</pre> 
</p>


<div class="figure">
<p><img src="/media/2014-04-12-Popup-tips-on-bibtex-links-in-org-mode/test-link-popup.png"> 
</p>
</div>

<p>
That looks good.
</p>

<p>
Ok, the penultimate step will be to lookup a bibtex entry, and show the entry in a popup. We will hardcode the path to the bibtex file. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #228b22;">"test"</span>
 <span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">this function is run when you click</span>
 (<span style="color: #8b0000;">lambda</span> (bibtex-key)
   (<span style="color: #8b0000;">let</span> ((entry (<span style="color: #8b0000;">with-temp-buffer</span>
                  (insert-file-contents <span style="color: #228b22;">"~/Dropbox/bibliography/references.bib"</span>)
                  (goto-char (point-min))
                  (re-search-forward bibtex-key)
                  (bibtex-narrow-to-entry)
                  (buffer-string))))
     (popup-tip entry))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">(bibtex-key)</td>
<td class="left">(let ((cb (current-buffer)) (entry (with-temp-buffer (insert-file-contents ~/Dropbox/bibliography/references.bib) (goto-char (point-min)) (re-search-forward bibtex-key) (bibtex-narrow-to-entry) (buffer-string)))) (popup-tip entry))</td>
</tr>
</tbody>
</table>


<p>
<pre>test:mehta-2014-ident-poten</pre> 
</p>

<p>
And here is what appears for me:
<img src="/media/2014-04-12-Popup-tips-on-bibtex-links-in-org-mode/bibtex-popup-entry.png"> 
</p>

<p>
The final step is to connect this to an <a href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Idle-Timers.html">idle timer</a> . We want a popup to occur when our mouse is idle. I am setting this up to run one time, after 5 seconds of idleness.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(run-with-idle-timer 5 nil (<span style="color: #8b0000;">lambda</span> () (popup-tip <span style="color: #228b22;">"You are being idle"</span>)))
</pre>
</div>
<pre class="example">
[nil 0 5 0 nil (lambda nil (popup-tip "You are being idle")) nil idle 0]
</pre>


<div class="figure">
<p><img src="/media/2014-04-12-Popup-tips-on-bibtex-links-in-org-mode/idle-timer-popup.png"> 
</p>
</div>

<p>
So, we need to setup an idle timer that runs on some interval. When the cursor is on the right kind of link, we want to get a popup. I adapted the following code from <a href="http://www.emacswiki.org/emacs/IdleTimers">http://www.emacswiki.org/emacs/IdleTimers</a> .
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">variable for the timer object</span>
(<span style="color: #8b0000;">defvar</span> <span style="color: #8b008b;">idle-timer-bibtex-timer</span> nil)

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">callback function </span>
(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">idle-timer-bibtex-callback</span> ()
  <span style="color: #228b22;">"displays a popup of the bibtex entry in a test link"</span>
  (interactive)
  (<span style="color: #8b0000;">let</span> ((object (org-element-context)))    
    (<span style="color: #8b0000;">when</span> (and (equal (org-element-type object) 'link) 
               (equal (org-element-property <span style="color: #cd0000;">:type</span> object) <span style="color: #228b22;">"test"</span>))
      (<span style="color: #8b0000;">let*</span> ((bibtex-key (org-element-property <span style="color: #cd0000;">:path</span> object))
             (entry (<span style="color: #8b0000;">with-temp-buffer</span>
                      (insert-file-contents <span style="color: #228b22;">"~/Dropbox/bibliography/references.bib"</span>)
                      (goto-char (point-min))
                      (re-search-forward bibtex-key)
                      (bibtex-narrow-to-entry)
                      (buffer-string))))
        (popup-tip entry)))))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">start functions</span>
(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">idle-timer-bibtex-start</span> ()
  (interactive)
  (<span style="color: #8b0000;">when</span> (timerp idle-timer-bibtex-timer)
    (cancel-timer idle-timer-bibtex-timer))
  (setq idle-timer-bibtex-timer
          (run-with-timer 1 1 #'idle-timer-bibtex-callback)))

<span style="color: #ff0000; font-weight: bold;">;; </span><span style="color: #ff0000; font-weight: bold;">stop function</span>
(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">idle-timer-bibtex-stop</span> ()
  (interactive)
  (<span style="color: #8b0000;">when</span> (timerp idle-timer-bibtex-timer)
    (cancel-timer idle-timer-bibtex-timer))
  (setq idle-timer-bibtex-timer nil))

(idle-timer-bibtex-start)
</pre>
</div>
<pre class="example">
idle-timer-bibtex-stop
</pre>


<p>
<pre>test:kitchin-2008-alloy</pre> 
</p>

<p>
Now, whenever the cursor is on the link, and there is an idle of about a sec, I get a popup window of the bibtex entry. It looks like this:
</p>


<div class="figure">
<p><img src="/media/2014-04-12-Popup-tips-on-bibtex-links-in-org-mode/bibtex-popup2.png"> 
</p>
</div>

<p>
There are still some limitations to this code. It does not handle multiple citations in a link (like the cite links I normally use do). That will take a little work to fixup. I cannot figure out how to get mouse-over tooltips; this only works when the cursor is on the link.  I do not know what the optimal timer setting is. This one runs every second. I do not see any issues in performance with that. Another issue might be making the timer a file local variable. It would be nice if the timer quit running when the file was closed. I do not know how easy that would be to implement, or if there should be one timer running for org-mode. Finally, this code is hard-coded to use my reference file. For a real module, we would probably provide some customization to choose other bibtex files. Overall though, this might be a handy way to quickly peruse the citations in an org-file.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/12/Popup-tips-on-bibtex-links-in-org-mode.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Multiple search criteria to find bibtex entries]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/08/Multiple-search-criteria-to-find-bibtex-entries" />
    <id>http://jkitchin.github.io/blog/2014/04/08/Multiple-search-criteria-to-find-bibtex-entries</id>
    <updated>2014-04-08T20:45:35Z</updated>
    <published>2014-04-08T20:45:35Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bibtex" />
    <summary type="html"><![CDATA[Multiple search criteria to find bibtex entries]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/08/Multiple-search-criteria-to-find-bibtex-entries"><![CDATA[



<p>
I have been thinking about ways to search my bibtex file with multiple criteria. Eventually, I want a decent natural language search like "au=kitchin and alloy" to find papers authored by me about alloys. For now, I am going to settle with a way to find these. This strategy will create a search function that prints the entries that are found. Here is the prototype idea:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #8b0000;">defun</span> <span style="color: #8b2323;">my-search</span> (key start end)
  (<span style="color: #8b0000;">when</span> (and (re-search-forward <span style="color: #228b22;">"kitchin"</span> end t)
           (re-search-forward <span style="color: #228b22;">"alloy"</span> end t))
      (princ (format <span style="color: #228b22;">"%s\n"</span> (buffer-substring start end)))))

(<span style="color: #8b0000;">with-temp-buffer</span>
  (insert-file-contents <span style="color: #228b22;">"../../bibliography/references.bib"</span>)
  (bibtex-map-entries  'my-search))
</pre>
</div>

<pre class="example">
@ARTICLE{inoglu-2011-ident-sulfur,
  pdf =		 {[[file:bibtex-pdfs/inoglu-2011-ident-sulfur.pdf]]},
  org-notes =
                  {[[file:~/Dropbox/bibliography/notes.org::inoglu-2011-ident-sulfur]]},
  author =	 {Inoglu, Nilay and Kitchin, John R.},
  title =	 {Identification of Sulfur-Tolerant Bimetallic
                  Surfaces Using {DFT} Parametrized Models and
                  Atomistic Thermodynamics},
  journal =	 {ACS Catalysis},
  year =	 2011,
  pages =	 {399--407},
  abstract =	 {The identification of sulfur-tolerant alloys for
                  catalytic applications is difficult due to the
                  combinatorially large number of alloy compositions
                  and surface structures that may be
                  considered. Density functional theory calculations
                  (DFT) are not fast enough to enumerate all the
                  possible structures and their sulfur tolerance. In
                  this work, a DFT parametrized algebraic model that
                  accounts for structure and composition was used to
                  estimate the d-band properties and sulfur adsorption
                  energies of 370 transition metal-based bimetallic
                  alloy surfaces.  The estimated properties were
                  validated by DFT calculations for 110 of the surface
                  structures. We then utilized an atomistic
                  thermodynamic framework that includes surface
                  segregation, the presence of adsorbates, and effects
                  of environmental conditions to identify alloy
                  compositions and structures with enhanced sulfur
                  tolerance that are likely to be stable under the
                  environmental conditions. As a case study, we show
                  how this database can be used to identify
                  sulfur-tolerant Cu-based catalysts and compare the
                  results with what is known about these catalysts
                  experimentally.},
  doi =		 {10.1021/cs200039t},
  issn =	 {null},
  type =	 {Journal Article}
}
@ARTICLE{kitchin-2008-alloy,
  pdf =		 {[[file:bibtex-pdfs/kitchin-2008-alloy.pdf]]},
  org-notes =
                  {[[file:~/Dropbox/bibliography/notes.org::kitchin-2008-alloy]]},
  author =	 {Kitchin, J. R. and Reuter, K. and Scheffler, M.},
  title =	 {Alloy surface segregation in reactive environments:
                  First-principles atomistic thermodynamics study of
                  \ce{Ag_3Pd}(111) in oxygen atmospheres},
  journal =	 {Physical Review B},
  year =	 2008,
  volume =	 77,
  number =	 7,
  abstract =	 {We present a first-principles atomistic
                  thermodynamics framework to describe the structure,
                  composition, and segregation profile of an alloy
                  surface in contact with a (reactive)
                  environment. The method is illustrated with the
                  application to a Ag3Pd(111) surface in an oxygen
                  atmosphere, and we analyze trends in segregation,
                  adsorption, and surface free energies. We observe a
                  wide range of oxygen adsorption energies on the
                  various alloy surface configurations, including
                  binding that is stronger than on a Pd(111) surface
                  and weaker than that on a Ag(111) surface. This and
                  the consideration of even small amounts of
                  nonstoichiometries in the ordered bulk alloy are
                  found to be crucial to accurately model the Pd
                  surface segregation occurring in increasingly O-rich
                  gas phases.},
  doi =		 {http://dx.doi.org/10.1103/PhysRevB.77.075437},
  pages =	 075437,
  issn =	 {1098-0121},
  type =	 {Journal Article}
}
@ARTICLE{tierney-2009-hydrog-dissoc,
  pdf =		 {[[file:bibtex-pdfs/tierney-2009-hydrog-dissoc.pdf]]},
  org-notes =
                  {[[file:~/Dropbox/bibliography/notes.org::tierney-2009-hydrog-dissoc]]},
  author =	 {Tierney, H. L. and Baber, A. E. and Kitchin,
                  J. R. and Sykes, E.  C. H.},
  title =	 {Hydrogen Dissociation and Spillover on Individual
                  Isolated Palladium Atoms},
  journal =	 {Physical Review Letters},
  year =	 2009,
  volume =	 103,
  number =	 24,
  abstract =	 {Using a combination of low-temperature scanning
                  tunneling microscopy and density functional theory
                  it is demonstrated how the nature of an inert host
                  metal of an alloy can affect the thermodynamics and
                  kinetics of a reaction pathway in a much more
                  profound way than simply a dilution, electronic, or
                  geometric effect. This study reveals that
                  individual, isolated Pd atoms can promote H-2
                  dissociation and spillover onto a Cu(111) surface,
                  but that the same mechanism is not observed for an
                  identical array of Pd atoms in Au(111).},
  pages =	 246102,
  doi =		 {10.1103/PhysRevLett.103.246102},
  issn =	 {0031-9007},
  url =		 {http://prl.aps.org/abstract/PRL/v103/i24/e246102},
  type =	 {Journal Article}
}
</pre>

<p>
That is not too bad. If I had a parser like <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags/">this one</a> , I could do some reasonable searches. I could try integrating it with reftex or something similar for selecting citations. I would like that a lot.
</p>

<p>
What if I wanted to find articles with Kitchin as an author, and alloy in the title? This is my best effort at doing that, where I explicitly match the fields in the bibtex entries.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(find-file <span style="color: #228b22;">"~/Dropbox/bibliography/references.bib"</span>)
(bibtex-map-entries (<span style="color: #8b0000;">lambda</span> (bibtex-key start end) 
                      (<span style="color: #8b0000;">let*</span> ((entry (bibtex-parse-entry))
                             (title (cdr (assoc <span style="color: #228b22;">"title"</span> entry)))
                             (authors (cdr (assoc <span style="color: #228b22;">"author"</span> entry))))
                        (<span style="color: #8b0000;">when</span> (and title (string-match <span style="color: #228b22;">"alloy"</span> title) 
                                   authors (string-match <span style="color: #228b22;">"kitchin"</span> authors))
                          (princ (buffer-substring start end)))))))
</pre>
</div>

<pre class="example">
@ARTICLE{kitchin-2008-alloy,
  pdf =		 {[[file:bibtex-pdfs/kitchin-2008-alloy.pdf]]},
  org-notes =
                  {[[file:~/Dropbox/bibliography/notes.org::kitchin-2008-alloy]]},
  author =	 {Kitchin, J. R. and Reuter, K. and Scheffler, M.},
  title =	 {Alloy surface segregation in reactive environments:
                  First-principles atomistic thermodynamics study of
                  \ce{Ag_3Pd}(111) in oxygen atmospheres},
  journal =	 {Physical Review B},
  year =	 2008,
  volume =	 77,
  number =	 7,
  abstract =	 {We present a first-principles atomistic
                  thermodynamics framework to describe the structure,
                  composition, and segregation profile of an alloy
                  surface in contact with a (reactive)
                  environment. The method is illustrated with the
                  application to a Ag3Pd(111) surface in an oxygen
                  atmosphere, and we analyze trends in segregation,
                  adsorption, and surface free energies. We observe a
                  wide range of oxygen adsorption energies on the
                  various alloy surface configurations, including
                  binding that is stronger than on a Pd(111) surface
                  and weaker than that on a Ag(111) surface. This and
                  the consideration of even small amounts of
                  nonstoichiometries in the ordered bulk alloy are
                  found to be crucial to accurately model the Pd
                  surface segregation occurring in increasingly O-rich
                  gas phases.},
  doi =		 {http://dx.doi.org/10.1103/PhysRevB.77.075437},
  pages =	 075437,
  issn =	 {1098-0121},
  type =	 {Journal Article}
}
</pre>

<p>
This is a more precise search, which yields only one entry. That is not exactly nimble searching, but it does provide precision. I need to think about this some more.
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/08/Multiple-search-criteria-to-find-bibtex-entries.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication in JACS]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/07/New-publication-in-JACS" />
    <id>http://jkitchin.github.io/blog/2014/04/07/New-publication-in-JACS</id>
    <updated>2014-04-07T21:08:42Z</updated>
    <published>2014-04-07T21:08:42Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <category scheme="http://jkitchin.github.io/blog" term="publication" />
    <summary type="html"><![CDATA[New publication in JACS]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/07/New-publication-in-JACS"><![CDATA[


<p>
<b>Electrocatalytic Oxygen Evolution with an Immobilized TAML Activator</b>
</p>

<p>
Ethan L. Demeter, Shayna L. Hilburg, Newell R. Washburn, Terrence J. Collins, and John R. Kitchin
</p>

<p>
Iron complexes of tetra-amido macrocyclic ligands are important members of the suite of oxidation catalysts known as TAML activators. TAML activators are known to be fast homogeneous water oxidation (WO) catalysts, producing oxygen in the presence of chemical oxidants, e.g., ceric ammonium nitrate. These homogeneous systems exhibited low turnover numbers (TONs). Here we demonstrate immobilization on glassy carbon and carbon paper in an ink composed of the prototype TAML activator, carbon black, and Nafion and the subsequent use of this composition in heterogeneous electrocatalytic WO. The immobilized TAML system is shown to readily produce O2 with much higher TONs than the homogeneous predecessors.
</p>

<p>
<a href="http://pubs.acs.org/doi/full/10.1021/ja5015986">http://pubs.acs.org/doi/full/10.1021/ja5015986</a> 
</p>

<p>
Congratulations Ethan!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/07/New-publication-in-JACS.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Scheduling tasks on a rotating semester basis]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis" />
    <id>http://jkitchin.github.io/blog/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis</id>
    <updated>2014-04-03T19:29:35Z</updated>
    <published>2014-04-03T19:29:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Scheduling tasks on a rotating semester basis]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis"><![CDATA[



<p>
Let us say we have a list of tasks labeled task a through k. We want to schedule these tasks on a rotating basis, so that some tasks are done in even years and some tasks are done in odd years. Within those years, some tasks are done in the Fall, and some are done in the spring. This post explores how to code those tasks so we can figure out which tasks should be done in some part of some year. 
</p>

<p>
We break the problem down like this. A year is an even year if <code>mod(year,2)=0</code>, and it is odd if <code>mod(year,2)=1</code>. So for a year, we have a bit of information. Now, since there are two times of the year we will do the tasks, we can assign this as another bit, e.g. <code>FALL=0</code>, and <code>SPRING=1</code>. Now, we have the following possibilities:
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="left" />

<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">year</th>
<th scope="col" class="left">time period</th>
<th scope="col" class="right">binary code</th>
<th scope="col" class="right">decimal number</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">2013</td>
<td class="left">Fall</td>
<td class="right">10</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">2014</td>
<td class="left">Spring</td>
<td class="right">01</td>
<td class="right">1</td>
</tr>

<tr>
<td class="right">2014</td>
<td class="left">Fall</td>
<td class="right">00</td>
<td class="right">0</td>
</tr>

<tr>
<td class="right">2015</td>
<td class="left">Spring</td>
<td class="right">11</td>
<td class="right">3</td>
</tr>
</tbody>
</table>

<p>
And then the cycle will repeat. So, if we code each task with an integer of 0, 1, 2 or 3, we can say in a given year and time period whether a task should be completed. If <code>2 * mod(year, 2) + period_code</code> is equal to the code on the task, then it should be executed.
</p>

<p>
Now, we need to start the task sequence. Let us say we start in the Fall of 2013. That is an odd year, so <code>year % 2 = 1</code>, and we use a tag  of <code>0</code> to represent the Fall semester, giving an overall binary code of <code>10</code> which is equal to 2, so all tasks labeled 2 should be executed. 
</p>

<p>
We will assign the codes to each task by enumerating a string of letters, and giving the task a code of mod(letter index, 4). That will loop through the tasks assigning codes of 0, 1, 2 or 3 to each task. 
</p>

<p>
So to schedule these we will loop through a list of years, calculate the code for each year and time perid, and then filter the list of tasks with that code.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">tasks</span> = [(letter, i % 4) <span style="color: #8b0000;">for</span> i,letter <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">enumerate</span>(<span style="color: #228b22;">'abcdefghijk'</span>)]

<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'tasks = '</span>,tasks

<span style="color: #8b008b;">SEMESTERS</span> = ((<span style="color: #228b22;">'FALL'</span>,0), (<span style="color: #228b22;">'SPRING'</span>,1))

<span style="color: #8b0000;">for</span> year <span style="color: #8b0000;">in</span> [2013, 2014, 2015, 2016, 2017, 2018]:
    <span style="color: #8b0000;">for</span> semester,i <span style="color: #8b0000;">in</span> SEMESTERS:
        <span style="color: #8b008b;">N</span> = 2 * (year % 2) + i
        <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0} {1:8s}: {2}'</span>.<span style="color: #cd0000;">format</span>(year, semester,
                                    [x[0] <span style="color: #8b0000;">for</span> x <span style="color: #8b0000;">in</span> 
                                     <span style="color: #cd0000;">filter</span>(<span style="color: #8b0000;">lambda</span> x: x[1]==N,
                                            tasks)])
</pre>
</div>

<pre class="example">
tasks =  [('a', 0), ('b', 1), ('c', 2), ('d', 3), ('e', 0), ('f', 1), ('g', 2), ('h', 3), ('i', 0), ('j', 1), ('k', 2)]
2013 FALL    : ['c', 'g', 'k']
2013 SPRING  : ['d', 'h']
2014 FALL    : ['a', 'e', 'i']
2014 SPRING  : ['b', 'f', 'j']
2015 FALL    : ['c', 'g', 'k']
2015 SPRING  : ['d', 'h']
2016 FALL    : ['a', 'e', 'i']
2016 SPRING  : ['b', 'f', 'j']
2017 FALL    : ['c', 'g', 'k']
2017 SPRING  : ['d', 'h']
2018 FALL    : ['a', 'e', 'i']
2018 SPRING  : ['b', 'f', 'j']
</pre>

<p>
This leads to each task being completed every other year. We could also write a function and filter by list comprehension.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b008b;">tasks</span> = [(letter, i % 4) <span style="color: #8b0000;">for</span> i,letter <span style="color: #8b0000;">in</span> <span style="color: #cd0000;">enumerate</span>(<span style="color: #228b22;">'abcdefghijk'</span>)]

<span style="color: #8b008b;">FALL</span> = 0
<span style="color: #8b008b;">SPRING</span> = 1

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">execute_p</span>(year, semester, task):
    <span style="color: #228b22;">'year is an integer, semester is 0 for fall, 1 for spring, task is a tuple of (label,code)'</span>
    <span style="color: #8b008b;">N</span> = 2 * (year % 2) + semester
    <span style="color: #8b0000;">return</span> task[1] == N

<span style="color: #8b008b;">YEAR</span>, SEMESTER = 2018, FALL
<span style="color: #8b0000;">print</span> <span style="color: #228b22;">'{0} {1:8s}: {2}'</span>.<span style="color: #cd0000;">format</span>(YEAR, 
                               <span style="color: #228b22;">'FALL'</span> <span style="color: #8b0000;">if</span> SEMESTER==0 <span style="color: #8b0000;">else</span> <span style="color: #228b22;">'SPRING'</span>,
                               [task[0]  <span style="color: #8b0000;">for</span> task <span style="color: #8b0000;">in</span> tasks
                                <span style="color: #8b0000;">if</span> execute_p(2018, FALL, task)])
</pre>
</div>

<pre class="example">
2018 FALL    : ['a', 'e', 'i']
</pre>

<p>
Now, at any point in the future you can tell what tasks should be done!
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/04/03/Scheduling-tasks-on-a-rotating-semester-basis.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using pyparsing for search  queries with tags]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags" />
    <id>http://jkitchin.github.io/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags</id>
    <updated>2014-03-31T13:21:16Z</updated>
    <published>2014-03-31T13:21:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Using pyparsing for search  queries with tags]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/31/Using-pyparsing-for-search-queries-with-tags"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Parsing simple string and generating lisp</a></li>
<li><a href="#sec-2">2. Parsing a search string to generate python set notations</a></li>
</ul>
</div>
</div>

<p>
A few times I  have wanted  to use  a more natural search string like "A and pw and 350 and not  kpt". The trouble  is figuring out how to parse that string and turn it  into search code. There  may  be nested logic,  e.g. "(A xor B)  and  (pw and (200 or 300))". This means we have  to recursively parse  the sstring. Rather  than invent this from  scratch, we  use pyparsing which is designed for that. There is   some code in "Getting started with pyparsing" that provides an example on parsing search strings. I want to see how I can turn the parsed output into search code. Here, we parse the search string and generate something that looks like lisp code. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Parsing simple string and generating lisp</h2>
<div class="outline-text-2" id="text-1">
<p>
We define  a  hiearchy of classes that codifythe operators, and which print representations of the logic. The grammar we implement is basically words or  strings separatedd by logic operators.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> pyparsing <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">UnaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #228b22;">'takes one operand,e.g. not'</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op, <span style="color: #8b0000;">self</span>.operands = tokens[0]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">BinaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #228b22;">'takes two or more operands, e.g. and, or'</span>
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op = tokens[0][1]
        <span style="color: #8b0000;">self</span>.operands = tokens[0][0::2]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchAnd</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'(AND {0})'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #228b22;">' '</span>.join(<span style="color: #cd0000;">str</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands))
        
<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchOr</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'(OR {0})'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #228b22;">' '</span>.join(<span style="color: #cd0000;">str</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands))

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchNot</span>(UnaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'(NOT {0})'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.operands)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchTerm</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #228b22;">'represents a termthat is being searched. here just a word'</span>                         
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.term = tokens[0]

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #8b0000;">self</span>.term

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the grammar</span>
<span style="color: #8b008b;">and_</span> = CaselessLiteral(<span style="color: #228b22;">"and"</span>)
<span style="color: #8b008b;">or_</span> = CaselessLiteral(<span style="color: #228b22;">"or"</span>)
<span style="color: #8b008b;">not_</span> = CaselessLiteral(<span style="color: #228b22;">"not"</span>)

<span style="color: #8b008b;">searchTerm</span> = Word(alphanums) | quotedString.setParseAction(removeQuotes)
searchTerm.setParseAction(SearchTerm)

<span style="color: #8b008b;">searchExpr</span> = operatorPrecedence( searchTerm,
                                 [(not_, 1, opAssoc.RIGHT, SearchNot),
                                  (and_, 2, opAssoc.LEFT, SearchAnd),
                                  (or_, 2, opAssoc.LEFT, SearchOr)])


<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not kpt'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not (kpt and eos)'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue or red'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue and heavy or red'</span>)[0]
</pre>
</div>

<pre class="example">
(NOT kpt)
(NOT (AND kpt eos))
(OR (AND wood blue) red)
(OR (AND wood blue heavy) red)
</pre>

<p>
That works pretty well, and does not seem overly complicated to me. There is a lot of class definition, but that would presumably get buried in a module as a one time investment, and some function interface would look like this: <code>search('wood and blue or red')</code>.
</p>

<p>
Now, let us try python notation. 
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Parsing a search string to generate python set notations</h2>
<div class="outline-text-2" id="text-2">
<p>
I will use a similar idea as I used before with TAGS. We will use set operations with the binary logical operators to do the actual searching. Finally, we wrap the code in a little function to search a dictionary we previously made.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> pyparsing <span style="color: #8b0000;">import</span> *

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">UnaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op, <span style="color: #8b0000;">self</span>.operands = tokens[0]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">BinaryOperation</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.op = tokens[0][1]
        <span style="color: #8b0000;">self</span>.operands = tokens[0][0::2]

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchAnd</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'('</span> + <span style="color: #228b22;">' &amp; '</span>.join([<span style="color: #228b22;">'{}'</span>.<span style="color: #cd0000;">format</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands]) + <span style="color: #228b22;">')'</span>
        
<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchOr</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'('</span> + <span style="color: #228b22;">' | '</span>.join([<span style="color: #228b22;">'{}'</span>.<span style="color: #cd0000;">format</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands]) +<span style="color: #228b22;">')'</span>

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchXor</span>(BinaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'('</span> + <span style="color: #228b22;">' ^ '</span>.join([<span style="color: #228b22;">'{}'</span>.<span style="color: #cd0000;">format</span>(oper) <span style="color: #8b0000;">for</span> oper <span style="color: #8b0000;">in</span> <span style="color: #8b0000;">self</span>.operands]) + <span style="color: #228b22;">')'</span>

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchNot</span>(UnaryOperation):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'TAGS[\'all\'] - {}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.operands)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">SearchTerm</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, tokens):
        <span style="color: #8b0000;">self</span>.term = tokens[0]

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__repr__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #228b22;">'instead of just the  term, we represent it as TAGS[term]'</span>
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'TAGS[\'{0}\']'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.term)

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">the grammar</span>
<span style="color: #8b008b;">and_</span> = CaselessLiteral(<span style="color: #228b22;">"and"</span>)
<span style="color: #8b008b;">or_</span> = CaselessLiteral(<span style="color: #228b22;">"or"</span>)
<span style="color: #8b008b;">xor_</span> = CaselessLiteral(<span style="color: #228b22;">"xor"</span>)
<span style="color: #8b008b;">not_</span> = CaselessLiteral(<span style="color: #228b22;">"not"</span>)

<span style="color: #8b008b;">searchTerm</span> = Word(alphanums) | quotedString.setParseAction(removeQuotes)
searchTerm.setParseAction(SearchTerm)

<span style="color: #8b008b;">searchExpr</span> = operatorPrecedence( searchTerm,
                                 [(not_, 1, opAssoc.RIGHT, SearchNot),
                                  (and_, 2, opAssoc.LEFT, SearchAnd),
                                  (xor_, 2, opAssoc.LEFT, SearchXor),
                                  (or_, 2, opAssoc.LEFT, SearchOr)])

<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not kpt'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'not (kpt and eos)'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'kpt or not eos)'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue or red'</span>)[0]
<span style="color: #8b0000;">print</span> searchExpr.parseString(<span style="color: #228b22;">'wood and blue xor red'</span>)[0]

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">check it out on tags.</span>
<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">search_tags</span>(srch):
    <span style="color: #228b22;">'function to  search the TAGS  file'</span>
    <span style="color: #8b0000;">import</span> pickle

    <span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
        <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())
    
    <span style="color: #8b008b;">s</span> = searchExpr.parseString(srch)[0]
    <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">eval</span>(<span style="color: #cd0000;">str</span>(s))
<span style="color: #8b0000;">print</span> search_tags(<span style="color: #228b22;">'pw and A and not 300'</span>)
</pre>
</div>

<pre class="example">
TAGS['all'] - TAGS['kpt']
TAGS['all'] - (TAGS['kpt'] &amp; TAGS['eos'])
(TAGS['kpt'] | TAGS['all'] - TAGS['eos'])
((TAGS['wood'] &amp; TAGS['blue']) | TAGS['red'])
((TAGS['wood'] &amp; TAGS['blue']) ^ TAGS['red'])
set(['tags\\A\\pw\\350', 'tags\\A\\pw', 'tags\\A\\pw\\200', 'tags\\A\\pw\\400', 'tags\\A\\pw\\250'])
</pre>

<p>
That is pretty nice. It looks like a nice syntax for queries. One day I will try incorporating this into a database application.
</p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/31/Using-pyparsing-for-search-queries-with-tags.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Searching for directories by tags]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/29/Searching-for-directories-by-tags" />
    <id>http://jkitchin.github.io/blog/2014/03/29/Searching-for-directories-by-tags</id>
    <updated>2014-03-30T12:02:43Z</updated>
    <published>2014-03-29T17:41:08Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Searching for directories by tags]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/29/Searching-for-directories-by-tags"><![CDATA[



<p>
Today I explore searching for directories by using tags. We will create a TAGS table by first walking through the directories and tagging each directory with all of the relative path components. Then, we will use set algebra to identify specific directories.
</p>

<p>
First, let us make a directory setup to use. We will nest some calculations that might be typical. These will be nested directories that might contain planewave (pw) and k-points (kpts) convergence and equation of state (eos) directories, with the sets of calculations inside those. The idea then is that the directory components will form at least some of the tags.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> os

os.mkdir(<span style="color: #228b22;">'tags'</span>)

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> c <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'pw'</span>, <span style="color: #228b22;">'kpts'</span>, <span style="color: #228b22;">'eos'</span>]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, c))

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> run <span style="color: #8b0000;">in</span> [1, 2, 3, 4, 5]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, <span style="color: #228b22;">'eos'</span>, <span style="color: #cd0000;">str</span>(run)))

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> run <span style="color: #8b0000;">in</span> [200, 250, 300, 350, 400]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, <span style="color: #228b22;">'pw'</span>, <span style="color: #cd0000;">str</span>(run)))

<span style="color: #8b0000;">for</span> cmpd <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'A'</span>, <span style="color: #228b22;">'B'</span>, <span style="color: #228b22;">'C'</span>, <span style="color: #228b22;">'D'</span>]:
    <span style="color: #8b0000;">for</span> run <span style="color: #8b0000;">in</span> [<span style="color: #228b22;">'2x2x2'</span>, <span style="color: #228b22;">'4x4x4'</span>, <span style="color: #228b22;">'8x8x8'</span>]:
        os.makedirs(os.path.join(<span style="color: #228b22;">'tags'</span>, cmpd, <span style="color: #228b22;">'kpts'</span>, <span style="color: #cd0000;">str</span>(run)))
</pre>
</div>

<p>
Let us just double check what this directory tree looks like for one compound A.
</p>
<div class="org-src-container">

<pre class="src src-sh">ls tags/A/*
</pre>
</div>

<pre class="example">
tags/A/eos:
1
2
3
4
5

tags/A/kpts:
2x2x2
4x4x4
8x8x8

tags/A/pw:
200
250
300
350
400
</pre>

<p>
Now, we will walk through the directories, and split the path components to create a TAGS structure. I will store these as sets within a dictionary. We will save the structure in a pickle file to reuse it later.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> os
<span style="color: #8b0000;">import</span> pickle

<span style="color: #8b008b;">TAGS</span> = {}
<span style="color: #8b008b;">TAGS</span>[<span style="color: #228b22;">'all'</span>] = <span style="color: #cd0000;">set</span>()

<span style="color: #8b0000;">for</span> root, dirs, files <span style="color: #8b0000;">in</span> os.walk(<span style="color: #228b22;">'tags'</span>):
    <span style="color: #8b008b;">base</span>, <span style="color: #8b008b;">tail</span> = os.path.split(root)
    TAGS[<span style="color: #228b22;">'all'</span>].add(root)
    <span style="color: #8b0000;">while</span> base:
        <span style="color: #8b0000;">if</span> tail <span style="color: #8b0000;">in</span> TAGS:
            TAGS[tail].add(root)
        <span style="color: #8b0000;">else</span>:
            <span style="color: #8b008b;">TAGS</span>[tail] = <span style="color: #cd0000;">set</span>([root])
        <span style="color: #8b008b;">base</span>, <span style="color: #8b008b;">tail</span> = os.path.split(base)

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'w'</span>) <span style="color: #8b0000;">as</span> f:
    f.write(pickle.dumps(TAGS))

<span style="color: #8b0000;">print</span> TAGS.keys()
</pre>
</div>

<pre class="example">
['A', '1', 'all', 'B', '250', 'pw', '2x2x2', '300', 'C', '400', 'kpts', '8x8x8', 'eos', '3', '2', '5', '4', '350', '200', '4x4x4', 'D']
</pre>

<p>
Now we have a lot of keys that tag each directory. Each tag is a set of directories, and we can do set algebra to get specific results. For example, we can find a result by appropriate differences, intersections and unions of the sets. An advantage of this approach is that order of the tags is not relevant (unlike the path, where each component must be in the right order).
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>].intersection(TAGS[<span style="color: #228b22;">'pw'</span>]).intersection(TAGS[<span style="color: #228b22;">'300'</span>])
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'300'</span>].intersection(TAGS[<span style="color: #228b22;">'pw'</span>]).intersection(TAGS[<span style="color: #228b22;">'A'</span>])
</pre>
</div>

<pre class="example">
set(['tags\\A\\pw\\300'])
set(['tags\\A\\pw\\300'])
</pre>

<p>
The syntax here is a tad heavy because of the chained dot notation operations. You can also use the logical operators like this:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">300 and pw and A</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'300'</span>] &amp; TAGS[<span style="color: #228b22;">'pw'</span>] &amp; TAGS[<span style="color: #228b22;">'A'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\A\\pw\\300'])
</pre>


<p>
We can get a set of calculations, for example an equation of state like this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">300 and pw and A</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>] &amp; TAGS[<span style="color: #228b22;">'eos'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\A\\eos', 'tags\\A\\eos\\5', 'tags\\A\\eos\\4', 'tags\\A\\eos\\1', 'tags\\A\\eos\\3', 'tags\\A\\eos\\2'])
</pre>

<p>
Now, let us construct some more complex queries. With sets we use intersections for <code>and</code> and we construct unions of queries that are like an or. We examine different notations to see which one is better.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">find calculation 3 in eos for B and C</span>
<span style="color: #8b0000;">print</span> (TAGS[<span style="color: #228b22;">'3'</span>]
       .intersection(TAGS[<span style="color: #228b22;">'eos'</span>])
       .intersection(TAGS[<span style="color: #228b22;">'B'</span>])
       .union
       (TAGS[<span style="color: #228b22;">'3'</span>]
        .intersection(TAGS[<span style="color: #228b22;">'eos'</span>])
        .intersection(TAGS[<span style="color: #228b22;">'C'</span>])))

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">this notation makes more sense to me. ^ = or</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'3'</span>] &amp; TAGS[<span style="color: #228b22;">'eos'</span>] &amp; (TAGS[<span style="color: #228b22;">'B'</span>] ^ TAGS[<span style="color: #228b22;">'C'</span>])
</pre>
</div>

<pre class="example">
set(['tags\\C\\eos\\3', 'tags\\B\\eos\\3'])
set(['tags\\C\\eos\\3', 'tags\\B\\eos\\3'])
</pre>

<p>
You can see the two approaches give the same results. The logical operator syntax is more concise and (I think) more readable. Let us consider a query with "not". We can use a difference operator for that. We subtract all the paths with tag "B" from the set containing "4x4x4", which will give us paths tagged with "4x4x4" but not "B".
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">find calculation 4x4x4 but not B</span>
<span style="color: #8b0000;">print</span> (TAGS[<span style="color: #228b22;">'4x4x4'</span>].difference(TAGS[<span style="color: #228b22;">'B'</span>]))

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">this makes more sense 4x4x4 but not B, </span>
<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">i.e. subtract paths tagged B from those tagged 4x4x4</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'4x4x4'</span>] -  TAGS[<span style="color: #228b22;">'B'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\D\\kpts\\4x4x4', 'tags\\A\\kpts\\4x4x4', 'tags\\C\\kpts\\4x4x4'])
set(['tags\\D\\kpts\\4x4x4', 'tags\\A\\kpts\\4x4x4', 'tags\\C\\kpts\\4x4x4'])
</pre>


<p>
Note it is not so obvious how to get results not tagged with "A". We need to subtract the tagged calculations from some set. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'all'</span>] - TAGS[<span style="color: #228b22;">'A'</span>]  <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">not A</span>
</pre>
</div>

<pre class="example">
set(['tags\\D\\kpts', 'tags\\D\\pw\\200', 'tags\\D\\pw\\350', 'tags\\D\\pw\\250', 'tags\\D\\kpts\\8x8x8', 'tags\\C\\eos', 'tags\\D\\eos\\2', 'tags\\D\\eos\\3', 'tags\\D\\eos\\4', 'tags\\D\\eos\\5', 'tags\\B\\kpts\\2x2x2', 'tags\\C\\kpts\\4x4x4', 'tags\\C\\eos\\3', 'tags\\C\\eos\\2', 'tags\\C\\eos\\1', 'tags\\C\\kpts\\8x8x8', 'tags\\C\\eos\\5', 'tags\\C\\eos\\4', 'tags\\B\\kpts', 'tags\\C\\pw\\200', 'tags\\B\\eos\\2', 'tags\\B\\pw\\350', 'tags\\B\\eos\\1', 'tags\\B\\kpts\\8x8x8', 'tags\\C\\pw\\300', 'tags\\B\\eos\\4', 'tags\\B\\eos\\5', 'tags\\C\\kpts', 'tags\\D\\pw\\300', 'tags\\B\\kpts\\4x4x4', 'tags\\C\\kpts\\2x2x2', 'tags\\D\\kpts\\4x4x4', 'tags\\B\\pw\\250', 'tags', 'tags\\D\\pw\\400', 'tags\\D\\eos', 'tags\\C\\pw\\400', 'tags\\D\\kpts\\2x2x2', 'tags\\D\\pw', 'tags\\C\\pw\\250', 'tags\\C\\pw\\350', 'tags\\C\\pw', 'tags\\D\\eos\\1', 'tags\\B\\pw\\400', 'tags\\B\\pw', 'tags\\B\\eos', 'tags\\B\\pw\\300', 'tags\\B\\eos\\3', 'tags\\C', 'tags\\B', 'tags\\D', 'tags\\B\\pw\\200'])
</pre>

<p>
We can also look at "or". This is done with the <code>union</code> function, which is the set of elements in either set. The logical operator is <code>|</code>.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'1'</span>].union(TAGS[<span style="color: #228b22;">'2'</span>])
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'1'</span>] | TAGS[<span style="color: #228b22;">'2'</span>]        <span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">1 or 2</span>
</pre>
</div>

<pre class="example">
set(['tags\\B\\eos\\2', 'tags\\B\\eos\\1', 'tags\\A\\eos\\1', 'tags\\A\\eos\\2', 'tags\\D\\eos\\1', 'tags\\D\\eos\\2', 'tags\\C\\eos\\2', 'tags\\C\\eos\\1'])
set(['tags\\B\\eos\\2', 'tags\\B\\eos\\1', 'tags\\A\\eos\\1', 'tags\\A\\eos\\2', 'tags\\D\\eos\\1', 'tags\\D\\eos\\2', 'tags\\C\\eos\\2', 'tags\\C\\eos\\1'])
</pre>

<p>
There is an <code>xor</code> operator too. xor is not the same as or, it means <code>A xor B</code> means "A or B but not both". The <code>symmetric_difference</code> function gives this behavior. The logical operator is <code>^</code>. 
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> pickle

<span style="color: #8b0000;">with</span> <span style="color: #cd0000;">open</span>(<span style="color: #228b22;">'TAGS.pkl'</span>, <span style="color: #228b22;">'r'</span>) <span style="color: #8b0000;">as</span> f:
    <span style="color: #8b008b;">TAGS</span> = pickle.loads(f.read())

<span style="color: #ff0000; font-weight: bold;"># </span><span style="color: #ff0000; font-weight: bold;">I think this is like the xor, A or 2 but not both</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>].symmetric_difference(TAGS[<span style="color: #228b22;">'2'</span>]), <span style="color: #228b22;">'\n'</span>
<span style="color: #8b0000;">print</span> TAGS[<span style="color: #228b22;">'A'</span>] ^ TAGS[<span style="color: #228b22;">'2'</span>]
</pre>
</div>

<pre class="example">
set(['tags\\A\\pw\\300', 'tags\\A\\pw\\250', 'tags\\A\\eos', 'tags\\B\\eos\\2', 'tags\\A\\eos\\4', 'tags\\A\\kpts\\2x2x2', 'tags\\A\\pw\\400', 'tags\\A\\kpts\\4x4x4', 'tags\\A\\eos\\3', 'tags\\A\\kpts\\8x8x8', 'tags\\A\\pw\\350', 'tags\\A\\eos\\5', 'tags\\D\\eos\\2', 'tags\\A\\kpts', 'tags\\A', 'tags\\C\\eos\\2', 'tags\\A\\eos\\1', 'tags\\A\\pw', 'tags\\A\\pw\\200']) 

set(['tags\\A\\pw\\300', 'tags\\A\\pw\\250', 'tags\\A\\eos', 'tags\\B\\eos\\2', 'tags\\A\\eos\\4', 'tags\\A\\kpts\\2x2x2', 'tags\\A\\pw\\400', 'tags\\A\\kpts\\4x4x4', 'tags\\A\\eos\\3', 'tags\\A\\kpts\\8x8x8', 'tags\\A\\pw\\350', 'tags\\A\\eos\\5', 'tags\\D\\eos\\2', 'tags\\A\\kpts', 'tags\\A', 'tags\\C\\eos\\2', 'tags\\A\\eos\\1', 'tags\\A\\pw', 'tags\\A\\pw\\200'])
</pre>



<p>
To summarize, this is one approach to using tags with the technical infrastructure of the set. The advantage is flexibility, that you do not need to know the full path to a result, provided you know the set of tags that refers to it. You can use the tags in any order.
</p>

<p>
There are many alternative approaches to implementing this idea. One could create a sqlite table and do SQL queries. You could also store lists in the dictionary, and use python code to find the matches. The syntax here is varied. Using the functional approach, the syntax gets heavy with all the dot notation. With the logical operators, the syntax is a little lighter. 
</p>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/29/Searching-for-directories-by-tags.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Literate programming in python with org-mode and noweb]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb" />
    <id>http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb</id>
    <updated>2014-03-27T11:07:15Z</updated>
    <published>2014-03-27T10:46:55Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="org-mode" />
    <summary type="html"><![CDATA[Literate programming in python with org-mode and noweb]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. imports</a></li>
<li><a href="#sec-2">2. utility function</a></li>
<li><a href="#sec-3">3. class definition</a>
<ul>
<li><a href="#sec-3-1">3.1. some class function</a></li>
</ul>
</li>
<li><a href="#sec-4">4. The main function</a></li>
<li><a href="#sec-5">5. Tangle and run the code</a></li>
<li><a href="#sec-6">6. Summary thoughts</a></li>
</ul>
</div>
</div>
<p>
This post examines a different approach to literate programming with org-mode that uses <a href="http://www.cs.tufts.edu/~nr/noweb/">noweb</a> . I have adapted an example from <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html</a> which has some pretty cool ideas in it. 
</p>

<p>
The gist of using noweb is that in your source blocks you have labels like <code>&lt;&lt;imports&gt;&gt;</code>, that refer to other named code blocks that get substituted in place of the label. In the example below, we put labels for a code block of imports, for a function definition, a class definition, and a main function. This code block will get tangled to <a href="/media/2014-03-27-Literate-programming-in-python-with-org-mode-and-noweb/main.py">main.py</a> . The noweb expansion happens at export, so here is the literal code block:
</p>
<pre class="example">
#+BEGIN_SRC python :noweb yes :tangle main.py
&lt;&lt;imports&gt;&gt;

&lt;&lt;some-func&gt;&gt;

&lt;&lt;class-dfn&gt;&gt;

&lt;&lt;main-func&gt;&gt;

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+END_SRC
</pre>

<p>
You may want to just check out the org-mode source link at the bottom of the post to see all the details.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">from</span> argparse <span style="color: #8b0000;">import</span> ArgumentParser

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">utility_func</span>(arg=<span style="color: #cd0000;">None</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'you called a utility function with this arg: {0}'</span>.<span style="color: #cd0000;">format</span>(arg)

<span style="color: #8b0000;">class</span> <span style="color: #4682b4;">HelloWorld</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, who):
        <span style="color: #8b0000;">self</span>.who = who

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__call__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'Hello {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.who)

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>

<span style="color: #8b0000;">def</span> <span style="color: #8b2323;">main</span>():
    <span style="color: #8b008b;">parser</span> = ArgumentParser(description=<span style="color: #228b22;">"Say hi"</span>)
    parser.add_argument(<span style="color: #228b22;">"-w"</span>, <span style="color: #228b22;">"--who"</span>, 
                        <span style="color: #cd0000;">type</span>=<span style="color: #cd0000;">str</span>,
                        default=<span style="color: #228b22;">"world"</span>,
                        <span style="color: #cd0000;">help</span>=<span style="color: #228b22;">"Who to say hello to"</span>)
    <span style="color: #8b008b;">args</span> = parser.parse_args()
  
    <span style="color: #8b008b;">who</span> = args.who
  
    <span style="color: #8b008b;">greeter</span> = HelloWorld(who)
    greeter()

    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'test func = '</span>, greeter.test()
  
    <span style="color: #8b0000;">print</span> utility_func()
    <span style="color: #8b0000;">print</span> utility_func(5)

    <span style="color: #8b0000;">return</span> 0

<span style="color: #8b0000;">if</span> <span style="color: #cd0000;">__name__</span> == <span style="color: #228b22;">'__main__'</span>:
    status = main()
    sys.<span style="color: #cd0000;">exit</span>(status)
</pre>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> imports</h2>
<div class="outline-text-2" id="text-1">
<p>
Now, we define a block that gives us the imports. We do not have to use any tangle headers here because noweb will put it in where it belongs.
</p>

<div class="org-src-container">

<pre class="src src-python" id="imports"><span style="color: #8b0000;">import</span> sys
<span style="color: #8b0000;">import</span> numpy <span style="color: #8b0000;">as</span> np
<span style="color: #8b0000;">import</span> matplotlib.pyplot <span style="color: #8b0000;">as</span> plt

<span style="color: #8b0000;">from</span> argparse <span style="color: #8b0000;">import</span> ArgumentParser
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> utility function</h2>
<div class="outline-text-2" id="text-2">
<p>
Now we define a function we will want imported from the main file. 
</p>

<div class="org-src-container">

<pre class="src src-python" id="some-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">utility_func</span>(arg=<span style="color: #cd0000;">None</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'you called a utility function with this arg: {0}'</span>.<span style="color: #cd0000;">format</span>(arg)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> class definition</h2>
<div class="outline-text-2" id="text-3">
<p>
Finally, let us define a class. Note we use noweb here too, and we get the indentation correct!
</p>

<div class="org-src-container">

<pre class="src src-python" id="class-dfn"><span style="color: #8b0000;">class</span> <span style="color: #4682b4;">HelloWorld</span>(<span style="color: #cd0000;">object</span>):
    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__init__</span>(<span style="color: #8b0000;">self</span>, who):
        <span style="color: #8b0000;">self</span>.who = who

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">__call__</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #228b22;">'Hello {0}'</span>.<span style="color: #cd0000;">format</span>(<span style="color: #8b0000;">self</span>.who)

    <span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
        <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>
</pre>
</div>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> some class function</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Now, let us make the some-other-func. This block is not indented, but with the noweb syntax above, it seems to get correctly indented. Amazing.
</p>

<div class="org-src-container">

<pre class="src src-python" id="some-other-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">test</span>(<span style="color: #8b0000;">self</span>):
    <span style="color: #8b0000;">return</span> <span style="color: #cd0000;">True</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> The main function</h2>
<div class="outline-text-2" id="text-4">
<p>
This is a typical function that could be used to make your module into a script, and is only run when the module is used as a script.. 
</p>

<div class="org-src-container">

<pre class="src src-python" id="main-func"><span style="color: #8b0000;">def</span> <span style="color: #8b2323;">main</span>():
    <span style="color: #8b008b;">parser</span> = ArgumentParser(description=<span style="color: #228b22;">"Say hi"</span>)
    parser.add_argument(<span style="color: #228b22;">"-w"</span>, <span style="color: #228b22;">"--who"</span>, 
                        <span style="color: #cd0000;">type</span>=<span style="color: #cd0000;">str</span>,
                        default=<span style="color: #228b22;">"world"</span>,
                        <span style="color: #cd0000;">help</span>=<span style="color: #228b22;">"Who to say hello to"</span>)
    <span style="color: #8b008b;">args</span> = parser.parse_args()
  
    <span style="color: #8b008b;">who</span> = args.who
  
    <span style="color: #8b008b;">greeter</span> = HelloWorld(who)
    greeter()

    <span style="color: #8b0000;">print</span> <span style="color: #228b22;">'test func = '</span>, greeter.test()
  
    <span style="color: #8b0000;">print</span> utility_func()
    <span style="color: #8b0000;">print</span> utility_func(5)

    <span style="color: #8b0000;">return</span> 0
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Tangle and run the code</h2>
<div class="outline-text-2" id="text-5">
<p>
This link will extract the code to main.py: <pre>elisp:org-babel-tangle</pre> 
</p>

<p>
We can run the code like this (linux):
</p>
<div class="org-src-container">

<pre class="src src-sh" id="bashrun-helloworld">python main.py --w John 2&gt;&amp;1
true
</pre>
</div>
<pre class="example">
test func =  True
you called a utility function with this arg: None
you called a utility function with this arg: 5
</pre>

<p>
or this (windows, which as no sh)
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #8b0000;">from</span> main <span style="color: #8b0000;">import</span> *

main()
</pre>
</div>

<pre class="example">
test func =  True
you called a utility function with this arg: None
you called a utility function with this arg: 5
</pre>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-6">
<p>
The use of noweb syntax is pretty cool. I have not done anything serious with it, but it looks like you could pretty easily create a sophisticated python module this way that is documented in org-mode. </p>
</div>
</div>
<p>Copyright (C) 2014 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2014/03/27/Literate-programming-in-python-with-org-mode-and-noweb.org">org-mode source</a><p><p>Org-mode version = 8.2.5h</p>]]></content>
  </entry>
</feed>
