<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-08-12T16:48:46Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Author impact factors]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/08/11/Author-impact-factors" />
    <id>http://jkitchin.github.io/blog/2015/08/11/Author-impact-factors</id>
    <updated>2015-08-11T09:12:19Z</updated>
    <published>2015-08-11T09:12:19Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bibliometrics" />
    <summary type="html"><![CDATA[Author impact factors]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/08/11/Author-impact-factors"><![CDATA[



<p>
In this new letter <a href="http://pubs.acs.org/doi/pdf/10.1021/acs.jpclett.5b01527">http://pubs.acs.org/doi/pdf/10.1021/acs.jpclett.5b01527</a> , the editors suggest a new "Author Impact Factor" as a way to measure the productivity and impact of an author independently of the journals they publish in. The AIF is defined for a year like this: take the paper published in two consecutive years, get the citations for those papers in the following year, and compute:
</p>

<p>
\(AIF = \frac{Y3 citations for papers_{Y1,Y2}}{Number of papers in Y1, Y2}\).
</p>

<p>
Here I do this for myself, using Scopus as the source of papers and citations. My Scopus ID is
scopusid:7004212771. First, we need to get the articles published in 2012 and 2013. Here is the query, and the results.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">from</span> scopus.scopus_api <span style="color: #0000FF;">import</span> ScopusAbstract

<span style="color: #BA36A5;">s</span> = ScopusSearch(query=<span style="color: #008000;">'au-id(7004212771) and (pubyear is 2012 or pubyear is 2013)'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>fields=<span style="color: #008000;">'dc:identifier'</span>)

<span style="color: #BA36A5;">abstracts</span> = [ScopusAbstract(eid) <span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> s.EIDS
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> ScopusAbstract(eid).aggregationType == <span style="color: #008000;">'Journal'</span>]

<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'&lt;ol&gt;'</span>)
<span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'&lt;li&gt;'</span> + ab.html + <span style="color: #008000;">'&lt;/li&gt;'</span>)
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'&lt;/ol&gt;'</span>)
</pre>
</div>
<ol>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55005205100">Anita S. Lee</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=35603120700">John C. Eslick</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55772901000">David C. Miller</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84880986072&origin=inward">Comparisons of amine solvents for post-combustion CO2 capture: A multi-objective analysis approach</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=6200180161">International Journal of Greenhouse Gas Control</a>, <b>18</b>, p. 68-74, (2013-10-01). <a href="http://dx.doi.org/10.1016/j.ijggc.2013.06.020">doi:10.1016/j.ijggc.2013.06.020</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55569145100">Alexander P. Hallenbeck</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84881394200&origin=inward">Effects of O2 and SO2 on the capture capacity of a primary-amine based polymeric CO2 sorbent</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=13057">Industrial and Engineering Chemistry Research</a>, <b>52(31)</b>, p. 10788-10794, (2013-08-07). <a href="http://dx.doi.org/10.1021/ie400582a">doi:10.1021/ie400582a</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55373026900">James X. Mao</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55005205100">Anita S. Lee</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=24081524800">Hunaid B. Nulwala</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=6701399651">David R. Luebke</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7003584159">Krishnan Damodaran</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84873706643&origin=inward">Interactions in 1-ethyl-3-methyl imidazolium tetracyanoborate ion pair: Spectroscopic and density functional study</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=24642">Journal of Molecular Structure</a>, <b>1038</b>, p. 12-18, (2013-04-24). <a href="http://dx.doi.org/10.1016/j.molstruc.2013.01.046">doi:10.1016/j.molstruc.2013.01.046</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=26433085700">Federico Calle-Vallejo</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=23479647900">Nilay G. Inoglu</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=25224517700">Hai-Yan Su</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=27667815700">José I. Martínez</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=35491189200">Isabela C. Man</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7006205398">Marc T. M. Koper</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=9742604300">Jan Rossmeisl</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84876703352&origin=inward">Number of outer electrons as descriptor for adsorption processes on transition metals and their oxides</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=19700200838">Chemical Science</a>, <b>4(3)</b>, p. 1245-1249, (2013-03-01). <a href="http://dx.doi.org/10.1039/c2sc21601a">doi:10.1039/c2sc21601a</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55005205100">Anita S. Lee</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84867809683&origin=inward">Chemical and molecular descriptors for the reactivity of amines with CO
                    2 </a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=13057">Industrial and Engineering Chemistry Research</a>, <b>51(42)</b>, p. 13609-13618, (2012-10-24). <a href="http://dx.doi.org/10.1021/ie301419q">doi:10.1021/ie301419q</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7201763336">Edward S. Rubin</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=27467500000">Hari Mantripragada</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55210428500">Aaron Marks</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=37081979100">Peter Versteeg</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84864914806&origin=inward">The outlook for improved carbon capture technology</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=27538">Progress in Energy and Combustion Science</a>, <b>38(5)</b>, p. 630-671, (2012-10-01). <a href="http://dx.doi.org/10.1016/j.pecs.2012.03.003">doi:10.1016/j.pecs.2012.03.003</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=52463103500">Sneha A. Akhade</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84865730756&origin=inward">Effects of strain, d-band filling, and oxidation state on the surface electronic structure and reactivity of 3d perovskite surfaces</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=28134">Journal of Chemical Physics</a>, <b>137(8)</b>, Art. No. 084703, , (2012-08-28). <a href="http://dx.doi.org/10.1063/1.4746117">doi:10.1063/1.4746117</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=35787409400">James Landon</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55328415000">Ethan Demeter</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=23479647900">Nilay Inoǧlu</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=47962378000">Chris Keturakis</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7006804734">Israel E. Wachs</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=8238710700">Relja Vasić</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=24404182600">Anatoly I. Frenkel</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84864592302&origin=inward">Spectroscopic characterization of mixed Fe-Ni oxide electrocatalysts for the oxygen evolution reaction in alkaline electrolytes</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=19700188320">ACS Catalysis</a>, <b>2(8)</b>, p. 1793-1801, (2012-08-03). <a href="http://dx.doi.org/10.1021/cs3002644">doi:10.1021/cs3002644</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=54973276000">Robin Chao</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=55308251800">Ratiporn Munprom</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=56347288000">Rumyana Petrova</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=12803603300">Kirk Gerdes</a>, <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004541416">Paul A. Salvador</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84863684845&origin=inward">Structure and relative thermal stability of mesoporous (La, Sr) MnO 3powders prepared using evaporation-induced self-assembly methods</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=20982">Journal of the American Ceramic Society</a>, <b>95(7)</b>, p. 2339-2346, (2012-07-01). <a href="http://dx.doi.org/10.1111/j.1551-2916.2012.05236.x">doi:10.1111/j.1551-2916.2012.05236.x</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84866142469&origin=inward">Preface: Trends in computational catalysis</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=21971">Topics in Catalysis</a>, <b>55(5-6)</b>, p. 227-228, (2012-06-01). <a href="http://dx.doi.org/10.1007/s11244-012-9808-0">doi:10.1007/s11244-012-9808-0</a>.</li>
<li><a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=36472906200">W. Richard Alesi</a> and <a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">John R. Kitchin</a>, <a href="http://www.scopus.com/inward/record.url?partnerID=HzOxMe3b&scp=84861127526&origin=inward">Evaluation of a primary amine-functionalized ion-exchange resin for CO
                    2 capture</a>, <a href="http://www.scopus.com/source/sourceInfo.url?sourceId=13057">Industrial and Engineering Chemistry Research</a>, <b>51(19)</b>, p. 6907-6915, (2012-05-16). <a href="http://dx.doi.org/10.1021/ie300452c">doi:10.1021/ie300452c</a>.</li>
</ol>

<p>
Now, we need to get the citing articles for each one of these, and only count them if they were published in 2014 or earlier. Each abstract has a cite_link in it, which points to the API url to get the articles citing it. Let's see what we are up against here. First, we see how many citations there are in total.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">from</span> scopus.scopus_api <span style="color: #0000FF;">import</span> get_encoded_text, ScopusAbstract
<span style="color: #0000FF;">from</span> scopus.my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY

<span style="color: #BA36A5;">s</span> = ScopusSearch(query=<span style="color: #008000;">'au-id(7004212771) and (pubyear is 2012 or pubyear is 2013)'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>fields=<span style="color: #008000;">'dc:identifier'</span>)

<span style="color: #BA36A5;">abstracts</span> = [ScopusAbstract(eid) <span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> s.EIDS
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> ScopusAbstract(eid).aggregationType == <span style="color: #008000;">'Journal'</span>]

<span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> xml.etree.ElementTree <span style="color: #0000FF;">as</span> ET

<span style="color: #BA36A5;">TOTAL</span> = 0
<span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">xml</span> = requests.get(ab.cite_link,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  headers={<span style="color: #008000;">'Accept'</span>: <span style="color: #008000;">'application/xml'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY}).text.encode(<span style="color: #008000;">'utf-8'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = ET.fromstring(xml)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">N</span> = <span style="color: #006FE0;">int</span>(get_encoded_text(results, <span style="color: #008000;">'opensearch:totalResults'</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">TOTAL</span> += N
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> N

<span style="color: #0000FF;">print</span> <span style="color: #008000;">'{} total citations'</span>.<span style="color: #006FE0;">format</span>(TOTAL)
<span style="color: #0000FF;">print</span> TOTAL / <span style="color: #006FE0;">float</span>(11)
</pre>
</div>

<pre class="example">
4
9
5
18
5
98
10
50
4
0
16
219 total citations
19.9090909091
</pre>

<p>
Not bad looking, but some of those citations might be from 2015, and some of them might be self-citations.  Let's see about removing those. Usually, there are just 25 results per query, and some of the ones above have more than 25 results, so we will have to run a loop to get them all. For now, we just remove the citations from papers newer than the desired year It is a little tougher to remove the self-citations; that would require another request to Scopus to get authors and look for matches.
</p>

<p>
Here is some code that calculates my AIF for 2012, 2013 and 2014. The only issue I currently have with this code is the use of the abstract coverDate to get the publication year. I don't have a better way to do this, but I have seen a lot of cover dates that start on Jan 1 of a year, and that seems improbable to me. On the other hand, that might reflect a lot of submissions near the end of a year that just make it into the next one.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus <span style="color: #0000FF;">import</span> *
<span style="color: #0000FF;">from</span> scopus.scopus_api <span style="color: #0000FF;">import</span> get_encoded_text, ns, ScopusAbstract
<span style="color: #0000FF;">from</span> scopus.my_scopus <span style="color: #0000FF;">import</span> MY_API_KEY
<span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> xml.etree.ElementTree <span style="color: #0000FF;">as</span> ET


<span style="color: #BA36A5;">QUERY</span> = <span style="color: #008000;">'au-id(7004212771) and ((pubyear is {0}) or (pubyear is {1}))'</span>

<span style="color: #0000FF;">for</span> YEAR <span style="color: #0000FF;">in</span> [2012, 2013, 2014]:

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(QUERY.<span style="color: #006FE0;">format</span>(YEAR - 2, YEAR - 1))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = ScopusSearch(query=QUERY.<span style="color: #006FE0;">format</span>(YEAR - 2, YEAR - 1),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>fields=<span style="color: #008000;">'dc:identifier'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">abstracts</span> = [ScopusAbstract(eid) <span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> s.EIDS
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> ScopusAbstract(eid).aggregationType == <span style="color: #008000;">'Journal'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">'{0}-{1} papers'</span>.<span style="color: #006FE0;">format</span>(YEAR - 2, YEAR - 1)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">' '</span>.join([<span style="color: #008000;">'doi:{}'</span>.<span style="color: #006FE0;">format</span>(ab.doi) <span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">TOTAL</span> = 0 <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">citation count</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">xml</span> = requests.get(ab.cite_link,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  headers={<span style="color: #008000;">'Accept'</span>: <span style="color: #008000;">'application/xml'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY}).text.encode(<span style="color: #008000;">'utf-8'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = ET.fromstring(xml)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">N</span> = <span style="color: #006FE0;">int</span>(get_encoded_text(results, <span style="color: #008000;">'opensearch:totalResults'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">start</span> = 0
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">count</span> = 25

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">while</span> N &gt; 0:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">xml</span> = requests.get(ab.cite_link,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  headers={<span style="color: #008000;">'Accept'</span>: <span style="color: #008000;">'application/xml'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'X-ELS-APIKey'</span>: MY_API_KEY},
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  params={<span style="color: #008000;">'count'</span>: count,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">'start'</span>: start}).text.encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = ET.fromstring(xml)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">start</span> += count
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">N</span> -= count

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> el <span style="color: #0000FF;">in</span> results.findall(<span style="color: #008000;">'atom:entry/prism:coverDate'</span>, ns):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = <span style="color: #006FE0;">int</span>(el.text.split(<span style="color: #008000;">'-'</span>)[0])
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> year &lt;= YEAR:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">TOTAL</span> += 1

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">s</span> = <span style="color: #008000;">'Author Impact Factor ({1}) = {0:1.3f} ({2} papers, {3} citations)\n'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(s.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">float</span>(TOTAL) / <span style="color: #006FE0;">len</span>(abstracts),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  YEAR,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #006FE0;">len</span>(abstracts),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  TOTAL))
</pre>
</div>

<pre class="example">
au-id(7004212771) and ((pubyear is 2010) or (pubyear is 2011))
2010-2011 papers
doi:10.1063/1.3631948 doi:10.1002/cctc.201000397 doi:10.1021/cs200039t doi:10.1063/1.3561287 doi:10.1002/cssc.201000056 doi:10.1149/1.3432440 doi:10.1103/PhysRevB.82.045414 doi:10.1016/j.fuel.2009.11.036 doi:10.1080/08927022.2010.481794
Author Impact Factor (2012) = 9.667 (9 papers, 87 citations)

au-id(7004212771) and ((pubyear is 2011) or (pubyear is 2012))
2011-2012 papers
doi:10.1021/ie301419q doi:10.1016/j.pecs.2012.03.003 doi:10.1063/1.4746117 doi:10.1021/cs3002644 doi:10.1111/j.1551-2916.2012.05236.x doi:10.1007/s11244-012-9808-0 doi:10.1021/ie300452c doi:10.1063/1.3631948 doi:10.1002/cctc.201000397 doi:10.1021/cs200039t doi:10.1063/1.3561287
Author Impact Factor (2013) = 14.000 (11 papers, 154 citations)

au-id(7004212771) and ((pubyear is 2012) or (pubyear is 2013))
2012-2013 papers
doi:10.1016/j.ijggc.2013.06.020 doi:10.1021/ie400582a doi:10.1016/j.molstruc.2013.01.046 doi:10.1039/c2sc21601a doi:10.1021/ie301419q doi:10.1016/j.pecs.2012.03.003 doi:10.1063/1.4746117 doi:10.1021/cs3002644 doi:10.1111/j.1551-2916.2012.05236.x doi:10.1007/s11244-012-9808-0 doi:10.1021/ie300452c
Author Impact Factor (2014) = 14.000 (11 papers, 154 citations)
</pre>

<p>
Just a reminder of what these AIFs are. It is the ratio of the number of citations papers from two consecutive years (Y1 and Y2) have received in the next year Y3. These numbers suggest that on average my recent papers are getting 14 citations a year. I printed the DOIs above because I was skeptical that my AIF in 2013 and 2014 were identical, but it seems clear the papers are different, and it must be a coincidence that the number of citations is the same (I am still a bit skeptical though ;).
</p>

<p>
Is this a useful measure of author impact? That would take some study. The way this is defined it is a short-term impact which might be biased to some fields that have more than a three year time-frame before citations build up. That is fixed easily enough by increasing the window of publications, and/or counting citations two years out, for example. It is interesting this decouples the impact from the journals the articles are published in. I think this says I should be submitting my papers to higher impact journals though! My AIF exceeds the JIF of the journals I usually publish in.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/08/11/Author-impact-factors.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Altmetrics meet my publications]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/08/08/Altmetrics-meet-my-publications" />
    <id>http://jkitchin.github.io/blog/2015/08/08/Altmetrics-meet-my-publications</id>
    <updated>2015-08-08T15:56:57Z</updated>
    <published>2015-08-08T15:56:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bibliometric" />
    <category scheme="http://jkitchin.github.io/blog" term="publication" />
    <summary type="html"><![CDATA[Altmetrics meet my publications]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/08/08/Altmetrics-meet-my-publications"><![CDATA[


<p>
Altmetrics is an alternative to simple citation counts of articles. Altmetrics looks at how your papers are mentioned in Tweets, google+, blog posts, news, how many Mendeley users have the article, etc&#x2026; They are partnering with publishers to provide additional metrics on your papers.
</p>

<p>
You can put some Altmetric badges on your papers so you can see how they are doing. In this post, we scrape out my papers from my orcid page, and add Altmetric badges to them. This is basically just a little snippet of html code that will put the Altmetric donut in the citation, which has some information about the number of times each paper is tweeted, etc&#x2026;
</p>

<script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'></script>

<p>
So, here is a python script that will print some html results. We print each title with the Altmetric donut, and we add a Scopus Cited by count for each paper.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> json

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">"http://pub.orcid.org/0000-0003-2625-9232/orcid-works"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   headers={<span style="color: #008000;">'Accept'</span>:<span style="color: #008000;">'application/orcid+json'</span>})
<span style="color: #BA36A5;">results</span> = resp.json()

<span style="color: #BA36A5;">data</span> = []
<span style="color: #BA36A5;">TITLES</span>, <span style="color: #BA36A5;">DOIs</span> = [], []

<span style="color: #BA36A5;">badge</span> = <span style="color: #008000;">"&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='{doi}'&gt;&lt;/div&gt;"</span>
<span style="color: #BA36A5;">scopus_cite</span> = <span style="color: #008000;">"&lt;img src=\"http://api.elsevier.com/content/abstract/citation-count?doi={doi}&amp;amp;httpAccept=image/jpeg&amp;amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c\"&gt;"</span>
<span style="color: #BA36A5;">html</span> = <span style="color: #008000;">'&lt;a href="http://dx.doi.org/{doi}"&gt;{title}&lt;/a&gt;'</span>

<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;ol&gt;'</span>
<span style="color: #0000FF;">for</span> i, result <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">enumerate</span>( results[<span style="color: #008000;">'orcid-profile'</span>][<span style="color: #008000;">'orcid-activities'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   [<span style="color: #008000;">'orcid-works'</span>][<span style="color: #008000;">'orcid-work'</span>]):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">title</span> = <span style="color: #006FE0;">str</span>(result[<span style="color: #008000;">'work-title'</span>][<span style="color: #008000;">'title'</span>][<span style="color: #008000;">'value'</span>].encode(<span style="color: #008000;">'utf-8'</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = <span style="color: #008000;">'None'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> result.get(<span style="color: #008000;">'work-external-identifiers'</span>, []):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> result[<span style="color: #008000;">'work-external-identifiers'</span>][<span style="color: #008000;">'work-external-identifier'</span>]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> eid[<span style="color: #008000;">'work-external-identifier-type'</span>] == <span style="color: #008000;">'DOI'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = <span style="color: #006FE0;">str</span>(eid[<span style="color: #008000;">'work-external-identifier-id'</span>][<span style="color: #008000;">'value'</span>].encode(<span style="color: #008000;">'utf-8'</span>))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">AIP journals tend to have a \n in the DOI, and the doi is the second line. we get</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">that here.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #006FE0;">len</span>(doi.split(<span style="color: #008000;">'\n'</span>)) == 2:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">doi</span> = doi.split(<span style="color: #008000;">'\n'</span>)[1]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pub_date</span> = result.get(<span style="color: #008000;">'publication-date'</span>, <span style="color: #D0372D;">None</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> pub_date:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = pub_date.get(<span style="color: #008000;">'year'</span>, <span style="color: #D0372D;">None</span>).get(<span style="color: #008000;">'value'</span>).encode(<span style="color: #008000;">'utf-8'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">year</span> = <span style="color: #008000;">'Unknown'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Try to minimize duplicate entries that are found</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dup</span> = <span style="color: #D0372D;">False</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> title.lower() <span style="color: #0000FF;">in</span> TITLES:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dup</span> = <span style="color: #D0372D;">True</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> (doi != <span style="color: #008000;">'None'</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">and</span> doi.lower() <span style="color: #0000FF;">in</span> DOIs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dup</span> = <span style="color: #D0372D;">True</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> dup <span style="color: #0000FF;">and</span> doi != <span style="color: #008000;">'None'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">truncate title to first 50 characters</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'&lt;li&gt;'</span> + html.<span style="color: #006FE0;">format</span>(doi=doi, title=title)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> + badge.<span style="color: #006FE0;">format</span>(doi=doi) + scopus_cite.<span style="color: #006FE0;">format</span>(doi=doi)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> + <span style="color: #008000;">'&lt;/li&gt;\n'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   TITLES.append(title.lower())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   DOIs.append(doi.lower())

<span style="color: #0000FF;">print</span> <span style="color: #008000;">'&lt;/ol&gt;'</span>
</pre>
</div>

<p>
It is a little humbling to see these results! The Altmetric data shows a very different dimension than the citation metrics. It is hard to tell what impact these will have, but they give you another view of who is talking about your work.
</p>

<ol>
<li><a href="http://dx.doi.org/10.1021/jp511426q">A Linear Response DFT+ U Study of Trends in the Oxygen Evolution Activity of Transition Metal Rutile Dioxides</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/jp511426q'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/jp511426q&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1063/1.4914093">Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/1.4914093'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.4914093&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">Core level shifts in Cu–Pd alloys as a function of bulk composition and structure</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.susc.2015.02.011'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.susc.2015.02.011&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/cs501585k">Estimating bulk-composition-dependent H2 adsorption energies on CuxPd1- x alloy (111) surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/cs501585k'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/cs501585k&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/jp508805h">Probing the Coverage Dependence of Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/jp508805h'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/jp508805h&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.catcom.2013.10.028'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.catcom.2013.10.028&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/ja5015986">Electrocatalytic Oxygen Evolution with an Immobilized TAML Activator</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/ja5015986'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/ja5015986&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/am4059149">Identifying Potential BO 2 Oxide Polymorphs for Epitaxial Growth Candidates</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/am4059149'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/am4059149&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1007/s11244-013-0166-3">Simulating temperature programmed desorption of oxygen on Pt(111) using DFT derived coverage dependent desorption barriers</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1007/s11244-013-0166-3'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1007/s11244-013-0166-3&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1039/c3ra47097k">Probing the effect of electron donation on CO2 absorbing 1,2,3-triazolide ionic liquids</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1039/c3ra47097k'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1039/c3ra47097k&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/jp507957n">Effects of concentration, crystal structure, magnetism, and electronic structure method on first-principles oxygen vacancy formation energy trends in perovskites</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/jp507957n'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/jp507957n&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/ie400582a">Effects of O 2 and SO 2 on the Capture Capacity of a Primary-Amine Based Polymeric CO 2 Sorbent</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/ie400582a'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/ie400582a&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/http://dx.doi.org/10.1016/j.molstruc.2013.01.046">Interactions in 1-ethyl-3-methyl imidazolium tetracyanoborate ion pair: Spectroscopic and density functional study</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='http://dx.doi.org/10.1016/j.molstruc.2013.01.046'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=http://dx.doi.org/10.1016/j.molstruc.2013.01.046&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/http://dx.doi.org/10.1016/j.ijggc.2013.06.020">Comparisons of amine solvents for post-combustion CO2 capture: A multi-objective analysis approach</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='http://dx.doi.org/10.1016/j.ijggc.2013.06.020'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=http://dx.doi.org/10.1016/j.ijggc.2013.06.020&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/ie301419q">Chemical and Molecular Descriptors for the Reactivity of Amines with CO 2</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/ie301419q'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/ie301419q&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/cs3002644">Spectroscopic Characterization of Mixed Fe–Ni Oxide Electrocatalysts for the Oxygen Evolution Reaction in Alkaline Electrolytes</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/cs3002644'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/cs3002644&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.2172/1149701">Modeling Coverage Dependence in Surface Reaction Networks</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.2172/1149701'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.2172/1149701&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.pecs.2012.03.003">The outlook for improved carbon capture technology</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.pecs.2012.03.003'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.pecs.2012.03.003&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1111/j.1551-2916.2012.05236.x">Structure and Relative Thermal Stability of Mesoporous (La,Sr)MnO3 Powders Prepared Using Evaporation-Induced Self-Assembly Methods</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1111/j.1551-2916.2012.05236.x'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1111/j.1551-2916.2012.05236.x&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1007/s11244-012-9808-0">Preface: Trends in computational catalysis</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1007/s11244-012-9808-0'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1007/s11244-012-9808-0&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/ie300452c">Evaluation of a Primary Amine-Functionalized Ion-Exchange Resin for CO2 Capture</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/ie300452c'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/ie300452c&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1063/1.4746117">Effects of strain, d-band filling, and oxidation state on the surface electronic structure and reactivity of 3d perovskite surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/1.4746117'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.4746117&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1039/9781849734776-00083">Coverage dependent adsorption properties of atomic adsorbates on late transition metal surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1039/9781849734776-00083'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1039/9781849734776-00083&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1002/cctc.201000397">Universality in Oxygen Evolution Electrocatalysis on Oxide Surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1002/cctc.201000397'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1002/cctc.201000397&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1149/1.3570235">Preparation of Mesoporous La 0.8Sr 0.2MnO 3 infiltrated coatings in porous SOFC cathodes using evaporation-induced self-assembly methods</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1149/1.3570235'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1149/1.3570235&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/cs200039t">Identification of sulfur-tolerant bimetallic surfaces using dft parametrized models and atomistic thermodynamics</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/cs200039t'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/cs200039t&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1063/1.3631948">Effects of strain, d-band filling, and oxidation state on the bulk electronic structure of cubic 3d perovskites</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/1.3631948'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.3631948&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1063/1.3561287">Configurational correlations in the coverage dependent adsorption energies of oxygen atoms on late transition metal fcc(111) surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/1.3561287'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.3561287&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1002/cssc.201000056">CO2 Adsorption on Supported Molecular Amidine Systems on Activated Carbon</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1002/cssc.201000056'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1002/cssc.201000056&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.fuel.2009.11.036">Separation of CO2 from flue gas using electrochemical cells</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.fuel.2009.11.036'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.fuel.2009.11.036&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1080/08927022.2010.481794">New solid-state table: estimating d-band characteristics for transition metal atoms</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1080/08927022.2010.481794'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1080/08927022.2010.481794&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1103/PhysRevB.82.045414">Simple model explaining and predicting coverage-dependent atomic adsorption energies on transition metal surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1103/PhysRevB.82.045414'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1103/PhysRevB.82.045414&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1149/1.3432440">Electrochemical concentration of carbon dioxide from an oxygen/carbon dioxide containing gas stream</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1149/1.3432440'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1149/1.3432440&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1080/08927020902833137">Uncertainty and figure selection for DFT based cluster expansions for oxygen adsorption on Au and Pt (111) surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1080/08927020902833137'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1080/08927020902833137&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1080/08927020902833129">Sulphur poisoning of water-gas shift catalysts: Site blocking and electronic structure modification</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1080/08927020902833129'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1080/08927020902833129&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1063/1.3096964">Step decoration of chiral metal surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/1.3096964'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.3096964&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.susc.2009.01.021">Relating the coverage dependence of oxygen adsorption on Au and Pt fcc(111) surfaces through adsorbate-induced surface electronic structure effects</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.susc.2009.01.021'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.susc.2009.01.021&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1103/PhysRevLett.103.246102">Hydrogen Dissociation and Spillover on Individual Isolated Palladium Atoms</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1103/PhysRevLett.103.246102'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1103/PhysRevLett.103.246102&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1103/PhysRevB.79.205412">Correlations in coverage-dependent atomic adsorption energies on Pd(111)</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1103/PhysRevB.79.205412'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1103/PhysRevB.79.205412&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.jcat.2008.11.020">Atomistic thermodynamics study of the adsorption and the effects of water-gas shift reactants on Cu catalysts under reaction conditions</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.jcat.2008.11.020'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.jcat.2008.11.020&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1117/12.776303">Rotational isomeric state theory applied to the stiffness prediction of an anion polymer electrolyte membrane</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1117/12.776303'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1117/12.776303&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1039/b608782p">Density functional theory studies of alloys in heterogeneous catalysis</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1039/b608782p'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1039/b608782p&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1103/PhysRevB.77.075437">Alloy surface segregation in reactive environments: First-principles atomistic thermodynamics study of Ag3Pd(111) in oxygen atmospheres</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1103/PhysRevB.77.075437'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1103/PhysRevB.77.075437&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1149/1.2358292">Response to &quot;comment on 'Trends in the exchange current for hydrogen evolution' J. Electrochem. Soc., 152, J23 (2005) &quot;</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1149/1.2358292'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1149/1.2358292&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1149/1.1856988">Trends in the exchange current for hydrogen evolution</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1149/1.1856988'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1149/1.1856988&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.cattod.2005.04.008">Trends in the chemical properties of early transition metal carbide surfaces: A density functional study</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.cattod.2005.04.008'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.cattod.2005.04.008&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1103/PhysRevLett.93.156801">Role of strain and ligand effects in the modification of the electronic and chemical properties of bimetallic surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1103/PhysRevLett.93.156801'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1103/PhysRevLett.93.156801&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/jp047349j">Origin of the overpotential for oxygen reduction at a fuel-cell cathode</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/jp047349j'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/jp047349j&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1063/1.1737365">Modification of the surface electronic and chemical properties of Pt(111) by subsurface 3d transition metals</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/1.1737365'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1063/1.1737365&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.susc.2003.09.007">Elucidation of the active surface and origin of the weak metal-hydrogen bond on Ni/Pt(111) bimetallic surfaces: a surface science and density functional theory study</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.susc.2003.09.007'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.susc.2003.09.007&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/j.susc.2003.08.041">A four-point probe correlation of oxygen sensitivity to changes in surface resistivity of TiO2(001) and Pd-modified TiO2(001)</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.susc.2003.08.041'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/j.susc.2003.08.041&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1016/s0039-6028(02)02679-1">A comparison of gold and molybdenum nanoparticles on TiO2(110) 1 x 2 reconstructed single crystal surfaces</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/s0039-6028(02)02679-1'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1016/s0039-6028(02)02679-1&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1073/pnas.072514399">H3PW12O40-functionalized tip for scanning tunneling microscopy</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1073/pnas.072514399'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1073/pnas.072514399&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

<li><a href="http://dx.doi.org/10.1021/jo00117a004">Preparation and Characterization of a Bis-Semiquinone: a Bidentate Dianion Biradical</a><div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/jo00117a004'></div><img src="http://api.elsevier.com/content/abstract/citation-count?doi=10.1021/jo00117a004&amp;httpAccept=image/jpeg&amp;apiKey=5cd06d8a7df3de986bf3d0cd9971a47c"></li>

</ol>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/08/08/Altmetrics-meet-my-publications.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A highlight annotation mode for Emacs using font-lock]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock" />
    <id>http://jkitchin.github.io/blog/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock</id>
    <updated>2015-07-31T09:17:40Z</updated>
    <published>2015-07-28T10:57:17Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="annotation" />
    <summary type="html"><![CDATA[A highlight annotation mode for Emacs using font-lock]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Known limitations</a></li>
</ul>
</div>
</div>
<p>
One of my students asked about highlighting text in emacs for note-taking. I can see some advantages for doing it while teaching, for example, and for students studying, so here we we work it out.
</p>

<p>
You will definitely want to see the video on this one, the highlights do not show up in the published html. <a href="https://www.youtube.com/watch?v=Cvz2tiT12-I">https://www.youtube.com/watch?v=Cvz2tiT12-I</a> 
</p>

<p>
For temporary use, highlighting is pretty easy, you just set a property on a region, e.g. the background color. For example, we can do this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">; </span><span style="color: #8D8D84; font-style: italic;">this seems to be necessary to get the tooltips to work.</span>
(<span style="color: #0000FF;">setq</span> font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-region</span> (beg end)
 (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"r"</span>)
 (set-text-properties
  beg end
  '(font-lock-face (<span style="color: #006FE0;">:background</span> <span style="color: #008000;">"Light Salmon"</span>)
                   highlighted t
                   help-echo <span style="color: #008000;">"highlighted"</span>)))

(global-set-key (kbd <span style="color: #008000;">"s-h"</span>) 'highlight-region)
</pre>
</div>

<pre class="example">
highlight-region
</pre>

<p>
This sets the background color, and another property "highlighted" that we will use later. The trouble is this is transient. When I close the file, the highlights are lost. We can save them to a file though, and reload them later. As long as we are diligent about that we should be able to provide persistent highlights.
</p>

<p>
First we need a function to get all the highlights, their start and end, their color, and if there is a help-echo which provides a tooltip. We will see why later. Here we loop through the buffer collecting highlights, and return a list of them.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-get-highlights</span> ()
  <span style="color: #036A07;">"Scan buffer for list of highlighted regions.</span>
<span style="color: #036A07;">These are defined only by the highlighted property. That means</span>
<span style="color: #036A07;">adjacent highlighted regions will be merged into one region with</span>
<span style="color: #036A07;">the color of the first one."</span>
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char (point-min))
    (<span style="color: #0000FF;">let</span> ((highlights '())
          (p)
          (beg)
          (end)
          (note)
          (color))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">corner case of first point being highlighted</span>
      (<span style="color: #0000FF;">when</span> (get-text-property (point) 'highlighted)
        (<span style="color: #0000FF;">setq</span> beg (point)
              end (next-single-property-change (point) 'highlighted)
              color (background-color-at-point)
              help-echo (get-text-property (point) 'help-echo))
        (add-to-list 'highlights (list beg end color help-echo) t)
        (goto-char end))

      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Now the rest of the buffer</span>
      (<span style="color: #0000FF;">while</span> (<span style="color: #0000FF;">setq</span> p (next-single-property-change (point) 'highlighted))
        (<span style="color: #0000FF;">setq</span> beg (goto-char p))
        (<span style="color: #0000FF;">setq</span> color (background-color-at-point))
        (<span style="color: #0000FF;">setq</span> note (get-text-property (point) 'help-echo))
        (<span style="color: #0000FF;">setq</span> end (next-single-property-change (point) 'highlighted))
        (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> beg end)
          (goto-char end)
          (add-to-list 'highlights (list beg
                                         end
                                         color
                                         note)
                       t)
          (goto-char end)))
      highlights)))

(highlight-get-highlights)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="right">438</td>
<td class="right">454</td>
<td class="left">Light Salmon</td>
<td class="left">highlighted</td>
</tr>

<tr>
<td class="right">1014</td>
<td class="right">1031</td>
<td class="left">Light Salmon</td>
<td class="left">highlighted</td>
</tr>
</tbody>
</table>


<p>
Next, we generate a filename, and a function to save the highlights to disk. We make it a hook function that runs every time we save the buffer.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-save-filename</span> ()
  <span style="color: #036A07;">"Return name of file to save overlays in."</span>
  (<span style="color: #0000FF;">when</span> (buffer-file-name)
    (concat <span style="color: #008000;">"."</span> (file-name-nondirectory (buffer-file-name)) <span style="color: #008000;">".highlights"</span>)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-save</span> ()
  <span style="color: #036A07;">"Loop through buffer and save regions with property highlighted.</span>
<span style="color: #036A07;">Save beginning, end of each region, color and help-echo on the</span>
<span style="color: #036A07;">first character of the region. Delete highlight file if it is empty."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((fname (highlight-save-filename))
        (highlights (highlight-get-highlights)))
    (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">and</span> fname highlights)
          (<span style="color: #0000FF;">with-temp-file</span> fname
            (print highlights (current-buffer)))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get rid of file if there are not highlights</span>
        (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> fname (file-exists-p fname))
          (delete-file fname)))))

(add-hook 'after-save-hook 'highlight-save)
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">highlight-save</td>
<td class="left">helm-swoop&#x2013;clear-cache</td>
</tr>
</tbody>
</table>


<div class="org-src-container">

<pre class="src src-sh">cat .highlights.org.highlights
</pre>
</div>

<pre class="example">
((438 454 "Light Salmon" "highlighted") (1014 1031 "Light Salmon" "highlighted"))
</pre>

<p>
Here, we can read the contents and apply the highlights. We set this up on a hook for org-mode, so it will apply them on when we open org-files. You could make this more general if you plan to highlight in code files, for example.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-load</span> ()
  <span style="color: #036A07;">"Load and apply highlights."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setq</span> font-lock-extra-managed-props (delq 'help-echo font-lock-extra-managed-props))
  (<span style="color: #0000FF;">let</span> ((fname (highlight-save-filename)))
    (<span style="color: #0000FF;">when</span> (<span style="color: #0000FF;">and</span> fname (file-exists-p fname))
      (mapcar
       (<span style="color: #0000FF;">lambda</span> (entry)
         (<span style="color: #0000FF;">let</span> ((beg (nth 0 entry))
               (end (nth 1 entry))
               (color (nth 2 entry))
               (help-echo (nth 3 entry)))
           (set-text-properties
            beg end
            `(font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
                             help-echo ,help-echo
                             highlighted t))))
       (<span style="color: #0000FF;">with-temp-buffer</span> (insert-file-contents fname)
                         (read (current-buffer)))))))


(add-hook 'org-mode-hook 'highlight-load)
</pre>
</div>


<p>
Now, let's outdo ourselves in ridiculosity. We will add a helm-colors selector to give you unprecedented highlighting capability in multicolor magnificence. This function will highlight selected text, or update the color of an existing highlight.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight</span> (beg end <span style="color: #6434A3;">&amp;optional</span> color)
  <span style="color: #036A07;">"Highlight region from BEG to END with COLOR.</span>
<span style="color: #036A07;">COLOR is selected from `</span><span style="color: #D0372D;">helm-colors</span><span style="color: #036A07;">' when run interactively."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"r"</span>)
  (<span style="color: #0000FF;">unless</span> (<span style="color: #0000FF;">or</span> (get-text-property (point) 'highlighted)
              (region-active-p))
    (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"No region selected or not on a highlight."</span>))
  (<span style="color: #0000FF;">unless</span> color
    (<span style="color: #0000FF;">setq</span> color (s-trim (helm-colors))))
  (<span style="color: #0000FF;">if</span> (get-text-property (point) 'highlighted)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">update color</span>
      (<span style="color: #0000FF;">let</span> ((beg (previous-single-property-change (point) 'highlighted))
            (end (next-single-property-change (point) 'highlighted)))
        (set-text-properties
         beg end
         `(font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
                          highlighted t)))
  (set-text-properties
   beg end
   `(font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
                    highlighted t))))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">For convenience</span>
(global-set-key (kbd <span style="color: #008000;">"s-h"</span>) 'highlight)
</pre>
</div>
<pre class="example">
highlight
</pre>


<p>
Now, we can conveniently highlight text in whatever color we want. How about list your highlights? After we have highlighted a lot, it might be nice to see a list of these we can click on to find our highlights more quickly.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-list</span> ()
  <span style="color: #036A07;">"Make a list of highlighted text in another buffer. "</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((cb (current-buffer))
        (fname (buffer-file-name))
        (hls (mapcar
              (<span style="color: #0000FF;">lambda</span> (entry)
                (list (nth 0 entry)
                      (buffer-substring (nth 0 entry) (nth 1 entry))))
              (highlight-get-highlights))))
    (<span style="color: #0000FF;">if</span> hls
        (<span style="color: #0000FF;">progn</span>
          (split-window-right)
          (switch-to-buffer-other-window <span style="color: #008000;">"*highlights*"</span>) (org-mode)
          (<span style="color: #0000FF;">setq</span> buffer-read-only nil)
          (erase-buffer)
          (insert <span style="color: #008000;">"Click on text to jump to the position.\n\n"</span>)

          (<span style="color: #0000FF;">dolist</span> (s hls)
            (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
              (define-key map [mouse-1]
                `(<span style="color: #0000FF;">lambda</span> ()
                   (<span style="color: #0000FF;">interactive</span>)
                   (find-file ,fname)
                   (goto-char ,(nth 0 s))))
              (insert (propertize
                       (concat (nth 1 s) <span style="color: #008000;">"\n"</span>)
                       'local-map map))))
          (<span style="color: #0000FF;">setq</span> buffer-read-only t))
      (message <span style="color: #008000;">"No highlights found."</span>))))
</pre>
</div>

<pre class="example">
highlight-list
</pre>

<p>
You probably would like to just select some text with your mouse, and have it highlighted. That requires us to advise the mouse-set-region function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-green</span> ()
  <span style="color: #036A07;">"Highlight region in green."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Darkolivegreen1"</span>))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">create the advice for use later</span>
(<span style="color: #0000FF;">defadvice</span> <span style="color: #006699;">mouse-set-region</span> (after my-highlight () disable)
  <span style="color: #036A07;">"Highlight"</span>
  (highlight-green))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-mouse-on</span> ()
  <span style="color: #036A07;">"Turn on mouse highlighting"</span>
  (<span style="color: #0000FF;">interactive</span>)
  (ad-enable-advice 'mouse-set-region 'after 'my-highlight)
  (ad-activate 'mouse-set-region))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-mouse-off</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ad-disable-advice 'mouse-set-region 'after 'my-highlight)
  (ad-deactivate 'mouse-set-region))
</pre>
</div>

<pre class="example">
highlight-mouse-off
</pre>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-picasso-blues</span> ()
 (<span style="color: #0000FF;">interactive</span>)
 (<span style="color: #0000FF;">save-excursion</span>
   (<span style="color: #0000FF;">let</span> ((colors '(<span style="color: #008000;">"PowderBlue"</span>
                   <span style="color: #008000;">"Lightskyblue1"</span>
                   <span style="color: #008000;">"Lightskyblue2"</span>
                   <span style="color: #008000;">"Lightskyblue3"</span>
                   <span style="color: #008000;">"Lightskyblue4"</span>))
         (beg (region-beginning))
         (end (region-end)))
     (goto-char beg)
     (<span style="color: #0000FF;">while</span> (&lt; (point) (- end 1))
       (highlight (point) (+ 1 (point))
                  (nth (mod (- (point) (region-beginning)) (length colors)) colors))
       (forward-char)))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-rainbow</span> ()
 (<span style="color: #0000FF;">interactive</span>)
 (<span style="color: #0000FF;">save-excursion</span>
   (<span style="color: #0000FF;">let</span> ((colors '(<span style="color: #008000;">"Red1"</span>
                   <span style="color: #008000;">"Orange1"</span>
                   <span style="color: #008000;">"Yellow1"</span>
                   <span style="color: #008000;">"Darkolivegreen1"</span>
                   <span style="color: #008000;">"Skyblue1"</span>
                   <span style="color: #008000;">"Blue1"</span>
                   <span style="color: #008000;">"DarkViolet"</span>))
         (beg (region-beginning))
         (end (region-end)))
     (goto-char beg)
     (<span style="color: #0000FF;">while</span> (&lt; (point) (- end 1))
       (highlight (point) (+ 1 (point))
                  (nth (mod (- (point) (region-beginning)) (length colors)) colors))
       (forward-char)))))
</pre>
</div>

<p>
=These look cool, but they don't get properly saved. The code that finds the highlights finds the region, but only saves the first color. That means that adjacent highlights of different color will also not be saved correctly.
</p>

<p>
How about a highlight with your own tooltip? In theory we can set the help-echo property to some text. In practice I have found this tricky because font-lock occasionally erases help-echo properties on re-fontifying. We remove help-echo from a list of properties that are affected by this, but another library may add it back, and there might be some unintended consequences of that. Here we design a function to highlight with a user-defined tooltip.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-note</span> (beg end color <span style="color: #6434A3;">&amp;optional</span> note)
  <span style="color: #036A07;">"Highlight selected text and add NOTE to it as a tooltip."</span>
  (<span style="color: #0000FF;">interactive</span>
   (list
    (region-beginning)
    (region-end)
    (s-trim (helm-colors))))
  (<span style="color: #0000FF;">unless</span> note (<span style="color: #0000FF;">setq</span> note (read-input <span style="color: #008000;">"Note: "</span>)))
  (<span style="color: #0000FF;">unless</span> (region-active-p)
    (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"No region selected."</span>))
  (set-text-properties
   beg end
   `(help-echo ,note font-lock-face (<span style="color: #006FE0;">:background</span> ,color)
               highlighted t)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-note-edit</span> (new-note)
  <span style="color: #036A07;">"Set tooltip of highlight at point to NEW-NOTE."</span>
  (<span style="color: #0000FF;">interactive</span> (list (read-input <span style="color: #008000;">"Note: "</span> (get-text-property (point) 'help-echo))))
  (<span style="color: #0000FF;">let*</span> ((region (button-lock-find-extent (point) 'highlighted))
         (beg (car region))
         (end (cdr region)))
    (put-text-property beg end 'help-echo new-note)))
</pre>
</div>

<p>
=highlight-note-edit
==highlight-note-edit
==highlight-note-edit
==highlight-note-edit
=C
Want to get rid of the highlights? We may want to delete one or all. We make a function for each.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-clear</span> ()
  <span style="color: #036A07;">"Clear highlight at point."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">when</span> (get-text-property (point) 'highlighted)
    (set-text-properties
     (next-single-property-change (point) 'highlighted)
     (previous-single-property-change (point) 'highlighted)
     nil)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-clear-all</span> ()
  <span style="color: #036A07;">"Clear all highlights.</span>
<span style="color: #036A07;">They are really deleted when you save the buffer."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (mapcar
   (<span style="color: #0000FF;">lambda</span> (entry)
     (<span style="color: #0000FF;">let</span> ((beg (nth 0 entry))
           (end (nth 1 entry)))
       (set-text-properties
        beg end nil)))
   (highlight-get-highlights))
  (<span style="color: #0000FF;">when</span> (get-buffer <span style="color: #008000;">"*highlights*"</span>)
    (kill-buffer <span style="color: #008000;">"*highlights*"</span>)))
</pre>
</div>
<pre class="example">
highlight-clear-all
</pre>

<p>
Let's define a few convenience functions for common colors, a hydra to quickly select them and bind it to a key for convenience.  While we are at it, we add a menu to Org too.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-yellow</span> ()
  <span style="color: #036A07;">"Highlight region in yellow."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Yellow"</span>))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-blue</span> ()
  <span style="color: #036A07;">"Highlight region in blue."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"LightBlue"</span>))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-pink</span> ()
  <span style="color: #036A07;">"Highlight region in pink."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Pink"</span>))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-green</span> ()
  <span style="color: #036A07;">"Highlight region in green."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (highlight (region-beginning) (region-end) <span style="color: #008000;">"Darkolivegreen1"</span>))


(<span style="color: #0000FF;">defhydra</span> highlighter (<span style="color: #006FE0;">:color</span> blue) <span style="color: #008000;">"highlighter"</span>
  (<span style="color: #008000;">"b"</span> highlight-blue <span style="color: #008000;">"blue"</span>)
  (<span style="color: #008000;">"g"</span> highlight-green <span style="color: #008000;">"Green"</span>)
  (<span style="color: #008000;">"p"</span> highlight-pink <span style="color: #008000;">"Pink"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define as many special colors as you like.</span>
  (<span style="color: #008000;">"s"</span> (highlight (region-beginning) (region-end) <span style="color: #008000;">"Lightsalmon1"</span>) <span style="color: #008000;">"Salmon"</span>)
  (<span style="color: #008000;">"y"</span> highlight-yellow <span style="color: #008000;">"yellow"</span>)
  (<span style="color: #008000;">"c"</span> highlight <span style="color: #008000;">"Choose color"</span>)
  (<span style="color: #008000;">"n"</span> (highlight-note (region-beginning) (region-end) <span style="color: #008000;">"Thistle"</span>) <span style="color: #008000;">"Note"</span>)
  (<span style="color: #008000;">"N"</span> highlight-note <span style="color: #008000;">"Note (c)"</span>)
  (<span style="color: #008000;">"m"</span> highlight-mouse-on <span style="color: #008000;">"Mouse"</span>)
  (<span style="color: #008000;">"M"</span> highlight-mouse-off <span style="color: #008000;">"Mouse off"</span>)
  (<span style="color: #008000;">"e"</span> highlight-note-edit <span style="color: #008000;">"Edit note"</span>)
  (<span style="color: #008000;">"l"</span> highlight-list <span style="color: #008000;">"List highlights"</span>)
  (<span style="color: #008000;">"r"</span> highlight-load <span style="color: #008000;">"Reload"</span>)
  (<span style="color: #008000;">"S"</span> highlight-save <span style="color: #008000;">"Save"</span>)
  (<span style="color: #008000;">"d"</span> highlight-clear <span style="color: #008000;">"Delete"</span>)
  (<span style="color: #008000;">"D"</span> highlight-clear-all <span style="color: #008000;">"Delete All"</span>))

(easy-menu-change
 '(<span style="color: #008000;">"Org"</span>) <span style="color: #008000;">"highlighter"</span>
 '([<span style="color: #008000;">"Highlight"</span> highlight]
   [<span style="color: #008000;">"Highlight (B)"</span> highlight-blue]
   [<span style="color: #008000;">"Highlight (G)"</span> highlight-green]
   [<span style="color: #008000;">"Highlight (P)"</span> highlight-pink]
   [<span style="color: #008000;">"Highlight (Y)"</span> highlight-yellow]
   [<span style="color: #008000;">"Highlight note"</span> highlight-note]
   [<span style="color: #008000;">"List highlights"</span> highlight-list]
   [<span style="color: #008000;">"Delete highlight"</span> highlight-clear]
   [<span style="color: #008000;">"Delete highlights"</span> highlight-clear-all])
 <span style="color: #008000;">"Show/Hide"</span>)


(global-set-key (kbd <span style="color: #008000;">"s-h"</span>) 'highlighter/body)
</pre>
</div>

<pre class="example">
highlighter/body
</pre>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Known limitations</h2>
<div class="outline-text-2" id="text-1">
<p>
The tooltips seem especially fragile, and if there is code that undoes the removal of help-echo from font-lock-extra-managed-props, it seems possible they would easily get lost. I wouldn't use them a lot without a lot of testing. You <i>have</i> to rely on the hook functions defined to keep the highlights synchronized between the buffer and the external highlight file. If you were to rename a file externally, e.g. in the OS, or with a shell command, then the highlights will be lost unless you also rename the external file.
</p>

<p>
Highlights are not robust enough to survive refiling an org-mode section from one file to another.  Personally I don't see these as too big a problem; I don't put a lot of value of highlights, but I can see it being pretty annoying to lose them!
</p>

<p>
Still, if you want to give this a try, you can use the code here: <a href="/media/2015-07-28-A-highlight-annotation-mode-for-Emacs-using-font-lock/highlights.el">highlights.el</a> . You should bind the functions to whatever keys you want. Also, it is setup to only work for org-mode. I am not sure what the best hook to use for any file might be. Maybe find-file-hook.
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/28/A-highlight-annotation-mode-for-Emacs-using-font-lock.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Running scientific instruments in Emacs and recording the results]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/25/Running-scientific-instruments-in-Emacs-and-recording-the-results" />
    <id>http://jkitchin.github.io/blog/2015/07/25/Running-scientific-instruments-in-Emacs-and-recording-the-results</id>
    <updated>2015-07-25T10:04:01Z</updated>
    <published>2015-07-25T10:04:01Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="notebook" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Running scientific instruments in Emacs and recording the results]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/25/Running-scientific-instruments-in-Emacs-and-recording-the-results"><![CDATA[



<p>
Today we look at running a scientific instrument via http requests from Emacs and org-mode. We will use a Gamry Ref600 potentiostat because Gamry has very nicely provide a COM interface we can access via Python. This will be only a proof of concept to see what it is like. We will not consider any issues of security, etc&#x2026;, only what is it like to do it.
</p>

<p>
The setup will look like this: we will run a flask web app that uses python to control the instrument via http requests. Why? Because I want to run the instrument from my Mac ;) and so far there are only Windows drivers for the instrument. So, we run the flask app on the Windows machine, and I run it from here on my Mac by sending requests. Flask takes care of converting requests to action using Python. You can see the <a href="#sec-2">Flask app here</a>.
</p>

<p>
Let's see what is online:
</p>
<div class="org-src-container">

<pre class="src src-sh">curl jkitchin-win.cheme.cmu.edu:5000/pstats
</pre>
</div>

<pre class="example">
(u'REF600-13089',)
</pre>

<p>
We have one potentiostat online with serial number 13089. I have a dummy cell connected to it which has a little resistor on it. So we can run a cyclic voltammogram and it should be a straight line. We have to know a bit about what is returned. We will get a json file back, and it will have the data in it. The data will be a list of lists. The data we want is in columns 1 and 3 (python indexing). Obviously you need some prior knowledge of what data comes back to use this. That would come from reading some documentation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #BA36A5;">resp</span> = requests.get(<span style="color: #008000;">'http://jkitchin-win.cheme.cmu.edu:5000/cv?endv=0.25&amp;startv=-0.25'</span>)

<span style="color: #BA36A5;">dj</span> = resp.json()
<span style="color: #BA36A5;">data</span> = np.array(dj[<span style="color: #008000;">'data'</span>])

plt.plot(data[:, 1], data[:, 3])
plt.xlabel(<span style="color: #008000;">'Voltage (V)'</span>)
plt.ylabel(<span style="color: #008000;">'Current (A)'</span>)
plt.tight_layout()
plt.savefig(<span style="color: #008000;">'cv-1.png'</span>)
</pre>
</div>

<p>
<img src="/media/2015-07-25-Running-scientific-instruments-in-Emacs-and-recording-the-results/cv-1.png"> 
Well, there you have it. Possibly the first Gamry Ref600 to ever have been driven from a Mac ;) Let me be more explicit about that; I could <i>also</i> run this from Linux, an iPad, etc&#x2026; You could do this in a browser, or in an IPython notebook, or in Matlab, among many other possibilities. You could write a script in perl, shell, ruby, emacs-lisp, or any other language that supports http requests.
</p>

<p>
I am not sure why the graph is not perfectly linear, maybe there is some capacitive charging that starts out. The resistance based on the current at 0.2V is about 2000 ohms, which is in good agreement with what is listed on the board the dummy cell is on.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
There are a host of interesting issues one eventually has to consider here including security, but also error management and debugging. I hacked something like an http api here by running flask on the windows machine running the instrument. That is a layer of abstraction on an abstraction to start with. I think later instruments are likely to run these webservers themselves on small dedicated computers, e.g. via a Raspberry pi or Arduino chipset. It is not obvious how sophisticated you can make this with respect to triggering different instruments, etc&#x2026;
</p>

<p>
In running this, my "notebook" was blocked while the experiment ran. It is possible to run things asynchronously, and sometimes that would make sense. In the example here, we have provided a very limited set of functions to "run" the potentiostat. It was only a proof of concept to get a sense for what it is like. In practice a fuller set of functions would be implemented. Another point to consider is how the data comes back from the potentiostat. We used json here because it is convenient, but we could just as well send files, and other sorts of data too.
</p>

<p>
This lays out the possibility to walk up to an instrument with an electronic notebook, setup and run the experiment, capture the results in the notebook and take it back to the office for analysis. Pretty cool.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a id="ID-5EB72A19-B9D3-4ABA-975F-61ACE16E0D87" name="ID-5EB72A19-B9D3-4ABA-975F-61ACE16E0D87"></a><span class="section-number-2">2</span> Flask app</h2>
<div class="outline-text-2" id="text-2">

<p>
So, here is my flask app. We setup a few routes using get requests to do things like get a list of the potentiostats online, and to run a cyclic voltamogram. As a side note, after this post is over, I am turning off the app, so you won't be able to repeat the codes ;) This is not a beautiful, secure or error tolerant code. It works enough for a proof of concept of simple experiments.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> flask <span style="color: #0000FF;">import</span> Flask, request, jsonify
<span style="color: #0000FF;">import</span> time

<span style="color: #BA36A5;">app</span> = Flask(<span style="color: #006FE0;">__name__</span>)

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">hello_world</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'Hello World!'</span>

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/pstats'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">get_pstats</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> win32com.client <span style="color: #0000FF;">as</span> client
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">devices</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDeviceList'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = <span style="color: #006FE0;">str</span>(devices.EnumSections())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> result

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/close_pstat'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">close</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> win32com.client <span style="color: #0000FF;">as</span> client
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">devicelist</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDeviceList'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x</span> = devicelist.EnumSections()[0]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pstat</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryPstat'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Init(x)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Close()


<span style="color: #0000FF;">def</span> <span style="color: #006699;">run_ramp</span>(Sinit,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">start value</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    Sfinal, <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">end value</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    ScanRate=1,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    SampleRate=0.01,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    CtrlMode=1,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">GamryCOM.PstatMode</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>    fname=<span style="color: #D0372D;">None</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">'''We assume the first device is the one you want.</span>
<span style="color: #036A07;">    '''</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> win32com.client <span style="color: #0000FF;">as</span> client
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">devicelist</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDeviceList'</span>)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">x</span> = devicelist.EnumSections()[0]

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">pstat</span> = client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryPstat'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Init(x)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Open()

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">dtaqcpiv</span>=client.Dispatch(<span style="color: #008000;">'GamryCOM.GamryDtaqCpiv'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   dtaqcpiv.Init(pstat)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">sigramp</span>=client.Dispatch(<span style="color: #008000;">'GamryCOM.GamrySignalRamp'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   sigramp.Init(pstat, Sinit, Sfinal, ScanRate, SampleRate, CtrlMode)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.SetSignal(sigramp)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.SetCell(1) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">1 == GamryCOM.CellOn</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   dtaqcpiv.Run(<span style="color: #D0372D;">True</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">except</span> <span style="color: #6434A3;">Exception</span> <span style="color: #0000FF;">as</span> e:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Close()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">raise</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">NOTE:  The comtypes example in this same directory illustrates the use of com</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">notification events.  The comtypes package is recommended as an alternative</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">to win32com.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(2) <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">just wait sufficiently long for the acquisition to complete.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">acquired_points</span> = []
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">count</span> = 1
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">while</span> count &gt; 0:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">count</span>, <span style="color: #BA36A5;">points</span> = dtaqcpiv.Cook(10)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">The columns exposed by GamryDtaq.Cook vary by dtaq and are</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">documented in the Toolkit Reference Manual.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   acquired_points.extend(<span style="color: #006FE0;">zip</span>(*points))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">acquired_points</span> = np.array(acquired_points)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> fname <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   np.savetxt(fname, acquired_points)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pstat.Close()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> jsonify({<span style="color: #008000;">'data'</span>: acquired_points.tolist()})

<span style="color: #6434A3;">@app.route</span>(<span style="color: #008000;">'/cv'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">run_cv</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = <span style="color: #006FE0;">str</span>(request.values)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">startv</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'startv'</span>, -0.1))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">endv</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'endv'</span>, 0.1))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">scanrate</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'scanrate'</span>, 1.0))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">samplerate</span> = <span style="color: #006FE0;">float</span>(request.values.get(<span style="color: #008000;">'samplerate'</span>, 0.01))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> = run_ramp(startv, endv, scanrate, samplerate)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> data


<span style="color: #0000FF;">if</span> <span style="color: #006FE0;">__name__</span> == <span style="color: #008000;">'__main__'</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   app.run(host=<span style="color: #008000;">'jkitchin-win.cheme.cmu.edu'</span>, port=5000, debug=<span style="color: #D0372D;">True</span>)
</pre>
</div>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/25/Running-scientific-instruments-in-Emacs-and-recording-the-results.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Indexing text in screenshots so they are searchable]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/24/Indexing-text-in-screenshots-so-they-are-searchable" />
    <id>http://jkitchin.github.io/blog/2015/07/24/Indexing-text-in-screenshots-so-they-are-searchable</id>
    <updated>2015-07-24T07:43:08Z</updated>
    <published>2015-07-24T07:43:08Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="search" />
    <category scheme="http://jkitchin.github.io/blog" term="image" />
    <summary type="html"><![CDATA[Indexing text in screenshots so they are searchable]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/24/Indexing-text-in-screenshots-so-they-are-searchable"><![CDATA[



<p>
I had an interesting conversation with someone yesterday about using screenshots to document a process. This has an appeal of simplicity, since it is agnostic to the process, but I wondered about the long-term utility. If the documentation is valuable, you would like to search it in the future, and we so far have limited capability to search images. But, if there is important text in the image, we might be able to recognize the text, and use it to index the images. Then they would become searchable at least for the text in the image. Don't get me wrong, it would be better if we could store that text directly, but suppose that just isn't possible, maybe because it is all stored in some kind of gui, or it is locked up in proprietary software. Here we explore the potential utility of this. We only explore getting text out of images here, not the actual indexing part. See this <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results/">post</a> for how we could integrate this into an actual index and search tool.
</p>

<p>
First we need an OCR engine. Tesseract<a href="https://github.com/tesseract-ocr/tesseract"> (tesseract-ocr/tesseract)</a> is supposed to be pretty good, and it easily installs via brew:
</p>
<div class="org-src-container">

<pre class="src src-sh">brew install tesseract
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(shell-command-to-string <span style="color: #008000;">"tesseract -v"</span>)
</pre>
</div>

<pre class="example">
tesseract 3.02.02
 leptonica-1.72
  libjpeg 8d : libpng 1.6.17 : libtiff 4.0.3 : zlib 1.2.5
</pre>

<p>
We will test it on some screenshots taken with the default settings on my Mac. Here is an example. This example has text in color boxes, and some shadowing on the left side because another window was near it and that is some OS effect.
</p>


<div class="figure">
<p><img src="/media/2015-07-24-Indexing-text-in-screenshots-so-they-are-searchable/date-23-07-2015-time-19-56-52.png"> 
</p>
</div>

<p>
And here is the simplest text extraction.
</p>

<div class="org-src-container">

<pre class="src src-sh">tesseract ./screenshots/date-23-07-2015-time-19-56-52.png test
cat test.txt
rm test.txt
</pre>
</div>

<pre class="example">
M. ~ an an. -.2... nuIunIrv- I.nd=d¢wn, a.....=.-p. u|u.=u_x. van" bar imam-

smm-ry ~ nu... ma, Camilla man Qu-In lui. Sdlwnu u._-. /-x/mu



master node q)l9amesh.chemc.cmn.edn up 9: days, mas, n nsersv

cutﬂmltc nude: men): :1

bpxoc node sum 17 dmln , o.1s,u.:n up
cuxque node state: n17 dawn

tuxqng jobs: 207 max, m2 nmmnq. as queued
aggregate laud: 799.55
</pre>

<p>
That is not too good. I am skeptical it would be useful for anything. This <a href="http://vbridge.co.uk/2012/11/05/how-we-tuned-tesseract-to-perform-as-well-as-a-commercial-ocr-package/">page</a> suggests improvements can be made with image clean up, but that image is pretty clear to me. There is a little shadow on the left side, but otherwise it is very readable to me. Let us try doubling the size of the image. Maybe that will help. Imagemagick lets us resize the image pretty easily.
</p>

<div class="org-src-container">

<pre class="src src-sh">convert -resize 200% ./screenshots/date-23-07-2015-time-19-56-52.png ./screenshots/doubled.png

tesseract ./screenshots/doubled.png test
cat test.txt
rm test.txt ./screenshots/doubled.png
</pre>
</div>

<pre class="example">
- 2D Node status summary. Rnd=down, Groun=up, BIu¢=boot. Vdlow bur indium --



Summlry - Hnﬂnr Mods, Compuh Nodu, Quuue, Land, Soﬁwan Ric:-as, /dzc/maul

master node gilqnmesh.cheme.cmu.edu up 91 days, 10:45, 11 users, .'

compute nodes total: 31

bproc node state: 17 down , 0-16,18-30 up
torque node state: n17 down

torque jobs: 207 total, 102 running, 88 queued
aggregate load: 799.55
</pre>


<p>
That is a very remarkable improvement! This looks very useful, and could even be used for indexing. Interestingly, the white text on colored backgrounds does not do as well. That could be important to remember in designing the GUI front end if you have any say in it.  Let's try a few others.
</p>



<div class="figure">
<p><img src="/media/2015-07-24-Indexing-text-in-screenshots-so-they-are-searchable/date-23-07-2015-time-20-01-43.png"> 
</p>
</div>

<div class="org-src-container">

<pre class="src src-sh">convert -resize 200% ./screenshots/date-23-07-2015-time-20-01-43.png ./screenshots/doubled.png

tesseract ./screenshots/doubled.png test
cat test.txt
rm test.txt ./screenshots/doubled.png
</pre>
</div>

<pre class="example">
Fllbn V Q I-"Ind a repository...

tesseract
Tesseract Open Source OCR Enghe (main repository)
Updated 43 minutes ago
</pre>

<p>
That is also pretty good. Again, the text on colored backgrounds is less good than that on a white background. And one more from Twitter.
</p>


<div class="figure">
<p><img src="/media/2015-07-24-Indexing-text-in-screenshots-so-they-are-searchable/date-23-07-2015-time-20-05-59.png"> 
</p>
</div>

<div class="org-src-container">

<pre class="src src-sh">convert -resize 200% ./screenshots/date-23-07-2015-time-20-05-59.png ./screenshots/doubled.png

tesseract ./screenshots/doubled.png test
cat test.txt
rm test.txt ./screenshots/doubled.png
</pre>
</div>

<pre class="example">
chEnected AIchE .-.ChEnected - 5h
C h E AlChE Academy: Take AlChE‘s Pneumatic Conveying 0! Bulk Solids Course and
learn practical design principles. r1m.ag/|IJcN
</pre>

<p>
Overall pretty good. I am pretty convinced that the right screenshots could be an easy way to document some processes conveniently and that they could be searched in the future. Some testing would need to be done on how to do the OCR, and it does not appear that one recipe will work for all images.
</p>

<p>
Nevertheless, a program could pretty easily be developed to index a directory of screenshots, do the OCR on each image, and index the resulting text so it can be searched. It is even conceivable that several indexes could be made using different OCR methods that might work better for different types of images. Another improvement would be if some metadata could be associated with the screenshot including what instrument it is a shot of, who took it, etc&#x2026; This starts to move in a direction that requires dedicated screenshot tools, and away from the simplicity of the PrintScreen button, but it adds value to the data that makes it easier to find later.
</p>

<p>
The beauty of the screenshot is that it is what you saw at the time, and it captures things as they were. It doesn't capture anything "behind the scenes" or off-screen of course, so there is certainly room to lose information this way. A careful analysis of what information is captured and what is lost would be important to assess the long-term value of capturing the process this way as opposed to any other way. There certainly is a balance of how much effort it takes to capture it and the value of the information in the future, and cost to rerun it if it isn't found in the future.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/24/Indexing-text-in-screenshots-so-they-are-searchable.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A sudo org-link and sh block]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/17/A-sudo-org-link-and-sh-block" />
    <id>http://jkitchin.github.io/blog/2015/07/17/A-sudo-org-link-and-sh-block</id>
    <updated>2015-07-17T12:42:34Z</updated>
    <published>2015-07-17T12:42:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="babel" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[A sudo org-link and sh block]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/17/A-sudo-org-link-and-sh-block"><![CDATA[


<p>
Shell blocks in org-mode are pretty useful, but they are a little limited in that it is not obvious how to run a sudo command in them.
</p>

<p>
So for example, this gives me a permission denied error.
</p>
<div class="org-src-container">

<pre class="src src-sh">ls /var/audit
</pre>
</div>

<p>
One way to get around this is to create an org-mode link like this one:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">http://stackoverflow.com/questions/2472273/how-do-i-run-a-sudo-command-in-emacs</span>
(org-add-link-type
 <span style="color: #008000;">"sudo"</span>
 (<span style="color: #0000FF;">lambda</span> (cmd)
   <span style="color: #036A07;">"Run CMD with sudo."</span>
   (shell-command
    (concat <span style="color: #008000;">"echo "</span> (shell-quote-argument (read-passwd <span style="color: #008000;">"Password? "</span>))
            <span style="color: #008000;">" | sudo -S "</span> cmd))))
</pre>
</div>

<p>
Now you can create a link like <a href="ls /var/audit">ls /var/audit</a>, and when you click on it you will be prompted for a password, and then you will see a buffer containing the output. To get an actual sudo code block, you need a new org babel library. Here is an example of what it might look like. Tangle this file to generate the library. Note: This is a lightly modified version of ob-emacs-lisp.el, and I have not tested it very thoroughly.
</p>


<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">ob-sudo.el --- An org-mode source block to run shell commands as sudo</span>

<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">Commentary:</span>
<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Runs the block of code as a shell command with sudo.</span>

<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">Code:</span>

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:sudo</span> (body params)
  <span style="color: #036A07;">"Run BODY as a shell command using sudo."</span>
  (<span style="color: #0000FF;">let*</span> ((passwd (shell-quote-argument (read-passwd <span style="color: #008000;">"Password? "</span>)))
         (result (shell-command-to-string
                  (concat <span style="color: #008000;">"echo "</span> passwd
                          <span style="color: #008000;">" | sudo -S "</span> body))))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is verbatim from ob-emacs-lisp</span>
    (<span style="color: #0000FF;">org-babel-result-cond</span> (cdr (assoc <span style="color: #006FE0;">:result-params</span> params))
      (<span style="color: #0000FF;">let</span> ((print-level nil)
            (print-length nil))
        (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">or</span> (member <span style="color: #008000;">"scalar"</span> (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
                (member <span style="color: #008000;">"verbatim"</span> (cdr (assoc <span style="color: #006FE0;">:result-params</span> params))))
            (format <span style="color: #008000;">"%S"</span> result)
          (format <span style="color: #008000;">"%s"</span> result)))
      (org-babel-reassemble-table
       result
       (org-babel-pick-name (cdr (assoc <span style="color: #006FE0;">:colname-names</span> params))
                            (cdr (assoc <span style="color: #006FE0;">:colnames</span> params)))
       (org-babel-pick-name (cdr (assoc <span style="color: #006FE0;">:rowname-names</span> params))
                            (cdr (assoc <span style="color: #006FE0;">:rownames</span> params)))))))

(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">ob-sudo</span>)
<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">ob-sudo.el ends here</span>
</pre>
</div>

<p>
Let us add the current dir to our path so we can load it. If you use this a lot, you should put the library on your permanent path.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'load-path (expand-file-name <span style="color: #008000;">"."</span>))
</pre>
</div>

<p>
Now, add the sudo "language" to org-babel-load-languages.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (sh . t)
   (matlab . t)
   (sqlite . t)
   (ruby . t)
   (perl . t)
   (org . t)
   (dot . t)
   (plantuml . t)
   (R . t)
   (sudo . t)))
</pre>
</div>

<p>
And, here it is in action. Hopefully I am not giving away some important information here!
</p>

<div class="org-src-container">

<pre class="src src-sudo">ls /var/audit
</pre>
</div>

<pre class="example">
20141106003522.20141110021519
20141110021548.crash_recovery
20141112154126.crash_recovery
20141119201541.20141122145259
20141122145317.20141124214930
20141124215000.crash_recovery
20141126062011.20141202192451
20141202192507.crash_recovery
20141210133306.crash_recovery
20141225181819.20150106015256
20150106015325.20150111010018
20150111010121.crash_recovery
20150115195518.20150115200101
20150115200110.crash_recovery
20150123061227.20150215123411
20150215123454.crash_recovery
20150225004740.20150310201600
20150310201633.20150314214730
20150314214807.crash_recovery
20150323145600.20150329170647
20150329170721.crash_recovery
20150407215846.20150413000423
20150413000438.20150421122044
20150421122104.20150518122545
20150518122616.20150518124432
20150518124432.20150518124513
20150518124513.20150518125437
20150518125437.20150518125935
20150518125935.20150518132111
20150518132111.20150531202621
20150531202719.20150601123612
20150601123612.20150601124932
20150601124932.20150601125151
20150601125151.20150601125555
20150601125555.20150601131947
20150601131947.20150601132421
20150601132421.20150601133735
20150601133735.20150601140740
20150601140740.20150601154012
20150601154012.20150601155125
20150601155125.20150601155215
20150601155215.20150601160937
20150601160937.crash_recovery
20150613061543.20150614054541
20150614054541.20150625165357
20150625165432.20150625200623
20150625200623.20150628042242
20150628042242.20150628103628
20150628103628.20150630052100
20150630052100.20150701232519
20150702005345.20150710203212
20150710203226.not_terminated
current
</pre>

<p>
Summary thoughts: I will reiterate again I have not tested this a lot, I was mostly interested in trying to make a new sh block with sudo support. Let me know if it has issues for you, and make sure you have backups of things it could mess up!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/17/A-sudo-org-link-and-sh-block.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Drag images and files onto org-mode and insert a link to them]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them" />
    <id>http://jkitchin.github.io/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them</id>
    <updated>2015-07-10T16:11:43Z</updated>
    <published>2015-07-10T16:11:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="video" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Drag images and files onto org-mode and insert a link to them]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them"><![CDATA[


<p>
I want to drag and drop an image onto an org mode file and get a link to that file. This would be used for finding images in Finder, and then dragging them to the Emacs buffer. There is <a href="http://orgmode.org/cgit.cgi/org-mode.git/plain/contrib/lisp/org-download.el">org-download.el</a> which looks like it should do something like this too, but it did not work out of the box for me, and I want to add a few wrinkles to it. For a simple drag-n-drop, I just want the link to appear. With ctrl-drag-n-drop I want to add an attr_org line to set the image size, add a caption line, insert the image at the beginning of the line where the mouse cursor is, put the cursor on the caption line and then refresh the inline images in org-mode so the image is immediately visible.
</p>

<p>
While we are at let us also make it possible to drag file links onto org-files, instead of having the files open. Again, for a simple drag-n-drop, I want a link inserted. For ctrl-drag-n-drop we open the file, and for Meta (alt) drag-n-drop, we insert an attachfile link. You can also define s-drag-n-drop (Super/command) and C-s and M-s drag-n-drop if you can think of things to do with that.
</p>

<p>
Here is the code to make those things happen. Or watch the video: <a href="https://www.youtube.com/watch?v=ahqKXbBVjpQ">https://www.youtube.com/watch?v=ahqKXbBVjpQ</a> 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">my-dnd-func</span> (event)
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"e"</span>)
  (goto-char (nth 1 (event-start event)))
  (x-focus-frame nil)
  (<span style="color: #0000FF;">let*</span> ((payload (car (last event)))
         (type (car payload))
         (fname (cadr payload))
         (img-regexp <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">png</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">jp[e]?g</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">\\&gt;"</span>))
    (<span style="color: #0000FF;">cond</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">insert image link</span>
     ((<span style="color: #0000FF;">and</span>  (eq 'drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert (format <span style="color: #008000;">"[[%s]]"</span> fname))
      (org-display-inline-images t t))
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">insert image link with caption</span>
     ((<span style="color: #0000FF;">and</span>  (eq 'C-drag-n-drop (car event))
            (eq 'file type)
            (string-match img-regexp fname))
      (insert <span style="color: #008000;">"#+ATTR_ORG: :width 300\n"</span>)
      (insert (concat  <span style="color: #008000;">"#+CAPTION: "</span> (read-input <span style="color: #008000;">"Caption: "</span>) <span style="color: #008000;">"\n"</span>))
      (insert (format <span style="color: #008000;">"[[%s]]"</span> fname))
      (org-display-inline-images t t))
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">C-drag-n-drop to open a file</span>
     ((<span style="color: #0000FF;">and</span>  (eq 'C-drag-n-drop (car event))
            (eq 'file type))
      (find-file fname))
     ((<span style="color: #0000FF;">and</span> (eq 'M-drag-n-drop (car event))
           (eq 'file type))
      (insert (format <span style="color: #008000;">"[[attachfile:%s]]"</span> fname)))
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">regular drag and drop on file</span>
     ((eq 'file type)
      (insert (format <span style="color: #008000;">"[[%s]]\n"</span> fname)))
     (t
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"I am not equipped for dnd on %s"</span> payload)))))


(define-key org-mode-map (kbd <span style="color: #008000;">"&lt;drag-n-drop&gt;"</span>) 'my-dnd-func)
(define-key org-mode-map (kbd <span style="color: #008000;">"&lt;C-drag-n-drop&gt;"</span>) 'my-dnd-func)
(define-key org-mode-map (kbd <span style="color: #008000;">"&lt;M-drag-n-drop&gt;"</span>) 'my-dnd-func)
</pre>
</div>

<pre class="example">
my-dnd-func
</pre>
<p>

</p>

<p>
<a href="/media/2015-07-10-Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/jkitchin.json">jkitchin.json</a> 

</p>

<p>
<img src="/media/2015-07-10-Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/Au-icosahedron-3.png"> </p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Acronym minor mode for Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/09/Acronym-minor-mode-for-Emacs" />
    <id>http://jkitchin.github.io/blog/2015/07/09/Acronym-minor-mode-for-Emacs</id>
    <updated>2015-07-09T08:04:40Z</updated>
    <published>2015-07-09T08:04:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="video" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="tooltip" />
    <summary type="html"><![CDATA[Acronym minor mode for Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/09/Acronym-minor-mode-for-Emacs"><![CDATA[



<p>
Three letter acronyms (TLA) are pretty common, as are other kinds of acronyms, e.g. ferromagnetic (FM), anti-ferromagnetic (AFM), National Security Agency (NSA), even <a href="https://www.gnu.org/fun/jokes/gnuemacs.acro.exp.html">Escape-Meta-Alt-Control-Shift</a> (EMACS) etc&#x2026; in technical documents. As you get away from the definition, it can get hard to remember what they are, so here we develop a minor mode that will put a tooltip over acronyms that hopefully shows what they mean.
</p>

<p>
You can see this in action here: <a href="https://www.youtube.com/watch?v=2G2isMO6E2c">https://www.youtube.com/watch?v=2G2isMO6E2c</a> 
</p>

<p>
When we turn the mode on, it will scan the buffer looking for an acronym pattern, deduce its likely meaning, and put tooltips on every subsequent use of the acronym. The pattern we will look for is a sequence of uppercase letters surrounded by parentheses. We will assume that if we find N uppercase letters, that the previous N words contain the definition of the acronym. This is pretty approximate, but it is not likely to be that wrong. Then, we will use button-lock to put the tooltips on all subsequent instances of acronyms. We don't want flyspell interfering with the tooltips, so we remove the overlays if they are there.
</p>

<p>
Unlike previous examples where we just use button-lock, here we wrap the feature into a minor mode that you can turn on and off. Note, you cannot add new acronyms and have them have tooltips. You have to refresh the buttons.
</p>

<p>
Here is the minor mode code. We use the interesting rx package to build the regular expression. It is more verbose, but a little easier to read than a straight regexp like (concat "\\&lt;" (match-string 1) "\\&gt;") in my opinion.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(make-variable-buffer-local
  (<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">*acronym-buttons*</span> '() <span style="color: #036A07;">"list of acronym buttons"</span>))

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">rx</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">highlight-acronyms</span> ()
  (<span style="color: #0000FF;">save-excursion</span>
    (<span style="color: #0000FF;">let</span> ((case-fold-search nil))
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"(</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[A-Z]+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">)"</span> nil t)
        (<span style="color: #0000FF;">when</span> flyspell-mode
          (flyspell-delete-region-overlays (match-beginning 1)
                                           (match-end 1)))
        (<span style="color: #0000FF;">let*</span> ((acronym (match-string 1))
               (p (point))
               (definition (<span style="color: #0000FF;">save-excursion</span>
                             (goto-char (match-beginning 1))
                             (backward-word (length acronym))
                             (buffer-substring (point) p))))
          (add-to-list '*acronym-buttons*
                       (button-lock-set-button
                        (<span style="color: #0000FF;">rx</span> word-start (eval (match-string 1)) word-end)
                        nil
                        <span style="color: #006FE0;">:help-echo</span> definition)))))))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">remove-acronym-buttons</span> ()
  (<span style="color: #0000FF;">dolist</span> (button *acronym-buttons*)
      (button-lock-unset-button button))
  (<span style="color: #0000FF;">setq</span> *acronym-buttons* '()))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">refresh-acronyms</span> ()
  <span style="color: #036A07;">"Refresh acronym tooltips in buffer."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (remove-acronym-buttons)
  (highlight-acronyms))


<span style="color: #8D8D84;">;;;</span><span style="color: #8D8D84; font-style: italic;">###</span><span style="color: #ff0000; font-weight: bold; font-style: italic;">autoload</span>
(<span style="color: #0000FF;">define-minor-mode</span> <span style="color: #006699;">acronym-mode</span>
  <span style="color: #036A07;">"Put definitions on acronyms."</span>
  <span style="color: #006FE0;">:lighter</span> <span style="color: #008000;">" AM"</span>
  (<span style="color: #0000FF;">if</span> acronym-mode
      (highlight-acronyms)
    (remove-acronym-buttons)))


(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">acronym-mode</span>)
</pre>
</div>

<pre class="example">
acronym-mode
</pre>

<p>
There it is. Now any time we have an acronym like EMACS we can mouse over it, or type C-h . on the acronym to see how it was previously defined. If you don't like it, you can turn it off!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/09/Acronym-minor-mode-for-Emacs.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Indexing headlines in org files with swish-e with laser-sharp results]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results" />
    <id>http://jkitchin.github.io/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results</id>
    <updated>2015-07-06T11:04:43Z</updated>
    <published>2015-07-06T11:04:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="swishe" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Indexing headlines in org files with swish-e with laser-sharp results]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results"><![CDATA[



<p>
So far, it looks like swish-e is able to do some pretty focused searches on specific content types. However, the return results are not actually that sharp; in the way we have been using swish-e, it can only tell us the document path that matches, not where in the document the match is. To fix that, we need a new approach to what a "document" is, and a new approach to indexing. We will finally use the "-s prog" option in swish-e which runs an external program that prints stuff to stdout for swish-e to index. We will treat each headline in an org file as a "document" but rather than have the path to the file, we will put an org-mode link there that will take us right to the point of interest.
</p>

<p>
You can see this in action here: <a href="https://www.youtube.com/watch?v=bTwXtEb5Ng8">https://www.youtube.com/watch?v=bTwXtEb5Ng8</a> 
</p>

<p>
Basically, we need a program to output chunks like this for each headline in an org-file:
</p>
<pre class="example">
Path-Name: [[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/ase-db.org") (goto-char 1))]]
Content-Length: 247
Document-Type: XML*

&lt;headline&gt;&lt;title&gt;Using the ase database module&lt;/title&gt;&lt;properties&gt;&lt;FILE&gt;/Users/jkitchin/blogofile-jkitchin.github.com/_blog/ase-db.org&lt;/FILE&gt;&lt;BLOCKED&gt;&lt;/BLOCKED&gt;&lt;categories&gt;python, ase&lt;/categories&gt;&lt;CATEGORY&gt;ase-db&lt;/CATEGORY&gt;&lt;/properties&gt;&lt;/headline&gt;
</pre>

<p>
Then we need to tell swish-e to run the program and index its output. Here is the program to do that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">:<span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">exec emacs -batch -l $0 "$@"</span>
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">org</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">xml</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">cl</span>)

(add-to-list 'load-path <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax/elpa/f-20140828.716"</span>)
(add-to-list 'load-path <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax/elpa/s-20140910.334"</span>)
(add-to-list 'load-path <span style="color: #008000;">"~/Dropbox/kitchingroup/jmax/elpa/dash-20141201.2206"</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">f</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">print-tag</span> (name attrs <span style="color: #6434A3;">&amp;optional</span> closingp)
  <span style="color: #036A07;">"Print an xml tag with symbol NAME and ATTRS (a cons list of (attribute . value)).</span>
<span style="color: #036A07;">if CLOSINGP print the closing tag instead."</span>
  (format
   <span style="color: #008000;">"&lt;%s%s%s&gt;"</span>
   (<span style="color: #0000FF;">if</span> closingp <span style="color: #008000;">"/"</span> <span style="color: #008000;">""</span>)
   name
   (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">and</span> attrs (not closingp))
       (concat
        <span style="color: #008000;">" "</span>
        (mapconcat
         (<span style="color: #0000FF;">lambda</span> (x)
           (format <span style="color: #008000;">"%s=\"%s\""</span>
                   (car x)
                   (xml-escape-string (cdr x))))
         attrs
         <span style="color: #008000;">" "</span>))
     <span style="color: #008000;">""</span>)))

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">tag</span> (name attributes <span style="color: #6434A3;">&amp;rest</span> body)
  <span style="color: #036A07;">"macro to create an xml tag with NAME, ATTRIBUTES. BODY is executed in the tag."</span>
  `(format <span style="color: #008000;">"%s%s%s"</span>
           (print-tag ,name ,attributes nil)
           (concat
            ,@body)
           (print-tag ,name nil t)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">headline-xml</span> (headline)
  <span style="color: #036A07;">"Return xml representation of an element HEADLINE."</span>
  (<span style="color: #0000FF;">let</span> ((title (org-element-property <span style="color: #006FE0;">:title</span> headline))
        (properties (<span style="color: #0000FF;">save-excursion</span>
                      (goto-char
                       (org-element-property <span style="color: #006FE0;">:begin</span> headline))
                      (org-entry-properties))))
    (tag 'headline ()
         (tag 'title () (xml-escape-string (mapconcat 'identity title <span style="color: #008000;">" "</span>)))
         (<span style="color: #0000FF;">when</span> properties
           (tag 'properties ()
                (mapconcat
                 'identity
                 (<span style="color: #0000FF;">loop</span> for (p . v) in properties
                       collect (tag p () (xml-escape-string v)))
                 <span style="color: #008000;">""</span>))))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">headline-document</span> (headline)
  <span style="color: #036A07;">"Return the headline \"document\" for swish-e to index."</span>
  (<span style="color: #0000FF;">let</span> ((xml (replace-regexp-in-string
              <span style="color: #008000;">"[</span><span style="color: #008000;">^</span><span style="color: #008000;">[:ascii:]]"</span> <span style="color: #008000;">""</span>
              (headline-xml headline))))
    (format <span style="color: #008000;">"Path-Name: [[elisp:(progn (find-file \"%s\") (goto-char %s) (show-children))][link]]</span>
<span style="color: #008000;">Content-Length: %s</span>
<span style="color: #008000;">Document-Type: XML*</span>

<span style="color: #008000;">%s"</span> (buffer-file-name)
(org-element-property <span style="color: #006FE0;">:begin</span> headline)
(length xml)
xml)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">process-file</span> (fname)
  <span style="color: #036A07;">"Print the `</span><span style="color: #D0372D;">headline-document</span><span style="color: #036A07;">' for each headline in FNAME."</span>
  (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect fname)
    (mapconcat 'identity
               (org-element-map (org-element-parse-buffer)
                   'headline
                 (<span style="color: #0000FF;">lambda</span> (headline)
                   (princ (headline-document headline))))
               <span style="color: #008000;">""</span>)))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Here is the main work in the script.</span>
(<span style="color: #0000FF;">loop</span> for dir in '(<span style="color: #008000;">"/Users/jkitchin/blogofile-jkitchin.github.com/_blog"</span>)
      do
      (<span style="color: #0000FF;">loop</span> for fname in (f-entries
                          dir
                          (<span style="color: #0000FF;">lambda</span> (x)
                            (string=  <span style="color: #008000;">"org"</span>  (file-name-extension x)))
                          t)
            do (<span style="color: #0000FF;">ignore-errors</span>
                 (princ (process-file fname)))))
</pre>
</div>

<p>
Now we need a configuration file:
</p>

<div class="org-src-container">

<pre class="src src-text"># Example configuration file

# where to save the index
IndexFile /Users/jkitchin/blogofile-jkitchin.github.com/_blog/index-org-headlines.swish-e

# index all tags for searching
UndefinedMetaTags auto
UndefinedXMLAttributes auto
</pre>
</div>


<p>
And we run the indexer, I did this in an actual shell. For some reason, it was not possible to run here. The output is pretty useful though, as it tells you what MetaNames are searchable.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -c swish-org-headlines.conf -S prog -i ./swish-org-headlines.el
</pre>
</div>

<pre class="example">
10:17 $ swish-e -c swish-org-headlines.conf -S prog -i ./swish-org-headlines.el
Indexing Data Source: "External-Program"
Indexing "./swish-org-headlines.el"
External Program found: ./swish-org-headlines.el
**Adding automatic MetaName 'headline' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'title' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'properties' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'file' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'blocked' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'categories' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'date' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'updated' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'category' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 18) (show-children))][link]]'
**Adding automatic MetaName 'points' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/writing-exams-in-orgmode.org") (goto-char 1391) (show-children))][link]]'
**Adding automatic MetaName 'tags' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 25) (show-children))][link]]'
**Adding automatic MetaName 'alltags' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 25) (show-children))][link]]'
**Adding automatic MetaName 'todo' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 1733) (show-children))][link]]'
**Adding automatic MetaName 'closed' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/why-org-mode.org") (goto-char 1733) (show-children))][link]]'
**Adding automatic MetaName 'timestamp_ia' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/pdfsync.org") (goto-char 28) (show-children))][link]]'
**Adding automatic MetaName 'id' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-to-docx-pandoc.org") (goto-char 5056) (show-children))][link]]'
**Adding automatic MetaName 'custom_id' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'calculation' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'volume' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'total_energy' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'stress' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 1311) (show-children))][link]]'
**Adding automatic MetaName 'priority' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 15327) (show-children))][link]]'
**Adding automatic MetaName 'export_title' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'export_author' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'export_file_name' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'export_date' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 506769) (show-children))][link]]'
**Adding automatic MetaName 'scheduled' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 516502) (show-children))][link]]'
**Adding automatic MetaName 'deadline' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 516502) (show-children))][link]]'
**Adding automatic MetaName 'votes' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 532031) (show-children))][link]]'
**Adding automatic MetaName 'timestamp' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 571125) (show-children))][link]]'
**Adding automatic MetaName 'clock' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 21059) (show-children))][link]]'
**Adding automatic MetaName 'level' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 46582) (show-children))][link]]'
**Adding automatic MetaName 'correct' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 46582) (show-children))][link]]'
**Adding automatic MetaName 'permalink' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61814) (show-children))][link]]'
**Adding automatic MetaName 'hint' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 340534) (show-children))][link]]'
**Adding automatic MetaName 'answer' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 355206) (show-children))][link]]'
**Adding automatic MetaName 'correct-answer' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 377210) (show-children))][link]]'
**Adding automatic MetaName 'post_filename' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 415454) (show-children))][link]]'
**Adding automatic MetaName 'ordered' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 423900) (show-children))][link]]'
**Adding automatic MetaName 'grade' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/add-subheadings-to-headings.org") (goto-char 2822) (show-children))][link]]'
**Adding automatic MetaName ':export_file_name:' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/add-properties-to-headings.org") (goto-char 2) (show-children))][link]]'
**Adding automatic MetaName 'firstname' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'lastname' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'email' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'affiliation' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-contacts/referee-contacts.org") (goto-char 155) (show-children))][link]]'
**Adding automatic MetaName 'lettergrade' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-report/Slim-Shady-HW1.org") (goto-char 29) (show-children))][link]]'
**Adding automatic MetaName 'difficulty' found in file '[[elisp:(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/problem-selection/problem-selection.org") (goto-char 1) (show-children))][link]]'
Removing very common words...
no words removed.
Writing main index...
Sorting words ...
Sorting 6,044 words alphabetically
Writing header ...
Writing index entries ...
  Writing word text: Complete
  Writing word hash: Complete
  Writing word data: Complete
6,044 unique words indexed.
4 properties sorted.
5,084 files indexed.  1,760,249 total bytes.  368,569 total words.
Elapsed time: 00:00:37 CPU time: 00:00:01
Indexing done!
</pre>


<p>
Ok, now for the proof in the approach!
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org-headlines.swish-e -w <span style="color: #BA36A5;">headline</span>=generating
</pre>
</div>

<p>
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/separate-bib.org") (goto-char 1) (show-children))">link</a> "separate-bib.org") (goto-char 1) (show-children))][link]]" 393
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 158456) (show-children))">link</a> "blog-2014.org") (goto-char 158456) (show-children))][link]]" 229
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 272383) (show-children))">link</a> "blog-2014.org") (goto-char 272383) (show-children))][link]]" 400
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 158456) (show-children))">link</a> "blog-2014.org") (goto-char 158456) (show-children))][link]]" 229
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 448965) (show-children))">link</a> "blog.org") (goto-char 448965) (show-children))][link]]" 389
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 575) (show-children))">link</a> "org-db.org") (goto-char 575) (show-children))][link]]" 204
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/org-db.org") (goto-char 575) (show-children))">link</a> "org-db.org") (goto-char 575) (show-children))][link]]" 204
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/separate-bib.org") (goto-char 1) (show-children))">link</a> "separate-bib.org") (goto-char 1) (show-children))][link]]" 393
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 272383) (show-children))">link</a> "blog-2014.org") (goto-char 272383) (show-children))][link]]" 400
.
</p>


<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org-headlines.swish-e -w <span style="color: #BA36A5;">todo</span>=TODO
</pre>
</div>

<p>
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 16933) (show-children))">link</a> "blog.org") (goto-char 16933) (show-children))][link]]" 342
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61231) (show-children))">link</a> "blog-2014.org") (goto-char 61231) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60802) (show-children))">link</a> "blog-2014.org") (goto-char 60802) (show-children))][link]]" 274
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60289) (show-children))">link</a> "blog-2014.org") (goto-char 60289) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61568) (show-children))">link</a> "blog-2014.org") (goto-char 61568) (show-children))][link]]" 246
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61231) (show-children))">link</a> "blog-2014.org") (goto-char 61231) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60802) (show-children))">link</a> "blog-2014.org") (goto-char 60802) (show-children))][link]]" 274
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 60289) (show-children))">link</a> "blog-2014.org") (goto-char 60289) (show-children))][link]]" 207
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 632875) (show-children))">link</a> "blog.org") (goto-char 632875) (show-children))][link]]" 266
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 529123) (show-children))">link</a> "blog.org") (goto-char 529123) (show-children))][link]]" 202
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 529087) (show-children))">link</a> "blog.org") (goto-char 529087) (show-children))][link]]" 206
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 518108) (show-children))">link</a> "blog.org") (goto-char 518108) (show-children))][link]]" 280
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org") (goto-char 30559) (show-children))">link</a> "blog.org") (goto-char 30559) (show-children))][link]]" 337
1000 <a href="(progn (find-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog-2014.org") (goto-char 61568) (show-children))">link</a> "blog-2014.org") (goto-char 61568) (show-children))][link]]" 246
.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
This could be super useful for a lot of different elements: headlines, src-blocks, links, tables, paragraphs are the main ones that come to mind. You could have pretty focused searches that go straight to the matches!</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[An xml representation of an org document for indexing with swish-e]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/07/04/An-xml-representation-of-an-org-document-for-indexing-with-swish-e" />
    <id>http://jkitchin.github.io/blog/2015/07/04/An-xml-representation-of-an-org-document-for-indexing-with-swish-e</id>
    <updated>2015-07-04T19:34:22Z</updated>
    <published>2015-07-04T11:49:23Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="search" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[An xml representation of an org document for indexing with swish-e]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/07/04/An-xml-representation-of-an-org-document-for-indexing-with-swish-e"><![CDATA[



<p>
Swish-e can index xml data, and enable searching by tag. Here we push our org-mode indexing idea a little further. Initially we indexed org files as text. Then, we exported it to html, and indexed the html. That enabled some richer searching. Now, we will create an xml representation of the org file for indexing. This will enable us to use a custom tag system and search for specific text in tables, or src-blocks, or in headlines, or for headlines with certain tags, todo state or properties.
</p>

<p>
Incidentally, this is a general strategy for indexing arbitrary files. You just make an xml representation of the file containing the data to be indexed, and use swish-e to index that xml.
</p>

<p>
Let us start with code to generate xml. I adapted this from some code in <a href="http://landoflisp.com">Land Of Lisp</a> . First, a function that simply prints a tag with attributes.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">print-tag</span> (name attrs <span style="color: #6434A3;">&amp;optional</span> closingp)
  <span style="color: #036A07;">"Print an xml tag with symbol NAME and ATTRS (a cons list of (attribute . value)).</span>
<span style="color: #036A07;">if CLOSINGP print the closing tag instead."</span>
  (format
   <span style="color: #008000;">"&lt;%s%s%s&gt;"</span>
   (<span style="color: #0000FF;">if</span> closingp <span style="color: #008000;">"/"</span> <span style="color: #008000;">""</span>)
   name
   (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">and</span> attrs (not closingp))
       (concat
        <span style="color: #008000;">" "</span>
        (mapconcat
         (<span style="color: #0000FF;">lambda</span> (x)
           (format <span style="color: #008000;">"%s=\"%s\""</span>
                   (car x)
                   (xml-escape-string (cdr x))))
         attrs
         <span style="color: #008000;">" "</span>))
     <span style="color: #008000;">""</span>)))

(print-tag 'html '((color . <span style="color: #008000;">"blue"</span>) (label . <span style="color: #008000;">"test"</span>)))
</pre>
</div>

<pre class="example">
&lt;html color="blue" label="test"&gt;
</pre>

<p>
XML tags almost always come in pairs. We define a macro to make this happen here. The macro prints the opening tag, evaluates the body, and prints the closing body. Note that the body may contain other tags, or a string. The string should be escaped to avoid illegal xml characters.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">tag</span> (name attributes <span style="color: #6434A3;">&amp;rest</span> body)
  `(format <span style="color: #008000;">"%s%s%s"</span>
           (print-tag ,name ,attributes nil)
           (concat
           ,@body)
           (print-tag ,name nil t)))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">example usage</span>
(<span style="color: #0000FF;">tag</span> <span style="color: #008000;">"xml"</span> '((test . <span style="color: #008000;">"id"</span>))
     (<span style="color: #0000FF;">tag</span> <span style="color: #008000;">"body"</span> nil
          (<span style="color: #0000FF;">tag</span> <span style="color: #008000;">"p"</span> nil (xml-escape-string <span style="color: #008000;">"paragraph &amp; &lt; 1"</span>))
          (<span style="color: #0000FF;">tag</span> <span style="color: #008000;">"p"</span> nil <span style="color: #008000;">"paragraph 2"</span>)))
</pre>
</div>

<pre class="example">
&lt;xml test="id"&gt;&lt;body&gt;&lt;p&gt;paragraph &amp;amp; &amp;lt; 1&lt;/p&gt;&lt;p&gt;paragraph 2&lt;/p&gt;&lt;/body&gt;&lt;/xml&gt;
</pre>

<p>
Now, we can use this to get an xml representation of the source blocks, e.g.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(mapconcat 'identity
           (org-element-map
               (org-element-parse-buffer)
               'src-block
             (<span style="color: #0000FF;">lambda</span> (element)
               (<span style="color: #0000FF;">tag</span>
                'src-block
                `((language . ,(org-element-property <span style="color: #006FE0;">:language</span> element)))
                (<span style="color: #0000FF;">tag</span> 'contents ()
                     (xml-escape-string
                      (org-element-property <span style="color: #006FE0;">:value</span> element))))))
           <span style="color: #008000;">""</span>)
</pre>
</div>

<pre class="example">
&lt;src-block language="emacs-lisp"&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)
  &amp;quot;Print an xml tag with symbol NAME and ATTRS (a cons list of (attribute . value)).
if CLOSINGP print the closing tag instead.&amp;quot;
  (format
   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;
   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)
   name
   (if (and attrs (not closingp))
       (concat
	&amp;quot; &amp;quot;
	(mapconcat
	 (lambda (x)
	   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot;
		   (car x)
		   (xml-escape-string (cdr x))))
	 attrs
	 &amp;quot; &amp;quot;))
     &amp;quot;&amp;quot;)))

(print-tag &amp;apos;html &amp;apos;((color . &amp;quot;blue&amp;quot;) (label . &amp;quot;test&amp;quot;)))
&lt;/contents&gt;&lt;/src-block&gt;&lt;src-block language="emacs-lisp"&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)
  `(format &amp;quot;%s%s%s&amp;quot;
	   (print-tag ,name ,attributes nil)
           (concat
	   ,@body)
	   (print-tag ,name nil t)))

(tag &amp;quot;xml&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))
     (tag &amp;quot;body&amp;quot; nil
	  (tag &amp;quot;p&amp;quot; nil (xml-escape-string &amp;quot;paragraph &amp;amp; &amp;lt; 1&amp;quot;))
	  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))
&lt;/contents&gt;&lt;/src-block&gt;&lt;src-block language="emacs-lisp"&gt;&lt;contents&gt;(mapconcat &amp;apos;identity
	   (org-element-map
	       (org-element-parse-buffer)
	       &amp;apos;src-block
	     (lambda (element)
	       (tag
		&amp;apos;src-block
		`((language . ,(org-element-property :language element)))
		(tag &amp;apos;contents ()
		     (xml-escape-string
		      (org-element-property :value element))))))
	   &amp;quot;&amp;quot;)
&lt;/contents&gt;&lt;/src-block&gt;&lt;src-block language="emacs-lisp"&gt;&lt;contents&gt;(let ((xml (tag &amp;apos;root `((filename . ,(buffer-file-name))
			(indexed-on . ,(current-time-string)))
		;; map the headlines
		(mapconcat
		 &amp;apos;identity
		 (org-map-entries
		  (lambda ()
		    (let* ((tags (org-get-tags))
			   (heading-components (org-heading-components))
			   (title (nth 4 heading-components))
			   (level (nth 0 heading-components))
			   (properties (org-entry-properties))
			   (elem (org-element-at-point))
			   (bp (org-element-property :contents-begin elem))
			   (ep (org-element-property :contents-end elem))
			   (content (buffer-substring bp ep)))
		      (tag &amp;apos;heading `((level . ,level))
			   (tag &amp;apos;title () (xml-escape-string title))
			   (tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))
			   (tag &amp;apos;properties ()
				(mapconcat
				 (lambda (x)
				   (tag &amp;apos;property `((label . (car ,x))) (cdr x)))
				 properties
				 &amp;quot;&amp;quot;))
			   (tag &amp;apos;content ()
				(format &amp;quot;%s&amp;quot; (xml-escape-string content)))))))
		 &amp;quot;&amp;quot;)

		;; map specific element types
		(tag &amp;apos;source-blocks ()
		     (mapconcat
		      &amp;apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &amp;apos;src-block
			(lambda (element)
			  (tag &amp;apos;src-block
			       `((language .
					   ,(org-element-property
					     :language element)))
			       (tag &amp;apos;contents ()
				    (xml-escape-string
				     (org-element-property :value element)))))) &amp;quot;&amp;quot;))

		(tag &amp;apos;tables ()
		     (mapconcat
		      &amp;apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &amp;apos;table
			(lambda (element)
			  (tag &amp;apos;table ()
			       (when (org-element-property :caption element)
				 (tag &amp;apos;caption ()
				(caaar (org-element-property :caption element))))
			       (xml-escape-string
				(buffer-substring
				 (org-element-property :contents-begin element)
				 (org-element-property :contents-end element))))))
		      &amp;quot;&amp;quot;))

		(tag &amp;apos;paragraphs ()
		     (mapconcat
		      &amp;apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &amp;apos;paragraph
			(lambda (element)
			  (tag &amp;apos;paragraph ()
			       (xml-escape-string
				(buffer-substring
				 (org-element-property :contents-begin element)
				 (org-element-property :contents-end element))))))
		      &amp;quot;&amp;quot;
		      ))
		)))
  (with-temp-file &amp;quot;org2xml.xml&amp;quot;
    (insert xml)))
&lt;/contents&gt;&lt;/src-block&gt;&lt;src-block language="emacs-lisp"&gt;&lt;contents&gt;(xml-parse-file &amp;quot;org2xml.xml&amp;quot;)
&lt;/contents&gt;&lt;/src-block&gt;
</pre>

<p>
So, finally we can map the entries to get some information about them, e.g. the tags, properties, todo state, etc&#x2026; Then we create xml representing all that information so we can have a more precise search. Instead of looking for a word, we can specify that the word be in a property for example. Then, we make xml representations of the tables, src-blocks and paragraphs.
</p>

<p>
I am going to follow the example <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/07/03/Using-swish-e-to-index-org-files-as-html/">here</a> that we worked out before on html and create a filter function that takes an org-file and spits out xml at the command line.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">:<span style="color: #8D8D84;">;</span><span style="color: #8D8D84; font-style: italic;">exec emacs -batch -l $0 -f main "$@"</span>
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">org</span>)
(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">xml</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">print-tag</span> (name attrs <span style="color: #6434A3;">&amp;optional</span> closingp)
  <span style="color: #036A07;">"Print an xml tag with symbol NAME and ATTRS (a cons list of (attribute . value)).</span>
<span style="color: #036A07;">if CLOSINGP print the closing tag instead.</span>
<span style="color: #036A07;">You should use `</span><span style="color: #D0372D;">xml-escape-string</span><span style="color: #036A07;">' on text going into the attributes to avoid errors."</span>
  (format
   <span style="color: #008000;">"&lt;%s%s%s&gt;"</span>
   (<span style="color: #0000FF;">if</span> closingp <span style="color: #008000;">"/"</span> <span style="color: #008000;">""</span>)
   name
   (<span style="color: #0000FF;">if</span> (<span style="color: #0000FF;">and</span> attrs (not closingp))
       (concat
        <span style="color: #008000;">" "</span>
        (mapconcat
         (<span style="color: #0000FF;">lambda</span> (x)
           (format <span style="color: #008000;">"%s=\"%s\""</span> (car x) (cdr x)))
           attrs
           <span style="color: #008000;">" "</span>))
     <span style="color: #008000;">""</span>)))

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">tag</span> (name attributes <span style="color: #6434A3;">&amp;rest</span> body)
  `(format <span style="color: #008000;">"%s%s%s"</span>
           (print-tag ,name ,attributes nil)
           (concat
           ,@body)
           (print-tag ,name nil t)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">main</span> ()
  (find-file (car command-line-args-left))
  (princ (<span style="color: #0000FF;">tag</span> 'root `((filename . ,(buffer-file-name))
                      (indexed-on . ,(current-time-string)))
              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">map the headlines</span>
              (mapconcat
               'identity
               (org-map-entries
                (<span style="color: #0000FF;">lambda</span> ()
                  (<span style="color: #0000FF;">let*</span> ((tags (org-get-tags))
                         (heading-components (org-heading-components))
                         (todo (nth 2 heading-components))
                         (headline (nth 4 heading-components))
                         (thislevel (nth 0 heading-components))
                         (properties (org-entry-properties)))
                    (<span style="color: #0000FF;">tag</span> 'heading `((level . ,thislevel))
                         (<span style="color: #0000FF;">tag</span> 'headline () (xml-escape-string headline))
                         (<span style="color: #0000FF;">tag</span> 'tags () (mapconcat 'identity tags <span style="color: #008000;">" "</span>))
                         (<span style="color: #0000FF;">when</span> todo
                           (<span style="color: #0000FF;">tag</span> 'todo () todo))
                         (<span style="color: #0000FF;">tag</span> 'properties ()
                              (mapconcat
                               (<span style="color: #0000FF;">lambda</span> (x)
                                 (<span style="color: #0000FF;">tag</span> 'property `((name . ,(xml-escape-string (car x))))
                                      (xml-escape-string (cdr x))))
                               properties
                               <span style="color: #008000;">""</span>))))))
               <span style="color: #008000;">""</span>)

              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get file keywords, TITLE, authors, etc...</span>
              (<span style="color: #0000FF;">tag</span> 'file-keywords ()
                   (mapconcat 'identity
                              (org-element-map (org-element-parse-buffer 'element) 'keyword
                                (<span style="color: #0000FF;">lambda</span> (keyword)
                                  (<span style="color: #0000FF;">tag</span> (xml-escape-string (org-element-property <span style="color: #006FE0;">:key</span> keyword)) ()
                                       (xml-escape-string (org-element-property <span style="color: #006FE0;">:value</span> keyword)))))
                              <span style="color: #008000;">""</span>))

              <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">map specific element types</span>
              (<span style="color: #0000FF;">tag</span> 'source-blocks ()
                   (mapconcat
                    'identity
                    (org-element-map
                        (org-element-parse-buffer)
                        'src-block
                      (<span style="color: #0000FF;">lambda</span> (element)
                        (<span style="color: #0000FF;">tag</span> 'src-block
                             `((language .
                                         ,(org-element-property
                                           <span style="color: #006FE0;">:language</span> element)))
                             (<span style="color: #0000FF;">tag</span> 'contents ()
                                  (xml-escape-string
                                   (org-element-property <span style="color: #006FE0;">:value</span> element)))))) <span style="color: #008000;">""</span>))

              (<span style="color: #0000FF;">tag</span> 'tables ()
                   (mapconcat
                    'identity
                    (org-element-map
                        (org-element-parse-buffer)
                        'table
                      (<span style="color: #0000FF;">lambda</span> (element)
                        (<span style="color: #0000FF;">tag</span> 'table ()
                             (<span style="color: #0000FF;">when</span> (org-element-property <span style="color: #006FE0;">:caption</span> element)
                               (<span style="color: #0000FF;">tag</span> 'caption ()
                                    (format
                                     <span style="color: #008000;">"%s"</span>
                                     (org-element-property
                                      <span style="color: #006FE0;">:caption</span> element))))
                             (xml-escape-string
                              (buffer-substring
                               (org-element-property <span style="color: #006FE0;">:contents-begin</span> element)
                               (org-element-property <span style="color: #006FE0;">:contents-end</span> element))))))
                    <span style="color: #008000;">""</span>))

              (<span style="color: #0000FF;">tag</span> 'paragraphs ()
                   (mapconcat
                    'identity
                    (org-element-map
                        (org-element-parse-buffer)
                        'paragraph
                      (<span style="color: #0000FF;">lambda</span> (element)
                        (<span style="color: #0000FF;">tag</span> 'paragraph ()
                             (xml-escape-string
                              (buffer-substring
                               (org-element-property <span style="color: #006FE0;">:contents-begin</span> element)
                               (org-element-property <span style="color: #006FE0;">:contents-end</span> element))))))
                    <span style="color: #008000;">""</span>
                    )))))
</pre>
</div>

<p>
We could do more, e.g. links, or images, but this is pretty good for now. Now, let's configure a swish indexer. We instruct swish-e to use some metanames, and attributes so we can search on them later.
</p>

<div class="org-src-container">

<pre class="src src-text"># Example configuration file

# Tell Swish-e what to directories to index
IndexDir /Users/jkitchin/blogofile-jkitchin.github.com/_site

# where to save the index
IndexFile /Users/jkitchin/blogofile-jkitchin.github.com/_blog/index-org2xml.swish-e

# What to index
IndexOnly .org

# Tell Swish-e that .txt files are to use the HTML parser.
IndexContents XML* .org

FileFilter .org /Users/jkitchin/blogofile-jkitchin.github.com/_blog/org2xml.el

# index all tags for searching
UndefinedMetaTags auto
UndefinedXMLAttributes auto
</pre>
</div>

<p>
And now, run the index command. I did this at the command line. There might be some problems with the script as there were some warnings about non-zero exits, but there was only a few so we ignore them for now.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -c swish-org2xml.conf
</pre>
</div>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Examples of searching for org-files</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Files with words in the filename</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Here we look for filenames with the word "Extracting" in them.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w root.filename=Extracting
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: root.filename=Extracting
# Removed stopwords:
# Number of hits: 2
# Search time: 0.000 seconds
# Run time: 0.007 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/02/19/Extracting-bibtex-file-from-an-org-buffer.org "Extracting-bibtex-file-from-an-org-buffer.org" 6094
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/media/2014-02-19-Extracting-bibtex-file-from-an-org-buffer/notes.org "notes.org" 195515
.
</pre>

<p>
Or, thanks to the date being in the path, we can find by year, How about July of 2012?
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w root.filename=<span style="color: #008000;">"(2012/07)"</span>
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: root.filename=(2012/07)
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.007 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2012/07/15/Professor-Kitchin-was-awarded-the-Presidential-Early-Career-Award-for-Scientists-and-Engineers-(PECASE).org "Professor-Kitchin-was-awarded-the-Presidential-Early-Career-Award-for-Scientists-and-Engineers-(PECASE).org" 311
.
</pre>

<p>
Interesting we have to use the parentheses here.
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> <span class="done DONE">DONE</span> Files with headlines containing a word</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Now, lets find documents with "Compiled" in a heading title with level=2
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w heading.level=2 <span style="color: #BA36A5;">title</span>=Compiled -m5
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: heading.level=2 title=Compiled
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.007 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/media/2014-07-12-Org-mode-is-awesome/why-org-mode.org "why-org-mode.org" 13522
.
</pre>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Headlines marked TODO</h3>
<div class="outline-text-3" id="text-1-3">
<p>
We can find documents with headlines marked TODO:
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e  -w <span style="color: #008000;">"todo=TODO"</span> -m 5
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: todo=TODO
# Removed stopwords:
# Number of hits: 12
# Search time: 0.000 seconds
# Run time: 0.008 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/media/2014-01-27-Clocking-your-time-in-org-mode/blog.org "blog.org" 134160
624 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/02/16/A-dynamic-snippet-for-a-task-due-7-days-from-now.org "A-dynamic-snippet-for-a-task-due-7-days-from-now.org" 2587
425 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/02/16/END.org "END.org" 1531
269 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2015/02/01/Handling-multiple-selections-in-helm.org "Handling-multiple-selections-in-helm.org" 3290
269 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2015/01/30/More-adventures-in-helm---more-than-one-action.org "More-adventures-in-helm---more-than-one-action.org" 3236
.
</pre>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> For a table</h3>
<div class="outline-text-3" id="text-1-4">
<p>
so2-capacity-1
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w <span style="color: #BA36A5;">table</span>=<span style="color: #008000;">"energy"</span>
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: table=energy
# Removed stopwords:
# Number of hits: 2
# Search time: 0.000 seconds
# Run time: 0.007 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/08/21/Using-org-entries-like-a-database.org "Using-org-entries-like-a-database.org" 53035
633 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/07/04/Estimating-uncertainties-in-equations-of-state.org "Estimating-uncertainties-in-equations-of-state.org" 3117
.
</pre>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5"><span class="section-number-3">1.5</span> Tagged headlines</h3>
<div class="outline-text-3" id="text-1-5">
<p>
Find entries with a "slide" tag.
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w <span style="color: #008000;">"tags=slide"</span>
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: tags=slide
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.009 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/media/2014-07-12-Org-mode-is-awesome/why-org-mode.org "why-org-mode.org" 13522
.
</pre>

<p>
Evidently there is one file where I talk about slides in org-show.
</p>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6"><span class="section-number-3">1.6</span> Headlines with a property</h3>
<div class="outline-text-3" id="text-1-6">
<p>
Here I find documents with headlines that have thermodynamics in the property "categories".
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w <span style="color: #008000;">"property.label=categories property=thermodynamics"</span>
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: property.label=categories property=thermodynamics
# Removed stopwords:
# Number of hits: 10
# Search time: 0.000 seconds
# Run time: 0.009 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/01/Water-gas-shift-equilibria-via-the-NIST-Webbook.org "Water-gas-shift-equilibria-via-the-NIST-Webbook.org" 10789
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/03/01/Gibbs-energy-minimization-and-the-NIST-webbook.org "Gibbs-energy-minimization-and-the-NIST-webbook.org" 5441
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/03/01/Finding-equilibrium-composition-by-direct-minimization-of-Gibbs-free-energy-on-mole-numbers.org "Finding-equilibrium-composition-by-direct-minimization-of-Gibbs-free-energy-on-mole-numbers.org" 6155
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/27/Reading-parameter-database-text-files-in-python.org "Reading-parameter-database-text-files-in-python.org" 3947
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/18/The-Gibbs-free-energy-of-a-reacting-mixture-and-the-equilibrium-composition.org "The-Gibbs-free-energy-of-a-reacting-mixture-and-the-equilibrium-composition.org" 8230
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/18/Calculating-a-bubble-point-pressure-of-a-mixture.org "Calculating-a-bubble-point-pressure-of-a-mixture.org" 3203
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/15/The-equal-area-method-for-the-van-der-Waals-equation.org "The-equal-area-method-for-the-van-der-Waals-equation.org" 5737
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/12/Using-constrained-optimization-to-find-the-amount-of-each-phase-present.org "Using-constrained-optimization-to-find-the-amount-of-each-phase-present.org" 5210
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/02/05/Constrained-minimization-to-find-equilibrium-compositions.org "Constrained-minimization-to-find-equilibrium-compositions.org" 5666
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/09/23/Generating-an-atomic-stoichiometric-matrix.org "Generating-an-atomic-stoichiometric-matrix.org" 3487
.
</pre>

<p>
That seems about right, according to <a href="http://kitchingroup.cheme.cmu.edu/categories.html">http://kitchingroup.cheme.cmu.edu/categories.html</a> there are 9 documents. I am not sure why they don't totally agree, but I can live with it.
</p>

<p>
Here are documents containing headlines with the property "TOTAL_ENERGY"
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w property.label=TOTAL_ENERGY
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: property.label=TOTAL_ENERGY
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.008 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/08/21/Using-org-entries-like-a-database.org "Using-org-entries-like-a-database.org" 53035
.
</pre>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7"><span class="section-number-3">1.7</span> Documents with a Python source block containing a word</h3>
<div class="outline-text-3" id="text-1-7">
<p>
Find org files with diffusion in a python source block.
</p>
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w src-block.language=python -w src-block=diffusion
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: src-block.language=python src-block=diffusion
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.011 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2013/04/02/Transient-diffusion---partial-differential-equations.org "Transient-diffusion---partial-differential-equations.org" 3660
.
</pre>
</div>
</div>

<div id="outline-container-sec-1-8" class="outline-3">
<h3 id="sec-1-8"><span class="section-number-3">1.8</span> An org-file with a UUID</h3>
<div class="outline-text-3" id="text-1-8">
<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w  <span style="color: #BA36A5;">property</span>=<span style="color: #008000;">"(38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9)"</span>
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: property=(38FCCF3D-7FC5-49BF-BB77-486BBAA17CD9)
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.007 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/org/2014/11/23/Machine-gradable-quizzes-in-emacs+org-modex.org "Machine-gradable-quizzes-in-emacs+org-modex.org" 5743
.
</pre>

<p>
Interesting, again the parentheses are necessary to find a match. I think because of the dashes. The next example is similar, but finds an entry with that bibtex key in a CUSTOM_ID property.
</p>

<div class="org-src-container">

<pre class="src src-sh">swish-e -f index-org2xml.swish-e -w  <span style="color: #BA36A5;">property</span>=<span style="color: #008000;">"(mantina-2008-first-princ)"</span>
</pre>
</div>

<pre class="example">
# SWISH format: 2.4.7
# Search words: property=(mantina-2008-first-princ)
# Removed stopwords:
# Number of hits: 1
# Search time: 0.000 seconds
# Run time: 0.010 seconds
1000 /Users/jkitchin/blogofile-jkitchin.github.com/_site/media/2014-02-19-Extracting-bibtex-file-from-an-org-buffer/notes.org "notes.org" 195515
.
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary</h2>
<div class="outline-text-2" id="text-2">
<p>
This is pretty cool. There are still some bugs to work out in the indexing filter I think, but this demonstrates you can index org-files, and have pretty refined searches to find your files. There is still some thinking to do on how to schedule an incremental indexing, and whether we need more or better metanames. The indexing is not fast, but that is probably because I am running this through a FileFilter, rather than the -s prog option in swish-e. This is super promising to me though. Imagine building an agenda from files found with TODO headlines in them; a global todo list! Or, grabbing contacts from wherever they are.  No more losing files you have not used in a while. Find all documents containing a citation. With some extra work, you could index links, citations, <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/07/02/Pyparsing-meets-Emacs-to-find-chemical-formulas/">chemical formulas</a> , or other types of identifiable content.
</p>

<p>
The logical conclusion of this work might be an ox-swish-e-xml export engine to render the org-file into xml, rather than the script I used here. It would be really great to get some refined output, e.g. rather than just get matching documents, get location information so you could open the document to the matching element. That might be out of reach for swish-e, but could be in reach for other programs like Sphinx that are more integrated with a database. There is a very interesting project here: <a href="https://github.com/wvxvw/sphinx-mode">https://github.com/wvxvw/sphinx-mode</a> to integrate org-mode with the Sphinx search (<a href="http://sphinxsearch.com">http://sphinxsearch.com</a> ) engine.
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/07/04/An-xml-representation-of-an-org-document-for-indexing-with-swish-e.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
