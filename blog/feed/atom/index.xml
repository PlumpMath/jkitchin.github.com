<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-08-26T23:27:32Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using Twitter cards for better tweets]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/08/26/Using-Twitter-cards-for-better-tweets" />
    <id>http://jkitchin.github.io/blog/2016/08/26/Using-Twitter-cards-for-better-tweets</id>
    <updated>2016-08-26T16:32:40Z</updated>
    <published>2016-08-26T15:56:18Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="publication" />
    <summary type="html"><![CDATA[Using Twitter cards for better tweets]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/08/26/Using-Twitter-cards-for-better-tweets"><![CDATA[


<p>
<img src="/media/ss-vdw.png"> 
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">thirumalai-2015-pt-pd</span>,
  <span style="color: #BA36A5;">author</span> =       "Hari Thirumalai and John R. Kitchin",
  <span style="color: #BA36A5;">title</span> =        {The Role of Vdw Interactions in Coverage Dependent Adsorption
                  Energies of Atomic Adsorbates on Pt(111) and Pd(111)},
  <span style="color: #BA36A5;">journal</span> =      "Surface Science ",
  <span style="color: #BA36A5;">pages</span> =        " - ",
  <span style="color: #BA36A5;">year</span> =         2015,
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1016/j.susc.2015.10.001</span>},
  <span style="color: #BA36A5;">url</span> =
                  "http://www.sciencedirect.com/science/article/pii/S0039602815003052",
  <span style="color: #BA36A5;">issn</span> =         "0039-6028",
}
</pre>
</div>

<p>
See it here: <a href="http://www.sciencedirect.com/science/article/pii/S0039602815003052">http://www.sciencedirect.com/science/article/pii/S0039602815003052</a>.
</p>

<p>
The main goal of this post is to test run using a <a href="https://dev.twitter.com/cards/types/summary-large-image">Twitter card</a> to make better tweets about publications.
</p>

<p>
This post did not work quite like I anticipated, mostly because of the way I publish my blog which focuses only on the HTML body. The meta tags that are needed for Twitter do not seem to get put in the header as needed. If I do a regular org export with HTML_HEAD options to get this page: <a href="http://kitchingroup.cheme.cmu.edu/publications/twitter-card.html">http://kitchingroup.cheme.cmu.edu/publications/twitter-card.html</a>, it did work. The page is pretty bare, but it could be embellished without much work. 
</p>

<p>
Tweeting that URL led to this tweet: 
</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Test tweet with a twitter card: <a href="https://t.co/TagjgTgFmZ">https://t.co/TagjgTgFmZ</a></p>&mdash; John Kitchin (@johnkitchin) <a href="https://twitter.com/johnkitchin/status/769267071645540352">August 26, 2016</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>
On Twitter, this showed an image of the picture on the page, and linked directly to the page I made. The image is sized a little large and doesn't fit in card quite right, but this is probably fixable. This whole process could be smoothed out a lot with a custom export to get the twitter meta tags in the right place, and maybe provide links to bibtex files, analytics, etc. Sounds like a fun project ;) 
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/08/26/Using-Twitter-cards-for-better-tweets.org">org-mode source</a></p>
<p>Org-mode version = 8.3.5</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Automated bibtex entry tweeting]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/08/25/Automated-bibtex-entry-tweeting" />
    <id>http://jkitchin.github.io/blog/2016/08/25/Automated-bibtex-entry-tweeting</id>
    <updated>2016-08-25T14:09:50Z</updated>
    <published>2016-08-25T12:14:31Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="twitter" />
    <category scheme="http://jkitchin.github.io/blog" term="bibtex" />
    <summary type="html"><![CDATA[Automated bibtex entry tweeting]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/08/25/Automated-bibtex-entry-tweeting"><![CDATA[


<p>
The goal in this post is to develop an elisp function that will tweet a bibtex entry. What I want is to be on a bibtex entry, and run a command that will generate a tweet and tweet it. Here is an example bibtex entry I will use in this post. Clearly, I couldn't simply tweet the entry, it is too long. What I want instead is to generate a picture of a formatted citation, to make a gist out of the bibtex entry so we can link to it, and then to provide links in the tweet to the doi, and the bibtex entry gist. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect <span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>)
  (goto-char (point-min))
  (re-search-forward <span style="color: #008000;">"kitchin-2016-autom-data,"</span>)
  (bibtex-copy-entry-as-kill)
  (<span style="color: #0000FF;">with-temp-buffer</span>
    (bibtex-yank 1)
    (buffer-string)))
</pre>
</div>

<p>
First, we tackle making an image. Emacs has some capability to generate svg, and we can readily convert that to png for the tweet. Here we just go to the entry, and then generate a png. I build off the citation capability of org-ref to generate a pretty reasonably formatted entry. It isn't perfect; the volume is missing in the entry, so there is a blank space between two commas, but this is good enough for me. Note we need a png for twitter. It appears you cannot upload svg yet.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((entry (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect <span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>)
                (goto-char (point-min))
                (re-search-forward <span style="color: #008000;">"kitchin-2016-autom-data,"</span>)
                (bibtex-beginning-of-entry)
                (bibtex-parse-entry t)))
       (formatted-entry (orhc-formatted-citation entry))
       (lines (<span style="color: #0000FF;">with-temp-buffer</span>
                (insert formatted-entry)
                (fill-paragraph)
                (split-string  (buffer-string) <span style="color: #008000;">"\n"</span>)))
       (svg (svg-create 500 (* 20 (length lines)))))

  (<span style="color: #0000FF;">loop</span> for i from 0
        for line in lines
        do
        (svg-text svg line
                  <span style="color: #006FE0;">:font-size</span> <span style="color: #008000;">"12"</span>
                  <span style="color: #006FE0;">:stroke</span> <span style="color: #008000;">"black"</span>
                  <span style="color: #006FE0;">:x</span> 0
                  <span style="color: #006FE0;">:y</span> (+ 15 (* i 15))
                  <span style="color: #006FE0;">:stroke-width</span> 0.3))

  (<span style="color: #0000FF;">with-temp-file</span> <span style="color: #008000;">"authoring.svg"</span>
    (svg-print svg)))

(shell-command <span style="color: #008000;">"convert authoring.svg authoring.png"</span>)
</pre>
</div>

<p>
<img src="/media/authoring.png"> 
</p>

<p>
It is easy enough to get the doi, and generate the url to it.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((entry (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect <span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>)
                (goto-char (point-min))
                (re-search-forward <span style="color: #008000;">"kitchin-2016-autom-data,"</span>)
                (bibtex-beginning-of-entry)
                (bibtex-parse-entry t))))
  (format <span style="color: #008000;">"http://dx.doi.org/%s"</span> (cdr (assoc <span style="color: #008000;">"doi"</span> entry ))))
</pre>
</div>

<p>
Next, we will put the entry as a gist on Github, so we can provide a link to it. I use the gist.el package, and here just do some trickery to put the entry in a temp-file named by the key so that the gist has a nice name. This returns the url to the gist, which we would want to incorporate into a tweet.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect <span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>)
  (goto-char (point-min))
  (re-search-forward <span style="color: #008000;">"kitchin-2016-autom-data,"</span>)
  (<span style="color: #0000FF;">save-restriction</span>
    (bibtex-narrow-to-entry)
    (bibtex-beginning-of-entry)
    (<span style="color: #0000FF;">let*</span> ((entry-string (buffer-string))
           (entry (bibtex-parse-entry))
           (key (cdr (assoc <span style="color: #008000;">"=key="</span> entry)))
           (tfile (expand-file-name (format <span style="color: #008000;">"%s.bib"</span> key) temporary-file-directory)))
      (<span style="color: #0000FF;">with-temp-file</span> tfile
        (insert entry-string))
      (<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect tfile) 
        (gist-buffer)))
    (<span style="color: #0000FF;">with-temp-buffer</span>
      (yank)
      (buffer-string))))
</pre>
</div>


<p>
Ok, All the pieces are in place. The only piece left is creating the tweet, and tweeting it. I couldn't see an obvious way to do this with twittering mode, since I didn't see where to add an image. There is a <a href="https://pypi.python.org/pypi/TwitterAPI/2.4.2">Python library</a> for this though, and it looks pretty easy to use. Here is an example usage. 
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> TwitterAPI <span style="color: #0000FF;">import</span> TwitterAPI
<span style="color: #0000FF;">from</span> twitter_secrets <span style="color: #0000FF;">import</span> CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET

<span style="color: #BA36A5;">api</span> = TwitterAPI(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET)
<span style="color: #006FE0;">file</span> = <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'authoring.png'</span>, <span style="color: #008000;">'rb'</span>)
<span style="color: #BA36A5;">data</span> = <span style="color: #006FE0;">file</span>.read()
<span style="color: #BA36A5;">r</span> = api.request(<span style="color: #008000;">'statuses/update_with_media'</span>, {<span style="color: #008000;">'status'</span>:<span style="color: #008000;">'A test tweet using the TwitterAPI with an image.'</span>}, {<span style="color: #008000;">'media[]'</span>:data})
<span style="color: #0000FF;">print</span>(r.status_code)
</pre>
</div>

<p>
200
</p>

<p>
It will be a tad hacky, but the script is so simple we can just make a template, and run it. We need to do these things: 1) make the image, 2) make the gist 3) format and send the tweet. Here is the elisp function to do that.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">tweet-bibtex</span> ()
  <span style="color: #036A07;">"Tweet the bibtex entry at point."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (bibtex-beginning-of-entry)
  (bibtex-set-field <span style="color: #008000;">"tweeted"</span> (current-time-string))

  (<span style="color: #0000FF;">let*</span> ((entry-string (<span style="color: #0000FF;">save-restriction</span>
                         (bibtex-beginning-of-entry)
                         (bibtex-narrow-to-entry)
                         (buffer-substring-no-properties (point-min) (point-max))))
         (entry (bibtex-parse-entry t))
         (key (cdr (assoc <span style="color: #008000;">"=key="</span> entry)))
         (doi (cdr (assoc <span style="color: #008000;">"doi"</span> entry)))
         (svg-file (expand-file-name (format <span style="color: #008000;">"%s.svg"</span> key) temporary-file-directory))
         (png-file (expand-file-name (format <span style="color: #008000;">"%s.png"</span> key) temporary-file-directory))
         (bib-file (expand-file-name (format <span style="color: #008000;">"%s.bib"</span> key) temporary-file-directory))
         (py-file (expand-file-name (format <span style="color: #008000;">"%s.py"</span> key) temporary-file-directory))
         (formatted-entry (orhc-formatted-citation entry))
         (lines (<span style="color: #0000FF;">with-temp-buffer</span>
                  (insert formatted-entry)
                  (fill-paragraph)
                  (split-string  (buffer-string) <span style="color: #008000;">"\n"</span>)))
         (svg (svg-create 500 (* 20 (length lines))))
         (tweet (read-string <span style="color: #008000;">"Tweet: "</span>))
         gist-url
         full-tweet) 

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">delete buffers and files</span>
    (<span style="color: #0000FF;">loop</span> for buf in (list (concat key <span style="color: #008000;">".bib"</span>)
                           (concat key <span style="color: #008000;">".png"</span>)
                           (concat key <span style="color: #008000;">".svg"</span>)
                           (concat key <span style="color: #008000;">".py"</span>))
          do 
          (<span style="color: #0000FF;">when</span> (get-buffer buf) 
            (kill-buffer (get-buffer buf))))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Step 1 make the image</span>
    (<span style="color: #0000FF;">loop</span> for i from 0
          for line in lines
          do
          (svg-text svg line
                    <span style="color: #006FE0;">:font-size</span> <span style="color: #008000;">"12"</span>
                    <span style="color: #006FE0;">:stroke</span> <span style="color: #008000;">"black"</span>
                    <span style="color: #006FE0;">:x</span> 0
                    <span style="color: #006FE0;">:y</span> (+ 15 (* i 15))
                    <span style="color: #006FE0;">:stroke-width</span> 0.3))

    (<span style="color: #0000FF;">with-temp-file</span> svg-file
      (svg-print svg))

    (shell-command (format <span style="color: #008000;">"convert %s %s"</span> svg-file png-file))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Step 2, make the gist. Make a temp-file so the gist has a reasonable name</span>
    (<span style="color: #0000FF;">with-temp-file</span> bib-file
      (insert entry-string))

    (<span style="color: #0000FF;">let</span> ((bib-buffer (find-file-noselect bib-file)))
      (<span style="color: #0000FF;">with-current-buffer</span> bib-buffer
        (gist-buffer))
      (kill-buffer bib-buffer))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">get url off clipboard</span>
    (<span style="color: #0000FF;">setq</span> gist-url (<span style="color: #0000FF;">with-temp-buffer</span>
                     (yank)
                     (buffer-string)))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Format and send the tweet:</span>
    (<span style="color: #0000FF;">setq</span> full-tweet (format <span style="color: #008000;">"#publication %s\nhttp://dx.doi.org/%s\nbibtex: %s"</span> tweet doi gist-url))

    (<span style="color: #0000FF;">with-temp-file</span> py-file
      (insert (format <span style="color: #008000;">"from TwitterAPI import TwitterAPI</span>
<span style="color: #008000;">from twitter_secrets import CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET</span>

<span style="color: #008000;">api = TwitterAPI(CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN_KEY, ACCESS_TOKEN_SECRET)</span>
<span style="color: #008000;">file = open('%s', 'rb')</span>
<span style="color: #008000;">data = file.read()</span>
<span style="color: #008000;">r = api.request('statuses/update_with_media', {'status':'''%s'''}, {'media[]':data})"</span>
                      png-file
                      full-tweet)))

    (<span style="color: #0000FF;">if</span> (= 0 (shell-command (format <span style="color: #008000;">"python %s"</span> py-file)))
        (message <span style="color: #008000;">"%s"</span> full-tweet)
      (message <span style="color: #008000;">"tweet failed ;("</span>))))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Now, try it out.</span>
(<span style="color: #0000FF;">with-current-buffer</span> (find-file-noselect <span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>)
  (goto-char (point-min))
  (re-search-forward <span style="color: #008000;">"kitchin-2016-autom-data,"</span>)
  (tweet-bibtex))
</pre>
</div>

<p>
You can see what this tweet looks like here:
</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/publication?src=hash">#publication</a> I tweeted this from a bibtex file.<a href="https://t.co/NGVlRGqKSJ">https://t.co/NGVlRGqKSJ</a><br>bibtex: <a href="https://t.co/0UEkvyBKAM">https://t.co/0UEkvyBKAM</a> <a href="https://t.co/OpbAt1h3OP">pic.twitter.com/OpbAt1h3OP</a></p>&mdash; John Kitchin (@johnkitchin) <a href="https://twitter.com/johnkitchin/status/768838551140261894">August 25, 2016</a></blockquote> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>
That seems pretty reasonable. Now I only need to use it about 48,000 times to benefit from the time-savings M-x tweet-bibtex offers compared to manually making all those tweets ;) 
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/08/25/Automated-bibtex-entry-tweeting.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A new take on altmetrics - the Altmetrics API]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/08/12/A-new-take-on-altmetrics-the-Altmetrics-API" />
    <id>http://jkitchin.github.io/blog/2016/08/12/A-new-take-on-altmetrics-the-Altmetrics-API</id>
    <updated>2016-08-13T14:46:26Z</updated>
    <published>2016-08-12T14:30:38Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="altmetrics" />
    <summary type="html"><![CDATA[A new take on altmetrics - the Altmetrics API]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/08/12/A-new-take-on-altmetrics-the-Altmetrics-API"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. The altmetric Python code</a></li>
</ul>
</div>
</div>
<p>
I <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/08/08/Altmetrics-meet-my-publications/">previously</a> wrote about altmetrics, and in that post showed how to embed an altmetric badge in html about a paper. Since then, I have learned about the <a href="http://api.altmetric.com">Altmetric API</a> which allows you to gather the altmetric data into tabular form. You will need my <a href="https://github.com/jkitchin/scopus">scopus</a> Python library, my <a href="https://github.com/jkitchin/pycse">pycse</a> library, and to follow along with this, and the Python code in Section <a href="blog.html#ID-0645FB39-C057-4ABC-B855-FFADF24E7EB9">A new take on altmetrics</a> to do this analysis yourself.
</p>

<p>
So, here, we get a list of my publications from Scopus (<a href="http://www.scopus.com/authid/detail.url?origin=AuthorProfile&authorId=7004212771">scopusid:7004212771</a>), get the DOI and current citations for each of these that are categorized as "Journal", and then the altmetric data for each of those where there is altmetric data. The altmetric data is returned as json, which we can easily convert to a dictionary for easy analysis.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> scopus.scopus_search <span style="color: #0000FF;">import</span> ScopusSearch
<span style="color: #0000FF;">from</span> scopus.scopus_api <span style="color: #0000FF;">import</span> ScopusAbstract
<span style="color: #0000FF;">from</span> altmetric <span style="color: #0000FF;">import</span> altmetric
<span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

<span style="color: #BA36A5;">s</span> = ScopusSearch(query=<span style="color: #008000;">'au-id(7004212771)'</span>, fields=<span style="color: #008000;">'dc:identifier'</span>, refresh=<span style="color: #D0372D;">True</span>)

<span style="color: #BA36A5;">abstracts</span> = [ScopusAbstract(eid) <span style="color: #0000FF;">for</span> eid <span style="color: #0000FF;">in</span> s.EIDS
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> ScopusAbstract(eid).aggregationType == <span style="color: #008000;">'Journal'</span>]

<span style="color: #BA36A5;">DOIs</span> = [ab.doi <span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts]
<span style="color: #BA36A5;">cites</span> = [ab.citedby_count <span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts]
<span style="color: #BA36A5;">dates</span> = [ab.coverDate <span style="color: #0000FF;">for</span> ab <span style="color: #0000FF;">in</span> abstracts]

<span style="color: #BA36A5;">data</span> = [altmetric(<span style="color: #008000;">'doi/'</span> + doi) <span style="color: #0000FF;">if</span> doi <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span> <span style="color: #0000FF;">else</span> <span style="color: #D0372D;">None</span> <span style="color: #0000FF;">for</span> doi <span style="color: #0000FF;">in</span> DOIs ]

<span style="color: #BA36A5;">results</span> = <span style="color: #006FE0;">sorted</span>([[j.get(<span style="color: #008000;">'title'</span>, <span style="color: #008000;">'No title'</span>).replace(<span style="color: #008000;">'\n'</span>, <span style="color: #008000;">''</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">'[[{}][doi]]'</span>.<span style="color: #006FE0;">format</span>(j[<span style="color: #008000;">'url'</span>]),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #008000;">'[[{}][details]]'</span>.<span style="color: #006FE0;">format</span>(j[<span style="color: #008000;">'details_url'</span>]),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  j.get(<span style="color: #008000;">'cited_by_tweeters_count'</span>, 0),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  j.get(<span style="color: #008000;">'cited_by_fbwalls_count'</span>, 0),                 
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #006FE0;">int</span>(j[<span style="color: #008000;">'readers'</span>].get(<span style="color: #008000;">'mendeley'</span>, 0)),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  j.get(<span style="color: #008000;">'cited_by_posts_count'</span>, 0),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  cite, date]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> j, cite, date <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">zip</span>(data, cites, dates) <span style="color: #0000FF;">if</span> j],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>key=<span style="color: #0000FF;">lambda</span> x: x[3], reverse=<span style="color: #D0372D;">True</span>)

<span style="color: #BA36A5;">results</span> = [[<span style="color: #008000;">'title'</span>, <span style="color: #008000;">'doi'</span>, <span style="color: #008000;">'details'</span>, <span style="color: #008000;">'tweets'</span>, <span style="color: #008000;">'facebook'</span>, <span style="color: #008000;">'Mendeley'</span>, <span style="color: #008000;">'blogs'</span>, <span style="color: #008000;">'cites'</span>, <span style="color: #008000;">'date'</span>],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  [<span style="color: #008000;">'&lt;50&gt;'</span>,  <span style="color: #008000;">''</span>,    <span style="color: #008000;">''</span>,         <span style="color: #008000;">''</span>,      <span style="color: #008000;">''</span>,         <span style="color: #008000;">''</span>,   <span style="color: #008000;">''</span>, <span style="color: #008000;">''</span>],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #D0372D;">None</span>] + results

org.table(results, caption=<span style="color: #008000;">'Altmetric data for my publications.'</span>, name=<span style="color: #008000;">'alt-met'</span>)
</pre>
</div>

<table id="orgtable1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> Altmetric data for my publications.</caption>

<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">title</th>
<th scope="col" class="org-left">doi</th>
<th scope="col" class="org-left">details</th>
<th scope="col" class="org-right">tweets</th>
<th scope="col" class="org-right">facebook</th>
<th scope="col" class="org-right">Mendeley</th>
<th scope="col" class="org-right">blogs</th>
<th scope="col" class="org-right">cites</th>
<th scope="col" class="org-right">date</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Examples of Effective Data Sharing in Scientific Publishing</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/acscatal.5b00538">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3988563">details</a></td>
<td class="org-right">24</td>
<td class="org-right">0</td>
<td class="org-right">36</td>
<td class="org-right">38</td>
<td class="org-right">2</td>
<td class="org-right">2015-06-05</td>
</tr>

<tr>
<td class="org-left">Towards Benchmarking in Catalysis Science:Best Practices, Opportunities, and Challenges</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/acscatal.6b00183">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=6142336">details</a></td>
<td class="org-right">15</td>
<td class="org-right">0</td>
<td class="org-right">56</td>
<td class="org-right">18</td>
<td class="org-right">2</td>
<td class="org-right">2016-04-01</td>
</tr>

<tr>
<td class="org-left">Neural network and ReaxFF comparison for Au properties</td>
<td class="org-left"><a href="http://dx.doi.org/10.1002/qua.25115">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=6043176">details</a></td>
<td class="org-right">9</td>
<td class="org-right">0</td>
<td class="org-right">5</td>
<td class="org-right">12</td>
<td class="org-right">0</td>
<td class="org-right">2016-01-01</td>
</tr>

<tr>
<td class="org-left">Estimating Bulk-Composition-Dependent H2 Adsorption Energies on CuxPd1–x Alloy (111) Surfaces</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/cs501585k">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3014101">details</a></td>
<td class="org-right">4</td>
<td class="org-right">1</td>
<td class="org-right">9</td>
<td class="org-right">8</td>
<td class="org-right">5</td>
<td class="org-right">2015-02-06</td>
</tr>

<tr>
<td class="org-left">Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides</td>
<td class="org-left"><a href="http://dx.doi.org/10.1063/1.4914093">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=4384407">details</a></td>
<td class="org-right">2</td>
<td class="org-right">0</td>
<td class="org-right">17</td>
<td class="org-right">2</td>
<td class="org-right">2</td>
<td class="org-right">2015-03-14</td>
</tr>

<tr>
<td class="org-left">The role of vdW interactions in coverage dependent adsorption energies of atomic adsorbates on Pt(111) and Pd(111)</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.susc.2015.10.001">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=4776685">details</a></td>
<td class="org-right">2</td>
<td class="org-right">0</td>
<td class="org-right">4</td>
<td class="org-right">2</td>
<td class="org-right">0</td>
<td class="org-right">2016-08-01</td>
</tr>

<tr>
<td class="org-left">Comparative microfluidic screening of amino acid salt solutions for post-combustion CO2 capture</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.ijggc.2015.10.026">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=4776468">details</a></td>
<td class="org-right">2</td>
<td class="org-right">0</td>
<td class="org-right">4</td>
<td class="org-right">2</td>
<td class="org-right">0</td>
<td class="org-right">2015-12-01</td>
</tr>

<tr>
<td class="org-left">Alkaline Electrolyte and Fe Impurity Effects on the Performance and Active-phase Structure of NiOOH Thin Films for OER Catalysis Applications</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/acs.jpcc.5b02458">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3978987">details</a></td>
<td class="org-right">2</td>
<td class="org-right">0</td>
<td class="org-right">17</td>
<td class="org-right">2</td>
<td class="org-right">6</td>
<td class="org-right">2015-05-28</td>
</tr>

<tr>
<td class="org-left">Property Prediction of Crystalline Solids from Composition and Crystal Structure</td>
<td class="org-left"><a href="http://dx.doi.org/10.1002/aic.15251">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=6609390">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">4</td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">2016-01-01</td>
</tr>

<tr>
<td class="org-left">Property Prediction of Crystalline Solids from Composition and Crystal Structure</td>
<td class="org-left"><a href="http://dx.doi.org/10.1002/aic.15251">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=6609390">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">4</td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">2016-08-01</td>
</tr>

<tr>
<td class="org-left">High-throughput methods using composition and structure spread libraries</td>
<td class="org-left"><a href="http://dx.doi.org/10.1002/aic.15294">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=7300151">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">2016-01-01</td>
</tr>

<tr>
<td class="org-left">A Linear Response DFT+U Study of Trends in the Oxygen Evolution Activity of Transition Metal Rutile Dioxides</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/jp511426q">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3863449">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">30</td>
<td class="org-right">1</td>
<td class="org-right">9</td>
<td class="org-right">2015-01-01</td>
</tr>

<tr>
<td class="org-left">Electrocatalytic Oxygen Evolution with an Immobilized TAML Activator</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/ja5015986">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=2268505">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">40</td>
<td class="org-right">1</td>
<td class="org-right">10</td>
<td class="org-right">2014-04-16</td>
</tr>

<tr>
<td class="org-left">The outlook for improved carbon capture technology</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.pecs.2012.03.003">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=1215868">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">183</td>
<td class="org-right">1</td>
<td class="org-right">150</td>
<td class="org-right">2012-10-01</td>
</tr>

<tr>
<td class="org-left">The redox mediated separation of carbon dioxide from flue gas</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/acs.energyfuels.5b01807">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=4584956">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">4</td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">2015-11-19</td>
</tr>

<tr>
<td class="org-left">Core level shifts in Cu–Pd alloys as a function of bulk composition and structure</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.susc.2015.02.011">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3884024">details</a></td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">6</td>
<td class="org-right">1</td>
<td class="org-right">0</td>
<td class="org-right">2015-01-01</td>
</tr>

<tr>
<td class="org-left">Chemical and Molecular Descriptors for the Reactivity of Amines with CO              2</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/ie301419q">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=10280138">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">6</td>
<td class="org-right">0</td>
<td class="org-right">11</td>
<td class="org-right">2012-10-24</td>
</tr>

<tr>
<td class="org-left">Simulating Temperature Programmed Desorption of Oxygen on Pt(111) Using DFT Derived Coverage Dependent Desorption Barriers</td>
<td class="org-left"><a href="http://dx.doi.org/10.1007/s11244-013-0166-3">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=10280822">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">22</td>
<td class="org-right">0</td>
<td class="org-right">6</td>
<td class="org-right">2014-02-01</td>
</tr>

<tr>
<td class="org-left">Comparisons of amine solvents for post-combustion CO2 capture: A multi-objective analysis approach</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.ijggc.2013.06.020">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=10280140">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">30</td>
<td class="org-right">0</td>
<td class="org-right">10</td>
<td class="org-right">2013-10-01</td>
</tr>

<tr>
<td class="org-left">Correlation of Electronic Structure with Catalytic Activity: H              2              –D              2              Exchange across Cu                              x                            Pd                              1–                x                            Composition Space</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/cs501586t">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=10280791">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">3</td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">2015-05-01</td>
</tr>

<tr>
<td class="org-left">Origin of the Overpotential for Oxygen Reduction at a Fuel-Cell Cathode</td>
<td class="org-left"><a href="http://dx.doi.org/10.1021/jp047349j">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=661246">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">743</td>
<td class="org-right">1</td>
<td class="org-right">1464</td>
<td class="org-right">2004-11-18</td>
</tr>

<tr>
<td class="org-left">Interactions in 1-ethyl-3-methyl imidazolium tetracyanoborate ion pair: Spectroscopic and density functional study</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.molstruc.2013.01.046">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=10280139">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">27</td>
<td class="org-right">0</td>
<td class="org-right">11</td>
<td class="org-right">2013-04-24</td>
</tr>

<tr>
<td class="org-left">Separation of CO2 from flue gas using electrochemical cells</td>
<td class="org-left"><a href="http://dx.doi.org/10.1016/j.fuel.2009.11.036">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3135675">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">17</td>
<td class="org-right">1</td>
<td class="org-right">26</td>
<td class="org-right">2010-06-01</td>
</tr>

<tr>
<td class="org-left">Universality in Oxygen Evolution Electrocatalysis on Oxide Surfaces</td>
<td class="org-left"><a href="http://dx.doi.org/10.1002/cctc.201000397">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=3705157">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">359</td>
<td class="org-right">5</td>
<td class="org-right">373</td>
<td class="org-right">2011-07-11</td>
</tr>

<tr>
<td class="org-left">Probing the effect of electron donation on CO2 absorbing 1,2,3-triazolide ionic liquids</td>
<td class="org-left"><a href="http://dx.doi.org/10.1039/c3ra47097k">doi</a></td>
<td class="org-left"><a href="http://www.altmetric.com/details.php?citation_id=10280141">details</a></td>
<td class="org-right">0</td>
<td class="org-right">0</td>
<td class="org-right">13</td>
<td class="org-right">0</td>
<td class="org-right">7</td>
<td class="org-right">2014-03-17</td>
</tr>
</tbody>
</table>



<p>
Obviously not all of my papers (67 now) have altmetric data, and most of the ones that do have very little altmetric data ;(. The Mendeley data is interesting, and this next analysis shows it is reasonably correlated with the number of citations, at least for the few highly cited papers I have. For my typical papers though, it is not clear the correlation is that high.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

<span style="color: #BA36A5;">mendeley</span> = [x[5] <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> data[2:]]
<span style="color: #BA36A5;">cites</span> = [x[7] <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> data[2:]]

plt.plot(mendeley, cites, <span style="color: #008000;">'bo'</span>)
plt.xlabel(<span style="color: #008000;">'Mendeley readers'</span>)
plt.ylabel(<span style="color: #008000;">'Citation count'</span>)
org.figure(plt.savefig(<span style="color: #008000;">'images/alt-metrics.png'</span>))
</pre>
</div>

<p>
<img src="/media/2016-08-12-A-new-take-on-altmetrics---the-Altmetrics-API/alt-metrics.png"> 
</p>

<p>
In summary, the Altmetric API gives you access to data, and (in conjunction with Scopus) an ability to systematically compare metrics and altmetrics across any set of documents you can create via queries. 
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><a id="ID-62451438-267E-4995-8EBA-39175979D987"></a><span class="section-number-2">1</span> The altmetric Python code</h2>
<div class="outline-text-2" id="text-1">
<p>
You may want to look at <a href="https://pypi.python.org/pypi/pyaltmetric">https://pypi.python.org/pypi/pyaltmetric</a> and <a href="https://github.com/ropensci/rAltmetric">https://github.com/ropensci/rAltmetric</a> for more advance Python code to work with the Altmetric API. This one has some features they do not, and was easy to write.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> hashlib
<span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">import</span> json
<span style="color: #0000FF;">import</span> requests
<span style="color: #0000FF;">import</span> time

<span style="color: #0000FF;">def</span> <span style="color: #006699;">altmetric</span>(query, version=<span style="color: #008000;">'v1'</span>, refresh=<span style="color: #D0372D;">False</span>, throttle=1):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""Return dictionary of altmetric data for query.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   query is a string like: doi/10.1007/s00799-016-0173-7</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   Results are cached in ~/.altmetric_data, unless refresh is True.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   throttle is a delay in seconds to avoid too many requests too fast.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   see http://api.altmetric.com</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">m</span> = hashlib.md5()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">url</span> = <span style="color: #008000;">'http://api.altmetric.com/'</span> + version + <span style="color: #008000;">'/'</span> + query
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   m.update(url.encode(<span style="color: #008000;">'utf-8'</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">md5</span> = m.hexdigest()

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">datafile</span> = os.path.join(<span style="color: #008000;">'/Users/jkitchin/.altmetric_data'</span>, md5)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> os.path.exists(datafile) <span style="color: #0000FF;">and</span> <span style="color: #0000FF;">not</span> refresh:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(datafile) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = json.loads(f.read())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">req</span> = requests.get(url)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> req.status_code != 404:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = req.json()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">results</span> = {}
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(datafile, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(json.dumps(results))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> throttle:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   time.sleep(throttle)  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">throttle how many requests we make.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> results
</pre>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/08/12/A-new-take-on-altmetrics---the-Altmetrics-API.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication in ACS Catalysis]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/06/29/New-publication-in-ACS-Catalysis" />
    <id>http://jkitchin.github.io/blog/2016/06/29/New-publication-in-ACS-Catalysis</id>
    <updated>2016-06-29T12:51:24Z</updated>
    <published>2016-06-29T12:50:38Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <category scheme="http://jkitchin.github.io/blog" term="publication" />
    <summary type="html"><![CDATA[New publication in ACS Catalysis]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/06/29/New-publication-in-ACS-Catalysis"><![CDATA[


<p>
DFT calculations are not exact, and the uncertainties in a calculation can impact conclusions you draw from the results. In this work, we quantify the uncertainty in the adsorption energies on Pt(111) and (100) of oxygenated intermediates  relevant to the oxygen reduction reaction mechanism. We then propagate these uncertainties to the volcano plot of activity that results from them, and show how this approach helps inform us about the reliability of the predicted trends.
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span>{<span style="color: #D0372D;">deshpande16_quant_uncer_activ_volcan_relat</span>,
  <span style="color: #BA36A5;">author</span> =       {Siddharth Deshpande and John R. Kitchin and Venkatasubramanian
                  Viswanathan },
  <span style="color: #BA36A5;">title</span> =        {Quantifying Uncertainty in Activity Volcano Relationships for
                  Oxygen Reduction Reaction},
  <span style="color: #BA36A5;">journal</span> =      {ACS Catalysis},
  <span style="color: #BA36A5;">volume</span> =       0,
  <span style="color: #BA36A5;">number</span> =       {ja},
  <span style="color: #BA36A5;">pages</span> =        {null},
  <span style="color: #BA36A5;">year</span> =         2016,
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1021/acscatal.6b00509</span>},
  <span style="color: #BA36A5;">URL</span> =          {<span style="color: #006DAF; text-decoration: underline;"> http://dx.doi.org/10.1021/acscatal.6b00509 </span>},
  <span style="color: #BA36A5;">eprint</span> =       { http://dx.doi.org/10.1021/acscatal.6b00509 },
}
</pre>
</div>

<p>
<script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'></script>
<div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/acscatal.6b00509'></div>
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/29/New-publication-in-ACS-Catalysis.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Copy formatted org-mode text from Emacs to other applications]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications" />
    <id>http://jkitchin.github.io/blog/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications</id>
    <updated>2016-06-16T11:46:39Z</updated>
    <published>2016-06-16T11:46:39Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="rtf" />
    <summary type="html"><![CDATA[Copy formatted org-mode text from Emacs to other applications]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications"><![CDATA[


<p>
I do a lot of writing in org-mode and I thought it would be great if I could copy text from an org-file and paste it <i>with formatting</i> into other applications, e.g. Word, Gmail, etc&#x2026;.  Curiosity got the better of me and I wondered how this is done in other applications. It works by creating a <a href="https://www.safaribooksonline.com/library/view/rtf-pocket-guide/9781449302047/ch01.html">Rich Text Format</a> version of what you want to copy and then putting that on the clipboard. It isn't quite enough to just copy it, it needs to go in the clipboard as an RTF datatype. On Mac OSX I used <a href="http://osxdaily.com/2007/03/05/manipulating-the-clipboard-from-the-command-line/">pbcopy</a> to make that happen. 
</p>

<p>
Check out this video of this post in action: <a href="https://www.youtube.com/watch?v=irkmQnggVpE">https://www.youtube.com/watch?v=irkmQnggVpE</a> 
</p>

<p>
One simple strategy to do this from org-mode is to generate HTML by export, and then convert it to RTF with a utility, e.g. textutil. For example like this. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">formatted-copy</span> ()
  <span style="color: #036A07;">"Export region to HTML, and copy it to the clipboard."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">save-window-excursion</span>
    (<span style="color: #0000FF;">let*</span> ((buf (org-export-to-buffer 'html <span style="color: #008000;">"*Formatted Copy*"</span> nil nil t t))
           (html (<span style="color: #0000FF;">with-current-buffer</span> buf (buffer-string))))
      (<span style="color: #0000FF;">with-current-buffer</span> buf
        (shell-command-on-region
         (point-min)
         (point-max)
         <span style="color: #008000;">"textutil -stdin -format html -convert rtf -stdout | pbcopy"</span>)) 
      (kill-buffer buf))))

(global-set-key (kbd <span style="color: #008000;">"H-w"</span>) 'formatted-copy)
</pre>
</div>

<p>
This works well for everything but equations and images. Citations leave a bit to be desired, but improving this is still a challenge. 
</p>

<p>
Let us try this on some text. Some <b>bold</b>, <i>italic</i>, <span class="underline">underline</span>, <del>struck</del> and <code>verbatim</code> text to copy. Here are some example Formulas: H<sub>2</sub>O ionizes to form H<sup>+</sup>. We simply must have an equation: \(e^{i\pi} + 1 = 0\) <sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>. We should also have a citation <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a> and multiple citations <a class='org-ref-reference' href="#kitchin-2016-autom-data">kitchin-2016-autom-data</a>,<a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien">kitchin-2015-data-surfac-scien</a> <sup><a id="fnr.2" class="footref" href="#fn.2">2</a></sup>.
</p>

<p>
A code block:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #BA36A5;">x</span> = np.linspace(0, 60, 500)
plt.figure(figsize=(4, 2))
plt.plot(np.exp(-0.1 * x) * np.cos(x),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>np.exp(-0.1 * x) * np.sin(x))
org.figure(plt.savefig(<span style="color: #008000;">'spiral.png'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  caption=<span style="color: #008000;">'A spiral.'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  attributes=[[<span style="color: #008000;">'org'</span>, <span style="color: #008000;">':width 100'</span>]])
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">''</span>)
org.table([[<span style="color: #008000;">'H1'</span>, <span style="color: #008000;">'H2'</span>], <span style="color: #D0372D;">None</span>, [1, 2], [2, 4]],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> caption=<span style="color: #008000;">'A simple table'</span>)
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">''</span>)
org.result(6 * 7)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-06-16-Copy-formatted-org-mode-text-from-Emacs-to-other-applications/spiral.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A spiral.</p>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A simple table</caption>

<colgroup>
<col  class="org-right" />

<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">H1</th>
<th scope="col" class="org-right">H2</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">1</td>
<td class="org-right">2</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-right">4</td>
</tr>
</tbody>
</table>

<pre class="example">
42
</pre>

<p>
In summary, this simple approach to generating RTF from exported HTML works really well for the simplest markups. To improve on getting figures in, getting cross-references, captions, proper references, etc&#x2026; will require a more sophisticated export approach, and probably one that exports RTF directly. That is a big challenge for another day!
</p>

<p>
<h1 class='org-ref-bib-h1'>Bibliography</h1>
<ul class='org-ref-bib'><li><a id="kitchin-2015-examp">[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, <i>ACS Catalysis</i>, <b>5(6)</b>, 3894-3899 (2015). http://dx.doi.org/10.1021/acscatal.5b00538</a></li>
<li><a id="kitchin-2016-autom-data">[kitchin-2016-autom-data] "Kitchin, Van Gulick & Zilinski, Automating Data Sharing Through Authoring Tools, <i>"International Journal on Digital Libraries"</i>, <b></b>, 1-6 (2016). http://dx.doi.org/10.1007/s00799-016-0173-7</a></li>
<li><a id="kitchin-2015-data-surfac-scien">[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, <i>"Surface Science "</i>, <b>N/A</b>, in press (2015). http://dx.doi.org/10.1016/j.susc.2015.05.007</a></li>
</ul>
</p>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
There are probably some ways to get better images for equations. To get equation numbers and references to them will probably require a two pass build process.
</p></div></div>

<div class="footdef"><sup><a id="fn.2" class="footnum" href="#fnr.2">2</a></sup> <div class="footpara"><p class="footpara">
This is another place where configuration will be required for bibliography style. Also, some checks to join neighboring footnotes.
</p></div></div>


</div>
</div><p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/16/Copy-formatted-org-mode-text-from-Emacs-to-other-applications.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Using prefix args in ivy actions]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/06/14/Using-prefix-args-in-ivy-actions" />
    <id>http://jkitchin.github.io/blog/2016/06/14/Using-prefix-args-in-ivy-actions</id>
    <updated>2016-06-14T11:03:46Z</updated>
    <published>2016-06-14T11:03:46Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="ivy" />
    <summary type="html"><![CDATA[Using prefix args in ivy actions]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/06/14/Using-prefix-args-in-ivy-actions"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline1">1. Bare bones setup</a></li>
</ul>
</div>
</div>
<p>
There is a <a href="https://github.com/abo-abo/swiper/commit/e54aa1850077d22e8007edef86d4bb751c3b7794">brand new feature</a> in ivy which allows you to pass prefix args to the action functions. This change has made it into MELPA by now, so you can try it out. Check out this <a href="#orgheadline1">1</a> for an emacs -Q setup that I used for this post. This installs ivy and org-ref with some minimal setup.
</p>

<p>
The video for this post can be found here: <a href="https://www.youtube.com/watch?v=Y8HHLAE_-yA">https://www.youtube.com/watch?v=Y8HHLAE_-yA</a> 
</p>

<p>
In this post I will show how to use this new feature to create an ivy selection function that inserts a citation from a bibtex file, and with a prefix arg lets you choose the type of citation to insert.
</p>

<p>
<a href="https://melpa.org/#/org-ref">org-ref</a> provides a function that generates candidates for selection. Each candidate is a list where the car of the list is a display string, and the cdr is an a-list of properties. I have a lot of entries in here, so it is important to have a convenient selection tool.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> org-ref-bibtex-files '(<span style="color: #008000;">"references.bib"</span>))
(length (orhc-bibtex-candidates))
</pre>
</div>

<p>
Here is an example of the first entry in my bibliography. We will need to extract the key from that. 
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(elt (orhc-bibtex-candidates) 0)
</pre>
</div>



<p>
Here is the key from that entry.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(cdr (assoc <span style="color: #008000;">"=key="</span> (elt (orhc-bibtex-candidates) 0)))
</pre>
</div>


<p>
By default we will insert that as <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a> but there are other types of citations we might use too like <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>. org-ref provides a list of citation types we could insert. Here they are. This somewhat complicated code just wraps the string so it fits in the blog post nicely.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-temp-buffer</span> 
  (insert (format <span style="color: #008000;">"%s"</span> org-ref-cite-types))
  (fill-region (point-min) (point-max))
  (buffer-string))
</pre>
</div>

<p>
So, we are now prepared to make a simple ivy function to query our bibliography that has a default action to insert a standard citation, but we can use a prefix to change the citation type. The prefix arg is stored in the global variable ivy-current-prefix-arg which can be checked inside the action function. We can check for it in the action function and do something different if a prefix arg is used. Here is the function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">cite</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"select: "</span> (orhc-bibtex-candidates)
            <span style="color: #006FE0;">:action</span> (<span style="color: #0000FF;">lambda</span> (entry) 
                      (<span style="color: #0000FF;">let</span> ((key (cdr (assoc <span style="color: #008000;">"=key="</span> entry)))
                            (type (<span style="color: #0000FF;">if</span> ivy-current-prefix-arg
                                      (ivy-read <span style="color: #008000;">"type: "</span> org-ref-cite-types)
                                    <span style="color: #008000;">"cite"</span>)))
                        (<span style="color: #0000FF;">with-ivy-window</span>
                          (insert (format <span style="color: #008000;">"%s:%s"</span> type key)))))))
</pre>
</div>

<p>
To get the default action, we run M-x cite, enter our query, select an entry and press return. To get an alternate cite type, we run M-x cite, enter the query, select an entry, then type  C-u return, which will prompt you for an alternate citation type, then insert your choice and the citation. Here are some examples.
<a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>  <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a> <a class='org-ref-reference' href="#kitchin-2015-examp">kitchin-2015-examp</a>
</p>



<p>
In summary, these aren't functions you would want to use; they don't handle a lot of the nuances of multiple citations. They are just to illustrate in a pretty simple way how easy it is to use a prefix arg in an ivy action function now! 
</p>

<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><span class="section-number-2">1</span> Bare bones setup</h2>
<div class="outline-text-2" id="text-1">
<p>
This will setup the bare bones emacs that I used for this post.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> package-user-dir (expand-file-name <span style="color: #008000;">"sandbox"</span>))

(<span style="color: #0000FF;">setq</span> package-archives
      '((<span style="color: #008000;">"melpa"</span> . <span style="color: #008000;">"http://melpa.org/packages/"</span>)))

(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">package</span>)

<span style="color: #8D8D84;">;;; </span><span style="color: #8D8D84; font-style: italic;">Code:</span>

(package-initialize)

(<span style="color: #0000FF;">unless</span> (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(<span style="color: #0000FF;">eval-when-compile</span>
  (<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">use-package</span>))

(<span style="color: #0000FF;">setq</span> use-package-always-ensure t)

(<span style="color: #0000FF;">use-package</span> <span style="color: #D0372D;">ivy</span>)

(<span style="color: #0000FF;">use-package</span> <span style="color: #D0372D;">org-ref</span>
 <span style="color: #006FE0;">:init</span> 
 (<span style="color: #0000FF;">setq</span> org-ref-default-bibliography '(<span style="color: #008000;">"~/Dropbox/bibliography/references.bib"</span>))
 <span style="color: #006FE0;">:config</span> (<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">org-ref-helm-cite</span>))

(global-visual-line-mode 1)
(<span style="color: #0000FF;">setq</span> org-confirm-babel-evaluate nil)
(load-theme 'leuven)
</pre>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/14/Using-prefix-args-in-ivy-actions.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication in International Journal of Digital Libraries]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/06/14/New-publication-in-International-Journal-of-Digital-Libraries" />
    <id>http://jkitchin.github.io/blog/2016/06/14/New-publication-in-International-Journal-of-Digital-Libraries</id>
    <updated>2016-06-14T11:42:48Z</updated>
    <published>2016-06-14T06:01:46Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <category scheme="http://jkitchin.github.io/blog" term="publication" />
    <summary type="html"><![CDATA[New publication in International Journal of Digital Libraries]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/06/14/New-publication-in-International-Journal-of-Digital-Libraries"><![CDATA[


<p>
We have a new paper out on using org-mode in publishing. The idea is to use org-mode to automate data embedding in publications. For example, in org-mode tables can serve as data sources. We show how you can automatically embed the tables as csv files in PDF or HTML when the org-file is exported. Similarly, all the code blocks are embedded as extractable files at export time. This increases the reusability of the data and code in papers. 
</p>

<p>
<script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'></script>
<div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1007/s00799-016-0173-7'></div>
</p>

<p>
Check out the preprint here: <a href="https://github.com/KitchinHUB/kitchingroup-66">https://github.com/KitchinHUB/kitchingroup-66</a> 
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@Article</span>{<span style="color: #D0372D;">Kitchin2016</span>,
  <span style="color: #BA36A5;">author</span> =       "Kitchin, John R. and Van Gulick, Ana E. and Zilinski, Lisa D.",
  <span style="color: #BA36A5;">title</span> =        "Automating data sharing through authoring tools",
  <span style="color: #BA36A5;">journal</span> =      "International Journal on Digital Libraries",
  <span style="color: #BA36A5;">year</span> =         "2016",
  <span style="color: #BA36A5;">pages</span> =        "1--6",
  <span style="color: #BA36A5;">abstract</span> =     "In the current scientific publishing landscape, there is a
                  need for an authoring workflow that easily integrates data and
                  code into manuscripts and that enables the data and code to be
                  published in reusable form. Automated embedding of data and
                  code into published output will enable superior communication
                  and data archiving. In this work, we demonstrate a proof of
                  concept for a workflow, org-mode, which successfully provides
                  this authoring capability and workflow integration. We
                  illustrate this concept in a series of examples for potential
                  uses of this workflow. First, we use data on citation counts
                  to compute the h-index of an author, and show two code
                  examples for calculating the h-index. The source for each
                  example is automatically embedded in the PDF during the export
                  of the document. We demonstrate how data can be embedded in
                  image files, which themselves are embedded in the document.
                  Finally, metadata about the embedded files can be
                  automatically included in the exported PDF, and accessed by
                  computer programs. In our customized export, we embedded
                  metadata about the attached files in the PDF in an Info field.
                  A computer program could parse this output to get a list of
                  embedded files and carry out analyses on them. Authoring tools
                  such as Emacs + org-mode can greatly facilitate the
                  integration of data and code into technical writing. These
                  tools can also automate the embedding of data into document
                  formats intended for consumption.",
  <span style="color: #BA36A5;">issn</span> =         "1432-1300",
  <span style="color: #BA36A5;">doi</span> =          "<span style="color: #006DAF; text-decoration: underline;">10.1007/s00799-016-0173-7</span>",
  <span style="color: #BA36A5;">url</span> =          "<span style="color: #006DAF; text-decoration: underline;">http://dx.doi.org/10.1007/s00799-016-0173-7</span>"
}
</pre>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/14/New-publication-in-International-Journal-on-Digital-Libraries.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Dynamic sorting with ivy]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/06/13/Dynamic-sorting-with-ivy" />
    <id>http://jkitchin.github.io/blog/2016/06/13/Dynamic-sorting-with-ivy</id>
    <updated>2016-06-13T15:51:19Z</updated>
    <published>2016-06-13T15:51:19Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="ivy" />
    <summary type="html"><![CDATA[Dynamic sorting with ivy]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/06/13/Dynamic-sorting-with-ivy"><![CDATA[


<p>
I have been exploring ivy a lot these days as a general purpose completion backend. One need I have is dynamic resorting of candidates. I illustrate how to achieve that here. A big thanks to Oleh Krehel (author of ivy) for a lot help today getting this working!
</p>

<p>
You may want to check out the video: <a href="https://www.youtube.com/watch?v=nFKfM3MOAd0">https://www.youtube.com/watch?v=nFKfM3MOAd0</a> 
</p>

<p>
First, a typical ivy-read example. Below I have a set of contact data for some people, and have setup an ivy-read command that inserts the email in the current buffer by default, and a second action for the phone. What is missing that I would like to do is dynamically reorder the candidates, including sorting all the candidates, swapping candidates up and down to fine tune the order, and then finally applying an action to all the candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ct</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"contact: "</span> '((<span style="color: #008000;">"Kno Body"</span> <span style="color: #008000;">"kb@true.you"</span> <span style="color: #008000;">"555-1212"</span>)
                          (<span style="color: #008000;">"A. Person"</span> <span style="color: #008000;">"ap@some.come"</span> <span style="color: #008000;">"867-5304"</span>)
                          (<span style="color: #008000;">"G. Willikers"</span> <span style="color: #008000;">"gw@not.me"</span> <span style="color: #008000;">"555-5555"</span>))
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"o"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 0))))
                       <span style="color: #008000;">"insert email"</span>)
                      (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 1))))
                       <span style="color: #008000;">"insert phone"</span>))))
</pre>
</div>

<p>
So, first a set of functions to manipulate the candidates. We create a swap function, two functions to move candidates up and down, and two functions that sort the whole list of candidates in ascending and descending order. In each case, we just update the ivy collection with the new modified collection, we save the currently selected candidate, and then reset the state to update the candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">swap</span> (i j lst)
  <span style="color: #036A07;">"Swap index I and J in the list LST."</span> 
  (<span style="color: #0000FF;">let</span> ((tempi (nth i lst)))
    (<span style="color: #0000FF;">setf</span> (nth i lst) (nth j lst))
    (<span style="color: #0000FF;">setf</span> (nth j lst) tempi))
  lst)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-move-up</span> ()
  <span style="color: #036A07;">"Move ivy candidate up."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (swap ivy--index (1- ivy--index) (ivy-state-collection ivy-last)))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-move-down</span> ()
  <span style="color: #036A07;">"Move ivy candidate down."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (swap ivy--index (1+ ivy--index) (ivy-state-collection ivy-last)))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-a-z</span> ()
  <span style="color: #036A07;">"Sort ivy candidates from a-z."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (cl-sort (ivy-state-collection ivy-last)
                 (<span style="color: #0000FF;">if</span> (listp (car (ivy-state-collection ivy-last)))
                     (<span style="color: #0000FF;">lambda</span> (a b)
                       (string-lessp (car a) (car b)))
                   (<span style="color: #0000FF;">lambda</span> (a b)
                     (string-lessp a b)))))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-z-a</span> ()
  <span style="color: #036A07;">"Sort ivy candidates from z-a."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">setf</span> (ivy-state-collection ivy-last)
        (cl-sort (ivy-state-collection ivy-last)
                 (<span style="color: #0000FF;">if</span> (listp (car (ivy-state-collection ivy-last)))
                     (<span style="color: #0000FF;">lambda</span> (a b)
                       (string-greaterp (car a) (car b)))
                   (<span style="color: #0000FF;">lambda</span> (a b)
                     (string-greaterp a b)))))
  (<span style="color: #0000FF;">setf</span> (ivy-state-preselect ivy-last) ivy--current)
  (ivy--reset-state ivy-last))
</pre>
</div>


<p>
Now, we make a keymap to bind these commands so they are convenient to use. I will use C-arrows for swapping, and M-arrows for sorting the whole list. I also add M-&lt;return&gt; which allows me to use a numeric prefix to apply an action to all the candidates. M-&lt;return&gt; applies the default action. M-1 M-&lt;return&gt; applies the first action, M-2 M-&lt;return&gt; the second action, etc&#x2026;
</p>

<p>
This specific implementation assumes your candidates have a cdr.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> ivy-sort-keymap
      (<span style="color: #0000FF;">let</span> ((map (make-sparse-keymap)))
        (define-key map (kbd <span style="color: #008000;">"C-&lt;up&gt;"</span>) 'ivy-move-up)
        (define-key map (kbd <span style="color: #008000;">"C-&lt;down&gt;"</span>) 'ivy-move-down)

        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">sort all keys</span>
        (define-key map (kbd <span style="color: #008000;">"M-&lt;up&gt;"</span>) 'ivy-a-z)
        (define-key map (kbd <span style="color: #008000;">"M-&lt;down&gt;"</span>) 'ivy-z-a)

        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">map over all all entries with nth action</span>
        (define-key map (kbd <span style="color: #008000;">"M-&lt;return&gt;"</span>)
          (<span style="color: #0000FF;">lambda</span> (arg)
            <span style="color: #036A07;">"Apply the numeric prefix ARGth action to every candidate."</span>
            (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
            <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">with no arg use default action</span>
            (<span style="color: #0000FF;">unless</span> arg (<span style="color: #0000FF;">setq</span> arg (car (ivy-state-action ivy-last))))
            (ivy-beginning-of-buffer)
            (<span style="color: #0000FF;">let</span> ((func (elt (elt (ivy-state-action ivy-last) arg) 1)))
              (<span style="color: #0000FF;">loop</span> for i from 0 to (- ivy--length 1)
                    do 
                    (funcall func
                             (<span style="color: #0000FF;">let</span> ((cand (elt
                                          (ivy-state-collection ivy-last)
                                          ivy--index)))
                               (<span style="color: #0000FF;">if</span> (listp cand)
                                   (cdr cand)
                                 cand)))
                    (ivy-next-line)))
            (ivy-exit-with-action
             (<span style="color: #0000FF;">lambda</span> (x) nil))))
        map))
</pre>
</div>

<p>
Ok, now we modify our ivy-read function to use the keymap.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ctn</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (ivy-read <span style="color: #008000;">"contact: "</span> '((<span style="color: #008000;">"Kno Body"</span> <span style="color: #008000;">"kb@true.you"</span> <span style="color: #008000;">"555-1212"</span>)
                          (<span style="color: #008000;">"A. Person"</span> <span style="color: #008000;">"ap@some.come"</span> <span style="color: #008000;">"867-5304"</span>)
                          (<span style="color: #008000;">"G. Willikers"</span> <span style="color: #008000;">"gw@not.me"</span> <span style="color: #008000;">"555-5555"</span>))
            <span style="color: #006FE0;">:keymap</span> ivy-sort-keymap
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"o"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 0))))
                       <span style="color: #008000;">"insert email"</span>)
                      (<span style="color: #008000;">"p"</span> (<span style="color: #0000FF;">lambda</span> (x)
                             (<span style="color: #0000FF;">with-ivy-window</span>
                               (insert
                                (<span style="color: #0000FF;">if</span> (not (looking-back <span style="color: #008000;">" "</span>)) <span style="color: #008000;">", "</span> <span style="color: #008000;">""</span>)
                                (elt x 1))))
                       <span style="color: #008000;">"insert phone"</span>))))
</pre>
</div>

<p>
kb@true.you, gw@not.me, ap@some.come, 555-1212, 555-5555, 867-5304
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/06/13/Dynamic-sorting-with-ivy.org">org-mode source</a></p>
<p>Org-mode version = 8.3.4</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Writing lisp code from Python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/30/Writing-lisp-code-from-Python" />
    <id>http://jkitchin.github.io/blog/2016/05/30/Writing-lisp-code-from-Python</id>
    <updated>2016-05-30T12:38:20Z</updated>
    <published>2016-05-30T09:26:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="lisp" />
    <summary type="html"><![CDATA[Writing lisp code from Python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/30/Writing-lisp-code-from-Python"><![CDATA[



<p>
Some time ago I <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/">wrote about converting python data structures to lisp</a> . I have expanded on that idea to writing lisp programs from Python! The newly expanded code that makes this possible can be found at <a href="https://github.com/jkitchin/pycse/blob/master/pycse/lisp.py">https://github.com/jkitchin/pycse/blob/master/pycse/lisp.py</a> .
</p>

<p>
Here are the simple data types known to pycse.lisp:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.lisp
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #0000FF;">print</span>(<span style="color: #008000;">"a string"</span>.lisp)
<span style="color: #BA36A5;">a</span> = 5
<span style="color: #BA36A5;">b</span> = 5.0
<span style="color: #0000FF;">print</span>(a.lisp)
<span style="color: #0000FF;">print</span>(b.lisp)
<span style="color: #0000FF;">print</span>([1, 2, 3].lisp)
<span style="color: #0000FF;">print</span>((1, 2, 3).lisp)
<span style="color: #0000FF;">print</span>({<span style="color: #008000;">'a'</span>: 4}.lisp)
<span style="color: #0000FF;">print</span>(np.array([1, 2, 3]).lisp)
<span style="color: #0000FF;">print</span>(np.array([1.0, 2.0, 3.0]).lisp)
</pre>
</div>

<pre class="example">
"a string"
5
5.0
(1 2 3)
(1 2 3)
(:a 4)
(1 2 3)
(1.0 2.0 3.0)
</pre>

<p>
There are also some more complex types.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.lisp <span style="color: #0000FF;">as</span> pl

<span style="color: #0000FF;">print</span>(pl.Symbol(<span style="color: #008000;">'lambda'</span>))
<span style="color: #0000FF;">print</span>(pl.Quote(<span style="color: #008000;">'lambda'</span>))
<span style="color: #0000FF;">print</span>(pl.SharpQuote(<span style="color: #008000;">'lambda'</span>))
<span style="color: #0000FF;">print</span>(pl.Cons(<span style="color: #008000;">"a"</span>, 5))
<span style="color: #0000FF;">print</span>(pl.Alist([<span style="color: #008000;">"a"</span>, 2, <span style="color: #008000;">"b"</span>, 5]))
<span style="color: #0000FF;">print</span>(pl.Vector([1, 2, 3]))

<span style="color: #0000FF;">print</span>(pl.Backquote([]))
<span style="color: #0000FF;">print</span>(pl.Comma([1, 2, 3]))
<span style="color: #0000FF;">print</span>(pl.Splice([1, 2, 3]))
</pre>
</div>

<pre class="example">
lambda
'lambda
#'lambda
("a" . 5)
(("a" . 2) ("b" . 5))
[1 2 3]
`()
,(1 2 3)
,@(1 2 3)
</pre>

<p>
You can nest these too.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.lisp <span style="color: #0000FF;">as</span> pl
<span style="color: #0000FF;">print</span>(pl.Quote(pl.Alist([<span style="color: #008000;">"a"</span>, 2, <span style="color: #008000;">"b"</span>, 5])))
<span style="color: #0000FF;">print</span>(pl.Backquote([pl.Symbol(<span style="color: #008000;">'+'</span>), pl.Comma(pl.Symbol(<span style="color: #008000;">'b'</span>)), 5]))
</pre>
</div>

<pre class="example">
'(("a" . 2) ("b" . 5))
`(+ ,b 5)
</pre>

<p>
All that means we can use Python <i>code</i> to generate lisp programs. Here is an example where we make two sub-programs, and combine them into an overall program, then add one more subprogram to it. We wrap the results in an emacs-lisp block, then actually run the block!
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.lisp <span style="color: #0000FF;">as</span> pl

<span style="color: #BA36A5;">p1</span> = [pl.Symbol(<span style="color: #008000;">'mapcar'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> [pl.Symbol(<span style="color: #008000;">'lambda'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  [pl.Symbol(<span style="color: #008000;">'x'</span>)],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  [pl.Symbol(<span style="color: #008000;">'*'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pl.Symbol(<span style="color: #008000;">'x'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   pl.Symbol(<span style="color: #008000;">'x'</span>)]],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> pl.Quote([1, 2, 3, 4])]

<span style="color: #BA36A5;">p2</span> = [pl.Symbol(<span style="color: #008000;">'princ'</span>), <span style="color: #008000;">"Hello world"</span>]

<span style="color: #BA36A5;">p</span> = [pl.Symbol(<span style="color: #008000;">'list'</span>), p1, p2]
p.append([pl.Symbol(<span style="color: #008000;">'+'</span>), 5, 5])

<span style="color: #0000FF;">print</span>(p.lisp)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(list (mapcar (<span style="color: #0000FF;">lambda</span> (x) (* x x)) '(1 2 3 4)) (princ <span style="color: #008000;">"Hello world"</span>) (+ 5 5))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="right" />
</colgroup>
<tbody>
<tr>
<td class="left">(1 4 9 16)</td>
<td class="left">Hello world</td>
<td class="right">10</td>
</tr>
</tbody>
</table>

<p>
Wow, it worked! Here is another example of setting up a macro and then running it.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.lisp <span style="color: #0000FF;">as</span> pl
<span style="color: #BA36A5;">s</span> = pl.Symbol
<span style="color: #BA36A5;">bq</span> = pl.Backquote
<span style="color: #BA36A5;">c</span> = pl.Comma

<span style="color: #BA36A5;">p1</span> = [s(<span style="color: #008000;">'defmacro'</span>), s(<span style="color: #008000;">'f'</span>), [s(<span style="color: #008000;">'x'</span>)],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #008000;">"A docstring"</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> bq([s(<span style="color: #008000;">'*'</span>), c(s(<span style="color: #008000;">'x'</span>)), 5])]


<span style="color: #BA36A5;">p2</span> = [s(<span style="color: #008000;">'f'</span>), 5]

<span style="color: #0000FF;">print</span>(p1.lisp)

<span style="color: #0000FF;">print</span>(p2.lisp)
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">f</span> (x) <span style="color: #036A07;">"A docstring"</span> `(* ,x 5))
(<span style="color: #0000FF;">f</span> 5)
</pre>
</div>

<pre class="example">
25
</pre>

<p>
I am not too sure where this will be super useful, but it is an interesting proof of concept. I haven't tested this much beyond the original post and this one. Let me know if you find issues with it.</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/05/30/Writing-lisp-code-from-Python.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Expanding orgmode.py to get better org-python integration]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration" />
    <id>http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration</id>
    <updated>2016-05-29T15:51:52Z</updated>
    <published>2016-05-29T14:03:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Expanding orgmode.py to get better org-python integration]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/29/Expanding-orgmode-py-to-get-better-org-python-integration"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. A Figure from Python</a></li>
<li><a href="#sec-2">2. An example table.</a></li>
<li><a href="#sec-3">3. Miscellaneous outputs</a></li>
<li><a href="#sec-4">4. Summary</a></li>
</ul>
</div>
</div>

<p>
I have only ever been about 80% satisfied with Python/org-mode integration. I have developed a particular workflow that I like a lot, and works well for solving scientific and engineering problems. I typically use stand-alone Python blocks, i.e. not sessions. I tend to use print statements to create output that I want to see, e.g. the value of a calculation. I also tend to create multiple figures in a single block, which I want to display in the buffer. This workflow is represented extensively in <a href="http://kitchingroup.cheme.cmu.edu/pycse/">PYCSE</a> and <a href="https://github.com/jkitchin/dft-book">dft-book</a> which collectively have 700+ src blocks! So I use it alot ;)
</p>

<p>
There are some deficiencies though. For one, I have had to hand build any figures/tables that are generated from the code blocks. That means duplicating filenames, adding the captions, etc&#x2026; It is not that easy to update captions from the code blocks, and there has been limited ability to use markup in the output.
</p>

<p>
Well finally I had some ideas to change this. The ideas are:
</p>

<ol class="org-ol">
<li>Patch matplotlib so that savefig actually returns a figure link that can be printed to the output. savefig works the same otherwise.
</li>

<li>Patch matplotlib.pyplot.show to save the figure, and print a figure link in thhe output.
</li>

<li>Create special functions to generate org tables and figures.
</li>

<li>Create some other functions to generate some blocks and elements.
</li>
</ol>

<p>
Then we could just import the library in our Python scripts (or add it as a prologue) and get this nice functionality. You can find the code for this here:
</p>

<p>
<a href="https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py">https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py</a> 
</p>

<p>
Finally, it seems like a good idea to specify that we want our results to be an org drawer. This makes the figures/tables export, and allows us to generate math and other markup in our programs. That has the downside of making exported results not be in the "verbatim" markup I am used to, but that may be solvable in other ways. We can make the org drawer output the default like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> org-babel-default-header-args:python
      (cons '(<span style="color: #006FE0;">:results</span> . <span style="color: #008000;">"output org drawer replace"</span>)
            (assq-delete-all <span style="color: #006FE0;">:results</span> org-babel-default-header-args)))
</pre>
</div>

<p>
With these, using Python blocks in org-mode gets quite a bit better!
</p>

<p>
Here is the first example, with savefig. I have the savefig function return the link, so we have to print it. We use this feature later. The figure is automatically inserted to the buffer. Like magic!
</p>

<p>
Here is a fun figure from <a href="http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html">http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html</a> 
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode

<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.xkcd()

<span style="color: #BA36A5;">N</span> = 150
<span style="color: #BA36A5;">r</span> = 2 * np.random.rand(N)
<span style="color: #BA36A5;">theta</span> = 2 * np.pi * np.random.rand(N)
<span style="color: #BA36A5;">area</span> = 200 * r**2 * np.random.rand(N)
<span style="color: #BA36A5;">colors</span> = theta

<span style="color: #BA36A5;">ax</span> = plt.subplot(111, polar=<span style="color: #D0372D;">True</span>)
<span style="color: #BA36A5;">c</span> = plt.scatter(theta, r, c=colors, s=area, cmap=plt.cm.hsv)
c.set_alpha(0.75)

<span style="color: #0000FF;">print</span>(plt.savefig(<span style="color: #008000;">'test.png'</span>))
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/test.png"> 
</p>
</div>

<p>
How about another example with show. This just prints the link directly. It seems to make sense to do it that way. This is from <a href="http://matplotlib.org/xkcd/examples/showcase/xkcd.html">http://matplotlib.org/xkcd/examples/showcase/xkcd.html</a> .
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

<span style="color: #0000FF;">from</span> matplotlib <span style="color: #0000FF;">import</span> pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

plt.xkcd()

<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(1, 1, 1)
ax.spines[<span style="color: #008000;">'right'</span>].set_color(<span style="color: #008000;">'none'</span>)
ax.spines[<span style="color: #008000;">'top'</span>].set_color(<span style="color: #008000;">'none'</span>)
plt.xticks([])
plt.yticks([])
ax.set_ylim([-30, 10])

<span style="color: #BA36A5;">data</span> = np.ones(100)
<span style="color: #BA36A5;">data</span>[70:] -= np.arange(30)

plt.annotate(
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #008000;">'THE DAY I REALIZED\nI COULD COOK BACON\nWHENEVER I WANTED'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   xy=(70, 1), arrowprops=<span style="color: #006FE0;">dict</span>(arrowstyle=<span style="color: #008000;">'-&gt;'</span>), xytext=(15, -10))

plt.plot(data)

plt.xlabel(<span style="color: #008000;">'time'</span>)
plt.ylabel(<span style="color: #008000;">'my overall health'</span>)
plt.show()

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">An intermediate result</span>
<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Some intermediate result for x - 4 = 6:'</span>)
<span style="color: #BA36A5;">x</span> = 6 + 4
org.fixed_width(<span style="color: #008000;">'x = {}'</span>.<span style="color: #006FE0;">format</span>(x))

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">And another figure</span>
<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(1, 1, 1)
ax.bar([-0.125, 1.0-0.125], [0, 100], 0.25)
ax.spines[<span style="color: #008000;">'right'</span>].set_color(<span style="color: #008000;">'none'</span>)
ax.spines[<span style="color: #008000;">'top'</span>].set_color(<span style="color: #008000;">'none'</span>)
ax.xaxis.set_ticks_position(<span style="color: #008000;">'bottom'</span>)
ax.set_xticks([0, 1])
ax.set_xlim([-0.5, 1.5])
ax.set_ylim([0, 110])
ax.set_xticklabels([<span style="color: #008000;">'CONFIRMED BY\nEXPERIMENT'</span>, <span style="color: #008000;">'REFUTED BY\nEXPERIMENT'</span>])
plt.yticks([])

plt.title(<span style="color: #008000;">"CLAIMS OF SUPERNATURAL POWERS"</span>)

plt.show()
</pre>
</div>

<p>
<img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/56bc77cfebd90f8a1cb22421c1c4f2c4a05fedeb.png"> 
Some intermediate result for x - 4 = 6:
</p>
<pre class="example">
x = 10
</pre>

<div class="figure">
<p><img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/2daee706d3b906a25914a6ca975906047af7fa35.png"> 
</p>
</div>

<p>
See, the figures show where they belong, with intermediate results that have some formatting, and they export correctly. Nice.
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> A Figure from Python</h2>
<div class="outline-text-2" id="text-1">
<p>
It has been a long desire of mine to generate full figures with captions from code blocks, and to get them where I want like this one:
</p>


<div id="fig:1" class="figure">
<p><img src="/media/2016-05-29-Expanding-orgmode.py-to-get-better-org-python-integration/smarts.png"> 
</p>
<p><span class="figure-number">Figure 3:</span> An italicized <i>histogram</i> of 10000 points</p>
</div>

<p>
Here is the code to generate the full figure. Note we use the output of savefig as the filename. That lets us save some intermediate variable construction. That seems nice.
</p>

<div class="org-src-container">

<pre class="src src-python" id="fig-1"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.xkcd()

<span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np
<span style="color: #0000FF;">import</span> matplotlib.mlab <span style="color: #0000FF;">as</span> mlab
<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">example data</span>
<span style="color: #BA36A5;">mu</span> = 100 <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">mean of distribution</span>
<span style="color: #BA36A5;">sigma</span> = 15 <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">standard deviation of distribution</span>
<span style="color: #BA36A5;">x</span> = mu + sigma * np.random.randn(10000)

<span style="color: #BA36A5;">num_bins</span> = 50
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the histogram of the data</span>
<span style="color: #BA36A5;">n</span>, <span style="color: #BA36A5;">bins</span>, <span style="color: #BA36A5;">patches</span> = plt.hist(x, num_bins, normed=1, facecolor=<span style="color: #008000;">'green'</span>, alpha=0.5)
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">add a 'best fit' line</span>
<span style="color: #BA36A5;">y</span> = mlab.normpdf(bins, mu, sigma)
plt.plot(bins, y, <span style="color: #008000;">'r--'</span>)
plt.xlabel(<span style="color: #008000;">'Smarts'</span>)
plt.ylabel(<span style="color: #008000;">'Probability'</span>)
plt.title(r<span style="color: #008000;">'Histogram of IQ: $\mu=100$, $\sigma=15$'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Tweak spacing to prevent clipping of ylabel</span>
plt.subplots_adjust(left=0.15)

org.figure(plt.savefig(<span style="color: #008000;">'smarts.png'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  label=<span style="color: #008000;">'fig:1'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  caption=<span style="color: #008000;">'An italicized /histogram/ of {} points'</span>.<span style="color: #006FE0;">format</span>(<span style="color: #006FE0;">len</span>(x)),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  attributes=[(<span style="color: #008000;">'LATEX'</span>, <span style="color: #008000;">':width 3in'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  (<span style="color: #008000;">'HTML'</span>, <span style="color: #008000;">':width 300'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  (<span style="color: #008000;">'ORG'</span>, <span style="color: #008000;">':width 300'</span>)])
</pre>
</div>

<p>
That is pretty awesome. You cannot put figures in more than one place like this, and you might not want to mix results with this, but it is still pretty awesome!
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> An example table.</h2>
<div class="outline-text-2" id="text-2">
<p>
Finally, I have wanted the same thing for tables. Here is the resulting table.
</p>

<table id="table-1" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> Dependence of the energy on the encut value.</caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">ENCUT</th>
<th scope="col" class="right">Energy (eV)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">100</td>
<td class="right">11.233</td>
</tr>

<tr>
<td class="right">200</td>
<td class="right">21.233</td>
</tr>

<tr>
<td class="right">300</td>
<td class="right">31.233</td>
</tr>

<tr>
<td class="right">400</td>
<td class="right">41.233</td>
</tr>

<tr>
<td class="right">500</td>
<td class="right">51.233</td>
</tr>
</tbody>
</table>

<p>
Here is the code block that generated it.
</p>

<div class="org-src-container">

<pre class="src src-python" id="table-1"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

<span style="color: #BA36A5;">data</span> = [[<span style="color: #008000;">'&lt;5&gt;'</span>, <span style="color: #008000;">'&lt;11&gt;'</span>],  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Column aligners</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   [<span style="color: #008000;">'ENCUT'</span>, <span style="color: #008000;">'Energy (eV)'</span>],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #D0372D;">None</span>]

<span style="color: #0000FF;">for</span> encut <span style="color: #0000FF;">in</span> [100, 200, 300, 400, 500]:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">data</span> += [[encut, 1.233 + 0.1 * encut]]

org.table(data,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> name=<span style="color: #008000;">'table-1'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> caption=<span style="color: #008000;">'Dependence of the energy on the encut value.'</span>)
</pre>
</div>


<p>
The only obvious improvement on this is similar to getting images to redisplay after running a code block, it might be nice to reformat tables to make sure they are pretty looking. Otherwise this is good.
</p>


<p>
Let's go ahead and try that. Here we narrow down to the results, and align the tables in that region.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-align-visible-tables</span> ()
  <span style="color: #036A07;">"Align all the tables in the results."</span>
  (<span style="color: #0000FF;">let</span> ((location (org-babel-where-is-src-block-result)) start)
    (<span style="color: #0000FF;">when</span> location
      (<span style="color: #0000FF;">setq</span> start (- location 1))
      (<span style="color: #0000FF;">save-restriction</span>
        (<span style="color: #0000FF;">save-excursion</span>
          (goto-char location) (forward-line 1)
          (narrow-to-region start (org-babel-result-end))
          (goto-char (point-min))
          (<span style="color: #0000FF;">while</span> (re-search-forward org-table-any-line-regexp nil t)
            (<span style="color: #0000FF;">save-excursion</span> (org-table-align))
            (<span style="color: #0000FF;">or</span> (looking-at org-table-line-regexp)
                (forward-char 1)))
          (re-search-forward org-table-any-border-regexp nil 1))))))

(add-hook 'org-babel-after-execute-hook
          (<span style="color: #0000FF;">lambda</span> () (org-align-visible-tables)))
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">lambda</td>
<td class="left">nil</td>
<td class="left">(org-align-visible-tables)</td>
</tr>

<tr>
<td class="left">lambda</td>
<td class="left">nil</td>
<td class="left">(org-refresh-images)</td>
</tr>
</tbody>
</table>

<p>
And that seems to solve that problem now too!
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Miscellaneous outputs</h2>
<div class="outline-text-2" id="text-3">
<p>
Here are some examples of getting org-output from the pycse.orgmode module.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> pycse.orgmode <span style="color: #0000FF;">as</span> org

org.verbatim(<span style="color: #008000;">'One liner verbatim'</span>)

org.verbatim(<span style="color: #008000;">'''multiline</span>
<span style="color: #008000;">output</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  with indentation</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">  at a few levels</span>
<span style="color: #008000;">that is verbatim.'''</span>)

org.fixed_width(<span style="color: #008000;">'your basic result'</span>)

org.fixed_width(<span style="color: #008000;">'''your</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;"> basic</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #008000;">   result</span>
<span style="color: #008000;">on a few lines.'''</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">A latex block</span>
org.latex(<span style="color: #008000;">'\(e^{i\pi} - 1 = 0\)'</span>)

org.org(r<span style="color: #008000;">'The equation is \(E = h \nu\).'</span>)
</pre>
</div>
<p>
<code>One liner</code>
</p>

<pre class="example">
multiline
output
   with indentation
       at a few levels
that is verbatim.
</pre>

<pre class="example">
your basic result
your
  basic
    result
on a few lines.
</pre>

<p>
The equation is \(E = h \nu\).
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Summary</h2>
<div class="outline-text-2" id="text-4">
<p>
This looks promising to me. There are a few things to get used to, like always having org output, and some minor differences in making figures. On the whole this looks like a big improvement though! I look forward to working with it more.</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/05/29/Expanding-orgmode.py-to-get-better-org-python-integration.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
