<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-04-06T20:42:11Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another step towards HyDE]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/06/Another-step-towards-HyDE" />
    <id>http://jkitchin.github.io/blog/2016/04/06/Another-step-towards-HyDE</id>
    <updated>2016-04-06T16:41:57Z</updated>
    <published>2016-04-06T16:41:57Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[Another step towards HyDE]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/06/Another-step-towards-HyDE"><![CDATA[




<p>
<img src="/media/2016-04-06-Another-step-towards-HyDE/Hyde.png"> 
(In case that isn't clear, it is a Python with a Lisp, and somewhat how I feel trying to see what this is all about ;)
</p>

<p>
I have been chipping away at HyDE, the Hy Development Environment. So far I have reasonable support for eldoc in hy code, and some integration into lispy.
</p>

<p>
The executive summary here is:
</p>
<ol class="org-ol">
<li>We have a first approach at getting eldoc to work.
</li>
<li>We have better integration with lispy, including the inline describe and arg functionality, and jump to symbol.
</li>
</ol>

<p>
You may want to just watch the video to see what it is about: <a href="https://www.youtube.com/watch?v=m62oiB6Feeo">https://www.youtube.com/watch?v=m62oiB6Feeo</a> 
</p>

<p>
The full details of these implementations are described at the end of this post. For now, we just load the functionality here:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">mile-hy</span>)
</pre>
</div>

<pre class="example">
mile-hy
</pre>

<p>
Some examples of usage:
</p>

<div class="org-src-container">

<pre class="src src-hy">(list (<span style="color: #006FE0;">butlast</span> [12 34 56]))
</pre>
</div>

<pre class="example">
[12L, 34L]
</pre>




<p>
For details of the implementations see the following discussion.
</p>

<p>
<a href="https://github.com/jkitchin/jmax/blob/master/mile-hy.el">https://github.com/jkitchin/jmax/blob/master/mile-hy.el</a> includes:
</p>
<ul class="org-ul">
<li>Setting up hy-mode with a repl (partly from lispy)
</li>
<li>an eldoc function
</li>
<li>some hooks for hy-mode to setup some functionality.
</li>
<li>A hy src block expansion template for org-mode
</li>
<li>the contents of what I previously called ob-hy.el
</li>
</ul>

<p>
These things don't work without the code at <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy">https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy</a> which provides some hy functions to get eldoc strings, and file locations. These are still work in progress, but functional at this point.
</p>

<p>
I also adapted some parts of lispy to support hy better in my fork:
</p>
<ul class="org-ul">
<li><a href="https://github.com/jkitchin/lispy/blob/hydoc/le-hy.el">https://github.com/jkitchin/lispy/blob/hydoc/le-hy.el</a> 
</li>
<li><a href="https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el">https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el</a> 
</li>
</ul>

<p>
These are not fully ready to be integrated to lispy yet, as the functionality here depends on the hy code (in hylp.hy) that isn't part of hy yet. I hacked lispy anyway to see how easy it would be to extend it for hy. So far, it looks promising.
</p>

<p>
All of these put together lead to:
</p>
<ol class="org-ol">
<li><a href="https://github.com/jkitchin/jmax/blob/master/mile-hy.el#L20">eldoc support in hy</a> code
</li>
<li>lispy support for <a href="https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el#L247">C-1 descriptions</a> and <a href="https://github.com/jkitchin/lispy/blob/hydoc/lispy-inline.el#L147">C-2 args</a> inline.
</li>
<li>lispy support for <a href="https://github.com/jkitchin/lispy/blob/hydoc/le-hy.el#L121">M-. to jump</a> to symbol definitions (although it is a tad hacky and uses <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy#L342">hy to generate an org-link</a> to open the code files at the line of the definition ;).
</li>
</ol>

<p>
It is far from fully functional and there are some issues to resolve. The code will also probably change as I resolve some of those issues, but it works well enough to put some ideas out there. Feedback is welcome!
</p>

<p>
The eldoc functions work pretty well for the hy stuff. They don't work too well on the python side. The function at <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy#L120">https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy#L120</a> is where some improvement is needed. Right now it really only catches a few types of symbols.
</p>

<p>
For learning hylang a documentation sprint would be great.
</p>
<ol class="org-ol">
<li>Add examples to the functions.
</li>
<li>Add documentation to the compiler @build definitions. Find a way to make this discoverable the way they are for functions and macros.
</li>
<li>Figure out how to get Python help in. It might be confusing because the syntax and examples will be different.
</li>
</ol>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/06/Another-step-towards-HyDE.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Getting hylp in hy]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/03/Getting-hylp-in-hy" />
    <id>http://jkitchin.github.io/blog/2016/04/03/Getting-hylp-in-hy</id>
    <updated>2016-04-03T20:18:07Z</updated>
    <published>2016-04-03T19:41:52Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[Getting hylp in hy]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/03/Getting-hylp-in-hy"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. hy version  0.11.0</a>
<ul>
<li><a href="#sec-1-1">1.1. Language</a></li>
<li><a href="#sec-1-2">1.2. Shadowed</a></li>
<li><a href="#sec-1-3">1.3. Macros</a></li>
<li><a href="#sec-1-4">1.4. Compiler functions</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
Hylang is a composite of hy functions, macros, compiler code, and Python. To me, this makes it critical to get to documentation and code easily to figure out what is happening. Here we look at how to get help.
</p>

<p>
I have hacked something called hydoc for hylang. This was a battle! There are functions, macros, and builtins that are defined in different places, and some things defined in hy, some in python, and some are done at compile time, &#x2026; I found a lot of things, but there are still some corner cases I am sure. For some information, I resorted to parsing the source files myself to get arguments and file positions.
</p>

<p>
See the main code here: <a href="https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy">https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy</a> and the cmd-line script here: <a href="https://github.com/jkitchin/hy/blob/hydoc/bin/hydoc">https://github.com/jkitchin/hy/blob/hydoc/bin/hydoc</a> 
</p>

<p>
It is the beginning of the HyDE, or Hy Development in Emacs. This is a precursor to getting eldoc working in Emacs for Hy. So, without further delay, here is an example command-line use. It is not too fast, but it works.
</p>

<div class="org-src-container">

<pre class="src src-sh">hydoc butlast
</pre>
</div>

<pre class="example">
Usage: Usage: (butlast coll)

Returns coll except of last element.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::46]]
</pre>

<p>
Yep, that is an org-mode link that jumps right to the source definition (in Emacs of course). We can also use it in hy. I have for now put this library (which contains functions and macros) in hy.core.hylp. It may not stay there.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [hy.core.hylp [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">hy.core.hylp</span>)

(? <span style="color: #008000;">"with"</span>)
</pre>
</div>

<pre class="example">
Usage: (with args &amp;rest body)

shorthand for nested with* loops:
  (with [x foo y bar] baz) -&gt;
  (with* [x foo]
    (with* [y bar]
      baz))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::34]]
</pre>

<p>
Compare that to:
</p>
<div class="org-src-container">

<pre class="src src-hy">(help butlast)
</pre>
</div>

<pre class="example">
Help on function butlast in module hy.core.language:

butlast(coll)
    Returns coll except of last element.
</pre>

<p>
pydoc/? is better because it works on macros too, and gives you more information, and in the form that you use in hy, e.g. <code>(butlast coll)</code> not <code>butlast(coll)</code>.
</p>

<p>
I should point out, this is not in hy core anywhere by my github fork right now. It is still being developed. And it isn't perfect or comprehensive yet.
</p>

<p>
Let's see how good. How about we auto-generate some documentation? We will try to generate help for all the core language functions, shadowed functions, macros, and the compiler @build functions.
</p>

<p>
This is still hackier than I would like, but there is some tricky name-mangling in hy if there is a - in the name, e.g. what we use for minus, and also if there is a * in the name, it seems to get expanded. I still don't understand why I need to eval all of this here, but it works, and I get an error about no attribute named key if I don't. It seems to have some consequences though of turning some things into Python objects (especially itertools). It is good enough to share for now. Maybe someone will have a good idea ;)
</p>

<p>
Here is the code that generates the docs with (in org-mode) links to the source! The output follows, and is pretty long. The nice thing about this is the docs are <i>generated</i>, so we can update them pretty readily with new versions.
</p>

<p>
One thing that stands out is the lack of documentation on the compiler defined things. It might be worth figuring out how to put documentation on them, perhaps as an optional argument to the build decorator?
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [hy.core.hylp [*]])
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">hy.core.hylp</span>)

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"*** hy version "</span> (. hy __version__))
(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Language"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-language-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Shadowed"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-shadow-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Macros"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-macro-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))

(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"**** Compiler functions"</span>)
(<span style="color: #0000FF;">for</span> [key (sorted (hy-compiler-keywords))]
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"***** "</span> key)
  (<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">eval</span> `(? ~(<span style="color: #006FE0;">string</span> key)))))
</pre>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> hy version  0.11.0</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Language</h3>
<div class="outline-text-3" id="text-1-1">
</div><ol class="org-ol"><li><a id="sec-1-1-1" name="sec-1-1-1"></a>*map<br  /><div class="outline-text-4" id="text-1-1-1">
<p>
Usage: (*map unknown args)
</p>

<p>
starmap(function, sequence) &#x2013;&gt; starmap object
</p>

<p>
Return an iterator whose values are returned from the function evaluated
with a argument tuple taken from the given sequence.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-2" name="sec-1-1-2"></a>accumulate<br  /><div class="outline-text-4" id="text-1-1-2">
<p>
Usage: (accumulate iterable &amp;optional [func operator.add])
</p>

<p>
accumulate(iterable[, func]) &#x2013;&gt; accumulate object
</p>

<p>
Return series of accumulated sums (or other binary function results).
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-3" name="sec-1-1-3"></a>butlast<br  /><div class="outline-text-4" id="text-1-1-3">
<p>
Usage: (butlast coll)
</p>

<p>
Returns coll except of last element.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-4" name="sec-1-1-4"></a>calling_module_name<br  /><div class="outline-text-4" id="text-1-1-4">
<p>
Usage: (calling_module_name &amp;optional [n 1])
</p>

<p>
Get the name of the module calling `n` levels up the stack from the
  `calling-module-name` function call (by default, one level up)
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-5" name="sec-1-1-5"></a>chain<br  /><div class="outline-text-4" id="text-1-1-5">
<p>
Usage: (chain unknown args)
</p>

<p>
chain(*iterables) &#x2013;&gt; chain object
</p>

<p>
Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-6" name="sec-1-1-6"></a>combinations<br  /><div class="outline-text-4" id="text-1-1-6">
<p>
Usage: (combinations unknown args)
</p>

<p>
combinations(iterable, r) &#x2013;&gt; combinations object
</p>

<p>
Return successive r-length combinations of elements in the iterable.
</p>

<p>
combinations(range(4), 3) &#x2013;&gt; (0,1,2), (0,1,3), (0,2,3), (1,2,3)
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-7" name="sec-1-1-7"></a>compress<br  /><div class="outline-text-4" id="text-1-1-7">
<p>
Usage: (compress unknown args)
</p>

<p>
compress(data, selectors) &#x2013;&gt; iterator over selected data
</p>

<p>
Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-8" name="sec-1-1-8"></a>cons<br  /><div class="outline-text-4" id="text-1-1-8">
<p>
Usage: (cons a b)
</p>

<p>
Return a fresh cons cell with car = a and cdr = b
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-9" name="sec-1-1-9"></a>count<br  /><div class="outline-text-4" id="text-1-1-9">
<p>
Usage: (count unknown args)
</p>

<p>
count(start=0, step=1) &#x2013;&gt; count object
</p>

<p>
Return a count object whose .next() method returns consecutive values.
Equivalent to:
</p>

<p>
def count(firstval=0, step=1):
    x = firstval
    while 1:
        yield x
        x += step
</p>


<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-10" name="sec-1-1-10"></a>cycle<br  /><div class="outline-text-4" id="text-1-1-10">
<p>
Usage: (cycle unknown args)
</p>

<p>
cycle(iterable) &#x2013;&gt; cycle object
</p>

<p>
Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-11" name="sec-1-1-11"></a>dec<br  /><div class="outline-text-4" id="text-1-1-11">
<p>
Usage: (dec n)
</p>

<p>
Decrement n by 1
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-12" name="sec-1-1-12"></a>disassemble<br  /><div class="outline-text-4" id="text-1-1-12">
<p>
Usage: (disassemble tree &amp;optional [codegen false])
</p>

<p>
Return the python AST for a quoted Hy tree as a string.
   If the second argument is true, generate python code instead.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-13" name="sec-1-1-13"></a>distinct<br  /><div class="outline-text-4" id="text-1-1-13">
<p>
Usage: (distinct coll)
</p>

<p>
Return a generator from the original collection with duplicates
   removed
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-14" name="sec-1-1-14"></a>drop<br  /><div class="outline-text-4" id="text-1-1-14">
<p>
Usage: (drop count coll)
</p>

<p>
Drop `count` elements from `coll` and yield back the rest
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-15" name="sec-1-1-15"></a>drop_last<br  /><div class="outline-text-4" id="text-1-1-15">
<p>
Usage: (drop_last n coll)
</p>

<p>
Return a sequence of all but the last n elements in coll.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-16" name="sec-1-1-16"></a>drop_while<br  /><div class="outline-text-4" id="text-1-1-16">
<p>
Usage: (drop_while unknown args)
</p>

<p>
dropwhile(predicate, iterable) &#x2013;&gt; dropwhile object
</p>

<p>
Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-17" name="sec-1-1-17"></a>filter<br  /><div class="outline-text-4" id="text-1-1-17">
<p>
Usage: (filter unknown args)
</p>

<p>
ifilter(function or None, sequence) &#x2013;&gt; ifilter object
</p>

<p>
Return those items of sequence for which function(item) is true.
If function is None, return the items that are true.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-18" name="sec-1-1-18"></a>first<br  /><div class="outline-text-4" id="text-1-1-18">
<p>
Usage: (first coll)
</p>

<p>
Return first item from `coll`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-19" name="sec-1-1-19"></a>flatten<br  /><div class="outline-text-4" id="text-1-1-19">
<p>
Usage: (flatten coll)
</p>

<p>
Return a single flat list expanding all members of coll
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-20" name="sec-1-1-20"></a>fraction<br  /><div class="outline-text-4" id="text-1-1-20">
<p>
Usage: (fraction unknown args)
</p>

<p>
This class implements rational numbers.
</p>

<p>
In the two-argument form of the constructor, Fraction(8, 6) will
produce a rational number equivalent to 4/3. Both arguments must
be Rational. The numerator defaults to 0 and the denominator
defaults to 1 so that Fraction(3) <code>= 3 and Fraction() =</code> 0.
</p>

<p>
Fractions can also be constructed from:
</p>

<ul class="org-ul">
<li>numeric strings similar to those accepted by the
float constructor (for example, '-2.3' or '1e10')
</li>

<li>strings of the form '123/456'
</li>

<li>float and Decimal instances
</li>

<li>other Rational instances (including integers)
</li>
</ul>



<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-21" name="sec-1-1-21"></a>gensym<br  /><div class="outline-text-4" id="text-1-1-21">
<p>
Usage: (gensym &amp;optional [g "G"])
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-22" name="sec-1-1-22"></a>group_by<br  /><div class="outline-text-4" id="text-1-1-22">
<p>
Usage: (group_by unknown args)
</p>

<p>
groupby(iterable[, keyfunc]) -&gt; create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).
</p>


<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-23" name="sec-1-1-23"></a>identity<br  /><div class="outline-text-4" id="text-1-1-23">
<p>
Usage: (identity x)
</p>

<p>
Returns the argument unchanged
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-24" name="sec-1-1-24"></a>inc<br  /><div class="outline-text-4" id="text-1-1-24">
<p>
Usage: (inc n)
</p>

<p>
Increment n by 1
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-25" name="sec-1-1-25"></a>input<br  /><div class="outline-text-4" id="text-1-1-25">
<p>
Usage: (input unknown args)
</p>

<p>
raw_input([prompt]) -&gt; string
</p>

<p>
Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-26" name="sec-1-1-26"></a>integer<br  /><div class="outline-text-4" id="text-1-1-26">
<p>
Usage: (integer x)
</p>

<p>
Return Hy kind of integer
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-27" name="sec-1-1-27"></a>interleave<br  /><div class="outline-text-4" id="text-1-1-27">
<p>
Usage: (interleave &amp;rest seqs)
</p>

<p>
Return an iterable of the first item in each of seqs, then the second etc.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-28" name="sec-1-1-28"></a>interpose<br  /><div class="outline-text-4" id="text-1-1-28">
<p>
Usage: (interpose item seq)
</p>

<p>
Return an iterable of the elements of seq separated by item
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-29" name="sec-1-1-29"></a>is_coll<br  /><div class="outline-text-4" id="text-1-1-29">
<p>
Usage: (is_coll coll)
</p>

<p>
Checks whether item is a collection
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-30" name="sec-1-1-30"></a>is_cons<br  /><div class="outline-text-4" id="text-1-1-30">
<p>
Usage: (is_cons c)
</p>

<p>
Check whether c can be used as a cons object
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-31" name="sec-1-1-31"></a>is_empty<br  /><div class="outline-text-4" id="text-1-1-31">
<p>
Usage: (is_empty coll)
</p>

<p>
Return True if `coll` is empty
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-32" name="sec-1-1-32"></a>is_even<br  /><div class="outline-text-4" id="text-1-1-32">
<p>
Usage: (is_even n)
</p>

<p>
Return true if n is an even number
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-33" name="sec-1-1-33"></a>is_every<br  /><div class="outline-text-4" id="text-1-1-33">
<p>
Usage: (is_every pred coll)
</p>

<p>
Return true if (pred x) is logical true for every x in coll, else false
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-34" name="sec-1-1-34"></a>is_float<br  /><div class="outline-text-4" id="text-1-1-34">
<p>
Usage: (is_float x)
</p>

<p>
Return True if x is float
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-35" name="sec-1-1-35"></a>is_instance<br  /><div class="outline-text-4" id="text-1-1-35">
<p>
Usage: (is_instance klass x)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-36" name="sec-1-1-36"></a>is_integer<br  /><div class="outline-text-4" id="text-1-1-36">
<p>
Usage: (is_integer x)
</p>

<p>
Return True if x in an integer
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-37" name="sec-1-1-37"></a>is_integer_char<br  /><div class="outline-text-4" id="text-1-1-37">
<p>
Usage: (is_integer_char x)
</p>

<p>
Return True if char `x` parses as an integer
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-38" name="sec-1-1-38"></a>is_iterable<br  /><div class="outline-text-4" id="text-1-1-38">
<p>
Usage: (is_iterable x)
</p>

<p>
Return true if x is iterable
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-39" name="sec-1-1-39"></a>is_iterator<br  /><div class="outline-text-4" id="text-1-1-39">
<p>
Usage: (is_iterator x)
</p>

<p>
Return true if x is an iterator
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-40" name="sec-1-1-40"></a>is_keyword<br  /><div class="outline-text-4" id="text-1-1-40">
<p>
Usage: (is_keyword k)
</p>

<p>
Check whether k is a keyword
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-41" name="sec-1-1-41"></a>is_neg<br  /><div class="outline-text-4" id="text-1-1-41">
<p>
Usage: (is_neg n)
</p>

<p>
Return true if n is &lt; 0
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-42" name="sec-1-1-42"></a>is_nil<br  /><div class="outline-text-4" id="text-1-1-42">
<p>
Usage: (is_nil x)
</p>

<p>
Return true if x is nil (None)
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-43" name="sec-1-1-43"></a>is_none<br  /><div class="outline-text-4" id="text-1-1-43">
<p>
Usage: (is_none x)
</p>

<p>
Return true if x is None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-44" name="sec-1-1-44"></a>is_numeric<br  /><div class="outline-text-4" id="text-1-1-44">
<p>
Usage: (is_numeric x)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-45" name="sec-1-1-45"></a>is_odd<br  /><div class="outline-text-4" id="text-1-1-45">
<p>
Usage: (is_odd n)
</p>

<p>
Return true if n is an odd number
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-46" name="sec-1-1-46"></a>is_pos<br  /><div class="outline-text-4" id="text-1-1-46">
<p>
Usage: (is_pos n)
</p>

<p>
Return true if n is &gt; 0
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-47" name="sec-1-1-47"></a>is_string<br  /><div class="outline-text-4" id="text-1-1-47">
<p>
Usage: (is_string x)
</p>

<p>
Return True if x is a string
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-48" name="sec-1-1-48"></a>is_symbol<br  /><div class="outline-text-4" id="text-1-1-48">
<p>
Usage: (is_symbol s)
</p>

<p>
Check whether s is a symbol
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-49" name="sec-1-1-49"></a>is_zero<br  /><div class="outline-text-4" id="text-1-1-49">
<p>
Usage: (is_zero n)
</p>

<p>
Return true if n is 0
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-50" name="sec-1-1-50"></a>islice<br  /><div class="outline-text-4" id="text-1-1-50">
<p>
Usage: (islice unknown args)
</p>

<p>
islice(iterable, [start,] stop [, step]) &#x2013;&gt; islice object
</p>

<p>
Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-51" name="sec-1-1-51"></a>iterate<br  /><div class="outline-text-4" id="text-1-1-51">
<p>
Usage: (iterate f x)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-52" name="sec-1-1-52"></a>keyword<br  /><div class="outline-text-4" id="text-1-1-52">
<p>
Usage: (keyword value)
</p>

<p>
Create a keyword from the given value. Strings numbers and even objects
  with the <span class="underline"><span class="underline">name</span></span> magic will work
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-53" name="sec-1-1-53"></a>last<br  /><div class="outline-text-4" id="text-1-1-53">
<p>
Usage: (last coll)
</p>

<p>
Return last item from `coll`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-54" name="sec-1-1-54"></a>list*<br  /><div class="outline-text-4" id="text-1-1-54">
<p>
Usage: (list* hd &amp;rest tl)
</p>

<p>
Return a dotted list construed from the elements of the argument
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-55" name="sec-1-1-55"></a>macroexpand<br  /><div class="outline-text-4" id="text-1-1-55">
<p>
Usage: (macroexpand form)
</p>

<p>
Return the full macro expansion of form
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-56" name="sec-1-1-56"></a>macroexpand_1<br  /><div class="outline-text-4" id="text-1-1-56">
<p>
Usage: (macroexpand_1 form)
</p>

<p>
Return the single step macro expansion of form
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-57" name="sec-1-1-57"></a>map<br  /><div class="outline-text-4" id="text-1-1-57">
<p>
Usage: (map unknown args)
</p>

<p>
imap(func, *iterables) &#x2013;&gt; imap object
</p>

<p>
Make an iterator that computes the function using arguments from
each of the iterables.  Like map() except that it returns
an iterator instead of a list and that it stops when the shortest
iterable is exhausted instead of filling in None for shorter
iterables.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-58" name="sec-1-1-58"></a>merge_with<br  /><div class="outline-text-4" id="text-1-1-58">
<p>
Usage: (merge_with f &amp;rest maps)
</p>

<p>
Returns a map that consists of the rest of the maps joined onto
   the first. If a key occurs in more than one map, the mapping(s)
   from the latter (left-to-right) will be combined with the mapping in
   the result by calling (f val-in-result val-in-latter).
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-59" name="sec-1-1-59"></a>multicombinations<br  /><div class="outline-text-4" id="text-1-1-59">
<p>
Usage: (multicombinations unknown args)
</p>

<p>
combinations_with_replacement(iterable, r) &#x2013;&gt; combinations_with_replacement object
</p>

<p>
Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) &#x2013;&gt; AA AB AC BB BC CC
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-60" name="sec-1-1-60"></a>name<br  /><div class="outline-text-4" id="text-1-1-60">
<p>
Usage: (name value)
</p>

<p>
Convert the given value to a string. Keyword special character will be stripped.
  String will be used as is. Even objects with the <span class="underline"><span class="underline">name</span></span> magic will work
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-61" name="sec-1-1-61"></a>nth<br  /><div class="outline-text-4" id="text-1-1-61">
<p>
Usage: (nth coll n &amp;optional [default nil])
</p>

<p>
Return nth item in collection or sequence, counting from 0.
   Return nil if out of bounds unless specified otherwise.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-62" name="sec-1-1-62"></a>partition<br  /><div class="outline-text-4" id="text-1-1-62">
<p>
Usage: (partition coll &amp;optional [n 2] step [fillvalue -sentinel])
</p>

<p>
Chunks coll into n-tuples (pairs by default). The remainder, if any, is not
   included unless a fillvalue is specified. The step defaults to n, but can be
   more to skip elements, or less for a sliding window with overlap.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-63" name="sec-1-1-63"></a>permutations<br  /><div class="outline-text-4" id="text-1-1-63">
<p>
Usage: (permutations unknown args)
</p>

<p>
permutations(iterable[, r]) &#x2013;&gt; permutations object
</p>

<p>
Return successive r-length permutations of elements in the iterable.
</p>

<p>
permutations(range(3), 2) &#x2013;&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-64" name="sec-1-1-64"></a>product<br  /><div class="outline-text-4" id="text-1-1-64">
<p>
Usage: (product unknown args)
</p>

<p>
product(*iterables) &#x2013;&gt; product object
</p>

<p>
Cartesian product of input iterables.  Equivalent to nested for-loops.
</p>

<p>
For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).
</p>

<p>
To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).
</p>

<p>
product('ab', range(3)) &#x2013;&gt; ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) &#x2013;&gt; (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) &#x2026;
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-65" name="sec-1-1-65"></a>range<br  /><div class="outline-text-4" id="text-1-1-65">
<p>
Usage: (range unknown args)
</p>

<p>
xrange(stop) -&gt; xrange object
xrange(start, stop[, step]) -&gt; xrange object
</p>

<p>
Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is
slightly faster than range() and more memory efficient.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-66" name="sec-1-1-66"></a>read<br  /><div class="outline-text-4" id="text-1-1-66">
<p>
Usage: (read &amp;optional [from-file sys.stdin] [eof ""])
</p>

<p>
Read from input and returns a tokenized string.
   Can take a given input buffer to read from
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-67" name="sec-1-1-67"></a>read_str<br  /><div class="outline-text-4" id="text-1-1-67">
<p>
Usage: (read_str input)
</p>

<p>
Reads and tokenizes first line of input
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-68" name="sec-1-1-68"></a>reduce<br  /><div class="outline-text-4" id="text-1-1-68">
<p>
Usage: (reduce unknown args)
</p>

<p>
reduce(function, sequence[, initial]) -&gt; value
</p>

<p>
Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-69" name="sec-1-1-69"></a>remove<br  /><div class="outline-text-4" id="text-1-1-69">
<p>
Usage: (remove unknown args)
</p>

<p>
ifilterfalse(function or None, sequence) &#x2013;&gt; ifilterfalse object
</p>

<p>
Return those items of sequence for which function(item) is false.
If function is None, return the items that are false.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-70" name="sec-1-1-70"></a>repeat<br  /><div class="outline-text-4" id="text-1-1-70">
<p>
Usage: (repeat unknown args)
</p>

<p>
repeat(object [,times]) -&gt; create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-71" name="sec-1-1-71"></a>repeatedly<br  /><div class="outline-text-4" id="text-1-1-71">
<p>
Usage: (repeatedly func)
</p>

<p>
Yield result of running func repeatedly
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-72" name="sec-1-1-72"></a>rest<br  /><div class="outline-text-4" id="text-1-1-72">
<p>
Usage: (rest coll)
</p>

<p>
Get all the elements of a coll, except the first.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-73" name="sec-1-1-73"></a>second<br  /><div class="outline-text-4" id="text-1-1-73">
<p>
Usage: (second coll)
</p>

<p>
Return second item from `coll`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-74" name="sec-1-1-74"></a>some<br  /><div class="outline-text-4" id="text-1-1-74">
<p>
Usage: (some pred coll)
</p>

<p>
Return the first logical true value of (pred x) for any x in coll, else nil
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-75" name="sec-1-1-75"></a>string<br  /><div class="outline-text-4" id="text-1-1-75">
<p>
Usage: (string x)
</p>

<p>
Cast x as current string implementation
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-76" name="sec-1-1-76"></a>take<br  /><div class="outline-text-4" id="text-1-1-76">
<p>
Usage: (take count coll)
</p>

<p>
Take `count` elements from `coll`, or the whole set if the total
    number of entries in `coll` is less than `count`.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-77" name="sec-1-1-77"></a>take_nth<br  /><div class="outline-text-4" id="text-1-1-77">
<p>
Usage: (take_nth n coll)
</p>

<p>
Return every nth member of coll
     raises ValueError for (not (pos? n))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-78" name="sec-1-1-78"></a>take_while<br  /><div class="outline-text-4" id="text-1-1-78">
<p>
Usage: (take_while unknown args)
</p>

<p>
takewhile(predicate, iterable) &#x2013;&gt; takewhile object
</p>

<p>
Return successive entries from an iterable as long as the
predicate evaluates to true for each entry.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-79" name="sec-1-1-79"></a>tee<br  /><div class="outline-text-4" id="text-1-1-79">
<p>
Usage: (tee unknown args)
</p>

<p>
tee(iterable, n=2) &#x2013;&gt; tuple of n independent iterators.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-80" name="sec-1-1-80"></a>xor<br  /><div class="outline-text-4" id="text-1-1-80">
<p>
Usage: (xor a b)
</p>

<p>
Perform exclusive or between two parameters
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/language.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-1-81" name="sec-1-1-81"></a>zip<br  /><div class="outline-text-4" id="text-1-1-81">
<p>
Usage: (zip unknown args)
</p>

<p>
izip(iter1 [,iter2 [&#x2026;]]) &#x2013;&gt; izip object
</p>

<p>
Return a izip object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.  Works like the zip()
function but consumes less memory by returning an iterator instead of
a list.
</p>

<p>
<i>no code::-1</i>
</p>
</div>
</li>

<li><a id="sec-1-1-82" name="sec-1-1-82"></a>zip_longest<br  /><div class="outline-text-4" id="text-1-1-82">
<p>
Usage: (zip_longest unknown args)
</p>

<p>
izip_longest(iter1 [,iter2 [&#x2026;]], [fillvalue=None]) &#x2013;&gt; izip_longest object
</p>

<p>
Return an izip_longest object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.
</p>


<p>
<i>no code::-1</i>
</p>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> Shadowed</h3>
<div class="outline-text-3" id="text-1-2">
</div><ol class="org-ol"><li><a id="sec-1-2-1" name="sec-1-2-1"></a>!=<br  /><div class="outline-text-4" id="text-1-2-1">
<p>
Usage: (!= &amp;rest args)
</p>

<p>
Shadow != operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-2" name="sec-1-2-2"></a>*<br  /><div class="outline-text-4" id="text-1-2-2">
<p>
Usage: (* &amp;rest args)
</p>

<p>
Shadow * operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-3" name="sec-1-2-3"></a>+<br  /><div class="outline-text-4" id="text-1-2-3">
<p>
Usage: (+ &amp;rest args)
</p>

<p>
Shadow + operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-4" name="sec-1-2-4"></a>-<br  /><div class="outline-text-4" id="text-1-2-4">
<p>
Usage: (- &amp;rest args)
</p>

<p>
Shadow - operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-5" name="sec-1-2-5"></a>/<br  /><div class="outline-text-4" id="text-1-2-5">
<p>
Usage: (/ &amp;rest args)
</p>

<p>
Shadow / operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-6" name="sec-1-2-6"></a>&lt;<br  /><div class="outline-text-4" id="text-1-2-6">
<p>
Usage: (&lt; &amp;rest args)
</p>

<p>
Shadow &lt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-7" name="sec-1-2-7"></a>&lt;=<br  /><div class="outline-text-4" id="text-1-2-7">
<p>
Usage: (&lt;= &amp;rest args)
</p>

<p>
Shadow &lt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-8" name="sec-1-2-8"></a>=<br  /><div class="outline-text-4" id="text-1-2-8">
<p>
Usage: (= &amp;rest args)
</p>

<p>
Shadow = operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-9" name="sec-1-2-9"></a>&gt;<br  /><div class="outline-text-4" id="text-1-2-9">
<p>
Usage: (&gt; &amp;rest args)
</p>

<p>
Shadow &gt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-2-10" name="sec-1-2-10"></a>&gt;=<br  /><div class="outline-text-4" id="text-1-2-10">
<p>
Usage: (&gt;= &amp;rest args)
</p>

<p>
Shadow &gt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3"><span class="section-number-3">1.3</span> Macros</h3>
<div class="outline-text-3" id="text-1-3">
</div><ol class="org-ol"><li><a id="sec-1-3-1" name="sec-1-3-1"></a>?<br  /><div class="outline-text-4" id="text-1-3-1">
<p>
Usage: (? sym)
</p>

<p>
Return help for SYM which is a string.
</p>

<p>
<a href="/media/2016-04-03-Getting-hylp-in-hy/hylp.hy">hylp.hy</a> 
</p>
</div>
</li>

<li><a id="sec-1-3-2" name="sec-1-3-2"></a>_&gt;<br  /><div class="outline-text-4" id="text-1-3-2">
<p>
Usage: (_&gt; head &amp;rest rest)
</p>

<p>
Threads the head through the rest of the forms. Inserts
   head as the second item in the first form of rest. If
   there are more forms, inserts the first form as the
   second item in the second form of rest, etc.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-3" name="sec-1-3-3"></a>_&gt;&gt;<br  /><div class="outline-text-4" id="text-1-3-3">
<p>
Usage: (_&gt;&gt; head &amp;rest rest)
</p>

<p>
Threads the head through the rest of the forms. Inserts
   head as the last item in the first form of rest. If there
   are more forms, inserts the first form as the last item
   in the second form of rest, etc.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-4" name="sec-1-3-4"></a>car<br  /><div class="outline-text-4" id="text-1-3-4">
<p>
Usage: (car thing)
</p>

<p>
Get the first element of a list/cons
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-5" name="sec-1-3-5"></a>cdr<br  /><div class="outline-text-4" id="text-1-3-5">
<p>
Usage: (cdr thing)
</p>

<p>
Get all the elements of a thing, except the first
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-6" name="sec-1-3-6"></a>cond<br  /><div class="outline-text-4" id="text-1-3-6">
<p>
Usage: (cond &amp;rest branches)
</p>

<p>
shorthand for nested ifs:
   (cond [foo bar] [baz quux]) -&gt;
   (if foo
     bar
     (if baz
       quux))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-7" name="sec-1-3-7"></a>defmacro/g_bang<br  /><div class="outline-text-4" id="text-1-3-7">
<p>
Usage: (defmacro/g_bang name args &amp;rest body)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-8" name="sec-1-3-8"></a>defmain<br  /><div class="outline-text-4" id="text-1-3-8">
<p>
Usage: (defmain args &amp;rest body)
</p>

<p>
Write a function named "main" and do the if <span class="underline"><span class="underline">main</span></span> dance
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-9" name="sec-1-3-9"></a>defn<br  /><div class="outline-text-4" id="text-1-3-9">
<p>
Usage: (defn name lambda-list &amp;rest body)
</p>

<p>
define a function `name` with signature `lambda-list` and body `body`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-10" name="sec-1-3-10"></a>doto<br  /><div class="outline-text-4" id="text-1-3-10">
<p>
Usage: (doto form &amp;rest expressions)
</p>

<p>
Performs a sequence of potentially mutating actions
   on an initial object, returning the resulting object
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-11" name="sec-1-3-11"></a>for<br  /><div class="outline-text-4" id="text-1-3-11">
<p>
Usage: (for args &amp;rest body)
</p>

<p>
shorthand for nested for loops:
  (for [x foo
        y bar]
    baz) -&gt;
  (for* [x foo]
    (for* [y bar]
      baz))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-12" name="sec-1-3-12"></a>hylp_info<br  /><div class="outline-text-4" id="text-1-3-12">
<p>
Usage: (hylp_info sym)
</p>

<p>
Return Usage, docstring filename, lineno for the string SYM.
</p>

<p>
<a href="/media/2016-04-03-Getting-hylp-in-hy/hylp.hy">hylp.hy</a> 
</p>
</div>
</li>

<li><a id="sec-1-3-13" name="sec-1-3-13"></a>if<br  /><div class="outline-text-4" id="text-1-3-13">
<p>
Usage: (if &amp;rest args)
</p>

<p>
if with elif
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-14" name="sec-1-3-14"></a>if_not<br  /><div class="outline-text-4" id="text-1-3-14">
<p>
Usage: (if_not test not-branch &amp;optional yes-branch)
</p>

<p>
Like `if`, but execute the first branch when the test fails
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-15" name="sec-1-3-15"></a>if_python2<br  /><div class="outline-text-4" id="text-1-3-15">
<p>
Usage: (if_python2 python2-form python3-form)
</p>

<p>
If running on python2, execute python2-form, else, execute python3-form
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-16" name="sec-1-3-16"></a>let<br  /><div class="outline-text-4" id="text-1-3-16">
<p>
Usage: (let variables &amp;rest body)
</p>

<p>
Execute `body` in the lexical context of `variables`
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-17" name="sec-1-3-17"></a>lif<br  /><div class="outline-text-4" id="text-1-3-17">
<p>
Usage: (lif &amp;rest args)
</p>

<p>
Like `if`, but anything that is not None/nil is considered true.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-18" name="sec-1-3-18"></a>lif_not<br  /><div class="outline-text-4" id="text-1-3-18">
<p>
Usage: (lif_not test not-branch &amp;optional yes-branch)
</p>

<p>
Like `if-not`, but anything that is not None/nil is considered true.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-19" name="sec-1-3-19"></a>macro_error<br  /><div class="outline-text-4" id="text-1-3-19">
<p>
Usage: (macro_error location reason)
</p>

<p>
error out properly within a macro
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-20" name="sec-1-3-20"></a>unless<br  /><div class="outline-text-4" id="text-1-3-20">
<p>
Usage: (unless test &amp;rest body)
</p>

<p>
Execute `body` when `test` is false
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-21" name="sec-1-3-21"></a>when<br  /><div class="outline-text-4" id="text-1-3-21">
<p>
Usage: (when test &amp;rest body)
</p>

<p>
Execute `body` when `test` is true
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-22" name="sec-1-3-22"></a>with<br  /><div class="outline-text-4" id="text-1-3-22">
<p>
Usage: (with args &amp;rest body)
</p>

<p>
shorthand for nested with* loops:
  (with [x foo y bar] baz) -&gt;
  (with* [x foo]
    (with* [y bar]
      baz))
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-23" name="sec-1-3-23"></a>with_gensyms<br  /><div class="outline-text-4" id="text-1-3-23">
<p>
Usage: (with_gensyms args &amp;rest body)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-3-24" name="sec-1-3-24"></a>yield_from<br  /><div class="outline-text-4" id="text-1-3-24">
<p>
Usage: (yield_from expr)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li></ol>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4"><span class="section-number-3">1.4</span> Compiler functions</h3>
<div class="outline-text-3" id="text-1-4">
</div><ol class="org-ol"><li><a id="sec-1-4-1" name="sec-1-4-1"></a>!=<br  /><div class="outline-text-4" id="text-1-4-1">
<p>
Usage: (!= &amp;rest args)
</p>

<p>
Shadow != operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-2" name="sec-1-4-2"></a>%<br  /><div class="outline-text-4" id="text-1-4-2">
<p>
Usage: % defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-3" name="sec-1-4-3"></a>%=<br  /><div class="outline-text-4" id="text-1-4-3">
<p>
Usage: %= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-4" name="sec-1-4-4"></a>&amp;<br  /><div class="outline-text-4" id="text-1-4-4">
<p>
Usage: &amp; defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-5" name="sec-1-4-5"></a>&amp;=<br  /><div class="outline-text-4" id="text-1-4-5">
<p>
Usage: &amp;= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-6" name="sec-1-4-6"></a>*<br  /><div class="outline-text-4" id="text-1-4-6">
<p>
Usage: (* &amp;rest args)
</p>

<p>
Shadow * operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-7" name="sec-1-4-7"></a>**<br  /><div class="outline-text-4" id="text-1-4-7">
<p>
Usage: ** defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-8" name="sec-1-4-8"></a>**=<br  /><div class="outline-text-4" id="text-1-4-8">
<p>
Usage: **= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-9" name="sec-1-4-9"></a>*=<br  /><div class="outline-text-4" id="text-1-4-9">
<p>
Usage: *= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-10" name="sec-1-4-10"></a>+<br  /><div class="outline-text-4" id="text-1-4-10">
<p>
Usage: (+ &amp;rest args)
</p>

<p>
Shadow + operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-11" name="sec-1-4-11"></a>+=<br  /><div class="outline-text-4" id="text-1-4-11">
<p>
Usage: += defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-12" name="sec-1-4-12"></a>,<br  /><div class="outline-text-4" id="text-1-4-12">
<p>
Usage: , defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-13" name="sec-1-4-13"></a>-<br  /><div class="outline-text-4" id="text-1-4-13">
<p>
Usage: (- &amp;rest args)
</p>

<p>
Shadow - operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-14" name="sec-1-4-14"></a>.<br  /><div class="outline-text-4" id="text-1-4-14">
<p>
Usage: . defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-15" name="sec-1-4-15"></a>/<br  /><div class="outline-text-4" id="text-1-4-15">
<p>
Usage: (/ &amp;rest args)
</p>

<p>
Shadow / operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-16" name="sec-1-4-16"></a>//<br  /><div class="outline-text-4" id="text-1-4-16">
<p>
Usage: // defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-17" name="sec-1-4-17"></a>//=<br  /><div class="outline-text-4" id="text-1-4-17">
<p>
Usage: //= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-18" name="sec-1-4-18"></a>/=<br  /><div class="outline-text-4" id="text-1-4-18">
<p>
Usage: /= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-19" name="sec-1-4-19"></a>&lt;<br  /><div class="outline-text-4" id="text-1-4-19">
<p>
Usage: (&lt; &amp;rest args)
</p>

<p>
Shadow &lt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-20" name="sec-1-4-20"></a>&lt;&lt;<br  /><div class="outline-text-4" id="text-1-4-20">
<p>
Usage: &lt;&lt; defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-21" name="sec-1-4-21"></a>&lt;&lt;=<br  /><div class="outline-text-4" id="text-1-4-21">
<p>
Usage: &lt;&lt;= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-22" name="sec-1-4-22"></a>&lt;=<br  /><div class="outline-text-4" id="text-1-4-22">
<p>
Usage: (&lt;= &amp;rest args)
</p>

<p>
Shadow &lt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-23" name="sec-1-4-23"></a>=<br  /><div class="outline-text-4" id="text-1-4-23">
<p>
Usage: (= &amp;rest args)
</p>

<p>
Shadow = operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-24" name="sec-1-4-24"></a>&gt;<br  /><div class="outline-text-4" id="text-1-4-24">
<p>
Usage: (&gt; &amp;rest args)
</p>

<p>
Shadow &gt; operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-25" name="sec-1-4-25"></a>&gt;=<br  /><div class="outline-text-4" id="text-1-4-25">
<p>
Usage: (&gt;= &amp;rest args)
</p>

<p>
Shadow &gt;= operator for when we need to import / map it against something
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-26" name="sec-1-4-26"></a>&gt;&gt;<br  /><div class="outline-text-4" id="text-1-4-26">
<p>
Usage: &gt;&gt; defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-27" name="sec-1-4-27"></a>&gt;&gt;=<br  /><div class="outline-text-4" id="text-1-4-27">
<p>
Usage: &gt;&gt;= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-28" name="sec-1-4-28"></a>@<br  /><div class="outline-text-4" id="text-1-4-28">
<p>
Usage: @ defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-29" name="sec-1-4-29"></a>@=<br  /><div class="outline-text-4" id="text-1-4-29">
<p>
Usage: @= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-30" name="sec-1-4-30"></a>^<br  /><div class="outline-text-4" id="text-1-4-30">
<p>
Usage: ^ defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-31" name="sec-1-4-31"></a>^=<br  /><div class="outline-text-4" id="text-1-4-31">
<p>
Usage: ^= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-32" name="sec-1-4-32"></a>_=<br  /><div class="outline-text-4" id="text-1-4-32">
<p>
Usage: _= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-33" name="sec-1-4-33"></a>and<br  /><div class="outline-text-4" id="text-1-4-33">
<p>
Usage: and defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-34" name="sec-1-4-34"></a>apply<br  /><div class="outline-text-4" id="text-1-4-34">
<p>
Usage: apply defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-35" name="sec-1-4-35"></a>assert<br  /><div class="outline-text-4" id="text-1-4-35">
<p>
Usage: assert defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-36" name="sec-1-4-36"></a>assoc<br  /><div class="outline-text-4" id="text-1-4-36">
<p>
Usage: assoc defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-37" name="sec-1-4-37"></a>break<br  /><div class="outline-text-4" id="text-1-4-37">
<p>
Usage: break defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-38" name="sec-1-4-38"></a>continue<br  /><div class="outline-text-4" id="text-1-4-38">
<p>
Usage: continue defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-39" name="sec-1-4-39"></a>cut<br  /><div class="outline-text-4" id="text-1-4-39">
<p>
Usage: cut defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-40" name="sec-1-4-40"></a>def<br  /><div class="outline-text-4" id="text-1-4-40">
<p>
Usage: def defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-41" name="sec-1-4-41"></a>defclass<br  /><div class="outline-text-4" id="text-1-4-41">
<p>
Usage: defclass defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-42" name="sec-1-4-42"></a>defmacro<br  /><div class="outline-text-4" id="text-1-4-42">
<p>
Usage: defmacro defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-43" name="sec-1-4-43"></a>defreader<br  /><div class="outline-text-4" id="text-1-4-43">
<p>
Usage: defreader defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-44" name="sec-1-4-44"></a>del<br  /><div class="outline-text-4" id="text-1-4-44">
<p>
Usage: del defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-45" name="sec-1-4-45"></a>dict_comp<br  /><div class="outline-text-4" id="text-1-4-45">
<p>
Usage: dict_comp defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-46" name="sec-1-4-46"></a>dispatch_reader_macro<br  /><div class="outline-text-4" id="text-1-4-46">
<p>
Usage: dispatch_reader_macro defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-47" name="sec-1-4-47"></a>do<br  /><div class="outline-text-4" id="text-1-4-47">
<p>
Usage: do defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-48" name="sec-1-4-48"></a>eval<br  /><div class="outline-text-4" id="text-1-4-48">
<p>
Usage: eval defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-49" name="sec-1-4-49"></a>eval_and_compile<br  /><div class="outline-text-4" id="text-1-4-49">
<p>
Usage: eval_and_compile defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-50" name="sec-1-4-50"></a>eval_when_compile<br  /><div class="outline-text-4" id="text-1-4-50">
<p>
Usage: eval_when_compile defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-51" name="sec-1-4-51"></a>except<br  /><div class="outline-text-4" id="text-1-4-51">
<p>
Usage: except defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-52" name="sec-1-4-52"></a>fn<br  /><div class="outline-text-4" id="text-1-4-52">
<p>
Usage: fn defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-53" name="sec-1-4-53"></a>for*<br  /><div class="outline-text-4" id="text-1-4-53">
<p>
Usage: for* defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-54" name="sec-1-4-54"></a>genexpr<br  /><div class="outline-text-4" id="text-1-4-54">
<p>
Usage: genexpr defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-55" name="sec-1-4-55"></a>get<br  /><div class="outline-text-4" id="text-1-4-55">
<p>
Usage: get defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-56" name="sec-1-4-56"></a>global<br  /><div class="outline-text-4" id="text-1-4-56">
<p>
Usage: global defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-57" name="sec-1-4-57"></a>if*<br  /><div class="outline-text-4" id="text-1-4-57">
<p>
Usage: if* defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-58" name="sec-1-4-58"></a>import<br  /><div class="outline-text-4" id="text-1-4-58">
<p>
Usage: import defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-59" name="sec-1-4-59"></a>in<br  /><div class="outline-text-4" id="text-1-4-59">
<p>
Usage: in defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-60" name="sec-1-4-60"></a>is<br  /><div class="outline-text-4" id="text-1-4-60">
<p>
Usage: is defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-61" name="sec-1-4-61"></a>is_not<br  /><div class="outline-text-4" id="text-1-4-61">
<p>
Usage: is_not defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-62" name="sec-1-4-62"></a>lambda<br  /><div class="outline-text-4" id="text-1-4-62">
<p>
Usage: lambda defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-63" name="sec-1-4-63"></a>list_comp<br  /><div class="outline-text-4" id="text-1-4-63">
<p>
Usage: list_comp defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-64" name="sec-1-4-64"></a>nonlocal<br  /><div class="outline-text-4" id="text-1-4-64">
<p>
Usage: nonlocal defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-65" name="sec-1-4-65"></a>not<br  /><div class="outline-text-4" id="text-1-4-65">
<p>
Usage: not defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-66" name="sec-1-4-66"></a>not_in<br  /><div class="outline-text-4" id="text-1-4-66">
<p>
Usage: not_in defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-67" name="sec-1-4-67"></a>or<br  /><div class="outline-text-4" id="text-1-4-67">
<p>
Usage: or defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-68" name="sec-1-4-68"></a>quasiquote<br  /><div class="outline-text-4" id="text-1-4-68">
<p>
Usage: quasiquote defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-69" name="sec-1-4-69"></a>quote<br  /><div class="outline-text-4" id="text-1-4-69">
<p>
Usage: quote defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-70" name="sec-1-4-70"></a>raise<br  /><div class="outline-text-4" id="text-1-4-70">
<p>
Usage: raise defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-71" name="sec-1-4-71"></a>require<br  /><div class="outline-text-4" id="text-1-4-71">
<p>
Usage: require defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-72" name="sec-1-4-72"></a>set_comp<br  /><div class="outline-text-4" id="text-1-4-72">
<p>
Usage: set_comp defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-73" name="sec-1-4-73"></a>setv<br  /><div class="outline-text-4" id="text-1-4-73">
<p>
Usage: setv defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-74" name="sec-1-4-74"></a>try<br  /><div class="outline-text-4" id="text-1-4-74">
<p>
Usage: try defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-75" name="sec-1-4-75"></a>unquote<br  /><div class="outline-text-4" id="text-1-4-75">
<p>
Usage: unquote defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-76" name="sec-1-4-76"></a>unquote_splicing<br  /><div class="outline-text-4" id="text-1-4-76">
<p>
Usage: unquote_splicing defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-77" name="sec-1-4-77"></a>while<br  /><div class="outline-text-4" id="text-1-4-77">
<p>
Usage: while defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-78" name="sec-1-4-78"></a>with*<br  /><div class="outline-text-4" id="text-1-4-78">
<p>
Usage: with* defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-79" name="sec-1-4-79"></a>with_decorator<br  /><div class="outline-text-4" id="text-1-4-79">
<p>
Usage: with_decorator defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-80" name="sec-1-4-80"></a>yield<br  /><div class="outline-text-4" id="text-1-4-80">
<p>
Usage: yield defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-81" name="sec-1-4-81"></a>yield_from<br  /><div class="outline-text-4" id="text-1-4-81">
<p>
Usage: (yield_from expr)
</p>

<p>
None
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy">file:///Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy</a>
</p>
</div>
</li>

<li><a id="sec-1-4-82" name="sec-1-4-82"></a>|<br  /><div class="outline-text-4" id="text-1-4-82">
<p>
Usage: | defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-83" name="sec-1-4-83"></a>|=<br  /><div class="outline-text-4" id="text-1-4-83">
<p>
Usage: |= defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li>

<li><a id="sec-1-4-84" name="sec-1-4-84"></a>~<br  /><div class="outline-text-4" id="text-1-4-84">
<p>
Usage: ~ defined in hy/compiler
</p>

<p>
No docstring available.
</p>

<p>
<a href="file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py">file:///Users/jkitchin/Dropbox/python/hy/hy/compiler.py</a>
</p>
</div>
</li></ol>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/03/Getting-hylp-in-hy.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[ob-hy.el - or better integration of hylang in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode</id>
    <updated>2016-04-01T19:31:37Z</updated>
    <published>2016-04-01T19:31:37Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[ob-hy.el - or better integration of hylang in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/01/ob-hy-el-or-better-integration-of-hylang-in-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tests</a>
<ul>
<li><a href="#sec-1-1">1.1. Simple</a></li>
<li><a href="#sec-1-2">1.2. vars in header</a></li>
</ul>
</li>
<li><a href="#sec-2">2. Summary</a></li>
</ul>
</div>
</div>
<p>
The point of this post is to develop and test a more substantial integration of Hy into org-mode. We develop ob-hy.el here. This is based off of ob-clojure.el.
</p>

<p>
The next few blocks will get tangled to ob-hy.el. First, some variables.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">ob</span>)

(add-to-list 'org-structure-template-alist
             '(<span style="color: #008000;">"hy"</span> <span style="color: #008000;">"#+BEGIN_SRC hy\n?\n#+END_SRC"</span> <span style="color: #008000;">"&lt;src lang=\"hy\"&gt;\n?\n&lt;/src&gt;"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-tangle-lang-exts</span>)
(add-to-list 'org-babel-tangle-lang-exts '(<span style="color: #008000;">"hy"</span> . <span style="color: #008000;">"hy"</span>))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-default-header-args:hy</span> '())
(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">org-babel-header-args:hy</span> '((<span style="color: #006FE0;">:results</span> . <span style="color: #008000;">"output"</span>)))
</pre>
</div>

<pre class="example">
org-babel-header-args:hy
</pre>

<p>
Next a function to expand the code body. This will allow us to pass vars in the header.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-expand-body:hy</span> (body params)
  <span style="color: #036A07;">"Expand BODY according to PARAMS, return the expanded body."</span>
  (<span style="color: #0000FF;">let*</span> ((vars (mapcar #'cdr (org-babel-get-header params <span style="color: #006FE0;">:var</span>)))
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (print-level nil)
         (print-length nil)
         (body (org-babel-trim
                (<span style="color: #0000FF;">if</span> (&gt; (length vars) 0)
                    (concat <span style="color: #008000;">"(let ["</span>
                            (mapconcat
                             (<span style="color: #0000FF;">lambda</span> (var)
                               (format
                                <span style="color: #008000;">"%S (quote %S)"</span>
                                (car var)
                                (cdr var)))
                             vars <span style="color: #008000;">"\n      "</span>)
                            <span style="color: #008000;">"]\n"</span> body <span style="color: #008000;">")"</span>)
                  body))))
    (<span style="color: #0000FF;">when</span> (not (member <span style="color: #008000;">"output"</span> result-params))
      (<span style="color: #0000FF;">setq</span> body (format <span style="color: #008000;">"(print (do  %s\n))"</span> body)))
    body))
</pre>
</div>

<pre class="example">
org-babel-expand-body:hy
</pre>

<p>
And a function to execute the body. We still use a simple approach to write the code to a temp-file, execute it, capture the output, and delete the file. This limits things to
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  <span style="color: #036A07;">"Execute a block of hy code with Babel."</span>
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>))
         result
         (result-params (cdr (assoc <span style="color: #006FE0;">:result-params</span> params)))
         (body (org-babel-expand-body:hy body params)))

    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))

    (<span style="color: #0000FF;">unwind-protect</span>
        (<span style="color: #0000FF;">progn</span>
          (<span style="color: #0000FF;">cond</span>
           ((member <span style="color: #008000;">"body"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result body))
           ((member <span style="color: #008000;">"python"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py %s"</span> tempfile))))
           ((member <span style="color: #008000;">"ast"</span> result-params)
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy2py -a -np %s"</span> tempfile))))
           (t
            (<span style="color: #0000FF;">setq</span> result (shell-command-to-string
                          (format <span style="color: #008000;">"hy %s"</span> tempfile)))))

          (<span style="color: #0000FF;">org-babel-result-cond</span> result-params
            result
            (<span style="color: #0000FF;">condition-case</span> nil (org-babel-script-escape result)
              (<span style="color: #ff0000; font-weight: bold;">error</span> result))))
      (delete-file tempfile))))

(<span style="color: #0000FF;">provide</span> '<span style="color: #D0372D;">ob-hy</span>)
</pre>
</div>

<pre class="example">
ob-hy
</pre>

<p>
Now we tangle and load those blocks.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-babel-tangle)
(load-file <span style="color: #008000;">"ob-hy.el"</span>)
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Next, we do some tests. They are all simple tests.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tests</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1"><span class="section-number-3">1.1</span> Simple</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
We can see how this turns into Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
print(u'Hy world')
</pre>

<p>
or the AST:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Module(
    body=[Expr(value=Call(func=Name(id='print'), args=[Str(s=u'Hy world')], keywords=[], starargs=None, kwargs=None))])
</pre>

<p>
Let's test :results value. It is not quite the value since we seem to get everything that is output from the script, but if you don't print stuff, it seems to get it right.
</p>

<div class="org-src-container">

<pre class="src src-hy"><span style="color: #008000;">"test"</span>
(<span style="color: #006FE0;">+</span> 1 2 3)
</pre>
</div>

<pre class="example">
6
</pre>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2"><span class="section-number-3">1.2</span> vars in header</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Here we test out adding variables to the header lines.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="hy-world">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Interesting, I am not sure where the space between them comes from. Let's check out the :results body option. It will show us the hy script that gets run.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy"</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "world")]
(print "Hy" data))
</pre>

<p>
Nothing obvious about the space there. We can test out passing block results in here.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
Hy  world
</pre>

<p>
Here is the body of that:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> data)
</pre>
</div>

<pre class="example">
(let [data (quote "Hy world
")]
(print data))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Summary</h2>
<div class="outline-text-2" id="text-2">
<p>
It works well enough to make testing in org-mode pretty convenient. I can't think of anything else it "needs" right now, although communication with a repl might make it faster, and sessions are not supported at the moment. Saving that for another day ;)
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/01/ob-hy.el---or-better-integration-of-hylang-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[More on Hy and why I think it is a big deal]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal" />
    <id>http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal</id>
    <updated>2016-04-01T13:58:26Z</updated>
    <published>2016-03-31T13:41:43Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[More on Hy and why I think it is a big deal]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Editing with hy-mode and lispy</a></li>
<li><a href="#sec-2">2. Python with no whitespace, or commas in lists</a></li>
<li><a href="#sec-3">3. No confusion in expressions in statements</a></li>
<li><a href="#sec-4">4. Proper multiline lambda functions</a></li>
<li><a href="#sec-5">5. Macros and Extensible syntax</a>
<ul>
<li><a href="#sec-5-1">5.1. Some math</a></li>
</ul>
</li>
<li><a href="#sec-6">6. Interoperability with Python</a></li>
<li><a href="#sec-7">7. Integration of emacs and Hy</a></li>
<li><a href="#sec-8">8. Hypster and Hy Society.</a></li>
<li><a href="#sec-9">9. What do we still need?</a></li>
</ul>
</div>
</div>
<p>
<a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/30/OMG-A-Lisp-that-runs-python/">Yesterday</a> I talked about <a href="https://github.com/hylang/hy">hylang</a> , a Lisp that basically compiles to and runs Python code. Today, I want to show a few reasons why this is a great idea, and an important one. Below I give a few examples of why the hylang approach is better (in my opinion of course) than Python with a few examples of things I have always wanted in Python but couldn't get.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Editing with hy-mode and lispy</h2>
<div class="outline-text-2" id="text-1">
<p>
There is a major mode for Hy: <a href="https://github.com/hylang/hy-mode">https://github.com/hylang/hy-mode</a> also on MELPA. It gives us some syntax highlighting and better access to a REPL.
</p>

<p>
Let's load lispy (<a href="https://github.com/abo-abo/lispy">https://github.com/abo-abo/lispy</a> ) for it so we also get amazing editing. I always wanted to use lispy style navigation and editing in Python, but the whitespace and indentation did not make it that easy. Problem solved with these. @abo-abo already added basic eval support for Hy to lispy since the post yesterday (<a href="https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c">https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c</a> ); Thanks!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-hook 'hy-mode-hook
          (<span style="color: #0000FF;">lambda</span> ()
            (lispy-mode 1)))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Python with no whitespace, or commas in lists</h2>
<div class="outline-text-2" id="text-2">
<p>
You can still use indentation (it is good style), but this works!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
(<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3) (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
(<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This looks nicer.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">for</span> [x [0 1 2 3 4 5]]
  (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">&gt;</span> x 3)
    (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"too big"</span>)
    (<span style="color: #006FE0;">print</span> x)))
</pre>
</div>

<pre class="example">
0
1
2
3
too big
too big
</pre>

<p>
This is a big deal too. Using Python in sessions in org-mode has always been a little complicated by the indentation and whitespace, especially with nested loops and functions. That problem is probably gone.
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> No confusion in expressions in statements</h2>
<div class="outline-text-2" id="text-3">
<p>
In Python you can do this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">a</span> = 5
<span style="color: #0000FF;">print</span>(a)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
But not this:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(a=5)
<span style="color: #0000FF;">print</span>(a + 5)
</pre>
</div>

<pre class="example">
  File "&lt;stdin&gt;", line 1
   print(a=5)
          ^
SyntaxError: invalid syntax
</pre>

<p>
You can't put assignment statements and expression statements anywhere you want, they are only legal syntax in some places. For example, a=5 above actually looks like the print function has an argument of a that set to 5. Not true in Lisp; there are only expressions! So this works fine.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">setv</span> a 5))
(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">+</span> a 5))
</pre>
</div>

<pre class="example">
5
10
</pre>

<p>
I just like this style of simple syntax.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Proper multiline lambda functions</h2>
<div class="outline-text-2" id="text-4">
<p>
Python syntax fundamentally limits you to one line lambdas. Not so for Hy. Let's use one in a filter to print even numbers. Here is an example with a two-liner but you could make them more complicated. In Python, you have to make a separate function for this. That isn't terrible, but if it is never used for anything else, it could be avoided.
</p>

<div class="org-src-container">

<pre class="src src-hy" id="lambda">(<span style="color: #006FE0;">setv</span> a [0 1 2 3 4 5 6 7 8])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">display</span> [list filter]
  (<span style="color: #0000FF;">for</span> [x list] (<span style="color: #0000FF;">if</span> (<span style="color: #006FE0;">filter</span> x) (<span style="color: #006FE0;">print</span> x))))

(display a (<span style="color: #0000FF;">lambda</span> [x]
             (<span style="color: #006FE0;">=</span> (<span style="color: #006FE0;">%</span> x 2) 0)))
</pre>
</div>

<pre class="example">
0
2
4
6
8
</pre>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Macros and Extensible syntax</h2>
<div class="outline-text-2" id="text-5">
<p>
It is not easy to get real macro (code expansion) behavior in Python. Yes, there are decorators, and closures, and related things that get close to it. But there are not lisp-like macros.
</p>

<p>
Here is a (too) simple macro to allow for infix notation. It only works for two arguments, but could be extended for multiple arguments.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">infix</span> [code]
  (<span style="color: #006FE0;">quasiquote</span> ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
               (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> (infix (1 + 1)))
</pre>
</div>
<pre class="example">
2
</pre>

<p>
If we want new syntax we can get it!
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defreader</span> <span style="color: #006699;">$</span> [code]
  (<span style="color: #006FE0;">quasiquote</span>
   ((<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 1))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 0))
    (<span style="color: #006FE0;">unquote</span> (<span style="color: #006FE0;">get</span> code 2)))))

(<span style="color: #006FE0;">print</span> #$(1 + 1))
</pre>
</div>

<pre class="example">
2
</pre>

<p>
Why is this nice? Here is a math example that shows why you might want to change syntax.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Some math</h3>
<div class="outline-text-3" id="text-5-1">
<p>
See <a href="http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/">http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/</a> for the Python version of solving the Bessel equation numerically. Here we do it with hylang.
</p>

<p>
Why would we want infix notation? Here is a good reason. The prefix notation is not easy to read. Compare:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">dzdx</span> = 1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)
</pre>
</div>

<p>
to
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
</pre>
</div>

<p>
The infix notation is simpler to read. Still, the code below is not that hard to figure out, especially if there was a generalized infix notation that allowed (with parens for explicit operation precedence):
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> dzdx (nfx (1.0 / x**2) * ((-x * z) - ((x**2 - nu**2) * y))))
</pre>
</div>

<p>
So, here is the hylang equivalent to my previous Python version.
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [numpy <span style="color: #D0372D;">:as</span> np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">fbessel</span> [Y x]
  <span style="color: #008000;">"System of 1st order ODEs for the Bessel equation."</span>
  (<span style="color: #006FE0;">setv</span> nu 0.0
        y (<span style="color: #006FE0;">get</span> Y 0)
        z (<span style="color: #006FE0;">get</span> Y 1))

  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">define the derivatives</span>
  (<span style="color: #006FE0;">setv</span> dydx z
        dzdx (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">/</span> 1.0 (<span style="color: #006FE0;">**</span> x 2)) (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">*</span> -1 x) z) (<span style="color: #006FE0;">*</span> (<span style="color: #006FE0;">-</span> (<span style="color: #006FE0;">**</span> x 2) (<span style="color: #006FE0;">**</span> nu 2)) y))))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">return derivatives</span>
  [dydx dzdx])

(<span style="color: #006FE0;">setv</span> x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(<span style="color: #006FE0;">setv</span> xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Numerical solution"</span>)
(plt.plot xspan (jn 0 xspan) <span style="color: #008000;">"r--"</span> <span style="color: #D0372D;">:label</span> <span style="color: #008000;">"Analytical solution"</span>)
(plt.legend <span style="color: #D0372D;">:loc</span> <span style="color: #008000;">"best"</span>)

(plt.savefig <span style="color: #008000;">"hy-ode.png"</span>)
</pre>
</div>

<pre class="example">
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
None
</pre>


<div class="figure">
<p><img src="/media/2016-03-31-More-on-Hy-and-why-I-think-it-is-a-big-deal/hy-ode.png"> 
</p>
</div>

<p>
This looks really good to me, except for that prefix math. The array slice syntax is interesting. Not that obvious yet.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Interoperability with Python</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop">http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop</a> 
</p>

<p>
Write Hy code and use it in Python. Use Python code in Hy. Repeat. Sweet.
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Integration of emacs and Hy</h2>
<div class="outline-text-2" id="text-7">
<p>
This isn't so beautiful but it illustrates  a pretty awesome integration of Hy(python) into Emacs!
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">hy</span> (body)
  `(<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
          (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
     (message (format <span style="color: #008000;">"code: %S"</span> ,body))
     (<span style="color: #0000FF;">with-temp-file</span> tempfile
       (mapc (<span style="color: #0000FF;">lambda</span> (form) (insert (format <span style="color: #008000;">"%s"</span> form))) ,body))
     (read (<span style="color: #0000FF;">unwind-protect</span>
               (shell-command-to-string
                (format <span style="color: #008000;">"hy %s"</span> tempfile))
             (delete-file tempfile)))))

(aref (<span style="color: #0000FF;">hy</span> '((import numpy)
            (setv a (numpy.array [1 2 3]))
            (setv b (numpy.array [1 2 3]))
            (print (* a b))))
      1)
</pre>
</div>

<pre class="example">
4
</pre>

<p>
This isn't perfect, and there are many ways it could break down. But if you are careful to make the output "read"able, you can literally embed Hy code in Emacs lisp and use the results, a total win for Science! I feel like it might need something like progn, but that would not change what this does dramatically.
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Hypster and Hy Society.</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://notes.pault.ag/hy-survival-guide/">http://notes.pault.ag/hy-survival-guide/</a> ROTFL. <b>ironically</b> of course ;)
</p>

<p>
And the <a href="https://twitter.com/hylang">@hylang</a> Twitter account is run by Hy Society. Nice.
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> What do we still need?</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li>Experience. Hy seems relatively young compared to other Lisps. It isn't clear yet if this could work like Python does at scale in research. I sure look forward to finding out though!
</li>
<li>Proper infix notation for engineering math. I could live with no operator precedence if it led to a quicker solution for now. As long as something like (1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)) is legal!
</li>
<li>A proper integration with org-mode and the REPL.
</li>
<li>Toolchains like emacs-lisp has. I just love those. Killer debugging, access to hyperlinked documentation, code navigation, &#x2026; Maybe integration with something like SLIME or CIDER? Hyder?
</li>
<li>Use it in a proper big project to find out where the limitations are, maybe Hycse as a companion to Pycse (<a href="http://kitchingroup.cheme.cmu.edu/pycse/">http://kitchingroup.cheme.cmu.edu/pycse/</a> )? or a rewrite of <a href="http://kitchingroup.cheme.cmu.edu/dft-book/">http://kitchingroup.cheme.cmu.edu/dft-book/</a> in Hy?
</li>
</ol>

<p>
Overall, I am pretty excited about this project. The syntax is a bit reminiscent of Clojure, and Racket, the former by design. Lots of new ideas still seem to be percolating in, so there is likely good stuff to see in the future!
</p>

<p>
I haven't used it enough to see the warts yet, but already the top issues I had with Python are largely addressed, so I see this as a way to continue progress with all the benefits of Python.
</p>

<img src="https://imgs.xkcd.com/comics/lisp_cycles.png">
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/31/More-on-Hy-and-why-I-think-it-is-a-big-deal.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[OMG A Lisp that runs python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/30/OMG-A-Lisp-that-runs-python" />
    <id>http://jkitchin.github.io/blog/2016/03/30/OMG-A-Lisp-that-runs-python</id>
    <updated>2016-03-31T13:54:47Z</updated>
    <published>2016-03-30T17:10:17Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="lisp" />
    <summary type="html"><![CDATA[OMG A Lisp that runs python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/30/OMG-A-Lisp-that-runs-python"><![CDATA[



<p>
For a year now I have struggled with abandoning Python for Lisp. It's complicated, I have used Python for 15 years now, and have a lot of skill and knowledge in it. I have used emacs-lisp for about 5 years now, and have a far bit of skill with it too. They solve really different problems. Between the two, I find I <i>like</i> writing and editing elisp <b>lots</b> better than writing Python, except it lacks the scipy+numpy+matplotlib stack. I looked into Racket and Common Lisp, but they also don't really have that as nicely as Python does at the moment. It hit me earlier today that a Lisp that compiled to Python might be the right middle ground. I had seen this project Hy (<a href="http://docs.hylang.org/en/latest/quickstart.html">http://docs.hylang.org/en/latest/quickstart.html</a> ) earlier, but didn't connect the dots to this.
</p>

<p>
Let me do that here. First, an obligatory execute function to run org-mode code blocks.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:hy</span> (body params)
  (<span style="color: #0000FF;">let*</span> ((temporary-file-directory <span style="color: #008000;">"."</span>)
         (tempfile (make-temp-file <span style="color: #008000;">"hy-"</span>)))
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert body))
    (<span style="color: #0000FF;">unwind-protect</span>
        (shell-command-to-string
         (format <span style="color: #008000;">"hy %s"</span> tempfile))
      (delete-file tempfile))))
</pre>
</div>

<pre class="example">
org-babel-execute:hy
</pre>

<p>
Now the basic Hello world example. It looks like lisp.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">print</span> <span style="color: #008000;">"Hy world"</span>)
</pre>
</div>

<pre class="example">
Hy world
</pre>

<p>
Now for a use that looks like Python:
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">numpy</span>)
(<span style="color: #006FE0;">setv</span> a (numpy.array [1 2 3]))
(<span style="color: #006FE0;">setv</span> b (numpy.array [1 2 3]))
(<span style="color: #006FE0;">print</span> (numpy.dot a b))
</pre>
</div>

<pre class="example">
14
</pre>

<p>
WHAT!!!!
</p>

<p>
A simple plot? Surely it can't be so easy&#x2026;
</p>
<div class="org-src-container">

<pre class="src src-hy">(import [matplotlib.pyplot <span style="color: #D0372D;">:as</span> plt])
(plt.plot [1 2 4 8])
(plt.xlabel <span style="color: #008000;">"x"</span>)
(plt.ylabel <span style="color: #008000;">"y"</span>)
(plt.savefig <span style="color: #008000;">"hy-test.png"</span>)
</pre>
</div>

<pre class="example">
2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
</pre>


<div class="figure">
<p><img src="/media/2016-03-30-OMG-A-Lisp-that-runs-python/hy-test.png"> 
</p>
</div>

<p>
Wow. I am not sure what the warnings are, I seem to get them on my Mac for some reason. How about solving an equation?
</p>

<div class="org-src-container">

<pre class="src src-hy">(import [scipy.optimize [fsolve]])
(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">objective</span> [x] (<span style="color: #006FE0;">-</span> 2 x))
(<span style="color: #006FE0;">print</span> (fsolve objective -1))
</pre>
</div>

<pre class="example">
[ 2.]
</pre>


<pre class="example">
     _.-^^---....,,--
 _--                  --_
&lt;                        &gt;)
|                         |
 \._                   _./
    ```--. . , ; .--'''
          | |   |
       .-=||  | |=-.
       `-=#$%&amp;%$#=-'
          | ;  :|
 _____.,-#%&amp;$@%#&amp;#~,._____
       _---~~(~~-_.
     _{        )   )
   ,   ) -~~- ( ,-' )_
  (  `-,_..`., )-- '_,)
 ( ` _)  (  -~( -_ `,  }
 (_-  _  ~_-~~~~`,  ,' )  &lt;---- My brain right now...
   `~ -^(    __;-,((()))
         ~~~~ {_ -_(())
                `\  }
                  { }
</pre>

<p>
I may not be able to sleep tonight&#x2026;
</p>

<p>
Ascii art courtesy of <a href="http://chris.com/ascii/index.php?art=people/body%20parts/brains">http://chris.com/ascii/index.php?art=people/body%20parts/brains</a> and <a href="http://www.ascii-code.com/ascii-art/weapons/explosives.php">http://www.ascii-code.com/ascii-art/weapons/explosives.php</a> .</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/30/OMG-A-Lisp-that-runs-python.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Jump to a tagged src block]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block" />
    <id>http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block</id>
    <updated>2016-03-30T14:26:35Z</updated>
    <published>2016-03-30T14:26:35Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Jump to a tagged src block]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/30/Jump-to-a-tagged-src-block"><![CDATA[


<p>
If you have a lot of src-blocks in your org-file, it might be nice to "tag" them and be able to jump around between them using tag expressions, or by the name of the block, language etc&#x2026; Here we develop a way to do that and create a handy function to jump to blocks in the current buffer.
</p>

<p>
First, we look at how to "tag" a src-block. One way is to use a header like this:
</p>

<pre class="example">
#+header: :tags cool idiom two
</pre>

<p>
These are not tags in the usual org-mode sense, they are just a space separated list of words we will later treat as tags. We can get the tags on a src-block with this function.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-block-tags</span> (src-block)
  <span style="color: #036A07;">"Return tags for SRC-BLOCK (an org element)."</span>
  (<span style="color: #0000FF;">let*</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                   (mapcar 'org-babel-parse-header-arguments
                           (org-element-property <span style="color: #006FE0;">:header</span> src-block))))
         (tags (cdr (assoc <span style="color: #006FE0;">:tags</span> headers))))
    (<span style="color: #0000FF;">when</span> tags
      (split-string tags))))
</pre>
</div>

<pre class="example">
src-block-tags
</pre>

<p>
Now, we make a src-block with the tags "test" "one" and "idiom", and see how to tell if the block matches the tag expression "test+idiom".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp" id="tag-matcher">(<span style="color: #0000FF;">let*</span> ((lexical-binding nil)
       (todo-only nil)
       (tags-list (src-block-tags (org-element-context)))
       (tag-expression <span style="color: #008000;">"test+idiom"</span>))
  (eval (cdr (org-make-tags-matcher tag-expression))))
</pre>
</div>
<pre class="example">
t
</pre>

<p>
It does, so we wrap that up into a function that tells us if a src-block matches some tag expression.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">src-block-match-tag-expression-p</span> (src-block tag-expression)
  <span style="color: #036A07;">"Determine if SRC-BLOCK matches TAG-EXPRESSION."</span>
  (<span style="color: #0000FF;">let*</span> ((lexical-binding nil)
         (todo-only nil)
         (tags-list (src-block-tags src-block)))
    (eval (cdr (org-make-tags-matcher tag-expression)))))
</pre>
</div>
<pre class="example">
src-block-match-tag-expression-p
</pre>

<p>
Here we test that on a block tagged "one three" on the expression "one-two" which means tagged one and not two.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(src-block-match-tag-expression-p (org-element-context) <span style="color: #008000;">"one-two"</span>)
</pre>
</div>
<pre class="example">
t
</pre>

<p>
Those are the main pieces we need to jump around. We just need a selection tool with a list of filtered candidates. We get a list of src-block candidates to choose from in the next block as an example. Here we get blocks tagged one but not two. We can incorporate this into a selection backend like helm or ivy.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) 'src-block
  (<span style="color: #0000FF;">lambda</span> (src-block)
    (<span style="color: #0000FF;">when</span> (src-block-match-tag-expression-p src-block <span style="color: #008000;">"one-two"</span>)
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Get a string and marker</span>
      (cons
       (format <span style="color: #008000;">"%15s|%15s|%s"</span>
               (org-element-property <span style="color: #006FE0;">:name</span> src-block)
               (org-element-property <span style="color: #006FE0;">:language</span> src-block)
               (org-element-property <span style="color: #006FE0;">:header</span> src-block))
       (org-element-property <span style="color: #006FE0;">:begin</span> src-block)))))
</pre>
</div>
<div class="org-src-container">

<pre class="src src-emacs-lisp">((<span style="color: #008000;">"    tag-matcher|     emacs-lisp|(:tags test one idiom)"</span> . 1222)
 (<span style="color: #008000;">"            nil|     emacs-lisp|(:tags one)"</span> . 1641)
 (<span style="color: #008000;">"            nil|     emacs-lisp|(:tags one three)"</span> . 2120))
</pre>
</div>

<p>
Now let us put that into ivy. We will ask for an expression to filter the blocks on, and then use ivy to narrow what is left, and the only action is to jump to the position of the selected block. You can start with a tag expression, or press enter to get all the tags. Then you can use ivy to further narrow by language, block name, or other tags.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ivy-jump-to-src</span> (tag-expression)
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"sTag expression: "</span>)
  (ivy-read <span style="color: #008000;">"Select: "</span>
            (org-element-map (org-element-parse-buffer) 'src-block
              (<span style="color: #0000FF;">lambda</span> (src-block)
                (<span style="color: #0000FF;">when</span> (src-block-match-tag-expression-p src-block tag-expression)
                  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Get a string and marker</span>
                  (cons
                   (format <span style="color: #008000;">"%15s|%15s|%s"</span>
                           (org-element-property <span style="color: #006FE0;">:name</span> src-block)
                           (org-element-property <span style="color: #006FE0;">:language</span> src-block)
                           (org-element-property <span style="color: #006FE0;">:header</span> src-block))
                   (org-element-property <span style="color: #006FE0;">:begin</span> src-block)))))
            <span style="color: #006FE0;">:require-match</span> t
            <span style="color: #006FE0;">:action</span> '(1
                      (<span style="color: #008000;">"j"</span> (<span style="color: #0000FF;">lambda</span> (pos) (<span style="color: #0000FF;">interactive</span>) (goto-char pos))))))
</pre>
</div>

<pre class="example">
ivy-jump-to-src
</pre>

<p>
For fun, here is a python block just for testing.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">print</span>(42)
</pre>
</div>

<pre class="example">
42
</pre>

<p>
That is it! It seems to work ok. There are some variations that might be preferrable, like putting the tags in as params in the src-block header to avoid needing a separate header line. It isn't clear how much I would use this, and it is slow if you have <i>a lot</i> of src blocks in a /large/org-file because of the parsing. (how large? I noticed a notable lag on my 22,800 line org-file this is in ;).
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/30/Jump-to-a-tagged-src-block.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another approach to embedded molecular data in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode</id>
    <updated>2016-03-28T11:28:27Z</updated>
    <published>2016-03-28T11:25:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="chemistry" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Another approach to embedded molecular data in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Summary thoughts</a></li>
<li><a href="#sec-2">2. Appendix of molecules</a>
<ul>
<li><a href="#sec-2-1">2.1. Water</a></li>
<li><a href="#sec-2-2">2.2. Caffeine</a></li>
</ul>
</li>
</ul>
</div>
</div>
<style>.molecule {background-color:LightSkyBlue;}</style>
<p>
In the <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/">last post</a> we examined a molecule link to a src-block defining a molecule in some format. We blurred the distinction between program and data there. Here we re-separate them to try out some different ideas. We will use an <a href="http://orgmode.org/manual/Special-blocks.html">org-mode special block</a> to contain the "data" which is a molecular representation in some format. Then, we will use open-babel to convert the format to various other formats to explore using the data.
</p>

<p>
Here is a methane molecule (with 4 implicit hydrogens in the SMILES format). We put it in a named special block in org-mode, and even put a header on it to indicate the format and a display name!
</p>

<div class="molecule" id="methane-smiles">
<p>
C
</p>

</div>

<p>
We can use the SMILES representation block as input to a new command that converts it to the CML format, with coordinates. We use a simple shell command here and pass the contents of the molecule in as a variable. That is nice because in SMILES methane is represented by a single "C", and this CML is <i>much</i> more verbose.
</p>

<div class="org-src-container">

<pre class="src src-sh" id="methane-cml"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">input</span> | obabel -ismi -o cml --gen3d
</pre>
</div>

<pre class="example">
&lt;?xml version="1.0"?&gt;
&lt;molecule xmlns="http://www.xml-cml.org/schema"&gt;
 &lt;atomArray&gt;
  &lt;atom id="a1" elementType="C" x3="1.047517" y3="-0.064442" z3="0.060284"/&gt;
  &lt;atom id="a2" elementType="H" x3="2.139937" y3="-0.064341" z3="0.059898"/&gt;
  &lt;atom id="a3" elementType="H" x3="0.683568" y3="-0.799429" z3="-0.661322"/&gt;
  &lt;atom id="a4" elementType="H" x3="0.683566" y3="0.927794" z3="-0.216100"/&gt;
  &lt;atom id="a5" elementType="H" x3="0.683669" y3="-0.321317" z3="1.056822"/&gt;
 &lt;/atomArray&gt;
 &lt;bondArray&gt;
  &lt;bond atomRefs2="a1 a2" order="1"/&gt;
  &lt;bond atomRefs2="a1 a3" order="1"/&gt;
  &lt;bond atomRefs2="a1 a4" order="1"/&gt;
  &lt;bond atomRefs2="a1 a5" order="1"/&gt;
 &lt;/bondArray&gt;
&lt;/molecule&gt;
</pre>

<p>
We can also use the CML output as input to a command that generates an SVG image, again, passing the CML in via a variable in the header.
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">cml</span> | obabel -icml -o svg
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-28-Another-approach-to-embedded-molecular-data-in-org-mode/methane.svg"> 
</p>
</div>

<p>
With our previous <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/">molecule link</a> we can refer to these in our text now as <a href="#methane-smiles">methane-smiles</a> and <a href="#methane-cml">methane-cml</a>.
</p>

<p>
So far it all looks good. Let us do something new. We will use the SMILES representation to create an <a href="https://wiki.fysik.dtu.dk/ase/ase/atoms.html">ase.atoms</a> object in Python. First, we create an xyz format that <code>ase</code> can read. Rather than clutter up our document with the output, we silence it.
</p>

<div class="org-src-container">

<pre class="src src-sh" id="methane-xyz"><span style="color: #006FE0;">echo</span> $<span style="color: #BA36A5;">input</span> | obabel -ismi -o xyz --gen3d
</pre>
</div>

<p>
Now, we can use the string generated in a Python file to generate a tempfile (or you could have saved the result above to a file and just read it in here). I was too lazy to make the file link to the image myself, so I setup a :file header and just print the result to stdout in this block. Although all we do here is create a new image, this demonstrates you can use data from a MOLECULE block and pass it into a Python script where other kinds of calculations might occur.
</p>


<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> ase.io <span style="color: #0000FF;">import</span> read, write

<span style="color: #0000FF;">from</span> tempfile <span style="color: #0000FF;">import</span> mkstemp
<span style="color: #BA36A5;">fd</span>, <span style="color: #BA36A5;">fname</span> = mkstemp(suffix=<span style="color: #008000;">".xyz"</span>)
<span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(fname, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(xyz)

<span style="color: #BA36A5;">atoms</span> = read(fname)
write(<span style="color: #008000;">'-'</span>, atoms, <span style="color: #006FE0;">format</span>=<span style="color: #008000;">"png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-28-Another-approach-to-embedded-molecular-data-in-org-mode/methane.png"> 
</p>
</div>


<p>
The last point to discuss is discoverability. It would be helpful if we could use a program to "extract" molecular information about the molecules we use in our work. Here is a block that will map over the MOLECULE blocks and summarize what is found with a common format (SMILES again). We generate a table of clickable links to each molecule found in the documents. There is a small appendix in this document containing <a href="#h2o">h2o</a> and <a href="#caffeine">caffeine</a> that will show in this table.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">mlc-to-smiles</span> (blk)
  <span style="color: #036A07;">"Convert a molecule BLK to smiles format using openbabel."</span>
  (<span style="color: #0000FF;">let*</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                   (mapcar 'org-babel-parse-header-arguments
                           (org-element-property <span style="color: #006FE0;">:header</span> blk))))
         (format (cdr (assoc <span style="color: #006FE0;">:format</span> headers)))
         (content (buffer-substring-no-properties
                   (org-element-property <span style="color: #006FE0;">:contents-begin</span> blk)
                   (org-element-property <span style="color: #006FE0;">:contents-end</span> blk)))
         (tempfile (make-temp-file <span style="color: #008000;">"obabel-"</span>)))
    (<span style="color: #0000FF;">with-temp-file</span> tempfile
      (insert content))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">convert to smiles. This outputs a smiles string and the file it was</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">generated from. I don't know how to suppress the file, so we use awk to</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">just get the SMILEs strings. It is not pretty. I know.</span>
    (<span style="color: #0000FF;">prog1</span>
        (s-trim (shell-command-to-string
                 (format  <span style="color: #008000;">"obabel %s %s -osmi 2&gt; /dev/null | awk '{print $1}'"</span>
                          (format <span style="color: #008000;">"-i%s"</span> format) tempfile)))
      (delete-file tempfile))))


<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Generate the table of molecules</span>
(append '((<span style="color: #008000;">"Display name"</span> <span style="color: #008000;">"Name"</span> <span style="color: #008000;">"format"</span> <span style="color: #008000;">"SMILES representation"</span>))
        '(hline)
        (org-element-map (org-element-parse-buffer) 'special-block
          (<span style="color: #0000FF;">lambda</span> (sb)
            (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"MOLECULE"</span> (org-element-property <span style="color: #006FE0;">:type</span> sb))
              (<span style="color: #0000FF;">let</span> ((headers (<span style="color: #0000FF;">-flatten</span>
                              (mapcar 'org-babel-parse-header-arguments
                                      (org-element-property <span style="color: #006FE0;">:header</span> sb)))))

                (list
                 (format <span style="color: #008000;">"[[molecule:%s][%s]]"</span> (org-element-property <span style="color: #006FE0;">:name</span> sb)
                         (cdr (assoc <span style="color: #006FE0;">:display-name</span> headers)))
                 (org-element-property <span style="color: #006FE0;">:name</span> sb)
                 (cdr (assoc <span style="color: #006FE0;">:format</span> headers))
                 (mlc-to-smiles sb)))))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Display name</th>
<th scope="col" class="left">Name</th>
<th scope="col" class="left">format</th>
<th scope="col" class="left">SMILES representation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left"><a href="#methane-smiles">methane-smiles</a></td>
<td class="left">methane-smiles</td>
<td class="left">smiles</td>
<td class="left">C</td>
</tr>

<tr>
<td class="left"><a href="#h2o">h2o</a></td>
<td class="left">h2o</td>
<td class="left">cml</td>
<td class="left">OO</td>
</tr>

<tr>
<td class="left"><a href="#caffeine">caffeine</a></td>
<td class="left">caffeine</td>
<td class="left">xyz</td>
<td class="left">Cn1cnc2n(C)c(=O)n(C)c(=O)c12</td>
</tr>
</tbody>
</table>

<p>
That seems pretty discoverable to me. We not only can discover the molecules in this post, but can pretty easily convert them to other formats (SMILES) in this case. Since we can run any code we want on them, we could just as well import them to a database, or do subsequent calculations on them.
</p>

<p>
The MOLECULE block is not standard, and I have only demonstrated here that it is suitable for this purpose. But, it looks like we could extend it and deal with a variety of formats. We can use headers to add metadata, format, etc&#x2026; Some features I find missing are similar to those in code blocks where we can type C-c ' to edit them in special modes, and the nice syntax highlighting that often comes with that.
</p>

<p>
It might be helpful to make the export of MOLECULE blocks nicer looking and more functional. The default export, for example doesn't put an id attribute in the block. First, we rewrite an org-function to add the id attribute to the exported blocks so our molecule links will work.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-html-special-block</span> (special-block contents info)
  <span style="color: #036A07;">"Transcode a SPECIAL-BLOCK element from Org to HTML.</span>
<span style="color: #036A07;">CONTENTS holds the contents of the block.  INFO is a plist</span>
<span style="color: #036A07;">holding contextual information."</span>
  (<span style="color: #0000FF;">let*</span> ((block-type (downcase
                      (org-element-property <span style="color: #006FE0;">:type</span> special-block)))
         (contents (<span style="color: #0000FF;">or</span> contents <span style="color: #008000;">""</span>))
         (html5-fancy (<span style="color: #0000FF;">and</span> (org-html-html5-p info)
                           (plist-get info <span style="color: #006FE0;">:html-html5-fancy</span>)
                           (member block-type org-html-html5-elements)))
         (attributes (org-export-read-attribute <span style="color: #006FE0;">:attr_html</span> special-block)))
    (<span style="color: #0000FF;">unless</span> html5-fancy
      (<span style="color: #0000FF;">let</span> ((class (plist-get attributes <span style="color: #006FE0;">:class</span>)))
        (<span style="color: #0000FF;">setq</span> attributes (plist-put attributes <span style="color: #006FE0;">:class</span>
                                    (<span style="color: #0000FF;">if</span> class (concat class <span style="color: #008000;">" "</span> block-type)
                                      block-type)))
        (<span style="color: #0000FF;">when</span> (org-element-property <span style="color: #006FE0;">:name</span> special-block)
          (<span style="color: #0000FF;">setq</span> attributes (plist-put
                            attributes <span style="color: #006FE0;">:id</span>
                            (org-element-property <span style="color: #006FE0;">:name</span> special-block))))))
    (<span style="color: #0000FF;">setq</span> attributes (org-html--make-attribute-string attributes))
    (<span style="color: #0000FF;">when</span> (not (equal attributes <span style="color: #008000;">""</span>))
      (<span style="color: #0000FF;">setq</span> attributes (concat <span style="color: #008000;">" "</span> attributes)))
    (<span style="color: #0000FF;">if</span> html5-fancy
        (format <span style="color: #008000;">"&lt;%s%s&gt;\n%s&lt;/%s&gt;"</span> block-type attributes
                contents block-type)
      (format <span style="color: #008000;">"&lt;div%s&gt;\n%s\n&lt;/div&gt;"</span> attributes contents))))
</pre>
</div>

<pre class="example">
org-html-special-block
</pre>

<p>
It would be nice to add some additional information around the block, e.g. that it is a molecule, maybe some tooltip about the format, etc&#x2026;, but we leave that to another day. These should probably be handled specially with a dedicated export function. You will note that MOLECULE blocks don't export too well, they should probably be wrapped in &lt;pre&gt; for HTML export. We will at least make them stand out with this bit of css magic.
</p>

<pre class="example">
#+HTML_HEAD_EXTRA:  &lt;style&gt;.molecule {background-color:LightSkyBlue;}&lt;/style&gt;
</pre>



<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Summary thoughts</h2>
<div class="outline-text-2" id="text-1">
<p>
This looks pretty promising as a way to embed molecular data into org-files so that the data is reusable and discoverable. If there is metadata that cannot go into the MOLECULE format we can put it in headers instead. This seems like it could be useful.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Appendix of molecules</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1"><span class="section-number-3">2.1</span> Water</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Here is water in the CML format.
</p>

<div class="molecule" id="h2o">
<p>
&lt;?xml version="1.0"?&gt;
&lt;molecule xmlns="<a href="http://www.xml-cml.org/schema">http://www.xml-cml.org/schema</a>"&gt;
 &lt;atomArray&gt;
  &lt;atom id="a1" elementType="O"/&gt;
  &lt;atom id="a2" elementType="O"/&gt;
 &lt;/atomArray&gt;
 &lt;bondArray&gt;
  &lt;bond atomRefs2="a1 a2" order="1"/&gt;
 &lt;/bondArray&gt;
&lt;/molecule&gt;
</p>

</div>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2"><span class="section-number-3">2.2</span> Caffeine</h3>
<div class="outline-text-3" id="text-2-2">
<p>
This is a simple xyz format of caffeine.
</p>

<div class="molecule" id="caffeine">
<p>
24
</p>

<p>
C          1.02887       -0.01688       -0.03460
N          2.46332        0.11699       -0.03522
C          3.33799       -0.94083       -0.03530
N          4.59156       -0.53767       -0.03594
C          4.50847        0.82120       -0.03623
N          5.57252        1.69104       -0.03687
C          6.93040        1.17620       -0.03898
C          5.33446        3.06602       -0.03685
O          6.26078        3.88171       -0.03594
N          3.98960        3.48254       -0.03830
C          3.70813        4.90531       -0.04199
C          2.87287        2.63769       -0.03747
O          1.71502        3.04777       -0.03830
C          3.21603        1.25723       -0.03610
H          0.54478        0.95872       -0.03440
H          0.73663       -0.56946        0.86233
H          0.73584       -0.56959       -0.93118
H          3.00815       -1.97242       -0.03493
H          7.67209        1.97927       -0.03815
H          7.07929        0.56516       -0.93486
H          7.08112        0.56135        0.85404
H          4.61163        5.51902       -0.04152
H          3.11230        5.15092        0.84340
H          3.11643        5.14660       -0.93127
</p>

</div>
</div>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/28/Another-approach-to-embedded-molecular-data-in-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A molecule link for org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode" />
    <id>http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode</id>
    <updated>2016-03-26T15:33:10Z</updated>
    <published>2016-03-26T15:28:17Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="chemistry" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[A molecule link for org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/26/A-molecule-link-for-org-mode"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Appendix of molecules</a></li>
<li><a href="#sec-2">2. smiles major mode</a></li>
</ul>
</div>
</div>
<p>
Here I am exploring some ideas on compact and functional representations of molecules in org-mode. We will use some functionality from OpenBabel (<a href="https://openbabel.org/docs/dev/index.html">https://openbabel.org/docs/dev/index.html</a> ) for conversion of formats.
</p>

<p>
One approach we could use is the <a href="https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system">SMILES</a> representation. OpenBabel provides tools to convert SMILES to a visualization like this. Let's check out an old favorite: caffeine.
</p>

<div class="org-src-container">

<pre class="src src-sh">obabel -:<span style="color: #008000;">"Cn1cnc2n(C)c(=O)n(C)c(=O)c12"</span> -osvg
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/out.svg"> 
</p>
</div>

<p>
We can imagine the SMILES string is a program, and use an org-mode src block to contain it.  It isn't quite a program, as it is more like data, but we can make the block executable if we define how to "execute" the block, and for that we will just have obabel generate the svg representation of the molecule. Here is our execute function. It simply generates the svg to stdout. We can use a :file header to capture it in a file.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-babel-execute:smiles</span> (body params)
  (shell-command-to-string
   (format <span style="color: #008000;">"obabel -:\"%s\" -osvg 2&gt; /dev/null"</span> body)))
</pre>
</div>

<pre class="example">
org-babel-execute:smiles
</pre>

<p>
You can find a smiles block in <a href="#sec-1">Appendix of molecules</a> that was adapted from <a href="http://www.daylight.com/dayhtml_tutorials/languages/smiles/smiles_examples.html">here</a> .
</p>

<p>
Now, we need a link to refer to our molecule. We want the follow action to jump to our src block which should have a name. We will have it export as the name of the block linked to the molecule definition. This should work fine for definitions in the document. It is not robust to link to molecules in other org-files in the export. That would require those files to be exported too. For now we just define an HTML export.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">molecule-jump</span> (name)
  (org-mark-ring-push)
  (org-open-link-from-string (format <span style="color: #008000;">"[[%s]]"</span> path)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">molecule-export</span> (path desc backend)
  (<span style="color: #0000FF;">let</span> ((name (<span style="color: #0000FF;">save-window-excursion</span>
                (molecule-jump path)
                (org-element-property <span style="color: #006FE0;">:name</span> (org-element-context)))))
    (<span style="color: #0000FF;">cond</span>
     ((eq 'html backend)
      (format <span style="color: #008000;">"&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;"</span> name name)))))

(org-add-link-type
 <span style="color: #008000;">"molecule"</span>
 'molecule-jump
 'molecule-export)
</pre>
</div>

<p>
Now we link to <a href="#LSD">LSD</a> and <a href="#ethanol">ethanol</a> that allows us to navigate to the definition. We can also refer to a molecule in another file like <a href="#ethanol">ethanol</a>. The links are clickable, and should jump to the molecule definition. On export to HTML they will be links to the definition.
</p>

<p>
Our link provides some limited functionality. We can provide more by making the follow action open a menu for example. Instead, we created a major mode <a href="#sec-2">here</a>. It provides a function to convert smiles to CML. It is readily extensible to do other conversions.
</p>

<p>
One of the reasons we want to have molecules as "data" is so we can find them in our papers. Here is an example of that. We defined two molecules in the Appendix, and we find them here.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer)
    'src-block
  (<span style="color: #0000FF;">lambda</span> (src)
    (<span style="color: #0000FF;">when</span> (string= <span style="color: #008000;">"smiles"</span> (org-element-property <span style="color: #006FE0;">:language</span> src))
      (org-element-property <span style="color: #006FE0;">:name</span> src))))
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">LSD</td>
<td class="left">ethanol</td>
</tr>
</tbody>
</table>

<p>
There is still a lot to do to make this really functional. For example, we might want to use the molecules to write reactions. We might also want more advanced conversion or lookup functions, and more export options. It might be desirable to have tooltips on the links to see the molecules too. No doubt one might want to fine-tune the way the blocks run, so that options could be passed as header args.
Maybe I will work on that another day.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><a id="ID-1CD759B4-E276-4990-982C-E98CCE5B0517" name="ID-1CD759B4-E276-4990-982C-E98CCE5B0517"></a><span class="section-number-2">1</span> Appendix of molecules</h2>
<div class="outline-text-2" id="text-1">

<p>
Here is an example smiles block.
</p>
<div class="org-src-container">
<label class="org-src-name">A lysergic acid diethylamide molecule</label>
<pre class="src src-smiles" id="LSD">CCN(CC)C(=O)[C@H]1CN(C)[C@@H]2Cc3c[nH]c4cccc(C2=C1)c34
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/lsd.svg"> 
</p>
</div>

<div class="org-src-container">
<label class="org-src-name">An ethanol molecule.</label>
<pre class="src src-smiles" id="ethanol">CCO
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-26-A-molecule-link-for-org-mode/ethanol.svg"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><a id="ID-7978044B-CB2F-4AB3-8142-34A28B3DB201" name="ID-7978044B-CB2F-4AB3-8142-34A28B3DB201"></a><span class="section-number-2">2</span> smiles major mode</h2>
<div class="outline-text-2" id="text-2">
<p>
It would be nice to have a language mode to do special edits of SMILES src blocks. This mode does very little but provide a function that converts SMILES to CML using obabel and open it in a buffer. We redirect stderr to /dev/null to avoid seeing the messages from obabel. We also provide another function that opens a browser to names of the molecule.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">easymenu</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">smiles-cml</span> ()
  <span style="color: #036A07;">"Convert the smiles string in the buffer to CML."</span>
  (<span style="color: #0000FF;">interactive</span>)
  (<span style="color: #0000FF;">let</span> ((smiles (buffer-string)))
    (switch-to-buffer (get-buffer-create <span style="color: #008000;">"SMILES-CML"</span>))
    (erase-buffer)
    (insert
     (shell-command-to-string
      (format <span style="color: #008000;">"obabel -:\"%s\" -ocml 2&gt; /dev/null"</span>
              smiles)))
    (goto-char (point-min))
    (xml-mode)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">smiles-names</span> ()
  (<span style="color: #0000FF;">interactive</span>)
  (browse-url
   (format <span style="color: #008000;">"http://cactus.nci.nih.gov/chemical/structure/%s/names"</span>
           (buffer-string))))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">smiles-mode-map</span>
  nil
  <span style="color: #036A07;">"Keymap for smiles-mode."</span>)

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">adapted from http://ergoemacs.org/emacs/elisp_menu_for_major_mode.html</span>
(<span style="color: #0000FF;">define-derived-mode</span> <span style="color: #006699;">smiles-mode</span> fundamental-mode <span style="color: #008000;">"smiles-mode"</span>
  <span style="color: #036A07;">"Major mode for SMILES code."</span>
  (<span style="color: #0000FF;">setq</span> buffer-invisibility-spec '(t)
        mode-name <span style="color: #008000;">" &#9786;"</span>)

  (<span style="color: #0000FF;">when</span> (not smiles-mode-map)
    (<span style="color: #0000FF;">setq</span> smiles-mode-map (make-sparse-keymap)))
  (define-key smiles-mode-map (kbd <span style="color: #008000;">"C-c C-c"</span>) 'smiles-cml)
  (define-key smiles-mode-map (kbd <span style="color: #008000;">"C-c C-n"</span>) 'smiles-names)

  (define-key smiles-mode-map [menu-bar] (make-sparse-keymap))

  (<span style="color: #0000FF;">let</span> ((menuMap (make-sparse-keymap <span style="color: #008000;">"SMILES"</span>)))
    (define-key smiles-mode-map [menu-bar smiles] (cons <span style="color: #008000;">"SMILES"</span> menuMap))

    (define-key menuMap [cml]
      '(<span style="color: #008000;">"CML"</span> . smiles-cml))
    (define-key menuMap [names]
      '(<span style="color: #008000;">"Names"</span> . smiles-names))))
</pre>
</div>

<pre class="example">
smiles-mode
</pre>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/26/A-molecule-link-for-org-mode.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Displaying image overlays on image filenames in Emacs]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs" />
    <id>http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs</id>
    <updated>2016-03-21T11:21:19Z</updated>
    <published>2016-03-21T11:21:19Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Displaying image overlays on image filenames in Emacs]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Tooltip approach</a></li>
<li><a href="#sec-2">2. The overlay approach</a></li>
</ul>
</div>
</div>
<p>
It has always bothered me a little that I have to add a file image after code blocks in org-mode to see the results. That extra work&#x2026; I also don't like having to explicitly print the figure in the code, since that is the extra work, just in a different place. Today I look into two approaches to this. First, we consider something like tooltips, and second just putting overlays of image files right on the file name. The plus side of this is no extra work. The downside is they won't export; that will still take the extra work, but you needed that for the caption anyway for now.
</p>

<p>
Here is a video illustrating the code in this post: <a href="https://www.youtube.com/watch?v=VuAnwCERM0U">https://www.youtube.com/watch?v=VuAnwCERM0U</a> 
</p>

<p>
Here is a test.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([0, 1, 2, 4, 16])
plt.savefig(<span style="color: #008000;">"test-fig.png"</span>)
</pre>
</div>


<div class="figure">
<p><img src="/media/2016-03-21-Displaying-image-overlays-on-image-filenames-in-Emacs/test-fig.png"> 
</p>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Tooltip approach</h2>
<div class="outline-text-2" id="text-1">
<p>
Building on our <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs/">previous approach</a> of graphical tooltips, we try that here to show the images. I have solved the issue of why the images didn't show in the tooltips before; it was related to how Emacs was built. I used to build it with "cocoa" support so it integrates well in OSX. Here, I have build it with gtk3, and the tooltips work with images.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">image-tooltip-re</span> (concat  <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?3:</span><span style="color: #008000;">'</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">\"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?1:</span><span style="color: #008000;">.*\\."</span>
                                  (regexp-opt '(<span style="color: #008000;">"png"</span> <span style="color: #008000;">"PNG"</span> <span style="color: #008000;">"JPG"</span> <span style="color: #008000;">"jpeg"</span>
                                                <span style="color: #008000;">"jpg"</span> <span style="color: #008000;">"JPEG"</span> <span style="color: #008000;">"eps"</span> <span style="color: #008000;">"EPS"</span>))
                                  <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?:</span><span style="color: #008000;">\\3</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
  <span style="color: #036A07;">"Regexp to match image filenames in quotes"</span>)

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">image-tooltip</span> (window object position)
  (<span style="color: #0000FF;">save-excursion</span>
    (goto-char position)
    (<span style="color: #0000FF;">let</span> (beg end imgfile img s)
      (<span style="color: #0000FF;">while</span> (not (looking-at image-tooltip-re))
        (forward-char -1))
      (<span style="color: #0000FF;">setq</span> imgfile (match-string-no-properties 1))
      (<span style="color: #0000FF;">when</span> (file-exists-p imgfile)
        (<span style="color: #0000FF;">setq</span> img (create-image (expand-file-name imgfile)
                                'imagemagick nil <span style="color: #006FE0;">:width</span> 200))
        (propertize <span style="color: #008000;">"Look in the minibuffer"</span>
                    'display img)))))

(font-lock-add-keywords
 nil
 `((,image-tooltip-re
    0 '(face font-lock-keyword-face
             help-echo image-tooltip))))

(font-lock-fontify-buffer)
</pre>
</div>

<p>
Now these both have tooltips on them: "test-fig.png"  and  'test-fig.png'.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> The overlay approach</h2>
<div class="outline-text-2" id="text-2">
<p>
We might alternatively prefer to put overlays in the buffer. Here we make that happen.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">next-image-overlay</span> (<span style="color: #6434A3;">&amp;optional</span> limit)
  (<span style="color: #0000FF;">when</span> (re-search-forward image-tooltip-re limit t)
    (<span style="color: #0000FF;">setq</span> beg (match-beginning 0)
          end (match-end 0)
          imgfile (match-string 1))
    (<span style="color: #0000FF;">when</span> (file-exists-p imgfile)
      (<span style="color: #0000FF;">setq</span> img (create-image (expand-file-name imgfile)
                              'imagemagick nil <span style="color: #006FE0;">:width</span> 300))
      (<span style="color: #0000FF;">setq</span> ov (make-overlay beg end))
      (overlay-put ov 'display img)
      (overlay-put ov 'face 'default)
      (overlay-put ov 'org-image-overlay t)
      (overlay-put ov 'modification-hooks
                   (list 'org-display-inline-remove-overlay)))))

(font-lock-add-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t)))
 t)
</pre>
</div>


<p>
Here is the example we looked at before.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
plt.plot([-0, 1, 2, 4, 16])
plt.savefig(<span style="color: #008000;">"test-fig.png"</span>)
</pre>
</div>

<p>
You may want to remove those overlays. Here is one way. Note they come back if you don't disable the font-lock keywords though.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(ov-clear 'org-image-overlay)
</pre>
</div>
<p>
I know you want to do that so here is:
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(font-lock-remove-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t))))

(ov-clear 'org-image-overlay)
</pre>
</div>


<p>
Note you still have to clear the overlays. Font lock doesn't seem to do that for you I think.
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Org teleport headlines]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines" />
    <id>http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines</id>
    <updated>2016-03-18T08:48:14Z</updated>
    <published>2016-03-18T08:47:14Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Org teleport headlines]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/03/18/Org-teleport-headlines"><![CDATA[


<p>
I often want to rearrange org headlines.  There are super convenient shortcuts for some things, like Alt-up/down to move up and down, and Alt-left/right to change levels, and shift variants of that when there are nested headlines. There is also refile for some use cases. The case these don't handle for me is when I have a headline at the bottom and I want to move it a distance. To cut down on key strokes, I usually kill the headline, jump to where I want, and paste it.
</p>

<p>
In lispy, there is a teleport command for this! I am going to adapt this here for reorganizing org-headlines. This version allows you to move headlines around on the visible area. You need another strategy for the candidates to jump to if you want to move a headline off the screen. Note though that ivy is really smart, you can have one file in a split view and it will jump to any headline in any window! I use ivy for the navigation here, but you could also use helm to select headlines, for example. This function puts your headline after the selected headline, unless you use a prefix arg, and then it goes before.
</p>

<p>
Check out the video to see this in action: <a href="https://www.youtube.com/watch?v=Vv-2888rpyc">https://www.youtube.com/watch?v=Vv-2888rpyc</a> 
</p>

<p>
Note: this code is a little more advanced than what is in the video; I added a numeric prefix to change the headline level.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">org-teleport</span> (<span style="color: #6434A3;">&amp;optional</span> arg)
  <span style="color: #036A07;">"Teleport the current heading to after a headline selected with avy.</span>
<span style="color: #036A07;">With a prefix ARG move the headline to before the selected</span>
<span style="color: #036A07;">headline. With a numeric prefix, set the headline level. If ARG</span>
<span style="color: #036A07;">is positive, move after, and if negative, move before."</span>
  (<span style="color: #0000FF;">interactive</span> <span style="color: #008000;">"P"</span>)
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Kill current headline</span>
  (org-mark-subtree)
  (kill-region (region-beginning) (region-end))
  <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Jump to a visible headline</span>
  (<span style="color: #0000FF;">avy-with</span> avy-goto-line (avy--generic-jump <span style="color: #008000;">"^\\*+"</span> nil avy-style))
  (<span style="color: #0000FF;">cond</span>
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Move before  and change headline level</span>
   ((<span style="color: #0000FF;">and</span> (numberp arg) (&gt; 0 arg))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">arg is what we want, second is what we have</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if n is positive, we need to demote (increase level)</span>
    (<span style="color: #0000FF;">let</span> ((n (- (abs arg) (car (org-heading-components)))))
      (<span style="color: #0000FF;">cl-loop</span> for i from 1 to (abs n)
               do
               (<span style="color: #0000FF;">if</span> (&gt; 0 n)
                   (org-promote-subtree)
                 (org-demote-subtree)))))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">Move after and change level</span>
   ((<span style="color: #0000FF;">and</span> (numberp arg) (&lt; 0 arg))
    (org-mark-subtree)
    (goto-char (region-end))
    (<span style="color: #0000FF;">when</span> (eobp) (insert <span style="color: #008000;">"\n"</span>))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">n is what we want and second is what we have</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if n is positive, we need to demote</span>
    (<span style="color: #0000FF;">let</span> ((n (- (abs arg) (car (org-heading-components)))))
      (<span style="color: #0000FF;">cl-loop</span> for i from 1 to (abs n)
               do
               (<span style="color: #0000FF;">if</span> (&gt; 0 n) (org-promote-subtree)
                 (org-demote-subtree)))))

   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">move to before selection</span>
   ((equal arg '(4))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank)))
   <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">move to after selection</span>
   (t
    (org-mark-subtree)
    (goto-char (region-end))
    (<span style="color: #0000FF;">when</span> (eobp) (insert <span style="color: #008000;">"\n"</span>))
    (<span style="color: #0000FF;">save-excursion</span>
      (yank))))
  (outline-hide-leaves))
</pre>
</div>

<pre class="example">
org-teleport
</pre>

<p>
Now we add some new speed commands to help us out. I think we should be able to mark subtrees ("@" is bound to this, but I like "m" better) and kill them with a key stroke, in addition to teleporting them. Since we figured out the nice way to jump to a headline up there, we bind that to "q" which isn't used so far, and maps to a similar concept in lispy. The lowercase "t" is already bound to changing the TODO state, so we use capital "T" for the speed key to teleport. Note it is possible to "compose" the same effect by typing "k" to kill a headline, then "q" to jump somewhere else (or navigate where you want,  and then "C-y" to paste it at the new location. Or, "T".
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"m"</span> 'org-mark-subtree))
(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"k"</span> (<span style="color: #0000FF;">lambda</span> ()
                                                  (org-mark-subtree)
                                                  (kill-region
                                                   (region-beginning)
                                                   (region-end)))))
(add-to-list 'org-speed-commands-user
             (cons <span style="color: #008000;">"q"</span> (<span style="color: #0000FF;">lambda</span> ()
                         (<span style="color: #0000FF;">avy-with</span> avy-goto-line
                           (avy--generic-jump <span style="color: #008000;">"^\\*+"</span> nil avy-style)))))

(add-to-list 'org-speed-commands-user (cons <span style="color: #008000;">"T"</span> 'org-teleport))
<span style="color: #008000;">"done"</span>
</pre>
</div>

<pre class="example">
done
</pre>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/03/18/Org-teleport-headlines.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
