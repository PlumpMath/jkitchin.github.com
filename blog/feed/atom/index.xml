<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2015-02-02T21:31:29Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[helm actions when there is no match]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/02/helm-actions-when-there-is-no-match" />
    <id>http://jkitchin.github.io/blog/2015/02/02/helm-actions-when-there-is-no-match</id>
    <updated>2015-02-02T16:31:07Z</updated>
    <published>2015-02-02T16:31:07Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="uncategorized" />
    <summary type="html"><![CDATA[helm actions when there is no match]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/02/helm-actions-when-there-is-no-match"><![CDATA[



<p>
Sometimes you run out of matches in a helm selection buffer, and all that is left is the pattern you have typed in. It turns out you can perform some action on that pattern! Why would you do that? Suppose you are searching your bibliography, and you do not find what you are looking for. Then, you may want to send the pattern to Google, or some other search engine to see what comes up.
</p>

<p>
The key to handling this situation is to use <i>two</i> sources in your helm session. One that works on the candidates and deals with actions on them, and one that has no candidates, and works on the pattern. The variable helm-pattern contains what you typed in. We call the second source the Fallback option. The second source has no candidates, and we use (dummy) in place of the candidates.
</p>

<p>
It easy to add two sources. Here we define the sources as variables, and use the variables in the :sources list to the helm command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">some-action</span> (arg)
  (message-box <span style="color: #008000;">"%s\n%s"</span>
    (helm-get-selection)
    (helm-marked-candidates)))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">default-action</span> (candidate)
  (browse-url
   (format
    <span style="color: #008000;">"http://www.google.com/search?q=%s"</span> (url-hexify-string helm-pattern))))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">source1</span> '((name . <span style="color: #008000;">"HELM"</span>)
                  (candidates . (1 2 3 4))
                  (action . ((<span style="color: #008000;">"open"</span> . some-action)))))

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">fallback-source</span> '((name . <span style="color: #008000;">"fallback"</span>)
                          (dummy)
                          (action . ((<span style="color: #008000;">"Google"</span> . default-action)))))

(helm <span style="color: #006FE0;">:sources</span> '(source1 fallback-source))
</pre>
</div>

<pre class="example">
#&lt;process open http://www.google.com/search?q=addtion%20pul&gt;
</pre>

<p>
When you run this, if you run out of search candidates, all that will be left is the fallback option, and when you press enter, it will launch a browser pointing to the google search for your pattern.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/02/helm-actions-when-there-is-no-match.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Handling multiple selections in helm]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/02/01/Handling-multiple-selections-in-helm" />
    <id>http://jkitchin.github.io/blog/2015/02/01/Handling-multiple-selections-in-helm</id>
    <updated>2015-02-01T08:51:26Z</updated>
    <published>2015-02-01T08:51:26Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="helm" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Handling multiple selections in helm]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/02/01/Handling-multiple-selections-in-helm"><![CDATA[


<p>
The basic usage pattern of helm is you run a command which opens a buffer of choices. You enter some text in the minibuffer which eliminates choices that do not match what you type in. You can select multiple choices by using C-spc, or M-a to mark them all. When you press enter, the current selection is sent to the default action defined. The action is a function that does something, usually on the selected item(s). Here, we explore writing the action function to do what we want. The reason this is somewhat tricky is that when you mark an item in helm, the "cursor" moves to the next item, which means when you press enter it may be possible that the current highlighted item is not part of the items you have marked. If your action will perform a delete action, for example, you may have wanted to delete the marked items, and <i>not</i> the current selection! So, what we need is a way to get what we want.
</p>

<p>
An action function in helm should normally take one argument, which is going to be the currently selected item from helm. However, we can use two different functions to access either the selected item (helm-get-selection) or the marked items (helm-marked-candidates). So, we can write our function to do "do what we mean". Note, even if you do not mark any candidates,  (helm-marked-candidates) will return a list that has the current selection in it. So we can write our action function to act on this list so it works on what is marked or what is selected if nothing is marked. That is probably "what we mean".
</p>

<p>
Here is one way to work on a selection or marked list of selections. We define an action function that takes an arg, but inside we operate on each element of the marked candidates.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">some-action</span> (candidate)
  (loop for cand in (helm-marked-candidates)
        do
        (message-box <span style="color: #008000;">"working on %s"</span> cand)))

(helm <span style="color: #006FE0;">:sources</span> '(((name . <span style="color: #008000;">"HELM"</span>)
                  (candidates . (1 2 3 4))
                  (action . ((<span style="color: #008000;">"open"</span> . some-action))))))
</pre>
</div>


<p>
Here is an alternative approach. Here we define the action function to work on one candidate. That might be helpful for testing, for example. Then, we use mapc to apply the function to each marked candidate.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">some-action</span> (candidate)
  (message-box <span style="color: #008000;">"single working on %s"</span> candidate))

(helm <span style="color: #006FE0;">:sources</span> '(((name . <span style="color: #008000;">"HELM"</span>)
                  (candidates . (1 2 3 4))
                  (action . ((<span style="color: #008000;">"open"</span> . (<span style="color: #0000FF;">lambda</span> (candidate)
                                         (mapc
                                          'some-action
                                          (helm-marked-candidates)))))))))
</pre>
</div>

<p>
A little more verbose method might be like this. Here we just pull out the lambda function to another function, to make the helm source definition a little shorter. I cannot tell if this is easier to follow, it is just another option.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">some-action</span> (candidate)
  (message-box <span style="color: #008000;">"single2 working on %s"</span> candidate))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">some-actions</span> (candidate)
  (mapc 'some-action (helm-marked-candidates)))

(helm <span style="color: #006FE0;">:sources</span> '(((name . <span style="color: #008000;">"HELM"</span>)
                  (candidates . (1 2 3 4))
                  (action . some-actions))))
</pre>
</div>


<p>
So there you have it. You can select multiple things in helm, and then operate on them with your action function!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/02/01/Handling-multiple-selections-in-helm.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Turn an ISBN to a bibtex entry]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/31/Turn-an-ISBN-to-a-bibtex-entry" />
    <id>http://jkitchin.github.io/blog/2015/01/31/Turn-an-ISBN-to-a-bibtex-entry</id>
    <updated>2015-01-31T15:50:22Z</updated>
    <published>2015-01-31T15:48:39Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="bibtex" />
    <summary type="html"><![CDATA[Turn an ISBN to a bibtex entry]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/31/Turn-an-ISBN-to-a-bibtex-entry"><![CDATA[


<p>
Occasionally, I need a bibtex entry for a book. Books are often identified by an ISBN number. Similar to using Crossref to get metadata about a DOI, we can use a web service to get metadata about an ISBN. From that, we might be able to construct a bibtex entry.
</p>

<p>
Here is an example of what we can get for ISBN 9780309095211. It does not seem to matter if there are dashes in the ISBN or not.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span>
        (url-retrieve-synchronously
<span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/9780309095211?method=getMetadata&amp;format=json&amp;fl=*"</span>)
      (buffer-substring url-http-end-of-headers (point-max)))
</pre>
</div>

<pre class="example">
{
 "stat":"ok",
 "list":[{
	"url":["http://www.worldcat.org/oclc/224969280?referer=xid"],
	"publisher":"National Academies Press",
	"form":["BC"],
	"lccn":["2006016786"],
	"lang":"eng",
	"city":"Washington, D.C.",
	"author":"Committee on the Guide to Recruiting and Advancing Women Scientists and Engineers in Academia, Committee on Women in Science and Engineering, Policy and Global Affairs, National Research Council of the National Academies.",
	"ed":"[Online-Ausg.]",
	"year":"2006",
	"isbn":["9780309095211"],
	"title":"To recruit and advance women students and faculty in science and engineering",
	"oclcnum":["224969280",
	 "70060944",
	 "756709329",
	 "804792476",
	 "817950524",
	 "833420290",
	 "836338922",
	 "704551455"]}]}
</pre>

<p>
We get a nice json data string back. We can parst that to get an actual data structure.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">with-current-buffer</span>
        (url-retrieve-synchronously
<span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/9780309095211?method=getMetadata&amp;format=json&amp;fl=*"</span>)
      (json-read-from-string
        (buffer-substring url-http-end-of-headers (point-max))))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">((list .
       [((oclcnum .
                  [<span style="color: #008000;">"224969280"</span> <span style="color: #008000;">"70060944"</span> <span style="color: #008000;">"756709329"</span> <span style="color: #008000;">"804792476"</span> <span style="color: #008000;">"817950524"</span> <span style="color: #008000;">"833420290"</span> <span style="color: #008000;">"836338922"</span> <span style="color: #008000;">"704551455"</span>])
         (title . <span style="color: #008000;">"To recruit and advance women students and faculty in science and engineering"</span>)
         (isbn .
               [<span style="color: #008000;">"9780309095211"</span>])
         (year . <span style="color: #008000;">"2006"</span>)
         (ed . <span style="color: #008000;">"[Online-Ausg.]"</span>)
         (author . <span style="color: #008000;">"Committee on the Guide to Recruiting and Advancing Women Scientists and Engineers in Academia, Committee on Women in Science and Engineering, Policy and Global Affairs, National Research Council of the National Academies."</span>)
         (city . <span style="color: #008000;">"Washington, D.C."</span>)
         (lang . <span style="color: #008000;">"eng"</span>)
         (lccn .
               [<span style="color: #008000;">"2006016786"</span>])
         (form .
               [<span style="color: #008000;">"BC"</span>])
         (publisher . <span style="color: #008000;">"National Academies Press"</span>)
         (url .
              [<span style="color: #008000;">"http://www.worldcat.org/oclc/224969280?referer=xid"</span>]))])
 (stat . <span style="color: #008000;">"ok"</span>))
</pre>
</div>

<p>
Ok, so we should check that stat is ok, then build the bibtex entry. Accessing the metadata below seems pretty hacky; but it works, and I don't understand the deep nesting of results, and there seems to be a vector in there.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">let*</span> ((results  (<span style="color: #0000FF;">with-current-buffer</span>
                    (url-retrieve-synchronously
                     <span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/9780309095211?method=getMetadata&amp;format=json&amp;fl=*"</span>)
                  (json-read-from-string
                   (buffer-substring url-http-end-of-headers (point-max)))))
       (status (cdr (nth 1 results)))
       (metadata (aref (cdar results) 0)))

  (<span style="color: #0000FF;">unless</span> (string= <span style="color: #008000;">"ok"</span> status)
    (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"Status is %s"</span> status))

  (concat <span style="color: #008000;">"@book{,\n"</span>
          (mapconcat (<span style="color: #0000FF;">lambda</span> (x)
                       (format <span style="color: #008000;">"  %s={%s},"</span> (car x) (cdr x)))
                     metadata <span style="color: #008000;">"\n"</span>)
          <span style="color: #008000;">"}\n"</span>))
</pre>
</div>

<pre class="example">
@book{,
  oclcnum={[224969280 70060944 756709329 804792476 817950524 833420290 836338922 704551455]},
  title={To recruit and advance women students and faculty in science and engineering},
  isbn={[9780309095211]},
  year={2006},
  ed={[Online-Ausg.]},
  author={Committee on the Guide to Recruiting and Advancing Women Scientists and Engineers in Academia, Committee on Women in Science and Engineering, Policy and Global Affairs, National Research Council of the National Academies.},
  city={Washington, D.C.},
  lang={eng},
  lccn={[2006016786]},
  form={[BC]},
  publisher={National Academies Press},
  url={[http://www.worldcat.org/oclc/224969280?referer=xid]},}
</pre>

<p>
That looks good to me. Let us finally wrap it into a function that will take an ISBN and bibtex file interactively, create a bibtex entry, and insert it if there is not an entry with a key like that already. If we have selected region, lI should note this code uses some functionality from my org-ref package (and when I am done here, I am adding it to the doi-utils package inside org-ref). This is a fancy function, built from the experience I have from writing doi-utils.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">isbn-to-bibtex</span> (isbn bibfile)
  <span style="color: #036A07;">"Get bibtex entry for ISBN and insert it into BIBFILE unless an</span>
<span style="color: #036A07;">entry with the generated key already exists in the file."</span>
  (interactive
   (list
    (read-input
     <span style="color: #008000;">"ISBN: "</span>
     <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">now set initial input</span>
     (<span style="color: #0000FF;">cond</span>
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">If region is active and it starts with a number, we use it</span>
      ((and  (region-active-p)
             (s-match <span style="color: #008000;">"^[0-9]"</span> (buffer-substring (region-beginning) (region-end))))
       (buffer-substring (region-beginning) (region-end)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">if first entry in kill ring starts with a number assume it is an isbn</span>
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">and use it as the guess</span>
      ((<span style="color: #0000FF;">if</span> (s-match <span style="color: #008000;">"^[0-9]"</span> (car kill-ring))
           (car kill-ring)))
      <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">type or paste it in</span>
      (t
       nil)))
    (ido-completing-read
     <span style="color: #008000;">"Bibfile: "</span>
     (append (f-entries <span style="color: #008000;">"."</span> (<span style="color: #0000FF;">lambda</span> (f) (f-ext? f <span style="color: #008000;">"bib"</span>)))
             org-ref-default-bibliography))))

  (<span style="color: #0000FF;">let*</span> ((results (<span style="color: #0000FF;">with-current-buffer</span>
                      (url-retrieve-synchronously
                       (format
                        <span style="color: #008000;">"http://xisbn.worldcat.org/webservices/xid/isbn/%s?method=getMetadata&amp;format=json&amp;fl=*"</span>
                        isbn))
                    (json-read-from-string
                     (buffer-substring url-http-end-of-headers (point-max)))))
         (status (cdr (nth 1 results)))
         (metadata (aref (cdar results) 0))
         (new-entry)
         (new-key))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">check if we got something</span>
    (<span style="color: #0000FF;">unless</span> (string= <span style="color: #008000;">"ok"</span> status)
      (<span style="color: #ff0000; font-weight: bold;">error</span> <span style="color: #008000;">"Status is %s"</span> status))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">construct an alphabetically sorted bibtex entry. I assume ISBN numbers go</span>
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">with book entries.</span>
    (setq new-entry
          (concat <span style="color: #008000;">"\n@book{,\n"</span>
                  (mapconcat
                   'identity
                   (loop for field in (-sort 'string-lessp (mapcar 'car metadata))
                         collect
                         (format <span style="color: #008000;">"  %s={%s},"</span> field (cdr (assoc field metadata))))
                   <span style="color: #008000;">"\n"</span>)
                  <span style="color: #008000;">"\n}\n"</span>))

    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">build entry in temp buffer to get the key so we can check for duplicates</span>
    (setq new-entry (<span style="color: #0000FF;">with-temp-buffer</span>
                      (insert new-entry)
                      (org-ref-clean-bibtex-entry)
                      (setq new-key (bibtex-key-in-head))
                      (buffer-string)))
    (find-file bibfile)
    (goto-char (point-min))
    (<span style="color: #0000FF;">when</span> (search-forward new-key nil t)
      (beep)
      (setq new-key (read-input
                     (format  <span style="color: #008000;">"%s already exists. Enter new key (C-g to cancel): "</span> new-key)
                     new-key)))
    (goto-char (point-max))
    (insert new-entry)
    <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">set key. It is simplest to just replace it, even if it is the same.</span>
    (bibtex-beginning-of-entry)
    (re-search-forward bibtex-entry-maybe-empty-head)
    (<span style="color: #0000FF;">if</span> (match-beginning bibtex-key-in-head)
        (delete-region (match-beginning bibtex-key-in-head)
                       (match-end bibtex-key-in-head)))
    (insert new-key)
    (bibtex-fill-entry)
    (save-buffer)))
</pre>
</div>

<pre class="example">
isbn-to-bibtex
</pre>

<p>
That is it, for the one ISBN I have tested it on, I get a nicely sorted bibtex entry in the file I select! Hopefully that means no more tedious bibtex entry entering for books! If you use org-ref, just update to the latest version and you should be able to use this function.
</p>

<p>
Now, back to that proposal I am writing that needs a lot of citations to books that are not in my bibtex file yet, but will be soon ;)
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/31/Turn-an-ISBN-to-a-bibtex-entry.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[More adventures in helm - more than one action]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/30/More-adventures-in-helm-more-than-one-action" />
    <id>http://jkitchin.github.io/blog/2015/01/30/More-adventures-in-helm-more-than-one-action</id>
    <updated>2015-01-30T08:00:16Z</updated>
    <published>2015-01-30T08:00:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[More adventures in helm - more than one action]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/30/More-adventures-in-helm-more-than-one-action"><![CDATA[


<p>
We continue our <a href="http://kitchingroup.cheme.cmu.edu/blog/2015/01/24/Anatomy-of-a-helm-source/">exploration of helm</a> and now consider how to have more than one action for a selection. When you press enter, helm runs the default action defined, but you can define more than one action, and choose which one to run. How do you know if there are multiple actions? Press C-z in helm and you will get a new helm buffer showing the actions. The first action is the default, and you can select the the actions with function keys, e.g. f1 is the first action, f2 is the second action, or you can select the action and press enter.
</p>

<p>
The main difference in setting up multiple actions is that instead of a single function for action in the source definition, we provide a list of cons cells for the action element of the helm source. Each action cons cell should have a descriptive string as the car that identifies the action. This will be shown in the helm buffer. The cdr should be the function to run on the candidate. The function will be called with the selection, so the function must take one argument.
</p>

<p>
Here is an example where we have two actions. The default action will just show us the email address of the selected candidates in a message box. It will show as a list. The second action opens an email window and inserts the selected candidates in the To: field as a comma separated list. I use helm-selected-candidates in these functions instead of the just the current selected candidate so we can have multiple selections. I define the first function as a lambda function, and the second one as a defun to illustrate how to use both approaches. You can have as many actions as you want, so you could consider functions that open notes about the person, or open your contacts to look up a phone number, or functions with template emails you send often, etc&#x2026;
</p>

<p>
Now, you have these options to run those actions.
</p>

<ol class="org-ol">
<li>Make a selection and press enter. That runs the first (and default) action to show you a message box.
</li>
<li>Make a selection and press C-z to see what actions are available. Select the action you want, and press enter.
</li>
<li>Make a selection and press F1 to run the default action, or F2 to run the second action.
</li>
</ol>

<p>
Here is our code.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq data '((<span style="color: #008000;">"John"</span> . <span style="color: #008000;">"john@email.com"</span>)
             (<span style="color: #008000;">"Jim"</span> . <span style="color: #008000;">"jim@email.com"</span>)
             (<span style="color: #008000;">"Jane"</span> . <span style="color: #008000;">"jane@email.com"</span>)
             (<span style="color: #008000;">"Jill"</span> . <span style="color: #008000;">"jill@email.com"</span>)))


(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">open-email</span> (candidates)
  <span style="color: #036A07;">"Compose an email to the candidates. Fill in the addresses and</span>
<span style="color: #036A07;">move point to the subject."</span>
  (compose-mail)
  (message-goto-to)
  (insert
   (mapconcat
    'identity
    (helm-marked-candidates)
    <span style="color: #008000;">","</span>))
  (message-goto-subject))

(setq some-helm-source
      `((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . ,data)
        (action . ((<span style="color: #008000;">"show email address"</span> . (<span style="color: #0000FF;">lambda</span> (candidate)
                                             (message-box
                                              <span style="color: #008000;">"selected: %s"</span>
                                              (helm-marked-candidates))))
                   (<span style="color: #008000;">"send email"</span> . open-email)))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<pre class="example">
t
</pre>

<p>
Now, you can define multiple actions for your selection in helm!
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/30/More-adventures-in-helm---more-than-one-action.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Export org-mode to docx with citations via pandoc]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc" />
    <id>http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc</id>
    <updated>2015-01-29T07:34:14Z</updated>
    <published>2015-01-29T07:34:14Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="docx" />
    <summary type="html"><![CDATA[Export org-mode to docx with citations via pandoc]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc"><![CDATA[


<p>
Pandoc continues to develop, and since <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/07/17/Pandoc-does-org-mode-now/">the last time</a> I wrote about it there is improved support for citations. We will use that to convert org documents to Word documents that actually have citations and a bibliography in them. This post explores using helm-bibtex to insert pandoc compatible citations, and then using pandoc to convert the org file to a word document (docx). We can define the format of citations that helm-bibtex inserts in a function, and tell helm-bibtex to use it when in org mode.
</p>

<p>
Here is that code. This is just to give me a convenient tool to insert citations with searching in my bibtex file. I think you could just as easily use reftex for this, or an ido-completing function on bibtex keys. See <a href="http://johnmacfarlane.net/pandoc/README.html">Pandoc - Pandoc User’s Guide</a> for directions on citation format. The key is to format the cite links to the pandoc format.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-bibtex-format-pandoc-citation</span> (keys)
  (concat <span style="color: #008000;">"["</span> (mapconcat (<span style="color: #0000FF;">lambda</span> (key) (concat <span style="color: #008000;">"@"</span> key)) keys <span style="color: #008000;">"; "</span>) <span style="color: #008000;">"]"</span>))

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">inform helm-bibtex how to format the citation in org-mode</span>
(setf (cdr (assoc 'org-mode helm-bibtex-format-citation-functions))
  'helm-bibtex-format-pandoc-citation)
</pre>
</div>
<pre class="example">
helm-bibtex-format-pandoc-citation
</pre>

<p>
Now, we can cite the org-mode book [@dominik-2010-org-mode], and some interesting papers on using org-mode [@schulte-2011-activ-docum; @schulte-2012-multi-languag]. You could pretty easily add pre and post text manually to these, after selecting and inserting them.
</p>

<p>
We need a bibliography file for pandoc to work. I will use a bibtex file, since I already have it and am using helm-bibtex to select keys. I found pandoc could not read my massive bibtex file, perhaps it does not support all the types yet, so I made a special small bibtex file for this. So, now all we need to do is convert this file to a docx. I use a function like this to do that. It uses an org-ref function to get the bibliography defined in this file, derives some file names, and then runs pandoc.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">ox-export-to-docx-and-open</span> ()
 <span style="color: #036A07;">"Export the current org file as a docx via markdown."</span>
 (interactive)
 (<span style="color: #0000FF;">let*</span> ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
        <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is probably a full path</span>
        (current-file (buffer-file-name))
        (basename (file-name-sans-extension current-file))
        (docx-file (concat basename <span style="color: #008000;">".docx"</span>)))
   (save-buffer)
   (<span style="color: #0000FF;">when</span> (file-exists-p docx-file) (delete-file docx-file))
   (shell-command (format
                   <span style="color: #008000;">"pandoc -s -S --bibliography=%s %s -o %s"</span>
                   bibfile current-file docx-file))
   (org-open-file docx-file '(16))))
</pre>
</div>

<p>
And now we run it to get our docx.
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(ox-export-to-docx-and-open)
</pre>
</div>

<p>
Here is the result: <a href="/media/2015-01-29-Export-org-mode-to-docx-with-citations-via-pandoc/org-to-docx-pandoc.docx">org-to-docx-pandoc.docx</a> 
</p>

<p>
It is not too bad. Not all the equations showed up below, and the figure did not appear for some reason. But, the citations went through fine.  A downside of this is the citation links are not clickable (but see <a href="#sec-7">Making pandoc links</a> for a way to do this), so they lack all the awesome features that org-ref gives them. Maybe pandoc can convert these to LaTeX links, but we already have such a good framework for that I do not see why you would want to do it. A better option is to figure out how to export the org file to an org file, and transform the org citation links to pandoc citations, then use pandoc on the temporarily transformed buffer. That way, you keep the cite links and their functionality, and ability to export to many formats, <i>and</i> get export to docx via pandoc.
</p>

<p>
There are other options in pandoc to fine tune the reference format (you need a csl file). That can be included in the org-file via file tags pretty easily. These citations are not links in the word document, and it does not look like they can be converted to footnotes, endnotes or interact with Endnote or Zotero at this time, but it is a step forward in getting a passable word document with references out of org-mode!
</p>

<p>
Since we are testing, let us try it some other typical features in an org-file.
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Numbered list</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Item 1
</li>
<li>Item 2
</li>
<li>Item 3
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Bulleted list</h2>
<div class="outline-text-2" id="text-2">
<ul class="org-ul">
<li>item 1
</li>
<li>item 2
</li>
<li>item 3
<ul class="org-ul">
<li>subitem
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> definitions</h2>
<div class="outline-text-2" id="text-3">
<dl class="org-dl">
<dt> org-mode </dt><dd>tool for awesomeness
</dd>
</dl>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Math</h2>
<div class="outline-text-2" id="text-4">
<p>
One equation:
<img src="ltxpng/org-to-docx-pandoc_71dd900d7f17a20875918a89a10eb146fccdd464.png" alt="\(e^{i\pi} - 1 = 0\)" />
</p>

<p>
A second equation:
</p>


<div class="figure">
<p><img src="ltxpng/org-to-docx-pandoc_fb56117cdd3c3ac81c363d24325cfc6b5a530420.png" alt="\begin{equation}
e^{i\pi} - 1 = 0
\end{equation}" /></p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> An image</h2>
<div class="outline-text-2" id="text-5">

<div id="icon" class="figure">
<p><img src="/media/2015-01-29-Export-org-mode-to-docx-with-citations-via-pandoc/emacs.png"> 
</p>
<p><span class="figure-number">Figure 1:</span> A little icon.</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> A table</h2>
<div class="outline-text-2" id="text-6">
<table id="my-table" border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">
<caption class="t-above"><span class="table-number">Table 1:</span> A little table.</caption>

<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>


<p>
a plain table
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="right">x</th>
<th scope="col" class="right">y</th>
</tr>
</thead>
<tbody>
<tr>
<td class="right">1</td>
<td class="right">2</td>
</tr>

<tr>
<td class="right">3</td>
<td class="right">4</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><a id="ID-2958EFDC-CC33-4E2A-8A92-D2BE06EBB3F2" name="ID-2958EFDC-CC33-4E2A-8A92-D2BE06EBB3F2"></a><span class="section-number-2">7</span> Making pandoc links</h2>
<div class="outline-text-2" id="text-7">
<p>
Here I show a way to get clickable text on pandoc links. I found a nice library called <a href="https://github.com/rolandwalker/button-lock">button-lock</a> that uses a regular expression to attach text properties to matching text.
</p>

<p>
Below I repeat the citations so it is easy to see the effect after running the code block. Indeed, you get clickable text, even org-ref like capability. I think you could even add the idle-timer messages, and the org-ref menu.
</p>

<p>
Now, we can cite the org-mode book [@dominik-2010-org-mode], and some interesting papers on using org-mode [@schulte-2011-activ-docum; @schulte-2012-multi-languag]. You could pretty easily add pre and post text manually to these, after selecting and inserting them.
</p>

<p>
You would need to make this code run in when you open an org-file to get it to work every time.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">require</span> '<span style="color: #D0372D;">button-lock</span>)
(global-button-lock-mode)

(button-lock-set-button
 <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>
 (<span style="color: #0000FF;">lambda</span> ()
   (interactive)
   (re-search-backward <span style="color: #008000;">"@"</span>)
   (re-search-forward  <span style="color: #008000;">"@</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">[-a-zA-Z0-9_:]*</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">"</span>)
   (<span style="color: #0000FF;">let*</span> ((key (match-string-no-properties 1))
          (bibfile (cdr (org-ref-get-bibtex-key-and-file key))))
     (<span style="color: #0000FF;">if</span> bibfile
        (<span style="color: #0000FF;">save-excursion</span>
          (<span style="color: #0000FF;">with-temp-buffer</span>
            (insert-file-contents bibfile)
            (bibtex-search-entry key)
            (message (org-ref-bib-citation))))
       (message <span style="color: #008000;">"No entry found"</span>))))
 <span style="color: #006FE0;">:face</span> (list 'org-link))
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> References</h2>
<div class="outline-text-2" id="text-8">
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New org-mode link to Web of Science]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/28/New-org-mode-link-to-Web-of-Science" />
    <id>http://jkitchin.github.io/blog/2015/01/28/New-org-mode-link-to-Web-of-Science</id>
    <updated>2015-01-28T13:55:54Z</updated>
    <published>2015-01-28T13:55:54Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="uncategorized" />
    <summary type="html"><![CDATA[New org-mode link to Web of Science]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/28/New-org-mode-link-to-Web-of-Science"><![CDATA[


<p>
For ages I have been trying to figure out how to make a link to open a search in Web of Science. Today, thanks to help from our library, I finally figured it out!
</p>

<p>
It turns out you can embed a search widget to Web of Science in a web page. See <a href="http://wokinfo.com/webtools/searchbox/">http://wokinfo.com/webtools/searchbox/</a> . Here is an example.
</p>


<form method="get" action="http://gateway.webofknowledge.com/gateway/Gateway.cgi" target="_blank">
<table style="background-color:#FFF; border:1px solid #999; width:354px;" cellspacing="0" cellpadding="6" border="0">
<tr>
<td><p><img border="0" src="http://wokinfo.com/img/webtools/woknameplate_flat2.png" width="311" height="36" alt="Web of Science"></p>
<p><strong><font face="Verdana, Geneva, sans-serif"><font size="2" color="#808080">Search Web of Science&#8482;</font></font></strong><br>
<input type="hidden" name="GWVersion" value="2">
<input type="hidden" name="SrcApp" value="WEB">
<input type="hidden" name="SrcAuth" value="HSB">
<input type="hidden" name="DestApp" value="UA">
<input type="hidden" name="DestLinkType" value="GeneralSearchSummary">
&nbsp;<input type="text" name="topic" size="27" maxlength="255" value="Enter a topic to search" onfocus="this.value='';">&nbsp;<input type="submit" name="btnWS" value="Search">&nbsp;<input type="reset" name="btnR" value="Reset"></p>
<p align="right"><font face="Arial, Helvetica, sans-serif"><font size="1">Copyright 2014 <a href="http://thomsonreuters.com" target="_blank">Thomson Reuters</a>&nbsp;&nbsp;&nbsp;</font></font></p>
</td>
</tr>
</table>
</form>

<p>
This simple form just sends a GET http request to a cgi script at Web of Knowledge. Awesome, we can create a url that does just that to make an org link! We will make a link that you can click on to open the web page, and a simple formatting function to make the link work in html too when we export it.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(org-add-link-type
 <span style="color: #008000;">"wos"</span>
 (<span style="color: #0000FF;">lambda</span> (path)
   (browse-url
    (format  <span style="color: #008000;">"http://gateway.webofknowledge.com/gateway/Gateway.cgi?topic=%s&amp;GWVersion=2&amp;SrcApp=WEB&amp;SrcAuth=HSB&amp;DestApp=UA&amp;DestLinkType=GeneralSearchSummary"</span>
             (s-join <span style="color: #008000;">"+"</span>
              (split-string path)))))
 <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">formatting function. Assume html</span>
 (<span style="color: #0000FF;">lambda</span> (link desc format)
   (format <span style="color: #008000;">"&lt;a href=\"%s\"&gt;%s&lt;/a&gt;"</span>
           (format  <span style="color: #008000;">"http://gateway.webofknowledge.com/gateway/Gateway.cgi?topic=%s&amp;GWVersion=2&amp;SrcApp=WEB&amp;SrcAuth=HSB&amp;DestApp=UA&amp;DestLinkType=GeneralSearchSummary"</span>
             (s-join <span style="color: #008000;">"+"</span>
              (split-string path)))
           (format <span style="color: #008000;">"wos:%s"</span> link)
           )))
</pre>
</div>

<p>
Now, here is a link: <a href="http://gateway.webofknowledge.com/gateway/Gateway.cgi?topic=alloy+segregation&GWVersion=2&SrcApp=WEB&SrcAuth=HSB&DestApp=UA&DestLinkType=GeneralSearchSummary">wos:alloy segregation</a>
</p>

<p>
When I click on it in org-mode, Web of Science opens to articles that match that search. When I export the post to html, you should also see a link that opens to Web of Science (assuming you click on it from an IP address with access).
</p>

<p>
The link may not seem all that useful, but we can use the idea to highlight words, and send them to a web of science query, e.g. <a href="https://github.com/jkitchin/jmax/blob/master/words.el#L63">https://github.com/jkitchin/jmax/blob/master/words.el#L63</a> , or in org-ref to query web of science for the words you typed into helm-bibtex that do not match any references in your database. One more powerful tool in doing research for a living!</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/28/New-org-mode-link-to-Web-of-Science.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Anatomy of a helm source]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/24/Anatomy-of-a-helm-source" />
    <id>http://jkitchin.github.io/blog/2015/01/24/Anatomy-of-a-helm-source</id>
    <updated>2015-01-24T12:09:58Z</updated>
    <published>2015-01-24T11:15:56Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="helm" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <summary type="html"><![CDATA[Anatomy of a helm source]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/24/Anatomy-of-a-helm-source"><![CDATA[



<p>
I have been integrating <a href="https://github.com/emacs-helm/helm">helm</a> into my emacs work flows almost anywhere I need to make interactive selections and do something with them. In this post, I will go through the simplest helm examples I can think of that get you to writing your own example.
</p>

<p>
To run a helm selection process you basically just call a function that calls this minimal function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<p>
In that code, the symbol some-helm-source will provide the input for the helm buffer. Let us look at the simplest example here. Each source should have a name, a list of candidates, and an action that works on the selected candidate. We construct a source as a list of cons cells. Here, we make a source with the name "HELM at the Emacs", a static list of candidates, which are simply a list of numbers, and a single action that will operate on the selected candidate.
</p>

<p>
If you run this block, you will get a helm buffer, you can select an entry, press enter, and you should see a message box pop up telling you what entry you selected. I like to separate the source definition from the helm call like this, but only for readability.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq some-helm-source
      '((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . (1 2 3 4))
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (message-box <span style="color: #008000;">"%s"</span> candidate)))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<pre class="example">
3
</pre>


<p>
Not bad, but what if we want some dynamic candidates? The usual way we will do that is to define a function that calculates the candidates for us. Let us work out an example that just shows us random numbers between 0 and 10 to select from. In a real example, you would use this function to generate a list of candidates like bibtex keys, email-addresses, etc&#x2026;
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">random-candidates</span> ()
  <span style="color: #036A07;">"Return a list of 4 random numbers from 0 to 10"</span>
  (loop for i below 4 collect (random 10)))

(setq some-helm-source
      '((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . random-candidates)
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (message <span style="color: #008000;">"%s"</span> candidate)))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>


<p>
So far, we have looked at the simplest list of candidates: a simple list. It may be that this is not the most convenient way to see the candidates. We might like to have one set of candidates that we use for searching, but another set of equivalent candidates used for the action. For example, we might want a list of names for selecting, but then have the action work on the corresponding email address. Let us consider a case where we have a list of cons cells of names and email addresses.
</p>

<p>
We use the `, way to create the source variable to make sure our list of candidates is constructed. Then, in our function we take the selection and get the corresponding entry in the data a-list.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq data '((<span style="color: #008000;">"John"</span> . <span style="color: #008000;">"john@email.com"</span>)
             (<span style="color: #008000;">"Jim"</span> . <span style="color: #008000;">"jim@email.com"</span>)
             (<span style="color: #008000;">"Jane"</span> . <span style="color: #008000;">"jane@email.com"</span>)
             (<span style="color: #008000;">"Jill"</span> . <span style="color: #008000;">"jill@email.com"</span>)))

(setq some-helm-source
      `((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . ,(mapcar 'car data))
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (message <span style="color: #008000;">"%s"</span> (cdr (assoc candidate data)))))))

(helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
</pre>
</div>

<pre class="example">
jim@email.com
</pre>

<p>
That is not too bad, and might be a general way to get to the data you want. But, helm can integrate this directly by using the a-list <i>directly</i> as the list of candidates. Helm will show you the car of each cell, but return the cdr of the selected entry.
</p>

<p>
Let us try this to make a function that will give us a helm buffer to select some names from, and then insert a comma separated list of emails from our selection at the point. We make our action function just return the list of marked candidates. Then we create a function that calls helm, and inserts a concatenated string.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq data '((<span style="color: #008000;">"John"</span> . <span style="color: #008000;">"john@email.com"</span>)
             (<span style="color: #008000;">"Jim"</span> . <span style="color: #008000;">"jim@email.com"</span>)
             (<span style="color: #008000;">"Jane"</span> . <span style="color: #008000;">"jane@email.com"</span>)
             (<span style="color: #008000;">"Jill"</span> . <span style="color: #008000;">"jill@email.com"</span>)))

(setq some-helm-source
      `((name . <span style="color: #008000;">"HELM at the Emacs"</span>)
        (candidates . ,data)
        (action . (<span style="color: #0000FF;">lambda</span> (candidate)
                    (helm-marked-candidates)))))

(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">helm-select-and-insert-emails</span> ()
  (interactive)
  (insert
   (mapconcat 'identity
              (helm <span style="color: #006FE0;">:sources</span> '(some-helm-source))
              <span style="color: #008000;">","</span>)))
</pre>
</div>
<pre class="example">
helm-select-and-insert-emails
</pre>


<p>
Here is what I get when I run the command, select John and Jill, and press enter: john@email.com,jill@email.com
</p>

<p>
That is it for this post. We looked at:
</p>

<ol class="org-ol">
<li>the simplest kind of helm interface with a fixed set of candidates
</li>
<li>A simple dynamic set of candidates
</li>
<li>A simple fixed set of candidates from a list of cons cells.
</li>
</ol>

<p>
This barely scratches the surface of helm, but is already enough to do some useful things.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/24/Anatomy-of-a-helm-source.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Equation of a plane through three points]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/18/Equation-of-a-plane-through-three-points" />
    <id>http://jkitchin.github.io/blog/2015/01/18/Equation-of-a-plane-through-three-points</id>
    <updated>2015-01-18T10:48:21Z</updated>
    <published>2015-01-18T10:48:21Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Equation of a plane through three points]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/18/Equation-of-a-plane-through-three-points"><![CDATA[



<p>
We are given three points, and we seek the equation of the plane that goes through them. The method is straight forward. A plane is defined by the equation:
</p>

<p>
\(a x + b y + c z = d\)
</p>

<p>
and we just need the coefficients. The \(a, b, c\) coefficients are obtained from a vector normal to the plane, and \(d\) is calculated separately. We get the normal vector from the cross-product of two vectors connecting the points, and we get \(d\) from the dot product of the normal vector with any one of the point position vectors.
</p>

<p>
Finally, given the equation, we want to generate a mesh that samples the plane, and plot the mesh and original points to verify the plane goes through the points. Here is the implementation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> numpy <span style="color: #0000FF;">as</span> np

<span style="color: #BA36A5;">p1</span> = np.array([1, 2, 3])
<span style="color: #BA36A5;">p2</span> = np.array([4, 6, 9])
<span style="color: #BA36A5;">p3</span> = np.array([12, 11, 9])

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">These two vectors are in the plane</span>
<span style="color: #BA36A5;">v1</span> = p3 - p1
<span style="color: #BA36A5;">v2</span> = p2 - p1

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the cross product is a vector normal to the plane</span>
<span style="color: #BA36A5;">cp</span> = np.cross(v1, v2)
<span style="color: #BA36A5;">a</span>, <span style="color: #BA36A5;">b</span>, <span style="color: #BA36A5;">c</span> = cp

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">This evaluates a * x3 + b * y3 + c * z3 which equals d</span>
<span style="color: #BA36A5;">d</span> = np.dot(cp, p3)

<span style="color: #0000FF;">print</span>(<span style="color: #008000;">'The equation is {0}x + {1}y + {2}z = {3}'</span>.<span style="color: #006FE0;">format</span>(a, b, c, d))

<span style="color: #0000FF;">import</span> matplotlib.pyplot <span style="color: #0000FF;">as</span> plt
<span style="color: #0000FF;">from</span> mpl_toolkits.mplot3d <span style="color: #0000FF;">import</span> Axes3D
<span style="color: #BA36A5;">fig</span> = plt.figure()
<span style="color: #BA36A5;">ax</span> = fig.add_subplot(111, projection=<span style="color: #008000;">'3d'</span>)

<span style="color: #BA36A5;">x</span> = np.linspace(-2, 14, 5)
<span style="color: #BA36A5;">y</span> = np.linspace(-2, 14, 5)
<span style="color: #BA36A5;">X</span>, <span style="color: #BA36A5;">Y</span> = np.meshgrid(x, y)

<span style="color: #BA36A5;">Z</span> = (d - a * X - b * Y) / c

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plot the mesh. Each array is 2D, so we flatten them to 1D arrays</span>
ax.plot(X.flatten(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Y.flatten(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Z.flatten(), <span style="color: #008000;">'bo '</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">plot the original points. We use zip to get 1D lists of x, y and z</span>
<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">coordinates.</span>
ax.plot(*<span style="color: #006FE0;">zip</span>(p1, p2, p3), color=<span style="color: #008000;">'r'</span>, linestyle=<span style="color: #008000;">' '</span>, marker=<span style="color: #008000;">'o'</span>)

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">adjust the view so we can see the point/plane alignment</span>
ax.view_init(0, 22)
plt.tight_layout()
plt.savefig(<span style="color: #008000;">'images/plane.png'</span>)
plt.show()
</pre>
</div>

<pre class="example">
The equation is 30x + -48y + 17z = -15
</pre>

<p>
<img src="/media/2015-01-18-Equation-of-a-plane-through-three-points/plane.png"> 
It looks like the blue points form a plane that contains the red points.
</p>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/18/Equation-of-a-plane-through-three-points.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[2014 Kitchin Research Group in a nutshell]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/07/2014-Kitchin-Research-Group-in-a-nutshell" />
    <id>http://jkitchin.github.io/blog/2015/01/07/2014-Kitchin-Research-Group-in-a-nutshell</id>
    <updated>2015-01-16T08:42:14Z</updated>
    <published>2015-01-07T16:56:39Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <summary type="html"><![CDATA[2014 Kitchin Research Group in a nutshell]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/07/2014-Kitchin-Research-Group-in-a-nutshell"><![CDATA[



<p>
It was a good year for the Kitchin Research Group. Here are a few of our main accomplishments for the year.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Student accomplishments</h2>
<div class="outline-text-2" id="text-1">
<p>
Students are the backbone of our group. Steve Illes, Wenqin You, Meiheng Lu, and Nitish Govindarajan finished their MS degrees! Congratulations!
</p>

<p>
Mehak Chawla and John Michael both passed their PhD qualifying exams. Congratulations!
</p>

<p>
Prateek Mehta joined Bill Schneider's group at Notre Dame for his PhD!
</p>

<p>
Four new M.S. students have joined our group: Hari Thirumalai, Venkatesh Naik, Zhaofeng Chen, and Siddharth Deshpande. Welcome!
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Publications</h2>
<div class="outline-text-2" id="text-2">
<p>
It looks like seven publications this year. We have 5 out for review right now, so next year looks like a good one! Almost all of these were written in org-mode, with amazing, reproducible supporting information documents. Many thanks to my students, and co-authors.
</p>

<p>
Jacob Boes, Gamze Gumuslu, James Miller, Andrew Gellman, John Kitchin, Estimating bulk composition dependent H<sub>2</sub> adsorption energies on Cu<sub>x</sub>Pd<sub>1-x</sub> alloy (111) surfaces, accepted in ACS Catalysis (Dec. 2014) <a href="http://dx.doi.org/10.1021/cs501585k">http://dx.doi.org/10.1021/cs501585k</a> .
</p>

<p>
Matthew T. Curnan and John R. Kitchin, Effects of Concentration, Crystal Structure, Magnetism, and Electronic Structure Method on First-Principles Oxygen Vacancy Formation Energy Trends in Perovskites, J. Phys. Chem. C., <a href="http://dx.doi.org/10.1021/jp507957n">http://dx.doi.org/10.1021/jp507957n</a> .
</p>

<p>
Zhongnan Xu and John R. Kitchin, Probing the Coverage Dependence of Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals, J. Phys. Chem. C., <a href="http://dx.doi.org/10.1021/jp508805h">http://dx.doi.org/10.1021/jp508805h</a> .
</p>

<p>
Ethan L. Demeter , Shayna L. Hilburg , Newell R. Washburn , Terrence J. Collins , and John R. Kitchin, Electrocatalytic Oxygen Evolution with an Immobilized TAML Activator,  Journal of the American Chemical Society, 136(15) 5603-5606 (2014). <a href="http://dx.doi.org/10.1021/ja5015986">http://dx.doi.org/10.1021/ja5015986</a> 
</p>

<p>
Robert L. Thompson, Wei Shi, Erik Albenze, Victor A. Kusuma, David Hopkinson, Krishnan Damodaran,  Anita S. Lee, John R. Kitchin, David R. Luebke and Hunaid Nulwala, Probing the effect of electron donation on CO<sub>2</sub> absorbing 1,2,3-triazolide ionic liquids, RSC Advances, 4 (25), 12748-12755 (2014). <a href="http://dx.doi.org/10.1039/C3RA47097K">http://dx.doi.org/10.1039/C3RA47097K</a> .
</p>

<p>
Mehta, Prateek; Salvador, Paul; Kitchin, John, Identifying Potential BO<sub>2</sub> Oxide Polymorphs for Epitaxial Growth Candidates", ACS Applied Materials and Interfaces, 6(5), 3630-3639 (2014). <a href="http://pubs.acs.org/doi/full/10.1021/am4059149">http://pubs.acs.org/doi/full/10.1021/am4059149</a> .
</p>

<p>
Zhongnan Xu and John R Kitchin, Relating the Electronic Structure and Reactivity of the 3d Transition Metal Monoxide Surfaces, Catalysis Communications, 52, 60-64 (2014), <a href="http://dx.doi.org/10.1016/j.catcom.2013.10.028">http://dx.doi.org/10.1016/j.catcom.2013.10.028</a> .
</p>

<p>
Our citations continue to grow:
</p>


<div class="figure">
<p><img src="/media/2015-01-07-2014-Kitchin-Research-Group-in-a-nutshell/2014-citations.png"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Presentations</h2>
<div class="outline-text-2" id="text-3">
<p>
We did not travel as much this year as we have in the past. Here is where we did go.
</p>

<p>
John Kitchin, "The next evolution in water oxidation", Department of Materials Science, Duke University, March 2014.
</p>

<p>
John Kitchin, A success story in using Python in a graduate chemical engineering course, SciPy 2014, June 2014.  <a href="https://www.youtube.com/watch?v=IsSMs-4GlT8">https://www.youtube.com/watch?v=IsSMs-4GlT8</a> 
</p>

<p>
John Kitchin, Jacob Boes, Gamze Gumuslu, James Miller, Andrew Gellman, "Bulk Composition Dependent H<sub>2</sub> Dissociative Adsorption Energies on Cu<sub>x</sub>Pd<sub>1-x</sub> Alloy Surfaces" Department of Energy - Basic Energy Science - Catalysis Program meeting, July 2014.
</p>

<p>
John Kitchin, Jacob Boes, Gamze Gumuslu, James Miller, Andrew Gellman, "Bulk Composition Dependent H<sub>2</sub> Dissociative Adsorption Energies on Cu<sub>x</sub>Pd<sub>1-x</sub> Alloy Surfaces", U. Missouri, Department of Chemical Engineering, September 2014.
</p>

<p>
Wenqin You, Hari C. Mantripragada, Edward S. Rubin and John Kitchin, Post-combustion CO<sub>2</sub> Capture Using Metal Organic Frameworks-Thermodynamic Analysis, Pittsburgh Coal Conference, October 2014.
</p>

<p>
Jacob R. Boes and John R. Kitchin, Estimating Bulk Composition Dependent H2 Dissociative Adsorption Energies on CuxPd1-x Alloy (111) Surfaces, AICHE Atlanta, Nov 2014.
</p>

<p>
Zhongnan Xu and John R. Kitchin, Coverage-Dependent Site and Adsorbate Configurational Correlations on (111) Surfaces of Late Transition Metals, AICHE Atlanta, Nov 2014.
</p>

<p>
Matthew Curnan and John R. Kitchin, Prediction of Phase Stability and Transition Pressures in BO<sub>2</sub> (B = Ti, V, Ru, Ir) Polymorphs Using DFT+U and Self-Consistent Linear Response Theory, AICHE Atlanta, Nov 2014.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> Teaching</h2>
<div class="outline-text-2" id="text-4">
<p>
This year I taught a core course in reaction engineering <i>from Emacs</i> with Python and Emacs! I now teach two classes from Emacs: a graduate elective in molecular simulation (which I am teaching again this year), and a core MS course in reaction engineering.
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Recognitions</h2>
<div class="outline-text-2" id="text-5">
<p>
Professor Kitchin was awarded the Philip L. Dowd Fellowship Award in recognition of his work in integrating org-mode into education <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/02/28/Professor-Kitchin-awarded-the-Philip-L-Dowd-Fellowship-Award/">(link)</a> .
</p>

<p>
Mehak Chawla was awarded a Prengle Fellowship (<a href="http://kitchingroup.cheme.cmu.edu/blog/2014/03/24/Mehak-Chawla-selected-as-the-H-William-and-Ruth-Hamilton-Prengle-Fellow-of-Chemical-Enginering-for-2013-2014/">link</a> ).
</p>

<p>
Jacob Boes was awarded a Bertucci fellowship!
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Software development</h2>
<div class="outline-text-2" id="text-6">
<p>
The most significant developments from our group this year were <a href="http://github.com/jkitchin/jmax">jmax</a> , an emacs starter-kit I developed, and <a href="http://github.com/jkitchin/org-ref">org-ref</a> , a bibliography/citation tool for scientific publications in org-mode. It is amazing. These can be found at <a href="http://github.com/jkitchin/jmax">http://github.com/jkitchin/jmax</a> and <a href="http://github.com/jkitchin/org-ref">http://github.com/jkitchin/org-ref</a> .
</p>

<p>
Python Computations in science and engineering reached a higher level of maturity: <a href="http://github.com/jkitchin/pycse">http://github.com/jkitchin/pycse</a> . We used this in my reaction engineering course quite a bit.
</p>

<p>
Zhongnan put his ase interface to Quantum Espresso here: <a href="https://github.com/zhongnanxu/espresso">https://github.com/zhongnanxu/espresso</a> 
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Social media</h2>
<div class="outline-text-2" id="text-7">
<p>
It looks like we had about 117 blog entries in 2014. The Kitchin Group blog has been growing in popularity:
</p>


<div class="figure">
<p><img src="/media/2015-01-07-2014-Kitchin-Research-Group-in-a-nutshell/kg-blog-sessions.png"> 
</p>
</div>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> What's next in 2015?</h2>
<div class="outline-text-2" id="text-8">
<p>
We will continue developing jmax into the finest scientific publishing tool there ever was.
</p>

<p>
We will write a lot of papers with jmax. I predict we write more than ten papers next year. That will be a group record.
</p>

<p>
More good things to come! Stay tuned!
</p>
</div>
</div>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/07/2014-Kitchin-Research-Group-in-a-nutshell.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Redirecting stderr in org-mode shell blocks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks" />
    <id>http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks</id>
    <updated>2015-01-11T11:39:47Z</updated>
    <published>2015-01-04T08:59:04Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Redirecting stderr in org-mode shell blocks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks"><![CDATA[


<p>
Org-mode shell source blocks do not capture stderr. For example, in this block, with the default setup:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>

<pre class="example">
testing stdout
</pre>

<p>
You can see the second line is not in the output.
</p>

<p>
If you run this command, you get an <b>Org-Babel Error Output</b> buffer saying it is an illegal option.
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
</pre>
</div>

<p>
It would be nice to just capture that error, and show it.
</p>

<p>
We solved this problem in <a href="http://kitchingroup.cheme.cmu.edu/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2/">Python</a> by redirecting stderr at runtime. It is not that simple in shell blocks, but we can do a similar thing. The code block is executed (I think) by saving the block to a temporary file, and then running org-babel-sh-command on the file. That magic happens inside the command shell-command-on-region. We just need to make that command redirect stderr. Here is a new shell command that does this. This next block can be tangled out to an executable command. This script takes one argument, which I believe is a filename (the temporary file containing the source block region).
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">!/bin/</span><span style="color: #0000FF;">bash</span>
{
bash $<span style="color: #BA36A5;">1</span>
} 2&gt;&amp;1
</pre>
</div>

<p>
Now, we set org-babel-sh-command to our new shell command.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(setq org-babel-sh-command <span style="color: #008000;">"./sh_stderr.sh"</span>)
</pre>
</div>

<pre class="example">
./sh_stderr.sh
</pre>

<p>
Now, it appears we get what we want:
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
</pre>

<p>
And, with the bad option to date, we get:
</p>

<div class="org-src-container">

<pre class="src src-sh">date -g
<span style="color: #006FE0;">echo</span>
</pre>
</div>
<pre class="example">
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>

<p>
Not bad! I have not tested this very thoroughly, i.e. beyond these little examples, but it seems like it could work.
</p>

<p>
Achim Gratz suggested this simpler approach that does not involve any external scripts. The : at the end is important!
</p>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #0000FF;">exec</span> 2&gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stdout"</span> &gt;&amp;1
<span style="color: #006FE0;">echo</span> <span style="color: #008000;">"testing stderr"</span> &gt;&amp;2
date -g
:
</pre>
</div>
<pre class="example">
testing stdout
testing stderr
date: illegal option -- g
usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ...
            [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
</pre>
<p>Copyright (C) 2015 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p><p><a href="/org/2015/01/04/Redirecting-stderr-in-org-mode-shell-blocks.org">org-mode source</a><p><p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
