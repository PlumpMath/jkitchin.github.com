<?xml version="1.0" encoding="UTF-8"?>
<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
   >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2016-05-06T23:47:06Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[When in python do as Pythonistas unless...]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/06/When-in-python-do-as-Pythonistas-unless" />
    <id>http://jkitchin.github.io/blog/2016/05/06/When-in-python-do-as-Pythonistas-unless</id>
    <updated>2016-05-06T19:46:51Z</updated>
    <published>2016-05-06T19:46:51Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[When in python do as Pythonistas unless...]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/06/When-in-python-do-as-Pythonistas-unless"><![CDATA[



<p>
Many lisps have a when/unless conditional syntax that works like this:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">when</span> t (print <span style="color: #008000;">"when evaluated"</span>))

(<span style="color: #0000FF;">unless</span> nil (print <span style="color: #008000;">"unless evaluated"</span>))
</pre>
</div>

<pre class="example">
"when evaluated"

"unless evaluated"
</pre>

<p>
Those are actually just macros that expand to the more verbose if function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(macroexpand '(unless nil (print <span style="color: #008000;">"unless evaluated"</span>)))
</pre>
</div>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">if</span> nil nil
  (print <span style="color: #008000;">"unless evaluated"</span>))
</pre>
</div>

<p>
In Python, we only have this syntax for this kind of construct:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">if</span> <span style="color: #D0372D;">True</span>: <span style="color: #0000FF;">print</span> <span style="color: #008000;">"when equivalent"</span>

<span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">False</span>: <span style="color: #0000FF;">print</span> <span style="color: #008000;">"unless equivalent"</span>
</pre>
</div>

<pre class="example">
when equivalent
unless equivalent
</pre>

<p>
I thought is would be fun to get as close as possible to the lisp syntax in Python. It is not that easy though. The benefit of a macro is we do not evaluate the arguments until they need to be evaluated. In Python, all arguments of functions are immediately evaluated.
</p>

<p>
One way to avoid this is to put code inside a function. Then it will not be executed until the function is called. So, here is an example of how to get an unless function in Python that conditionally evaluates a function.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">unless</span>(condition, f):
    <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> condition:
        <span style="color: #0000FF;">return</span> f()

<span style="color: #0000FF;">def</span> <span style="color: #006699;">func</span>():
    <span style="color: #0000FF;">return</span> <span style="color: #008000;">"executed. Condition was not true."</span>


<span style="color: #0000FF;">print</span> unless(1 &gt; 0, func)

<span style="color: #0000FF;">print</span> unless(1 &lt; 0, func)
</pre>
</div>

<pre class="example">
None
executed. Condition was not true.
</pre>

<p>
That is close, but requires us to wrap our code in a function. There does not seem to be any alternative though. It thought maybe a context manager could be used, but there does not seem to be a way to bypass the execution of the code (<a href="https://www.python.org/dev/peps/pep-0377/">https://www.python.org/dev/peps/pep-0377/</a> ). Still, it might be a useful way to change how to think about doing some things differently in Python.
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/05/06/When-in-python-do-as-Pythonistas-unless....org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Automatic decorating of class methods to run them in a context]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context" />
    <id>http://jkitchin.github.io/blog/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context</id>
    <updated>2016-05-01T09:16:29Z</updated>
    <published>2016-05-01T09:16:29Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Automatic decorating of class methods to run them in a context]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context"><![CDATA[



<p>
We <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/04/28/Managing-contexts-Python-vs-hy/">previously examined</a> approaches to running code in a context. With hy, we even managed to remove the need for a with statement through the use of a macro that expanded behind the scenes to manage the context. In our jasp code, we frequently need a context manager that temporarily changes the working directory to run some code, then changes back. The use of the context manager was a design decision to avoid decorating every single function. Why? There are a lot of functions that need decorating, and they are spread over a lot of files. Not all of the entries from the next block are methods, but most of them are.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> jasp <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">c</span> = Vasp()
<span style="color: #0000FF;">print</span>(<span style="color: #006FE0;">dir</span>(c))
</pre>
</div>

<pre class="example">
['__doc__', '__init__', '__module__', '__repr__', '__str__', 'add_to_db', 'archive', 'atoms', 'bader', 'bool_params', 'calculate', 'calculation_required', 'check_state', 'chgsum', 'clean', 'clone', 'create_metadata', 'dict', 'dict_params', 'exp_params', 'float_params', 'get_atoms', 'get_beefens', 'get_bz_k_points', 'get_charge_density', 'get_default_number_of_electrons', 'get_dipole_moment', 'get_eigenvalues', 'get_elapsed_time', 'get_electronic_temperature', 'get_elf', 'get_energy_components', 'get_fermi_level', 'get_forces', 'get_ibz_k_points', 'get_ibz_kpoints', 'get_infrared_intensities', 'get_k_point_weights', 'get_local_potential', 'get_magnetic_moment', 'get_magnetic_moments', 'get_name', 'get_nearest_neighbor_table', 'get_neb', 'get_nonselfconsistent_energies', 'get_number_of_bands', 'get_number_of_electrons', 'get_number_of_grid_points', 'get_number_of_ionic_steps', 'get_number_of_iterations', 'get_number_of_spins', 'get_occupation_numbers', 'get_orbital_occupations', 'get_potential_energy', 'get_property', 'get_pseudo_density', 'get_pseudo_wavefunction', 'get_pseudopotentials', 'get_required_memory', 'get_spin_polarized', 'get_stress', 'get_valence_electrons', 'get_version', 'get_vibrational_frequencies', 'get_vibrational_modes', 'get_xc_functional', 'initialize', 'input_params', 'int_params', 'is_neb', 'job_in_queue', 'json', 'list_params', 'name', 'nbands', 'org', 'output_template', 'plot_neb', 'positions', 'post_run_hooks', 'prepare_input_files', 'pretty_json', 'python', 'read', 'read_convergence', 'read_default_number_of_electrons', 'read_dipole', 'read_eigenvalues', 'read_electronic_temperature', 'read_energy', 'read_fermi', 'read_forces', 'read_ibz_kpoints', 'read_incar', 'read_k_point_weights', 'read_kpoints', 'read_ldau', 'read_magnetic_moment', 'read_magnetic_moments', 'read_metadata', 'read_nbands', 'read_number_of_electrons', 'read_number_of_iterations', 'read_occupation_numbers', 'read_outcar', 'read_potcar', 'read_relaxed', 'read_stress', 'read_version', 'read_vib_freq', 'register_post_run_hook', 'register_pre_run_hook', 'restart', 'restart_load', 'results', 'run', 'run_counts', 'set', 'set_atoms', 'set_nbands', 'set_results', 'special_params', 'string_params', 'strip', 'strip_warnings', 'todict', 'track_output', 'update', 'write_incar', 'write_kpoints', 'write_metadata', 'write_potcar', 'write_sort_file', 'xml']
</pre>

<p>
The use of a context manager is really useful for a single calculation, and it saves us a lot of boilerplate code to manage changing directories. It limits us though for looping through calculations. We are stuck with traditional for loops that have the with statement embedded in them. We also cannot get too functional, e.g. with list comprehension.
</p>

<p>
In other words, this is ok:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">E</span> = []
<span style="color: #0000FF;">for</span> d <span style="color: #0000FF;">in</span> np.linspace(1, 1.5):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">atoms</span> = Atoms(...,d)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> jasp(<span style="color: #008000;">'calculated-name-{}'</span>.<span style="color: #006FE0;">format</span>(d),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> ...,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> atoms=atoms) <span style="color: #0000FF;">as</span> calc:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   E.append(atoms.get_potential_energy())
</pre>
</div>

<p>
But this code is not possible:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">bond_lengths</span> = np.linspace(1, 1.5)

<span style="color: #BA36A5;">A</span> = [Atoms(...,d) <span style="color: #0000FF;">for</span> d <span style="color: #0000FF;">in</span> bond_lengths]

<span style="color: #BA36A5;">calcs</span> = [JASP(<span style="color: #008000;">'calculated-name-{}'</span>.<span style="color: #006FE0;">format</span>(d),...,atoms=atoms)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">for</span> d, atoms <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">zip</span>(bond-lengths, A)]

<span style="color: #BA36A5;">E</span> = [atoms.get_potential_energy() <span style="color: #0000FF;">for</span> atoms <span style="color: #0000FF;">in</span> A]
</pre>
</div>

<p>
It is not legal syntax to embed a with statement inside a list comprehension. The code will not work because to get the potential energy we have to switch into the calculation directory and read it from a file there, then switch back.
</p>

<p>
To make that possible, we need to decorate the class functions so that the right thing happens when needed. I still do not want to decorate each function manually. Although there is a case to make for it, as I mentioned earlier, the functions are all over the place, and numerous. Now is not the time to fix it.
</p>

<p>
Instead, we consider a solution that will automatically decorate class functions for us! Enter the Metaclass. This is a class that modifies how classes are created. The net effect of the code below is our Calculator class now has all functions automatically decorated with a function that changes to the working directory, runs the function, and then ensures we change back even in the event of an exception. This approach is adapted from <a href="http://stackoverflow.com/questions/3467526/attaching-a-decorator-to-all-functions-within-a-class">http://stackoverflow.com/questions/3467526/attaching-a-decorator-to-all-functions-within-a-class</a> .
</p>

<p>
I am pretty sure this is the right way to do this. We cannot simply decorate the functions of ase.calculators.vasp.Vasp because our decorator needs access to the directory defined in a <i>class instance</i>. That is what the <span class="underline"><span class="underline">init</span></span> method of the metaclass enables.
</p>

<p>
We will put this code into a library called meta_calculator.py for reuse in later examples.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">import</span> types

<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">WithCurrentDirectory</span>(<span style="color: #006FE0;">type</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #036A07;">"""Metaclass that decorates all of its methods except __init__."""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">__new__</span>(cls, name, bases, attrs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> <span style="color: #006FE0;">super</span>(WithCurrentDirectory, cls).__new__(cls, name, bases, attrs)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(cls, name, bases, attrs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #036A07;">"""Decorate all the methods of the class instance with the classmethod cd.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;"> We skip __init__ because that is where the attributes are actually set.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;"> It is an error to access them before they are set.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;"> """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">for</span> attr_name, attr_value <span style="color: #0000FF;">in</span> attrs.iteritems():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> attr_name != <span style="color: #008000;">'__init__'</span> <span style="color: #0000FF;">and</span> <span style="color: #006FE0;">isinstance</span>(attr_value, types.FunctionType):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">setattr</span>(cls, attr_name, cls.cd(attr_value))


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #6434A3;">@classmethod</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">cd</span>(cls, func):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #036A07;">"""Decorator to temporarily run cls.func in the directory stored in cls.wd.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;"> The working directory is restored to the original directory afterwards.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   </span><span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;"> """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">def</span> <span style="color: #006699;">wrapper</span>(<span style="color: #0000FF;">self</span>, *args, **kwargs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.verbose:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'\nRunning {}'</span>.<span style="color: #006FE0;">format</span>(func.<span style="color: #006FE0;">__name__</span>))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">"Started in {}"</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>os.chdir(<span style="color: #0000FF;">self</span>.wd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.verbose:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">"  Entered {}"</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">result</span> = func(<span style="color: #0000FF;">self</span>, *args, **kwargs)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.verbose:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'  {}'</span>.<span style="color: #006FE0;">format</span>(result))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> result
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">except</span> <span style="color: #6434A3;">Exception</span>, e:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">this is where you would use an exception handling function</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'  Caught {}'</span>.<span style="color: #006FE0;">format</span>(e))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">finally</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(<span style="color: #0000FF;">self</span>.owd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">self</span>.verbose:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">print</span>(<span style="color: #008000;">"  Exited to {}\n"</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> wrapper.<span style="color: #006FE0;">__name__</span> = func.<span style="color: #006FE0;">__name__</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> wrapper.<span style="color: #006FE0;">__doc__</span> = func.<span style="color: #006FE0;">__doc__</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> wrapper


<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">Calculator</span>(<span style="color: #006FE0;">object</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #036A07;">"""Class we use for a calculator.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">  Every method is decorated by the metaclass so it runs in the working</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">  directory defined by the class instance.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">  """</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #BA36A5;">__metaclass__</span> = WithCurrentDirectory

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, wd, verbose=<span style="color: #D0372D;">False</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.owd = os.getcwd()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.wd = wd
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">self</span>.verbose = verbose
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">if</span> <span style="color: #0000FF;">not</span> os.path.isdir(wd):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>os.makedirs(wd)


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">create_input</span>(<span style="color: #0000FF;">self</span>, **kwargs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'INCAR'</span>, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">for</span> key, val <span style="color: #0000FF;">in</span> kwargs.iteritems():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'{} = {}\n'</span>.<span style="color: #006FE0;">format</span>(key, val))


<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">exc</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #036A07;">"This raises an exception to see what happens"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> 1 / 0

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">read_input</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'INCAR'</span>, <span style="color: #008000;">'r'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #0000FF;">return</span> f.read()

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>  <span style="color: #0000FF;">def</span> <span style="color: #006699;">__str__</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> <span style="color: #0000FF;">return</span> <span style="color: #008000;">'In {}. Contains: {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd(),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> os.listdir(<span style="color: #008000;">'.'</span>))
</pre>
</div>

<p>
Here is how we might use it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> meta_calculator <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">c</span> = Calculator(<span style="color: #008000;">'/tmp/calc-1'</span>, verbose=<span style="color: #D0372D;">True</span>)
<span style="color: #0000FF;">print</span> c.create_input(xc=<span style="color: #008000;">'PBE'</span>, encut=450)
<span style="color: #0000FF;">print</span> c.read_input()
<span style="color: #0000FF;">print</span> c.exc()
<span style="color: #0000FF;">print</span> c
</pre>
</div>
<pre class="example">
Running create_input
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  None
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

None

Running read_input
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  xc = PBE
encut = 450

  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

xc = PBE
encut = 450


Running exc
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  Caught integer division or modulo by zero
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

None

Running __str__
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  In /private/tmp/calc-1. Contains: ['INCAR']
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

In /private/tmp/calc-1. Contains: ['INCAR']
</pre>

<p>
As we can see, in each function call, we evidently do change into the path that /tmp/calc-1 points to (it is apparently /private/tmp on Mac OSX), runs the method, and then changes back out, even when exceptions occur.
</p>

<p>
Here is a functional approach to using our new calculator.
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> meta_calculator <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">encuts</span> = [100, 200, 300, 400]
<span style="color: #BA36A5;">calcs</span> = [Calculator(<span style="color: #008000;">'encut-{}'</span>.<span style="color: #006FE0;">format</span>(encut)) <span style="color: #0000FF;">for</span> encut <span style="color: #0000FF;">in</span> encuts]

<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">list-comprehension for the side-effect</span>
[calc.create_input(encut=encut) <span style="color: #0000FF;">for</span> calc,encut <span style="color: #0000FF;">in</span> <span style="color: #006FE0;">zip</span>(calcs, encuts)]

<span style="color: #BA36A5;">inputs</span> = [calc.read_input() <span style="color: #0000FF;">for</span> calc <span style="color: #0000FF;">in</span> calcs]

<span style="color: #0000FF;">print</span>(inputs)
<span style="color: #0000FF;">print</span>([calc.wd <span style="color: #0000FF;">for</span> calc <span style="color: #0000FF;">in</span> calcs])
</pre>
</div>
<pre class="example">
['encut = 100\n', 'encut = 200\n', 'encut = 300\n', 'encut = 400\n']
['encut-100', 'encut-200', 'encut-300', 'encut-400']
</pre>

<p>
Sweet. And here is our evidence that the directories got created and have the files in them.
</p>

<div class="org-src-container">

<pre class="src src-sh">find . -type f -print | grep <span style="color: #008000;">"encut-[1-4]00"</span> | xargs -n 1 -I {} -i bash -c <span style="color: #008000;">'echo {}; cat {}; echo'</span>
</pre>
</div>
<pre class="example">
./encut-100/INCAR
encut = 100

./encut-200/INCAR
encut = 200

./encut-300/INCAR
encut = 300

./encut-400/INCAR
encut = 400
</pre>

<p>
This looks like another winner that will be making its way into <a href="https://github.com/jkitchin/jasp">jasp</a> soon. I guess it will require at least some minor surgery on a class in ase.calculators.vasp. It might be time to move a copy of it all the way into jasp.</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/05/01/Automatic-decorating-of-class-methods-to-run-them-in-a-context.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Another approach to docstrings and validation of args and kwargs in Python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/30/Another-approach-to-docstrings-and-validation-of-args-and-kwargs-in-Python" />
    <id>http://jkitchin.github.io/blog/2016/04/30/Another-approach-to-docstrings-and-validation-of-args-and-kwargs-in-Python</id>
    <updated>2016-04-30T10:28:51Z</updated>
    <published>2016-04-30T10:22:30Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Another approach to docstrings and validation of args and kwargs in Python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/30/Another-approach-to-docstrings-and-validation-of-args-and-kwargs-in-Python"><![CDATA[



<p>
We have been <a href="http://kitchingroup.cheme.cmu.edu/blog/2016/04/29/Enough-with-the-hyperbole-hy-does-things-that-are-not-as-easy-in-Python/">exploring various ways</a> to add documentation and validation to arbitrary arguments that our molecular simulation codes use. In our previous we derived a method where we created functions that provide docstrings, and validate the input. One issue we had was the duplication of keywords and function names. Here we consider an approach that allows this kind of syntax:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">calc</span> = Calculator(<span style="color: #008000;">'/tmp'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> encut(400),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> xc(<span style="color: #008000;">'PBE'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> generic(<span style="color: #008000;">'kpts'</span>, [1, 1, 1]))
</pre>
</div>

<p>
Those are regular *args, not **kwargs.
</p>

<p>
Compare this to:
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #BA36A5;">calc</span> = Calculator(<span style="color: #008000;">'/tmp'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> encut=encut(400),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> xc=xc(<span style="color: #008000;">'PBE'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> kpts=generic(<span style="color: #008000;">'kpts'</span>, [1, 1, 1]))
</pre>
</div>

<p>
where those are kwargs. The duplication of the keywords is what we aim to eliminate, because 1) they are redundant, 2) why type things twice?
</p>

<p>
Here we work out an approach with *args that avoids the duplication. We use the same kind of validation functions as before, but we will decorate each one so it returns a tuple of (key, value), where key is based on the function name. This is so we don't have to duplicate the function name ourselves; we let the decorator do it for us. Then, in our Calculator class <span class="underline"><span class="underline">init</span></span> function, we use this tuple to assign the values to self.key as the prototypical way to handle the *args. Other setter functions could also be used.
</p>

<p>
Here is the template for this approach.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">input</span>(func):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""Input decorator to convert a validation function to input function."""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">inner</span>(*args, **kwargs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">res</span> = func.<span style="color: #006FE0;">__name__</span>, func(*args, **kwargs)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'{} validated to {}'</span>.<span style="color: #006FE0;">format</span>(func.<span style="color: #006FE0;">__name__</span>, res))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> res
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">magic incantations to make the decorated function look like the old one.</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   inner.<span style="color: #006FE0;">__name__</span> = func.<span style="color: #006FE0;">__name__</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   inner.<span style="color: #006FE0;">__doc__</span> = func.<span style="color: #006FE0;">__doc__</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> inner

<span style="color: #6434A3;">@input</span>
<span style="color: #0000FF;">def</span> <span style="color: #006699;">encut</span>(cutoff):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"Planewave cutoff in eV."</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">assert</span> <span style="color: #006FE0;">isinstance</span>(cutoff, <span style="color: #006FE0;">int</span>) <span style="color: #0000FF;">and</span> (cutoff &gt; 0)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> cutoff

<span style="color: #6434A3;">@input</span>
<span style="color: #0000FF;">def</span> <span style="color: #006699;">xc</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""Exchange-correlation functional.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   Should be 'PBE' or 'LDA'</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">assert</span> <span style="color: #006FE0;">isinstance</span>(s, <span style="color: #006FE0;">str</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">assert</span> s <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'PBE'</span>, <span style="color: #008000;">'LDA'</span>]
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s

<span style="color: #0000FF;">def</span> <span style="color: #006699;">generic</span>(key, val):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""Generic function with no validation.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   Use this for other key,val inputs not yet written.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> (key, val)

<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">Calculator</span>(<span style="color: #006FE0;">object</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, wd, *args):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""each arg should be of the form (attr, val)."""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">self</span>.wd = wd
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">self</span>.args = args
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> attr, val <span style="color: #0000FF;">in</span> args:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">setattr</span>(<span style="color: #0000FF;">self</span>, attr, val)

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">__str__</span>(<span style="color: #0000FF;">self</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> <span style="color: #008000;">'\n'</span>.join([<span style="color: #008000;">'{}'</span>.<span style="color: #006FE0;">format</span>(x) <span style="color: #0000FF;">for</span> x <span style="color: #0000FF;">in</span> <span style="color: #0000FF;">self</span>.args])

<span style="color: #8D8D84;">##################################################################</span>

<span style="color: #BA36A5;">calc</span> = Calculator(<span style="color: #008000;">'/tmp'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> encut(400),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> xc(<span style="color: #008000;">'PBE'</span>),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> generic(<span style="color: #008000;">'kpts'</span>, [1, 1, 1]))

<span style="color: #0000FF;">print</span>(calc)

<span style="color: #0000FF;">print</span>(<span style="color: #006FE0;">help</span>(encut))
</pre>
</div>

<pre class="example">
encut validated to ('encut', 400)
xc validated to ('xc', 'PBE')
('encut', 400)
('xc', 'PBE')
('kpts', [1, 1, 1])
Help on function encut in module __main__:

encut(*args, **kwargs)
    Planewave cutoff in eV.

None
</pre>

<p>
This approach obviously works. I don't think I like the syntax as much, although in most python editors, it should directly give access to the docstrings of the functions. This is pretty explicit in what is happening, which is an advantage. Compare this to the following approach, which uses our traditional kwarg syntax, with dynamic, but hidden validation.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">def</span> <span style="color: #006699;">encut</span>(cutoff):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"Planewave cutoff in eV."</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">assert</span> <span style="color: #006FE0;">isinstance</span>(cutoff, <span style="color: #006FE0;">int</span>) <span style="color: #0000FF;">and</span> (cutoff &gt; 0)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> cutoff

<span style="color: #0000FF;">def</span> <span style="color: #006699;">xc</span>(s):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""Exchange-correlation functional.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   Should be 'PBE' or 'LDA'.</span>

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span><span style="color: #036A07;">   """</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">assert</span> <span style="color: #006FE0;">isinstance</span>(s, <span style="color: #006FE0;">str</span>), <span style="color: #008000;">"xc should be a string"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">assert</span> s <span style="color: #0000FF;">in</span> [<span style="color: #008000;">'PBE'</span>, <span style="color: #008000;">'LDA'</span>], <span style="color: #008000;">"xc should be 'PBE' or 'LDA'"</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> s


<span style="color: #0000FF;">class</span> <span style="color: #6434A3;">Calculator</span>(<span style="color: #006FE0;">object</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">__init__</span>(<span style="color: #0000FF;">self</span>, wd, **kwargs):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #036A07;">"""each arg should be of the form (attr, val)."""</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">self</span>.wd = wd

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">for</span> kwarg, val <span style="color: #0000FF;">in</span> kwargs.iteritems():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">f</span> = <span style="color: #006FE0;">globals</span>().get(kwarg, <span style="color: #D0372D;">None</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">if</span> f <span style="color: #0000FF;">is</span> <span style="color: #0000FF;">not</span> <span style="color: #D0372D;">None</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'{} evaluated to {}'</span>.<span style="color: #006FE0;">format</span>(kwarg, f(val)))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">else</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'No validation for {}'</span>.<span style="color: #006FE0;">format</span>(kwarg))

<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #006FE0;">setattr</span>(<span style="color: #0000FF;">self</span>, kwarg, val)

<span style="color: #8D8D84;">##################################################################</span>

<span style="color: #BA36A5;">calc</span> = Calculator(<span style="color: #008000;">'/tmp'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> encut=400,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> xc=<span style="color: #008000;">'PBE'</span>,
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> kpts=[1, 1, 1])

<span style="color: #0000FF;">print</span>(calc.encut)
<span style="color: #006FE0;">help</span>(xc)
</pre>
</div>
<pre class="example">
xc evaluated to PBE
No validation for kpts
encut evaluated to 400
400
Help on function xc in module __main__:

xc(s)
    Exchange-correlation functional.

    Should be 'PBE' or 'LDA'.
</pre>

<p>
The benefit of this approach is no change in the syntax we are used to. We still get access to docstrings via tools like pydoc. It should not be too hard to get helpful tooltips in Emacs for this, using pydoc to access the docstrings. This might be the winner.
</p>

<p>
It is up for debate if we should use assert or Exceptions. If anyone uses python with -O the assert statements are ignored. That might not be desirable though. Maybe it would be better to use Exceptions, with a user customizable variable that determines if validation is performed.</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/30/Another-approach-to-docstrings-and-validation-of-args-and-kwargs-in-Python.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Enough with the hyperbole - hy does things that are not as easy in Python]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/29/Enough-with-the-hyperbole-hy-does-things-that-are-not-as-easy-in-Python" />
    <id>http://jkitchin.github.io/blog/2016/04/29/Enough-with-the-hyperbole-hy-does-things-that-are-not-as-easy-in-Python</id>
    <updated>2016-04-29T14:45:54Z</updated>
    <published>2016-04-29T14:45:54Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[Enough with the hyperbole - hy does things that are not as easy in Python]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/29/Enough-with-the-hyperbole-hy-does-things-that-are-not-as-easy-in-Python"><![CDATA[



<p>
We run a lot of molecular simulations using Python. Here is a typical script we would use. It creates an instance of a calculator inside a context manager.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> ase <span style="color: #0000FF;">import</span> Atoms, Atom
<span style="color: #0000FF;">from</span> jasp <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">co</span> = Atoms([Atom(<span style="color: #008000;">'C'</span>,[0,   0, 0]),
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   Atom(<span style="color: #008000;">'O'</span>,[1.2, 0, 0])],
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   cell=(6., 6., 6.))

<span style="color: #0000FF;">with</span> jasp(<span style="color: #008000;">'molecules/simple-co'</span>, <span style="color: #8D8D84;">#</span><span style="color: #8D8D84; font-style: italic;">output dir</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> xc=<span style="color: #008000;">'PBE'</span>,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">the exchange-correlation functional</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> nbands=6,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">number of bands</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> encut=350, <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">planewave cutoff</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> ismear=1,  <span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">Methfessel-Paxton smearing</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> sigma=0.01,<span style="color: #8D8D84;"># </span><span style="color: #8D8D84; font-style: italic;">very small smearing factor for a molecule</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span> atoms=co) <span style="color: #0000FF;">as</span> calc:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> <span style="color: #008000;">'energy = {0} eV'</span>.<span style="color: #006FE0;">format</span>(co.get_potential_energy())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span> co.get_forces()
</pre>
</div>

<p>
This basic approach has served us for more than a decade! Still, there are things about it that bug me. Most significantly is the arbitrary keyword args. We keep a list of legitimate kwargs in the module, but there is no documentation or validation to go with them that is accessible to users (short of reading the code). There are well over 100 kwargs that are possible, so documenting them in the <span class="underline"><span class="underline">init</span></span> docstring is not that useful (we did it once, see <a href="https://gitlab.com/ase/ase/blob/master/ase/calculators/jacapo/jacapo.py#L143">https://gitlab.com/ase/ase/blob/master/ase/calculators/jacapo/jacapo.py#L143</a> , and it made a really long docstring). Providing validation for these (some can only be integers, floats, specific strings, lists, or dictionaries) is not easy. I did this for another simulation code by providing <a href="https://gitlab.com/ase/ase/blob/master/ase/calculators/jacapo/validate.py">validation functions</a> that could be looked up dynamically by name. I never did come up with a way to provide kwarg specific documentation though.
</p>

<p>
The access to documentation while writing code is becoming increasingly important to me; I don't remember all the kwargs and what values are valid. More importantly, as I teach people how to use these tools, it is not practical to tell them to "read the code". I don't even want to do that while running simulations, I just want to setup the simulation and run it.
</p>

<p>
Today, I had an idea that a macro in hy would allow me to get documentation and validation of these kwargs.
</p>

<p>
The pseudocode would look like this. Each "kwarg" will actually be a function that has a docstring, performs validation, and evaluates to its argument. "vaspm" is a macro that will expand to the calculator with the desired kwargs. We will have to be careful that these function names don't conflict with other function names, but that could be addressed in a variety of ways with namespaces and function names.
</p>

<div class="org-src-container">

<pre class="src src-hy"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">pseudocode of the macro</span>
(<span style="color: #006FE0;">setv</span> calc (vaspm <span style="color: #008000;">"molecules/simple-co"</span>
                  (xc <span style="color: #008000;">"PBE"</span>)
                  (nbands 6)
                  (encut 350)
                  (ismear 1)
                  (sigma 0.01)
                  (atoms co)))
</pre>
</div>

<p>
This would expand to the following block, which is equivalent to what we already do today. In the process of expansion though, we gain docstrings and validation!
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> calc (Vasp <span style="color: #008000;">"molecules/simple-co"</span>
                 <span style="color: #D0372D;">:xc</span> <span style="color: #008000;">"PBE"</span>
                 <span style="color: #D0372D;">:nbands</span> 6
                 <span style="color: #D0372D;">:encut</span> 6
                 <span style="color: #D0372D;">:ismear</span> 1
                 <span style="color: #D0372D;">:sigma</span> 0.01
                 <span style="color: #D0372D;">:atoms</span> co))
</pre>
</div>

<p>
Here is a toy implementation that illustrates what the functions are, and how we build up the code from the macro.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">encut</span> [cutoff]
  <span style="color: #008000;">"The planewave cutoff energy in eV."</span>
  (<span style="color: #0000FF;">assert</span> (<span style="color: #006FE0;">integer?</span> cutoff))
  (<span style="color: #0000FF;">assert</span> (<span style="color: #006FE0;">&gt;</span> cutoff 0))
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"encut validated"</span>)
  cutoff)

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">xc</span> [exc]
  <span style="color: #008000;">"The exchange correlation functional. Should be a string of PBE or LDA."</span>
  (<span style="color: #0000FF;">assert</span> (<span style="color: #006FE0;">string?</span> exc))
  (<span style="color: #0000FF;">assert</span> (<span style="color: #006FE0;">in</span> exc [<span style="color: #008000;">"PBE"</span> <span style="color: #008000;">"LDA"</span>]))
  (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"exc validated"</span>)
  exc)


(<span style="color: #0000FF;">defclass</span> <span style="color: #6434A3;">Calculator</span> []
  <span style="color: #008000;">"Toy class representing a calculator."</span>
  (<span style="color: #0000FF;">defn</span> <span style="color: #006699;">__init__</span> [self wd <span style="color: #6434A3;">&amp;kwargs</span> kwargs]
    (setattr self <span style="color: #008000;">"wd"</span> wd)
    (<span style="color: #0000FF;">for</span> [key kwargs]
      (setattr self key (<span style="color: #006FE0;">get</span> kwargs key)))))
</pre>
</div>

<p>
We tangle that block to calculator.hy so we can reuse it. First we show the traditional syntax.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[calculator [*]]</span>)

(<span style="color: #006FE0;">setv</span> calc (Calculator <span style="color: #008000;">"some-dir"</span> <span style="color: #D0372D;">:encut</span> 400 <span style="color: #D0372D;">:xc</span> <span style="color: #008000;">"PBE"</span>))

(<span style="color: #006FE0;">print</span> calc.wd)
(<span style="color: #006FE0;">print</span> calc.encut)
(<span style="color: #006FE0;">print</span> calc.xc)
</pre>
</div>
<pre class="example">
some-dir
400
PBE
</pre>

<p>
Note, we can also do this, and get the validation too. It is verbose for my taste, but shows what we need the final code to look like, and incidentally how this would be done in Python too. We just need a macro that expands to this code.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[calculator [*]]</span>)

(<span style="color: #006FE0;">setv</span> calc (Calculator <span style="color: #008000;">"some-dir"</span> <span style="color: #D0372D;">:encut</span> (encut 400) <span style="color: #D0372D;">:xc</span> (xc <span style="color: #008000;">"PBE"</span>)))

(<span style="color: #006FE0;">print</span> calc.wd)
(<span style="color: #006FE0;">print</span> calc.encut)
(<span style="color: #006FE0;">print</span> calc.xc)
</pre>
</div>

<pre class="example">
encut validated
exc validated
some-dir
400
PBE
</pre>

<p>
That is what this macro below does. We build up that code by making a keyword of the function name, and setting it to the value of the form the function is in.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">vaspm</span> [wd <span style="color: #6434A3;">&amp;rest</span> body]
  <span style="color: #036A07;">"Macro to build a Calculator with validation of arguments in BODY"</span>
  (<span style="color: #0000FF;">let</span> [code `(Calculator ~wd)]
    (<span style="color: #0000FF;">for</span> [form body]
      (.append code (<span style="color: #006FE0;">keyword</span> (<span style="color: #006FE0;">name</span> (<span style="color: #006FE0;">car</span> form))))
      (.append code form))
    code))
</pre>
</div>

<p>
Now, lets consider the macro version.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[calculator [*]]</span>)
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">calculator</span>)

(<span style="color: #006FE0;">setv</span> calc (vaspm <span style="color: #008000;">"some-dir"</span> (encut 400) (xc <span style="color: #008000;">"PBE"</span>)))
(<span style="color: #006FE0;">print</span> calc.wd)
(<span style="color: #006FE0;">print</span> calc.encut)
(<span style="color: #006FE0;">print</span> calc.xc)

<span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">proof we can get to the encut docstring!</span>
(help encut)
</pre>
</div>

<pre class="example">
encut validated
exc validated
some-dir
400
PBE
Help on function encut in module calculator:

encut(cutoff)
    The planewave cutoff energy in eV.
</pre>

<p>
Sweet. The macro allows us to simplify our notation to be approximately the same as the original function, but with validation and docstring availability. Here is a variation of the macro that even uses keywords and builds the validation in from the keyword. It is not clear we can access the docstrings so easily here (ok, we can build an eldoc function that works either way, but the function method above is "more native").
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[calculator [*]]</span>)
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">calculator</span>)


(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">vasp2</span> [wd <span style="color: #6434A3;">&amp;rest</span> kwargs]
  (<span style="color: #0000FF;">let</span> [code `(Calculator ~wd)]
    (<span style="color: #0000FF;">for</span> [x (<span style="color: #006FE0;">range</span>   0 (len kwargs) 2)]
      (<span style="color: #0000FF;">let</span> [kw (<span style="color: #006FE0;">nth</span> kwargs x)
            val (<span style="color: #006FE0;">nth</span> kwargs (<span style="color: #006FE0;">+</span> 1 x))]
        (.append code kw)
        (.append code `(~(HySymbol (<span style="color: #006FE0;">name</span> kw)) ~val))))
    code))

(<span style="color: #006FE0;">print</span> (<span style="color: #006FE0;">macroexpand</span> '(vasp2 <span style="color: #008000;">"/tmp"</span> <span style="color: #D0372D;">:encut</span> 1 <span style="color: #D0372D;">:xc</span> <span style="color: #008000;">"PBE"</span>)))

(<span style="color: #006FE0;">setv</span> calc (vasp2 <span style="color: #008000;">"some-dir"</span>
                  <span style="color: #D0372D;">:encut</span> 400
                  <span style="color: #D0372D;">:xc</span> <span style="color: #008000;">"PBE"</span>))
(<span style="color: #006FE0;">print</span> calc.wd)
(<span style="color: #006FE0;">print</span> calc.encut)
(<span style="color: #006FE0;">print</span> calc.xc)
</pre>
</div>
<pre class="example">
(u'Calculator' u'/tmp' u'\ufdd0:encut' (u'encut' 1L) u'\ufdd0:xc' (u'xc' u'PBE'))
encut validated
exc validated
some-dir
400
PBE
</pre>

<p>
To summarize here, we have looked at some ways to incorporate validation and documentation into kwargs. There are certainly ways to do this in Python, using these auxiliary functions. In fact we use them in hy too. We could build the validation into a Python <span class="underline"><span class="underline">init</span></span> function too, using dynamic lookup of the function names, and evaluation of the functions. The macro features of hy give different opportunities for this, and different syntactical sugars to work with. The hy approach leads to less duplication (e.g. only a keyword, not a keyword and a function name that are the same), which will lead to fewer mistakes of the type xc=xd(something). Overall, interesting differences to contemplate.
</p>

<p>
From a developer point of view there is the burden of writing all the validation functions, but the payoff is access to documentation and optionally, validation. Also, no kwargs that are not allowed will work. Right now, with **kwargs, they might silently fail.
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/29/Enough-with-the-hyperbole---hy-does-things-that-are-not-as-easy-in-Python.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Managing contexts - Python vs hy]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/28/Managing-contexts-Python-vs-hy" />
    <id>http://jkitchin.github.io/blog/2016/04/28/Managing-contexts-Python-vs-hy</id>
    <updated>2016-04-28T14:32:40Z</updated>
    <published>2016-04-28T14:32:40Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[Managing contexts - Python vs hy]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/28/Managing-contexts-Python-vs-hy"><![CDATA[


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. a try/except/finally approach</a></li>
<li><a href="#sec-2">2. A Python context manager</a></li>
<li><a href="#sec-3">3. A python decorator</a></li>
<li><a href="#sec-4">4. A hy macro approach</a></li>
</ul>
</div>
</div>

<p>
A common pattern we have in running molecular simulations is to temporarily change to a new directory, do some stuff, and then change back to the directory, even if something goes wrong and an exception is raised. Here we examine several approaches to handling this in Python.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> a try/except/finally approach</h2>
<div class="outline-text-2" id="text-1">
<p>
A way to handle this is with a try/except/finally block in Python. Here we illustrate the idea. Nothing fancy happens for the exception here, other than we do get back to the original directory before the program ends. There is nothing wrong with this, but it is not that reusable, and has a lot of places to make sure the right thing happens.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> os
<span style="color: #0000FF;">print</span>(os.getcwd())
<span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cwd</span> = os.getcwd()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(<span style="color: #008000;">'/tmp'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">f</span> = <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'some-file'</span>, <span style="color: #008000;">'w'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'5'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(os.getcwd())
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   1 / 0
<span style="color: #0000FF;">except</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span>
<span style="color: #0000FF;">finally</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.close()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(cwd)

<span style="color: #0000FF;">print</span>(os.getcwd())

<span style="color: #0000FF;">print</span>(<span style="color: #006FE0;">open</span>(<span style="color: #008000;">'/tmp/some-file'</span>).read())
</pre>
</div>

<pre class="example">
/Users/jkitchin/Dropbox/python/hyve
/private/tmp
/Users/jkitchin/Dropbox/python/hyve
5
</pre>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> A Python context manager</h2>
<div class="outline-text-2" id="text-2">
<p>
A more sophisticated way to handle this in Python is a context manager. We create a context manager here called cd that does the same thing. The context manager is longer, but we would presumably put this in module and import it. This allows us to to the same thing in a lot less code afterwards, and to reuse this pattern. We also use the built in context manager for opening a file. This is for the most part a syntactical sugar for the code above.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> contextlib

<span style="color: #6434A3;">@contextlib.contextmanager</span>
<span style="color: #0000FF;">def</span> <span style="color: #006699;">cd</span>(wd):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">import</span> os
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cwd</span> = os.getcwd()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Started in {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(wd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Entered {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">yield</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">except</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">finally</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(cwd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Entered {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))

<span style="color: #8D8D84;">##################################################################</span>
<span style="color: #0000FF;">with</span> cd(<span style="color: #008000;">'/tmp'</span>):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'some-other-file'</span>, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">'5'</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   1 / 0

<span style="color: #0000FF;">print</span>(<span style="color: #006FE0;">open</span>(<span style="color: #008000;">'/tmp/some-other-file'</span>).read())
</pre>
</div>

<pre class="example">
Started in /Users/jkitchin/Dropbox/python/hyve
Entered /private/tmp
Entered /Users/jkitchin/Dropbox/python/hyve
5
</pre>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> A python decorator</h2>
<div class="outline-text-2" id="text-3">
<p>
Here is an example of doing something like this with a decorator. I don't do this too often, but this does more or less the same thing. It does eliminate a with statement and provide some context to do work in. The overall indentation is identical to the context manager we looked at previously because we have to wrap our code in a function to delay its execution, which we have to ask for with f(). A downside of this is f is always decorated now. I am not sure you can undecorate it.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">import</span> os

<span style="color: #0000FF;">def</span> <span style="color: #006699;">cd</span>(wd):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">outer</span>(func):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">def</span> <span style="color: #006699;">inner</span>(*args):
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #BA36A5;">cwd</span> = os.getcwd()
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'Started in {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(wd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'entered {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">try</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> func(*args)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">except</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">pass</span>
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">finally</span>:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   os.chdir(cwd)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">print</span>(<span style="color: #008000;">'entered {}'</span>.<span style="color: #006FE0;">format</span>(os.getcwd()))
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> inner
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">return</span> outer
<span style="color: #8D8D84;">##################################################################</span>

<span style="color: #6434A3;">@cd</span>(<span style="color: #008000;">'/tmp'</span>)
<span style="color: #0000FF;">def</span> <span style="color: #006699;">f</span>():
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #0000FF;">with</span> <span style="color: #006FE0;">open</span>(<span style="color: #008000;">'decorated-file'</span>, <span style="color: #008000;">'w'</span>) <span style="color: #0000FF;">as</span> f:
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   <span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   f.write(<span style="color: #008000;">"5"</span>)
<span style="color: #9B9B9B; background-color: #EDEDED;"> </span>   1 / 0

f()
<span style="color: #0000FF;">print</span>(<span style="color: #006FE0;">open</span>(<span style="color: #008000;">"/tmp/decorated-file"</span>).read())
</pre>
</div>

<pre class="example">
Started in /Users/jkitchin/Dropbox/python/hyve
entered /private/tmp
entered /Users/jkitchin/Dropbox/python/hyve
5
</pre>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> A hy macro approach</h2>
<div class="outline-text-2" id="text-4">
<p>
hy gives us yet another option: a macro. We can use a macro to construct the context for us by building up the try/except/finally code we used above. The indentation used here is just for readability.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">cd</span> [wd <span style="color: #6434A3;">&amp;rest</span> body]
  `(<span style="color: #0000FF;">do</span>
    (<span style="color: #0000FF;">import</span> <span style="color: #006699;">os</span>)
    (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"started in "</span> (os.getcwd))
    (<span style="color: #0000FF;">let</span> [cwd (os.getcwd)]
      (<span style="color: #0000FF;">try</span>
       (<span style="color: #0000FF;">do</span> (os.chdir ~wd)
           (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"entered "</span> (os.getcwd))
           ~@body)
       (<span style="color: #0000FF;">except</span> [e Exception] <span style="color: #D0372D;">nil</span>)
       (<span style="color: #0000FF;">finally</span>
        (os.chdir cwd)
        (<span style="color: #006FE0;">print</span> <span style="color: #008000;">"entered "</span> (os.getcwd)))))))


<span style="color: #8D8D84;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
(cd <span style="color: #008000;">"/tmp"</span>
    (<span style="color: #0000FF;">with</span> [f (open <span style="color: #008000;">"some-hy-file"</span> <span style="color: #008000;">"w"</span>)]
          (.write f <span style="color: #008000;">"5"</span>)
          (<span style="color: #006FE0;">/</span> 1 0)))

(<span style="color: #006FE0;">print</span> (.read (open <span style="color: #008000;">"/tmp/some-hy-file"</span>)))
</pre>
</div>

<pre class="example">
started in  /Users/jkitchin/Dropbox/python/hyve
entered  /private/tmp
entered  /Users/jkitchin/Dropbox/python/hyve
5
</pre>


<p>
The results are the same, even down to the reduced number of lines! But the mechanism that achieves that is different. In this example, we subtly changed the syntax that was possible, eliminating the need for one of the "with" statements. This is only possible with this kind of macro construction as far as I know. It still is not a game changer of programming, but does illustrate some new ways to think about writing these programs. It is not necessary to wrap the code into a function just to delay it from being executed.
</p>
</div>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/28/Managing-contexts---Python-vs-hy.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[More hyjinks - space - the final frontier]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/24/More-hyjinks-space-the-final-frontier" />
    <id>http://jkitchin.github.io/blog/2016/04/24/More-hyjinks-space-the-final-frontier</id>
    <updated>2016-04-24T13:23:05Z</updated>
    <published>2016-04-24T13:23:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="unknown" />
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[More hyjinks - space - the final frontier]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/24/More-hyjinks-space-the-final-frontier"><![CDATA[



<p>
Apologies in advance if you haven't come across the programming language <a href="http://esolangs.org/wiki/ook!">ook</a> before now. It kind of looks like you recorded an orangutan as a program. It cracks me up to look at it.  You will not be a better person for learning about it here, or for what is about to follow. This would have been a great April Fool's joke.
</p>

<p>
Here is a typical ook program. The canonical one for any language. I run it in a <a href="https://github.com/jcharra/ook/blob/master/bf.py">Python ook</a> interpreter. You might notice this program actually converts ook to its <a href="https://en.wikipedia.org/wiki/Brainfuck">isomorphic relative</a> and executes that program.
</p>

<div class="org-src-container">

<pre class="src src-python"><span style="color: #0000FF;">from</span> ook <span style="color: #0000FF;">import</span> *

<span style="color: #BA36A5;">interpreter</span> = BFInterpreter()

<span style="color: #BA36A5;">program</span> = <span style="color: #008000;">"""Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span>
<span style="color: #008000;">Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.</span>
<span style="color: #008000;">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!</span>
<span style="color: #008000;">Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook. Ook? Ook."""</span>

interpreter.run_commands(convertOokToBF(program))
</pre>
</div>

<pre class="example">
Hello World!
</pre>

<p>
Yes, that odd looking program prints "Hello World!". Ook has just three syntax elements (Ook. Ook? Ook!), which when combined in pairs lead to 8 commands. You can represent any text in ook, as well as programs. It is supposedly Turing complete.
</p>

<p>
Think it could not get worse? Prepare for disappointment. There are at least 8 different <a href="https://www.cs.tut.fi/~jkorpela/chars/spaces.html">unicode spaces</a> &#x2026; You see where this is going. Yes, this is just a <a href="http://esolangs.org/wiki/TrivialBrainfuckSubstitution">trivial substitution</a> exercise. Go ahead and queue <a href="https://www.youtube.com/watch?v=Fq3QmtV8vT0">Disturbed -- Down with the Sickness</a> . Put it on repeat.
</p>

<p>
Introducing: space - the final frontier. A place where noone should ever go. Yep. A whole, Turing complete language using different kinds of unicode spaces as the commands.  This idea is so bad that the only other language similar to it was an April Fool's joke more than a decade ago (<a href="https://en.wikipedia.org/wiki/Whitespace_(programming_language)">https://en.wikipedia.org/wiki/Whitespace_(programming_language)</a> )! They stuck with the ascii whitespace characters. Anyone else who ever had this idea probably had the decency to keep it to themselves. Here is probably the one and only (and hopefully last) space program in existence.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[space [*]]</span>)

(space <span style="colorspan>)
</pre>
</div>

<pre class="example">
Hello World!
</pre>

<p>
That's right, a program of nothing but different kinds of spaces that actually does something. Sure space can do anything any other Turing complete language can do, with an infinite sized stack, and a <a href="http://www.dictionary.com/browse/sisyphean">Sysyphean</a> patience and endurance, and a healthy dose of self-loathing. But why would you want to?
</p>

<p>
That program is hiding out in the open there. It is a special kind of noise. Like a modern ascii art interpreted in unicode spaces. Maybe <a href="http://www.bloombergview.com/articles/2014-11-14/why-pay-15-million-for-a-white-canvas">these paintings</a> really have hidden messages in them. Forget steganography to hide your messages. Just <a href="http://www.splitbrain.org/_static/ook/">encode them</a> in ook, convert them to space and put them out there. Who would even know they were there if they did not know to look. Even if they did look, what do they see? space. I am probably getting on an NSA list for that suggestion. Space is so useful. You could use a unicode space version of Morse code. Three short spaces regular space three long spaces regular space three short spaces, i.e. "           ". Those quotes are just to hint they are there. A cry for help. If a space is on the page and nobody sees it, is it really there? A space by any other name would look like &#x2026; a space?
</p>

<p>
This hackery is actually just a trivial substitution on ook that translates each different space to the ook command it corresponds to and then runs it. I built it off of this <a href="http://hackingjohnnz.blogspot.com/2011/06/ook-interpreter-in-python.html">Python ook intepreter</a> , which translates the ook command to another program to run it. I implemented space in hy below. As bad as this idea is, I did not want to build a native space interpreter, just show the absurdity of it. Oh, and write a bit of hy code with dictionaries and comprehension. Sorry to drag that interesting project to this dark corner. Hy sure looks reasonable compared to this! Here is the thin layer.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #006FE0;">setv</span> ook_lookup {(<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook."</span> <span style="color: #008000;">"Ook?"</span>) <span style="color: #008000;">"\u2000"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook?"</span> <span style="color: #008000;">"Ook."</span>) <span style="color: #008000;">"\u2001"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook."</span> <span style="color: #008000;">"Ook."</span>) <span style="color: #008000;">"\u2002"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook!"</span> <span style="color: #008000;">"Ook!"</span>) <span style="color: #008000;">"\u2003"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook!"</span> <span style="color: #008000;">"Ook."</span>) <span style="color: #008000;">"\u2004"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook."</span> <span style="color: #008000;">"Ook!"</span>) <span style="color: #008000;">"\u2005"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook!"</span> <span style="color: #008000;">"Ook?"</span>) <span style="color: #008000;">"\u2006"</span>
                  (<span style="color: #006FE0;">,</span> <span style="color: #008000;">"Ook?"</span> <span style="color: #008000;">"Ook!"</span>) <span style="color: #008000;">"\u2007"</span>}
      space_lookup (dict-comp v k [[k v] (.iteritems ook_lookup)]))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">ook2space</span> [program]
  <span style="color: #008000;">"Convert an ook PROGRAM to space syntax."</span>
  (<span style="color: #0000FF;">let</span> [chars (.split (.replace program <span style="color: #008000;">"\n"</span> <span style="color: #008000;">" "</span>) <span style="color: #008000;">" "</span>)
        p1 (<span style="color: #006FE0;">cut</span> chars 0 <span style="color: #D0372D;">nil</span> 2)
        p2 (<span style="color: #006FE0;">cut</span> chars 1 <span style="color: #D0372D;">nil</span> 2)
        pairs (<span style="color: #006FE0;">zip</span> p1 p2)
        sp <span style="color: #008000;">""</span>]
    (<span style="color: #0000FF;">for</span> [ch pairs] (<span style="color: #006FE0;">+=</span> sp (<span style="color: #006FE0;">get</span> ook_lookup ch)))
    sp))


(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">space2ook</span> [program]
  <span style="color: #008000;">"Convert a space PROGRAM to ook syntax."</span>
  (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">get</span> space_lookup char)) [char program])))


(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[ook [*]]</span>)
(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">space</span> [space_program]
  <span style="color: #008000;">"Run a space program."</span>
  (<span style="color: #0000FF;">let</span> [interpreter (BFInterpreter)
        bf_program (convertOokToBF (space2ook space_program))]
    (.run_commands interpreter bf_program)))
</pre>
</div>

<p>
We can convert an ook program to a space program. I put the brackets in just for a visual boundary of the space program.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[space [*]]</span>)

(<span style="color: #0000FF;">let</span> [program <span style="color: #008000;">"Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span>
<span style="color: #008000;">Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook!</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook.</span>
<span style="color: #008000;">Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.</span>
<span style="color: #008000;">Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook!</span>
<span style="color: #008000;">Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook!</span>
<span style="color: #008000;">Ook! Ook! Ook. Ook? Ook."</span>]
 (<span style="color: #006FE0;">print</span> (.encode (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"["</span> (ook2space program) <span style="color: #008000;">"]"</span>) <span style="color: #008000;">"utf-8"</span>)))
</pre>
</div>
<pre class="example">
[                                                                                                                                                                                                             ]
</pre>

<p>
Nothing but space here folks. Move along.
</p>

<p>
What did we learn today? Evidently I have strange ideas sometimes, and I am not alone in that. Just because you can do something, certainly doesn't mean you should. Sorry for this use of your time if you got here. Please come back again!
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/24/More-hyjinks---space---the-final-frontier.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Don't get hysterical - they are just unicode function names]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/23/Don-t-get-hysterical-they-are-just-unicode-function-names" />
    <id>http://jkitchin.github.io/blog/2016/04/23/Don-t-get-hysterical-they-are-just-unicode-function-names</id>
    <updated>2016-04-23T12:57:58Z</updated>
    <published>2016-04-23T12:57:58Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[Don't get hysterical - they are just unicode function names]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/23/Don-t-get-hysterical-they-are-just-unicode-function-names"><![CDATA[



<p>
<a href="http://hylang.org">Hy</a> allows us to define functions with unicode names. Here we play around with this to define logical operators with the symbols you normally see in formal papers (i.e. the LaTeX symbols). I think in Python3 you can also define unicode names for functions. It definitely does not work for Python2.7 which we use here (although remarkably via Hy it does work).
</p>

<p>
First, we define the logical operators or, and, xor and not, and a few other interesting ones. In case it is not clear why a unicode representation of and is helpful, note there are three instances of the word and in the previous sentence, and only one is a logical operator!  This is just some syntactical beauty, but it will shortly make for a different representation of code. We tangle this code block to logical_operators.hy.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#8744;</span> [a b] (<span style="color: #006FE0;">or</span> a b))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#8743;</span> [a b] (<span style="color: #006FE0;">and</span> a b))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#8853;</span> [a b] (xor a b))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#172;</span> [a] (<span style="color: #006FE0;">not</span> a))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#8704;</span> [x func]
  <span style="color: #008000;">"(func x) is True for every x."</span>
  (<span style="color: #006FE0;">every?</span> func x))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#8707;</span> [x func]
  <span style="color: #008000;">"func(x) is true for at least one x."</span>
  (<span style="color: #006FE0;">some</span> func x))

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">&#8707;!</span> [x func]
  <span style="color: #008000;">"func(x) is true for exactly one x."</span>
  (<span style="color: #006FE0;">=</span> 1 (len (list (<span style="color: #006FE0;">filter</span> func x)))))
</pre>
</div>

<p>
Here is an example of using those operators. At the moment, we use the prefix notation of Lisp.
</p>
<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[logical_operators [*]]</span>)
(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[serialize [stringify]]</span>)

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">show</span> [body]
  `(<span style="color: #0000FF;">do</span>
    (<span style="color: #006FE0;">print</span> (.encode (.format <span style="color: #008000;">"{0} = {1}"</span> (stringify '~body) ~body) <span style="color: #008000;">"utf-8"</span>))))

(show (&#172; <span style="color: #D0372D;">True</span>))
(show (&#8743; <span style="color: #D0372D;">True</span> <span style="color: #D0372D;">False</span>))
(show (&#8743; <span style="color: #D0372D;">True</span> <span style="color: #D0372D;">True</span>))
(show (&#8744; <span style="color: #D0372D;">True</span> <span style="color: #D0372D;">False</span>))
(show (&#8744; <span style="color: #D0372D;">True</span> <span style="color: #D0372D;">True</span>))
(show (&#8853; <span style="color: #D0372D;">True</span> <span style="color: #D0372D;">False</span>))
(show (&#8853; <span style="color: #D0372D;">True</span> <span style="color: #D0372D;">True</span>))
(show (&#8853; <span style="color: #D0372D;">False</span> <span style="color: #D0372D;">False</span>))
(show (&#8704; [2 4 6] even?))
(show (&#8707; [2 3 4] odd?))
(show (&#8707;! [2 3 4] odd?))
(show (&#8707;! [2 3 5] odd?))
</pre>
</div>
<pre class="example">
(¬ True) = False
(∧ True False) = False
(∧ True True) = True
(∨ True False) = True
(∨ True True) = True
(⊕ True False) = True
(⊕ True True) = False
(⊕ False False) = False
(∀ [2 4 6] is_even) = True
(∃ [2 3 4] is_odd) = True
(∃_bang [2 3 4] is_odd) = True
(∃_bang [2 3 5] is_odd) = False
</pre>

<p>
Note the exclamation mark got expanded to _bang. It is evidently an ordinary ascii character.
</p>

<p>
We can get an infix notation if we use our infix module and the #$ reader macro defined in it. Here are some examples. Note it doesn't make sense to use this all time, e.g. it would even be a mistake to do this with the not operator.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[logical_operators [*]]</span>)
(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[serialize [stringify]]</span>)
(<span style="color: #0000FF;">import</span> <span style="color: #006699;">[infix [*]]</span>)
(<span style="color: #0000FF;">require</span> <span style="color: #006699;">infix</span>)

(<span style="color: #0000FF;">defmacro</span> <span style="color: #006699;">show</span> [body]
  `(<span style="color: #0000FF;">do</span>
    (<span style="color: #006FE0;">print</span> (.encode (.format <span style="color: #008000;">"{0} = {1}"</span> (stringify '~body) ~body) <span style="color: #008000;">"utf-8"</span>))))

(show (&#172; <span style="color: #D0372D;">True</span>))
(show #$(<span style="color: #D0372D;">True</span> &#8743; <span style="color: #D0372D;">False</span>))
(show #$(<span style="color: #D0372D;">True</span> &#8743; <span style="color: #D0372D;">True</span>))
(show #$(<span style="color: #D0372D;">True</span> &#8744; <span style="color: #D0372D;">False</span>))
(show #$(<span style="color: #D0372D;">True</span> &#8744; <span style="color: #D0372D;">True</span>))
(show #$(<span style="color: #D0372D;">True</span> &#8853; <span style="color: #D0372D;">False</span>))
(show #$(<span style="color: #D0372D;">True</span> &#8853; <span style="color: #D0372D;">True</span>))
(show #$(<span style="color: #D0372D;">False</span> &#8853; <span style="color: #D0372D;">False</span>))
</pre>
</div>
<pre class="example">
(¬ True) = False
(dispatch_reader_macro "$" (True ∧ False)) = False
(dispatch_reader_macro "$" (True ∧ True)) = True
(dispatch_reader_macro "$" (True ∨ False)) = True
(dispatch_reader_macro "$" (True ∨ True)) = True
(dispatch_reader_macro "$" (True ⊕ False)) = True
(dispatch_reader_macro "$" (True ⊕ True)) = False
(dispatch_reader_macro "$" (False ⊕ False)) = False
</pre>

<p>
The show macro shows us how the reader macro gets expanded into, you guessed it, regular old function calls. They are just syntactical sugar to help us be more concise. The unicode symbols are not quite as simple to type as ascii names, but there are solutions to this: abbreviations in Emacs (<a href="http://ergoemacs.org/emacs/emacs_n_unicode.html">http://ergoemacs.org/emacs/emacs_n_unicode.html</a> ), custom commands, learn the keystrokes (<a href="http://www.johndcook.com/blog/emacs_unicode/">http://www.johndcook.com/blog/emacs_unicode/</a> ) and C-x 8 RET and the unicode name, etc&#x2026; Is it worth it? That might depend on how ingrained those logical symbols are in your mental model of your work. If it is deeply ingrained, your code will be better aligned with your thoughts, and easier to understand.
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/23/Don't-get-hysterical---they-are-just-unicode-function-names.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Alex Hallenbeck successfully defended his PhD]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/21/Alex-Hallenbeck-successfully-defended-his-PhD" />
    <id>http://jkitchin.github.io/blog/2016/04/21/Alex-Hallenbeck-successfully-defended-his-PhD</id>
    <updated>2016-04-21T15:07:34Z</updated>
    <published>2016-04-21T15:07:34Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <summary type="html"><![CDATA[Alex Hallenbeck successfully defended his PhD]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/21/Alex-Hallenbeck-successfully-defended-his-PhD"><![CDATA[


<p>
Alex successfully defended his PhD on Tuesday, April 19, 2016!
</p>

<p>
Title: Micro-scale Approaches to the Bench-scale Evaluation of CO<sub>2</sub> Capture System Properties
</p>

<p>
Committee Members: Professor John Kitchin (chair), Professor Shelley Anna, Professor Neil Donahue,  and Professor Newell Washburn.
</p>

<p>
Congratulations Alex!
</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/21/Alex-Hallenbeck-successfully-defended-his-PhD.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication in AICHE J.]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/21/New-publication-in-AICHE-J" />
    <id>http://jkitchin.github.io/blog/2016/04/21/New-publication-in-AICHE-J</id>
    <updated>2016-04-21T15:06:39Z</updated>
    <published>2016-04-21T15:06:39Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="news" />
    <category scheme="http://jkitchin.github.io/blog" term="publication" />
    <summary type="html"><![CDATA[New publication in AICHE J.]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/21/New-publication-in-AICHE-J"><![CDATA[


<p>
This paper uses a kernel regression method trained on a large set of DFT calculations from the Materials Project to design new materials. A notable feature of this approach is it opens the door to inverse design, since the mathematical form of the regression is accessible. In the paper we predict electronic properties and elastic constants for a large number of metal oxides. Congratulations Bruno for this work!
</p>

<p>
See the paper here: <a href="http://onlinelibrary.wiley.com/doi/10.1002/aic.15251/full">http://onlinelibrary.wiley.com/doi/10.1002/aic.15251/full</a>
</p>

<div class="org-src-container">

<pre class="src src-bibtex"><span style="color: #006699;">@article</span> {<span style="color: #D0372D;">AIC:AIC15251</span>,
  <span style="color: #BA36A5;">author</span> =       {Calfa, Bruno A. and Kitchin, John R.},
  <span style="color: #BA36A5;">title</span> =        {Property prediction of crystalline solids from composition and
                  crystal structure},
  <span style="color: #BA36A5;">journal</span> =      {AIChE Journal},
  <span style="color: #BA36A5;">issn</span> =         {1547-5905},
  <span style="color: #BA36A5;">url</span> =          {<span style="color: #006DAF; text-decoration: underline;">http://dx.doi.org/10.1002/aic.15251</span>},
  <span style="color: #BA36A5;">doi</span> =          {<span style="color: #006DAF; text-decoration: underline;">10.1002/aic.15251</span>},
  <span style="color: #BA36A5;">pages</span> =        {n/a--n/a},
  <span style="color: #BA36A5;">keywords</span> =     {crystal property prediction, data analytics, kernel
                  regression, crystal composition and structure, exhaustive
                  enumeration algorithm},
  <span style="color: #BA36A5;">year</span> =         {2016},
}
</pre>
</div>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/21/publication-in-AICHE-J..org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Code completion in HyDE]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2016/04/18/Code-completion-in-HyDE" />
    <id>http://jkitchin.github.io/blog/2016/04/18/Code-completion-in-HyDE</id>
    <updated>2016-04-18T11:24:13Z</updated>
    <published>2016-04-18T11:24:13Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="hylang" />
    <summary type="html"><![CDATA[Code completion in HyDE]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2016/04/18/Code-completion-in-HyDE"><![CDATA[



<p>
Code completion is often useful in an editor. Today, we add some code completion to Emacs for <a href="http://hylang.org">hy</a> . It isn't that hard; we get a list of known keywords from the hy language, a list of functions and macros, and a list of variables from the current buffer. If you are following this line of development, the code can be found here: <a href="https://github.com/jkitchin/jmax/blob/master/mile-hy.el">https://github.com/jkitchin/jmax/blob/master/mile-hy.el</a> 
</p>

<p>
If not, there might be some interesting tips here on getting completion in Emacs ;)
</p>

<p>
We will use auto-complete (<a href="http://auto-complete.org/doc/manual.html#extend">http://auto-complete.org/doc/manual.html#extend</a> ) for now. First, we can add hy-mode to the list of ac-modes:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">* auto-complete</span>
(add-to-list 'ac-modes 'hy-mode)
</pre>
</div>

<p>
Next, we need to define some sources and functions for completion. Over at <a href="https://github.com/jkitchin/hyve/blob/master/hylp.hy#L65">https://github.com/jkitchin/hyve/blob/master/hylp.hy#L65</a> I defined a function that returns a list of all hy core functions and macros that Emacs can directly read.
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">hy-all-keywords-emacs-completion</span> []
  <span style="color: #008000;">"Return a string for Emacs completion suitable for read in Emacs.</span>
<span style="color: #008000;">We unmangle the names and replace _ with -."</span>
  (str
   (<span style="color: #006FE0;">+</span> <span style="color: #008000;">"("</span>
      (.join <span style="color: #008000;">" "</span> (<span style="color: #006FE0;">list-comp</span> (.format <span style="color: #008000;">"\"{}\""</span> (.replace x <span style="color: #008000;">"_"</span> <span style="color: #008000;">"-"</span>))
                            [x (hy-all-keywords)]))
      <span style="color: #008000;">")"</span>)))
</pre>
</div>


<p>
Here, we define a source that gets that information from the hy repl using the lispy&#x2013;eval-hy function. This has the downside of calling the repl, but it seems fast, and I haven't noticed any lags so far. The upside is it only gets called once and has everything hy knows about, i.e. i don't have to update this for new core functions/macros.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ac-source-hy-keywords</span>
  `((candidates . ,(read (lispy--eval-hy <span style="color: #008000;">"(hy-all-keywords-emacs-completion)"</span>))))
  <span style="color: #036A07;">"Keywords known from hy. The command is defined in hyve.hylp."</span>)
</pre>
</div>

<p>
It would also be nice to have the defns/macros in the current file available for completion. This hackery searches the current buffer for these with a pretty simple regex and accumulates the results.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">hy-defns-macros</span> ()
  <span style="color: #036A07;">"Get a list of defns in the current file."</span>
  (<span style="color: #0000FF;">let</span> ((defns '()))
    (<span style="color: #0000FF;">save-excursion</span>
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(?:</span><span style="color: #008000;">defn</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">|</span><span style="color: #008000;">defmacro</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;">[[:space:]]+</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">(</span><span style="color: #008000;">.*?</span><span style="color: #008000; font-weight: bold;">\\</span><span style="color: #008000; font-weight: bold;">)</span><span style="color: #008000;"> "</span>nil t)
        (<span style="color: #0000FF;">push</span> (match-string 1) defns)))
    defns))
</pre>
</div>

<p>
Finally, we would also like the variable names from setv and let. Hy is lispy, so we use a hybrid regex search, followed by read to get every other name in the case of setv, and the vector expression in the let case.
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defun</span> <span style="color: #006699;">hy-variables</span> ()
  <span style="color: #036A07;">"Collect the variable names in the current buffer.</span>
<span style="color: #036A07;">These are every other name after setv."</span>
  (<span style="color: #0000FF;">let</span> ((vars '())
        expr
        set-vars
        let-vars)
    (<span style="color: #0000FF;">save-excursion</span>
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"(setv"</span> nil t)
        (<span style="color: #0000FF;">save-excursion</span>
          (goto-char (match-beginning 0))
          (<span style="color: #0000FF;">setq</span> expr (read (current-buffer)))
          (<span style="color: #0000FF;">setq</span> set-vars (<span style="color: #0000FF;">loop</span> for x in (cdr expr) by #'cddr
                               collect x)))))
    (<span style="color: #0000FF;">save-excursion</span>
      (goto-char (point-min))
      (<span style="color: #0000FF;">while</span> (re-search-forward <span style="color: #008000;">"(let"</span> nil t)
        (<span style="color: #0000FF;">save-excursion</span>
          (goto-char (match-beginning 0))
          (<span style="color: #0000FF;">setq</span> expr (read (current-buffer)))
          <span style="color: #8D8D84;">;; </span><span style="color: #8D8D84; font-style: italic;">this is read as a vector, so we convert to a list.</span>
          (<span style="color: #0000FF;">setq</span> let-vars
                (<span style="color: #0000FF;">loop</span> for x in (append (nth 1 expr) nil)
                      by #'cddr collect x)))))
    (append set-vars let-vars)))
</pre>
</div>

<p>
Next, we define two new sources for completion that use those two functions:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ac-source-hy-defns</span>
  '((candidates . hy-defns-macros))
  <span style="color: #036A07;">"Functions/macros defined in the file."</span>)

(<span style="color: #0000FF;">defvar</span> <span style="color: #BA36A5;">ac-source-hy-variables</span>
  '((candidates . hy-variables))
  <span style="color: #036A07;">"Hy variables defined in the file."</span>)
</pre>
</div>

<p>
And finally add this to the hy-setup hook function:
</p>

<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #0000FF;">setq</span> ac-sources '(ac-source-hy-keywords
                     ac-source-hy-defns
                     ac-source-hy-variables))

  (ac-set-trigger-key <span style="color: #008000;">"TAB"</span>)
  (auto-complete-mode 1)
</pre>
</div>

<p>
And we should be good to go with completion. Let's try it out.
</p>

<p>
Checkout the video here: <a href="https://www.youtube.com/watch?v=L6j5IWkpoz0">https://www.youtube.com/watch?v=L6j5IWkpoz0</a> 
</p>

<div class="org-src-container">

<pre class="src src-hy">(<span style="color: #0000FF;">let</span> [some-long-name 5
      boring-and-tedious <span style="color: #008000;">"tree"</span>]
  (<span style="color: #006FE0;">print</span> boring-and-tedious))

(<span style="color: #006FE0;">setv</span> another-var <span style="color: #D0372D;">nil</span> inline-name (<span style="color: #006FE0;">+</span> 4 5)
      hylarious-var 5)

(<span style="color: #006FE0;">+</span> hylarious-var 8 )

(<span style="color: #0000FF;">defn</span> <span style="color: #006699;">Some-long-function</span> []
  (<span style="color: #006FE0;">print</span> 6))

(Some-long-function)
</pre>
</div>

<pre class="example">
tree
6
</pre>

<p>
Sweet.</p>
<p>Copyright (C) 2016 by John Kitchin. See the <a href="/copying.html">License</a> for information about copying.<p>
<p><a href="/org/2016/04/18/Code-completion-in-HyDE.org">org-mode source</a></p>
<p>Org-mode version = 8.2.10</p>]]></content>
  </entry>
</feed>
