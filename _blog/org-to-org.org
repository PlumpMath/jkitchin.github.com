* org to org


[[http://google.com]]

[[mailto:jkitchin@andrew.cmu.edu]]



one citation [@shi-2007-first-au]


multi-citation [@shi-2007-first-au; @jarvi-2008-devel-reaxf; @kondratyuk-2013]


pre and post text  [@grimme-2006-semiem-gga, See, page 34]


Just pre text [@marjolin-2015-therm-descr, See also]

#+BEGIN_SRC emacs-lisp
(defun pandoc-cite-format (link contents info)
  (if (-contains? org-ref-cite-types  (org-element-property :type link))
      (cond
       ;; link with description
       ((org-element-property :contents-begin link)
	(let* ((contents (buffer-substring
			  (org-element-property :contents-begin link)
			  (org-element-property :contents-end link)))
	       (split (split-string contents "::"))
	       (pre-text (nth 0 split))
	       (post-text (nth 1 split)))
	  (concat
	   "[@" (org-element-property :path link)
	   (when pre-text (concat ", " pre-text))
	   (when post-text (concat ", " post-text))
	   "]"
	   )
	  ))
       ;; plain citations
       (t
	(concat "["
	      (mapconcat (lambda (key) (concat "@" key))
			 (split-string (org-element-property :path link) ",")
			 "; ")
	      "]")))
    ;; not a cite link. just return the original link
    (org-org-identity link contents info)))

(org-export-define-derived-backend 'pandoc-org 'org
  :translate-alist '((link . pandoc-cite-format)))

(find-file (org-export-to-file 'pandoc-org "org-to-org.org"))
#+END_SRC

#+RESULTS:
: #<buffer org-to-org.org>
