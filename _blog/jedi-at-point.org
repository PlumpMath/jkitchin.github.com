* Example 1 - numpy

What I want here is with cursor on array to get a pydoc-able path to numpy.array

#+BEGIN_SRC python
import jedi

source = '''import numpy as np

a = np.array([5])'''

s = jedi.Script(source, 3, 7)
gd = s.goto_definitions()

g = gd[0]

# this is the module we want the full path to.
module_name = g.name
module_mname = g.module_name
module_full_name = g.full_name

print('module name: ', module_name)
print('module mname: ', module_mname)
print(g.full_name)
#+END_SRC

#+RESULTS:
: module name:  array
: module mname:  numpy.core.multiarray
: numpy.core.multiarray.array

Ok, I guess that is actually ok.

* Example 2

Here I need to get ase.atoms.Atoms

#+BEGIN_SRC python
import jedi

source = '''from ase import Atom, Atoms

a = Atoms([])'''

s = jedi.Script(source, 3)
gd = s.goto_definitions()
g = gd[0]

# this is the module we want the full path to.
module_name = g.name
module_mname = g.module_name
module_full_name = g.full_name

print('module name: ', module_name)
print('module mname: ', module_mname)
print('fullname: ', module_full_name)
script_modules = g._evaluator.modules

# We have to iterate through all of these. It seems that the names are in a few of these places. The best logic I have so far is to take the shortest smod. In this case, "Atoms" is a name in the ase and ase.atoms dictionaries.

for smod in script_modules:
    # I am not sure what '' is, but it is definitely not what I want.
    if smod == '': continue
    print(':mod:`{}`\n'.format(smod))


print('{0}.{1}'.format(smod, g.full_name))
#+END_SRC

#+RESULTS:
: module name:  Atoms
: module mname:  atoms
: fullname:  atoms.Atoms
: :mod:`ase`
:
: :mod:`ase.atoms`
:
: ase.atoms.atoms.Atoms


#+BEGIN_SRC python
from ase import Atom, Atoms

a = Atoms()

#+END_SRC
