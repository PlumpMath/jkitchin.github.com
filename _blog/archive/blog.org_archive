#    -*- mode: org -*-


Archived entries from file c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org


* jorg-bib features
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-06-24 Tue 21:35
  :ARCHIVE_FILE: ~/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

1. Integration with reftex. You type C-c ] and select keys from reftex and insert a cite link. If you type it again on a citation, the new entries are appended to the end.

2. Clickable cite links. If you have a citation link like cite:key1,key2,key3 you can click on key1 and open the bibliography file to key1, and you can click on key2 and have it open at key 2. This link would export in latex as \cite{key1,key2,key3}. Other cite formats, e.g. citep, citep*, etc... are defined too, but are relatively untested.

3. citation tooltips. If clicking is too disruptive, you can run a command and get a tooltip of the citation under point.

4. clickable label links. clicking checks the buffer for another label by the same name.

5. Clickable ref links. Clicking on the ref:label takes you to the label, and provides C-c & to get back to that point.

6. A bibliographystyle and bibliography link. The bibliography link opens the bibtex file that was clicked on.

7. Code to make a clickable list of figures and tables.

8. Code to extract the bibtex entries cited in an org-file to a text block at the end of the org-file

9. variables to point to a notes file and pdf directory, and functions to jump to your notes and the pdf file from a bibtex entry.

10. a function to build a complete pdf bibliography from your bibtex file. This is handy for checking the entries are spelled correctly, etc...

11. A little function and python script to upload a bibtex entry to citeulike.

[[cite:bernard-1991-ac]]

bibliography:../../bibliography/references.bib


* Bug report 2 for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 10:44
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

Here is a named table
#+tblname: tbl-data
| x | y |
|---+---|
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Here is a named src-block with a defined var
#+name: print-table
#+BEGIN_SRC python :var data=tbl-data :results value
return data
#+END_SRC


Now, we illustrate that the src-block does have :parameters.
#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
  (re-search-backward "#\\+name: print-table")
  (buffer-substring
   (org-element-property :begin (org-element-at-point))
   (org-element-property :end (org-element-at-point))))
#+END_SRC

#+RESULTS: get-properties
: #+name: print-table
: #+BEGIN_SRC python :var data=tbl-data :results value
: return data
: #+END_SRC
:
:

In the export machinery, though it appears the src-block is not the same.

#+BEGIN_SRC emacs-lisp :results output :exports none
(defun my-src-block (src-block contents info)

  (princ (buffer-substring
	  (org-element-property :begin src-block)
	  (org-element-property :end src-block)))

    (org-export-format-code-default src-block info))

(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((src-block . my-src-block)))

(org-export-to-file 'my-html "custom-src-table-export.html")
#+END_SRC
#+RESULTS:
#+begin_example
#+name: print-table
#+BEGIN_SRC python
return data
#+END_SRC


#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
  (re-search-backward "#\\+name: print-table")
  (buffer-substring
   (org-element-property :begin (org-element-at-point))
   (org-element-property :end (org-element-at-point))))
#+END_SRC

#+end_example

The parameters seem to be gone.

* Bug report for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 10:44
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

Here is a named table
#+tblname: tbl-data
| x | y |
|---+---|
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Here is a named src-block with a defined var
#+name: print-table
#+BEGIN_SRC python :var data=tbl-data :results value
return data
#+END_SRC




#+RESULTS: print-table
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Now, we illustrate that the src-block does have :parameters.
#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
(re-search-backward "#\\+name: print-table")
(org-element-property :parameters (org-element-at-point)))
#+END_SRC

#+RESULTS: get-properties
: :var data=tbl-data :results value

In the export machinery, though it appears the src-block does not.


#+BEGIN_SRC emacs-lisp :results output
(defun my-src-block (src-block contents info)

  (princ (concat
	  (format "[language: %s]\n" (org-element-property :language src-block))
	  (format "name: %s\n" (org-element-property :name src-block))
	  (format "parameters: %s\n\n" (org-element-property :parameters src-block))))
    (org-export-format-code-default src-block info))

(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((src-block . my-src-block)))

(org-export-to-file 'my-html "custom-src-table-export.html")
#+END_SRC
#+RESULTS:
#+begin_example
[language: python]
name: print-table
parameters: nil

[language: emacs-lisp]
name: get-properties
parameters: nil

[language: emacs-lisp]
name: nil
parameters: nil

#+end_example

The parameters are nil in each case, even though we know the print-table block should have parameters. I think that is a bug.

* Odd behavior in python src-blocks in org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 12:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

This block should raise an error (and does) because k is not defined.
#+BEGIN_SRC python
def f(y, x):
    return k * y

print(f(1, 0))
#+END_SRC

#+RESULTS:

It raises this error.

#+BEGIN_EXAMPLE
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
  File "<stdin>", line 2, in f
NameError: global name 'k' is not defined
#+END_EXAMPLE

However, this code block actually executes, and gives the wrong answer! If I open the source block in Python mode, it does not run without error.

#+BEGIN_SRC python :results output
from scipy.integrate import odeint

def f(y, x):
    return k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.]
:  [ 1.]]

Here is the correct answer.

#+BEGIN_SRC python :results output
from scipy.integrate import odeint

k = -1
def f(y, x):
    return k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.        ]
:  [ 0.36787947]]

#+BEGIN_SRC python :results output
def f(x):
    return x == (not x)

print f(None)
print not None
#+END_SRC

#+RESULTS:
: False
: True

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python -m pycse.sandbox")
#+END_SRC
#+BEGIN_SRC python
from scipy.integrate import odeint

k = -1

def f(y, x):
    return -k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.        ]
:  [ 2.71828193]]
:
:







* ARCHIVE bug in setting properties?	 :archive:
 :PROPERTIES:
 :categories: education
 :ANSWER:   4
 :ARCHIVE_TIME: 2014-11-30 Sun 17:15
 :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
 :ARCHIVE_CATEGORY: blog
 :END:

#+BEGIN_SRC emacs-lisp
(format "** %s
  :PROPERTIES:
  :ID: %s
:categories: test
  :END:
%s" "A headline" "some id" "some body text")
#+END_SRC
#+RESULTS:
: ** A headline
:   :PROPERTIES:
:   :ID: some id
:   :END:
: some body text



* Debugging emacs lockup
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-23 Tue 16:05
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
#+BEGIN_SRC emacs-lisp
emacs-version
#+END_SRC

#+RESULTS:
: 24.4.50.1

#+BEGIN_SRC emacs-lisp
org-version
#+END_SRC

#+RESULTS:
: 8.2.7c


#+BEGIN_SRC emacs-lisp
(setq quiz5-key '(("2F5BCA86-1933-432F-9A8A-891339C05DF7" . "b")
		  ("784CF3B1-9158-410E-B97A-1E992221A4E6" . "d")
		  ("2301DBD3-BCDF-48AE-99EA-34F756CA1F27" . "d")
		  ("E741F064-A1A1-4A00-A581-7EF066DAE9A0" . "b")
		  ("51E3786D-D4E4-4156-A5ED-8C56C94022E8" . "d")
		  ("D54A69A5-7E1C-41EE-9698-3159E49784F7" . "c")
		  ("F19C2134-04D1-432D-81CC-16C54FE26844" . "e")
		  ("D2A37110-AA63-4691-B9AE-0E49756C798C" . "d")
		  ("EBA077D5-1853-41F1-AB8D-CC9C7D535608" . "d")
		  ("692514D4-A51C-43A0-AC2C-D60FED57E507" . "a")))

(defun grade-quiz5 ()
  "grade quiz 5, in an org-file."
  (interactive)
  (save-buffer)
  (let ((MAX)
	(points)
	(answer))

    (setq MAX (length quiz5-key)
	  points 0)

    (dolist (tup quiz5-key)
      (save-excursion
	(org-open-link-from-string
	 (format "id:%s" (car tup)))
	(setq answer (org-entry-get (point) "ANSWER"))
	(if (string= answer (cdr tup))
	    (progn
	      (setq points (+ 1 points))
	      (goto-char (point-max))
	      (insert (format "# id:%s: %s correct\n" (car tup) answer)))
	  (goto-char (point-max))
	  (insert (format "# id:%s: %s wrong (%s is correct)\n"
			  (car tup)
			  answer
			  (cdr tup)))
	  )))
      ;(gb-set-filetag "GRADE" (/ (float points) (float MAX)))
      ))

(grade-quiz5)
#+END_SRC
#+RESULTS:


I am not sure, but I suspect org-open-link is related to the problem. here I rewrite this using org-map-entries.

#+BEGIN_SRC emacs-lisp
(setq quiz5-key '(("2F5BCA86-1933-432F-9A8A-891339C05DF7" . "b")
		  ("784CF3B1-9158-410E-B97A-1E992221A4E6" . "d")
		  ("2301DBD3-BCDF-48AE-99EA-34F756CA1F27" . "d")
		  ("E741F064-A1A1-4A00-A581-7EF066DAE9A0" . "b")
		  ("51E3786D-D4E4-4156-A5ED-8C56C94022E8" . "d")
		  ("D54A69A5-7E1C-41EE-9698-3159E49784F7" . "c")
		  ("F19C2134-04D1-432D-81CC-16C54FE26844" . "e")
		  ("D2A37110-AA63-4691-B9AE-0E49756C798C" . "d")
		  ("EBA077D5-1853-41F1-AB8D-CC9C7D535608" . "d")
		  ("692514D4-A51C-43A0-AC2C-D60FED57E507" . "a")))

(defun grade-quiz5 ()
  "grade quiz 5, in an org-file."
  (interactive)
  (save-buffer)
  (let ((MAX)
	(points)
	(answer))

    (setq MAX (length quiz5-key)
	  points 0)

    (org-map-entries
     (lambda ()
       (setq answer (org-entry-get (point) "ANSWER")
             id (org-entry-get (point) "ID"))
       (when (and id answer)
	 (save-excursion
	   (if (string= answer (cdr (assoc id quiz5-key)))
	       (progn
		 (setq points (+ 1 points))
		 (goto-char (point-max))
		 (insert (format "%s# id:%s: %s correct\n"
				 (if (bolp) "" "\n")
				 id answer)))
	     ;; wrong answer
	     (goto-char (point-max))
	     (insert (format "%s# id:%s: %s wrong (%s is correct)\n"
			     (if (bolp) "" "\n")
			     id
			     answer
			     (cdr (assoc id quiz5-key)))))))))

    (gb-set-filetag "GRADE" (/ (float points) (float MAX)))))


(grade-quiz5)
#+END_SRC

#+RESULTS:

** questions
*** ID:1525
  :PROPERTIES:
  :ID:       2F5BCA86-1933-432F-9A8A-891339C05DF7
  :ANSWER:   b3
  :END:

*** ID:1524
  :PROPERTIES:
  :ID:       784CF3B1-9158-410E-B97A-1E992221A4E6
  :ANSWER:   d
  :END:

*** ID:1528
  :PROPERTIES:
  :ID:       2301DBD3-BCDF-48AE-99EA-34F756CA1F27
  :ANSWER:   d
  :END:

*** ID:1530
  :PROPERTIES:
  :ID:       E741F064-A1A1-4A00-A581-7EF066DAE9A0
  :ANSWER:   b
  :END:

*** ID:1532
  :PROPERTIES:
  :ID:       51E3786D-D4E4-4156-A5ED-8C56C94022E8
  :ANSWER:   d
  :END:

*** ID:1526
  :PROPERTIES:
  :ID:       D54A69A5-7E1C-41EE-9698-3159E49784F7
  :ANSWER:   c
  :END:

*** ID:1527
  :PROPERTIES:
  :ID:       F19C2134-04D1-432D-81CC-16C54FE26844
  :ANSWER:   e
  :END:

*** 183.
  :PROPERTIES:
  :ID:       D2A37110-AA63-4691-B9AE-0E49756C798C
  :ANSWER:   d
  :END:

*** 185.
  :PROPERTIES:
  :ID:       EBA077D5-1853-41F1-AB8D-CC9C7D535608
  :ANSWER:   d
  :END:

*** 176.
  :PROPERTIES:
  :ANSWER:   a
  :ID:       692514D4-A51C-43A0-AC2C-D60FED57E507
  :END:


** grade
# id:2F5BCA86-1933-432F-9A8A-891339C05DF7: b3 wrong (b is correct)
# id:784CF3B1-9158-410E-B97A-1E992221A4E6: d correct
# id:2301DBD3-BCDF-48AE-99EA-34F756CA1F27: d correct
# id:E741F064-A1A1-4A00-A581-7EF066DAE9A0: b correct
# id:51E3786D-D4E4-4156-A5ED-8C56C94022E8: d correct
# id:D54A69A5-7E1C-41EE-9698-3159E49784F7: c correct
# id:F19C2134-04D1-432D-81CC-16C54FE26844: e correct
# id:D2A37110-AA63-4691-B9AE-0E49756C798C: d correct
# id:EBA077D5-1853-41F1-AB8D-CC9C7D535608: d correct
# id:692514D4-A51C-43A0-AC2C-D60FED57E507: a correct
#+GRADE: 0.9

* numpy float64 comparisons
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 10:58
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC python
from __future__ import division
import numpy as np

class Unit(np.ndarray):
    __array_priority__ = 2
    def __new__(cls, input_array, exponents=None, label=None):
        obj = np.asarray(input_array).view(cls)
        obj.exponents = np.array(exponents)
        obj.label = label

        return obj

    def __eq__(self, other):
        'implement a==b for units'
        if not isinstance(other, Unit):
            raise Exception(['you should not compare objects'
                             ' with different units.'
                             ' {0} == {1}'.format(self, other)])

        return (np.all(self.exponents == other.exponents)
                and np.all(np.array(self) == np.array(other)))



# these all raise exceptions
print 2 == Unit(2, [1, 0, 0, 0, 0, 0, 0])
print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == 2

print np.float(2) == Unit(2, [1, 0, 0, 0, 0, 0, 0])
print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == np.float(2)

print np.float32(2) == Unit(2, [1, 0, 0, 0, 0, 0, 0])
print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == np.float32(2)

print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == np.float64(2)


# this should raise an exception, but it does not
print np.float64(2) == Unit(2, [1, 0, 0, 0, 0, 0, 0])



#+END_SRC

#+RESULTS:

* Making an index and glossary in org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:01
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
#+LATEX_CLASS: cmu-article
#+LATEX_HEADER: \usepackage{makeidx}
#+LATEX_HEADER: \usepackage{glossaries}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \makeindex
#+LATEX_HEADER: \makeglossaries



index:keyword

some text

index:index!link

more text
index:hello
index:hello!Peter
[[index:hello!Sam@\textsl{Sam}]]
[[index:Lin@\textbf{Lin}]]
[[index:Joe|textit]]
[[index:Lin@\textbf{Lin}]]
[[index:Peter|see {hello}]]
[[index:Jen|seealso{Jenny}]]

index:encodings!input!cp850


** A glossary



[[newglossaryentry:computer][name=computer, description=is a programmable machine that receives input, stores and manipulates data, and provides output in a useful format.]]


\newacronym[longplural=Frames per Second]{fpsLabel}{FPS}{Frame per Second}

See  gls:computer


\printglossary[title=List of Terms,toctitle=Terms and abbreviations]

** index

printindex:nopotions

* bug report
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
[[https://mail.google.com/mail/u/0/#inbox/1498a1077371921f][Small bug in org-ref - johnrkitchin@gmail.com - Gmail]]

Dear Dr. Kitchin,

I found a small problem in org-ref in combination with org-mode #+label
function.


1.)
#+CAPTION: Test caption
#+LABEL: fig:test_label3
#+ATTR_LATEX: :width 0.7\textwidth
[[file:test_figure.pdf]]

This way figure ref:fig:test_label3 will be referenced correctly in LaTeX
output (\ref), but not found by org-ref-complete-link function, meaning
there is no auto-completion.


#+BEGIN_SRC emacs-lisp
(org-ref-get-labels)
#+END_SRC

#+RESULTS:
|   | fig:test_label | fig | \s- | test1 | test | code-example | \\ | code:ref-snippet | load-snippets | fig:test_label3 | fig:cos | fig:a | fig:b | fig12 | tbldata | my-table | tbl-data | tbl-1 | tbl-2 | python-table | first-table | tbl-with-caption | cos-data | users | gradebook | beginner |

2.)
#+CAPTION: Test caption
#+LABEL: fig:test_label    ---- no space between label:fig!!
#+ATTR_LATEX: :width 0.7\textwidth
[[file:test_figure.pdf]]

This way figure ref:fig:test_label will NOT be referenced in LaTeX
output, but will be found by org-ref-complete-link function, because the
missing empty space leads to misinterpretation of #+label: on export.

Inserting a space behind label in the org-ref-get-labels function solves
the problem for me.

#+begin_src emacs-lisp
(defun org-ref-get-labels ()
  "returns a list of labels in the buffer that you can make a ref link
to. this is used to auto-complete ref links."
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (let ((matches '()))
        (while (re-search-forward "label: \\([a-zA-z0-9:-]*\\)" (point-max) t)
 ; inserted space behind label:
          (add-to-list 'matches (match-string-no-properties 1) t))
        (append matches (org-ref-get-latex-labels) (org-ref-get-tblnames)
(org-ref-get-custom-ids))))))
#+end_src


#+begin_src emacs-lisp
(defun org-ref-complete-link (&optional arg)
  "Completion function for ref links"
  (let ((label))
    (setq label (completing-read "label: " (org-ref-get-labels)))
    (format "ref:%s" label)))
#+end_src

I only know the org-ref reference function - or is there a proper
org-ref-create label function.

Greetings

* New links for researcherID and orcid
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
These are pretty trivial links, but they still might be useful if these get more common.

#+BEGIN_SRC emacs-lisp :results silent
(org-add-link-type
 "orcid"
 (lambda (link-string)
   (browse-url
    (format "http://orcid.org/%s" link-string))))

(org-add-link-type
 "ResearcherID"
 (lambda (link-string)
   (browse-url
    (format "http://www.researcherid.com/rid/%s" link-string))))
#+END_SRC

ResearcherID:A-2363-2010

orcid:0000-0003-2625-9232

* Extracting a DOI from a pdf
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:04
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(with-temp-buffer
#+END_SRC

10.1002/(SICI)1522-2594(199911)42:5<952::AID-MRM16>3.0.CO;2-S

<</URI(http://dx.doi.org/10.1080/095008396180911)/S/URI>>

"\\(10[.][0-9]\\{4,\\}\\(?:[.][0-9]+\\)*/[0-9a-z]+\\)"

b(10[.][0-9]{4,}(?:[.][0-9]+)*/(?:(?!["&\'])\S)+)\b

(?:doi[\s.:]{0,2})?(10[.][^/]+/[^\s"]+).

This sort of works
"\\(10[.][0-9]\\{4,\\}\\(?:[.][0-9]+\\)*/\\s(?[^[:space:]]*\\)\\s)?\\b"

I am not sure how to enforce balanced parens, or to close the paren in the second example.

http://www.emacswiki.org/RegularExpression

This is too difficult to solve for now.

* get scaled positions of an atom in ase
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:04
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC python
from ase import Atom, Atoms

atoms = Atoms([Atom('H', [1, 1, 1]), Atom('O', [2, 2, 2])], cell=(3, 3, 3))
atoms[0].a = 0.5
atoms[0].b = 0.5
atoms[0].c = 0.5

print atoms[0].a
print atoms[0].x
#print atoms[1].scaled_position
#+END_SRC

#+RESULTS:
: 0.5
: 1.5

* Making your emacs buffer flash
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:05
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(let ((bg (face-attribute 'default :background)))
  (dotimes (i 1)
    (set-face-attribute 'default nil :background "lightgreen")
    (sleep-for 0.1)
    (set-face-attribute 'default nil :background bg)
    (sleep-for 0.1)))
#+END_SRC

#+RESULTS:

(setq visible-bell t)

(message "brrp")
(setq ring-bell-function nil)
(ding)

* TODO VASP in emacs
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:08
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :ARCHIVE_TODO: TODO
  :END:
#+BEGIN_EXAMPLE
PREC = Normal              #  precision normal
ENCUT = 300                #  cutoff used throughout all calculations
LREAL = .FALSE.            #  real space projection yes / no
ISMEAR = 0                 #  method to determine partial occupancies
#+END_EXAMPLE

[[./images/vanilla-incar.png]]

Now with vasp-mode:

[[./images/vasp-mode-incar.png]]

* jeldoc - a function to generate documentation from emacs-lisp files
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-03-17 Tue 21:33
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:


#+BEGIN_SRC emacs-lisp :results output
(defun jeldoc (library)
  "Generate an org buffer containing the requires, variables and functions defined in LIBRARY.
LIBRARY must be loaded before running this function."

  (interactive
   (list (completing-read "Library to generate org-doc for: "
			  (-flatten
			   (delq nil
				 (mapcar
				  (lambda (x)
				    (delq nil
					  (mapcar
					   (lambda (y)
					     (when (and (consp y)
							(eq (car y) 'provide))
					       (cdr y)))
					   x)))
				  load-history))))))

  (let* ((lib-file (locate-library library))
	 ;; these are the things defined in the library
	 (elements (cdr
		    (assoc
		     (locate-library library)
		     load-history)))
	 ;; variables
	 (vars (-filter 'symbolp elements))
	 ;; things the library requires
	 (requires
	  (mapcar 'cdr
		  (-filter (lambda (x)
			     (and (consp x)
				  (eq 'require (car x))))
			   elements)))
	 ;; functions defined in the library
	 (funcs (mapcar
		 'cdr
		 (-filter (lambda (x)
			    (and (consp x)
				 (eq 'defun (car x))))
			  elements))))

    (switch-to-buffer "*org-doc*")
    (erase-buffer)
    (insert (format "#+TITLE: Documentation for %s
,#+OPTIONS: toc:nil
\\maketitle
\\tableofcontents

%s

" library  (cond
	    ;; regular lisp file
	    ((string= "el" (file-name-extension lib-file))
	     (format "Source code: [[file:%s][%s]]" lib-file library))
	    ;; compiled file. these are not easy to read so we try plain el file
	    ((and (string= "elc" (file-name-extension lib-file))
		  (file-exists-p
		   (concat (file-name-sans-extension lib-file) ".el")))
	     (format "Source code: [[file:%s][%s]]"
		     (concat (file-name-sans-extension lib-file) ".el")
		     library))
	    ;; catch anything we cannot figure out
	    (t
	     (format "Source code: file:%s" lib-file)))))


    (insert "* Requires\n\n")
    ;; insert link to generate a jeldoc buffer for each require
    (dolist (req requires)
      (insert (format "- [[elisp:(jeldoc \"%s\")][%s]]\n" req req)))

    (insert "* Custom Variables\n\n")
    (dolist (var (sort (-filter 'custom-variable-p vars) 'string-lessp))
      (insert (format "** %s
Documentation: %s

Value:
%S\n\n"
		      var
		      (documentation-property var 'variable-documentation)
		      (symbol-value var)
		      )))

    (insert "* Regular Variables\n\n")
    (dolist (var (sort (-filter (lambda (x) (not (custom-variable-p x)))
				vars)
		       'string-lessp))
      (insert (format "** %s
Documentation: %s

Value:
%S\n\n"
		      var
		      (documentation-property var 'variable-documentation)
		      (symbol-value var)
		      )))

    (insert "* Interactive Functions\n\n")

    (dolist (func (sort (-filter 'commandp funcs) 'string-lessp))
      (insert (format "** %s %s
Documentation: %s

Code:
,#+BEGIN_SRC emacs-lisp
%s
,#+END_SRC

"
		      func
		      (or (help-function-arglist func) "")
		      (documentation func)
		      ;; code defining the function
		      (save-window-excursion
			;; we do not have c-source, so check if func
			;; is defined in a c file here.
			(if
			    (string= "c"
				     (file-name-extension
				      (find-lisp-object-file-name
				       func
				       (symbol-function func))))
			    (symbol-function func)
			  ;;else
			  (condition-case nil
			      (let ((bp (find-function-noselect func t)))
				(set-buffer (car bp))
				(goto-char (cdr bp))
				(when (sexp-at-point)
				  (mark-sexp)
				  (buffer-substring (point) (mark))))
			    (error func))
			  )))))

    (insert "* Non-interactive Functions\n\n")

    (dolist (func (sort (-filter (lambda (x) (not (commandp x)))
				 funcs)
			'string-lessp))
      (insert (format "** %s %s
Documentation: %s

Code:
,#+BEGIN_SRC emacs-lisp
%s
,#+END_SRC

"
		      func
		      (or (help-function-arglist func) "")
		      (documentation func)
		      ;; code defining the function
		      (save-window-excursion
			;; we do not have c-source, so check if func
			;; is defined in a c file here.
			(if
			    (string= "c"
				     (file-name-extension
				      (find-lisp-object-file-name
				       func
				       (symbol-function func))))
			    (symbol-function func)
			  ;;else
			  (condition-case nil
			      (let ((bp (find-function-noselect func t)))
				(set-buffer (car bp))
				(goto-char (cdr bp))
				(when (sexp-at-point)
				  (mark-sexp)
				  (buffer-substring (point) (mark))))
			    (error func))
			    )))))
    (org-mode)

    ;; replace `' with links to describe function or variable, unless
    ;; they are in a code block, then leave them alone.
    (goto-char (point-min))
    (while (re-search-forward "`\\([^' ]*\\)'" nil t)
      (let ((result (match-string 1))
	    (bg (match-beginning 1))
	    (end (match-end 1)))
	;; checking for code block changes match data, so
	;; we save it here.
	(unless (save-match-data
		  (eq 'src-block (car (org-element-at-point))))
	  (cond
	   ;; known function
	   ((fboundp (intern result))
	    (setf (buffer-substring bg end)
		  (format "[[elisp:(describe-function '%s)][%s]]"
			  result result)))
	   ;; known variable
	   ((boundp (intern result))
	    (setf (buffer-substring bg end)
		  (format "[[elisp:(describe-variable '%s)][%s]]"
			  result result)))
	   ;; unknown quoted thing, just return it back
	   (t
	    result)))))
    ;; finally jump to Requires section
    (org-open-link-from-string "[[*Requires]]")))
#+END_SRC

* Indexing an old email archive
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-08 Wed 09:55
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

I get 8-10 GB of email every year. A lot I delete, but somewhere between 2-4GB stays each year. To reduce the amount of email in my Gmail account, I have been archiving emails older than 2 years old into a folder, and I now have a little over 8 GB of mail from 2011 through 2013. Today, we look at indexing these emails with swish-e so I can search them.

#+BEGIN_SRC sh
du -hs ~/Maildir-archive
#+END_SRC
#+RESULTS:
: 8.2G	/Users/jkitchin/Maildir-archive

#+BEGIN_SRC python
import email
from xml.sax.saxutils import escape, quoteattr

with open('../../Maildir-archive/2013/cur/1420920834_0.31077.vpn-128-237-146-134.library.vpn.cmu.edu,U=12121,FMD5=8038da89e49ac5eabb489cfc6cea9fc1:2,S') as f:
    msg = email.message_from_file(f)
    print dir(msg)
    print msg.keys()
    # print msg.as_string()   # for swishdefault
    print msg.is_multipart()
    print msg.get_payload()
    print msg.get_filename()

    if msg.is_multipart():
        print 'multipart'
        for part in msg.walk():
            ctype = part.get_content_type()
            print ctype, part.get_filename()
#            if ctype in ['image/jpeg', 'image/png']:
#                open(part.get_filename(), 'wb').write(part.get_payload(decode=True))
#+END_SRC
#+RESULTS:
#+begin_example
['__contains__', '__delitem__', '__doc__', '__getitem__', '__init__', '__len__', '__module__', '__setitem__', '__str__', '_charset', '_default_type', '_get_params_preserve', '_headers', '_payload', '_unixfrom', 'add_header', 'as_string', 'attach', 'defects', 'del_param', 'epilogue', 'get', 'get_all', 'get_boundary', 'get_charset', 'get_charsets', 'get_content_charset', 'get_content_maintype', 'get_content_subtype', 'get_content_type', 'get_default_type', 'get_filename', 'get_param', 'get_params', 'get_payload', 'get_unixfrom', 'has_key', 'is_multipart', 'items', 'keys', 'preamble', 'replace_header', 'set_boundary', 'set_charset', 'set_default_type', 'set_param', 'set_payload', 'set_type', 'set_unixfrom', 'values', 'walk']
['MIME-Version', 'Sender', 'Received', 'Date', 'Delivered-To', 'X-Google-Sender-Auth', 'Message-ID', 'Subject', 'From', 'To', 'Content-Type']
True
[<email.message.Message instance at 0x102136a70>, <email.message.Message instance at 0x102136c20>]
None
multipart
multipart/mixed None
multipart/alternative None
text/plain None
text/html None
application/zip tpd-scaling.zip
#+end_example

#+BEGIN_SRC python
def printtag(name,closing=False):
    if closing:
        return '</{}>'.format(name)
    else:
        return '<{}>'.format(name)


def tag(name, content):
    return '{0}{1}{2}'.format(printtag(name),
                             content,
                             printtag(name, closing=True))

import email

with open('../../Maildir-archive/2013/cur/1420920833_1.31077.vpn-128-237-146-134.library.vpn.cmu.edu,U=12137,FMD5=8038da89e49ac5eabb489cfc6cea9fc1:2,S') as f:
    msg = email.message_from_file(f)
    headers = [tag(key.lower(), msg[key]) for key in msg.keys()]
    swishdefault = tag('swishdefault', msg.as_string())
    print keys
#+END_SRC
#+RESULTS:
: ['<delivered-to>johnrkitchin@gmail.com</delivered-to>', '<received>by 10.114.98.198 with SMTP id ek6csp723877ldb;\n        Mon, 31 Dec 2012 21:00:34 -0800 (PST)</received>', '<x-received>by 10.58.214.231 with SMTP id od7mr68944632vec.44.1357016433643;\n        Mon, 31 Dec 2012 21:00:33 -0800 (PST)</x-received>', '<return-path><jkitchin@cmu.edu></return-path>', '<received>by 10.114.98.198 with SMTP id ek6csp723877ldb;\n        Mon, 31 Dec 2012 21:00:34 -0800 (PST)</received>', '<received-spf>pass (google.com: best guess record for domain of jkitchin@cmu.edu designates 128.2.10.212 as permitted sender) client-ip=128.2.10.212;</received-spf>', '<authentication-results>mx.google.com; spf=pass (google.com: best guess record for domain of jkitchin@cmu.edu designates 128.2.10.212 as permitted sender) smtp.mail=jkitchin@cmu.edu</authentication-results>', '<received>by 10.114.98.198 with SMTP id ek6csp723877ldb;\n        Mon, 31 Dec 2012 21:00:34 -0800 (PST)</received>', '<date>Tue, 1 Jan 2013 00:00:32 -0500</date>', '<message-id><201301010500.r0150WwD005971@relay.andrew.cmu.edu></message-id>', '<content-type>multipart/alternative;\n boundary="===============6718222350745897845=="</content-type>', '<mime-version>1.0</mime-version>', '<to>jkitchin@cmu.edu</to>', '<from>jkitchin@cmu.edu</from>', '<subject>Torque report 2012-12-01 to 2013-01-01</subject>', '<x-scanned-by>MIMEDefang 2.60 on 128.2.10.212</x-scanned-by>']

* Clickable twitter improvements
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-08 Wed 11:47
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

John Kitchin @johnkitchin @mess  @johnkitchin @johnkitchin  @SannaLab @WE3Lab

@prtk_m

This often works, but not always right away.

#+BEGIN_SRC emacs-lisp
(get-most-recent-tweet "prtk_m")
#+END_SRC

#+RESULTS:
: 07/01/15 22:30 PM - The story behind @AcademicsSay http://t.co/eidyj7Zb3M <-- makes it even better!



[[elisp:(highlight-twitter-handles)]]

[[elisp:unhighlight-twitter-handles]]

* Load emacs with no output
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-09 Thu 08:10
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
I would like to figure this out so I can load my initialization files for indexing. right now they put out a ton of output that I think will mess up the indexer.

This did not work.
#+BEGIN_SRC emacs-lisp :tangle emacs-batch.el :tangle-mode (identity #o755)
:;exec emacs -batch -l $0 "$@"

(defun nomessage (arg &rest args) nil)

(advice-add 'message :around #'nomessage)

(load-file "~/Dropbox/kitchingroup/jmax/init.el")
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle emacs-batch.el :tangle-mode (identity #o755)
:;exec emacs -batch -l $0 "$@"
(defun message (arg &rest args) nil)

(with-output-to-string
  (load-file "~/Dropbox/kitchingroup/jmax/init.el"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun nomessage (arg &rest args) nil)

(advice-add 'message :around #'nomessage)
(advice-remove 'message #'nomessage)
(message "test")

;(org-add-link-type "test" nil nil)
#+END_SRC

#+RESULTS:
: test

* helm-brew
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-09 Thu 19:10
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

These are installed brew packages
#+BEGIN_SRC emacs-lisp
(shell-command-to-string "brew list")
#+END_SRC

brew cat

#+BEGIN_SRC sh
brew --cellar
#+END_SRC

#+RESULTS:
: /usr/local/Cellar

#+BEGIN_SRC sh
brew --prefix
#+END_SRC
#+RESULTS:
: /usr/local

#+BEGIN_SRC sh
brew --cache
#+END_SRC

#+RESULTS:
: /Library/Caches/Homebrew


#+BEGIN_SRC sh
brew --repository
#+END_SRC

#+RESULTS:
: /usr/local

#+BEGIN_SRC sh
brew search emacs
#+END_SRC

#+RESULTS:
: emacs
: emacs-clang-complete-async
: Caskroom/cask/emacs

#+BEGIN_SRC sh
ls $(brew --prefix)/Library/Formula
#+END_SRC


#+BEGIN_SRC emacs-lisp
(let (formula cmd desc)

  (loop for formularb in (split-string
			  (shell-command-to-string
			   "ls $(brew --prefix)/Library/Formula") "\n")

	do
	(setq formula (replace-regexp-in-string "\\.rb" "" formularb))
	(setq cmd (format "grep desc %s" (expand-file-name
					  formularb
					  (s-trim  (shell-command-to-string
						    "brew --prefix")))))

	(setq desc (shell-command-to-string cmd))
         collect (list formula desc)))
#+END_SRC
#+RESULTS:
| a2ps.rb | a52dec.rb | aacgain.rb | aalib.rb | aamath.rb | aap.rb | aardvark_shell_utils.rb | abcde.rb | abcl.rb | abcm2ps.rb | abcmidi.rb | abduco.rb | abi-compliance-checker.rb | abnfgen.rb | abook.rb | ace.rb | aces_container.rb | ack.rb | acme.rb | acpica.rb | activemq-cpp.rb | activemq.rb | admesh.rb | adns.rb | adplug.rb | advancecomp.rb | aescrypt-packetizer.rb | aescrypt.rb | aeskeyfind.rb | aespipe.rb | afflib.rb | afio.rb | afl-fuzz.rb | afsctool.rb | aften.rb | agda.rb | aget.rb | aggregate.rb | aha.rb | ahcpd.rb | aiccu.rb | aircrack-ng.rb | akka.rb | alac.rb | aldo.rb | algernon.rb | algol68g.rb | align.rb | allegro.rb | alpine.rb | alure.rb | amap.rb | amtterm.rb | analog.rb | android-ndk.rb | android-platform-tools.rb | android-sdk.rb | ansible.rb | ansifilter.rb | ant-contrib.rb | ant.rb | antigen.rb | antiword.rb | antlr.rb | anttweakbar.rb | aoeui.rb | apache-drill.rb | apache-forrest.rb | apache-opennlp.rb | apache-spark.rb | apachetop.rb | ape.rb | apel.rb | apg.rb | apgdiff.rb | apib.rb | apktool.rb | apngasm.rb | apollo.rb | app-engine-java-sdk.rb | apparix.rb | appscale-tools.rb | apr-util.rb | apr.rb | apt-cacher-ng.rb | apt-dater.rb | aptly.rb | aqbanking.rb | arabica.rb | arangodb.rb | archey.rb | argp-standalone.rb | argtable.rb | argus-clients.rb | argus.rb | argyll-cms.rb | aria2.rb | arm.rb | arp-scan.rb | arp-sk.rb | arping.rb | arpoison.rb | arpon.rb | arss.rb | artifactory.rb | ascii.rb | asciidoc.rb | asciinema.rb | asciitex.rb | asm6.rb | asn1c.rb | aspcud.rb | aspell.rb | assimp.rb | astyle.rb | at-spi2-atk.rb | at-spi2-core.rb | atdtool.rb | aterm.rb | atf.rb | atk.rb | atkmm.rb | atomicparsley.rb | atool.rb | ats2-postiats.rb | aubio.rb | audiofile.rb | augeas.rb | auto-scaling.rb | autobench.rb | autoconf-archive.rb | autoconf.rb | autoenv.rb | autogen.rb | autojump.rb | automake.rb | automoc4.rb | automysqlbackup.rb | autopano-sift-c.rb | autopsy.rb | autossh.rb | autotrace.rb | avce00.rb | avian.rb | avidemux.rb | aview.rb | avra.rb | avrdude.rb | avro-c.rb | avro-cpp.rb | avro-tools.rb | aws-cfn-tools.rb | aws-cloudsearch.rb | aws-elasticache.rb | aws-elasticbeanstalk.rb | aws-sns-cli.rb | awscli.rb | axel.rb | b43-fwcutter.rb | babeld.rb | babl.rb | backupninja.rb | bacula-fd.rb | bagit.rb | balance.rb | bam.rb | bar.rb | baresip.rb | base64.rb | basex.rb | bash-completion.rb | bash-git-prompt.rb | bash.rb | bashdb.rb | bashish.rb | batik.rb | bats.rb | bazaar.rb | bbcolors.rb | bbe.rb | bbftp-client.rb | bchunk.rb | bcpp.rb | bcrypt.rb | bdw-gc.rb | beansdb.rb | beanstalk.rb | bear.rb | beecrypt.rb | berkeley-db.rb | berkeley-db4.rb | betty.rb | bfg.rb | bgpq3.rb | bgrep.rb | bib-tool.rb | bibclean.rb | bibtex2html.rb | bibtexconv.rb | bibutils.rb | bigdata.rb | bigloo.rb | bind.rb | binutils.rb | binwalk.rb | bip.rb | bison.rb | bitchx.rb | bitlbee.rb | bittwist.rb | blahtexml.rb | blazeblogger.rb | blink1.rb | blitz.rb | blitzwave.rb | blockhash.rb | bltool.rb | blucat.rb | blueutil.rb | bmake.rb | bmon.rb | bogofilter.rb | bokken.rb | bonnie++.rb | boost-bcp.rb | boost-build.rb | boost-python.rb | boost.rb | boot-clj.rb | boot2docker.rb | botan.rb | box2d.rb | boxes.rb | bpm-tools.rb | brag.rb | brew-gem.rb | brew-pip.rb | briss.rb | bro.rb | browser.rb | bsdconv.rb | bsdiff.rb | bsdmake.rb | bsdsfv.rb | bsponmpi.rb | btparse.rb | btpd.rb | buildapp.rb | bulk_extractor.rb | bullet.rb | bup.rb | burl.rb | burp.rb | bvi.rb | bwctl.rb | bwm-ng.rb | byacc.rb | byobu.rb | c-ares.rb | c-kermit.rb | cabal-install.rb | cabextract.rb | cabocha.rb | cadaver.rb | caddy.rb | cadubi.rb | cairo.rb | cairomm.rb | calabash.rb | calc.rb | calcurse.rb | camellia.rb | camlistore.rb | camlp4.rb | camlp5.rb | capnp.rb | capstone.rb | carthage.rb | cask.rb | casperjs.rb | cassandra.rb | cattle.rb | caudec.rb | cayley.rb | cbmbasic.rb | cc65.rb | ccache.rb | ccal.rb | ccat.rb | ccd2iso.rb | ccextractor.rb | cclive.rb | ccm.rb | cconv.rb | ccrypt.rb | cctools-headers.rb | cctools.rb | ccze.rb | cd-discid.rb | cdargs.rb | cdb.rb | cdecl.rb | cdimgtools.rb | cdk.rb | cdlabelgen.rb | cdparanoia.rb | cdpr.rb | cdrdao.rb | cdrtools.rb | center-im.rb | cereal.rb | ceylon.rb | cf.rb | cfengine.rb | cfitsio.rb | cflow.rb | cfv.rb | cgal.rb | cgdb.rb | cgrep.rb | cgvg.rb | chapel.rb | charm-tools.rb | chcase.rb | cheat.rb | check.rb | check_postgres.rb | checkbashisms.rb | checkstyle.rb | cherokee.rb | chgems.rb | chibi-scheme.rb | chicken.rb | chinadns-c.rb | chipmunk.rb | chisel.rb | chkrootkit.rb | chmlib.rb | chordii.rb | chromaprint.rb | chrome-cli.rb | chromedriver.rb | chruby-fish.rb | chruby.rb | chuck.rb | cidrmerge.rb | cifer.rb | cig.rb | cimg.rb | cityhash.rb | cjdns.rb | cksfv.rb | clamav.rb | clamz.rb | clang-format.rb | clang-omp.rb | clasp.rb | class-dump.rb | classads.rb | clay.rb | clean.rb | clens.rb | cless.rb | clhep.rb | clib.rb | cliclick.rb | clipper.rb | clipsafe.rb | clisp.rb | cln.rb | cloc.rb | clockywock.rb | clojurescript.rb | cloog.rb | closure-compiler.rb | closure-linter.rb | cloud-watch.rb | cloudbees-sdk.rb | clozure-cl.rb | clpbar.rb | clucene.rb | clutter-gst.rb | clutter-gtk.rb | clutter.rb | cmake.rb | cmatrix.rb | cmigemo.rb | cmocka.rb | cmockery.rb | cmockery2.rb | cmu-pocketsphinx.rb | cmu-sphinxbase.rb | cmuclmtk.rb | cmus.rb | cntlm.rb | coccinelle.rb | cocot.rb | coda-cli.rb | codequery.rb | cogl.rb | coin.rb | collada-dom.rb | collectd.rb | colordiff.rb | colormake.rb | colorsvn.rb | colortail.rb | commonmark.rb | compcert.rb | compface.rb | concurrencykit.rb | confuse.rb | conserver.rb | contacts.rb | convertlit.rb | convmv.rb | cookiecutter.rb | coq.rb | coreutils.rb | corkscrew.rb | couchdb-lucene.rb | couchdb.rb | couchpotatoserver.rb | cowpatty.rb | cowsay.rb | cpanminus.rb | cpansearch.rb | cpmtools.rb | cpp-netlib.rb | cppcheck.rb | cppdom.rb | cppformat.rb | cppi.rb | cpptest.rb | cppunit.rb | cpputest.rb | cproto.rb | cpulimit.rb | cputhrottle.rb | cracklib-words.rb | cracklib.rb | crash.rb | creduce.rb | crf++.rb | crm114.rb | cronolog.rb | crosstool-ng.rb | crunch.rb | crush-tools.rb | cryptol.rb | cryptopp.rb | crystal.rb | crystax-ndk.rb | cscope.rb | csfml.rb | csmith.rb | cspice.rb | css-crush.rb | cssembed.rb | csshx.rb | csup.rb | csv-fix.rb | csvprintf.rb | csync.rb | ctags.rb | ctail.rb | ctemplate.rb | ctl.rb | ctorrent.rb | ctunnel.rb | cuetools.rb | cunit.rb | cups-pdf.rb | curaengine.rb | curl.rb | curlish.rb | curlpp.rb | cutter.rb | cuty_capt.rb | cvc4.rb | cvs.rb | cvs2svn.rb | cvsps.rb | cvsutils.rb | cvsync.rb | cweb.rb | cxxtest.rb | cyassl.rb | czmq.rb | d-bus.rb | daemon.rb | daemonize.rb | daemonlogger.rb | daemontools.rb | dante.rb | daq.rb | dar.rb | darcs.rb | dark-mode.rb | darkhttpd.rb | darkice.rb | darkstat.rb | dash.rb | dasm.rb | dateutils.rb | datomic.rb | davix.rb | davmail.rb | dbacl.rb | dbus-glib.rb | dc3dd.rb | dcal.rb | dcd.rb | dcfldd.rb | dcled.rb | dcmtk.rb | dcraw.rb | ddar.rb | ddate.rb | ddclient.rb | ddrescue.rb | debianutils.rb | deheader.rb | deis.rb | deisctl.rb | deja-gnu.rb | delta.rb | denominator.rb | depqbf.rb | detox.rb | devil.rb | devtodo.rb | dex.rb | dex2jar.rb | dfc.rb | dfu-programmer.rb | dfu-util.rb | dhcpdump.rb | dhcping.rb | dhex.rb | di.rb | dialog.rb | dict.rb | diction.rb | dieharder.rb | diff-pdf.rb | diffuse.rb | dirac.rb | dircproxy.rb | direnv.rb | dirmngr.rb | dirt.rb | disco.rb | discodex.rb | discount.rb | disktype.rb | distcc.rb | distribution.rb | ditaa.rb | djbdns.rb | djview4.rb | djvu2pdf.rb | djvulibre.rb | dmalloc.rb | dmd.rb | dmtx-utils.rb | dns2tcp.rb | dnscrypt-proxy.rb | dnscrypt-wrapper.rb | dnsmap.rb | dnsmasq.rb | dnsperf.rb | dnsrend.rb | dnstop.rb | dnstracer.rb | docbook-xsl.rb | docbook.rb | docbook2x.rb | docker-machine.rb | docker-swarm.rb | docker.rb | dockutil.rb | doitlive.rb | dos2unix.rb | double-conversion.rb | doublecpp.rb | doubledown.rb | dovecot.rb | doxygen.rb | doxymacs.rb | dpkg.rb | drake.rb | drip.rb | dropbear.rb | dsd.rb | dsh.rb | dsocks.rb | dtach.rb | dtc.rb | dterm.rb | dtrx.rb | dub.rb | duck.rb | duff.rb | duo_unix.rb | duplicity.rb | duply.rb | duti.rb | dvd+rw-tools.rb | dvdauthor.rb | dvdbackup.rb | dvdrtools.rb | dvorak7min.rb | dvtm.rb | dwarf.rb | dwatch.rb | dwdiff.rb | dxflib.rb | dyld-headers.rb | dylibbundler.rb | dynamips.rb | dynamodb-local.rb | e2fsprogs.rb | easy-git.rb | ebook-tools.rb | ec2-ami-tools.rb | ec2-api-tools.rb | ecasound.rb | echoping.rb | echoprint-codegen.rb | ecj.rb | ecl.rb | ecm.rb | edelta.rb | editorconfig.rb | ee.rb | eet.rb | efl.rb | eigen.rb | eina.rb | ejabberd.rb | ejdb.rb | ekg2.rb | ekhtml.rb | elasticsearch.rb | elb-tools.rb | elementary.rb | elinks.rb | elixir-build.rb | elixir.rb | emacs-clang-complete-async.rb | emacs.rb | embryo.rb | embulk.rb | emscripten.rb | enca.rb | enchant.rb | enet.rb | engine_pkcs11.rb | enscript.rb | ent.rb | entr.rb | envchain.rb | envv.rb | eot-utils.rb | epeg.rb | epic5.rb | eprover.rb | epsilon.rb | epstool.rb | epubcheck.rb | erlang.rb | es.rb | esniper.rb | esound.rb | espeak.rb | etcd.rb | etl.rb | ettercap.rb | euca2ools.rb | euler-py.rb | evas-generic-loaders.rb | evas.rb | eventlog.rb | ex-vi.rb | exact-image.rb | exempi.rb | exenv.rb | exif.rb | exiftags.rb | exiftool.rb | exim.rb | exiv2.rb | exodriver.rb | expat.rb | eye-d3.rb | ezlupdate.rb | ezstream.rb | f3.rb | faac.rb | faad2.rb | fabric.rb | fail2ban.rb | fakeroot.rb | falcon.rb | fantom.rb | fasd.rb | fastbit.rb | fastjar.rb | fatsort.rb | fb-adb.rb | fb-client.rb | fbida.rb | fcgi.rb | fcgiwrap.rb | fcrackzip.rb | fdclone.rb | fdk-aac.rb | fdupes.rb | fetch-crl.rb | fex.rb | ffe.rb | ffind.rb | ffmbc.rb | ffmpeg.rb | ffmpeg2theora.rb | ffmpegthumbnailer.rb | ffms2.rb | ffts.rb | fftw.rb | fibjs.rb | ficy.rb | fig.rb | figlet.rb | finatra.rb | findbugs.rb | findutils.rb | fio.rb | fish.rb | fits.rb | fizsh.rb | flac.rb | flac123.rb | flactag.rb | flake.rb | flashrom.rb | flasm.rb | flatbuffers.rb | flawfinder.rb | fleet-db.rb | fleetctl.rb | flex.rb | flickcurl.rb | flow-tools.rb | flow.rb | flowgrind.rb | fltk.rb | fluid-synth.rb | flvmeta.rb | flvstreamer.rb | flyway.rb | fmdiff.rb | fon-flash-cli.rb | fondu.rb | fontconfig.rb | fontforge.rb | fop.rb | forego.rb | foremost.rb | fortune.rb | fossil.rb | fourstore.rb | fpc.rb | fping.rb | fpp.rb | frag_find.rb | fragroute.rb | freealut.rb | freediameter.rb | freeimage.rb | freeipmi.rb | freeling.rb | freeradius-server.rb | freeswitch.rb | freetds.rb | freetype.rb | freexl.rb | frege.rb | frei0r.rb | frescobaldi.rb | fribidi.rb | fsevent_watch.rb | fsh.rb | fsharp.rb | fsw.rb | fswatch.rb | ftgl.rb | ftimes.rb | ftjam.rb | funcoeszz.rb | fuseki.rb | fuzzy-find.rb | fwknop.rb | fzf.rb | g2.rb | gabedit.rb | gaffitter.rb | galen.rb | gambit-scheme.rb | game-music-emu.rb | gammaray.rb | gammu.rb | ganglia.rb | gant.rb | garmintools.rb | gauche.rb | gauge.rb | gaul.rb | gawk.rb | gbdfed.rb | gcab.rb | gcal.rb | gcc.rb | gconf.rb | gcore.rb | gcovr.rb | gcutil.rb | gd.rb | gdal-grass.rb | gdal.rb | gdbm.rb | gdk-pixbuf.rb | gdmap.rb | gdnsd.rb | gdrive.rb | gearman.rb | gecode.rb | gegl.rb | genders.rb | gengetopt.rb | genstats.rb | geocouch.rb | geogit.rb | geographiclib.rb | geoip.rb | geoipupdate.rb | geos.rb | geoserver.rb | get-flash-videos.rb | getdns.rb | getmail.rb | gettext.rb | getxbook.rb | gexiv2.rb | gflags.rb | gforth.rb | gh.rb | ghc.rb | ghi.rb | ghostscript.rb | gibbslda.rb | gibo.rb | gifify.rb | giflib.rb | giflossy.rb | gifsicle.rb | ginac.rb | gist.rb | gistit.rb | git-annex.rb | git-archive-all.rb | git-cal.rb | git-cola.rb | git-crypt.rb | git-encrypt.rb | git-extras.rb | git-fixup.rb | git-flow-avh.rb | git-flow.rb | git-ftp.rb | git-gerrit.rb | git-hooks.rb | git-imerge.rb | git-integration.rb | git-lfs.rb | git-multipush.rb | git-now.rb | git-number.rb | git-octopus.rb | git-open.rb | git-plus.rb | git-review.rb | git-sh.rb | git-ssh.rb | git-stree.rb | git-subrepo.rb | git-test.rb | git-tf.rb | git-tracker.rb | git-url-sub.rb | git.rb | gitbucket.rb | giter8.rb | github-release.rb | gitslave.rb | gitup.rb | gl2ps.rb | glassfish.rb | glbinding.rb | glew.rb | glib-networking.rb | glib.rb | glibmm.rb | glide.rb | glm.rb | global.rb | globus-toolkit.rb | glog.rb | gloox.rb | glui.rb | gmail-backup.rb | gmediaserver.rb | gmime.rb | gmp.rb | gmtl.rb | gnatsd.rb | gnome-common.rb | gnome-doc-utils.rb | gnome-icon-theme.rb | gnu-apl.rb | gnu-barcode.rb | gnu-cobol.rb | gnu-getopt.rb | gnu-indent.rb | gnu-prolog.rb | gnu-sed.rb | gnu-smalltalk.rb | gnu-tar.rb | gnu-time.rb | gnu-typist.rb | gnu-units.rb | gnu-which.rb | gnupg-pkcs11-scd.rb | gnupg.rb | gnupg2.rb | gnuplot.rb | gnustep-make.rb | gnutls.rb | go-app-engine-32.rb | go-app-engine-64.rb | go.rb | goaccess.rb | gobject-introspection.rb | gocr.rb | goffice.rb | golo.rb | goocanvas.rb | google-app-engine.rb | google-perftools.rb | google-sparsehash.rb | google-sql-tool.rb | googlecl.rb | goolabs.rb | gost.rb | gosu.rb | gource.rb | gpac.rb | gpg-agent.rb | gpgme.rb | gphoto2.rb | gplcver.rb | gpm.rb | gpp.rb | gpsbabel.rb | gpsd.rb | gpsim.rb | gptfdisk.rb | gptsync.rb | gputils.rb | gqlplus.rb | gqview.rb | gradle.rb | grails.rb | grap.rb | graphicsmagick.rb | graphviz.rb | grass.rb | grc.rb | grepcidr.rb | grib-api.rb | griffon.rb | gringo.rb | grok.rb | groonga-normalizer-mysql.rb | groonga.rb | groovy.rb | groovysdk.rb | groovyserv.rb | growly.rb | grsync.rb | gsasl.rb | gsettings-desktop-schemas.rb | gsl.rb | gsoap.rb | gssdp.rb | gssh.rb | gst-libav.rb | gst-plugins-bad.rb | gst-plugins-base.rb | gst-plugins-good.rb | gst-plugins-ugly.rb | gst-python.rb | gst-validate.rb | gstreamer.rb | gti.rb | gtk+.rb | gtk+3.rb | gtk-doc.rb | gtk-engines.rb | gtk-gnutella.rb | gtk-mac-integration.rb | gtk-murrine-engine.rb | gtkdatabox.rb | gtkextra.rb | gtkglext.rb | gtkmm.rb | gtkmm3.rb | gtksourceview.rb | gtksourceview3.rb | gtkspell3.rb | gtmess.rb | gts.rb | guile.rb | gumbo-parser.rb | gupnp-av.rb | gupnp-tools.rb | gupnp.rb | gvp.rb | gwenhywfar.rb | gws.rb | gwt.rb | gwyddion.rb | gzrt.rb | h2.rb | h264bitstream.rb | h2o.rb | hachoir-metadata.rb | hackrf.rb | hadoop.rb | halibut.rb | hamlib.rb | hamsterdb.rb | haproxy.rb | harbour.rb | hardlink-osx.rb | hardlink.rb | harfbuzz.rb | hashcash.rb | hashpump.rb | haxe.rb | hbase.rb | headphones.rb | hebcal.rb | hello.rb | help2man.rb | henplus.rb | hercules.rb | heroku-toolbelt.rb | herrie.rb | hevea.rb | hexcurse.rb | hexedit.rb | hfsutils.rb | hg-flow.rb | hh.rb | hicolor-icon-theme.rb | hidapi.rb | highlight.rb | highlighting-kate.rb | hilite.rb | hiredis.rb | hive.rb | hoedown.rb | homebank.rb | honcho.rb | honeyd.rb | horndis.rb | hornetq.rb | hostdb.rb | hping.rb | hqx.rb | hr.rb | ht.rb | html-xml-utils.rb | html2text.rb | htmlcleaner.rb | htmlcompressor.rb | htmlcxx.rb | htmldoc.rb | htop-osx.rb | htpdate.rb | http-parser.rb | http_load.rb | httperf.rb | httpie.rb | httping.rb | httpry.rb | httptunnel.rb | httrack.rb | hub.rb | hubflow.rb | hugo.rb | hunspell.rb | hydra.rb | hyperestraier.rb | hyperspec.rb | i2util.rb | iat.rb | ical-buddy.rb | icarus-verilog.rb | icbirc.rb | icdiff.rb | ice.rb | icecast.rb | icecream.rb | icon-naming-utils.rb | icon.rb | icoutils.rb | icu4c.rb | id3ed.rb | id3lib.rb | id3tool.rb | id3v2.rb | idcomments.rb | ideviceinstaller.rb | idnits.rb | idris.rb | idutils.rb | ievms.rb | ifstat.rb | iftop.rb | ii.rb | ike-scan.rb | ilmbase.rb | imagejs.rb | imagemagick.rb | imagesnap.rb | imageworsener.rb | imap-uw.rb | imapfilter.rb | imapsync.rb | imlib2.rb | influxdb.rb | iniparser.rb | innoextract.rb | innotop.rb | ino.rb | inspircd.rb | intercal.rb | internetarchive.rb | intltool.rb | io.rb | iodine.rb | iojs.rb | ioke.rb | ioping.rb | ios-class-guard.rb | ios-sim.rb | ios-webkit-debug-proxy.rb | iozone.rb | ip_relay.rb | ipbt.rb | ipcalc.rb | ipe.rb | iperf.rb | iperf3.rb | iphotoexport.rb | ipinfo.rb | ipmitool.rb | ipmiutil.rb | iprint.rb | ipsumdump.rb | ipv6calc.rb | ipv6toolkit.rb | ircd-hybrid.rb | ircd-irc2.rb | ircii.rb | irods.rb | irrlicht.rb | irrtoolset.rb | irssi.rb | isc-dhcp.rb | isl.rb | iso-codes.rb | ispc.rb | ispell.rb | isync.rb | itex2mml.rb | itpp.rb | itstool.rb | ivy.rb | jack.rb | jags.rb | jailkit.rb | jam.rb | jansson.rb | jasmin.rb | jasper.rb | javarepl.rb | jbake.rb | jbig2dec.rb | jbig2enc.rb | jbigkit.rb | jboss-as.rb | jboss-forge.rb | jcal.rb | jdnssec-tools.rb | jed.rb | jemalloc.rb | jena.rb | jenkins-job-builder.rb | jenkins.rb | jenv.rb | jerm.rb | jetty-runner.rb | jetty.rb | jhead.rb | jhiccup.rb | jigdo.rb | jing.rb | jless.rb | jlog.rb | jmeter.rb | jmxtrans.rb | jnettop.rb | joe.rb | john-jumbo.rb | john.rb | jooby-bootstrap.rb | jove.rb | jp2a.rb | jpeg-archive.rb | jpeg-turbo.rb | jpeg.rb | jpeginfo.rb | jpegoptim.rb | jpegrescan.rb | jq.rb | jrnl.rb | jruby.rb | js-test-driver.rb | jsawk.rb | jsdoc-toolkit.rb | jsdoc3.rb | jshon.rb | jslint4java.rb | jsmin.rb | json-c.rb | json-fortran.rb | json-glib.rb | json_spirit.rb | jsoncpp.rb | jsonpp.rb | jsvc.rb | judy.rb | juise.rb | juju-quickstart.rb | juju.rb | julius.rb | juman.rb | jvgrep.rb | jvmtop.rb | jython.rb | kafka.rb | kafkacat.rb | kakasi.rb | kanif.rb | karn.rb | kawa.rb | kbtin.rb | kdiff3.rb | keepassc.rb | kes.rb | kestrel.rb | kettle.rb | keybase.rb | keychain.rb | kibana.rb | kimwitu++.rb | kitchen-sync.rb | kite.rb | kjell.rb | knock.rb | knot.rb | known_hosts.rb | konoha.rb | kore.rb | kotlin-compiler.rb | kqwait.rb | ksh.rb | kstart.rb | ktoblzcheck.rb | kubernetes-cli.rb | kvazaar.rb | kyoto-cabinet.rb | kyoto-tycoon.rb | kytea.rb | kyua.rb | l-smash.rb | lablgtk.rb | lame.rb | languagetool.rb | lasi.rb | lastfmfpclient.rb | lastfmlib.rb | lastpass-cli.rb | laszip.rb | latex2html.rb | latex2rtf.rb | launch.rb | launch4j.rb | launchdns.rb | lbdb.rb | lbzip2.rb | lcab.rb | lcdf-typetools.rb | lcdproc.rb | lci.rb | lcov.rb | lcrack.rb | ld64.rb | ldapvi.rb | ldc.rb | ldns.rb | le.rb | leafnode.rb | ledger.rb | ledit.rb | legit.rb | leiningen.rb | lemon.rb | lensfun.rb | leptonica.rb | lesspipe.rb | lesstif.rb | leveldb.rb | lfe.rb | lft.rb | lftp.rb | lha.rb | lhasa.rb | lib3ds.rb | libaacs.rb | libagg.rb | libantlr3c.rb | libao.rb | libarchive.rb | libart.rb | libass.rb | libassuan.rb | libatomic_ops.rb | libav.rb | libb2.rb | libbind.rb | libbinio.rb | libbluray.rb | libbpg.rb | libbs2b.rb | libbson.rb | libbtbb.rb | libcaca.rb | libcanberra.rb | libcapn.rb | libcddb.rb | libcdio.rb | libcdr.rb | libcec.rb | libcello.rb | libcmph.rb | libcoap.rb | libconfig.rb | libcouchbase.rb | libcppa.rb | libcroco.rb | libcsv.rb | libcue.rb | libcuefile.rb | libdaemon.rb | libdap.rb | libdbi.rb | libdbusmenu-qt.rb | libdc1394.rb | libdca.rb | libdiscid.rb | libdmtx.rb | libdnet.rb | libdrawtext.rb | libdshconfig.rb | libdsk.rb | libdv.rb | libdvbpsi.rb | libdvdcss.rb | libdvdnav.rb | libdvdread.rb | libebml.rb | libebur128.rb | libechonest.rb | libelf.rb | libepoxy.rb | libestr.rb | libetonyek.rb | libev.rb | libevent.rb | libewf.rb | libexif.rb | libexosip.rb | libextractor.rb | libfaketime.rb | libffi.rb | libfishsound.rb | libfixbuf.rb | libflowmanager.rb | libforensic1394.rb | libfreefare.rb | libfreehand.rb | libfreenect.rb | libftdi.rb | libftdi0.rb | libgadu.rb | libgaiagraphics.rb | libgcrypt.rb | libgda.rb | libgee.rb | libgeotiff.rb | libgetdata.rb | libgfshare.rb | libghthash.rb | libgit2-glib.rb | libgit2.rb | libglade.rb | libglademm.rb | libgnomecanvas.rb | libgnomecanvasmm.rb | libgpg-error.rb | libgphoto2.rb | libgroove.rb | libgsf.rb | libgsm.rb | libgtop.rb | libgxps.rb | libharu.rb | libhdhomerun.rb | libhid.rb | libical.rb | libicns.rb | libid3tag.rb | libident.rb | libidl.rb | libidn.rb | libimobiledevice.rb | libinfinity.rb | libiomp.rb | libiptcdata.rb | libiscsi.rb | libjson-rpc-cpp.rb | libkate.rb | libkml.rb | libksba.rb | liblacewing.rb | liblas.rb | liblastfm.rb | liblinear.rb | liblo.rb | liblockfile.rb | liblqr.rb | libltc.rb | liblunar.rb | liblwgeom.rb | libmaa.rb | libmagic.rb | libmarisa.rb | libmatroska.rb | libmaxminddb.rb | libmemcached.rb | libmetalink.rb | libmicrohttpd.rb | libmikmod.rb | libming.rb | libmms.rb | libmodbus.rb | libmodplug.rb | libmongoclient.rb | libmonome.rb | libmowgli.rb | libmp3splt.rb | libmpc.rb | libmpd.rb | libmpdclient.rb | libmpeg2.rb | libmrss.rb | libmspub.rb | libmtp.rb | libmusicbrainz.rb | libmxml.rb | libnatpmp.rb | libnet.rb | libnfc.rb | libnfs.rb | libnice.rb | libnids.rb | libntlm.rb | libnxml.rb | liboauth.rb | libodbc++.rb | libodfgen.rb | libofx.rb | libogg.rb | liboil.rb | libopendkim.rb | libopennet.rb | liboping.rb | libopkele.rb | libosip.rb | libotr.rb | libowfat.rb | libp11.rb | libpagemaker.rb | libpano.rb | libpcl.rb | libpgm.rb | libplist.rb | libpng.rb | libpointing.rb | libpoker-eval.rb | libpqxx.rb | libpst.rb | libpuzzle.rb | libqalculate.rb | libqglviewer.rb | libquicktime.rb | libquvi.rb | librasterlite.rb | libraw.rb | librcsc.rb | librdkafka.rb | libre.rb | libreadline-java.rb | librem.rb | libreplaygain.rb | libresample.rb | libressl.rb | librevenge.rb | librsvg.rb | librsync.rb | librtlsdr.rb | libsamplerate.rb | libsass.rb | libscrypt.rb | libsecret.rb | libshout.rb | libsigc++.rb | libsigsegv.rb | libslax.rb | libsmf.rb | libsmi.rb | libsndfile.rb | libsodium.rb | libsoup.rb | libsoxr.rb | libspatialite.rb | libspiro.rb | libssh.rb | libssh2.rb | libstfl.rb | libstrophe.rb | libstxxl.rb | libsvg-cairo.rb | libsvg.rb | libsvm.rb | libswiften.rb | libtar.rb | libtasn1.rb | libtecla.rb | libtermkey.rb | libtess2.rb | libtextcat.rb | libtiff.rb | libtins.rb | libtomcrypt.rb | libtommath.rb | libtool.rb | libtorrent-rasterbar.rb | libtorrent.rb | libtrace.rb | libunistring.rb | libunwind-headers.rb | libupnp.rb | libusb-compat.rb | libusb.rb | libusrsctp.rb | libutf.rb | libuv.rb | libuvc.rb | libvbucket.rb | libvidstab.rb | libvirt.rb | libvisio.rb | libvo-aacenc.rb | libvoikko.rb | libvorbis.rb | libvpx.rb | libwbxml.rb | libwebsockets.rb | libwmf.rb | libwpd.rb | libwpg.rb | libwps.rb | libxc.rb | libxdg-basedir.rb | libxdiff.rb | libxmi.rb | libxml++.rb | libxml2.rb | libxmlsec1.rb | libxmp-lite.rb | libxmp.rb | libxslt.rb | libxspf.rb | libyaml.rb | libyubikey.rb | libzdb.rb | libzip.rb | libzzip.rb | lifelines.rb | lightning.rb | lighttpd.rb | lilv.rb | link-grammar.rb | linklint.rb | links.rb | liquibase.rb | liquidprompt.rb | litmus.rb | little-cms.rb | little-cms2.rb | lldpd.rb | llvm.rb | lmdb.rb | lnav.rb | lockrun.rb | log4c.rb | log4cplus.rb | log4cpp.rb | log4cxx.rb | log4shib.rb | logcheck.rb | logentries.rb | logrotate.rb | logstalgia.rb | logstash.rb | logtalk.rb | lolcode.rb | lorem.rb | loudmouth.rb | lout.rb | lpc21isp.rb | lrdf.rb | lrzip.rb | lrzsz.rb | lsdvd.rb | lsh.rb | lsyncd.rb | ltc-tools.rb | ltl2ba.rb | lua.rb | lua51.rb | luabind.rb | luajit.rb | luciddb.rb | lutok.rb | luvit.rb | luyten.rb | lv.rb | lv2.rb | lwtools.rb | lxsplit.rb | lynis.rb | lynx.rb | lysp.rb | lz4.rb | lzip.rb | lzlib.rb | lzo.rb | lzop.rb | mac-robber.rb | mackup.rb | macvim.rb | mad.rb | madplay.rb | magit.rb | mahout.rb | mailcheck.rb | mailutils.rb | mairix.rb | makedepend.rb | makefile2graph.rb | makeicns.rb | makensis.rb | makepkg.rb | makepp.rb | makeself.rb | mal4s.rb | malaga.rb | malbolge.rb | man2html.rb | mandoc.rb | mapnik.rb | mapserver.rb | mariadb.rb | markdown.rb | marst.rb | masscan.rb | mat.rb | matlab2tikz.rb | maven-shell.rb | maven.rb | mawk.rb | mbelib.rb | mboxgrep.rb | mcabber.rb | mcpp.rb | mcrypt.rb | md.rb | md5deep.rb | md5sha1sum.rb | mda-lv2.rb | mdbtools.rb | mdf2iso.rb | mdk.rb | mdp.rb | mdr.rb | mdxmini.rb | mecab-ipadic.rb | mecab-jumandic.rb | mecab-ko-dic.rb | mecab-ko.rb | mecab-unidic.rb | mecab.rb | media-info.rb | mediatomb.rb | megacmd.rb | megatools.rb | memcache-top.rb | memcached.rb | memcacheq.rb | memo.rb | memtester.rb | menhir.rb | mercurial.rb | mercury.rb | mergelog.rb | mergepbx.rb | mesos.rb | metaproxy.rb | metashell.rb | mfcuk.rb | mfoc.rb | mftrace.rb | mg.rb | mhash.rb | midgard2.rb | midicsv.rb | midnight-commander.rb | mighttpd2.rb | mikmod.rb | mimms.rb | minbif.rb | minicom.rb | minidjvu.rb | minidlna.rb | minimodem.rb | minisat.rb | minised.rb | miniupnpc.rb | minizinc.rb | minizip.rb | minuit2.rb | miredo.rb | miruo.rb | mitie.rb | mitmproxy.rb | mjpegtools.rb | mkclean.rb | mkcue.rb | mksh.rb | mktorrent.rb | mkvalidator.rb | mkvdts2ac3.rb | mkvtomp4.rb | mkvtoolnix.rb | mldonkey.rb | mlogger.rb | mlt.rb | mm-common.rb | mmix.rb | mmsrip.rb | mmv.rb | mobile-shell.rb | mobiledevice.rb | moc.rb | mockserver.rb | moco.rb | modman.rb | modules.rb | moe.rb | mogenerator.rb | mon.rb | monetdb.rb | mongo-c.rb | mongodb.rb | mongoose.rb | mongrel2.rb | mongroup.rb | monit.rb | monkeysphere.rb | mono.rb | monotone.rb | montage.rb | moreutils.rb | mosquitto.rb | most.rb | movgrab.rb | mozilla-addon-sdk.rb | mozjpeg.rb | mp3blaster.rb | mp3cat.rb | mp3check.rb | mp3gain.rb | mp3info.rb | mp3splt.rb | mp3val.rb | mp3wrap.rb | mp4v2.rb | mpack.rb | mpc.rb | mpck.rb | mpd.rb | mpdas.rb | mpdscribble.rb | mpdviz.rb | mpegdemux.rb | mpfi.rb | mpfr.rb | mpg123.rb | mpg321.rb | mpgtx.rb | mpich2.rb | mplayer.rb | mplayershell.rb | mpop.rb | mpssh.rb | mpw.rb | mr.rb | mrtg.rb | mruby.rb | msdl.rb | msgpack.rb | msitools.rb | msktutil.rb | msmtp.rb | mspdebug.rb | mtools.rb | mtr.rb | mu.rb | multimarkdown.rb | multirust.rb | multitail.rb | muparser.rb | mupdf-tools.rb | musepack.rb | mussh.rb | mutt.rb | mvnvm.rb | mvptree.rb | mypy.rb | mysql++.rb | mysql-cluster.rb | mysql-connector-c++.rb | mysql-connector-c.rb | mysql-connector-odbc.rb | mysql-proxy.rb | mysql-sandbox.rb | mysql-search-replace.rb | mysql.rb | mysqltuner.rb | mytop.rb | n.rb | nacl.rb | nagios-plugins.rb | nagios.rb | nailgun.rb | namazu.rb | namebench.rb | nanomsg.rb | nanopb-generator.rb | nant.rb | narwhal.rb | nasm.rb | natalie.rb | naturaldocs.rb | nave.rb | nbimg.rb | ncdc.rb | ncdu.rb | ncftp.rb | ncmpc.rb | ncmpcpp.rb | ncp.rb | ncrack.rb | ndiff.rb | ndpi.rb | negfix8.rb | neko.rb | neo4j.rb | neon.rb | nesc.rb | net-snmp.rb | net6.rb | netcat.rb | netcat6.rb | netpbm.rb | netperf.rb | nettle.rb | newlisp.rb | newsbeuter.rb | newt.rb | nexus.rb | nfcutils.rb | nfdump.rb | nghttp2.rb | nginx.rb | ngircd.rb | ngrep.rb | ngrok.rb | ngspice.rb | nickle.rb | nicovideo-dl.rb | nikto.rb | nimrod.rb | ninja-ide.rb | ninja.rb | nkf.rb | nload.rb | nmap.rb | node.rb | nodebrew.rb | nodenv.rb | nordugrid-arc.rb | normalize.rb | notmuch.rb | noweb.rb | npth.rb | nrg2iso.rb | nrpe.rb | nsd.rb | nspr.rb | nsq.rb | nss.rb | ntl.rb | ntopng.rb | nu.rb | num-utils.rb | nut.rb | nutcracker.rb | nuttcp.rb | nvi.rb | nvm.rb | nylon.rb | nzbget.rb | oath-toolkit.rb | objc-codegenutils.rb | objc-run.rb | objective-caml.rb | ocamlsdl.rb | ocp.rb | ocrad.rb | ode.rb | odo.rb | odt2txt.rb | offline-imap.rb | oggz.rb | ogmtools.rb | ohcount.rb | ola.rb | olsrd.rb | omega.rb | omniorb.rb | ondir.rb | one-ml.rb | onepass.rb | onetime.rb | oniguruma.rb | ooniprobe.rb | opam.rb | open-babel.rb | open-cobol.rb | open-mesh.rb | open-mpi.rb | open-ocd.rb | open-scene-graph.rb | open-sp.rb | open-vcdiff.rb | open-zwave.rb | openal-soft.rb | opencbm.rb | opencc.rb | opencolorio.rb | openconnect.rb | opencore-amr.rb | opendbx.rb | opendetex.rb | openexr.rb | openh264.rb | openhmd.rb | openjpeg.rb | openlitespeed.rb | openrtsp.rb | opensaml.rb | opensc.rb | openslide.rb | openslp.rb | openssl.rb | openvpn.rb | openwsman.rb | ophcrack.rb | optipng.rb | opus-tools.rb | opus.rb | opusfile.rb | orbit.rb | orc.rb | orfeo.rb | orientdb.rb | orpie.rb | ortp.rb | oscats.rb | osh.rb | osm-pbf.rb | osm2pgrouting.rb | osm2pgsql.rb | osmosis.rb | osquery.rb | osslsigncode.rb | ossp-uuid.rb | osxfuse.rb | osxutils.rb | owamp.rb | owfs.rb | p0f.rb | p11-kit.rb | p7zip.rb | pacapt.rb | packer.rb | pacvim.rb | pakchois.rb | pam_yubico.rb | pandoc-citeproc.rb | pandoc.rb | pango.rb | pangomm.rb | pangox-compat.rb | paperkey.rb | paps.rb | paq8px.rb | par.rb | par2.rb | par2tbb.rb | parallel.rb | parrot.rb | partio.rb | pass.rb | passenger.rb | passpie.rb | pastebinit.rb | patchutils.rb | pax-construct.rb | pax-runner.rb | pazpar2.rb | pbc-sig.rb | pbc.rb | pbrt.rb | pbzip2.rb | pcal.rb | pcap_dnsproxy.rb | pce.rb | pcre++.rb | pcre.rb | pcre2.rb | pcsc-lite.rb | pdal.rb | pdf-redact-tools.rb | pdf-tools.rb | pdf2htmlex.rb | pdf2json.rb | pdfcrack.rb | pdfgrep.rb | pdflib-lite.rb | pdftohtml.rb | pdksh.rb | pdns.rb | pdnsd.rb | pdnsrec.rb | pdsh.rb | peco.rb | peervpn.rb | peg-markdown.rb | peg.rb | perceptualdiff.rb | percona-server.rb | percona-toolkit.rb | perl-build.rb | perl.rb | perlmagick.rb | pev.rb | pex.rb | pg_top.rb | pgbadger.rb | pgbouncer.rb | pgcli.rb | pgdbf.rb | pgformatter.rb | pgloader.rb | pgpdump.rb | pgpool-ii.rb | pgrouting.rb | pgtap.rb | pgtune.rb | phantomjs.rb | phash.rb | phoon.rb | phoronix-test-suite.rb | physfs.rb | pianobar.rb | pianod.rb | picoc.rb | picocom.rb | picolisp.rb | pidcat.rb | pidgin.rb | pidof.rb | pig.rb | pigz.rb | pike.rb | pillar.rb | pincaster.rb | pinentry-mac.rb | pinentry.rb | pipebench.rb | pipemeter.rb | pit.rb | pius.rb | pixman.rb | pixz.rb | pjproject.rb | pk.rb | pkcrack.rb | pkcs11-helper.rb | pkg-config.rb | pkgdiff.rb | pktanon.rb | pla.rb | plan9port.rb | plantuml.rb | platypus.rb | plenv.rb | plod.rb | plotutils.rb | plowshare.rb | plplot.rb | plt-racket.rb | plustache.rb | plzip.rb | pmccabe.rb | pmd.rb | pmdmini.rb | pms.rb | png++.rb | png2ico.rb | pngcheck.rb | pngcrush.rb | pngnq.rb | pngpaste.rb | pngquant.rb | poco.rb | podiff.rb | podofo.rb | points2grid.rb | polarssl.rb | polipo.rb | polygen.rb | polyml.rb | ponyc.rb | ponysay.rb | poppler.rb | popt.rb | portaudio.rb | portmidi.rb | poster.rb | postgis.rb | postgres-xc.rb | postgresql.rb | postmark.rb | potrace.rb | pound.rb | povray.rb | pow.rb | powerman.rb | ppss.rb | pre-commit.rb | predictionio.rb | premake.rb | prettyping.rb | primesieve.rb | prips.rb | privoxy.rb | probatron4j.rb | proctools.rb | profanity.rb | proftpd.rb | proguard.rb | proj.rb | proof-general.rb | protobuf-c.rb | protobuf-swift.rb | protobuf.rb | proxychains-ng.rb | proxytunnel.rb | ps2eps.rb | psftools.rb | psgrep.rb | psqlodbc.rb | pssh.rb | pstoedit.rb | pstree.rb | psutils.rb | ptex.rb | pth.rb | ptunnel.rb | puf.rb | pulledpork.rb | pulseaudio.rb | pup.rb | pure-ftpd.rb | purescript.rb | pushpin.rb | putmail-queue.rb | putmail.rb | putty.rb | pv.rb | pwgen.rb | pwnat.rb | pwntools.rb | pwsafe.rb | pxz.rb | py2cairo.rb | py3cairo.rb | pyenv-ccache.rb | pyenv-pip-migrate.rb | pyenv-virtualenv.rb | pyenv-virtualenvwrapper.rb | pyenv-which-ext.rb | pyenv.rb | pyexiv2.rb | pygobject.rb | pygobject3.rb | pygtk.rb | pygtkglext.rb | pygtksourceview.rb | pylucene.rb | pypy.rb | pypy3.rb | pyqt.rb | pyqt5.rb | pyqwt.rb | pyside-tools.rb | pyside.rb | python.rb | python3.rb | q.rb | qbs.rb | qca.rb | qcachegrind.rb | qd.rb | qdbm.rb | qemu.rb | qi.rb | qjson.rb | qpdf.rb | qprint.rb | qrencode.rb | qscintilla2.rb | qstat.rb | qt.rb | qt5.rb | qtfaststart.rb | qtplay.rb | quantlib.rb | quassel.rb | quazip.rb | queequeg.rb | quex.rb | quilt.rb | quotatool.rb | quvi.rb | qwt.rb | qwtpolar.rb | qxmpp.rb | r3.rb | rabbitmq-c.rb | rabbitmq.rb | radamsa.rb | radare2.rb | ragel.rb | rainbarf.rb | rakudo-star.rb | rancid.rb | randomize-lines.rb | ranger.rb | rapidjson.rb | raptor.rb | rarian.rb | rasqal.rb | rats.rb | rbenv-aliases.rb | rbenv-binstubs.rb | rbenv-bundle-exec.rb | rbenv-bundler-ruby-version.rb | rbenv-bundler.rb | rbenv-communal-gems.rb | rbenv-ctags.rb | rbenv-default-gems.rb | rbenv-gem-rehash.rb | rbenv-gemset.rb | rbenv-readline.rb | rbenv-use.rb | rbenv-vars.rb | rbenv-whatis.rb | rbenv.rb | rc.rb | rcs.rb | rcssserver.rb | rdate.rb | rdfind.rb | rdiff-backup.rb | rds-command-line-tools.rb | rdup.rb | re2.rb | re2c.rb | readline.rb | readosm.rb | reattach-to-user-namespace.rb | reaver.rb | rebar.rb | reclass.rb | recode.rb | recoverjpeg.rb | recutils.rb | redir.rb | redis.rb | redland.rb | redo.rb | redpen.rb | redshift.rb | redsocks.rb | redstore.rb | regex-opt.rb | regina-rexx.rb | regldg.rb | remake.rb | remarshal.rb | remctl.rb | remind.rb | ren.rb | rename.rb | renameutils.rb | reop.rb | repl.rb | repo.rb | reposurgeon.rb | rest-shell.rb | restund.rb | resty.rb | rethinkdb.rb | rexster-console.rb | rexster.rb | rfcdiff.rb | rfcmarkup.rb | rfcstrip.rb | rgbds.rb | rhash.rb | rhino.rb | riak.rb | riemann-client.rb | riemann.rb | rig.rb | rinetd.rb | ringojs.rb | ripmime.rb | rkflashtool.rb | rkhunter.rb | rlog.rb | rlwrap.rb | rmate.rb | rmcast.rb | rmtrash.rb | rnv.rb | robodoc.rb | rock.rb | rocket.rb | rocksdb.rb | rolldice.rb | roundup.rb | rp.rb | rpg.rb | rpl.rb | rpm.rb | rpm2cpio.rb | rrdtool.rb | rsense.rb | rsnapshot.rb | rssh.rb | rsstail.rb | rsyslog.rb | rt-audio.rb | rtf2latex2e.rb | rtmpdump.rb | rtorrent.rb | rtpbreak.rb | rubber.rb | ruby-build.rb | ruby-install.rb | ruby.rb | runcocoa.rb | runit.rb | rush.rb | rust.rb | ry.rb | rzip.rb | s-lang.rb | s3cmd.rb | s3sync.rb | safe-rm.rb | saltstack.rb | sam2p.rb | samba.rb | sane-backends.rb | sary.rb | sassc.rb | savana.rb | saxon-b.rb | saxon.rb | sbcl.rb | sblim-sfcc.rb | sbt.rb | sbtenv.rb | sbuild.rb | sc68.rb | scala.rb | scalaenv.rb | scalariform.rb | scalastyle.rb | scale2x.rb | scamper.rb | scheme48.rb | schroedinger.rb | scm-manager.rb | scons.rb | screenbrightness.rb | screenfetch.rb | screenresolution.rb | scriptcs.rb | scrollkeeper.rb | scrub.rb | scrypt.rb | scsh.rb | sdcc.rb | sdcv.rb | sdf.rb | sdhash.rb | sdl.rb | sdl2.rb | sdl2_gfx.rb | sdl2_image.rb | sdl2_mixer.rb | sdl2_net.rb | sdl2_ttf.rb | sdl_gfx.rb | sdl_image.rb | sdl_mixer.rb | sdl_net.rb | sdl_rtf.rb | sdl_sound.rb | sdl_ttf.rb | sec.rb | sedna.rb | seexpr.rb | selecta.rb | selenium-server-standalone.rb | sendemail.rb | ser2net.rb | serd.rb | serialosc.rb | sersniff.rb | setweblocthumb.rb | sf-pwgen.rb | sfcgal.rb | sfk.rb | sflowtool.rb | sfml.rb | sgrep.rb | sha2.rb | shadowsocks-libev.rb | shakespeare.rb | shapelib.rb | shared-mime-info.rb | shellcheck.rb | shellinabox.rb | shiboken.rb | shivavg.rb | shmcat.rb | shmux.rb | shntool.rb | shocco.rb | shorten.rb | shpotify.rb | shrewsoft-vpn-client.rb | shtool.rb | shunit2.rb | sic.rb | sickbeard.rb | siege.rb | signify-osx.rb | signing-party.rb | silc-client.rb | silk.rb | simgrid.rb | simh.rb | simple-amqp-client.rb | simple-tiles.rb | since.rb | sip.rb | sipcalc.rb | sipp.rb | sipsak.rb | sisc-scheme.rb | sispmctl.rb | skinny.rb | skipfish.rb | skktools.rb | skytools.rb | sl.rb | sleepwatcher.rb | sleuthkit.rb | slimerjs.rb | sloccount.rb | slony.rb | slowhttptest.rb | slrn.rb | slurm.rb | smake.rb | smali.rb | smartmontools.rb | smartypants.rb | smlnj.rb | snap7.rb | snappy.rb | snappystream.rb | snapraid.rb | sngrep.rb | snobol4.rb | snort.rb | snow.rb | snownews.rb | sntop.rb | snzip.rb | socat.rb | soccerwindow2.rb | soci.rb | sofia-sip.rb | softhsm.rb | solid.rb | solr.rb | somagic-tools.rb | somagic.rb | sonar-runner.rb | sonar.rb | sord.rb | sound-touch.rb | source-highlight.rb | sourcekitten.rb | sox.rb | spark.rb | sparkey.rb | sparse.rb | spatialindex.rb | spatialite-gui.rb | spatialite-tools.rb | spawn-fcgi.rb | spdylay.rb | speech-tools.rb | speedtest_cli.rb | speex.rb | sphinx.rb | spidermonkey.rb | spim.rb | spin.rb | spiped.rb | splint.rb | spoof-mac.rb | spring-loaded.rb | spring-roo.rb | sproxy.rb | sqlcipher.rb | sqlite-analyzer.rb | sqlite.rb | sqlitebrowser.rb | sqliteman.rb | sqlmap.rb | sqoop.rb | sqsh.rb | sqtop.rb | squashfs.rb | squid.rb | squirrel.rb | sratom.rb | src.rb | srclib.rb | srecord.rb | srmio.rb | srtp.rb | ssdb.rb | ssdeep.rb | ssed.rb | ssh-copy-id.rb | sshguard.rb | sshrc.rb | sshtrix.rb | sshuttle.rb | ssldump.rb | sslh.rb | sslmate.rb | sslyze.rb | ssreflect.rb | ssss.rb | sstp-client.rb | st.rb | stanford-parser.rb | star.rb | stash-cli.rb | stgit.rb | stk.rb | stklos.rb | stlink.rb | stlviewer.rb | stoken.rb | stone.rb | storm.rb | stormssh.rb | stow.rb | streamripper.rb | stress.rb | strongswan.rb | stunnel.rb | stuntman.rb | style-check.rb | sub2srt.rb | subliminal.rb | submarine.rb | subnetcalc.rb | subversion.rb | suomi-malaga-voikko.rb | supersonic.rb | surfraw.rb | suricata.rb | svdlibc.rb | svg2pdf.rb | svg2png.rb | svtplay-dl.rb | swaks.rb | swatchbooker.rb | swfmill.rb | swftools.rb | swiftlint.rb | swig.rb | swish-e.rb | switchaudio-osx.rb | sword.rb | syck.rb | sync_gateway.rb | syncthing.rb | synfig.rb | synfigstudio.rb | synscan.rb | syntaxerl.rb | sysbench.rb | sysdig.rb | szip.rb | szl.rb | t1lib.rb | t1utils.rb | ta-lib.rb | tachyon.rb | tag.rb | taglib.rb | taktuk.rb | tal.rb | talk-filters.rb | talloc.rb | tarsnap.rb | task-spooler.rb | task.rb | taskd.rb | tasksh.rb | tbb.rb | tcc.rb | tclap.rb | tcpflow.rb | tcping.rb | tcpreplay.rb | tcpsplit.rb | tcptrace.rb | tcptraceroute.rb | tcptrack.rb | tcptunnel.rb | tcsh.rb | td.rb | teapot.rb | tee-clc.rb | teem.rb | teensy_loader_cli.rb | tegh.rb | telegraf.rb | telepathy-gabble.rb | telepathy-glib.rb | telepathy-idle.rb | telepathy-mission-control.rb | tenyr.rb | term.rb | terminal-notifier.rb | termrec.rb | termshare.rb | terraform.rb | tesseract.rb | testdisk.rb | tevent.rb | texapp.rb | texi2html.rb | texinfo.rb | texmath.rb | thc-pptp-bruter.rb | the_platinum_searcher.rb | the_silver_searcher.rb | thefuck.rb | theharvester.rb | theora.rb | thrift.rb | thrulay.rb | tidy-html5.rb | tidyp.rb | tiff2png.rb | tig.rb | tika.rb | timedog.rb | timelimit.rb | timidity.rb | tin.rb | tinc.rb | tintin.rb | tiny-fugue.rb | tinycdb.rb | tinyproxy.rb | tinyscheme.rb | tinysvm.rb | tinyxml.rb | tinyxml2.rb | tippecanoe.rb | titan-server.rb | tivodecode.rb | tkdiff.rb | tlassemble.rb | tlsdate.rb | tmpreaper.rb | tmpwatch.rb | tmux-cssh.rb | tmux-mem-cpu-load.rb | tmux.rb | tn5250.rb | tnef.rb | tnote.rb | todo-txt.rb | tofrodos.rb | toilet.rb | tokyo-cabinet.rb | tokyo-dystopia.rb | tokyo-tyrant.rb | tomcat-native.rb | tomcat.rb | tomee-jax-rs.rb | tomee-plume.rb | tomee-plus.rb | tomee-webprofile.rb | topgit.rb | tor.rb | torrentcheck.rb | torsocks.rb | tpl.rb | tpp.rb | tracebox.rb | tractorgen.rb | trafficserver.rb | trafshow.rb | trang.rb | transcrypt.rb | translate-toolkit.rb | transmission.rb | trash.rb | tre.rb | tree.rb | treecc.rb | treeline.rb | trr.rb | truecrack.rb | tsung.rb | tta.rb | ttf2eot.rb | ttf2pt1.rb | ttfautohint.rb | tth.rb | tty-clock.rb | ttylog.rb | ttyrec.rb | ttytter.rb | tuntap.rb | tutum.rb | tvnamer.rb | twemcache.rb | two-lame.rb | txt2man.rb | txt2tags.rb | typesafe-activator.rb | typespeed.rb | u-boot-tools.rb | uade.rb | uberftp.rb | uchardet.rb | ucl.rb | ucommon.rb | ucspi-tcp.rb | ucspi-tools.rb | udis86.rb | udns.rb | udptunnel.rb | udpxy.rb | udunits.rb | ufraw.rb | uim.rb | unac.rb | unar.rb | unarj.rb | unbound.rb | uncrustify.rb | unfs3.rb | uni2ascii.rb | unifdef.rb | unison.rb | unittest-cpp.rb | unittest.rb | unixodbc.rb | unoconv.rb | unp.rb | unpaper.rb | unrar.rb | unrtf.rb | unshield.rb | unyaffs.rb | uptimed.rb | upx.rb | uriparser.rb | urlview.rb | uru.rb | usbmuxd.rb | userspace-rcu.rb | utimer.rb | uudeview.rb | uwsgi.rb | v.rb | v8.rb | vala.rb | valabind.rb | valgrind.rb | validns.rb | valkyrie.rb | varnish.rb | vassh.rb | vault-cli.rb | vavrdiasm.rb | vbindiff.rb | vc4asm.rb | vcdimager.rb | vcodex.rb | vcprompt.rb | vcsh.rb | vde.rb | vegeta.rb | vera++.rb | verilator.rb | vert.x.rb | vf.rb | vgmstream.rb | vice.rb | vifm.rb | vilistextum.rb | vim.rb | vimpager.rb | vimpc.rb | vip.rb | virtualhost.sh.rb | virtualpg.rb | virtuoso.rb | visionmedia-watch.rb | visitors.rb | visualnetkit.rb | vit.rb | vmalloc.rb | vncsnapshot.rb | vnstat.rb | vnu.rb | volatility.rb | voldemort.rb | voltdb.rb | voms.rb | vorbis-tools.rb | vorbisgain.rb | vowpal-wabbit.rb | vpcs.rb | vpnc.rb | vramsteg.rb | vrpn.rb | vsftpd.rb | vstr.rb | vtclock.rb | vte.rb | vte3.rb | vttest.rb | w-calc.rb | w3m.rb | wait_on.rb | wakatime-cli.rb | wakeonlan.rb | waon.rb | watch-sim.rb | watch.rb | watchman.rb | wavpack.rb | wbox.rb | wdiff.rb | web100clt.rb | webalizer.rb | webfs.rb | webkit2png.rb | webp.rb | weechat.rb | weighttp.rb | wellington.rb | wemux.rb | wget.rb | wgetpaste.rb | whatmask.rb | when.rb | whereami.rb | whirr.rb | whitedb.rb | whohas.rb | why3.rb | wifi-password.rb | wiggle.rb | wildfly-as.rb | wimlib.rb | wine.rb | winetricks.rb | winexe.rb | wireshark.rb | wirouter_keyrec.rb | with-readline.rb | wla-dx.rb | wordnet.rb | wordplay.rb | wps2odt.rb | wput.rb | wrangler.rb | writerperfect.rb | wrk-trello.rb | wrk.rb | wry.rb | wslay.rb | wsmancli.rb | wtf.rb | wv.rb | wv2.rb | wwwoffle.rb | wxmac.rb | wxpython.rb | wy60.rb | wyrd.rb | x11vnc.rb | x264.rb | x265.rb | xa.rb | xapian.rb | xar-mackyle.rb | xaric.rb | xastir.rb | xbee-comm.rb | xcproj.rb | xctool.rb | xdelta.rb | xerces-c.rb | xlslib.rb | xml-coreutils.rb | xml-security-c.rb | xml-tooling-c.rb | xml2.rb | xmlcatmgr.rb | xmlformat.rb | xmlrpc-c.rb | xmlsh.rb | xmlstarlet.rb | xmlto.rb | xmltoman.rb | xmp.rb | xonsh.rb | xorriso.rb | xplanet.rb | xplanetfx.rb | xqilla.rb | xrootd.rb | xsane.rb | xsp.rb | xspin.rb | xstow.rb | xsw.rb | xtail.rb | xtitle.rb | xulrunner.rb | xvid.rb | xz.rb | yacas.rb | yaf.rb | yafc.rb | yajl.rb | yamcha.rb | yamdi.rb | yaml-cpp.rb | yap.rb | yara.rb | yash.rb | yasm.rb | yaws.rb | yaz.rb | yaze-ag.rb | yazpp.rb | yconalyzer.rb | ydict.rb | yeti.rb | ykclient.rb | ykpers.rb | yle-dl.rb | youtube-dl.rb | yubico-piv-tool.rb | yuicompressor.rb | yydecode.rb | z.rb | z80asm.rb | z80dasm.rb | zabbix.rb | zbackup.rb | zbar.rb | zdelta.rb | zebra.rb | zeromq.rb | zile.rb | zinc.rb | zint.rb | zmap.rb | znc.rb | zookeeper.rb | zopfli.rb | zorba.rb | zpaq.rb | zpython.rb | zsh-completions.rb | zsh-history-substring-search.rb | zsh-lovers.rb | zsh-syntax-highlighting.rb | zsh.rb | zshdb.rb | zssh.rb | zsync.rb | zurl.rb | zxcc.rb | zzuf.rb |

* TODO Indexing org-files to find headlines :tag1:tag2:
  :PROPERTIES:
  :categories: emacs,org
  :date:     today
  :ARCHIVE_TIME: 2015-07-09 Thu 21:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :ARCHIVE_TODO: TODO
  :END:

The idea here is to index every headline and store them in a data structure to enable fast searching. One issue is fidelity: how to keep the index synchronized?


#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer)
    'headline
  (lambda (x)
   (list
    (org-element-property :title x)
    (org-element-property :level x)
    (org-element-property :begin x)
    (save-excursion
      (goto-char     (org-element-property :begin x))
      (org-entry-properties))
    (org-element-property :tags x)
    (org-element-property :todo-keyword x)
    (org-element-property :todo-type x))))
#+END_SRC

#+RESULTS:
| (Indexing org-files to find headlines) | 1 | 1 | ((TODO . TODO) (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (TAGS . :tag1:tag2:) (ALLTAGS . :tag1:tag2:) (BLOCKED . ) (categories . emacs,org) (date . today) (CATEGORY . blog)) | (tag1 tag2) | TODO | todo |

#+BEGIN_SRC emacs-lisp
 (f-entries "emacs-jasp" (lambda (x)
		 (string=
		  "org"
		  (file-name-extension x)))
	   t)
#+END_SRC

#+RESULTS:
| /Users/jkitchin/blogofile-jkitchin.github.com/_blog/emacs-jasp/using-jasp-el.org | /Users/jkitchin/blogofile-jkitchin.github.com/_blog/emacs-jasp/emacs-jasp.org |

(filename headline TODO (properties) (tags)))

Return the components of the current heading.
This is a list with the following elements:
- the level as an integer
- the reduced level, different if `org-odd-levels-only' is set.
- the TODO keyword, or nil
- the priority character, like ?A, or nil if no priority is given
- the headline text itself, or the tags string if no headline text
- the tags string, or nil.

#+BEGIN_SRC emacs-lisp
(loop for fname in (f-entries "." (lambda (x)
				    (string=
				     "org"
				     (file-name-extension x))))
      collect (with-current-buffer (find-file-noselect fname)
		(condition-case cerr
		    (org-map-entries 'org-heading-components))
		(error (format "%s\n%s" fname cerr))))
#+END_SRC

* TODO [#B] Using -s prog with swish-e :test:tree:
  :PROPERTIES:
  :categories: emacs,orgmode,swishe
  :ARCHIVE_TIME: 2015-07-09 Thu 21:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :ARCHIVE_TODO: TODO
  :END:
This should speed up things.

We can find entries ending in .org like this:

#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer) 'headline
  (lambda (h) (org-element-map h 'node-property
  (lambda (p)
    (cons (org-element-property :key p)
	  (org-element-property :value p))))))


#+END_SRC

#+RESULTS:
| (categories . emacs,orgmode,swishe) |

#+BEGIN_SRC emacs-lisp
(length (f-entries "." (lambda (x)
		 (string=
		  "org"
		  (file-name-extension x)))
	   t))
#+END_SRC

#+RESULTS:
: 123

Then, we should loop over each file to generate text to stdout.

#+caption: to be determined
[[./11-eos.png]]

[[file:blog.org][some description]]

http://google.com

cite:dauenhauer-2006-renew
#+BEGIN_SRC emacs-lisp
(tag 'links ()
     (mapconcat
      'identity
      (org-element-map (org-element-parse-buffer) 'link
	(lambda (link)
	  (tag 'link
	       `((type . ,(xml-escape-string (org-element-property :type link)))
		 (path . ,(xml-escape-string (org-element-property :path link)))
		 (raw-link . ,(xml-escape-string
			       (org-element-property :raw-link link))))
	       ;; captions are in the parent paragraph.
	       (when (org-element-property
		      :caption
		      (org-element-property :parent link))
		 (tag 'caption ()
		      (xml-escape-string
		       (mapconcat
			(lambda (x)
			  (mapconcat 'car x " "))
			(org-element-property
			 :caption
			 (org-element-property :parent link))
			" "))))
	       (when (org-element-property :contents-begin link)
		 (buffer-substring (org-element-property :contents-begin link)
				   (org-element-property :contents-end link))))
	  ))
      ""))

#+END_SRC

#+RESULTS:
: <links><link type="file" path="./11-eos.png" raw-link="./11-eos.png"><caption>to be determined</caption></link><link type="file" path="blog.org" raw-link="file:blog.org">some description</link><link type="http" path="//google.com" raw-link="http://google.com"></link><link type="cite" path="dauenhauer-2006-renew" raw-link="cite:dauenhauer-2006-renew"></link></links>

#+ATTR_LATEX: :width 400
#+LABEL: lab:src
#+caption: element inspector
#+name: a source block
#+BEGIN_SRC emacs-lisp
(defun inspect-element-at-point () (interactive)
       (let ((elem (org-element-context)))
	 (switch-to-buffer "*org-element-inspector*")
	 (erase-buffer)
	 (insert (format "%s" (pp-to-string elem)))
	 (defface highlight-regexp-face
	   '((t (:foreground "dark red")))
	   "face for highlight-regexp.")
	 (highlight-regexp ":[a-zA-Z-_]*\\>"
			   'highlight-regexp-face)))
#+END_SRC

#+RESULTS: a
: inspect-element-at-point

#+RESULTS:
: inspect-element-at-point


#+BEGIN_SRC emacs-lisp :tangle ~/Dropbox/kitchingroup/jmax/swish-org-xml.el
(defun print-tag (name attrs &optional closingp)
  "Print an xml tag with symbol NAME and ATTRS (a cons list of (attribute . value)).
if CLOSINGP print the closing tag instead."
  (format
   "<%s%s%s>"
   (if closingp "/" "")
   name
   (if (and attrs (not closingp))
       (concat
	" "
	(mapconcat
	 (lambda (x)
	   (format "%s=\"%s\""
		   (car x)
		   (xml-escape-string (cdr x))))
	 attrs
	 " "))
     "")))

(defmacro tag (name attributes &rest body)
  `(format "%s%s%s"
	   (print-tag ,name ,attributes nil)
           (concat
	   ,@body)
	   (print-tag ,name nil t)))

(defun file-keywords-xml ()
  (tag 'file-keywords ()
       (mapconcat
	'identity
	(org-element-map (org-element-parse-buffer 'element) 'keyword
	  (lambda (keyword)
	    (tag (xml-escape-string (org-element-property :key keyword)) ()
		 (xml-escape-string (org-element-property :value keyword)))))
	"")))


(defun headline-xml ()
  (mapconcat
   'identity (org-element-map
		 (org-element-parse-buffer)
		 'headline
	       (lambda (headline)

		 (let ((title (org-element-property :title headline))
		       ;(priority (org-element-property :priority headline))
		       ;(tags (org-element-property :tags headline))
		       ;(todo-type  (org-element-property :todo-type headline))
		       ;(todo-keyword (org-element-property :todo-keyword headline))
		       (properties (save-excursion
				     (goto-char
				      (org-element-property :begin headline))
				     (org-entry-properties))))
		   (tag 'headline ()
			(tag 'title () (mapconcat 'identity title " "))
			;(when tags
			 ; (tag 'tags () (mapconcat 'identity tags " ")))
			;(when priority
			 ; (tag 'priority () (char-to-string priority)))
			;(when todo-type
			 ; (tag 'todo-type () (format "%s" todo-type)))
			;(when todo-keyword
			 ; (tag 'todo-keyword () todo-keyword))
			(when properties
			  (tag 'properties ()
			       (mapconcat
				'identity
				(loop for (p . v) in properties
				      collect (tag p () v))
				"")))))))
   ""))

(defun table-xml ()
  (tag
   'tables ()
   (mapconcat 'identity
	      (org-element-map
		  (org-element-parse-buffer)
		  'table
		(lambda (table)
		  (let* ((caption (mapconcat
				   (lambda (x)
				     (mapconcat 'car x " "))
				   (org-element-property :caption table) ""))
			 (begin (org-element-property :begin table))
			 (end (org-element-property :end table))
			 (contents (buffer-substring begin end)))
		    (tag 'table ()
			 (tag 'caption () (xml-escape-string caption))
			 (tag 'table-contents () (xml-escape-string contents))))))
	      "")))

(defun src-block-xml ()
  "Return xml string of src-blocks in the buffer, wrapped in <src-blocks>"
  (tag 'src-blocks ()
       (mapconcat 'identity
		  (org-element-map
		      (org-element-parse-buffer)
		      'src-block
		    (lambda (element)
		      (tag
		       'src-block
		       `((language . ,(xml-escape-string
				       (org-element-property :language element)))
			 (switches . ,(xml-escape-string
				       (format
					"%s"
					(org-element-property :switches element))))
			 (parameters . ,(xml-escape-string
					 (format
					  "%s"
					  (org-element-property :parameters element)))))
		       (when (org-element-property :name element)
			 (tag 'name () (xml-escape-string
					(org-element-property :name element))))
		       (when (org-element-property :caption element)
			 (tag 'caption ()
			      (mapconcat
			       (lambda (x)
				 (mapconcat 'car x " "))
			       (org-element-property :caption element) "")))
		       (tag 'code ()
			    (xml-escape-string
			     (org-element-property :value element))))))
		  "")))

(defun links-xml ()
  (tag 'links ()
     (mapconcat
      'identity
      (org-element-map (org-element-parse-buffer) 'link
	(lambda (link)
	  (tag 'link
	       `((type . ,(xml-escape-string (org-element-property :type link)))
		 (path . ,(xml-escape-string (org-element-property :path link)))
		 (raw-link . ,(xml-escape-string
			       (org-element-property :raw-link link))))
	       ;; captions are in the parent paragraph.
	       (when (org-element-property
		      :caption
		      (org-element-property :parent link))
		 (tag 'caption ()
		      (xml-escape-string
		       (mapconcat
			(lambda (x)
			  (mapconcat 'car x " "))
			(org-element-property
			 :caption
			 (org-element-property :parent link))
			" "))))
	       (when (org-element-property :contents-begin link)
		 (buffer-substring (org-element-property :contents-begin link)
				   (org-element-property :contents-end link))))
	  ))
      "")))

(defun document-xml ()
  (tag 'document ()
       (concat
	(file-keywords-xml)
	(headline-xml)
	(table-xml)
	(src-block-xml)
	(links-xml)
	(xml-escape-string
	 (buffer-string)))))

(defun process-file (fname)
  (let* ((buf (find-file-noselect fname))
	 (xml (replace-regexp-in-string
	       "[^[:ascii:]]" ""
	       (document-xml)))))
  (format "Path-Name: %s
Content-Length: %s

%s" fname (length xml) xml))

#+END_SRC

#+RESULTS:
: src-block-xml

#+caption: some text
#+caption: some more text
| x & 3| y |
|---+---|
| 1 | 2 |
| 3 | 4 |

#+AUTHOR: John Kitchin
#+BEGIN_SRC emacs-lisp
(file-keywords-xml)
#+END_SRC

#+RESULTS:
: <file-keywords><AUTHOR>John Kitchin</AUTHOR></file-keywords>



#+BEGIN_SRC emacs-lisp
(table-xml)
#+END_SRC

#+RESULTS:
: <tables><table><caption>some more textsome text</caption><table-contents>#+caption: some text
: #+caption: some more text
: | x &amp; 3| y |
: |---+---|
: | 1 | 2 |
: | 3 | 4 |
:
:
: </table-contents></table></tables>


#+BEGIN_SRC emacs-lisp
(headline-xml)
#+END_SRC

#+RESULTS:
: <headline><title>Using -s prog with swish-e</title><properties><TODO>TODO</TODO><PRIORITY>B</PRIORITY><FILE>/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org</FILE><TAGS>:test:tree:</TAGS><ALLTAGS>:test:tree:</ALLTAGS><BLOCKED></BLOCKED><categories>emacs,orgmode,swishe</categories><CATEGORY>blog</CATEGORY></properties></headline>

#+BEGIN_SRC emacs-lisp :tangle swish-org.el :tangle-mode (identity #o755)
:;exec emacs -batch -l $0 "$@"
(require 'org)
(require 'xml)
(require 'cl)

(add-to-list 'load-path "~/Dropbox/kitchingroup/jmax/elpa/f-20140828.716")
(add-to-list 'load-path "~/Dropbox/kitchingroup/jmax/elpa/s-20140910.334")
(add-to-list 'load-path "~/Dropbox/kitchingroup/jmax/elpa/dash-20141201.2206")
(require 'f)

(add-to-list 'load-path "~/Dropbox/kitchingroup/jmax")
(require 'swish-org-xml)

(loop for dir in '("/Users/jkitchin/blogofile-jkitchin.github.com/_blog"
		   "/Users/jkitchin/blogofile-jkitchin.github.com/_site")
      do
      (loop for fname in (f-entries
			  dir
			  (lambda (x)
			    (string=  "org"  (file-name-extension x)))
			  t)
	    do (ignore-errors
		 (princ (process-file fname)))))
#+END_SRC
#+RESULTS:
: process-file

#+BEGIN_SRC sh
swish-e -c swish-org2xml.conf -S prog -i ./swish-org.el
#+END_SRC

#+BEGIN_SRC emacs-lisp
(process-file "/Users/jkitchin/blogofile-jkitchin.github.com/_blog/using-org-ref.org")
#+END_SRC

#+RESULTS:
#+begin_example
Path-Name: /Users/jkitchin/blogofile-jkitchin.github.com/_blog/using-org-ref.org
Content-Length: 3345

<src-blocks><src-block language="emacs-lisp"><contents>(org-babel-load-file &quot;org-ref.org&quot;)
</contents></src-block><src-block language="emacs-lisp"><contents>(setq org-ref-bibliography-notes &quot;~/Dropbox/bibliography/notes.org&quot;
      org-ref-default-bibliography &apos;(&quot;~/Dropbox/bibliography/references.bib&quot;)
      org-ref-pdf-directory &quot;~/Dropbox/bibliography/bibtex-pdfs/&quot;)
</contents></src-block><src-block language="emacs-lisp"><contents>(setq org-ref-insert-cite-key &quot;C-c )&quot;)
</contents></src-block><src-block language="emacs-lisp"><contents>(setq org-ref-default-citation-link &quot;autocite&quot;)
</contents></src-block><src-block language="emacs-lisp"><contents>(org-ref-define-citation-link &quot;citez&quot; ?z)
</contents></src-block><src-block language="emacs-lisp"><contents>(defun org-ref-cite-link-format (keyword desc format)
   (cond
    ((eq format &apos;html) (format &quot;(&lt;cite&gt;%s&lt;/cite&gt;)&quot; path))
    ((eq format &apos;latex)
     (concat &quot;\\cite&quot; (when desc (format &quot;[%s]&quot; desc)) &quot;{&quot;
	     (mapconcat (lambda (key) key) (org-ref-split-and-strip-string keyword) &quot;,&quot;)
	     &quot;}&quot;))))

(org-add-link-type
 &quot;cite&quot;
 &apos;org-ref-cite-onclick-minibuffer-menu ;; clicking function
 &apos;org-ref-cite-link-format) ;; formatting function
</contents></src-block><src-block language="bibtex"><contents>
@article{doi:10.1021/ie500588j,
author = {Okada, Tomohiko and Ozono, Shoya and Okamoto, Masami and Takeda, Yohei and Minamisawa, Hikari M. and Haeiwa, Tetsuji and Sakai, Toshio and Mishima, Shozi},
title = {Magnetic Rattle-Type Coreâ€“Shell Particles Containing Iron Compounds with Acid Tolerance by Dense Silica},
journal = {Industrial &amp; Engineering Chemistry Research},
volume = {0},
number = {0},
pages = {null},
year = {0},
doi = {10.1021/ie500588j},

URL = {http://pubs.acs.org/doi/abs/10.1021/ie500588j},
eprint = {http://pubs.acs.org/doi/pdf/10.1021/ie500588j}
}

</contents></src-block><src-block language="bibtex"><contents>@article{okada-2014-magnet-rattl,
  author =	 {Okada, Tomohiko and Ozono, Shoya and Okamoto, Masami
                  and Takeda, Yohei and Minamisawa, Hikari M. and
                  Haeiwa, Tetsuji and Sakai, Toshio and Mishima,
                  Shozi},
  title =	 {Magnetic Rattle-Type Core-Shell Particles Containing
                  Iron Compounds with Acid Tolerance by Dense Silica},
  journal =	 {Industrial \&amp; Engineering Chemistry Research},
  volume =	 0,
  pages =	 {null},
  year =	 2014,
  doi =		 {10.1021/ie500588j},
  number =	 0,
  url =		 {http://pubs.acs.org/doi/abs/10.1021/ie500588j},
  eprint =	 {http://pubs.acs.org/doi/pdf/10.1021/ie500588j},
}


</contents></src-block><src-block language="emacs-lisp"><contents>;; variables that control bibtex key format for auto-generation
;; I want firstauthor-year-title-words
;; this usually makes a legitimate filename to store pdfs under.
(setq bibtex-autokey-year-length 4
      bibtex-autokey-name-year-separator &quot;-&quot;
      bibtex-autokey-year-title-separator &quot;-&quot;
      bibtex-autokey-titleword-separator &quot;-&quot;
      bibtex-autokey-titlewords 2
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)
</contents></src-block></src-blocks>
#+end_example

Now,

A configuration

#+BEGIN_SRC text :tangle swish-org2xml.conf
# Example configuration file

# Tell Swish-e what to directories to index
IndexDir /Users/jkitchin/blogofile-jkitchin.github.com/_blog
IndexDir /Users/jkitchin/blogofile-jkitchin.github.com/_site

# where to save the index
IndexFile /Users/jkitchin/blogofile-jkitchin.github.com/_blog/index-swish-org.swish-e

# What to index
IndexOnly .org

# Tell Swish-e that .txt files are to use the XML parser.
IndexContents XML* .org

# index all tags for searching
UndefinedMetaTags auto
UndefinedXMLAttributes auto
#+END_SRC

The indexing command:

#+BEGIN_SRC sh
swish-e -S prog -i ./swish-org.el
#+END_SRC

* volatile helm-swish-e
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-09 Thu 21:15
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

odd. does not always find everything in volatile mode.
#+BEGIN_SRC emacs-lisp
(defun swish-e-suggest () (message helm-pattern)
  (helm-swish-e-candidates helm-pattern))

(setq swish-e-source  `((name . ,(format "swish-e: %s" helm-input))
			(candidates . (lambda () (funcall 'swish-e-suggest)))
			(action . (("open" . (lambda (f)
					       (find-file (car f))))))
			(volatile)))

(helm-other-buffer 'swish-e-source "*swish-e*")

(helm :sources '(swish-e-source))
#+END_SRC

* old acronym code			 :ARCHIVE:
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-09 Thu 21:17
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(defun highlight-tla ()
  "Highlight three letter acronyms."
  ;; First we have to get them.
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "\\(?1:\\(?2:[A-Z]\\)[a-z]+\\) \\(?3:\\(?4:[A-Z]\\)[a-z]+\\) \\(?5:\\(?6:[A-Z]\\)[a-z]+\\) (\\(?8:\\2\\4\\6\\))" nil t)
      (let ((TLA (match-string 8))
	    (definition (match-string 0)))
	(button-lock-set-button
	 TLA
	 nil
	 :help-echo definition)))))

(highlight-tla)
#+END_SRC
#+RESULTS:

TLA is a DFT


#+BEGIN_SRC emacs-lisp
(require 'rx)
(defun highlight-tla-2 ()
  "Highlight three letter acronyms."
  ;; First we have to get them.
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
	    (rx
	     ;; group the three words into group 1
	     (group-n
	      1
	      ;; first word, with first letter grouped
	      (group-n
	       2
	       upper)
	       (1+ letter)
	      (1+ space)
	      (group-n
	       3
	       upper)
	       (1+ letter)
	      (1+ space)
	      (group-n
	       4
	       upper)
	       (1+ letter))
	     (1+ space)
	     (group-n
	      5
	      "(" (backref 2) (backref 3) (backref 4) ")"))
	    nil t)
      (let ((TLA (match-string 5))
	    (definition (match-string 1)))
        (message-box "%s: %s" TLA definition)
	(button-lock-set-button
	 TLA
	 nil				; no click function
	 :help-echo definition)))))

(highlight-tla-2)
#+END_SRC
#+RESULTS:

Density Tunctional Theory (DTT)  DTT  DFT

* Is an external http(s) link valid?
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-09 Thu 21:18
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:


#+BEGIN_SRC emacs-lisp
(condition-case err
  (url-http-file-exists-p "http://bad.url")
 (error nil))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
(condition-case err
  (url-http-file-exists-p "http://kitchingroup.cheme.cmu.edu")
 (error nil))
#+END_SRC

#+RESULTS:
: t

* A helm interface to org-contacts
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:23
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(defun oc-email (_)
 (interactive)
 (message-box "%s"
	      (mapconcat
	       (lambda (x)
		 (cdr (assoc "EMAIL" (elt x 1))))
	       (helm-marked-candidates :with-wildcard t)
	       ",")))


(defun oc-open-entry (selection)
 (let ((mark (car selection)))
   (switch-to-buffer (marker-buffer mark))
   (goto-char (marker-position mark))
   (show-subtree)))


(defun oc-open-url (selection)
  (let ((url (cdr (assoc "URL" (elt selection 1)))))
    (when url
      (browse-url url))))


(defvar helm-source-org-contacts
  '((name                            . "Contacts")
    (candidates                      . org-contaqcts-db)
    (action . (("Email"              . oc-email)
	       ("web"                . oc-open-url)
               ("Show entry"         . oc-open-entry))))
  "Source for searching in org-contacts.")

(defun helm-org-contacts ()
  "Search BibTeX entries."
  (interactive)
  (helm :sources '(helm-source-org-contacts)
        :candidate-number-limit 500))
#+END_SRC

#+RESULTS:
: helm-org-contacts

* org-ref-helm
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:24
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
Inspired by [[https://github.com/tmalsburg/helm-bibtex][helm-bibtex]], here I explore a way to insert citations using some helm-bibtex machinery. The gist of helm-bibtex is it scans your bib files, offers spectacular search and select capability, and then your choice of actions on those. The default action is to open the pdf, but I want the default action to be to insert a link.

#+BEGIN_SRC emacs-lisp
(require 'helm-bibtex)

(defun helm-bibtex-format-org-ref (keys)
  "insert selected KEYS as cite link. Append KEYS if you are on a link."
  (let ((el (org-element-context)))
    (message "%s" el)
    (if (eq 'link (car el))
	(progn
	  (goto-char (org-element-property :end el))
	  (concat "," (s-join "," keys)))
      (concat "cite:" (s-join "," keys)))))

(setq helm-bibtex-format-citation-functions
      '((org-mode . helm-bibtex-format-org-ref)))


(defvar org-ref-helm-source-bibtex
  '((name                                      . "BibTeX entries")
    (init                                      . helm-bibtex-init)
    (candidates                                . helm-bibtex-candidates)
    (filtered-candidate-transformer            . helm-bibtex-candidates-formatter)
    (action . (("Insert citation"              . helm-bibtex-insert-citation)
	       ("Open PDF file (if present)"   . helm-bibtex-open-pdf)
               ("Open URL or DOI in browser"   . helm-bibtex-open-url-or-doi)
               ("Insert reference"             . helm-bibtex-insert-reference)
               ("Insert BibTeX key"            . helm-bibtex-insert-key)
               ("Insert BibTeX entry"          . helm-bibtex-insert-bibtex)
               ("Attach PDF to email"          . helm-bibtex-add-PDF-attachment)
               ("Edit notes"                   . helm-bibtex-edit-notes)
               ("Show entry"                   . helm-bibtex-show-entry))))
  "Source for searching in BibTeX files.")

;;;###autoload
(defun org-ref-helm-bibtex ()
  "Search BibTeX entries."
  (interactive)
  (helm :sources '(org-ref-helm-source-bibtex helm-source-fallback-options)
        :full-frame t
        :candidate-number-limit 500))
#+END_SRC

#+RESULTS:
: org-ref-helm-bibtex

* Find org-files that mention a citation
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:24
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:




I want to find all my org-files in some tree that cite this paper cite:kitchin-2004-role.

#+BEGIN_SRC emacs-lisp
(rgrep "kitchin-2004-role\\(;\\|:\\|.\\|,\\| \\)" "*.org" "~/Dropbox/CMU/manuscripts")
#+END_SRC

#+RESULTS:

kitchin-2004-role-strain



#+BEGIN_SRC emacs-lisp
(switch-to-buffer (grep-find "find ~/Dropbox/CMU/manuscripts -type f -name \"*.org\" -exec grep -nH -e  \"kresse-1996-effic\\(;\\|:\\|.\\|,\\| \\)\" {} +"))
#+END_SRC
#+RESULTS:
: #<buffer *grep*>

cite:kresse-1996-effic


#+BEGIN_SRC emacs-lisp
(switch-to-buffer (grep-find "find ~/Dropbox/CMU/manuscripts -type f -name \"*.org\" -exec grep -nH -e  \"kitchin-\" {} +"))
#+END_SRC
#+RESULTS:
: #<buffer *grep*>

From techela
#+BEGIN_SRC emacs-lisp
(multi-occur (mapcar 'find-file-noselect
		     (-filter
		      'file-exists-p
		      (files-in-below-directory
		       "~/Dropbox/CMU/manuscripts")))
	     "kitchin-2004-strain")
#+END_SRC
#+RESULTS:
: t

This returns t, it does not work!
#+BEGIN_SRC emacs-lisp
(multi-occur (mapcar 'find-file-noselect
		     (f-entries "~/Dropbox/CMU/manuscripts"
				(lambda (f) (string= (f-filename f) "manuscript.org")) t))
	     "kitchin-2004-strain")
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp
(helm-multi-occur (mapcar 'find-file-noselect
		     (f-entries "~/Dropbox/CMU/manuscripts"
				(lambda (f) (string= (f-filename f) "manuscript.org")) t)))
#+END_SRC

* crossref + doi
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:24
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

[[http://www.crossref.org/][crossref.org]]

#+BEGIN_SRC emacs-lisp
(let ((url-request-method "GET")
      (json-object-type 'plist)
      (json-data))
  (with-current-buffer
      (url-retrieve-synchronously
       "http://search.crossref.org/dois?q=john+kitchin+catalysis&&rows=3")
      (setq json-data (buffer-substring url-http-end-of-headers (point-max)))
      (json-read-from-string json-data)))
#+END_SRC
#+RESULTS:
: [(:year "2012" :coins "ctx_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2Fhttp%3A%2F%2Fdx.doi.org%2F10.1007%2Fs11244-012-9808-0&amp;rfr_id=info%3Asid%2Fcrossref.org%3Asearch&amp;rft.atitle=Preface%3A+Trends+in+Computational+Catalysis&amp;rft.jtitle=Topics+in+Catalysis&amp;rft.date=2012&amp;rft.volume=55&amp;rft.issue=5-6&amp;rft.spage=227&amp;rft.epage=228&amp;rft.aufirst=John&amp;rft.aulast=Kitchin&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.au=John+Kitchin" :fullCitation "John Kitchin, 2012, 'Preface: Trends in Computational Catalysis', <i>Topics in Catalysis</i>, vol. 55, no. 5-6, pp. 227-228" :title "Preface: Trends in Computational Catalysis" :normalizedScore 100 :score 3.5252514 :doi "http://dx.doi.org/10.1007/s11244-012-9808-0") (:year "2012" :coins "ctx_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2Fhttp%3A%2F%2Fdx.doi.org%2F10.1039%2F9781849734776-00083&amp;rfr_id=info%3Asid%2Fcrossref.org%3Asearch&amp;rft.atitle=Coverage+dependent+adsorption+properties+of+atomic+adsorbates+on+late+transition+metal+surfaces&amp;rft.jtitle=Catalysis&amp;rft.date=2012&amp;rft.spage=83&amp;rft.epage=115&amp;rft.aufirst=Spencer&amp;rft.aulast=Miller&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.au=Spencer+Miller&amp;rft.au=+Carmeline+Dsilva&amp;rft.au=+John+R.+Kitchin" :fullCitation "Spencer Miller, Carmeline Dsilva, John R. Kitchin, 2012, 'Coverage dependent adsorption properties of atomic adsorbates on late transition metal surfaces', <i>Catalysis</i>, pp. 83-115" :title "Coverage dependent adsorption properties of atomic adsorbates on late transition metal surfaces" :normalizedScore 85 :score 3.021644 :doi "http://dx.doi.org/10.1039/9781849734776-00083") (:year "2014" :coins "ctx_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2Fhttp%3A%2F%2Fdx.doi.org%2F10.1016%2Fj.catcom.2013.10.028&amp;rfr_id=info%3Asid%2Fcrossref.org%3Asearch&amp;rft.atitle=Relating+the+electronic+structure+and+reactivity+of+the+3d+transition+metal+monoxide+surfaces&amp;rft.jtitle=Catalysis+Communications&amp;rft.date=2014&amp;rft.volume=52&amp;rft.spage=60&amp;rft.epage=64&amp;rft.aufirst=Zhongnan&amp;rft.aulast=Xu&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.au=Zhongnan+Xu&amp;rft.au=+John+R.+Kitchin" :fullCitation "Zhongnan Xu, John R. Kitchin, 2014, 'Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces', <i>Catalysis Communications</i>, vol. 52, pp. 60-64" :title "Relating the electronic structure and reactivity of the 3d transition metal monoxide surfaces" :normalizedScore 85 :score 3.021644 :doi "http://dx.doi.org/10.1016/j.catcom.2013.10.028")]

#+BEGIN_SRC emacs-lisp
(url-hexify-string "10.1016/j.catcom.2013.10.028")
#+END_SRC
#+RESULTS:
: 10.1016%2Fj.catcom.2013.10.028

#+BEGIN_SRC emacs-lisp
(url-unhex-string "10.1016%2Fj.catcom.2013.10.028")
#+END_SRC
#+RESULTS:
: 10.1016/j.catcom.2013.10.028

#+BEGIN_SRC emacs-lisp
(defun cross-ref-search ()
  (interactive)
  (browse-url
   (format
    "http://search.crossref.org/?q=%s"
    (if (use-region-p)
	(url-hexify-string (buffer-substring
			    (region-beginning)
			    (region-end)))
      (read-string "string: ")))))
#+END_SRC

* More doi utility functions
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:25
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(defun doi-utils-google-scholar (doi)
 "DOI can be any query."
 (interactive "sDOI: ")
 (browse-url (format "http://scholar.google.com/scholar?hl=en&q=%s" (url-hexify-string doi))))

(doi-utils-google-scholar "10.1021/jp047349j")
#+END_SRC

#+RESULTS:
: #<process open http://scholar.google.com/scholar?hl=en&q=10.1021%2Fjp047349j>

#+BEGIN_SRC emacs-lisp
(defun doi-utils-crossref (doi)
 (interactive "sDOI: ")
 (browse-url (format "http://search.crossref.org/?q=%s" (url-hexify-string doi))))

(doi-utils-crossref "10.1021/jp047349j")
#+END_SRC

#+RESULTS:
: #<process open http://search.crossref.org/?q=10.1021%2Fjp047349j>

http://wokinfo.com/products_tools/products/related/webservices/

I requested access for this ip address: 128.2.54.215
[[google:my ip address]]

soap
http://search.isiknowledge.com/esti/wokmws/ws/


#+BEGIN_SRC emacs-lisp
(defun doi-utils-ads (query)
 "run QUERY in the Harvard abstract simple search."
 (interactive "sQuery: ")
 (browse-url (format "http://adsabs.harvard.edu/cgi-bin/nph-basic_connect?qsearch=%s&version=1" (url-hexify-string doi))))

(doi-utils-ads "kitchin and barteau")
#+END_SRC

#+RESULTS:
: #<process open http://adsabs.harvard.edu/cgi-bin/nph-basic_connect?qsearch=kitchin%20and%20barteau&version=1>

* Setting up gnus for email
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:27
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
I have used gmail for a long time. There is a lot I like about it. Email for me is information that comes to me that I need to read, handle in some way, and then move on to the next thing. I do not store things in email, and I do not file or tag emails; I rely on gmail's search ability to find email if I ever need to (which I find is very rare). I aim for a zero-inbox with email, because that means there is nothing there I need to handle.

My typical workflow is to open my inbox, and read the new mails. If I can delete them immediately, I do that. If I can respond immediately, I do that and archive the email. If I need some time to reply, I store a link to the email in my todo list with a deadline (in org-mode, of course), and archive the email. If it will only be a day or so until I can reply, I sometimes leave it in my inbox and reply later. This works pretty well, and I usually have less than one screen of emails at any given time.

I have wanted to read email in emacs for a long time, because it would streamline the storing of links to emails, and I would not have to switch between firefox and emacs to do that. It would also make writing emails simpler for me. I already use gnus to read some newsgroups, so I want to also start reading email in it. gnus has some different ideas about mail, so I am trying to learn how to make it do what I want. By default, gnus only shows unread messages. I need it to show me all the messages in the inbox.

I also want some communication between gnus and gmail. If I delete a mail in gnus, I want it deleted in gmail. If I archive it in gnus, I want it archived in gmail. And, I want the send+archive behavior I like in gmail to work in gnus.

| open email               | RET     |
| reply                    |         |
| reply-all                |         |
| forward                  |         |
| send                     | C-c C-c |
| send and archive         |         |
| delete mail              |         |
| archive mail             |         |
| mark unread              | M-u     |
| capture mail in org-mode | C-c c e |


** Sending email

[[file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun%20message-send-and-exit%20(&optional%20arg)][file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun message-send-and-exit (&optional arg)]]

It looks like you can define these actions
message-exit-actions [[file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defvar%20message-exit-actions%20nil][file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defvar message-exit-actions nil]]

(defvar message-exit-actions nil
  "A list of actions to be performed upon exiting after sending a message.")

This looks like a list of functions that are called with no argument after the message is sent. see [[file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun%20message-do-actions%20(actions)][file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun message-do-actions (actions)]]

see [[file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/simple.el::(defun%20compose-mail%20(&optional%20to%20subject%20other-headers%20continue][file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/simple.el::(defun compose-mail (&optional to subject other-headers continue]] to see how to specify actions from compose-mail.

maybe it is possible to temporarily define a function to run. see http://www.gnu.org/software/emacs/manual/html_node/message/Message-Actions.html

[[file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun%20message-add-action%20(action%20&rest%20types)][file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun message-add-action (action &rest types)]]
[[file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun%20message-delete-action%20(action%20&rest%20types)][file:~/Dropbox/kitchingroup/jmax/emacs-24.3/lisp/gnus/message.el::(defun message-delete-action (action &rest types)]]
we need a temporary action! something like: http://www.chemie.fu-berlin.de/chemnet/use/info/elisp/elisp_13.html

  (apply 'message-add-action 'gt (list 'exit))
#+BEGIN_SRC emacs-lisp
(defmacro with-temp-message-action (action types &rest body)
  "temporarily have action for a message.
action is the same as the message-add-action definition
types is a list of 'exit 'postpone 'kill
body is the code to use in the temporary definition.
"
  (apply 'message-add-action action types)
  ,@body
  (apply 'message-delete action types))

(with-temp-message-action 'gt '(list 'exit)
			  (message "we workd"))
#+END_SRC

#+BEGIN_SRC emacs-lisp

(defun gt () (message "whoo"))
(add-to-list 'message-exit-actions 'gt)

(compose-mail "jkitchin@cmu.edu" "test")
#+END_SRC

#+RESULTS:
: t

we also have message-sent-hookand message-send-hook

let us try a variation with that:

#+BEGIN_SRC emacs-lisp
(defun org-contacts-gnus-article-to-get-marker ()
  "Return a marker for a contact based on From."
  (let* ((address (mail-extract-address-components
         (or (mail-fetch-field "To") "")))
         (name (car address))
         (email (cadr address)))
    (when email
    (cadar (or (org-contacts-filter
                nil
		nil
                (cons org-contacts-email-property (concat "\\b" (regexp-quote email) "\\b")))
               (when name
                 (org-contacts-filter
                  (concat "^" name "$"))))))))


(defun org-contacts-gnus-store-last-sent-mail ()
  "Store a link between mails and contacts.

This function should be called from `message-send-hook'."
(interactive)
  (let ((marker (org-contacts-gnus-article-to-get-marker)))
    (when marker
      (with-current-buffer (marker-buffer marker)
        (save-excursion
          (goto-char marker)
	  (org-set-property "LAST_SENT_MAIL" (current-time-string)))))))

(add-hook 'message-send-hook 'org-contacts-gnus-store-last-sent-mail)
#+END_SRC

#+RESULTS:
| org-contacts-gnus-store-last-sent-mail |

* extracting an org-contact from a gnus message
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:27
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
** getting it in the From field

try to get name from mail
#+BEGIN_SRC emacs-lisp
(defun gne ()
  (interactive)
  (if (org-contacts-gnus-article-from-get-marker)
      (message "you have that contact")
    (message "%s" (org-contacts-gnus-get-name-email))))
#+END_SRC

#+RESULTS:
: gne

try sticking entry in. you run this from a gnus article. should this happen automatically? we should
#+BEGIN_SRC emacs-lisp
(defun hare ()
  (interactive)
(let ((org-contacts-files '("test-contacts.org")))

  (let* ((r (org-contacts-gnus-get-name-email))
	 (name (nth 0 r))
	 (email (nth 1 r)))
    (find-file "test-contacts.org")
    (end-of-buffer)
    (insert (format "\n* %s" name))
    (org-entry-put (point) "EMAIL" email)
    (org-entry-put (point) "CREATED" (current-time-string))
    (save-buffer))))
#+END_SRC

#+RESULTS:
: hare

#+BEGIN_SRC emacs-lisp

#+END_SRC

* getting emails in org-contacts by tags
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:28
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
#+BEGIN_SRC emacs-lisp
(find-file "contacts-bbdb.org")
(let ((todo-only nil))
  (org-scan-tags
   (lambda ()
     (org-entry-get (point) "EMAIL")) ; action
  (cdr (org-make-tags-matcher "group-ms")) ; matcher
nil))
#+END_SRC

#+RESULTS:
| jboes@cmu.edu | mehakc@andrew.cmu.edu | mcurnan@andrew.cmu.edu | qingqif@andrew.cmu.edu | ahallenb@andrew.cmu.edu | jdmichae@andrew.cmu.edu | zhongnanxu@cmu.edu |


#+BEGIN_SRC emacs-lisp :results raw
(find-file "contacts-bbdb.org")
(let ((todo-only nil))
   (cdr (org-make-tags-matcher "group-phd")))
#+END_SRC

#+RESULTS:
(and (progn (setq org-cached-props nil) (and (not (member phd tags-list)) (member group tags-list))) t)


#+BEGIN_SRC emacs-lisp
(defun insert-emails-from-tags (tags)
  (interactive "sTags: ")
  (insert
   (save-window-excursion
     (find-file "contacts-bbdb.org")
     (mapconcat
      'identity
      (let ((todo-only nil))
	(org-scan-tags
	 (lambda ()
	   (org-entry-get (point) "EMAIL")) ; action
	 (cdr (org-make-tags-matcher tags)) ; matcher
	 nil)) ", "))))
#+END_SRC

#+RESULTS:
: add-emails-from-tags

ngovinda@andrew.cmu.edu,meihengl@andrew.cmu.edu,wenqiny@andrew.cmu.edu

#+BEGIN_SRC emacs-lisp
(insert-emails-from-tags "{^co.*}") ;no return
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(insert-emails-from-tags "FIRSTNAME=\"John\"") ; no matches
#+END_SRC

#+RESULTS:

* Cleaning a bibtex entry
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:28
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(defun org-ref-clean-bibtex-entry()
  "clean and replace the key in a bibtex function"
  (interactive)
  (bibtex-beginning-of-entry)

  ;; check for empty pages, and put eid or article id in its place
  (let ((entry (bibtex-parse-entry))
	(pages (bibtex-autokey-get-field "pages"))
	(eid (bibtex-autokey-get-field "eid")))

    ;; fix pages if they are empty
    (cond
     ((string= "-" pages)
      (when eid
	(bibtex-beginning-of-entry)
	;; this seems like a clunky way to set the pages field.But I
	;; cannot find a better way.
	(goto-char (car (cdr (bibtex-search-forward-field "pages" t))))
	(bibtex-kill-field)
	(bibtex-make-field "pages")
	(backward-char)
	(insert eid))))

    ;; generate a key, and if it duplicates an existing key, edit it.
    (let ((key (bibtex-generate-autokey)))

      ;; first we delete the existing key
      (bibtex-beginning-of-entry)
      (re-search-forward bibtex-entry-maybe-empty-head)
      (if (match-beginning bibtex-key-in-head)
	  (delete-region (match-beginning bibtex-key-in-head)
			 (match-end bibtex-key-in-head)))
      ;; check if the key is in the buffer
      (when (save-excursion
	      (bibtex-search-entry key))
	  (setq key (bibtex-read-key "Duplicate Key found, edit: " key)))

      (insert key)
      (kill-new key)) ;; save key for pasting

    (bibtex-fill-entry)  ; this realigns the entry
    (bibtex-clean-entry) ; we do not replace our key

    ;; check for non-ascii characters
    (occur "[^[:ascii:]]")

    ;; one day reorder and downcase the fields
    ;; I can get all the fields like this
    ;; (bibtex-parse-entry t)
    ))
#+END_SRC

cite:daza-2014-carbon-dioxid

* Importing google contacts into bbdb
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-26 Sun 19:30
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

I am giving bbdb a try in emacs. I installed it from ELPA, and I am not sure if it is version 2 or 3, but it seems to work ok. The main reason I want it is so I can use email address completion in emails from Emacs.

The first thing I had to do was add this to my init files. Apparently the icicle-bbdb-complete-name function is not defined, so this takes care of that.
#+BEGIN_SRC emacs-lisp
;; This is not defined in my bbdb/icicles installation. This lets me use tab-completion.
(defalias 'icicle-bbdb-complete-name 'bbdb-complete-mail)
#+END_SRC

Next, I wanted to get my google contacts into bbdb. I am only going to do this once, to get most of what I need in. In the future, I suppose I will just add new contacts manually.  So, first, I exported my google contacts to a csv file. Google does some crazy scraping, so there were nearly 4000 contacts in that list. Not all of them were emails. I used this little python script to write out the first 5 columns of that file to a new file, as long as there was something in the first column.

#+BEGIN_SRC python
import csv

with open('contacts.csv', 'rb') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=',')

    with open('new-contacts.csv', 'w') as f:
        for row in spamreader:
            if row[0]:
                f.write(','.join(row[0:5])+'\n')
                print ','.join(row[0:5])
#+END_SRC

Then, I manually went through the file deleting many obviously bad entries. It was just shy of interesting to see what was in there. I renamed the first line to have heading names with no spaces in them. So, the csv file eventually looked like this:

#+BEGIN_EXAMPLE
fname,mname,lname,email1,email2
Jennifer,,blahlan,fda@andrew.cmu.edu,
#+END_EXAMPLE


From there, I found a csv elisp file (http://ulf.epplejasper.de/EmacsGeneralPurpose.html) that can import a csv file to a lisp data structure. So, I read in the csv file, and then applied a function to each entry that created a bbdb entry with the information in the csv entry like this:

#+BEGIN_SRC emacs-lisp
#+BEGIN_SRC emacs-lisp
(let* ((b (find-file "new-contacts.csv"))
       (bbdb-allow-duplicates t)
       (contents (csv-parse-buffer t b)))
  (mapcar (lambda (x)
	    (let* ((fname (cdr (nth 0 x)))
		   (mname (cdr (nth 1 x)))
		   (lname (cdr (nth 2 x)))
		   (email1 (cdr (nth 3 x)))
		   (name (format "%s %s %s" fname mname lname)))
	      (bbdb-create-internal name nil nil nil email1))) contents))
#+END_SRC

Setting =(bbdb-allow-duplicates t)= was probably a mistake, it would have been better to leave this a false, catch the errors, and continue. But, it is easy to find duplicates in bbdb, and then manually delete them. In the end, I have 2648 "contacts" in my bbdb

* Sending email in emacs
  :PROPERTIES:
  :categories: emacs,email
  :ARCHIVE_TIME: 2015-07-26 Sun 19:31
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

I would like to be able to regularly send email from emacs (one day I would like to read it too). The reason for this is simply that I have a lot of information stored in files I often read in Emacs, and I want to be able to select that information and quickly email it to someone. I need this to work smoothly on Windows and Linux.

There are numerous blog posts on how to set this up, but many are out of date, or work on Linux only.  Here I am documenting what seems to work for me. In my emacs init files, I have this:


#+BEGIN_SRC text :tangle ~/.authinfo
machine smtp.andrew.cmu.edu login jkitchin port 587 password blahbity-blah
#+END_SRC

Note that this file has my actual password in it.

Now, I can type C-x m to start an email, or use one my functions to email a selection or org-heading, and the emails get sent.
- [X] home office
- [ ] home tablet
- [ ] office slate
- [ ] office linux
- [ ] office laptop

** take 1

Here I am following this post http://wideaperture.net/blog/?p=3343

#+BEGIN_SRC emacs-lisp
;;Configure Outbound Mail

;;Tell the program who you are

(setq user-full-name "John Kitchin")
(setq user-mail-address "johnrkitchin@gmail.com")

;;Tell Emacs to use GNUTLS instead of STARTTLS
;;to authenticate when sending mail.

(setq starttls-use-gnutls t)

;;Tell Emacs about your mail server and credentials

(setq send-mail-function 'smtpmail-send-it
      message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials
      '(("smtp.gmail.com" 587 nil nil))

      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-debug-info t)
(require 'smtpmail)
#+END_SRC

(require 'gnutls)
(open-gnutls-stream "tls" "tls-buffer" "imap.aim.com" "imaps")

ftp://ftp.gnutls.org/gcrypt/gnutls/w32/

this needs a .authinfo file. it works on home-office computer, but not on home tablet.

#+BEGIN_SRC text
machine smtp.andrew.cmu.edu login jkitchin port 587 password jfkdlajfdkl;
machine cyrus.andrew.cmu.edu login jkitchin password fjdkslafjsdkals

#+END_SRC

** Using msmtp
this worked on my home tablet

http://www.emacswiki.org/emacs/GnusMSMTP

#+BEGIN_SRC emacs-lisp
;; This is needed to allow msmtp to do its magic:
(setq message-sendmail-f-is-evil 't)

;;need to tell msmtp which account we're using
(setq message-sendmail-extra-arguments '("--read-envelope-from"))

;; with Emacs 23.1, you have to set this explicitly (in MS Windows)
;; otherwise it tries to send through OS associated mail client
(setq message-send-mail-function 'message-send-mail-with-sendmail)
;; we substitute sendmail with msmtp
(setq sendmail-program "c:/Users/jkitchin/Desktop/GetGnuWin32/bin/msmtp.exe")
;;need to tell msmtp which account we're using
(setq message-sendmail-extra-arguments '("-a" "gmail"))
;; you might want to set the following too
(setq mail-host-address "gmail.com")
(setq user-full-name "John Kitchin")
(setq user-mail-address "johnrkitchin@gmail.com")
#+END_SRC
#+RESULTS:
: johnrkitchin@gmail.com


It appears we have an msmtp installed from our git installation.


#+BEGIN_SRC sh
which msmtp
#+END_SRC

#+RESULTS:
: C:\Program Files (x86)\Git\bin\msmtp.EXE

We can check the version like this.

#+BEGIN_SRC sh
msmtp --version
#+END_SRC

#+RESULTS:
#+begin_example
msmtp version 1.4.17
TLS/SSL library: OpenSSL
Authentication library: GNU SASL
Supported authentication methods:
plain cram-md5 digest-md5 external login
IDN support: disabled
NLS: disabled
Keyring support: none
System configuration file name: C:\ProgramData\msmtprc.txt
User configuration file name: c:/Users/jkitchin/\msmtprc.txt

Copyright (C) 2008 Martin Lambers and others.
This is free software.  You may redistribute copies of it under the terms of
the GNU General Public License <http://www.gnu.org/licenses/gpl.html>.
There is NO WARRANTY, to the extent permitted by law.
#+end_example

It is not the most recent version. Next, create c:/Users/jkitchin/\msmtprc.txt with contents that look like this. I have two accounts that I could send email from, and they are listed here.

#+BEGIN_SRC text
########################
account default
host smtp.andrew.cmu.edu
tls on
tls_certcheck off
auth on
from jkitchin@andrew.cmu.edu
user jkitchin
password tjkdjfkd
port 587
logfile c:\msmtplog.txt
########################
account gmail
host smtp.gmail.com
tls on
tls_certcheck off
auth on
from johnrkitchin@gmail.com
user johnrkitchin@gmail.com
password fjdklafd
port 587

logfile c:\msmtplog.txt
########################
#+END_SRC

Now we follow the suggestions at http://www.emacswiki.org/emacs/GnusMSMTP to configure emacs

#+BEGIN_SRC emacs-lisp
;; This is needed to allow msmtp to do its magic:
(setq message-sendmail-f-is-evil 't)

;;need to tell msmtp which account we're using
(setq message-sendmail-extra-arguments '("--read-envelope-from"))

(setq message-send-mail-function 'message-send-mail-with-sendmail)

;; we substitute sendmail with msmtp
(setq sendmail-program "C:/Program Files (x86)/Git/bin/msmtp.EXE")

;;need to tell msmtp which account we're using
(setq message-sendmail-extra-arguments '("-a" "andrew"))
#+END_SRC
