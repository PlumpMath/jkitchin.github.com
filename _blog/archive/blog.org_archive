#    -*- mode: org -*-


Archived entries from file c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org


* jorg-bib features
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-06-24 Tue 21:35
  :ARCHIVE_FILE: ~/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

1. Integration with reftex. You type C-c ] and select keys from reftex and insert a cite link. If you type it again on a citation, the new entries are appended to the end.

2. Clickable cite links. If you have a citation link like cite:key1,key2,key3 you can click on key1 and open the bibliography file to key1, and you can click on key2 and have it open at key 2. This link would export in latex as \cite{key1,key2,key3}. Other cite formats, e.g. citep, citep*, etc... are defined too, but are relatively untested.

3. citation tooltips. If clicking is too disruptive, you can run a command and get a tooltip of the citation under point.

4. clickable label links. clicking checks the buffer for another label by the same name.

5. Clickable ref links. Clicking on the ref:label takes you to the label, and provides C-c & to get back to that point.

6. A bibliographystyle and bibliography link. The bibliography link opens the bibtex file that was clicked on.

7. Code to make a clickable list of figures and tables.

8. Code to extract the bibtex entries cited in an org-file to a text block at the end of the org-file

9. variables to point to a notes file and pdf directory, and functions to jump to your notes and the pdf file from a bibtex entry.

10. a function to build a complete pdf bibliography from your bibtex file. This is handy for checking the entries are spelled correctly, etc...

11. A little function and python script to upload a bibtex entry to citeulike.

[[cite:bernard-1991-ac]]

bibliography:../../bibliography/references.bib


* Bug report 2 for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 10:44
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

Here is a named table
#+tblname: tbl-data
| x | y |
|---+---|
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Here is a named src-block with a defined var
#+name: print-table
#+BEGIN_SRC python :var data=tbl-data :results value
return data 
#+END_SRC


Now, we illustrate that the src-block does have :parameters.
#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
  (re-search-backward "#\\+name: print-table")
  (buffer-substring
   (org-element-property :begin (org-element-at-point))
   (org-element-property :end (org-element-at-point))))
#+END_SRC

#+RESULTS: get-properties
: #+name: print-table
: #+BEGIN_SRC python :var data=tbl-data :results value
: return data 
: #+END_SRC
: 
: 

In the export machinery, though it appears the src-block is not the same.

#+BEGIN_SRC emacs-lisp :results output :exports none
(defun my-src-block (src-block contents info)

  (princ (buffer-substring
	  (org-element-property :begin src-block)
	  (org-element-property :end src-block)))
  
    (org-export-format-code-default src-block info))

(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((src-block . my-src-block)))

(org-export-to-file 'my-html "custom-src-table-export.html")
#+END_SRC
#+RESULTS:
#+begin_example
#+name: print-table
#+BEGIN_SRC python
return data 
#+END_SRC


#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
  (re-search-backward "#\\+name: print-table")
  (buffer-substring
   (org-element-property :begin (org-element-at-point))
   (org-element-property :end (org-element-at-point))))
#+END_SRC

#+end_example

The parameters seem to be gone.

* Bug report for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 10:44
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

Here is a named table
#+tblname: tbl-data
| x | y |
|---+---|
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Here is a named src-block with a defined var
#+name: print-table
#+BEGIN_SRC python :var data=tbl-data :results value
return data 
#+END_SRC




#+RESULTS: print-table
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Now, we illustrate that the src-block does have :parameters.
#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
(re-search-backward "#\\+name: print-table")
(org-element-property :parameters (org-element-at-point)))
#+END_SRC

#+RESULTS: get-properties
: :var data=tbl-data :results value

In the export machinery, though it appears the src-block does not.


#+BEGIN_SRC emacs-lisp :results output
(defun my-src-block (src-block contents info)

  (princ (concat
	  (format "[language: %s]\n" (org-element-property :language src-block))
	  (format "name: %s\n" (org-element-property :name src-block))
	  (format "parameters: %s\n\n" (org-element-property :parameters src-block))))
    (org-export-format-code-default src-block info))

(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((src-block . my-src-block)))

(org-export-to-file 'my-html "custom-src-table-export.html")
#+END_SRC
#+RESULTS:
#+begin_example
[language: python]
name: print-table
parameters: nil

[language: emacs-lisp]
name: get-properties
parameters: nil

[language: emacs-lisp]
name: nil
parameters: nil

#+end_example

The parameters are nil in each case, even though we know the print-table block should have parameters. I think that is a bug.

* Odd behavior in python src-blocks in org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 12:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

This block should raise an error (and does) because k is not defined.
#+BEGIN_SRC python
def f(y, x):
    return k * y

print(f(1, 0))
#+END_SRC

#+RESULTS:

It raises this error.

#+BEGIN_EXAMPLE
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
  File "<stdin>", line 2, in f
NameError: global name 'k' is not defined
#+END_EXAMPLE

However, this code block actually executes, and gives the wrong answer! If I open the source block in Python mode, it does not run without error.

#+BEGIN_SRC python :results output
from scipy.integrate import odeint

def f(y, x):
    return k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.]
:  [ 1.]]

Here is the correct answer.

#+BEGIN_SRC python :results output
from scipy.integrate import odeint

k = -1
def f(y, x):
    return k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.        ]
:  [ 0.36787947]]

#+BEGIN_SRC python :results output
def f(x):
    return x == (not x)

print f(None)
print not None
#+END_SRC

#+RESULTS:
: False
: True

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python -m pycse.sandbox")
#+END_SRC
#+BEGIN_SRC python
from scipy.integrate import odeint

k = -1

def f(y, x):
    return -k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.        ]
:  [ 2.71828193]]
: 
: 






