#    -*- mode: org -*-


Archived entries from file c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org


* jorg-bib features
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-06-24 Tue 21:35
  :ARCHIVE_FILE: ~/Dropbox/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

1. Integration with reftex. You type C-c ] and select keys from reftex and insert a cite link. If you type it again on a citation, the new entries are appended to the end.

2. Clickable cite links. If you have a citation link like cite:key1,key2,key3 you can click on key1 and open the bibliography file to key1, and you can click on key2 and have it open at key 2. This link would export in latex as \cite{key1,key2,key3}. Other cite formats, e.g. citep, citep*, etc... are defined too, but are relatively untested.

3. citation tooltips. If clicking is too disruptive, you can run a command and get a tooltip of the citation under point.

4. clickable label links. clicking checks the buffer for another label by the same name.

5. Clickable ref links. Clicking on the ref:label takes you to the label, and provides C-c & to get back to that point.

6. A bibliographystyle and bibliography link. The bibliography link opens the bibtex file that was clicked on.

7. Code to make a clickable list of figures and tables.

8. Code to extract the bibtex entries cited in an org-file to a text block at the end of the org-file

9. variables to point to a notes file and pdf directory, and functions to jump to your notes and the pdf file from a bibtex entry.

10. a function to build a complete pdf bibliography from your bibtex file. This is handy for checking the entries are spelled correctly, etc...

11. A little function and python script to upload a bibtex entry to citeulike.

[[cite:bernard-1991-ac]]

bibliography:../../bibliography/references.bib


* Bug report 2 for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 10:44
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

Here is a named table
#+tblname: tbl-data
| x | y |
|---+---|
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Here is a named src-block with a defined var
#+name: print-table
#+BEGIN_SRC python :var data=tbl-data :results value
return data
#+END_SRC


Now, we illustrate that the src-block does have :parameters.
#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
  (re-search-backward "#\\+name: print-table")
  (buffer-substring
   (org-element-property :begin (org-element-at-point))
   (org-element-property :end (org-element-at-point))))
#+END_SRC

#+RESULTS: get-properties
: #+name: print-table
: #+BEGIN_SRC python :var data=tbl-data :results value
: return data
: #+END_SRC
:
:

In the export machinery, though it appears the src-block is not the same.

#+BEGIN_SRC emacs-lisp :results output :exports none
(defun my-src-block (src-block contents info)

  (princ (buffer-substring
	  (org-element-property :begin src-block)
	  (org-element-property :end src-block)))

    (org-export-format-code-default src-block info))

(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((src-block . my-src-block)))

(org-export-to-file 'my-html "custom-src-table-export.html")
#+END_SRC
#+RESULTS:
#+begin_example
#+name: print-table
#+BEGIN_SRC python
return data
#+END_SRC


#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
  (re-search-backward "#\\+name: print-table")
  (buffer-substring
   (org-element-property :begin (org-element-at-point))
   (org-element-property :end (org-element-at-point))))
#+END_SRC

#+end_example

The parameters seem to be gone.

* Bug report for org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 10:44
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

Here is a named table
#+tblname: tbl-data
| x | y |
|---+---|
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Here is a named src-block with a defined var
#+name: print-table
#+BEGIN_SRC python :var data=tbl-data :results value
return data
#+END_SRC




#+RESULTS: print-table
| 1 | 1 |
| 2 | 4 |
| 3 | 9 |

Now, we illustrate that the src-block does have :parameters.
#+name: get-properties
#+BEGIN_SRC emacs-lisp
(save-excursion
(re-search-backward "#\\+name: print-table")
(org-element-property :parameters (org-element-at-point)))
#+END_SRC

#+RESULTS: get-properties
: :var data=tbl-data :results value

In the export machinery, though it appears the src-block does not.


#+BEGIN_SRC emacs-lisp :results output
(defun my-src-block (src-block contents info)

  (princ (concat
	  (format "[language: %s]\n" (org-element-property :language src-block))
	  (format "name: %s\n" (org-element-property :name src-block))
	  (format "parameters: %s\n\n" (org-element-property :parameters src-block))))
    (org-export-format-code-default src-block info))

(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((src-block . my-src-block)))

(org-export-to-file 'my-html "custom-src-table-export.html")
#+END_SRC
#+RESULTS:
#+begin_example
[language: python]
name: print-table
parameters: nil

[language: emacs-lisp]
name: get-properties
parameters: nil

[language: emacs-lisp]
name: nil
parameters: nil

#+end_example

The parameters are nil in each case, even though we know the print-table block should have parameters. I think that is a bug.

* Odd behavior in python src-blocks in org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-10-22 Wed 12:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)
#+END_SRC

#+RESULTS:

This block should raise an error (and does) because k is not defined.
#+BEGIN_SRC python
def f(y, x):
    return k * y

print(f(1, 0))
#+END_SRC

#+RESULTS:

It raises this error.

#+BEGIN_EXAMPLE
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
  File "<stdin>", line 2, in f
NameError: global name 'k' is not defined
#+END_EXAMPLE

However, this code block actually executes, and gives the wrong answer! If I open the source block in Python mode, it does not run without error.

#+BEGIN_SRC python :results output
from scipy.integrate import odeint

def f(y, x):
    return k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.]
:  [ 1.]]

Here is the correct answer.

#+BEGIN_SRC python :results output
from scipy.integrate import odeint

k = -1
def f(y, x):
    return k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.        ]
:  [ 0.36787947]]

#+BEGIN_SRC python :results output
def f(x):
    return x == (not x)

print f(None)
print not None
#+END_SRC

#+RESULTS:
: False
: True

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python -m pycse.sandbox")
#+END_SRC
#+BEGIN_SRC python
from scipy.integrate import odeint

k = -1

def f(y, x):
    return -k * y

print(odeint(f, 1, [0, 1]))
#+END_SRC

#+RESULTS:
: [[ 1.        ]
:  [ 2.71828193]]
:
:







* ARCHIVE bug in setting properties?	 :archive:
 :PROPERTIES:
 :categories: education
 :ANSWER:   4
 :ARCHIVE_TIME: 2014-11-30 Sun 17:15
 :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
 :ARCHIVE_CATEGORY: blog
 :END:

#+BEGIN_SRC emacs-lisp
(format "** %s
  :PROPERTIES:
  :ID: %s
:categories: test
  :END:
%s" "A headline" "some id" "some body text")
#+END_SRC
#+RESULTS:
: ** A headline
:   :PROPERTIES:
:   :ID: some id
:   :END:
: some body text



* Debugging emacs lockup
  :PROPERTIES:
  :ARCHIVE_TIME: 2014-12-23 Tue 16:05
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
#+BEGIN_SRC emacs-lisp
emacs-version
#+END_SRC

#+RESULTS:
: 24.4.50.1

#+BEGIN_SRC emacs-lisp
org-version
#+END_SRC

#+RESULTS:
: 8.2.7c


#+BEGIN_SRC emacs-lisp
(setq quiz5-key '(("2F5BCA86-1933-432F-9A8A-891339C05DF7" . "b")
		  ("784CF3B1-9158-410E-B97A-1E992221A4E6" . "d")
		  ("2301DBD3-BCDF-48AE-99EA-34F756CA1F27" . "d")
		  ("E741F064-A1A1-4A00-A581-7EF066DAE9A0" . "b")
		  ("51E3786D-D4E4-4156-A5ED-8C56C94022E8" . "d")
		  ("D54A69A5-7E1C-41EE-9698-3159E49784F7" . "c")
		  ("F19C2134-04D1-432D-81CC-16C54FE26844" . "e")
		  ("D2A37110-AA63-4691-B9AE-0E49756C798C" . "d")
		  ("EBA077D5-1853-41F1-AB8D-CC9C7D535608" . "d")
		  ("692514D4-A51C-43A0-AC2C-D60FED57E507" . "a")))

(defun grade-quiz5 ()
  "grade quiz 5, in an org-file."
  (interactive)
  (save-buffer)
  (let ((MAX)
	(points)
	(answer))

    (setq MAX (length quiz5-key)
	  points 0)

    (dolist (tup quiz5-key)
      (save-excursion
	(org-open-link-from-string
	 (format "id:%s" (car tup)))
	(setq answer (org-entry-get (point) "ANSWER"))
	(if (string= answer (cdr tup))
	    (progn
	      (setq points (+ 1 points))
	      (goto-char (point-max))
	      (insert (format "# id:%s: %s correct\n" (car tup) answer)))
	  (goto-char (point-max))
	  (insert (format "# id:%s: %s wrong (%s is correct)\n"
			  (car tup)
			  answer
			  (cdr tup)))
	  )))
      ;(gb-set-filetag "GRADE" (/ (float points) (float MAX)))
      ))

(grade-quiz5)
#+END_SRC
#+RESULTS:


I am not sure, but I suspect org-open-link is related to the problem. here I rewrite this using org-map-entries.

#+BEGIN_SRC emacs-lisp
(setq quiz5-key '(("2F5BCA86-1933-432F-9A8A-891339C05DF7" . "b")
		  ("784CF3B1-9158-410E-B97A-1E992221A4E6" . "d")
		  ("2301DBD3-BCDF-48AE-99EA-34F756CA1F27" . "d")
		  ("E741F064-A1A1-4A00-A581-7EF066DAE9A0" . "b")
		  ("51E3786D-D4E4-4156-A5ED-8C56C94022E8" . "d")
		  ("D54A69A5-7E1C-41EE-9698-3159E49784F7" . "c")
		  ("F19C2134-04D1-432D-81CC-16C54FE26844" . "e")
		  ("D2A37110-AA63-4691-B9AE-0E49756C798C" . "d")
		  ("EBA077D5-1853-41F1-AB8D-CC9C7D535608" . "d")
		  ("692514D4-A51C-43A0-AC2C-D60FED57E507" . "a")))

(defun grade-quiz5 ()
  "grade quiz 5, in an org-file."
  (interactive)
  (save-buffer)
  (let ((MAX)
	(points)
	(answer))

    (setq MAX (length quiz5-key)
	  points 0)

    (org-map-entries
     (lambda ()
       (setq answer (org-entry-get (point) "ANSWER")
             id (org-entry-get (point) "ID"))
       (when (and id answer)
	 (save-excursion
	   (if (string= answer (cdr (assoc id quiz5-key)))
	       (progn
		 (setq points (+ 1 points))
		 (goto-char (point-max))
		 (insert (format "%s# id:%s: %s correct\n"
				 (if (bolp) "" "\n")
				 id answer)))
	     ;; wrong answer
	     (goto-char (point-max))
	     (insert (format "%s# id:%s: %s wrong (%s is correct)\n"
			     (if (bolp) "" "\n")
			     id
			     answer
			     (cdr (assoc id quiz5-key)))))))))

    (gb-set-filetag "GRADE" (/ (float points) (float MAX)))))


(grade-quiz5)
#+END_SRC

#+RESULTS:

** questions
*** ID:1525
  :PROPERTIES:
  :ID:       2F5BCA86-1933-432F-9A8A-891339C05DF7
  :ANSWER:   b3
  :END:

*** ID:1524
  :PROPERTIES:
  :ID:       784CF3B1-9158-410E-B97A-1E992221A4E6
  :ANSWER:   d
  :END:

*** ID:1528
  :PROPERTIES:
  :ID:       2301DBD3-BCDF-48AE-99EA-34F756CA1F27
  :ANSWER:   d
  :END:

*** ID:1530
  :PROPERTIES:
  :ID:       E741F064-A1A1-4A00-A581-7EF066DAE9A0
  :ANSWER:   b
  :END:

*** ID:1532
  :PROPERTIES:
  :ID:       51E3786D-D4E4-4156-A5ED-8C56C94022E8
  :ANSWER:   d
  :END:

*** ID:1526
  :PROPERTIES:
  :ID:       D54A69A5-7E1C-41EE-9698-3159E49784F7
  :ANSWER:   c
  :END:

*** ID:1527
  :PROPERTIES:
  :ID:       F19C2134-04D1-432D-81CC-16C54FE26844
  :ANSWER:   e
  :END:

*** 183.
  :PROPERTIES:
  :ID:       D2A37110-AA63-4691-B9AE-0E49756C798C
  :ANSWER:   d
  :END:

*** 185.
  :PROPERTIES:
  :ID:       EBA077D5-1853-41F1-AB8D-CC9C7D535608
  :ANSWER:   d
  :END:

*** 176.
  :PROPERTIES:
  :ANSWER:   a
  :ID:       692514D4-A51C-43A0-AC2C-D60FED57E507
  :END:


** grade
# id:2F5BCA86-1933-432F-9A8A-891339C05DF7: b3 wrong (b is correct)
# id:784CF3B1-9158-410E-B97A-1E992221A4E6: d correct
# id:2301DBD3-BCDF-48AE-99EA-34F756CA1F27: d correct
# id:E741F064-A1A1-4A00-A581-7EF066DAE9A0: b correct
# id:51E3786D-D4E4-4156-A5ED-8C56C94022E8: d correct
# id:D54A69A5-7E1C-41EE-9698-3159E49784F7: c correct
# id:F19C2134-04D1-432D-81CC-16C54FE26844: e correct
# id:D2A37110-AA63-4691-B9AE-0E49756C798C: d correct
# id:EBA077D5-1853-41F1-AB8D-CC9C7D535608: d correct
# id:692514D4-A51C-43A0-AC2C-D60FED57E507: a correct
#+GRADE: 0.9

* numpy float64 comparisons
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 10:58
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC python
from __future__ import division
import numpy as np

class Unit(np.ndarray):
    __array_priority__ = 2
    def __new__(cls, input_array, exponents=None, label=None):
        obj = np.asarray(input_array).view(cls)
        obj.exponents = np.array(exponents)
        obj.label = label

        return obj

    def __eq__(self, other):
        'implement a==b for units'
        if not isinstance(other, Unit):
            raise Exception(['you should not compare objects'
                             ' with different units.'
                             ' {0} == {1}'.format(self, other)])

        return (np.all(self.exponents == other.exponents)
                and np.all(np.array(self) == np.array(other)))



# these all raise exceptions
print 2 == Unit(2, [1, 0, 0, 0, 0, 0, 0])
print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == 2

print np.float(2) == Unit(2, [1, 0, 0, 0, 0, 0, 0])
print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == np.float(2)

print np.float32(2) == Unit(2, [1, 0, 0, 0, 0, 0, 0])
print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == np.float32(2)

print Unit(2, [1, 0, 0, 0, 0, 0, 0]) == np.float64(2)


# this should raise an exception, but it does not
print np.float64(2) == Unit(2, [1, 0, 0, 0, 0, 0, 0])



#+END_SRC

#+RESULTS:

* Making an index and glossary in org-mode
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:01
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
#+LATEX_CLASS: cmu-article
#+LATEX_HEADER: \usepackage{makeidx}
#+LATEX_HEADER: \usepackage{glossaries}
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \makeindex
#+LATEX_HEADER: \makeglossaries



index:keyword

some text

index:index!link

more text
index:hello
index:hello!Peter
[[index:hello!Sam@\textsl{Sam}]]
[[index:Lin@\textbf{Lin}]]
[[index:Joe|textit]]
[[index:Lin@\textbf{Lin}]]
[[index:Peter|see {hello}]]
[[index:Jen|seealso{Jenny}]]

index:encodings!input!cp850


** A glossary



[[newglossaryentry:computer][name=computer, description=is a programmable machine that receives input, stores and manipulates data, and provides output in a useful format.]]


\newacronym[longplural=Frames per Second]{fpsLabel}{FPS}{Frame per Second}

See  gls:computer


\printglossary[title=List of Terms,toctitle=Terms and abbreviations]

** index

printindex:nopotions

* bug report
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
[[https://mail.google.com/mail/u/0/#inbox/1498a1077371921f][Small bug in org-ref - johnrkitchin@gmail.com - Gmail]]

Dear Dr. Kitchin,

I found a small problem in org-ref in combination with org-mode #+label
function.


1.)
#+CAPTION: Test caption
#+LABEL: fig:test_label3
#+ATTR_LATEX: :width 0.7\textwidth
[[file:test_figure.pdf]]

This way figure ref:fig:test_label3 will be referenced correctly in LaTeX
output (\ref), but not found by org-ref-complete-link function, meaning
there is no auto-completion.


#+BEGIN_SRC emacs-lisp
(org-ref-get-labels)
#+END_SRC

#+RESULTS:
|   | fig:test_label | fig | \s- | test1 | test | code-example | \\ | code:ref-snippet | load-snippets | fig:test_label3 | fig:cos | fig:a | fig:b | fig12 | tbldata | my-table | tbl-data | tbl-1 | tbl-2 | python-table | first-table | tbl-with-caption | cos-data | users | gradebook | beginner |

2.)
#+CAPTION: Test caption
#+LABEL: fig:test_label    ---- no space between label:fig!!
#+ATTR_LATEX: :width 0.7\textwidth
[[file:test_figure.pdf]]

This way figure ref:fig:test_label will NOT be referenced in LaTeX
output, but will be found by org-ref-complete-link function, because the
missing empty space leads to misinterpretation of #+label: on export.

Inserting a space behind label in the org-ref-get-labels function solves
the problem for me.

#+begin_src emacs-lisp
(defun org-ref-get-labels ()
  "returns a list of labels in the buffer that you can make a ref link
to. this is used to auto-complete ref links."
  (save-excursion
    (save-restriction
      (widen)
      (goto-char (point-min))
      (let ((matches '()))
        (while (re-search-forward "label: \\([a-zA-z0-9:-]*\\)" (point-max) t)
 ; inserted space behind label:
          (add-to-list 'matches (match-string-no-properties 1) t))
        (append matches (org-ref-get-latex-labels) (org-ref-get-tblnames)
(org-ref-get-custom-ids))))))
#+end_src


#+begin_src emacs-lisp
(defun org-ref-complete-link (&optional arg)
  "Completion function for ref links"
  (let ((label))
    (setq label (completing-read "label: " (org-ref-get-labels)))
    (format "ref:%s" label)))
#+end_src

I only know the org-ref reference function - or is there a proper
org-ref-create label function.

Greetings

* New links for researcherID and orcid
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:03
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:
These are pretty trivial links, but they still might be useful if these get more common.

#+BEGIN_SRC emacs-lisp :results silent
(org-add-link-type
 "orcid"
 (lambda (link-string)
   (browse-url
    (format "http://orcid.org/%s" link-string))))

(org-add-link-type
 "ResearcherID"
 (lambda (link-string)
   (browse-url
    (format "http://www.researcherid.com/rid/%s" link-string))))
#+END_SRC

ResearcherID:A-2363-2010

orcid:0000-0003-2625-9232

* Extracting a DOI from a pdf
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:04
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(with-temp-buffer
#+END_SRC

10.1002/(SICI)1522-2594(199911)42:5<952::AID-MRM16>3.0.CO;2-S

<</URI(http://dx.doi.org/10.1080/095008396180911)/S/URI>>

"\\(10[.][0-9]\\{4,\\}\\(?:[.][0-9]+\\)*/[0-9a-z]+\\)"

b(10[.][0-9]{4,}(?:[.][0-9]+)*/(?:(?!["&\'])\S)+)\b

(?:doi[\s.:]{0,2})?(10[.][^/]+/[^\s"]+).

This sort of works
"\\(10[.][0-9]\\{4,\\}\\(?:[.][0-9]+\\)*/\\s(?[^[:space:]]*\\)\\s)?\\b"

I am not sure how to enforce balanced parens, or to close the paren in the second example.

http://www.emacswiki.org/RegularExpression

This is too difficult to solve for now.

* get scaled positions of an atom in ase
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:04
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC python
from ase import Atom, Atoms

atoms = Atoms([Atom('H', [1, 1, 1]), Atom('O', [2, 2, 2])], cell=(3, 3, 3))
atoms[0].a = 0.5
atoms[0].b = 0.5
atoms[0].c = 0.5

print atoms[0].a
print atoms[0].x
#print atoms[1].scaled_position
#+END_SRC

#+RESULTS:
: 0.5
: 1.5

* Making your emacs buffer flash
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:05
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

#+BEGIN_SRC emacs-lisp
(let ((bg (face-attribute 'default :background)))
  (dotimes (i 1)
    (set-face-attribute 'default nil :background "lightgreen")
    (sleep-for 0.1)
    (set-face-attribute 'default nil :background bg)
    (sleep-for 0.1)))
#+END_SRC

#+RESULTS:

(setq visible-bell t)

(message "brrp")
(setq ring-bell-function nil)
(ding)

* TODO VASP in emacs
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-01-18 Sun 11:08
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :ARCHIVE_TODO: TODO
  :END:
#+BEGIN_EXAMPLE
PREC = Normal              #  precision normal
ENCUT = 300                #  cutoff used throughout all calculations
LREAL = .FALSE.            #  real space projection yes / no
ISMEAR = 0                 #  method to determine partial occupancies
#+END_EXAMPLE

[[./images/vanilla-incar.png]]

Now with vasp-mode:

[[./images/vasp-mode-incar.png]]

* jeldoc - a function to generate documentation from emacs-lisp files
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-03-17 Tue 21:33
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:


#+BEGIN_SRC emacs-lisp :results output
(defun jeldoc (library)
  "Generate an org buffer containing the requires, variables and functions defined in LIBRARY.
LIBRARY must be loaded before running this function."

  (interactive
   (list (completing-read "Library to generate org-doc for: "
			  (-flatten
			   (delq nil
				 (mapcar
				  (lambda (x)
				    (delq nil
					  (mapcar
					   (lambda (y)
					     (when (and (consp y)
							(eq (car y) 'provide))
					       (cdr y)))
					   x)))
				  load-history))))))

  (let* ((lib-file (locate-library library))
	 ;; these are the things defined in the library
	 (elements (cdr
		    (assoc
		     (locate-library library)
		     load-history)))
	 ;; variables
	 (vars (-filter 'symbolp elements))
	 ;; things the library requires
	 (requires
	  (mapcar 'cdr
		  (-filter (lambda (x)
			     (and (consp x)
				  (eq 'require (car x))))
			   elements)))
	 ;; functions defined in the library
	 (funcs (mapcar
		 'cdr
		 (-filter (lambda (x)
			    (and (consp x)
				 (eq 'defun (car x))))
			  elements))))

    (switch-to-buffer "*org-doc*")
    (erase-buffer)
    (insert (format "#+TITLE: Documentation for %s
,#+OPTIONS: toc:nil
\\maketitle
\\tableofcontents

%s

" library  (cond
	    ;; regular lisp file
	    ((string= "el" (file-name-extension lib-file))
	     (format "Source code: [[file:%s][%s]]" lib-file library))
	    ;; compiled file. these are not easy to read so we try plain el file
	    ((and (string= "elc" (file-name-extension lib-file))
		  (file-exists-p
		   (concat (file-name-sans-extension lib-file) ".el")))
	     (format "Source code: [[file:%s][%s]]"
		     (concat (file-name-sans-extension lib-file) ".el")
		     library))
	    ;; catch anything we cannot figure out
	    (t
	     (format "Source code: file:%s" lib-file)))))


    (insert "* Requires\n\n")
    ;; insert link to generate a jeldoc buffer for each require
    (dolist (req requires)
      (insert (format "- [[elisp:(jeldoc \"%s\")][%s]]\n" req req)))

    (insert "* Custom Variables\n\n")
    (dolist (var (sort (-filter 'custom-variable-p vars) 'string-lessp))
      (insert (format "** %s
Documentation: %s

Value:
%S\n\n"
		      var
		      (documentation-property var 'variable-documentation)
		      (symbol-value var)
		      )))

    (insert "* Regular Variables\n\n")
    (dolist (var (sort (-filter (lambda (x) (not (custom-variable-p x)))
				vars)
		       'string-lessp))
      (insert (format "** %s
Documentation: %s

Value:
%S\n\n"
		      var
		      (documentation-property var 'variable-documentation)
		      (symbol-value var)
		      )))

    (insert "* Interactive Functions\n\n")

    (dolist (func (sort (-filter 'commandp funcs) 'string-lessp))
      (insert (format "** %s %s
Documentation: %s

Code:
,#+BEGIN_SRC emacs-lisp
%s
,#+END_SRC

"
		      func
		      (or (help-function-arglist func) "")
		      (documentation func)
		      ;; code defining the function
		      (save-window-excursion
			;; we do not have c-source, so check if func
			;; is defined in a c file here.
			(if
			    (string= "c"
				     (file-name-extension
				      (find-lisp-object-file-name
				       func
				       (symbol-function func))))
			    (symbol-function func)
			  ;;else
			  (condition-case nil
			      (let ((bp (find-function-noselect func t)))
				(set-buffer (car bp))
				(goto-char (cdr bp))
				(when (sexp-at-point)
				  (mark-sexp)
				  (buffer-substring (point) (mark))))
			    (error func))
			  )))))

    (insert "* Non-interactive Functions\n\n")

    (dolist (func (sort (-filter (lambda (x) (not (commandp x)))
				 funcs)
			'string-lessp))
      (insert (format "** %s %s
Documentation: %s

Code:
,#+BEGIN_SRC emacs-lisp
%s
,#+END_SRC

"
		      func
		      (or (help-function-arglist func) "")
		      (documentation func)
		      ;; code defining the function
		      (save-window-excursion
			;; we do not have c-source, so check if func
			;; is defined in a c file here.
			(if
			    (string= "c"
				     (file-name-extension
				      (find-lisp-object-file-name
				       func
				       (symbol-function func))))
			    (symbol-function func)
			  ;;else
			  (condition-case nil
			      (let ((bp (find-function-noselect func t)))
				(set-buffer (car bp))
				(goto-char (cdr bp))
				(when (sexp-at-point)
				  (mark-sexp)
				  (buffer-substring (point) (mark))))
			    (error func))
			    )))))
    (org-mode)

    ;; replace `' with links to describe function or variable, unless
    ;; they are in a code block, then leave them alone.
    (goto-char (point-min))
    (while (re-search-forward "`\\([^' ]*\\)'" nil t)
      (let ((result (match-string 1))
	    (bg (match-beginning 1))
	    (end (match-end 1)))
	;; checking for code block changes match data, so
	;; we save it here.
	(unless (save-match-data
		  (eq 'src-block (car (org-element-at-point))))
	  (cond
	   ;; known function
	   ((fboundp (intern result))
	    (setf (buffer-substring bg end)
		  (format "[[elisp:(describe-function '%s)][%s]]"
			  result result)))
	   ;; known variable
	   ((boundp (intern result))
	    (setf (buffer-substring bg end)
		  (format "[[elisp:(describe-variable '%s)][%s]]"
			  result result)))
	   ;; unknown quoted thing, just return it back
	   (t
	    result)))))
    ;; finally jump to Requires section
    (org-open-link-from-string "[[*Requires]]")))
#+END_SRC

* Indexing an old email archive
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-08 Wed 09:55
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

I get 8-10 GB of email every year. A lot I delete, but somewhere between 2-4GB stays each year. To reduce the amount of email in my Gmail account, I have been archiving emails older than 2 years old into a folder, and I now have a little over 8 GB of mail from 2011 through 2013. Today, we look at indexing these emails with swish-e so I can search them.

#+BEGIN_SRC sh
du -hs ~/Maildir-archive
#+END_SRC
#+RESULTS:
: 8.2G	/Users/jkitchin/Maildir-archive

#+BEGIN_SRC python
import email
from xml.sax.saxutils import escape, quoteattr

with open('../../Maildir-archive/2013/cur/1420920834_0.31077.vpn-128-237-146-134.library.vpn.cmu.edu,U=12121,FMD5=8038da89e49ac5eabb489cfc6cea9fc1:2,S') as f:
    msg = email.message_from_file(f)
    print dir(msg)
    print msg.keys()
    # print msg.as_string()   # for swishdefault
    print msg.is_multipart()
    print msg.get_payload()
    print msg.get_filename()

    if msg.is_multipart():
        print 'multipart'
        for part in msg.walk():
            ctype = part.get_content_type()
            print ctype, part.get_filename()
#            if ctype in ['image/jpeg', 'image/png']:
#                open(part.get_filename(), 'wb').write(part.get_payload(decode=True))
#+END_SRC
#+RESULTS:
#+begin_example
['__contains__', '__delitem__', '__doc__', '__getitem__', '__init__', '__len__', '__module__', '__setitem__', '__str__', '_charset', '_default_type', '_get_params_preserve', '_headers', '_payload', '_unixfrom', 'add_header', 'as_string', 'attach', 'defects', 'del_param', 'epilogue', 'get', 'get_all', 'get_boundary', 'get_charset', 'get_charsets', 'get_content_charset', 'get_content_maintype', 'get_content_subtype', 'get_content_type', 'get_default_type', 'get_filename', 'get_param', 'get_params', 'get_payload', 'get_unixfrom', 'has_key', 'is_multipart', 'items', 'keys', 'preamble', 'replace_header', 'set_boundary', 'set_charset', 'set_default_type', 'set_param', 'set_payload', 'set_type', 'set_unixfrom', 'values', 'walk']
['MIME-Version', 'Sender', 'Received', 'Date', 'Delivered-To', 'X-Google-Sender-Auth', 'Message-ID', 'Subject', 'From', 'To', 'Content-Type']
True
[<email.message.Message instance at 0x102136a70>, <email.message.Message instance at 0x102136c20>]
None
multipart
multipart/mixed None
multipart/alternative None
text/plain None
text/html None
application/zip tpd-scaling.zip
#+end_example

#+BEGIN_SRC python
def printtag(name,closing=False):
    if closing:
        return '</{}>'.format(name)
    else:
        return '<{}>'.format(name)


def tag(name, content):
    return '{0}{1}{2}'.format(printtag(name),
                             content,
                             printtag(name, closing=True))

import email

with open('../../Maildir-archive/2013/cur/1420920833_1.31077.vpn-128-237-146-134.library.vpn.cmu.edu,U=12137,FMD5=8038da89e49ac5eabb489cfc6cea9fc1:2,S') as f:
    msg = email.message_from_file(f)
    headers = [tag(key.lower(), msg[key]) for key in msg.keys()]
    swishdefault = tag('swishdefault', msg.as_string())
    print keys
#+END_SRC
#+RESULTS:
: ['<delivered-to>johnrkitchin@gmail.com</delivered-to>', '<received>by 10.114.98.198 with SMTP id ek6csp723877ldb;\n        Mon, 31 Dec 2012 21:00:34 -0800 (PST)</received>', '<x-received>by 10.58.214.231 with SMTP id od7mr68944632vec.44.1357016433643;\n        Mon, 31 Dec 2012 21:00:33 -0800 (PST)</x-received>', '<return-path><jkitchin@cmu.edu></return-path>', '<received>by 10.114.98.198 with SMTP id ek6csp723877ldb;\n        Mon, 31 Dec 2012 21:00:34 -0800 (PST)</received>', '<received-spf>pass (google.com: best guess record for domain of jkitchin@cmu.edu designates 128.2.10.212 as permitted sender) client-ip=128.2.10.212;</received-spf>', '<authentication-results>mx.google.com; spf=pass (google.com: best guess record for domain of jkitchin@cmu.edu designates 128.2.10.212 as permitted sender) smtp.mail=jkitchin@cmu.edu</authentication-results>', '<received>by 10.114.98.198 with SMTP id ek6csp723877ldb;\n        Mon, 31 Dec 2012 21:00:34 -0800 (PST)</received>', '<date>Tue, 1 Jan 2013 00:00:32 -0500</date>', '<message-id><201301010500.r0150WwD005971@relay.andrew.cmu.edu></message-id>', '<content-type>multipart/alternative;\n boundary="===============6718222350745897845=="</content-type>', '<mime-version>1.0</mime-version>', '<to>jkitchin@cmu.edu</to>', '<from>jkitchin@cmu.edu</from>', '<subject>Torque report 2012-12-01 to 2013-01-01</subject>', '<x-scanned-by>MIMEDefang 2.60 on 128.2.10.212</x-scanned-by>']

* Clickable twitter improvements
  :PROPERTIES:
  :ARCHIVE_TIME: 2015-07-08 Wed 11:47
  :ARCHIVE_FILE: ~/blogofile-jkitchin.github.com/_blog/blog.org
  :ARCHIVE_CATEGORY: blog
  :END:

John Kitchin @johnkitchin @mess  @johnkitchin @johnkitchin  @SannaLab @WE3Lab

@prtk_m

This often works, but not always right away.

#+BEGIN_SRC emacs-lisp
(get-most-recent-tweet "prtk_m")
#+END_SRC

#+RESULTS:
: 07/01/15 22:30 PM - The story behind @AcademicsSay http://t.co/eidyj7Zb3M <-- makes it even better!



[[elisp:(highlight-twitter-handles)]]

[[elisp:unhighlight-twitter-handles]]
