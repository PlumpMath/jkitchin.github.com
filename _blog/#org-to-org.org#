* org to org



one citation [@shi-2007-first-au]


multi-citation [@shi-2007-first-au; @jarvi-2008-devel-reaxf; @kondratyuk-2013]

This filter system gets transcoded links, we do not want to undo that.
#+BEGIN_SRC emacs-lisp
(defun ox-mrkup-filter-link (text back-end info)
  (message-box "looking at %s" text))

(let ((org-export-filter-link-functions '(ox-mrkup-filter-link)))
    (org-org-export-as-org))
#+END_SRC

#+RESULTS:


** derived backend

[[http://google.com]]

[[mailto:jkitchin@andrew.cmu.edu]]

[[cite:marjolin-2015-therm-descr][See::page 34]]

#+BEGIN_SRC emacs-lisp
(defun pandoc-cite-format (link contents info)
  (if (-contains? org-ref-cite-types  (org-element-property :type link))
      ;; we have a cite link. transcode in pandoc format
      (concat "["
	      (mapconcat (lambda (key) (concat "@" key))
			 (split-string (org-element-property :path link) ",")
			 "; ")
	      "]")
    ;; not a cite link. just return the original link
    (org-org-identity link contents info)))

(org-export-define-derived-backend 'pandoc-org 'org
  :translate-alist '((link . pandoc-cite-format)))

(find-file (org-export-to-file 'pandoc-org "org-to-org.org"))
#+END_SRC

#+RESULTS:
: #<buffer org-to-org.org>





(let ((type (org-element-property :type link))
      (path (org-element-property :path link)))
  (cond
   ((and
     (string= type "file")
     (string-match "\.pdf" path))
    (shell-command
     (format
      "convert %s %s"
      path
      (replace-regexp-in-string "\.pdf" ".png" path)))
    (format "<img src=\"%s\">" (replace-regexp-in-string "\.pdf" ".png" path)))
   ;; anything else, we just do the regular thing
   (t
    (org-html-link link contents info)))))
