(defvar ot-element nil
  "The org-element to transclude.")


(defun ot-copy ()
  (interactive)
  (setq ot-element (org-element-context)))

(defun ot-update-link (ov after beg end &optional length)
  (let ((inhibit-modification-hooks  t)
	(linked-ov (overlay-get ov 'linked-ov)))
    (setf (buffer-substring (ov-beg linked-ov)
			    (ov-end linked-ov))
	  (buffer-substring (ov-beg ov) (ov-end ov)))
    (move-overlay linked-ov (ov-beg linked-ov)
		  (+ (ov-beg linked-ov)
		     (- (ov-end ov) (ov-beg ov))))
    (message "%s: %s %s" (overlay-properties linked-ov)
	     (ov-beg linked-ov)
	     (ov-end linked-ov))))

(defun ot-paste ()
  "Paste the element in and setup hooks."
  (interactive)
  (let* ((p (point))
	 (id (org-id-new))
	 (source-ov (make-overlay (org-element-property :begin ot-element)
				  (org-element-property :end ot-element)))
	 (ot-ov))

    (overlay-put source-ov 'face '(:background "SlateGray3"))

    ;; insert the element at point and put an overlay on it
    (insert (buffer-substring (org-element-property :begin ot-element)
			      (org-element-property :end ot-element)))
    
    (setq ot-ov (make-overlay p (+ p (- (org-element-property :end ot-element)
					(org-element-property :begin ot-element)))))
    (overlay-put ot-ov 'face '(:background "SlateGray2"))
    
    ;; the source ov
    (overlay-put source-ov 'ot-id id)
    (overlay-put source-ov 'linked-ov ot-ov)

    ;; When we modify the source, we need to update the transcluded element
    (overlay-put
     source-ov 'modification-hooks
     '(ot-update-link))

    ;; the transcluded ov
					;(overlay-put ot-ov 'ot-id id)
					;(overlay-put ot-ov 'source-ov source-ov)
					;(overlay-put
					; ot-ov 'modification-hooks
					; '((lambda (ov after beg end &optional length)
					;	 (let ((inhibit-modification-hooks  t)
					;	       (source-ov (overlay-get ov 'source-ov)))
					;	   (setf (buffer-substring (ov-beg source-ov)
					;				   (ov-end source-ov))
					;		 (buffer-substring (ov-beg ov) (ov-end ov))))))))
					;)
					;				   (ov-end source-ov))
					;		 (buffer-substring (ov-beg ov) (ov-end ov))))))))
    ))
