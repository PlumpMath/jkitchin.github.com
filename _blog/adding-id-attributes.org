* Adding id attributes to blocks in org-mode html export

#+name: eb-1
#+BEGIN_EXAMPLE
test example block
#+END_EXAMPLE

#+name: qu-1
#+BEGIN_QUOTE
To be or not to be
#+END_QUOTE

#+name: nt-1
#+begin_note
that is the question.
#+end_note

Here is the new code.

#+BEGIN_SRC emacs-lisp
(defun org-html-special-block (special-block contents info)
  "Transcode a SPECIAL-BLOCK element from Org to HTML.
CONTENTS holds the contents of the block.  INFO is a plist
holding contextual information."
  (let* ((block-type (downcase
                      (org-element-property :type special-block)))
         (contents (or contents ""))
         (html5-fancy (and (org-html-html5-p info)
                           (plist-get info :html-html5-fancy)
                           (member block-type org-html-html5-elements)))
         (attributes (org-export-read-attribute :attr_html special-block)))
    (unless html5-fancy
      (let ((class (plist-get attributes :class)))
        (setq attributes (plist-put attributes :class
                                    (if class (concat class " " block-type)
                                      block-type)))
        (when (org-element-property :name special-block)
          (setq attributes (plist-put
                            attributes :id
                            (org-element-property :name special-block))))))
    (setq attributes (org-html--make-attribute-string attributes))
    (when (not (equal attributes ""))
      (setq attributes (concat " " attributes)))
    (if html5-fancy
        (format "<%s%s>\n%s</%s>" block-type attributes
                contents block-type)
      (format "<div%s>\n%s\n</div>" attributes contents))))



(defun org-html-quote-block (quote-block contents info)
  "Transcode a QUOTE-BLOCK element from Org to HTML.
CONTENTS holds the contents of the block.  INFO is a plist
holding contextual information."
  (let ((attributes (org-export-read-attribute :attr_html quote-block)))
    (when (org-element-property :name quote-block)
      (setq attributes (plist-put
			attributes :id
			(org-element-property :name quote-block))))
    (setq attributes (org-html--make-attribute-string attributes))
    (when (not (equal attributes ""))
      (setq attributes (concat " " attributes)))
    (format "<blockquote%s>\n%s</blockquote>" attributes contents)))



(defun org-html-example-block (example-block contents info)
  "Transcode a EXAMPLE-BLOCK element from Org to HTML.
CONTENTS is nil.  INFO is a plist holding contextual
information."
  (if (org-export-read-attribute :attr_html example-block :textarea)
      (org-html--textarea-block example-block)
    (let ((attributes (org-export-read-attribute :attr_html example-block)))
      (when (org-element-property :name example-block)
	(setq attributes (plist-put
			  attributes :id
			  (org-element-property :name example-block))))
      (setq attributes (org-html--make-attribute-string attributes))
      (when (not (equal attributes ""))
	(setq attributes (concat " " attributes)))
      (format "<pre class=\"example\"%s>\n%s</pre>"
	      attributes
	      (org-html-format-code example-block info)))))

#+END_SRC

#+RESULTS:
: org-html-example-block



Some links: ref:eb-1   the  ref:qu-1 and ref:nt-1

#+BEGIN_SRC python :var data=nt-1
print data
#+END_SRC

#+RESULTS:
: that is the question.

Now we need blocks with no names for testing.

#+BEGIN_EXAMPLE
No id here.
#+END_EXAMPLE

#+BEGIN_QUOTE
no id, all ego
#+END_QUOTE

#+begin_note
done
#+end_note
