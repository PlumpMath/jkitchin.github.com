* Reading data from images
How many times have you read a paper that had interesting data you wanted to use, but the authors of that paper neglected to provide it except what is in the figures?

wished you could extract data from a figure in a scientific article 
[[./images/eos.png]]

#+BEGIN_SRC python
import numpy as np
# pixels on x-axis locations
X = [(75.225806451612897, 154.1875),
     (123.8165322580645, 154.1875),
     (172.4072580645161, 153.5564516129032),
     (220.99798387096769, 154.1875),
     (269.58870967741933, 154.1875)]

XV = [600, 700, 800, 900, 1000]

from scipy.interpolate import interp1d

Xi = interp1d([x[0] for x in X], XV)

# pixels on y-axis locations
Y = [(75.225806451612897, 154.1875),
     (74.594758064516114, 120.11088709677416),
     (74.594758064516114, 86.665322580645125),
     (75.225806451612897, 53.2197580645161),
     (74.594758064516114, 19.143145161290278)]

YV = [-364.8, -364.7, -364.6, -364.5, -364.4]

Yi = interp1d([y[1] for y in Y[-1::-1]], YV[-1::-1])


# pixels of data points on figures
anatase = [
 (116.24395161290322, 28.608870967741893),
 (123.8165322580645, 45.01612903225805),
 (131.38911290322579, 58.899193548387075),
 (138.96169354838707, 72.151209677419331),
 (145.90322580645159, 82.879032258064484),
 (153.47580645161287, 93.606854838709666),
 (160.41733870967738, 101.17943548387095),
 (168.62096774193549, 108.75201612903223),
 (176.19354838709677, 115.06249999999997),
 (183.13508064516128, 119.4798387096774),
 (188.81451612903226, 122.0040322580645),
 (198.28024193548384, 125.79032258064514),
 (206.48387096774189, 128.31451612903226),
 (213.42540322580641, 128.94556451612902),
 (220.36693548387092, 128.31451612903226),
 (227.9395161290322, 128.31451612903226),
 (235.51209677419348, 127.05241935483869),
 (243.08467741935482, 125.15927419354837),
 (250.6572580645161, 123.26612903225804),
 (258.22983870967738, 120.11088709677416),
 (265.80241935483866, 116.95564516129031)]

anatase_VE = np.array([(float(Xi(x[0])), float(Yi(x[1]))) for x in anatase])

print anatase_VE

rutile = [(268.95766129032256, 85.403225806451587),
 (262.01612903225799, 89.820564516128997),
 (255.70564516129031, 94.237903225806434),
 (248.76411290322574, 99.286290322580612),
 (241.19153225806446, 104.33467741935482),
 (234.88104838709671, 107.48991935483869),
 (227.9395161290322, 112.53830645161287),
 (222.26008064516122, 115.69354838709674),
 (215.31854838709671, 118.84879032258061),
 (207.74596774193543, 122.63508064516127),
 (200.80443548387092, 125.15927419354837),
 (195.75604838709677, 127.05241935483869),
 (188.18346774193549, 127.05241935483869),
 (181.24193548387092, 127.68346774193546),
 (174.93145161290323, 127.68346774193546),
 (167.98991935483866, 126.42137096774191),
 (154.73790322580641, 120.74193548387095),
 (140.85483870967738, 111.27620967741933),
 (128.23387096774189, 97.393145161290306),
 (114.98185483870965, 79.092741935483843),
 (101.09879032258063, 53.850806451612868),
 (87.215725806451601, 22.929435483870947)]

print

rutile_VE = np.array([(float(Xi(x[0])), float(Yi(x[1]))) for x in rutile])

print rutile_VE
#+END_SRC

#+RESULTS:
#+begin_example
[[ 684.41558442 -364.42777778]
 [ 700.         -364.47592593]
 [ 715.58441558 -364.51698113]
 [ 731.16883117 -364.55660377]
 [ 745.45454545 -364.58867925]
 [ 761.03896104 -364.62075472]
 [ 775.32467532 -364.64339623]
 [ 792.20779221 -364.66603774]
 [ 807.79220779 -364.68490566]
 [ 822.07792208 -364.69811321]
 [ 833.76623377 -364.70555556]
 [ 853.24675325 -364.71666667]
 [ 870.12987013 -364.72407407]
 [ 884.41558442 -364.72592593]
 [ 898.7012987  -364.72407407]
 [ 914.28571429 -364.72407407]
 [ 929.87012987 -364.72037037]
 [ 945.45454545 -364.71481481]
 [ 961.03896104 -364.70925926]
 [ 976.62337662 -364.7       ]
 [ 992.20779221 -364.69056604]]

[[ 998.7012987  -364.59622642]
 [ 984.41558442 -364.60943396]
 [ 971.42857143 -364.62264151]
 [ 957.14285714 -364.63773585]
 [ 941.55844156 -364.65283019]
 [ 928.57142857 -364.66226415]
 [ 914.28571429 -364.67735849]
 [ 902.5974026  -364.68679245]
 [ 888.31168831 -364.69622642]
 [ 872.72727273 -364.70740741]
 [ 858.44155844 -364.71481481]
 [ 848.05194805 -364.72037037]
 [ 832.46753247 -364.72037037]
 [ 818.18181818 -364.72222222]
 [ 805.19480519 -364.72222222]
 [ 790.90909091 -364.71851852]
 [ 763.63636364 -364.70185185]
 [ 735.06493506 -364.67358491]
 [ 709.09090909 -364.63207547]
 [ 681.81818182 -364.57735849]
 [ 653.24675325 -364.50188679]
 [ 624.67532468 -364.41111111]]
#+end_example

