see https://mail.google.com/mail/u/0/?hl=en&tab=wm#inbox/13f38721d7f7cb48
for the inspiration of this post.

We will consider the a C vacancy in the diamond structure, embedded in a 2x3x4 supersupercell.

the strategy is to create a 1x1x1 diamond unit cell, remove a C, and let all the atoms relax. Then we take that relaxed cell with a defect and embed it in a supersupercell.

#+BEGIN_SRC python
from ase.lattice.spacegroup import crystal

a = 3.57
S1 = crystal('C', [(0,0,0)], spacegroup=227, cellpar=[a, a, a, 90, 90, 90])

defect = S1.copy()
defect[0].symbol = 'N'

# perform some kind of relaxation on defect but keep unit cell shape and volume constant
defect.rattle(stdev=0.3) # just to give them different positions

'''Now we want to create the supersupercell that is a 2x3x4 version of the perfect cell, but with the defect cell at the origin.'''

m, n, p = 2, 3, 4
A, B, C = S1.get_cell()

from ase import Atoms, Atom

SSC = Atoms([])
for i in range(m):
    for j in range(n):
        for k in range(p):
            for atom in S1:
                newpos = atom.position + i * A + j * B + k * C                
                SSC += Atom(atom.symbol, newpos)

SSC.set_cell([m*A, n*B, p*C])
SSC[0].symbol = 'N'

for i, atom in enumerate(defect):
    SSC[i].set_position(atom.get_position())

from ase.visualize import view
view(SSC)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python
from ase.lattice.spacegroup import crystal

a = 3.57
S1 = crystal('C', [(0,0,0)], spacegroup=227, cellpar=[a, a, a, 90, 90, 90])

defect = S1.copy()
defect[0].symbol = 'N'
defect.rattle(stdev=0.3)

SSC = S1.repeat((2,3,4))
del SSC[:len(S1)]
SSC += defect

from ase.visualize import view
view(SSC)
#+END_SRC

** Getting the defect in the middle of the unit cell
#+BEGIN_SRC python
from ase.lattice.spacegroup import crystal

a = 3.57
S1 = crystal('C', [(0,0,0)], spacegroup=227, cellpar=[a, a, a, 90, 90, 90])

A,B,C = S1.get_cell()

defect = S1.copy()
defect[0].symbol = 'N'
defect.rattle(stdev=0.3)


SSC = S1.repeat((2,3,4))

n = len(S1)

N = 11  # supercell to replace
del SSC[N * n:(N + 1) * n]
defect.positions += 0*A + 1*B + 1*C

SSC += defect

print len(SSC)

from ase.visualize import view
#view(SSC)

#+END_SRC

#+RESULTS:
: 192

