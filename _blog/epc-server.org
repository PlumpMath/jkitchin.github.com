
https://github.com/tkf/python-epc

#+BEGIN_SRC python :results output org drawer :tangle my-server.py
from epc.server import EPCServer

server = EPCServer(('localhost', 0))

@server.register_function
def echo(*a):
    return 'from python ' + str(a)

server.print_port()
server.serve_forever()
#+END_SRC


#+BEGIN_SRC emacs-lisp :results output
(require 'epc)

(defvar my-epc nil)

(when my-epc
    (epc:stop-epc my-epc))

(setq my-epc (epc:start-epc "python" '("my-server.py")))

(deferred:$
  (epc:call-deferred my-epc 'echo '(10))
  (deferred:nextc it
    (lambda (x) (print (format "Return from elisp: %S" x)))))

(print (format "Return : %S" (epc:call-sync my-epc 'echo '(50 40))))

#+END_SRC

#+RESULTS:
: 
: "Return from elisp: \"from python (10,)\""
: 
: "Return : \"from python (50, 40)\""

https://github.com/kiwanami/emacs-deferred

#+BEGIN_SRC emacs-lisp
(deferred:$
  (deferred:url-retrieve "http://www.google.co.jp/intl/en_com/images/srpr/logo1w.png")
  (deferred:nextc it
    (lambda (buf)
(message "Calling lambda")
      (insert-image
       (create-image
        (let ((data (with-current-buffer buf (buffer-string))))
          (substring data (+ (string-match "\n\n" data) 2)))
        'png t))
      (kill-buffer buf))))   
#+END_SRC

#+RESULTS:
: [cl-struct-deferred (lambda (buf) (message "Calling lambda") (insert-image (create-image (let ((data (with-current-buffer buf (buffer-string)))) (substring data (+ (string-match "
: 
: " data) 2))) (quote png) t)) (kill-buffer buf)) deferred:default-errorback deferred:default-cancel nil nil nil]

