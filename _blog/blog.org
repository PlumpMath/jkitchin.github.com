* Interesting online python sites
  :PROPERTIES:
  :categories: python
  :date:     2013/02/28 18:58:21
  :updated:  2013/02/28 19:01:33
  :permalink: http://jkitchin.github.com/blog/2013-02-28-interesting-online-python-sites/index.html
  :END:
I have come across some very interesting online, /interactive/ python sites recently.

- http://interactivepython.org has some interactive books with embedded python interpreters in the exercises. 

- sympy actually has an [[http://live.sympy.org/][online shell]]! The [[http://docs.sympy.org/0.7.2/index.html][documentation]] has live examples in a shell you can use that is integrated with Sphinx. 

Here are a few others I came across:
- https://www.pythonanywhere.com/try-ipython/ Ipython in your browser!
- http://www.trypython.org/#
- http://www.pythontutor.com/
- http://py-ide-online.appspot.com/
* A gradebook app for emacs
  :PROPERTIES:
  :categories: emacs-lisp
  :END:
The goal is to create an emacs library to compute grades from a table in org-mode. 

All grades are stored in a table with this structure. 

#+tblname: gradebook
| first name | last name | email       | Hwk 1 | Hwk2 | exam1 | project 1 |
|            |           |             | 10    | 10   | 60    | 20        |
|------------+-----------+-------------+-------+------+-------+-----------|
| Jane       | Doe       | jd@cmu.edu  | A     | A    | B     | B         |
| John       | Dillinger | jdi@cmu.edu | B     | B/C  | A     | C         |
| jill       | wutz      | jw@cmu.edu  | D     | D    | R     | R         |

The grading system works like this: 

1. Each assignment is worth a certain number of points (in row2).
2. Each assignment for a student is given a letter grade that indicates the quality and correctness of the work.
3. Each letter grade corresponds to a point multiplier:

| A++ |  1.0 |
| A+  | 0.95 |
| A   |  0.9 |
| A-  | 0.85 |
| A/B |  0.8 |
| B+  | 0.75 |
| B   |  0.7 |
| B-  | 0.65 |
| C/B |  0.6 |
| C+  | 0.55 |
| C   |  0.5 |
| C-  | 0.45 |
| C/D |  0.4 |
| D+  | 0.35 |
| D   |  0.3 |
| D-  | 0.25 |
| D/R |  0.2 |
| R+  | 0.15 |
| R   |  0.1 |
| R-  | 0.05 |
| R-- |  0.0 |

4. The number of points earned for an assignment is the point multiplier for the letter grade times the number of points for that assignment.
5. The overall grade is computed as sum(multiplier*points)/sum(points).
6. The overall letter grade is determined by the fraction of overall points received, mapped back on to the letter grade scale.

For example, in the table above, Jane Doe's grade is:

#+BEGIN_SRC emacs-lisp :results value
(let* ((multipliers '(0.9 0.9 0.7 0.7))
       (points '(10 10 60 20))
       (earned-points (mapcar* (lambda (a b) (* a b)) multipliers points))
       (total-earned-points (apply '+ earned-points))
       (total-points (apply '+ points)))
  (/ total-earned-points total-points))
#+END_SRC
#+RESULTS:
: 0.74

Which corresponds to an overall grade of B.

The goal here is to write emacs-lisp code to compute the overall grade of each student and convert it to an overall letter grade and write a little report. 

We start by defining a variable to hold the multipliers. We will use an association list. We will prefix every variable and function with =gb/= to indicate it is part of our gradebook code.

#+BEGIN_SRC emacs-lisp
(defvar gb/MULTIPLIERS
  '(("A++" . 1.0)
    ("A+"   . 0.95)
    ("A"    . 0.9)
    ("A-"   . 0.85)
    ("A/B"  . 0.8)
    ("B+"   . 0.75)
    ("B"    . 0.7)
    ("B-"   . 0.65)
    ("B/C"  . 0.6)
    ("C+"   . 0.55)
    ("C"    . 0.5)
    ("C-"   . 0.45)
    ("C/D"  . 0.4)
    ("D+"   . 0.35)
    ("D"    . 0.3)
    ("D-"   . 0.25)
    ("D/R"  . 0.2)
    ("R+"   . 0.15)
    ("R"    . 0.1)
    ("R-"   . 0.05)
    ("R--"  . 0.0))
  "Numeric multipliers for letter grades")
#+END_SRC

#+RESULTS:

Here are two examples of using the gb/MULTIPLIER variable. It is an association list, so the multipler we want is the =cdr= of what the letter is associated with. We take the =cdr= of the return value, which is the numeric multiplier

#+BEGIN_SRC emacs-lisp :results value
(cdr (assoc "A" gb/MULTIPLIERS))
#+END_SRC

#+RESULTS:
: 0.9

We are going to write a series of functions that will compute the overall grade for each student. 

A function we will need is to move the cursor into the table. Here is a function that will do that. This function moves the cursor to the beginning of the buffer, searches forward to find a line starting with a #+tblname: "name", and then moves the cursor to the next line which is in the table. 

#+BEGIN_SRC emacs-lisp 
(defun gb/goto-table (tblname)
  "move cursor into the table labeled tblname"
  (interactive)
  (goto-char (point-min))
  (search-forward-regexp (format "^#\\+tblname:\s+%s" tblname))
  (next-line))
#+END_SRC

#+RESULTS:

We use the function to move the cursor into the table, and then extract all the contents out.  We wrap the function call inside =save-excursion= so that the cursor gets put back where we want it. In this snippet, we use the (org-table-to-lisp) function to convert the table to a lisp structure which we can do further analysis on. 

#+BEGIN_SRC emacs-lisp :results value verbatim
;; http://orgmode.org/worg/org-api/org-table-api.html
(require 'org-table) ; needed for access to org-table api

(defun gb/get-gradebook-lisp ()
  (interactive)
  (save-excursion
    (gb/goto-table "gradebook")
    (org-table-to-lisp)))

(gb/get-gradebook-lisp)
#+END_SRC
#+RESULTS:
: (("first name" "last name" "email" "Hwk 1" "Hwk2" "exam1" "project 1") ("" "" "" "10" "10" "60" "20") hline ("Jane" "Doe" "jd@cmu.edu" "A" "A" "B" "B") ("John" "Dillinger" "jdi@cmu.edu" "B" "B/C" "A" "C") ("jill" "wutz" "jw@cmu.edu" "D" "D" "R" "R"))

This is handy. Now we can think about processing the lisp data. Let us get the assignment names, and point values and save them in variables. The assignment names are in the first row, and start in column 3.

#+BEGIN_SRC emacs-lisp :results value verbatim
(let ((row1 (car (gb/get-gradebook-lisp))))
 (setq gb/ASSIGNMENTS (mapcar 'identity (nthcdr 3 row1))))

gb/ASSIGNMENTS
#+END_SRC

#+RESULTS:
: ("Hwk 1" "Hwk2" "exam1" "project 1")

And now the point values, and total points.
#+BEGIN_SRC emacs-lisp :results value verbatim
(let ((row2 (cadr (gb/get-gradebook-lisp))))
 (setq gb/ASSIGNMENT-POINTS (mapcar 'string-to-number (nthcdr 3 row2)))
 (setq gb/TOTAL-POINTS (apply '+ gb/ASSIGNMENT-POINTS)))

(format "ASSIGNMENT-POINTS=%s TOTAL-POINTS=%s" gb/ASSIGNMENT-POINTS gb/TOTAL-POINTS)
#+END_SRC

#+RESULTS:
: "ASSIGNMENT-POINTS=(10 10 60 20) TOTAL-POINTS=100"

So far, so good. Now, we need to get the letter grades for each student, and turn them into point multipliers. 

#+BEGIN_SRC emacs-lisp :results value verbatim
(defun gb/get-multiplier (LG)
  "return numeric multiplier for a letter grade"
  (interactive)
  (cdr (assoc (upcase LG) gb/MULTIPLIERS)))

(defun gb/get-multipliers(LGS)
  "apply get-multiplier to a list of letter grades"
  (interactive)
  (mapcar 'gb/get-multiplier LGS))

(defun gb/get-all-student-multipliers ()
  (mapcar 'gb/get-multipliers
	  (mapcar (lambda (x) 
		    (nthcdr 3 x)) 
		  (cdddr (gb/get-gradebook-lisp)))))

(gb/get-all-student-multipliers)
#+END_SRC

#+RESULTS:
: ((0.9 0.9 0.7 0.7) (0.7 0.6 0.9 0.5) (0.3 0.3 0.1 0.1))


Finally, we need the product of each multiplier with the gb/ASSIGNMENT-POINTS. This needs some care; some grades may be nil, which we cannot multiply. For now we neglect this detail. 

#+BEGIN_SRC emacs-lisp :results value verbatim
(defun gb/get-earned-points (multipliers)
  (mapcar* (lambda (a  b) (* a b)) multipliers gb/ASSIGNMENT-POINTS))

(defun gb/get-all-earned-points ()
  "returns total points earned by each student"
  (mapcar 'gb/get-earned-points  (gb/get-all-student-multipliers)))

(gb/get-all-earned-points)
#+END_SRC

#+RESULTS:
: ((9.0 9.0 42.0 14.0) (7.0 6.0 54.0 10.0) (3.0 3.0 6.0 2.0))

Next, we need to sum all the points and divide by the total points to get the overall numeric grade.

#+BEGIN_SRC emacs-lisp :results value verbatim
(defun gb/get-all-numeric-grades ()
(mapcar (lambda (x) 
	  (/ (apply '+ x) gb/TOTAL-POINTS))
	  (gb/get-all-earned-points)))

(gb/get-all-numeric-grades)
#+END_SRC

#+RESULTS:
: (0.74 0.77 0.14)

And finally, convert the numeric grades to letter grades. This involves finding the highest letter grade multiplier that the overall grade is larger than.

#+BEGIN_SRC emacs-lisp :results value verbatim
(defun gb/get-final-letter-grade (grade)
 (dolist (pair gb/MULTIPLIERS letter-grade)
   (if (< (cdr pair) grade) 
       (progn
	 (setq letter-grade (car pair))
	 (return letter-grade)))))

(mapcar 'gb/get-final-letter-grade (gb/get-all-numeric-grades))
#+END_SRC

#+RESULTS:
: ("B" "B+" "R")

That looks good. Now, let's make a final report of the results.

#+BEGIN_SRC emacs-lisp :results value 
(let ((emails (mapcar '(lambda (x) (nth 2 x)) (cdddr (gb/get-gradebook-lisp))))
      (first-names (mapcar '(lambda (x) (nth 0 x)) (cdddr (gb/get-gradebook-lisp))))
      (last-names (mapcar '(lambda (x) (nth 1 x)) (cdddr (gb/get-gradebook-lisp))))
      (final-grades (mapcar 'gb/get-final-letter-grade (gb/get-all-numeric-grades))))
(mapcar* (lambda (fn ln em fg)
	   `(,fn ,ln ,em ,fg)) 
	 first-names
	 last-names
	 emails
	 final-grades))
#+END_SRC

#+RESULTS:
| Jane | Doe       | jd@cmu.edu  | B  |
| John | Dillinger | jdi@cmu.edu | B+ |
| jill | wutz      | jw@cmu.edu  | R  |

** Summary
This is a pretty functional bit of code for computing final grades of a fixed format gradebook. It is missing some features. For example, it would not work well if any grades are missing, or if the gradebook is incomplete.

* An index function for strings in emacs-lisp
  :PROPERTIES:
  :categories: emacs-lisp
  :date:     2013/03/05 19:28:30
  :updated:  2013/03/05 19:28:31
  :END:

I could not find an index function for strings in emacs-lisp. The =position= function seems to work for numbers, but not strings. Here is a version that works on strings.
#+BEGIN_SRC emacs-lisp :results value verbatim
(defun index (item list)
  "return index of item in list or nil"
  (let ((counter 0)
        (found nil))
    (dolist (listelement list counter)
      (if (string= item listelement)
	(progn 
	  (setq found t)
	  (return counter)) ; exit the loop
	;; else increment counter
	(incf counter)))
    ;; if we found it return counter otherwise return nil
    (if found counter nil)))
#+END_SRC

#+RESULTS:
: index

Here are some example uses:

#+BEGIN_SRC emacs-lisp :results value
(index "test" '("a" "test" "y"))
#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC emacs-lisp :results value
(index "z" '("a" "b" "z"))
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC emacs-lisp :results value verbatim
(index "testy" '("a" "test" "y"))
#+END_SRC

#+RESULTS:
: nil

This raises an error because we use string=.

#+BEGIN_SRC emacs-lisp :results value verbatim
(index 1 '("a" "test" "y" 1))
#+END_SRC
* Integrating the Fermi distribution to compute entropy
  :PROPERTIES:
  :categories: dft, integration, gotcha
  :date:     2013/03/06 09:39:42
  :updated:  2013/03/06 09:47:19
  :END:

The Fermi distribution is defined by $f(\epsilon) = \frac{1}{e^{(\epsilon - \mu)/(k T)} + 1}$. This function describes the occupation of energy levels at temperatures above absolute zero. We use this function to compute electronic entropy in a metal, which contains an integral of $\int n(\epsilon) (f \ln f + (1 - f) \ln (1-f)) d\epsilon$, where $n(\epsilon)$ is the electronic density of states. Here we plot the Fermi distribution function. It shows that well below the Fermi level the states are fully occupied, and well above the Fermi level, they are unoccupied. Near the Fermi level, the states go from occupied to unoccupied smoothly.

#+BEGIN_SRC python 
import numpy as np
import matplotlib.pyplot as plt

mu = 0
k = 8.6e-5
T = 1000

def f(e):
    return 1.0 / (np.exp((e - mu)/(k*T)) + 1)

espan = np.linspace(-10, 10, 200)
plt.plot(espan, f(espan))
plt.ylim([-0.1, 1.1])
plt.savefig('images/fermi-entropy-integrand-1.png')
#+END_SRC

#+RESULTS:

[[./images/fermi-entropy-integrand-1.png]]

Let us consider a simple density of states function, just a parabola. This could represent a s-band for example. We will use this function to explore the integral.

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt

mu = 0
k = 8.6e-5
T = 1000

def f(e):
    return 1.0 / (np.exp((e - mu)/(k*T)) + 1)

def dos(e):
    d = (np.ones(e.shape) - 0.03 * e**2) 
    return d * (d > 0)
espan = np.linspace(-10, 10)

plt.plot(espan, dos(espan), label='Total dos')
plt.plot(espan, f(espan) * dos(espan), label='Occupied states')
plt.legend(loc='best')
plt.savefig('images/fermi-entropy-integrand-2.png')
#+END_SRC

#+RESULTS:

[[./images/fermi-entropy-integrand-2.png]]
Now, we consider the integral to compute the electronic entropy. The entropy is proportional to this integral.

\( \int n(\epsilon) (f \ln f + (1 - f) \ln (1-f)) d\epsilon \)

It looks straightforward to compute, but it turns out there is a wrinkle. Evaluating the integrand leads to =nan= elements because the ln(0) is -\infty. 

#+BEGIN_SRC python
import numpy as np
mu = 0
k = 8.6e-5
T = 100

def fermi(e):
    return 1.0 / (np.exp((e - mu)/(k*T)) + 1)

espan = np.array([-20, -10, -5, 0.0, 5, 10])
f = fermi(espan)

print f * np.log(f)
print (1 - f) * np.log(1 - f) 
#+END_SRC

#+RESULTS:
: [  0.00000000e+000   0.00000000e+000   0.00000000e+000  -3.46573590e-001
:   -1.85216532e-250               nan]
: [        nan         nan         nan -0.34657359  0.          0.        ]

In this case, these =nan= elements should be equal to zero (x ln(x) goes to zero as x goes to zero). So, we can just ignore those elements in the integral. Here is how to do that.

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt

mu = 0
k = 8.6e-5
T = 1000

def fermi(e):
    return 1.0 / (np.exp((e - mu)/(k*T)) + 1)

def dos(e):
    d = (np.ones(e.shape) - 0.03 * e**2) 
    return d * (d > 0)

espan = np.linspace(-20, 10)
f = fermi(espan)
n = dos(espan)

g = n * (f * np.log(f) + (1 - f) * np.log(1 - f))

print np.trapz(espan, g) # nan because of the nan in the g vector
print g

plt.plot(espan, g)
plt.savefig('images/fermi-entropy-integrand-3.png')

# find the elements that are not nan
ind = np.logical_not(np.isnan(g))

# evaluate the integrand for only those points
print np.trapz(espan[ind], g[ind])
#+END_SRC

#+RESULTS:
#+begin_example
nan
[             nan              nan              nan              nan
              nan              nan              nan              nan
              nan              nan              nan              nan
              nan              nan              nan              nan
              nan              nan              nan              nan
              nan              nan              nan              nan
              nan              nan              nan              nan
  -9.75109643e-14  -1.05987106e-10  -1.04640574e-07  -8.76265644e-05
  -4.92684641e-02  -2.91047740e-01  -7.75652579e-04  -1.00962241e-06
  -1.06972936e-09  -1.00527877e-12  -8.36436686e-16  -6.48930917e-19
  -4.37946336e-22  -2.23285389e-25  -1.88578082e-29   0.00000000e+00
   0.00000000e+00   0.00000000e+00   0.00000000e+00   0.00000000e+00
   0.00000000e+00   0.00000000e+00]
0.208886080897
#+end_example

[[./images/fermi-entropy-integrand-3.png]]

The integrand is pretty well behaved in the figure above. You do not see the full range of the x-axis, because the integrand evaluates to =nan= for very negative numbers. This causes the =trapz= function to return =nan= also. We can solve the problem by only integrating the parts that are not =nan=. We have to use numpy.logical_not to get an element-wise array of which elements are not =nan=. In this example, the integrand is not well sampled, so the area under that curve may not be very accurate. 
* Uncertainty in implicit functions
  :PROPERTIES:
  :categories: statistics
  :date:     2013/03/08 17:04:02
  :updated:  2013/03/14 15:34:19
  :END:
Suppose we have an equation $y = e^{a y}$ that we want to solve, where $a$ is a constant with some uncertainty. What is the uncertainty in the solution $y$?

Finding a solution is not difficult. The uncertainty in the solution, however, is not easy, since we do not have an explicit function to propagate errors through. Let us examine the solution first.
#+BEGIN_SRC python
import numpy as np
from scipy.optimize import fsolve

a = 0.20

def f(y):
    return y - np.exp(a * y)

sol, = fsolve(f, 1)
print sol
#+END_SRC

#+RESULTS:
: 1.2958555091

A way to estimate the uncertainty is by Monte Carlo simulation. We solve the equation many times, using values sampled from the uncertainty distribution. Here we assume that the $a$ parameter is normally distributed  with an average of 0.2 and a std deviation of 0.02. We solve the equation 10000 times for different values of $a$ sampled according to the normal distribution. That gives us a distribution of solutions that we can do statistical analysis of to get the average and std deviation.

#+BEGIN_SRC python
import numpy as np
from scipy.optimize import fsolve
N = 10000

A = np.random.normal(0.2, 0.02, size=N)

sol = np.zeros(A.shape)

for i, a in enumerate(A):
    s, = fsolve(lambda y:y - np.exp(a * y), 1)
    sol[i] = s

ybar = np.mean(sol)
s_y = np.std(sol)

print ybar, s_y, s_y / ybar

import matplotlib.pyplot as plt
count, bins, ignored = plt.hist(sol)
plt.savefig('images/implicit-uncertainty.png')
#+END_SRC

#+RESULTS:
: 1.29887470397 0.0465110111613 0.0358086973433

We get approximately the same answer, and you can see here the distribution of solution values is not quite normal. We compute the standard deviation anyway, and find the standard deviation is about 3.6%. It would be nice to have some analytical method to estimate this uncertainty. So far I have not figured that out.

This method could have relevance in estimating the uncertainty in the friction factor for turbulent flow ($Re > 2100$). In that case we have the implicit equation $\frac{1}{\sqrt{f_F}}=4.0 \log(Re \sqrt{f_F})-0.4$. Uncertainties in the Re number would lead to uncertainties in the friction factor. Whether those uncertainties are larger than the uncertainties from the original correlation would require some investigation.

* Class attributes with validation

#+BEGIN_SRC python
import numpy as np

class SolidVaporPressure(object):
    def __init__(self, A, B, C, D, mp):
        self.A = A
        self.B = B
        self.C = C
        self.D = D
        self.mp = mp

    
    def __call__(self, t):
        T = np.array(t, dtype=np.float)
        Pvap = 10.0**(5.006 
                      + self.A
                      + self.B * T**-1
                      + self.C * np.log10(T)
                      + self.D * T**-3)
        #Pvap[t > self.mp] = np.nan
        return Pvap

Al = SolidVaporPressure(9.459, -17342, -0.7927, 0.0, 933)


print Al([800, 900])
#+END_SRC

#+RESULTS:
: [  3.06351892e-10   7.14962188e-08]

* Testing units
#+BEGIN_SRC python
from pycse.units import units

u = units()

a = 5 * u.kJ
print repr(a)

b = u.kJ**2# * (1.0 / u.kJ)
print repr(b)
c = (1.0 / u.kJ)
print repr(c)

print repr(b*c)
print a.AS((1.0 / u.kJ) * u.kJ**2)
#print a.as_units(u.m)

#print '{0:1.3e}'.format(a)
#print '{0:f kJ}'.format(a)
#+END_SRC

#+RESULTS:
: Unit(5000.0, exponents=[ 2 -2  1  0  0  0  0], label=kJ)
: Unit(1000000.0, exponents=[ 4 -4  2  0  0  0  0], label=kJ^2)
: Unit(0.001, exponents=[-2  2 -1  0  0  0  0], label=kJ^-1)
: Unit(1000.0, exponents=[ 2 -2  1  0  0  0  0], label=(kJ^2)*(kJ^-1))
: 5.0 * (kJ^-1)*(kJ^2)



#+BEGIN_SRC python
from pycse.units import *
from pycse.umath import quad


u = units()
k = 0.23 * 1 / u.min
Cao = 2 * u.mol / u.L
V = 1 * u.L

Nao = Cao * V

def integrand(Na):
    return 1 / (k * Na)

t, terr = quad(integrand, 0.5 * Nao, Nao)
print t
#+END_SRC

#+RESULTS:
: 180.821003624 * s

* Overloading subclass methods

#+BEGIN_SRC python
import numpy as np

class A(np.ndarray):
    
    def __new__(cls, input_array, label=None):
        # Input array is an already formed ndarray instance
        # We first cast to be our class type
        obj = np.asarray(input_array).view(cls)
        # add the new attribute to the created instance
        obj.label = label
        # Finally, we must return the newly created object:
        return obj

    def __array_finalize__(self, obj):
        if obj is None: return
        self.label = getattr(obj, 'label', None)
        
    def __array_wrap__(self, out_arr, context=None):
        return np.ndarray.__array_wrap__(self, out_arr, context)

    def __str__(self):
        return 'A({0}, label={1!s})'.format(np.array(self), self.label)
        

a = A(2)
print a 

print a * 2
print np.float(2) * a
print np.float32(2) * a
print np.float64(2) * a
print np.__version__

#+END_SRC

#+RESULTS:
: A(2, label=None)
: A(4, label=None)
: A(4.0, label=None)
: A(4.0, label=None)
: 4.0
: 1.6.1
: 1.6.1

* Capturing stderr and exceptions from python in org-mode
  :PROPERTIES:
  :categories: org-mode,python
  :date:     2013/09/27 19:37:05
  :updated:  2013/09/27 19:47:53
  :END:
I have used org-mode extensively to create examples of using python using the code blocks. For example to illustrate the difference between integer and float division you can do this:

#+BEGIN_SRC python
print 1 / 3
print 1.0 / 3.0
#+END_SRC

#+RESULTS:
: 0
: 0.333333333333

There are some limitations to showing output though. For example, the code blocks do not capture anything from stderr.

#+BEGIN_SRC python
import sys

print >>sys.stderr, 'message to stderr'
#+END_SRC

#+RESULTS:

And exceptions result in no output whatsoever. That is not helpful if you are trying to teach about exceptions! 

I discovered a way around this. The key is using a python sandbox that redirects stdout, stderr and that captures anything sent to those channels. You can also capture any exceptions, and redirect them to a variable. Finally, you can construct the output anyway you see fit. 

Below is the code that runs python code in a sandbox, with redirected outputs. I defined a function that temporarily redirects the output to stdout and stderr, so they can be captured. I execute the code wrapped in a try/except block to capture any exceptions that occur. Finally, I construct a string formatted in a way that lets you know what was on stdout, stderr, and what was an exception.

#+BEGIN_SRC python :tangle sandbox.py
#!/usr/bin/env python
from cStringIO import StringIO
import os, sys

def Sandbox(code):
    '''Given code as a string, execute it in a sandboxed python environment

    return the output, stderr, and any exception code
    '''
    old_stdout = sys.stdout
    old_stderr = sys.stderr
    redirected_output = sys.stdout = StringIO()
    redirected_error = sys.stderr = StringIO()

    ns_globals = {}
    ns_locals = {}
    out, err, exc = None, None, None

    try:
        exec(code, ns_globals, ns_locals)
    except:
        import traceback
        exc = traceback.format_exc()

    out = redirected_output.getvalue()
    err = redirected_error.getvalue()

    # reset outputs to the original values
    sys.stdout = old_stdout
    sys.stderr = old_stderr

    return out, err, exc


if __name__ == '__main__':
    content = sys.stdin.read()
    out, err, exc =  Sandbox(content)

    s = '''---stdout-----------------------------------------------------------
{0}
'''.format(out)

    if err:
        s += '''---stderr-----------------------------------------------------------
{0}
'''.format(err)

    if exc:
        s += '''---Exception--------------------------------------------------------
{0}
'''.format(exc)

    print s

#+END_SRC

To use this, we have to put this file (sandbox.py) in our PYTHONPATH. Then, we tell org-babel to run python using our new sandbox.py module. org-babel pipes the code in a src block to stdin of the python command, which will be intercepted by our sandbox module. If you put this in your init.el, or other customization location, then subsequent uses of python in org-mode will use your sandbox module. I usually only run this for a session as needed.

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python -m sandbox")
#+END_SRC

Now, when we use python, we can capture output to stderr!

#+BEGIN_SRC python
import sys

print >>sys.stderr, 'message to stderr'
#+END_SRC

#+RESULTS:
: ---stdout-----------------------------------------------------------
: 
: ---stderr-----------------------------------------------------------
: message to stderr
: 
: 
And, we can capture exceptions!

#+BEGIN_SRC python
print 1 / 0
#+END_SRC

#+RESULTS:
#+begin_example
---stdout-----------------------------------------------------------

---Exception--------------------------------------------------------
Traceback (most recent call last):
  File "c:\Users\jkitchin\Dropbox\blogofile-jkitchin.github.com\_blog\sandbox.py", line 20, in Sandbox
    exec(code, ns_globals, ns_locals)
  File "<string>", line 1, in <module>
ZeroDivisionError: integer division or modulo by zero


#+end_example

There is a little obfuscation in the exception, since it technically occurs in the Sandbox, but this is better than getting no output whatsoever! I have not tested the sandbox.py code extensively, so I don't know if there will be things that do not work as expected. If you find any, please let me know!
* Customizing the export of org-mode elements
In a recent project I have used org-mode to create a document with lots of src blocks describing how to use python. I wanted to find a way to modify the export process so that each code block would be saved to a file, and a link to that file would be put in the exported pdf. I could have used tangling to do that, but I did not want the burden of having to name the code blocks. I wanted them named sequentially, and I often rearrange the blocks or add new ones in. 


#+BEGIN_SRC emacs-lisp 
(let ((counter 0))

  (defun ox-mrkup-filter-src-block (text back-end info)

    ;; we are processing a src block. Increment counter
    (setq counter (+ counter 1))

    (format "%s 

"middle text"

%s" back-end text))

  (let ((org-export-filter-src-block-functions '(ox-mrkup-filter-src-block))
        (async nil)
        (subtreep t)
        (visible-only nil)
        (body-only t)
        (ext-plist '()))
    (org-html-export-as-html async subtreep visible-only body-only ext-plist)))



#+END_SRC
* Notice anything different
  :PROPERTIES:
  :date:     2013/09/29 11:07:00
  :updated:  2013/09/29 11:41:28
  :END:
Based on the last few posts on [[http://jkitchin.github.io/blog/2013/09/28/Changing-links-to-files-so-they-work-in-a-blog/][making links to external files work in the blog]], and [[http://jkitchin.github.io/blog/2013/09/28/Customizing-export-of-code-blocks-in-HTML/][customizing code block export in HTML]], I have rewritten [[https://github.com/jkitchin/jmax/blob/prelude/blogofile.el][blogofile.el]] to more cleanly support the use of images and data files in my blog posts. Now, I should be able to include a data file (like this [[../../pycse/data/antoine_data.dat][one]]) in a post and you should be able to click on the link to open it after I publish the post in the usual way by pressing F10. That should process the post, construct URLs for all the links, including images, copy the relevant files to the blog directory, and generate the HTML file for blogofile to build. This is a little more robust than it used to be, as all files are stored in a directory named based on the post title, so there is less concern of using duplicate filenames for images and datafiles.

Here is a gratuitous image, just to see if it works ;)

#+CAPTION: test image
[[./images/heat-transfer-roots-1.png]]

Hopefully, there is nothing different on the outside! URLs to images are now in a different place, but that should not be apparent unless you read source code. The real difference is that now there are working links to data files! And it is easier for me to write my posts including them, with simple publishing. 
* TODO Testing out a new python units package
  :PROPERTIES:
  :categories: units
  :END:

#+BEGIN_SRC python
from pint import UnitRegistry
u = UnitRegistry()

distance = 1.0 * u.meter

dd = distance / (1*u.cm)
print 'dd = ',dd
print dd.magnitude, dd.dimensionality
print dd.to('dimensionless')
print 
print 5 * dd * u.cm
print 'float = ',float(dd)
import numpy as np
print np.log(dd)


E = 10 * u.kJ/u.mol
R = 2 * u.cal/u.mol/u.K
T = 300 * u.K

print E/R/T
#+END_SRC

#+RESULTS:
: dd =  1.0 meter / centimeter
: 1.0 dimensionless

: 100.0 dimensionless
: 
: 5.0 meter
: float =  100.0
: 4.60517018599
: 0.0166666666667 kilojoule / cal



#+BEGIN_SRC python
from pint import UnitRegistry
u = UnitRegistry()


from scipy.optimize import fsolve
Fa0 = 3.0                 # mol/min
Fa = Fa0 * (1.0 - 0.8)    # mol/min
G = Fa / Fa0

def objective(D):
    return 1 - G - D * G

Dsol, = fsolve(objective, 1.0)


nu = 1 * u.L / u.min
k = 0.34 * 1 / u.hr

# V = D * nu / k
print Dsol * nu / k   # this prints oddly because the units are not simplified
print (Dsol * nu / k).to(u.L)

#+END_SRC

#+RESULTS:
: 11.7647058824 hour * liter / minute
: 705.882352941 liter


* Getting headline labels out of org-mode

#+BEGIN_SRC emacs-lisp :results value
(setq my-alist '((title . "the title")
		 (author . "John Kitchin")
		 (email . "jkitchin@cmu.edu")))

(cdr (assoc 'email my-alist))

#+END_SRC 

#+BEGIN_SRC emacs-lisp
(find-file "exam.org")   ; open the file

(setq my-info (org-export-collect-tree-properties (org-element-parse-buffer) '()))

(princ (plist-get my-info :headline-numbering ))

;(princ (org-export--collect-headline-numbering (plist-get my-info :headline-numbering) '()))

;(princ (org-element-map (org-element-parse-buffer) 'headline
;(lambda (headline) (cdr (assoc headline (plist-get my-info :headline-numbering))))))
#+END_SRC

#+RESULTS:
#+begin_example
(((headline (:raw-value Do you get it? :begin 18 :end 110 :pre-blank 0 :hiddenp outline :contents-begin 35 :contents-end 109 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 5 :CATEGORY exam :title (Do you get it?) :parent (org-data nil (section (:begin 1 :end 18 :contents-begin 1 :contents-end 17 :post-blank 1 :parent #4) (keyword (:key TITLE :value Exam 1 :begin 1 :end 17 :post-blank 0 :post-affiliated 1 :parent #5))) #2 (headline (:raw-value Multipart question :begin 110 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 131 :contents-end 289 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :CATEGORY exam :title (Multipart question) :parent #4) (headline (:raw-value Circle the best answer :begin 131 :end 229 :pre-blank 0 :hiddenp outline :contents-begin 157 :contents-end 229 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 10 :CATEGORY exam :title (Circle the best answer) :parent #5) (section (:begin 157 :end 229 :contents-begin 157 :contents-end 229 :post-blank 0 :parent #6) (property-drawer (:begin 157 :end 199 :hiddenp outline :contents-begin 173 :contents-end 190 :post-blank 0 :post-affiliated 157 :parent #7) (node-property (:key points :value 10 :begin 173 :end 190 :post-blank 0 :parent #8))) (paragraph (:begin 199 :end 229 :contents-begin 199 :contents-end 229 :post-blank 0 :post-affiliated 199 :parent #7) What is 1 + 1?
a) 2
b) 3
c) 4
))) (headline (:raw-value Describe a cat. :begin 229 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 248 :contents-end 289 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 4 :CATEGORY exam :title (Describe a cat.) :parent #5) (section (:begin 248 :end 290 :contents-begin 248 :contents-end 289 :post-blank 1 :parent #6) (property-drawer (:begin 248 :end 289 :hiddenp outline :contents-begin 264 :contents-end 280 :post-blank 0 :post-affiliated 248 :parent #7) (node-property (:key points :value 4 :begin 264 :end 280 :post-blank 0 :parent #8)))))) (headline (:raw-value Essay question :begin 290 :end 403 :pre-blank 0 :hiddenp outline :contents-begin 307 :contents-end 396 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 6 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 25 :CATEGORY exam :title (Essay question) :parent #4) (section (:begin 307 :end 403 :contents-begin 307 :contents-end 396 :post-blank 7 :parent #5) (property-drawer (:begin 307 :end 346 :hiddenp outline :contents-begin 322 :contents-end 338 :post-blank 0 :post-affiliated 307 :parent #6) (node-property (:key points :value 25 :begin 322 :end 338 :post-blank 0 :parent #7))) (paragraph (:begin 346 :end 380 :contents-begin 346 :contents-end 378 :post-blank 2 :post-affiliated 346 :parent #6) Expound on the meaning of life.
) (paragraph (:begin 380 :end 396 :contents-begin 380 :contents-end 396 :post-blank 0 :post-affiliated 380 :parent #6) gradesheet:here
))))) (section (:begin 35 :end 110 :contents-begin 35 :contents-end 109 :post-blank 1 :parent #2) (property-drawer (:begin 35 :end 73 :hiddenp outline :contents-begin 50 :contents-end 65 :post-blank 0 :post-affiliated 35 :parent #3) (node-property (:key points :value 5 :begin 50 :end 65 :post-blank 0 :parent #4))) (paragraph (:begin 73 :end 109 :contents-begin 73 :contents-end 109 :post-blank 0 :post-affiliated 73 :parent #3) What is the answer to the universe?
))) 1) ((headline (:raw-value Multipart question :begin 110 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 131 :contents-end 289 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :CATEGORY exam :title (Multipart question) :parent (org-data nil (section (:begin 1 :end 18 :contents-begin 1 :contents-end 17 :post-blank 1 :parent #4) (keyword (:key TITLE :value Exam 1 :begin 1 :end 17 :post-blank 0 :post-affiliated 1 :parent #5))) (headline (:raw-value Do you get it? :begin 18 :end 110 :pre-blank 0 :hiddenp outline :contents-begin 35 :contents-end 109 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 5 :CATEGORY exam :title (Do you get it?) :parent #4) (section (:begin 35 :end 110 :contents-begin 35 :contents-end 109 :post-blank 1 :parent #5) (property-drawer (:begin 35 :end 73 :hiddenp outline :contents-begin 50 :contents-end 65 :post-blank 0 :post-affiliated 35 :parent #6) (node-property (:key points :value 5 :begin 50 :end 65 :post-blank 0 :parent #7))) (paragraph (:begin 73 :end 109 :contents-begin 73 :contents-end 109 :post-blank 0 :post-affiliated 73 :parent #6) What is the answer to the universe?
))) #2 (headline (:raw-value Essay question :begin 290 :end 403 :pre-blank 0 :hiddenp outline :contents-begin 307 :contents-end 396 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 6 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 25 :CATEGORY exam :title (Essay question) :parent #4) (section (:begin 307 :end 403 :contents-begin 307 :contents-end 396 :post-blank 7 :parent #5) (property-drawer (:begin 307 :end 346 :hiddenp outline :contents-begin 322 :contents-end 338 :post-blank 0 :post-affiliated 307 :parent #6) (node-property (:key points :value 25 :begin 322 :end 338 :post-blank 0 :parent #7))) (paragraph (:begin 346 :end 380 :contents-begin 346 :contents-end 378 :post-blank 2 :post-affiliated 346 :parent #6) Expound on the meaning of life.
) (paragraph (:begin 380 :end 396 :contents-begin 380 :contents-end 396 :post-blank 0 :post-affiliated 380 :parent #6) gradesheet:here
))))) (headline (:raw-value Circle the best answer :begin 131 :end 229 :pre-blank 0 :hiddenp outline :contents-begin 157 :contents-end 229 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 10 :CATEGORY exam :title (Circle the best answer) :parent #2) (section (:begin 157 :end 229 :contents-begin 157 :contents-end 229 :post-blank 0 :parent #3) (property-drawer (:begin 157 :end 199 :hiddenp outline :contents-begin 173 :contents-end 190 :post-blank 0 :post-affiliated 157 :parent #4) (node-property (:key points :value 10 :begin 173 :end 190 :post-blank 0 :parent #5))) (paragraph (:begin 199 :end 229 :contents-begin 199 :contents-end 229 :post-blank 0 :post-affiliated 199 :parent #4) What is 1 + 1?
a) 2
b) 3
c) 4
))) (headline (:raw-value Describe a cat. :begin 229 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 248 :contents-end 289 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 4 :CATEGORY exam :title (Describe a cat.) :parent #2) (section (:begin 248 :end 290 :contents-begin 248 :contents-end 289 :post-blank 1 :parent #3) (property-drawer (:begin 248 :end 289 :hiddenp outline :contents-begin 264 :contents-end 280 :post-blank 0 :post-affiliated 248 :parent #4) (node-property (:key points :value 4 :begin 264 :end 280 :post-blank 0 :parent #5)))))) 2) ((headline (:raw-value Circle the best answer :begin 131 :end 229 :pre-blank 0 :hiddenp outline :contents-begin 157 :contents-end 229 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 10 :CATEGORY exam :title (Circle the best answer) :parent (headline (:raw-value Multipart question :begin 110 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 131 :contents-end 289 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :CATEGORY exam :title (Multipart question) :parent (org-data nil (section (:begin 1 :end 18 :contents-begin 1 :contents-end 17 :post-blank 1 :parent #6) (keyword (:key TITLE :value Exam 1 :begin 1 :end 17 :post-blank 0 :post-affiliated 1 :parent #7))) (headline (:raw-value Do you get it? :begin 18 :end 110 :pre-blank 0 :hiddenp outline :contents-begin 35 :contents-end 109 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 5 :CATEGORY exam :title (Do you get it?) :parent #6) (section (:begin 35 :end 110 :contents-begin 35 :contents-end 109 :post-blank 1 :parent #7) (property-drawer (:begin 35 :end 73 :hiddenp outline :contents-begin 50 :contents-end 65 :post-blank 0 :post-affiliated 35 :parent #8) (node-property (:key points :value 5 :begin 50 :end 65 :post-blank 0 :parent #9))) (paragraph (:begin 73 :end 109 :contents-begin 73 :contents-end 109 :post-blank 0 :post-affiliated 73 :parent #8) What is the answer to the universe?
))) #4 (headline (:raw-value Essay question :begin 290 :end 403 :pre-blank 0 :hiddenp outline :contents-begin 307 :contents-end 396 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 6 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 25 :CATEGORY exam :title (Essay question) :parent #6) (section (:begin 307 :end 403 :contents-begin 307 :contents-end 396 :post-blank 7 :parent #7) (property-drawer (:begin 307 :end 346 :hiddenp outline :contents-begin 322 :contents-end 338 :post-blank 0 :post-affiliated 307 :parent #8) (node-property (:key points :value 25 :begin 322 :end 338 :post-blank 0 :parent #9))) (paragraph (:begin 346 :end 380 :contents-begin 346 :contents-end 378 :post-blank 2 :post-affiliated 346 :parent #8) Expound on the meaning of life.
) (paragraph (:begin 380 :end 396 :contents-begin 380 :contents-end 396 :post-blank 0 :post-affiliated 380 :parent #8) gradesheet:here
))))) #2 (headline (:raw-value Describe a cat. :begin 229 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 248 :contents-end 289 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 4 :CATEGORY exam :title (Describe a cat.) :parent #4) (section (:begin 248 :end 290 :contents-begin 248 :contents-end 289 :post-blank 1 :parent #5) (property-drawer (:begin 248 :end 289 :hiddenp outline :contents-begin 264 :contents-end 280 :post-blank 0 :post-affiliated 248 :parent #6) (node-property (:key points :value 4 :begin 264 :end 280 :post-blank 0 :parent #7))))))) (section (:begin 157 :end 229 :contents-begin 157 :contents-end 229 :post-blank 0 :parent #2) (property-drawer (:begin 157 :end 199 :hiddenp outline :contents-begin 173 :contents-end 190 :post-blank 0 :post-affiliated 157 :parent #3) (node-property (:key points :value 10 :begin 173 :end 190 :post-blank 0 :parent #4))) (paragraph (:begin 199 :end 229 :contents-begin 199 :contents-end 229 :post-blank 0 :post-affiliated 199 :parent #3) What is 1 + 1?
a) 2
b) 3
c) 4
))) 2 1) ((headline (:raw-value Describe a cat. :begin 229 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 248 :contents-end 289 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 4 :CATEGORY exam :title (Describe a cat.) :parent (headline (:raw-value Multipart question :begin 110 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 131 :contents-end 289 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :CATEGORY exam :title (Multipart question) :parent (org-data nil (section (:begin 1 :end 18 :contents-begin 1 :contents-end 17 :post-blank 1 :parent #6) (keyword (:key TITLE :value Exam 1 :begin 1 :end 17 :post-blank 0 :post-affiliated 1 :parent #7))) (headline (:raw-value Do you get it? :begin 18 :end 110 :pre-blank 0 :hiddenp outline :contents-begin 35 :contents-end 109 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 5 :CATEGORY exam :title (Do you get it?) :parent #6) (section (:begin 35 :end 110 :contents-begin 35 :contents-end 109 :post-blank 1 :parent #7) (property-drawer (:begin 35 :end 73 :hiddenp outline :contents-begin 50 :contents-end 65 :post-blank 0 :post-affiliated 35 :parent #8) (node-property (:key points :value 5 :begin 50 :end 65 :post-blank 0 :parent #9))) (paragraph (:begin 73 :end 109 :contents-begin 73 :contents-end 109 :post-blank 0 :post-affiliated 73 :parent #8) What is the answer to the universe?
))) #4 (headline (:raw-value Essay question :begin 290 :end 403 :pre-blank 0 :hiddenp outline :contents-begin 307 :contents-end 396 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 6 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 25 :CATEGORY exam :title (Essay question) :parent #6) (section (:begin 307 :end 403 :contents-begin 307 :contents-end 396 :post-blank 7 :parent #7) (property-drawer (:begin 307 :end 346 :hiddenp outline :contents-begin 322 :contents-end 338 :post-blank 0 :post-affiliated 307 :parent #8) (node-property (:key points :value 25 :begin 322 :end 338 :post-blank 0 :parent #9))) (paragraph (:begin 346 :end 380 :contents-begin 346 :contents-end 378 :post-blank 2 :post-affiliated 346 :parent #8) Expound on the meaning of life.
) (paragraph (:begin 380 :end 396 :contents-begin 380 :contents-end 396 :post-blank 0 :post-affiliated 380 :parent #8) gradesheet:here
))))) (headline (:raw-value Circle the best answer :begin 131 :end 229 :pre-blank 0 :hiddenp outline :contents-begin 157 :contents-end 229 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 10 :CATEGORY exam :title (Circle the best answer) :parent #4) (section (:begin 157 :end 229 :contents-begin 157 :contents-end 229 :post-blank 0 :parent #5) (property-drawer (:begin 157 :end 199 :hiddenp outline :contents-begin 173 :contents-end 190 :post-blank 0 :post-affiliated 157 :parent #6) (node-property (:key points :value 10 :begin 173 :end 190 :post-blank 0 :parent #7))) (paragraph (:begin 199 :end 229 :contents-begin 199 :contents-end 229 :post-blank 0 :post-affiliated 199 :parent #6) What is 1 + 1?
a) 2
b) 3
c) 4
))) #2)) (section (:begin 248 :end 290 :contents-begin 248 :contents-end 289 :post-blank 1 :parent #2) (property-drawer (:begin 248 :end 289 :hiddenp outline :contents-begin 264 :contents-end 280 :post-blank 0 :post-affiliated 248 :parent #3) (node-property (:key points :value 4 :begin 264 :end 280 :post-blank 0 :parent #4))))) 2 2) ((headline (:raw-value Essay question :begin 290 :end 403 :pre-blank 0 :hiddenp outline :contents-begin 307 :contents-end 396 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 6 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 25 :CATEGORY exam :title (Essay question) :parent (org-data nil (section (:begin 1 :end 18 :contents-begin 1 :contents-end 17 :post-blank 1 :parent #4) (keyword (:key TITLE :value Exam 1 :begin 1 :end 17 :post-blank 0 :post-affiliated 1 :parent #5))) (headline (:raw-value Do you get it? :begin 18 :end 110 :pre-blank 0 :hiddenp outline :contents-begin 35 :contents-end 109 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 5 :CATEGORY exam :title (Do you get it?) :parent #4) (section (:begin 35 :end 110 :contents-begin 35 :contents-end 109 :post-blank 1 :parent #5) (property-drawer (:begin 35 :end 73 :hiddenp outline :contents-begin 50 :contents-end 65 :post-blank 0 :post-affiliated 35 :parent #6) (node-property (:key points :value 5 :begin 50 :end 65 :post-blank 0 :parent #7))) (paragraph (:begin 73 :end 109 :contents-begin 73 :contents-end 109 :post-blank 0 :post-affiliated 73 :parent #6) What is the answer to the universe?
))) (headline (:raw-value Multipart question :begin 110 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 131 :contents-end 289 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :CATEGORY exam :title (Multipart question) :parent #4) (headline (:raw-value Circle the best answer :begin 131 :end 229 :pre-blank 0 :hiddenp outline :contents-begin 157 :contents-end 229 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 10 :CATEGORY exam :title (Circle the best answer) :parent #5) (section (:begin 157 :end 229 :contents-begin 157 :contents-end 229 :post-blank 0 :parent #6) (property-drawer (:begin 157 :end 199 :hiddenp outline :contents-begin 173 :contents-end 190 :post-blank 0 :post-affiliated 157 :parent #7) (node-property (:key points :value 10 :begin 173 :end 190 :post-blank 0 :parent #8))) (paragraph (:begin 199 :end 229 :contents-begin 199 :contents-end 229 :post-blank 0 :post-affiliated 199 :parent #7) What is 1 + 1?
a) 2
b) 3
c) 4
))) (headline (:raw-value Describe a cat. :begin 229 :end 290 :pre-blank 0 :hiddenp outline :contents-begin 248 :contents-end 289 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :quotedp nil :POINTS 4 :CATEGORY exam :title (Describe a cat.) :parent #5) (section (:begin 248 :end 290 :contents-begin 248 :contents-end 289 :post-blank 1 :parent #6) (property-drawer (:begin 248 :end 289 :hiddenp outline :contents-begin 264 :contents-end 280 :post-blank 0 :post-affiliated 248 :parent #7) (node-property (:key points :value 4 :begin 264 :end 280 :post-blank 0 :parent #8)))))) #2)) (section (:begin 307 :end 403 :contents-begin 307 :contents-end 396 :post-blank 7 :parent #2) (property-drawer (:begin 307 :end 346 :hiddenp outline :contents-begin 322 :contents-end 338 :post-blank 0 :post-affiliated 307 :parent #3) (node-property (:key points :value 25 :begin 322 :end 338 :post-blank 0 :parent #4))) (paragraph (:begin 346 :end 380 :contents-begin 346 :contents-end 378 :post-blank 2 :post-affiliated 346 :parent #3) Expound on the meaning of life.
) (paragraph (:begin 380 :end 396 :contents-begin 380 :contents-end 396 :post-blank 0 :post-affiliated 380 :parent #3) gradesheet:here
))) 3))
#+end_example



* Enabling right-clicks in org-mode links
  :PROPERTIES:
  :categories: org-mode
  :date:     2013/10/21 19:58:52
  :updated:  2013/10/21 20:45:37
  :END:
Out of the box you can click on org-mode links to make the do things. On my machine, all clicks are equal, left mouse, middle mouse, and right mouse all act as a "click". I was curious about whether I could get different behavior on a link with a left or right mouse click. It is easy enough to [[http://orgmode.org/manual/Adding-hyperlink-types.html][define a new link type]]. You define a function that is run when you click on the link.

To figure out what to do here, I looked into the events handling in emacs. According to this [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Click-Events.html][page]], there are click events. So, after we click on a link, there should be a click event which was the last input event. We can get that, figure out which button was pressed, and run code accordingly. We will make the code add some lines to the buffer after the link about what happened.

Here is my link definition. 

#+BEGIN_SRC emacs-lisp
(setq counter 1)
(org-add-link-type
 "test"
 ;; this function is run when you click
 (lambda (link-string) 
   (let ((button (car last-input-event)))
     (cond ((eq button 'mouse-1) 
            (end-of-line)
            (insert (format "\nclick %s. mouse-1 pressed %s\n" counter last-input-event))
            (setq counter (+ counter 1)))
           ((eq button 'mouse-2) 
            (end-of-line) 
            (insert (format "\nclick %s. mouse-2 pressed %s\n" counter last-input-event))
            (setq counter (+ counter 1)))
           ((eq button 'mouse-3) 
            (end-of-line)
            (insert (format "\nclick %s. mouse-3 pressed %s\n" counter last-input-event))
            (setq counter (+ counter 1))))))
 ;; formatting
(lambda (keyword desc format)
   (cond
    ((eq format 'html) (format "<pre>%s:%s</pre>" keyword desc)))))
#+END_SRC 


Here we make a link. When you click on it, it adds lines right after the link telling you what was clicked on. I left-clicked, middle-clicked and right-clicked. The right-clicked result is the first line.

test:which-button 
click 3. mouse-3 pressed (mouse-3 (#<window 46 on blog.org> 56959 (57 . 456) -320964819 nil 56959 (7 . 28) nil (1 . 8) (8 . 16)))

click 2. mouse-2 pressed (mouse-2 (#<window 46 on blog.org> 56959 (57 . 456) -320965724 nil 56959 (7 . 28) nil (1 . 8) (8 . 16)))

click 1. mouse-2 pressed (mouse-2 (#<window 46 on blog.org> 56959 (57 . 456) -320966660 nil 56959 (7 . 28) nil (1 . 8) (8 . 16)))


Curiously, this only shows that mouse-2 (for left or middle mouse) or mouse-3 (for right click) was pressed, never mouse-1. I am not sure what causes that. If I try to capture an event it does show mouse-1 is active.

#+BEGIN_SRC emacs-lisp
(princ (read-event))
#+END_SRC

#+RESULTS:
: (down-mouse-1 (#<window 34 on blog.org> 56437 (253 . 308) -322917920 nil 56437 (31 . 19) nil (93 . 4) (8 . 16)))

Anyway, it looks conceivable that you could have different link actions occur for different mouse clicks. I could see using this in a citation link, where a left click might open the citation in my bibtex file, and right clicking would open a pdf of the citation if it existed. 

I have not figured out how flexible this might be, for example could you use modifier keys with mouse clicks? This code suggests that it is possible in emacs, but so far none of these make it into the last-input-event in the org-link clicks.

#+BEGIN_SRC emacs-lisp
(princ (read-event))
#+END_SRC

#+RESULTS:
: (S-down-mouse-1 (#<window 34 on blog.org> 56725 (1 . 299) -322897656 nil 56725 (0 . 18) nil (1 . 11) (8 . 16)))

It might be difficult remembering all the modifiers and clicks, but it would be cool if it was possible!
