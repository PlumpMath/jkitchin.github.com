* DONE Adding captions and attributes to figures and tables from code blocks in org-mode
  CLOSED: [2016-02-26 Fri 12:43]
  :PROPERTIES:
  :categories: orgmode
  :date:     2016/02/26 12:43:37
  :updated:  2016/02/26 12:43:37
  :END:

I have wanted for a long time to be able to add captions and attributes to figures and tables generated from code blocks. I brought this up on the mailing list (https://lists.gnu.org/archive/html/emacs-orgmode/2015-11/msg00544.html) and finally, I have figured out a way to do it that seems ok. It is based on the :wrap feature of org-babel.

The idea is to use a function that will wrap the results in additional text. We use this function that will add a caption and attributes.

#+BEGIN_SRC emacs-lisp
(defun src-decorate (&optional caption attributes)
  "A wrap function for src blocks."
  (concat
   "ORG\n"
   (when attributes
     (concat (mapconcat 'identity attributes "\n") "\n"))
   (when caption
     (format "#+caption: %s" caption))))
#+END_SRC

#+RESULTS:
: src-decorate

Now, we try it out on a figure:

#+BEGIN_SRC python :wrap (src-decorate "A sin wave. Yep, it works. label:fig-sin" '("#+attr_latex: :width 3in" "#+attr_org: :width 300" ))
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2 * np.pi)
y = np.sin(x)

plt.plot(x, y)
plt.savefig('images/sin.png')
print('[[./images/sin.png' + ']]')
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+attr_latex: :width 3in
#+attr_org: :width 300
#+caption: A sin wave. label:fig-sin
[[./images/sin.png]]
#+END_ORG

Success. We can even refer to Fig. ref:fig-sin. Next, we try it on a table.

#+BEGIN_SRC python :results value :wrap (src-decorate "A table of sin data. label:tab-sin" '("#+attr_latex: :placement [H]"))
import numpy as np

x = np.linspace(0, 2 * np.pi, 5)
y = np.sin(x)

return [['x', 'y'], None] + list(zip(x, y))
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+attr_latex: :placement [H]
#+caption: A table of sin data. label:tab-sin
|                  x |                       y |
|--------------------+-------------------------|
|                0.0 |                     0.0 |
| 1.5707963267948966 |                     1.0 |
|  3.141592653589793 |  1.2246467991473532e-16 |
|   4.71238898038469 |                    -1.0 |
|  6.283185307179586 | -2.4492935982947064e-16 |
#+END_ORG

Sweet.  We can refer to Tab. ref:tab-sin too. I have wanted this for a long time.  Perseverance wins again! and org-mode gets better. Hopefully this works with org 8.3 too!


* DONE Pycse is now using Python3
  CLOSED: [2016-02-25 Thu 19:09]
  :PROPERTIES:
  :categories: python
  :date:     2016/02/25 19:09:20
  :updated:  2016/02/25 19:17:16
  :END:
I spent the last couple of days going through the notes for [[http://kitchingroup.cheme.cmu.edu/pycse][pycse]] and updating it for Python 3! If you aren't familiar with pycse, it is an acronym for Python3 Calculations in Science and Engineering, and it is about 400 pages of examples spanning scientific and engineering computations, and a python module that extends numpy/scipy with some functions for adding events to differential equation solvers, and regression with confidence intervals.

It is mostly done, and was pretty easy. The Python module for pycse
(http://github.com/jkitchin/pycse) should also be Python 3 compliant. Yep, on my
Mac I have switched over to the Anaconda Python 3 from Continuum IO (thanks for
that!).

#+BEGIN_SRC python
import sys
print(sys.version)
#+END_SRC

#+RESULTS:
: 3.5.1 |Anaconda 2.5.0 (x86_64)| (default, Dec  7 2015, 11:24:55)
: [GCC 4.2.1 (Apple Inc. build 5577)]

Now we can succinctly do matrix multiplication like this:

#+BEGIN_SRC python
import numpy as np
a = np.array([1, 2, 3])
a = np.array([1, 2, 3])
print(a @ a)  # the matrix multiplication operator

# instead of
print(np.dot(a, a))
#+END_SRC

#+RESULTS:
: 14
: 14

Here is a summary of what the changes to the Python2 version of Pycse entailed.

1. Change all print statements to print functions. There were so many...
2. Eliminate use of tabs in some code blocks, Python3 is not flexible on that.

I wrote this function to fix both of these for me (I use Emacs as my editor), which worked nicely:
#+BEGIN_SRC emacs-lisp
(defun fp ()
  "convert print to print() allowing for line end comments. does not do multiline.
and untabify"
  (interactive)
  (beginning-of-line)
  (re-search-forward "print " (line-end-position) t)
  (delete-char -1)
  (insert "(")
  ;; rm spaces
  (delete-forward-char
   (save-excursion
     (skip-chars-forward " ")))
  (when
      (re-search-forward "#" (line-end-position) 'move)
    (goto-char (match-beginning 0)))
  (skip-chars-backward " ")
  (insert ")")
  ;; untabify
  (let ((src (org-element-context)))
    (untabify (org-element-property :begin src)
	      (org-element-property :end src))))
#+END_SRC

3. reduce no longer exists, you have to use functools.reduce. Probably will not affect me much...
4. Strings are sometimes bytes, and need to be encoded/decoded depending on what you are doing.

Otherwise, most things seemed to work fine. In a few places I had articles on Windows specific code, which I couldn't test on the Mac I work on now. Only one package was apparently not ready for Python3, and that was scimath from Enthought, which had units capability. Quantities worked fine though.

For some reason I could not do interactive key-presses in matplotlib. I am not sure if that is a Python3, or my Mac setup for now.

When I first wrote the Pycse book (in org-mode naturally), I must have had a default session setup for org-mode, because there was no :session information in a few of the src-block headers. I had to add these back in a few places.

Overall the transition was pretty seamless. It looks like I will be transitioning to Python3 in teaching this fall! Big thanks to the Anaconda team for packaging Python 3.5 and making it so easy to install!

* DONE Generating an alphabetized list of collaborators from the past five years
  CLOSED: [2016-02-20 Sat 17:24]
  :PROPERTIES:
  :categories: python,scopus
  :date:     2016/02/20 17:03:13
  :updated:  2016/02/20 17:24:16
  :END:
Almost every proposal I write requires some list of my coauthors from the past several years. Some want the list alphabetized, and some want affiliations too. It has always bothered me to make this list, mostly because it is tedious, and it seems like something that should not be hard to generate. It turns out it is not too hard. I have been developing a Python interface ((https://github.com/jkitchin/scopus)) to [[http://scopus.com][Scopus]] that more or less enables me to script this.

Scopus is not free. You need either a license, or institutional access to use it. Here is the strategy to generate my list of coauthors. First, we need to get the articles for the past 5 years that are mine, and for each paper we get the coauthors. I use my Scopus author id in the query, and then sort the names alphabetically into a table. Then, I use that table as input to a second code block that does an author query in Scopus to get the current affiliations. Here is the code.

#+name: coauthors
#+BEGIN_SRC python :results value
from scopus.scopus_api import ScopusAbstract
from scopus.scopus_search import ScopusSearch

s = ScopusSearch('AU-ID(7004212771) AND PUBYEAR > 2010')

coauthors = {}
for eid in s.EIDS:
    ab = ScopusAbstract(eid)
    for au in ab.authors:
        if au.auid not in coauthors and au.auid != '7004212771':
            coauthors[au.auid] = au.indexed_name

return sorted([[auid, name] for auid,name in coauthors.items()], key=lambda x:x[1])
#+END_SRC

#+RESULTS: coauthors
| 52463103500 | Akhade S.A.          |
|  6506329719 | Albenze E.           |
| 36472906200 | Alesi W.R.           |
| 56963752500 | Anna S.L.            |
| 56522803500 | Boes J.R.            |
| 26433085700 | Calle-Vallejo F.     |
| 54973276000 | Chao R.              |
|  7201800897 | Collins T.J.         |
| 54883867200 | Curnan M.T.          |
|  7003584159 | Damodaran K.         |
| 55328415000 | Demeter E.L.         |
| 37005464900 | Dsilva C.            |
| 18037364800 | Egbebi A.            |
| 35603120700 | Eslick J.C.          |
| 56673468200 | Fan Q.               |
| 24404182600 | Frenkel A.I.         |
| 35514271900 | Gellman A.J.         |
| 12803603300 | Gerdes K.            |
| 54585146800 | Gumuslu G.           |
| 55569145100 | Hallenbeck A.P.      |
| 24316829300 | Hansen H.A.          |
| 56009239000 | Hilburg S.L.         |
| 55676869000 | Hopkinson D.         |
| 56674328100 | Illes S.M.           |
| 23479647900 | Inoglu N.G.          |
|  6603398169 | Jaramillo T.F.       |
|  8054222900 | Joshi Y.V.           |
| 47962378000 | Keturakis C.         |
| 57056061900 | Kondratyuk P.        |
| 55391991800 | Kondratyuk P.        |
|  7006205398 | Koper M.T.M.         |
| 23004637900 | Kusuma V.A.          |
| 35787409400 | Landon J.            |
| 55005205100 | Lee A.S.             |
|  6701399651 | Luebke D.R.          |
| 35491189200 | Man I.C.             |
| 27467500000 | Mantripragada H.     |
| 55373026900 | Mao J.X.             |
| 55210428500 | Marks A.             |
| 27667815700 | Martinez J.I.        |
| 56071079300 | Mehta P.             |
| 56673592900 | Michael J.D.         |
| 55772901000 | Miller D.C.          |
|  7501599910 | Miller J.B.          |
| 26032231600 | Miller S.D.          |
| 35576929100 | Morreale B.          |
| 55308251800 | Munprom R.           |
| 14036290400 | Myers C.R.           |
|  7007042214 | Norskov J.K.         |
| 24081524800 | Nulwala H.B.         |
| 56347288000 | Petrova R.           |
|  7006208748 | Pushkarev V.V.       |
| 56591664500 | Raman S.             |
|  7004217247 | Resnik K.P.          |
| 47962694800 | Richard Alesi Jr. W. |
|  9742604300 | Rossmeisl J.         |
|  7201763336 | Rubin E.S.           |
|  6602471339 | Sabolsky E.M.        |
|  7004541416 | Salvador P.A.        |
| 22981503200 | Shi W.               |
| 55885836600 | Siefert N.S.         |
| 25224517700 | Su H.-Y.             |
| 57016792200 | Thirumalai H.        |
|  8724572500 | Thompson R.L.        |
|  8238710700 | Vasic R.             |
| 37081979100 | Versteeg P.          |
|  7006804734 | Wachs I.E.           |
|  6701692232 | Washburn N.R.        |
| 56542538800 | Watkins J.D.         |
| 55569461200 | Xu Z.                |
| 56424861600 | Yin C.               |
| 56969809500 | Zhou X.              |

It is worth inspecting this list for duplicates. I see at least two duplicates. That is a limitation of almost every indexing service I have seen. Names are hard to disambiguate. I will live with it. Now, we will use another query to get affiliations, and the names. Since we use a sorted list from above, these names are in alphabetical order. We exclude co-authors from Carnegie Mellon University since these are often my students, or colleagues, and they are obvious conflicts of interest for proposal reviewing anyway. I split the current affiliation on a comma, since it appears the institution comes first, followed by the department. We only need an institution here.

#+BEGIN_SRC python :var data=coauthors
from scopus.scopus_author import ScopusAuthor

coauthors = [ScopusAuthor(auid) for auid, name in data]

print(', '.join(['{0} ({1})'.format(au.name, au.current_affiliation.split(',')[0])
                 for au in coauthors
                 if au.current_affiliation.split(',')[0] != 'Carnegie Mellon University']))
#+END_SRC

#+RESULTS:
: Sneha A. Akhade (Pennsylvania State University), Erik J. Albenze (National Energy Technology Laboratory), Federico Calle-Vallejo (Leiden Institute of Chemistry), Robin Chao (National Energy Technology Laboratory), Krishnan V. Damodaran (University of Pittsburgh), Carmeline J. Dsilva (Princeton University), Adefemi A. Egbebi (URS), John C. Eslick (National Energy Technology Laboratory), Anatoly I. Frenkel (Yeshiva University), Kirk R. Gerdes (National Energy Technology Laboratory), Heine Anton Hansen (Danmarks Tekniske Universitet), David P. Hopkinson (National Energy Technology Laboratory), Thomas Francisco Jaramillo (Fermi National Accelerator Laboratory), Yogesh V. Joshi (Exxon Mobil Research and Engineering), Christopher J. Keturakis (Lehigh University), Marc T M Koper (Leiden Institute of Chemistry), Victor A. Kusuma (National Energy Technology Laboratory), James Landon (University of Kentucky), David R. Luebke (Liquid Ion Solutions), Isabelacostinela Man (Universitatea din Bucuresti), James X. Mao (University of Pittsburgh), José Ignacio Martínez (CSIC - Instituto de Ciencia de Materiales de Madrid (ICMM)), David C M Miller (National Energy Technology Laboratory), Bryan D. Morreale (National Energy Technology Laboratory), Christina R. Myers (National Energy Technology Laboratory), Jens Kehlet Nørskov (Stanford Linear Accelerator Center), Rumyana V. Petrova (International Iberian Nanotechnology Laboratory), Vladimir V. Pushkarev (Dow Corning Corporation), Sumathy Raman (Exxon Mobil Research and Engineering), Kevin P. Resnik (URS), Walter Richard Alesi (National Energy Technology Laboratory), Jan Rossmeisl (Kobenhavns Universitet), Edward M. Sabolsky (West Virginia University), Wei Shi (University of Pittsburgh), Nicholas S. Siefert (National Energy Technology Laboratory), Haiyan Su (Dalian Institute of Chemical Physics Chinese Academy of Sciences), Robert Lee Thompson (University of Pittsburgh Medical Center), Relja Vasić (SUNY College of Nanoscale Science and Engineering), Israel E. Wachs (Lehigh University), John D. Watkins (National Energy Technology Laboratory), Chunrong Yin (United States Department of Energy), Xu Zhou (Liquid Ion Solutions)

This is pretty sweet. I could pretty easily create a query that had all the PIs on a proposal, and alphabetize everyone's coauthors, or print them to a CSV file for import to Excel, or whatever format is required for conflict of interest reporting. The list is not perfect, but it is easy to manually fix it here.

That little bit of code is wrapped in a command-line utility in the scopus Python package. You use it like this. Just run it every time you need an updated list of coauthors! It isn't super flexible for now, e.g. excluding multiple affiliations, including multiple authors, etc... isn't fully supported.

#+BEGIN_SRC sh :dir ../../Dropbox/python/scopus/scopus/bin
./scopus_coauthors 7004212771 2010 --exclude-affiliation="Carnegie Mellon University"
#+END_SRC

#+RESULTS:
: Sneha A. Akhade (Pennsylvania State University), Erik J. Albenze (National Energy Technology Laboratory), Federico Calle-Vallejo (Leiden Institute of Chemistry), Robin Chao (National Energy Technology Laboratory), Krishnan V. Damodaran (University of Pittsburgh), Carmeline J. Dsilva (Princeton University), Adefemi A. Egbebi (URS), John C. Eslick (National Energy Technology Laboratory), Anatoly I. Frenkel (Yeshiva University), Kirk R. Gerdes (National Energy Technology Laboratory), Heine Anton Hansen (Danmarks Tekniske Universitet), David P. Hopkinson (National Energy Technology Laboratory), Thomas Francisco Jaramillo (Fermi National Accelerator Laboratory), Yogesh V. Joshi (Exxon Mobil Research and Engineering), Christopher J. Keturakis (Lehigh University), Marc T M Koper (Leiden Institute of Chemistry), Victor A. Kusuma (National Energy Technology Laboratory), James Landon (University of Kentucky), David R. Luebke (Liquid Ion Solutions), Isabelacostinela Man (Universitatea din Bucuresti), James X. Mao (University of Pittsburgh), José Ignacio Martínez (CSIC - Instituto de Ciencia de Materiales de Madrid (ICMM)), David C M Miller (National Energy Technology Laboratory), Bryan D. Morreale (National Energy Technology Laboratory), Christina R. Myers (National Energy Technology Laboratory), Jens Kehlet Nørskov (Stanford Linear Accelerator Center), Rumyana V. Petrova (International Iberian Nanotechnology Laboratory), Vladimir V. Pushkarev (Dow Corning Corporation), Sumathy Raman (Exxon Mobil Research and Engineering), Kevin P. Resnik (URS), Walter Richard Alesi (National Energy Technology Laboratory), Jan Rossmeisl (Kobenhavns Universitet), Edward M. Sabolsky (West Virginia University), Wei Shi (University of Pittsburgh), Nicholas S. Siefert (National Energy Technology Laboratory), Haiyan Su (Dalian Institute of Chemical Physics Chinese Academy of Sciences), Robert Lee Thompson (University of Pittsburgh Medical Center), Relja Vasić (SUNY College of Nanoscale Science and Engineering), Israel E. Wachs (Lehigh University), John D. Watkins (National Energy Technology Laboratory), Chunrong Yin (United States Department of Energy), Xu Zhou (Liquid Ion Solutions)


* DONE Interactive figures in blog posts with mpld3
  CLOSED: [2016-02-08 Mon 07:33]
  :PROPERTIES:
  :categories: python,plotting,interactive
  :date:     2016/02/08 07:33:23
  :updated:  2016/02/08 07:33:23
  :END:

Continuing the exploration of interactive figures, today we consider the Python plotting library [[http://mpld3.github.io/index.html][mpld3]]. We will again use our own published data. We wrote this great paper on core level shifts (CLS) in Cu-Pd alloys cite:boes-2015-core-cu. I want an interactive figure that shows the name of the calculation on each point as a tooltip. This data is all stored in the supporting information file, and you can see how we use it [[id:17D73543-F528-459D-95EF-B3AB3C4EEDC7][here]]. This figure shows how the core level shift of a Cu atom changes depending on the number of nearest neighbor Cu atoms. Just hover your mouse over a point to see the name and CLS for that point.

#+RESULTS: mpld3-figure
#+BEGIN_HTML


<style>

</style>

<div id="fig_el8116045214667689201799167"></div>
<script>
function mpld3_load_lib(url, callback){
  var s = document.createElement('script');
  s.src = url;
  s.async = true;
  s.onreadystatechange = s.onload = callback;
  s.onerror = function(){console.warn("failed to load library " + url);};
  document.getElementsByTagName("head")[0].appendChild(s);
}

if(typeof(mpld3) !== "undefined" && mpld3._mpld3IsLoaded){
   // already loaded: just create the figure
   !function(mpld3){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

       mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
   }(mpld3);
}else if(typeof define === "function" && define.amd){
   // require.js is available: use it to load d3/mpld3
   require.config({paths: {d3: "https://mpld3.github.io/js/d3.v3.min"}});
   require(["d3"], function(d3){
      window.d3 = d3;
      mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

         mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
      });
    });
}else{
    // require.js not available: dynamically load d3 & mpld3
    mpld3_load_lib("https://mpld3.github.io/js/d3.v3.min.js", function(){
         mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

                 mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
            })
         });
}
</script>
#+END_HTML

** Data and code
   :PROPERTIES:
   :ID:       17D73543-F528-459D-95EF-B3AB3C4EEDC7
   :END:
You can check out our preprint at https://github.com/KitchinHUB/kitchingroup-51.  We are going to adapt the code to make Figure 6a in the manuscript interactive. The code needed a somewhat surprising amount of adaptation. Apparently the ase database interface has changed a lot since we write that paper, so the code here looks a bit different than what we published. The biggest difference is due to name-mangling so each key that started with a number now starts with _, and and periods are replaced by _ also. The rest of the script is nearly unchanged. At the end is the very small bit of mpld3 code that generates the figure for html. We will add tooltips onto datapoints to indicate what the name associated with each data point is. Here is the code.

#+name: mpld3-figure
#+BEGIN_SRC python :results output :wrap HTML
import matplotlib.pyplot as plt
from ase.db import connect

# loads the ASE database and select certain keywords
db = connect('~/Desktop/cappa/kitchingroup-51/supporting-information/data.json')

keys = ['bcc', 'GS', '_54atom', 'ensam']

CLS, IMP, labels = [], [], []
for k in db.select(keys + ['_1cl']):
    name = k.keywords[-2]

    Cu0 = db.select('bcc,GS,_72atom,_0cl,_1_00Cu').next().energy
    Cu1 = db.select('bcc,GS,_72atom,_1cl,_1_00Cu').next().energy
    x0 = db.select(','.join(keys + [name, '_0cl'])).next().energy
    x1 = k.energy

    cls0 = x0 - Cu0
    cls1 = x1 - Cu1

    IMP.append(int(name[1]))
    CLS.append(cls1 - cls0)
    labels += ['{0} ({1}, {2})'.format(name, int(name[1]), cls1 - cls0)]

Cu0 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_0cl', '_1_00Cu'])).next().energy
Cu1 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_1cl', '_1_00Cu'])).next().energy

x0 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_0cl', '_1'])).next().energy
x1 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_1cl', '_1'])).next().energy

cls0 = x0 - Cu0
cls1 = x1 - Cu1

IMP.append(1)
CLS.append(cls1 - cls0)
labels += ['(1, {0})'.format(cls1 - cls0)]

Cu0 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_0cl', '_1_00Cu'])).next().energy
Cu1 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_1cl', '_1_00Cu'])).next().energy

x0 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_0cl', '_0'])).next().energy
x1 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_1cl', '_0'])).next().energy

cls0 = x0 - Cu0
cls1 = x1 - Cu1

IMP.append(0)
CLS.append(cls1 - cls0)
labels += ['(0, {0})'.format(cls1 - cls0)]

fig = plt.figure()

p = plt.scatter(IMP, CLS, c='g', marker='o', s=25)
ax1 = plt.gca()
ax1.set_ylim(-1.15, -0.6)
ax1.set_xlim(-0.1, 5.1)

ax1.set_xlabel('# Cu Nearest neighbors')
ax1.set_ylabel('Cu 2p(3/2) Core Level Shift (eV)')

ax1.set_title('Hover over a point to see the calculation name')

# Now the mpld3 stuff.
import mpld3
from mpld3 import plugins

tooltip = plugins.PointHTMLTooltip(p, labels, voffset=0, hoffset=10)
plugins.connect(fig, tooltip)

print mpld3.fig_to_html(fig)
#+END_SRC

I like this workflow pretty well. It
 seems less functional than plotly and Bokeh (e.g. it does not look like it you can export the data from the html here), but it is well integrated with Matplotlib, with my blogging style, and does not require a server, oran account. The code outputs html that is self-contained in the body of the html. The smooth integration with Matplotlib means I could have static images in org-mode, and dynamic images in HTML potentially. Overall, this is a nice tool for making interactive plots in blog posts.

** References
bibliography:~/Dropbox/bibliography/references.bib
* DONE Interactive plots in HTML with Plotly
  CLOSED: [2016-02-06 Sat 12:44]
  :PROPERTIES:
  :categories: python,plotting,interactive
  :date:     2016/02/06 12:44:53
  :updated:  2016/02/06 12:44:53
  :END:

Most of the plots in this blog are static. Today, I look at making them interactive. I will use https://plot.ly for this. I want to use some data from a paper we published on the relative stabilities of oxide polymorphs cite:mehta-2015-ident-poten. We will make an interactive figure showing the relative stabilities of the RuO_{2} polymorphs. When you hover on a point, it will show you which polymorph the point refers to. Let's see the figure first here. If you think its interesting read on to see how we made it!

#+RESULTS: ruo2-html
#+BEGIN_HTML
<iframe id="igraph" scrolling="no" style="border:none;"seamless="seamless" src="https://plot.ly/~jkitchin/4.embed" height="525" width="100%"></iframe>
#+END_HTML


We get our data source here: http://pubs.acs.org/doi/suppl/10.1021/am4059149/suppl_file/am4059149_si_001.pdf.

Now, we extract the data files:
#+BEGIN_SRC sh
pdftk ~/Desktop/am4059149_si_001.pdf  unpack_files
#+END_SRC

That extracts a json file called supporting-information.json. We use it as suggested in the SI pdf to plot the equations of state for RuO_{2} for several polymorphs.

#+name: ruo2-html
#+BEGIN_SRC python :results output html
# coding=utf-8

import plotly.plotly as py
import plotly.graph_objs as go
import plotly.tools as tls
import numpy as np

import json
import matplotlib.pyplot as plt
from ase.utils.eos import EquationOfState
with open('supporting-information.json', 'rb') as f:
    d = json.loads(f.read())

BO2 = 'RuO2'
xc = 'PBE'

layout = go.Layout(title='Energy vs. Volume for RuO<sub>2</sub> polymorphs',
                   xaxis=dict(title='Volume (Å<sup>3</sup>)'),
                   yaxis=dict(title='Energy (eV)'))

traces = []

for polymorph in ['rutile','anatase','brookite','columbite','pyrite','fluorite']:

    # number of atoms in the unit cell - used to normalize
    natoms= len(d[BO2][polymorph][xc]['EOS']['calculations']
		[0]['atoms']['symbols'])
    volumes = [entry['data']['volume']*3./natoms for entry in
	       d[BO2][polymorph][xc]['EOS']['calculations']]
    energies =  [entry['data']['total_energy']*3./natoms for entry in
		 d[BO2][polymorph][xc]['EOS']['calculations']]

    trace = go.Scatter(x=np.array(volumes),
                       y=np.array(energies),
                       mode='lines+markers',
                       name=polymorph,
                       text=polymorph)

    traces += [trace]

fig = go.Figure(data=traces, layout=layout)
plot_url = py.plot(fig, filename='ruo2-2')

print tls.get_embed(plot_url)
#+END_SRC




Pretty nice, now we should have an interactive plot in our browser with the data points labeled with tags, zooming, etc... That is nice for the blog. It isn't so nice for daily work, as there is no visual version of the plot in my org-file. Of course, I can visit the url to see the plot in my browser, it is just different from what I am used to. For everyone else, this is probably better. It looks like you can actually get the data from the web page, including some minimal analysis like regression, and save your view to an image! That could be pretty nice for some data sets.

** Using Plotly yourself

First, go to https://plot.ly and sign up for an account. You will want to register your API key like this, which will save it in a file for your convenience. Then you can do things like I did above too.

#+BEGIN_SRC python
import plotly.tools as tls
tls.set_credentials_file(username='jkitchin', api_key='xxxxxxx')
#+END_SRC

** References

bibliography:~/Dropbox/bibliography/references.bib
* DONE Modern use of helm - sortable candidates
  CLOSED: [2016-01-24 Sun 14:48]
  :PROPERTIES:
  :categories: emacs,helm
  :date:     2016/01/24 14:48:13
  :updated:  2016/01/24 14:48:13
  :END:
[[https://github.com/emacs-helm/helm][helm]] continues to be my goto completion engine. I was perusing the source for helm-top, and noticed some cool new features, like sorting the candidates in the completion buffer! I also noticed that helm sources are preferably created with some new factory functions (as opposed to the a-lists I used to use). Here I explore some of these and illustrate how to make a sortable helm source.

First, we need a function to give us some candidates we will select from. I will use a function that returns a list of cons cells from a variable containing some data where each element in the data is a plist containing a number and key. I list strings as the number and key  so we can see what sorting does later. The data is just a list of plists containing a "number" and a key that is a string. We will create a helm function with these as candidates, and an ability to sort them in ascending/descending order on either the number or key.

#+BEGIN_SRC emacs-lisp :results output
(setq h-data '((:num 1 :key "apple")
	       (:num 9 :key "berry")
	       (:num 2 :key "cactus")
	       (:num 5 :key "dog")
	       (:num 4 :key "frog")))

(defun h-candidates ()
  "Returns candidates for the helm source."
  (loop for cand in h-data
	collect (cons (format "%s %s"
			      (plist-get cand :num)
			      (plist-get cand :key))
		      cand)))

(print (h-candidates))
#+END_SRC

#+RESULTS:
:
: (("1 apple" :num 1 :key "apple") ("9 berry" :num 9 :key "berry") ("2 cactus" :num 2 :key "cactus") ("5 dog" :num 5 :key "dog") ("4 frog" :num 4 :key "frog"))


Now, provide sorting, we need to create a candidate transformer function. This function will take the current candidates and source, and return a new list of candidates, possibly sorted. We use a variable to store how to sort the candidates. We also need a way to trigger the sorting. We will bind M-<down> to a function that will set the sort function, and refresh helm. Here is a keymap definition we will use later.

#+BEGIN_SRC emacs-lisp
(defvar h-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map helm-map)
    (define-key map (kbd "M-<down>")   'h-sort)
    map)
  "keymap for a helm source.")
#+END_SRC

#+RESULTS:
: h-map

Now, we define the sort variable, a function that sets the variable, refreshes the candidates, and finally resets the sort variable. A key point here is the sort functions must take two arguments, which will be two candidates, and each candidate is of the form (string . data). We want to sort on one of the elements in the data plists for this example.
#+BEGIN_SRC emacs-lisp
(defvar h-sort-fn nil)

(defun h-sort ()
  (interactive)
  (let ((action (read-char "#decreasing (d) | #increasing (i) | a-z (a) | z-a (z: ")))
    (cond
     ((eq action ?d)
      (setq h-sort-fn (lambda (c1 c2) (> (plist-get (cdr c1) :num) (plist-get (cdr c2) :num)))))
     ((eq action ?i)
      (setq h-sort-fn (lambda (c1 c2) (< (plist-get (cdr c1) :num) (plist-get (cdr c2) :num)))))
     ((eq action ?a)
      (setq h-sort-fn (lambda (c1 c2) (string< (plist-get (cdr c1) :key) (plist-get (cdr c2) :key)))))
     ((eq action ?z)
      (setq h-sort-fn (lambda (c1 c2) (string> (plist-get (cdr c1) :key) (plist-get (cdr c2) :key)))))
     (t (setq h-sort-fn nil)))
     (helm-refresh)
     (setq h-sort-fn nil)))
#+END_SRC

#+RESULTS:
: h-sort

Next, we define a candidate transformer. This function takes the list of candidates and the source. Here, if we have defined a sort function, we use it to sort the candidates, and if not, return the candidates. A subtle point here is the use of -sort from dash.el, which does not modify the original list at all. The build in function sort does modify the candidate list somehow, and it does not work the way you want it to here. This function gets run as the helm pattern changes.

#+BEGIN_SRC emacs-lisp
(defun h-candidate-transformer (candidates source)
  (if h-sort-fn
    (progn (message "Sorting with %s" h-sort-fn)
    (-sort h-sort-fn candidates))
  candidates))
#+END_SRC

#+RESULTS:
: h-candidate-transformer

Now, just for fun, we show that dynamically defined actions are possible. Here, we generate an action list that is different for even and odd numbers. These actions are pretty trivial, but give you an idea of what might be possible; custom, context specific actions.

#+BEGIN_SRC emacs-lisp
;; Make dynamic actions based on the candidate selected
(defun h-action-transformer (actions candidate)
  "Candidate is the result selected."
  (if (evenp (plist-get candidate :num))
      '(("Even" . identity))
    '(("Odd" . identity))))
#+END_SRC

#+RESULTS:
: h-action-transformer

Finally, we are ready to create a helm source. We use the new factory function for creating the source with our keymap, candidates and transformer functions.
#+BEGIN_SRC emacs-lisp
(setq h-source
      (helm-build-sync-source "number-selector"
	:keymap h-map
        :candidates #'h-candidates
        :filtered-candidate-transformer #'h-candidate-transformer
	:action-transformer #'h-action-transformer))
#+END_SRC

#+RESULTS:

Now, you can run the helm source like this.
#+BEGIN_SRC emacs-lisp
(helm :sources 'h-source)
#+END_SRC

#+RESULTS:

You can sort the numbers in descending order by typing M-<down> and pressing d. To get ascending order, press i instead. To sort on the keys, type a sort from a to z, and press z to sort on z to a. If you press tab on a selection, you will see that the actions you get depend on whether the selection is an even or odd number! So, you can get some context specific actions depending on your selection. Pretty awesome.
* DONE Colored text in org-mode with export to HTML
  CLOSED: [2016-01-16 Sat 19:35]
  :PROPERTIES:
  :ID:       E6655A7C-A4C4-4048-893B-49AF0320276B
  :categories: orgmode,emacs
  :date:     2016/01/16 19:34:57
  :updated:  2016/01/18 12:36:08
  :END:

Just for fun, I want to put colored text in org-mode using links. This is a simple hack that uses the description in an org-mode link as the text to color, and the path in link to specify the color. I use an overlay to do this because I could not figure out how to change the face foreground color. We provide a simple export to HTML. LaTeX is also doable, but a trickier export as you need to define the colors in the LaTeX header also.

Here is the code to make the color link, and put overlays on them with font-lock.

#+BEGIN_SRC emacs-lisp :results silent
(require 'ov)

(org-add-link-type
 "color"
 (lambda (path)
   "No follow action.")
 (lambda (color description backend)
   (cond
    ((eq backend 'html)
     (let ((rgb (assoc color color-name-rgb-alist))
	   r g b)
       (if rgb
	   (progn
	     (setq r (* 255 (/ (nth 1 rgb) 65535.0))
		   g (* 255 (/ (nth 2 rgb) 65535.0))
		   b (* 255 (/ (nth 3 rgb) 65535.0)))
	     (format "<span style=\"color: rgb(%s,%s,%s)\">%s</span>"
		     (truncate r) (truncate g) (truncate b)
		     (or description color)))
	 (format "No Color RGB for %s" color)))))))

(defun next-color-link (limit)
  (when (re-search-forward
	 "color:[a-zA-Z]\\{2,\\}" limit t)
    (forward-char -2)
    (let* ((next-link (org-element-context))
	   color beg end post-blanks)
      (if next-link
	  (progn
	    (setq color (org-element-property :path next-link)
		  beg (org-element-property :begin next-link)
		  end (org-element-property :end next-link)
		  post-blanks (org-element-property :post-blank next-link))
	    (set-match-data
	     (list beg
		   (- end post-blanks)))
	    (ov-clear beg end 'color)
	    (ov beg
		(- end post-blanks)
	     'color t
	     'face
	     `((:foreground ,color)))
	    (goto-char end))
	(goto-char limit)
	nil))))

(font-lock-add-keywords
    nil
    '((next-color-link (0  'org-link t)))
    t)
#+END_SRC

I do not love the use of overlays on this, but it is the only way I could figure out how to do this without creating a face for every single color. Setting the foreground color property on the links did not work.

Now, we use a loop to generate a lot of colored links to check it out. It basically works. I see some overlays pop up in folded headlines sometimes, but I don't mind that too much. Emacs slows down when the screen is full of these links, but it seems fine under normal numbers of links. Since colors are likely to only be for accent, I do not think performance will be a problem. This might be a nice way to add accents to draw attention to some text in org-mode. If you like this, you might can get the code here: https://github.com/jkitchin/jmax/blob/master/org-colored-text.el

Here is what the text looks like in my buffer.

[[./colored-text.png]]


#+BEGIN_SRC emacs-lisp :results output raw
(loop for color in color-name-rgb-alist
      do
      (princ (format "[[color:%s][Text colored in %s]]\n" (car color) (car color))))
#+END_SRC

#+RESULTS:
[[color:snow][Text colored in snow]]
[[color:ghostwhite][Text colored in ghostwhite]]
[[color:whitesmoke][Text colored in whitesmoke]]
[[color:gainsboro][Text colored in gainsboro]]
[[color:floralwhite][Text colored in floralwhite]]
[[color:oldlace][Text colored in oldlace]]
[[color:linen][Text colored in linen]]
[[color:antiquewhite][Text colored in antiquewhite]]
[[color:papayawhip][Text colored in papayawhip]]
[[color:blanchedalmond][Text colored in blanchedalmond]]
[[color:bisque][Text colored in bisque]]
[[color:peachpuff][Text colored in peachpuff]]
[[color:navajowhite][Text colored in navajowhite]]
[[color:moccasin][Text colored in moccasin]]
[[color:cornsilk][Text colored in cornsilk]]
[[color:ivory][Text colored in ivory]]
[[color:lemonchiffon][Text colored in lemonchiffon]]
[[color:seashell][Text colored in seashell]]
[[color:honeydew][Text colored in honeydew]]
[[color:mintcream][Text colored in mintcream]]
[[color:azure][Text colored in azure]]
[[color:aliceblue][Text colored in aliceblue]]
[[color:lavender][Text colored in lavender]]
[[color:lavenderblush][Text colored in lavenderblush]]
[[color:mistyrose][Text colored in mistyrose]]
[[color:white][Text colored in white]]
[[color:black][Text colored in black]]
[[color:darkslategray][Text colored in darkslategray]]
[[color:darkslategrey][Text colored in darkslategrey]]
[[color:dimgray][Text colored in dimgray]]
[[color:dimgrey][Text colored in dimgrey]]
[[color:slategray][Text colored in slategray]]
[[color:slategrey][Text colored in slategrey]]
[[color:lightslategray][Text colored in lightslategray]]
[[color:lightslategrey][Text colored in lightslategrey]]
[[color:gray][Text colored in gray]]
[[color:grey][Text colored in grey]]
[[color:lightgrey][Text colored in lightgrey]]
[[color:lightgray][Text colored in lightgray]]
[[color:midnightblue][Text colored in midnightblue]]
[[color:navy][Text colored in navy]]
[[color:navyblue][Text colored in navyblue]]
[[color:cornflowerblue][Text colored in cornflowerblue]]
[[color:darkslateblue][Text colored in darkslateblue]]
[[color:slateblue][Text colored in slateblue]]
[[color:mediumslateblue][Text colored in mediumslateblue]]
[[color:lightslateblue][Text colored in lightslateblue]]
[[color:mediumblue][Text colored in mediumblue]]
[[color:royalblue][Text colored in royalblue]]
[[color:blue][Text colored in blue]]
[[color:dodgerblue][Text colored in dodgerblue]]
[[color:deepskyblue][Text colored in deepskyblue]]
[[color:skyblue][Text colored in skyblue]]
[[color:lightskyblue][Text colored in lightskyblue]]
[[color:steelblue][Text colored in steelblue]]
[[color:lightsteelblue][Text colored in lightsteelblue]]
[[color:lightblue][Text colored in lightblue]]
[[color:powderblue][Text colored in powderblue]]
[[color:paleturquoise][Text colored in paleturquoise]]
[[color:darkturquoise][Text colored in darkturquoise]]
[[color:mediumturquoise][Text colored in mediumturquoise]]
[[color:turquoise][Text colored in turquoise]]
[[color:cyan][Text colored in cyan]]
[[color:lightcyan][Text colored in lightcyan]]
[[color:cadetblue][Text colored in cadetblue]]
[[color:mediumaquamarine][Text colored in mediumaquamarine]]
[[color:aquamarine][Text colored in aquamarine]]
[[color:darkgreen][Text colored in darkgreen]]
[[color:darkolivegreen][Text colored in darkolivegreen]]
[[color:darkseagreen][Text colored in darkseagreen]]
[[color:seagreen][Text colored in seagreen]]
[[color:mediumseagreen][Text colored in mediumseagreen]]
[[color:lightseagreen][Text colored in lightseagreen]]
[[color:palegreen][Text colored in palegreen]]
[[color:springgreen][Text colored in springgreen]]
[[color:lawngreen][Text colored in lawngreen]]
[[color:green][Text colored in green]]
[[color:chartreuse][Text colored in chartreuse]]
[[color:mediumspringgreen][Text colored in mediumspringgreen]]
[[color:greenyellow][Text colored in greenyellow]]
[[color:limegreen][Text colored in limegreen]]
[[color:yellowgreen][Text colored in yellowgreen]]
[[color:forestgreen][Text colored in forestgreen]]
[[color:olivedrab][Text colored in olivedrab]]
[[color:darkkhaki][Text colored in darkkhaki]]
[[color:khaki][Text colored in khaki]]
[[color:palegoldenrod][Text colored in palegoldenrod]]
[[color:lightgoldenrodyellow][Text colored in lightgoldenrodyellow]]
[[color:lightyellow][Text colored in lightyellow]]
[[color:yellow][Text colored in yellow]]
[[color:gold][Text colored in gold]]
[[color:lightgoldenrod][Text colored in lightgoldenrod]]
[[color:goldenrod][Text colored in goldenrod]]
[[color:darkgoldenrod][Text colored in darkgoldenrod]]
[[color:rosybrown][Text colored in rosybrown]]
[[color:indianred][Text colored in indianred]]
[[color:saddlebrown][Text colored in saddlebrown]]
[[color:sienna][Text colored in sienna]]
[[color:peru][Text colored in peru]]
[[color:burlywood][Text colored in burlywood]]
[[color:beige][Text colored in beige]]
[[color:wheat][Text colored in wheat]]
[[color:sandybrown][Text colored in sandybrown]]
[[color:tan][Text colored in tan]]
[[color:chocolate][Text colored in chocolate]]
[[color:firebrick][Text colored in firebrick]]
[[color:brown][Text colored in brown]]
[[color:darksalmon][Text colored in darksalmon]]
[[color:salmon][Text colored in salmon]]
[[color:lightsalmon][Text colored in lightsalmon]]
[[color:orange][Text colored in orange]]
[[color:darkorange][Text colored in darkorange]]
[[color:coral][Text colored in coral]]
[[color:lightcoral][Text colored in lightcoral]]
[[color:tomato][Text colored in tomato]]
[[color:orangered][Text colored in orangered]]
[[color:red][Text colored in red]]
[[color:hotpink][Text colored in hotpink]]
[[color:deeppink][Text colored in deeppink]]
[[color:pink][Text colored in pink]]
[[color:lightpink][Text colored in lightpink]]
[[color:palevioletred][Text colored in palevioletred]]
[[color:maroon][Text colored in maroon]]
[[color:mediumvioletred][Text colored in mediumvioletred]]
[[color:violetred][Text colored in violetred]]
[[color:magenta][Text colored in magenta]]
[[color:violet][Text colored in violet]]
[[color:plum][Text colored in plum]]
[[color:orchid][Text colored in orchid]]
[[color:mediumorchid][Text colored in mediumorchid]]
[[color:darkorchid][Text colored in darkorchid]]
[[color:darkviolet][Text colored in darkviolet]]
[[color:blueviolet][Text colored in blueviolet]]
[[color:purple][Text colored in purple]]
[[color:mediumpurple][Text colored in mediumpurple]]
[[color:thistle][Text colored in thistle]]
[[color:snow1][Text colored in snow1]]
[[color:snow2][Text colored in snow2]]
[[color:snow3][Text colored in snow3]]
[[color:snow4][Text colored in snow4]]
[[color:seashell1][Text colored in seashell1]]
[[color:seashell2][Text colored in seashell2]]
[[color:seashell3][Text colored in seashell3]]
[[color:seashell4][Text colored in seashell4]]
[[color:antiquewhite1][Text colored in antiquewhite1]]
[[color:antiquewhite2][Text colored in antiquewhite2]]
[[color:antiquewhite3][Text colored in antiquewhite3]]
[[color:antiquewhite4][Text colored in antiquewhite4]]
[[color:bisque1][Text colored in bisque1]]
[[color:bisque2][Text colored in bisque2]]
[[color:bisque3][Text colored in bisque3]]
[[color:bisque4][Text colored in bisque4]]
[[color:peachpuff1][Text colored in peachpuff1]]
[[color:peachpuff2][Text colored in peachpuff2]]
[[color:peachpuff3][Text colored in peachpuff3]]
[[color:peachpuff4][Text colored in peachpuff4]]
[[color:navajowhite1][Text colored in navajowhite1]]
[[color:navajowhite2][Text colored in navajowhite2]]
[[color:navajowhite3][Text colored in navajowhite3]]
[[color:navajowhite4][Text colored in navajowhite4]]
[[color:lemonchiffon1][Text colored in lemonchiffon1]]
[[color:lemonchiffon2][Text colored in lemonchiffon2]]
[[color:lemonchiffon3][Text colored in lemonchiffon3]]
[[color:lemonchiffon4][Text colored in lemonchiffon4]]
[[color:cornsilk1][Text colored in cornsilk1]]
[[color:cornsilk2][Text colored in cornsilk2]]
[[color:cornsilk3][Text colored in cornsilk3]]
[[color:cornsilk4][Text colored in cornsilk4]]
[[color:ivory1][Text colored in ivory1]]
[[color:ivory2][Text colored in ivory2]]
[[color:ivory3][Text colored in ivory3]]
[[color:ivory4][Text colored in ivory4]]
[[color:honeydew1][Text colored in honeydew1]]
[[color:honeydew2][Text colored in honeydew2]]
[[color:honeydew3][Text colored in honeydew3]]
[[color:honeydew4][Text colored in honeydew4]]
[[color:lavenderblush1][Text colored in lavenderblush1]]
[[color:lavenderblush2][Text colored in lavenderblush2]]
[[color:lavenderblush3][Text colored in lavenderblush3]]
[[color:lavenderblush4][Text colored in lavenderblush4]]
[[color:mistyrose1][Text colored in mistyrose1]]
[[color:mistyrose2][Text colored in mistyrose2]]
[[color:mistyrose3][Text colored in mistyrose3]]
[[color:mistyrose4][Text colored in mistyrose4]]
[[color:azure1][Text colored in azure1]]
[[color:azure2][Text colored in azure2]]
[[color:azure3][Text colored in azure3]]
[[color:azure4][Text colored in azure4]]
[[color:slateblue1][Text colored in slateblue1]]
[[color:slateblue2][Text colored in slateblue2]]
[[color:slateblue3][Text colored in slateblue3]]
[[color:slateblue4][Text colored in slateblue4]]
[[color:royalblue1][Text colored in royalblue1]]
[[color:royalblue2][Text colored in royalblue2]]
[[color:royalblue3][Text colored in royalblue3]]
[[color:royalblue4][Text colored in royalblue4]]
[[color:blue1][Text colored in blue1]]
[[color:blue2][Text colored in blue2]]
[[color:blue3][Text colored in blue3]]
[[color:blue4][Text colored in blue4]]
[[color:dodgerblue1][Text colored in dodgerblue1]]
[[color:dodgerblue2][Text colored in dodgerblue2]]
[[color:dodgerblue3][Text colored in dodgerblue3]]
[[color:dodgerblue4][Text colored in dodgerblue4]]
[[color:steelblue1][Text colored in steelblue1]]
[[color:steelblue2][Text colored in steelblue2]]
[[color:steelblue3][Text colored in steelblue3]]
[[color:steelblue4][Text colored in steelblue4]]
[[color:deepskyblue1][Text colored in deepskyblue1]]
[[color:deepskyblue2][Text colored in deepskyblue2]]
[[color:deepskyblue3][Text colored in deepskyblue3]]
[[color:deepskyblue4][Text colored in deepskyblue4]]
[[color:skyblue1][Text colored in skyblue1]]
[[color:skyblue2][Text colored in skyblue2]]
[[color:skyblue3][Text colored in skyblue3]]
[[color:skyblue4][Text colored in skyblue4]]
[[color:lightskyblue1][Text colored in lightskyblue1]]
[[color:lightskyblue2][Text colored in lightskyblue2]]
[[color:lightskyblue3][Text colored in lightskyblue3]]
[[color:lightskyblue4][Text colored in lightskyblue4]]
[[color:slategray1][Text colored in slategray1]]
[[color:slategray2][Text colored in slategray2]]
[[color:slategray3][Text colored in slategray3]]
[[color:slategray4][Text colored in slategray4]]
[[color:lightsteelblue1][Text colored in lightsteelblue1]]
[[color:lightsteelblue2][Text colored in lightsteelblue2]]
[[color:lightsteelblue3][Text colored in lightsteelblue3]]
[[color:lightsteelblue4][Text colored in lightsteelblue4]]
[[color:lightblue1][Text colored in lightblue1]]
[[color:lightblue2][Text colored in lightblue2]]
[[color:lightblue3][Text colored in lightblue3]]
[[color:lightblue4][Text colored in lightblue4]]
[[color:lightcyan1][Text colored in lightcyan1]]
[[color:lightcyan2][Text colored in lightcyan2]]
[[color:lightcyan3][Text colored in lightcyan3]]
[[color:lightcyan4][Text colored in lightcyan4]]
[[color:paleturquoise1][Text colored in paleturquoise1]]
[[color:paleturquoise2][Text colored in paleturquoise2]]
[[color:paleturquoise3][Text colored in paleturquoise3]]
[[color:paleturquoise4][Text colored in paleturquoise4]]
[[color:cadetblue1][Text colored in cadetblue1]]
[[color:cadetblue2][Text colored in cadetblue2]]
[[color:cadetblue3][Text colored in cadetblue3]]
[[color:cadetblue4][Text colored in cadetblue4]]
[[color:turquoise1][Text colored in turquoise1]]
[[color:turquoise2][Text colored in turquoise2]]
[[color:turquoise3][Text colored in turquoise3]]
[[color:turquoise4][Text colored in turquoise4]]
[[color:cyan1][Text colored in cyan1]]
[[color:cyan2][Text colored in cyan2]]
[[color:cyan3][Text colored in cyan3]]
[[color:cyan4][Text colored in cyan4]]
[[color:darkslategray1][Text colored in darkslategray1]]
[[color:darkslategray2][Text colored in darkslategray2]]
[[color:darkslategray3][Text colored in darkslategray3]]
[[color:darkslategray4][Text colored in darkslategray4]]
[[color:aquamarine1][Text colored in aquamarine1]]
[[color:aquamarine2][Text colored in aquamarine2]]
[[color:aquamarine3][Text colored in aquamarine3]]
[[color:aquamarine4][Text colored in aquamarine4]]
[[color:darkseagreen1][Text colored in darkseagreen1]]
[[color:darkseagreen2][Text colored in darkseagreen2]]
[[color:darkseagreen3][Text colored in darkseagreen3]]
[[color:darkseagreen4][Text colored in darkseagreen4]]
[[color:seagreen1][Text colored in seagreen1]]
[[color:seagreen2][Text colored in seagreen2]]
[[color:seagreen3][Text colored in seagreen3]]
[[color:seagreen4][Text colored in seagreen4]]
[[color:palegreen1][Text colored in palegreen1]]
[[color:palegreen2][Text colored in palegreen2]]
[[color:palegreen3][Text colored in palegreen3]]
[[color:palegreen4][Text colored in palegreen4]]
[[color:springgreen1][Text colored in springgreen1]]
[[color:springgreen2][Text colored in springgreen2]]
[[color:springgreen3][Text colored in springgreen3]]
[[color:springgreen4][Text colored in springgreen4]]
[[color:green1][Text colored in green1]]
[[color:green2][Text colored in green2]]
[[color:green3][Text colored in green3]]
[[color:green4][Text colored in green4]]
[[color:chartreuse1][Text colored in chartreuse1]]
[[color:chartreuse2][Text colored in chartreuse2]]
[[color:chartreuse3][Text colored in chartreuse3]]
[[color:chartreuse4][Text colored in chartreuse4]]
[[color:olivedrab1][Text colored in olivedrab1]]
[[color:olivedrab2][Text colored in olivedrab2]]
[[color:olivedrab3][Text colored in olivedrab3]]
[[color:olivedrab4][Text colored in olivedrab4]]
[[color:darkolivegreen1][Text colored in darkolivegreen1]]
[[color:darkolivegreen2][Text colored in darkolivegreen2]]
[[color:darkolivegreen3][Text colored in darkolivegreen3]]
[[color:darkolivegreen4][Text colored in darkolivegreen4]]
[[color:khaki1][Text colored in khaki1]]
[[color:khaki2][Text colored in khaki2]]
[[color:khaki3][Text colored in khaki3]]
[[color:khaki4][Text colored in khaki4]]
[[color:lightgoldenrod1][Text colored in lightgoldenrod1]]
[[color:lightgoldenrod2][Text colored in lightgoldenrod2]]
[[color:lightgoldenrod3][Text colored in lightgoldenrod3]]
[[color:lightgoldenrod4][Text colored in lightgoldenrod4]]
[[color:lightyellow1][Text colored in lightyellow1]]
[[color:lightyellow2][Text colored in lightyellow2]]
[[color:lightyellow3][Text colored in lightyellow3]]
[[color:lightyellow4][Text colored in lightyellow4]]
[[color:yellow1][Text colored in yellow1]]
[[color:yellow2][Text colored in yellow2]]
[[color:yellow3][Text colored in yellow3]]
[[color:yellow4][Text colored in yellow4]]
[[color:gold1][Text colored in gold1]]
[[color:gold2][Text colored in gold2]]
[[color:gold3][Text colored in gold3]]
[[color:gold4][Text colored in gold4]]
[[color:goldenrod1][Text colored in goldenrod1]]
[[color:goldenrod2][Text colored in goldenrod2]]
[[color:goldenrod3][Text colored in goldenrod3]]
[[color:goldenrod4][Text colored in goldenrod4]]
[[color:darkgoldenrod1][Text colored in darkgoldenrod1]]
[[color:darkgoldenrod2][Text colored in darkgoldenrod2]]
[[color:darkgoldenrod3][Text colored in darkgoldenrod3]]
[[color:darkgoldenrod4][Text colored in darkgoldenrod4]]
[[color:rosybrown1][Text colored in rosybrown1]]
[[color:rosybrown2][Text colored in rosybrown2]]
[[color:rosybrown3][Text colored in rosybrown3]]
[[color:rosybrown4][Text colored in rosybrown4]]
[[color:indianred1][Text colored in indianred1]]
[[color:indianred2][Text colored in indianred2]]
[[color:indianred3][Text colored in indianred3]]
[[color:indianred4][Text colored in indianred4]]
[[color:sienna1][Text colored in sienna1]]
[[color:sienna2][Text colored in sienna2]]
[[color:sienna3][Text colored in sienna3]]
[[color:sienna4][Text colored in sienna4]]
[[color:burlywood1][Text colored in burlywood1]]
[[color:burlywood2][Text colored in burlywood2]]
[[color:burlywood3][Text colored in burlywood3]]
[[color:burlywood4][Text colored in burlywood4]]
[[color:wheat1][Text colored in wheat1]]
[[color:wheat2][Text colored in wheat2]]
[[color:wheat3][Text colored in wheat3]]
[[color:wheat4][Text colored in wheat4]]
[[color:tan1][Text colored in tan1]]
[[color:tan2][Text colored in tan2]]
[[color:tan3][Text colored in tan3]]
[[color:tan4][Text colored in tan4]]
[[color:chocolate1][Text colored in chocolate1]]
[[color:chocolate2][Text colored in chocolate2]]
[[color:chocolate3][Text colored in chocolate3]]
[[color:chocolate4][Text colored in chocolate4]]
[[color:firebrick1][Text colored in firebrick1]]
[[color:firebrick2][Text colored in firebrick2]]
[[color:firebrick3][Text colored in firebrick3]]
[[color:firebrick4][Text colored in firebrick4]]
[[color:brown1][Text colored in brown1]]
[[color:brown2][Text colored in brown2]]
[[color:brown3][Text colored in brown3]]
[[color:brown4][Text colored in brown4]]
[[color:salmon1][Text colored in salmon1]]
[[color:salmon2][Text colored in salmon2]]
[[color:salmon3][Text colored in salmon3]]
[[color:salmon4][Text colored in salmon4]]
[[color:lightsalmon1][Text colored in lightsalmon1]]
[[color:lightsalmon2][Text colored in lightsalmon2]]
[[color:lightsalmon3][Text colored in lightsalmon3]]
[[color:lightsalmon4][Text colored in lightsalmon4]]
[[color:orange1][Text colored in orange1]]
[[color:orange2][Text colored in orange2]]
[[color:orange3][Text colored in orange3]]
[[color:orange4][Text colored in orange4]]
[[color:darkorange1][Text colored in darkorange1]]
[[color:darkorange2][Text colored in darkorange2]]
[[color:darkorange3][Text colored in darkorange3]]
[[color:darkorange4][Text colored in darkorange4]]
[[color:coral1][Text colored in coral1]]
[[color:coral2][Text colored in coral2]]
[[color:coral3][Text colored in coral3]]
[[color:coral4][Text colored in coral4]]
[[color:tomato1][Text colored in tomato1]]
[[color:tomato2][Text colored in tomato2]]
[[color:tomato3][Text colored in tomato3]]
[[color:tomato4][Text colored in tomato4]]
[[color:orangered1][Text colored in orangered1]]
[[color:orangered2][Text colored in orangered2]]
[[color:orangered3][Text colored in orangered3]]
[[color:orangered4][Text colored in orangered4]]
[[color:red1][Text colored in red1]]
[[color:red2][Text colored in red2]]
[[color:red3][Text colored in red3]]
[[color:red4][Text colored in red4]]
[[color:deeppink1][Text colored in deeppink1]]
[[color:deeppink2][Text colored in deeppink2]]
[[color:deeppink3][Text colored in deeppink3]]
[[color:deeppink4][Text colored in deeppink4]]
[[color:hotpink1][Text colored in hotpink1]]
[[color:hotpink2][Text colored in hotpink2]]
[[color:hotpink3][Text colored in hotpink3]]
[[color:hotpink4][Text colored in hotpink4]]
[[color:pink1][Text colored in pink1]]
[[color:pink2][Text colored in pink2]]
[[color:pink3][Text colored in pink3]]
[[color:pink4][Text colored in pink4]]
[[color:lightpink1][Text colored in lightpink1]]
[[color:lightpink2][Text colored in lightpink2]]
[[color:lightpink3][Text colored in lightpink3]]
[[color:lightpink4][Text colored in lightpink4]]
[[color:palevioletred1][Text colored in palevioletred1]]
[[color:palevioletred2][Text colored in palevioletred2]]
[[color:palevioletred3][Text colored in palevioletred3]]
[[color:palevioletred4][Text colored in palevioletred4]]
[[color:maroon1][Text colored in maroon1]]
[[color:maroon2][Text colored in maroon2]]
[[color:maroon3][Text colored in maroon3]]
[[color:maroon4][Text colored in maroon4]]
[[color:violetred1][Text colored in violetred1]]
[[color:violetred2][Text colored in violetred2]]
[[color:violetred3][Text colored in violetred3]]
[[color:violetred4][Text colored in violetred4]]
[[color:magenta1][Text colored in magenta1]]
[[color:magenta2][Text colored in magenta2]]
[[color:magenta3][Text colored in magenta3]]
[[color:magenta4][Text colored in magenta4]]
[[color:orchid1][Text colored in orchid1]]
[[color:orchid2][Text colored in orchid2]]
[[color:orchid3][Text colored in orchid3]]
[[color:orchid4][Text colored in orchid4]]
[[color:plum1][Text colored in plum1]]
[[color:plum2][Text colored in plum2]]
[[color:plum3][Text colored in plum3]]
[[color:plum4][Text colored in plum4]]
[[color:mediumorchid1][Text colored in mediumorchid1]]
[[color:mediumorchid2][Text colored in mediumorchid2]]
[[color:mediumorchid3][Text colored in mediumorchid3]]
[[color:mediumorchid4][Text colored in mediumorchid4]]
[[color:darkorchid1][Text colored in darkorchid1]]
[[color:darkorchid2][Text colored in darkorchid2]]
[[color:darkorchid3][Text colored in darkorchid3]]
[[color:darkorchid4][Text colored in darkorchid4]]
[[color:purple1][Text colored in purple1]]
[[color:purple2][Text colored in purple2]]
[[color:purple3][Text colored in purple3]]
[[color:purple4][Text colored in purple4]]
[[color:mediumpurple1][Text colored in mediumpurple1]]
[[color:mediumpurple2][Text colored in mediumpurple2]]
[[color:mediumpurple3][Text colored in mediumpurple3]]
[[color:mediumpurple4][Text colored in mediumpurple4]]
[[color:thistle1][Text colored in thistle1]]
[[color:thistle2][Text colored in thistle2]]
[[color:thistle3][Text colored in thistle3]]
[[color:thistle4][Text colored in thistle4]]
[[color:gray0][Text colored in gray0]]
[[color:grey0][Text colored in grey0]]
[[color:gray1][Text colored in gray1]]
[[color:grey1][Text colored in grey1]]
[[color:gray2][Text colored in gray2]]
[[color:grey2][Text colored in grey2]]
[[color:gray3][Text colored in gray3]]
[[color:grey3][Text colored in grey3]]
[[color:gray4][Text colored in gray4]]
[[color:grey4][Text colored in grey4]]
[[color:gray5][Text colored in gray5]]
[[color:grey5][Text colored in grey5]]
[[color:gray6][Text colored in gray6]]
[[color:grey6][Text colored in grey6]]
[[color:gray7][Text colored in gray7]]
[[color:grey7][Text colored in grey7]]
[[color:gray8][Text colored in gray8]]
[[color:grey8][Text colored in grey8]]
[[color:gray9][Text colored in gray9]]
[[color:grey9][Text colored in grey9]]
[[color:gray10][Text colored in gray10]]
[[color:grey10][Text colored in grey10]]
[[color:gray11][Text colored in gray11]]
[[color:grey11][Text colored in grey11]]
[[color:gray12][Text colored in gray12]]
[[color:grey12][Text colored in grey12]]
[[color:gray13][Text colored in gray13]]
[[color:grey13][Text colored in grey13]]
[[color:gray14][Text colored in gray14]]
[[color:grey14][Text colored in grey14]]
[[color:gray15][Text colored in gray15]]
[[color:grey15][Text colored in grey15]]
[[color:gray16][Text colored in gray16]]
[[color:grey16][Text colored in grey16]]
[[color:gray17][Text colored in gray17]]
[[color:grey17][Text colored in grey17]]
[[color:gray18][Text colored in gray18]]
[[color:grey18][Text colored in grey18]]
[[color:gray19][Text colored in gray19]]
[[color:grey19][Text colored in grey19]]
[[color:gray20][Text colored in gray20]]
[[color:grey20][Text colored in grey20]]
[[color:gray21][Text colored in gray21]]
[[color:grey21][Text colored in grey21]]
[[color:gray22][Text colored in gray22]]
[[color:grey22][Text colored in grey22]]
[[color:gray23][Text colored in gray23]]
[[color:grey23][Text colored in grey23]]
[[color:gray24][Text colored in gray24]]
[[color:grey24][Text colored in grey24]]
[[color:gray25][Text colored in gray25]]
[[color:grey25][Text colored in grey25]]
[[color:gray26][Text colored in gray26]]
[[color:grey26][Text colored in grey26]]
[[color:gray27][Text colored in gray27]]
[[color:grey27][Text colored in grey27]]
[[color:gray28][Text colored in gray28]]
[[color:grey28][Text colored in grey28]]
[[color:gray29][Text colored in gray29]]
[[color:grey29][Text colored in grey29]]
[[color:gray30][Text colored in gray30]]
[[color:grey30][Text colored in grey30]]
[[color:gray31][Text colored in gray31]]
[[color:grey31][Text colored in grey31]]
[[color:gray32][Text colored in gray32]]
[[color:grey32][Text colored in grey32]]
[[color:gray33][Text colored in gray33]]
[[color:grey33][Text colored in grey33]]
[[color:gray34][Text colored in gray34]]
[[color:grey34][Text colored in grey34]]
[[color:gray35][Text colored in gray35]]
[[color:grey35][Text colored in grey35]]
[[color:gray36][Text colored in gray36]]
[[color:grey36][Text colored in grey36]]
[[color:gray37][Text colored in gray37]]
[[color:grey37][Text colored in grey37]]
[[color:gray38][Text colored in gray38]]
[[color:grey38][Text colored in grey38]]
[[color:gray39][Text colored in gray39]]
[[color:grey39][Text colored in grey39]]
[[color:gray40][Text colored in gray40]]
[[color:grey40][Text colored in grey40]]
[[color:gray41][Text colored in gray41]]
[[color:grey41][Text colored in grey41]]
[[color:gray42][Text colored in gray42]]
[[color:grey42][Text colored in grey42]]
[[color:gray43][Text colored in gray43]]
[[color:grey43][Text colored in grey43]]
[[color:gray44][Text colored in gray44]]
[[color:grey44][Text colored in grey44]]
[[color:gray45][Text colored in gray45]]
[[color:grey45][Text colored in grey45]]
[[color:gray46][Text colored in gray46]]
[[color:grey46][Text colored in grey46]]
[[color:gray47][Text colored in gray47]]
[[color:grey47][Text colored in grey47]]
[[color:gray48][Text colored in gray48]]
[[color:grey48][Text colored in grey48]]
[[color:gray49][Text colored in gray49]]
[[color:grey49][Text colored in grey49]]
[[color:gray50][Text colored in gray50]]
[[color:grey50][Text colored in grey50]]
[[color:gray51][Text colored in gray51]]
[[color:grey51][Text colored in grey51]]
[[color:gray52][Text colored in gray52]]
[[color:grey52][Text colored in grey52]]
[[color:gray53][Text colored in gray53]]
[[color:grey53][Text colored in grey53]]
[[color:gray54][Text colored in gray54]]
[[color:grey54][Text colored in grey54]]
[[color:gray55][Text colored in gray55]]
[[color:grey55][Text colored in grey55]]
[[color:gray56][Text colored in gray56]]
[[color:grey56][Text colored in grey56]]
[[color:gray57][Text colored in gray57]]
[[color:grey57][Text colored in grey57]]
[[color:gray58][Text colored in gray58]]
[[color:grey58][Text colored in grey58]]
[[color:gray59][Text colored in gray59]]
[[color:grey59][Text colored in grey59]]
[[color:gray60][Text colored in gray60]]
[[color:grey60][Text colored in grey60]]
[[color:gray61][Text colored in gray61]]
[[color:grey61][Text colored in grey61]]
[[color:gray62][Text colored in gray62]]
[[color:grey62][Text colored in grey62]]
[[color:gray63][Text colored in gray63]]
[[color:grey63][Text colored in grey63]]
[[color:gray64][Text colored in gray64]]
[[color:grey64][Text colored in grey64]]
[[color:gray65][Text colored in gray65]]
[[color:grey65][Text colored in grey65]]
[[color:gray66][Text colored in gray66]]
[[color:grey66][Text colored in grey66]]
[[color:gray67][Text colored in gray67]]
[[color:grey67][Text colored in grey67]]
[[color:gray68][Text colored in gray68]]
[[color:grey68][Text colored in grey68]]
[[color:gray69][Text colored in gray69]]
[[color:grey69][Text colored in grey69]]
[[color:gray70][Text colored in gray70]]
[[color:grey70][Text colored in grey70]]
[[color:gray71][Text colored in gray71]]
[[color:grey71][Text colored in grey71]]
[[color:gray72][Text colored in gray72]]
[[color:grey72][Text colored in grey72]]
[[color:gray73][Text colored in gray73]]
[[color:grey73][Text colored in grey73]]
[[color:gray74][Text colored in gray74]]
[[color:grey74][Text colored in grey74]]
[[color:gray75][Text colored in gray75]]
[[color:grey75][Text colored in grey75]]
[[color:gray76][Text colored in gray76]]
[[color:grey76][Text colored in grey76]]
[[color:gray77][Text colored in gray77]]
[[color:grey77][Text colored in grey77]]
[[color:gray78][Text colored in gray78]]
[[color:grey78][Text colored in grey78]]
[[color:gray79][Text colored in gray79]]
[[color:grey79][Text colored in grey79]]
[[color:gray80][Text colored in gray80]]
[[color:grey80][Text colored in grey80]]
[[color:gray81][Text colored in gray81]]
[[color:grey81][Text colored in grey81]]
[[color:gray82][Text colored in gray82]]
[[color:grey82][Text colored in grey82]]
[[color:gray83][Text colored in gray83]]
[[color:grey83][Text colored in grey83]]
[[color:gray84][Text colored in gray84]]
[[color:grey84][Text colored in grey84]]
[[color:gray85][Text colored in gray85]]
[[color:grey85][Text colored in grey85]]
[[color:gray86][Text colored in gray86]]
[[color:grey86][Text colored in grey86]]
[[color:gray87][Text colored in gray87]]
[[color:grey87][Text colored in grey87]]
[[color:gray88][Text colored in gray88]]
[[color:grey88][Text colored in grey88]]
[[color:gray89][Text colored in gray89]]
[[color:grey89][Text colored in grey89]]
[[color:gray90][Text colored in gray90]]
[[color:grey90][Text colored in grey90]]
[[color:gray91][Text colored in gray91]]
[[color:grey91][Text colored in grey91]]
[[color:gray92][Text colored in gray92]]
[[color:grey92][Text colored in grey92]]
[[color:gray93][Text colored in gray93]]
[[color:grey93][Text colored in grey93]]
[[color:gray94][Text colored in gray94]]
[[color:grey94][Text colored in grey94]]
[[color:gray95][Text colored in gray95]]
[[color:grey95][Text colored in grey95]]
[[color:gray96][Text colored in gray96]]
[[color:grey96][Text colored in grey96]]
[[color:gray97][Text colored in gray97]]
[[color:grey97][Text colored in grey97]]
[[color:gray98][Text colored in gray98]]
[[color:grey98][Text colored in grey98]]
[[color:gray99][Text colored in gray99]]
[[color:grey99][Text colored in grey99]]
[[color:gray100][Text colored in gray100]]
[[color:grey100][Text colored in grey100]]
[[color:darkgrey][Text colored in darkgrey]]
[[color:darkgray][Text colored in darkgray]]
[[color:darkblue][Text colored in darkblue]]
[[color:darkcyan][Text colored in darkcyan]]
[[color:darkmagenta][Text colored in darkmagenta]]
[[color:darkred][Text colored in darkred]]
[[color:lightgreen][Text colored in lightgreen]]




* DONE Side by side figures in org-mode for different export outputs
  CLOSED: [2016-01-17 Sun 21:03]
  :PROPERTIES:
  :ID:       9F7C8565-AB1F-46C6-AA13-FA730CCDE3B1
  :categories: emacs,orgmode
  :date:     2016/01/17 21:03:13
  :updated:  2016/01/17 21:18:18
  :END:
#+LATEX_CLASS: article
#+OPTIONS: author:nil toc:nil
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{subfigure}

Occasionally, someone wants side by side figures with subcaptions that have individually referenceable labels. This is not too hard in LaTeX, and there is a solution here:  http://www.johndcook.com/blog/2009/01/14/how-to-display-side-by-side-figurs-in-latex/.

We can create side by side figures in raw LaTeX like this (note however, this will not show up in html export):

#+BEGIN_LaTeX
\begin{figure}
  \subfigure[Left graph \label{fig:a}]
    {\includegraphics[width=3in]{images/cos-plot.png}}
\enskip % horizontal spacking. tex.stackexchange.com/questions/41476/lengths-and-when-to-use-them
  \subfigure[Right graph. \label{fig:b}]
    {\includegraphics[width=3in]{images/eos-uncertainty.png}}
\caption{Text pertaining to both graphs,\ref{fig:a}and \ref{fig:b}. \label{fig12}}
\end{figure}
#+END_LaTeX

And in our text we can refer to the overall Figure ref:fig12, or the subfigures Figure ref:fig:a or Figure ref:fig:b. This works fine if your end goal is LaTeX export. It does not work fine if you want to consider HTML or some other output.

So, here we consider how we could remove the LaTeX dependency by representing the figures in a sexp data structure, for example something like this. I change the labels and captions a bit so they are actually distinguishable.

#+BEGIN_SRC emacs-lisp
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:sa"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:sb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:sa")
  " and " (ref "fig:sb") "." (label "figs12")))
#+END_SRC

#+RESULTS:
: "emacs-lisp"

This doesn't look much worse than the LaTeX code itself. It might not seem useful right away, but imagine if this was really code that could evaluate to the format we want. Remember the [[http://kitchingroup.cheme.cmu.edu/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry/][sexp bibtex entry]] that could evaluate to bibtex, json or xml? Let's look at this here. What we consider is kind of like http://oremacs.com/2015/01/23/eltex/, but we could include other kinds of exports if we wanted.

Here is our special block in org-mode. It should render roughly as side by side images in LaTeX and HTML.

#+begin_sexp
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:sa"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:sb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:sa")
  " and " (ref "fig:sb") "." (label "figs12")))
#+end_sexp

Now, we need a function to format the sexp block for export. It is easy, we just eval the contents of the block. We do assume here there is just one sexp to evaluate. This function will handle all special blocks, but we only want to do something different for the sexp blocks.

#+BEGIN_SRC emacs-lisp
(defun sb-format (sb contents info)
  (cond
     ((string= "SEXP" (org-element-property :type sb))
      (eval (read (buffer-substring
		   (org-element-property :contents-begin sb)
		   (org-element-property :contents-end sb)))))
     (t
      contents)))))
#+END_SRC

#+RESULTS:
: sb-format

All that is left is to define the functions. We do that next.

** Latex export
We do LaTeX export first because we know what it should look like. We need to define a function for each piece of the data structure that will evaluate to a string. Here are three easy ones.

#+BEGIN_SRC emacs-lisp
(defun label (arg)
  (format "\\label{%s}" arg))

(defun ref (arg)
  (format "\\ref{%s}" arg))

(defun caption (&rest body)
  (format "\\caption{%s}"
	 (mapconcat 'eval body "")))

(caption
  "Text pertaining to both graphs, " (ref "fig:a")
  " and " (ref "fig:b") "." (label "fig12"))
#+END_SRC
#+RESULTS:
: \caption{Text pertaining to both graphs, \ref{fig:a} and \ref{fig:b}.\label{fig12}}

Now, for includegraphics, we allow options and a path. The options we assume are in an a-list.

#+BEGIN_SRC emacs-lisp
(defun includegraphics (options path)
  (format "\\includegraphics%s{%s}"
	  (if options
	      (format "[%s]"
		      (mapconcat (lambda (ccell)
				   (format "%s=%s"
					   (car ccell)
					   (cdr ccell)))
				 options
				 ","))
	    "")
	  path))

(includegraphics '((width . "3in"))
		 "images/eos-uncertainty.png")
#+END_SRC
#+RESULTS:
: \includegraphics[width=3in]{images/eos-uncertainty.png}

Similarly for subfigure, we have options, and then a body of expressions. The options here are just expressions that should evaluate to strings. This is not consistent with the way we do options in includegraphics. This is just proof of concept work, so I don't know if this inconsistency is really problematic yet, or insufficient for all options.

#+BEGIN_SRC emacs-lisp
(defun subfigure (options &rest body)
  (format "\\subfigure%s{%s}"
	  (if options
	      (format "[%s]"
		      (mapconcat 'eval options ""))
	    "")
	  (mapconcat 'eval body "")))

(subfigure '("Right graph" (label "fig:b"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
#+END_SRC
#+RESULTS:
: \subfigure[Right graph\label{fig:b}]{\includegraphics[width=3in]{images/eos-uncertainty.png}}

Now, we put the whole figure together.

#+BEGIN_SRC emacs-lisp
(defun figure (options &rest body)
  (format "\\begin{figure}
%s
\\end{figure}"
(mapconcat 'eval body "\n")))

(defun enskip () "\\enskip")
#+END_SRC
#+RESULTS:
: enskip

Now, we would have a block like this, and we can evaluate it.

#+BEGIN_SRC emacs-lisp :results latex
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:ssa"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:ssb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:ssa")
  " and " (ref "fig:ssb") "." (label "figss12")))
#+END_SRC

#+RESULTS:
#+BEGIN_LaTeX
\begin{figure}
\subfigure[Left graph from sexp.\label{fig:ssa}]{\includegraphics[width=3in]{images/cos-plot.png}}
\enskip
\subfigure[Right graph from sexp\label{fig:ssb}]{\includegraphics[width=3in]{images/eos-uncertainty.png}}
\caption{Text pertaining to both graphs from a sexp, \ref{fig:ssa} and \ref{fig:ssb}.\label{figss12}}
\end{figure}
#+END_LaTeX

Not the most beautiful LaTeX ever, but it works. Now, to get this to work, we need to handle our special sexp blocks differently. We do that with a new derived backend.

#+BEGIN_SRC emacs-lisp
(org-export-define-derived-backend 'my-latex 'latex
  :translate-alist '((special-block . sb-format)))

(org-latex-compile (org-export-to-file 'my-latex "custom-sb-export.tex"))
(org-open-file "custom-sb-export.pdf")
#+END_SRC

It works, and here is the pdf: [[./custom-sb-export.pdf]].

** HTML functions
We can use the same sexp block to get figures side-by-side in HTML. We need to redefine each element and its HTML output.

#+BEGIN_SRC emacs-lisp
(defun label (arg)
  (format "<a name=\"%s\"></a>" arg))

(defun ref (arg)
  (format "<a href=\"#%s\">%s</a>" arg arg))

(defun caption (&rest body)
  (format "<caption>%s</caption>"
	 (mapconcat 'eval body "")))

(caption
  "Text pertaining to both graphs, " (ref "fig:a")
  " and " (ref "fig:b") "." (label "fig12"))
#+END_SRC

#+RESULTS:
: <caption>Text pertaining to both graphs, <a href="#fig:a">fig:a</a> and <a href="#fig:b">fig:b</a>.<a name="fig12"></a></caption>


We will ignore options for the includegraphics html output. We would need to specify some way to do unit conversions for html. Here we fix the width.
#+BEGIN_SRC emacs-lisp
(defun includegraphics (options path)
  (format "<img src=\"/media/%s\" width=\"300\">"
	  path))

(includegraphics '((width . "3in"))
		 "images/eos-uncertainty.png")

#+END_SRC

#+RESULTS:
: <img src="/media/images/eos-uncertainty.png" width="300">

We wrap a subfigure in a table cell.
#+BEGIN_SRC emacs-lisp
(defun subfigure (options &rest body)
  (format "<td>%s%s</td>"
	  (mapconcat 'eval body "")
	  (when options
	    (concat "<br>"
		    (mapconcat 'eval options "")))))

(subfigure '("Right graph" (label "fig:b"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))

#+END_SRC

#+RESULTS:
: <td><img src="/media/images/eos-uncertainty.png" width="300"><br>Right graph<a name="fig:b"></a></td>

We assume we can put the images in a single row.

#+BEGIN_SRC emacs-lisp
(defun figure (options &rest body)
  (format "<span class=\"image\"><table>
<tr>%s</tr>
</table></span>"
(mapconcat 'eval body "\n")))

(defun enskip () "")
#+END_SRC

#+RESULTS:
: enskip

Now, here is our specification.
#+BEGIN_SRC emacs-lisp :results html
(figure ()
 (subfigure '("Left graph" (label "fig:ha"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph" (label "fig:hb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs, " (ref "fig:ha")
  " and " (ref "fig:hb") "." (label "figh12")))
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
<span class="image"><table>
<tr><td><img src="/media/images/cos-plot.png" width="300"><br>Left graph<a name="fig:ha"></a></td>

<td><img src="/media/images/eos-uncertainty.png" width="300"><br>Right graph<a name="fig:hb"></a></td>
<caption>Text pertaining to both graphs, <a href="#fig:ha">fig:ha</a> and <a href="#fig:hb">fig:hb</a>.<a name="figh12"></a></caption></tr>
</table></span>
#+END_HTML


And our derived backend for HTML.
#+BEGIN_SRC emacs-lisp
(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((special-block . sb-format)))

(browse-url (org-export-to-file 'my-html "custom-sb-export.html"))
#+END_SRC

#+RESULTS:
: #<process open custom-sb-export.html>


** Summary thoughts
I think I like the idea. Obviously there are differences between what is possible between LaTeX and HTML, notably the attributes that may or may not be supported between them, including the units of the width, labels, and references. I still have not figured out an elegant way to switch between LaTeX and HTML exports since there is basically one set of functions that need different outputs under different conditions; maybe each function could have backend specific output.

For small things, you could achieve this with inline emacs-lisp src blocks, but I think those are limited to one liners. Alternatively, you could probably get by with output from an actual src block, but you would have to make sure it executed during export (I turn this off by default), and that it have backend specific output.

Finally, the only other alternative is a preprocessor that finds the sexps that define the data and replaces them with output.

The sexp block I described above is basically like a domain specific language (DSL). Something like this is described in "Practical Common Lisp" (http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html). My version is not as sophisticated as the one there.  Notably, mine uses eval which has some limitations, such as no communication between sexp blocks.
