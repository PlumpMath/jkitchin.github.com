* colorizing src blocks


** take 3
this doesn't quite work. it seems to put lots of overlays on the blcok whcih is not  right.

#+BEGIN_SRC emacs-lisp
(require 'ov)
(defun match-next-src-block (&optional limit)
  (let ((case-fold-search t)
	src)
    (when (re-search-forward org-babel-src-block-regexp limit t)
      (setq src (org-element-context))
      (save-excursion
	(re-search-backward (regexp-quote (org-element-property :value src)))
	(cond
	 ((string= "sh" (org-element-property :language src))
	  (overlay-put (ov-at) 'face '(:foreground "white" :background "black")))
	 ((string= "emacs-lisp" (org-element-property :language src))
	  (overlay-put (ov-at) 'face '(:background "LightSteelBlue1"))
	  (org-src-fontify-block)))))))
#+END_SRC

#+RESULTS:
: match-next-src-block

#+BEGIN_SRC emacs-lisp :results silent
(font-lock-add-keywords
 nil
 '((match-next-src-block (0 'org-block-background))) t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(loop for i in '(4 5) collect i)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(* 9 0)
#+END_SRC

#+BEGIN_SRC python
print 8
for i in range(5):
   print i
#+END_SRC

#+RESULTS:
: 8
: 0
: 1
: 2
: 3
: 4

(match-next-src-block)

#+BEGIN_SRC sh
ls
test
#+END_SRC

#+BEGIN_SRC python
print 6
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC sh
pwd
#+END_SRC

#+RESULTS:
: /Users/jkitchin/blogofile-jkitchin.github.com/_blog

** advise org-fontify-meta-lines-and-blocks-1

(message-box "%S" (org-element-context)))

#+BEGIN_SRC emacs-lisp
(require 'ov)
(defadvice org-fontify-meta-lines-and-blocks-1 (after sh-fontify nil activate)
  (let ((src (org-element-context)))
    (goto-char (org-element-property :begin src))
    (forward-line)
    (overlay-put (ov-at) 'face '(:foreground "white" :background "black")))
  t
  )
#+END_SRC

#+RESULTS:
: org-fontify-meta-lines-and-blocks-1

** another take
#+BEGIN_SRC emacs-lisp
(defface org-block-sh
 '((t (:inherit org-block-background :foreground "white" :background "black")))
 "Background face for sh blocks")
#+END_SRC

#+RESULTS:
: org-block-sh


#+BEGIN_SRC emacs-lisp
(require 'ov)
(defun match-next-src-block (&optional limit)
(let ((case-fold-search t))
(message "cf: %s" case-fold-search)
  (when (re-search-forward org-babel-src-block-regexp limit t)
(message "found src")
    (save-excursion
      (forward-line -1)
      (overlay-put (ov-at) 'face '(:foreground "white" :background "black"))))))
#+END_SRC

#+RESULTS:
: match-next-src-block


(goto-char (match-beginning 0))

#+BEGIN_SRC emacs-lisp
(match-next-src-block)
#+END_SRC

#+BEGIN_SRC sh
(org-element-context)
#+END_SRC

#+RESULTS:

(match-next-src-block )

#+BEGIN_SRC sh
t
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC sh
test tree
#+END_SRC


** didn't work
org-babel-src-block-regexp

#+BEGIN_SRC emacs-lisp
(defface org-block-sh
 '((t (:inherit org-block-background :foreground "white" :background "black")))
 "Background face for sh blocks")

(defun match-next-sh-src-block (&optional limit)
  (when (re-search-forward org-babel-src-block-regexp limit t)
    (let* ((src (org-element-context))
	   (lang (org-element-property :language src)))
      (unless (string= lang "sh")
	(match-next-sh-src-block limit)))))

; do this for this buffer
(font-lock-add-keywords
    nil
    '((match-next-sh-src-block . org-block-sh)))
(font-lock-fontify-buffer)
#+END_SRC

#+RESULTS:
| :foreground | white | :background | black |

#+BEGIN_SRC emacs-lisp
(match-next-sh-src-block)
#+END_SRC


#+BEGIN_SRC sh
ls
#+END_SRC

#+RESULTS:
(match-next-src-block)

#+BEGIN_SRC sh
ls
#+END_SRC

#+RESULTS:
: t


#+BEGIN_SRC sh
tree
#+END_SRC

#+BEGIN_SRC sh
ls
dt
tree
ls

#+END_SRC

#+RESULTS:
: t


#+BEGIN_SRC emacs-lisp
t
#+END_SRC

#+RESULTS:
: t


#+BEGIN_SRC emacs-lisp
(require 'ov)
(defun ofs ()
  (interactive)
  (overlay-put (ov-at) 'face '(:foreground "white" :background "black")))
#+END_SRC

#+RESULTS:
: ofs
