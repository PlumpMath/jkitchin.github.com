(defvar ot-element nil
  "The org-element to transclude.")


(defun ot-copy ()
  (interactive)
  (setq ot-element (org-element-context)))

(defun ot-paste ()
  "Paste the element in and setup hooks."
  (interactive)
  (let ((p (point))
	(id (org-id-new))
	(source-ov (make-overlay (org-element-property :begin ot-element)
				 (org-element-property :end ot-element)))
	(ot-ov (make-overlay p (+ p (- (org-element-property :end ot-element)
				       (org-element-property :begin ot-element))))))
    (overlay-put source-ov 'ot-id id)
    (overlay-put source-ov 'linked-ov ot-ov)
    (overlay-put
     source-ov 'modification-hooks
     '((lambda (ov after beg end &optional length)
	 (let )

	 ))
     )
    
    (overlay-put ot-ov 'ot-id id)
    (overlay-put source-ov 'source-ov source-ov)
    )
  

  )
