* Using org-mode to select problems from a collection

Say I have a large collection of class problems in files in a directory, and I want to filter them to select a few for an assignment. Here is an example of a problem. I want to explore using org-agenda to search for problems that meet certain criteria, eg. a difficulty level, or some combination of keywords.

#+BEGIN_EXAMPLE
,* Stoichiometry 1 					      :stoichiometry:
  :PROPERTIES:
  :DIFFICULTY: easy
  :END:
How many moles of water can be made from 1/2 mole of oxygen and 1 mole of Hydrogen?
#+END_EXAMPLE

Here is an example search for a tag and property, and a column definition for a column view in the agenda (C-c C-x C-c in the agenda).
#+BEGIN_SRC emacs-lisp
(let ((org-agenda-files (file-expand-wildcards "p*[0-9].org"))
      (org-agenda-overriding-columns-format "%25ITEM %15DIFFICULTY %10POINTS %TAGS"))
  (org-tags-view nil "stoichiometry+DIFFICULTY=\"easy\"")
  (org-agenda-columns))
#+END_SRC

#+RESULTS:
: t

I can tag headlines with relevant topics, and create properties that are searchable this way. The example below shows we can also search the content of each headline.

#+BEGIN_SRC emacs-lisp
(let ((org-agenda-files '("p1.org" "p2.org")) 
      (org-agenda-overriding-columns-format "%25ITEM %15DIFFICULTY %10POINTS %TAGS"))
  (org-search-view nil "+reaction")
  (org-agenda-columns))
#+END_SRC

It appears this has to work at the headline level; there is no obvious way to find files that do not contain headlines; e.g. files with filetags like I use in my current approach which uses filetags.

It would be nice to create a bulk action that concatenates marked entries to a file. This function will act on marked entries and append them to a file.

#+BEGIN_SRC emacs-lisp
(defun cat-heading ()
  (interactive "P")
  (let* ((marker (or (org-get-at-bol 'org-hd-marker)
		     (org-agenda-error)))
	 (buffer (marker-buffer marker))
	 (contents (with-current-buffer buffer
		     (buffer-string))))
    
      (with-temp-file "./exam.org"
	(when (file-exists-p "./exam.org")
	  (insert-file-contents "./exam.org"))
	(insert contents "\n"))))
#+END_SRC

To use it, we run this block.

#+BEGIN_SRC emacs-lisp
(let ((org-agenda-files '("p1.org" "p2.org")) 
      (org-agenda-overriding-columns-format "%25ITEM %15DIFFICULTY %10POINTS %TAGS"))
  (org-search-view nil "+stoichiometry")
  (org-agenda-columns))
#+END_SRC

Then, we mark entries by pressing "m" on the entries we want. Finally, we press "B" to trigger bulk actions, then press "f" for function, and finally enter cat-heading. that will create the file file:./exam.org.

This seems like the direction to go. I can store the rubric and grades in each section, and adapt the grade function to handle a headline. Probably this will wait for techela 2.0.
