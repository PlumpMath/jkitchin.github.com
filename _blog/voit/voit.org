#+BEGIN_SRC emacs-lisp
(defvar memacs-root "./")
(defvar memacs-file-pattern "files.org_archive") ;; also possible: "*.org"
#+END_SRC

** Test some grep queries

This gives an empty string:
#+BEGIN_SRC emacs-lisp
(shell-command-to-string (concat "grep " "fobar.txt " (concat memacs-root memacs-file-pattern)))
#+END_SRC

#+RESULTS:

This gives one match, as a string.

#+BEGIN_SRC emacs-lisp
(shell-command-to-string (concat "grep " "foobar.txt " (concat memacs-root memacs-file-pattern)))
#+END_SRC

#+RESULTS:
: ** <2016-12-27 18:23> [[file:/home/user/anotherdir/2016-12-27T18.23_foobar.txt][2016-12-27T18.23_foobar.txt]]

This gives two matches, as a string.
#+BEGIN_SRC emacs-lisp
(shell-command-to-string (concat "grep " "2016-12-27 " (concat memacs-root memacs-file-pattern)))
#+END_SRC

#+RESULTS:
: ** <2016-12-27 18:23> [[file:/home/user/anotherdir/2016-12-27T18.23_foobar.txt][2016-12-27T18.23_foobar.txt]]
: ** <2016-12-27 16:12> [[file:/home/user/again-dir/2016-12-27T16.12.54_baz_with_seconds.txt][2016-12-27T16.12.54_baz_with_seconds.txt]]

Now we trim the last \n and split the output by \n to make each line an element of a list, we set omit-nulls to t so we do not get any empty strings.

#+BEGIN_SRC emacs-lisp
(split-string
 (s-trim
  (shell-command-to-string
   (concat "grep " "206-12-27 " (concat memacs-root memacs-file-pattern))))
 "\n" t)
#+END_SRC

#+RESULTS:

Ok, now we build it into a function that takes a query string. 

#+BEGIN_SRC emacs-lisp
(defun my-handle-tsfile-link (querystring)
  ;; get a list of hits
  (let ((queryresults (split-string
		       (s-trim
			(shell-command-to-string
			 (concat
			  "grep "
			  querystring
			  " "
			  (concat memacs-root memacs-file-pattern))))
		       "\n" t)))
    (message "%S" queryresults)
    ;; check length of list (number of lines)
    (cond
     ((= 0 (length queryresults))
      ;; edge case: empty query result
      (message "Sorry, no results found for query: %s" querystring)) 
     (t
      (with-temp-buffer
	(insert (if (= 1 (length queryresults))
		    (car queryresults)
		  (completing-read "Choose: " queryresults)))
	(org-mode)
	(goto-char (point-min))
	(org-next-link)
	(org-open-at-point))))))
#+END_SRC

#+RESULTS:
: my-handle-tsfile-link

Now, we define a link.
#+BEGIN_SRC emacs-lisp
(org-link-set-parameters
 "tsfile"  
 :follow (lambda (path) (my-handle-tsfile-link path))
 :help-echo "Opens the linked file with your default application")
#+END_SRC

#+RESULTS:
| :follow | (lambda (path) (my-handle-tsfile-link path)) | :help-echo | Opens the linked file with your default application |

and some test links

 [[tsfile:2016-12-27T18.238]]
 [[tsfile:2016-12-27]]
 [[tsfile:foobar.txt]]
