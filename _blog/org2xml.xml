<root filename="/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org" indexed-on="Sat Jul  4 08:55:56 2015"><heading level="1"><title>An xml representation of an org document for indexing</title><tags></tags><properties><property label="(car (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org))">/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org</property><property label="(car (BLOCKED . ))"></property><property label="(car (CATEGORY . blog))">blog</property></properties><content>#+BEGIN_SRC emacs-lisp
(defun print-tag (name attrs &amp;optional closingp)
  &quot;Print an xml tag with NAME and ATTRS (a cons list of (attribute . value).
if CLOSINGP print the closing tag instead.&quot;
  (format
   &quot;&lt;%s%s%s&gt;&quot;
   (if closingp &quot;/&quot; &quot;&quot;)
   name
   (if (and attrs (not closingp))
       (concat
	&quot; &quot;
	(mapconcat
	 (lambda (x)
	   (format &quot;%s=\&quot;%s\&quot;&quot; (car x) (cdr x)))
	 attrs
	 &quot; &quot;))
     &quot;&quot;)))

(print-tag &apos;html &apos;((color . blue) (label . test)))
#+END_SRC

#+RESULTS:
: &lt;html color=&quot;blue&quot; label=&quot;test&quot;&gt;

#+BEGIN_SRC emacs-lisp
(defmacro tag (name attributes &amp;rest body)
  `(format &quot;%s%s%s&quot;
	   (print-tag ,name ,attributes nil)
           (concat
	   ,@body)
	   (print-tag ,name nil t)))

(tag &quot;xml&quot; &apos;((test . &quot;id&quot;))
     (tag &quot;body&quot; nil
	  (tag &quot;p&quot; nil (xml-escape-string &quot;paragraph &amp; &lt; 1&quot;))
	  (tag &quot;p&quot; nil &quot;paragraph 2&quot;)))
#+END_SRC

#+RESULTS:
: &lt;xml test=&quot;id&quot;&gt;&lt;body&gt;&lt;p&gt;paragraph &amp;amp; &amp;lt; 1&lt;/p&gt;&lt;p&gt;paragraph 2&lt;/p&gt;&lt;/body&gt;&lt;/xml&gt;

| x | y |
| 7 | 8 |
| 9 | 0 |

#+BEGIN_SRC emacs-lisp
(tag &apos;tables ()
     (mapconcat &apos;identity
		(org-element-map
		    (org-element-parse-buffer)
		    &apos;table
		  (lambda (element)
		    (tag &apos;table ()
			 (xml-escape-string
			  (buffer-substring
			   (org-element-property :contents-begin element)
			   (org-element-property :contents-end element))))))
		&quot;&quot;))
#+END_SRC

#+RESULTS:
: &lt;tables&gt;&lt;table&gt;| x | y |
: | 7 | 8 |
: | 9 | 0 |
: &lt;/table&gt;&lt;table&gt;| &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(defun print-tag (name attrs &amp;amp;amp;optional closingp)\n  (format\n   &amp;amp;quot;&amp;amp;lt;%s%s%s&amp;amp;gt;&amp;amp;quot;\n   (if closingp &amp;amp;quot;/&amp;amp;quot; &amp;amp;quot;&amp;amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;amp;quot; &amp;amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;amp;quot;%s=\&amp;amp;quot;%s\&amp;amp;quot;&amp;amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;amp;quot; &amp;amp;quot;))\n     &amp;amp;quot;&amp;amp;quot;)))\n\n(print-tag &amp;amp;apos;html &amp;amp;apos;((color . blue) (label . test)))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(defmacro tag (name attributes &amp;amp;amp;rest body)\n  `(format &amp;amp;quot;%s%s%s&amp;amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;amp;quot;html&amp;amp;quot; &amp;amp;apos;((test . &amp;amp;quot;id&amp;amp;quot;))\n     (tag &amp;amp;quot;body&amp;amp;quot; nil\n\n  (tag &amp;amp;quot;p&amp;amp;quot; nil (concat &amp;amp;quot;paragraph&amp;amp;quot; &amp;amp;quot; &amp;amp;amp; &amp;amp;lt; 1&amp;amp;quot;))\n\n  (tag &amp;amp;quot;p&amp;amp;quot; nil &amp;amp;quot;paragraph 2&amp;amp;quot;)))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;amp;apos;src-block\n  (lambda (element)\n    (tag &amp;amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(concat\n &amp;amp;quot;&amp;amp;lt;root&amp;amp;gt;&amp;amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;amp;apos;heading `((level . ,level))\n\n\n(tag &amp;amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;amp;apos;tags () (mapconcat &amp;amp;apos;identity tags &amp;amp;quot; &amp;amp;quot;))\n\n\n(tag &amp;amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;amp;quot;&amp;amp;quot;)))))))\n\n       \n\n  ;(tag &amp;amp;apos;content () (format &amp;amp;quot;%s&amp;amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;amp;quot;&amp;amp;lt;/root&amp;amp;gt;&amp;amp;quot;)\n\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; |
: &lt;/table&gt;&lt;/tables&gt;



#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-element-map
    (org-element-parse-buffer)
    &apos;src-block
  (lambda (element)
    (tag &apos;src-block `((language . ,(org-element-property :language element)))
	 (tag &apos;contents () (xml-escape-string (org-element-property :value element))))))
#+END_SRC

#+RESULTS:
| &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)\n  (format\n   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;\n   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;quot; &amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;quot; &amp;quot;))\n     &amp;quot;&amp;quot;)))\n\n(print-tag &amp;apos;html &amp;apos;((color . blue) (label . test)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)\n  `(format &amp;quot;%s%s%s&amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;quot;html&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))\n     (tag &amp;quot;body&amp;quot; nil\n\n  (tag &amp;quot;p&amp;quot; nil (concat &amp;quot;paragraph&amp;quot; &amp;quot; &amp;amp; &amp;lt; 1&amp;quot;))\n\n  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;apos;src-block\n  (lambda (element)\n    (tag &amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(concat\n &amp;quot;&amp;lt;root&amp;gt;&amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;apos;heading `((level . ,level))\n\n\n(tag &amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))\n\n\n(tag &amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;quot;&amp;quot;)))))))\n\n       \n\n  ;(tag &amp;apos;content () (format &amp;quot;%s&amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)\n\n&lt;/contents&gt;&lt;/src-block&gt; |

#+BEGIN_SRC emacs-lisp
(let ((xml (tag &apos;root `((filename . ,(buffer-file-name))
			(indexed-on . ,(current-time-string)))
		;; map the headlines
		(mapconcat
		 &apos;identity
		 (org-map-entries
		  (lambda ()
		    (let* ((tags (org-get-tags))
			   (heading-components (org-heading-components))
			   (title (nth 4 heading-components))
			   (level (nth 0 heading-components))
			   (properties (org-entry-properties))
			   (elem (org-element-at-point))
			   (bp (org-element-property :contents-begin elem))
			   (ep (org-element-property :contents-end elem))
			   (content (buffer-substring bp ep)))
		      (tag &apos;heading `((level . ,level))
			   (tag &apos;title () (xml-escape-string title))
			   (tag &apos;tags () (mapconcat &apos;identity tags &quot; &quot;))
			   (tag &apos;properties ()
				(mapconcat
				 (lambda (x)
				   (tag &apos;property `((label . (car ,x))) (cdr x)))
				 properties
				 &quot;&quot;))
			   (tag &apos;content ()
				(format &quot;%s&quot; (xml-escape-string content)))))))
		 &quot;&quot;)

		;; map specific element types
		(tag &apos;source-blocks ()
		     (mapconcat
		      &apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &apos;src-block
			(lambda (element)
			  (tag &apos;src-block
			       `((language . ,(org-element-property :language element)))
			       (tag &apos;contents ()
				    (xml-escape-string
				     (org-element-property :value element)))))) &quot;&quot;))

		(tag &apos;tables ()
		     (mapconcat
		      &apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &apos;table
			(lambda (element)
			  (tag &apos;table ()
			       (xml-escape-string
				(buffer-substring
				 (org-element-property :contents-begin element)
				 (org-element-property :contents-end element))))))
		      &quot;&quot;))
		(tag &apos;paragraphs ()
		     (mapconcat
		      &apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &apos;paragraph
			(lambda (element)
			  (tag &apos;paragraph ()
			       (xml-escape-string
				(buffer-substring
				 (org-element-property :contents-begin element)
				 (org-element-property :contents-end element))))))
		      &quot;&quot;
		      ))
		)))
  (with-temp-file &quot;org2xml.xml&quot;
    (insert xml)))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp
(xml-parse-file &quot;org2xml.xml&quot;)
#+END_SRC

#+RESULTS:
| root | ((filename . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (indexed-on . Sat Jul  4 08:35:15 2015)) | (heading ((level . 1)) (title nil An xml representation of an org document) (tags nil) (properties nil (property ((label . (car (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org)))) /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (property ((label . (car (BLOCKED . ))))) (property ((label . (car (CATEGORY . blog)))) blog)) (content nil #+BEGIN_SRC emacs-lisp\n(defun print-tag (name attrs &amp;optional closingp)\n  (format\n   &quot;&lt;%s%s%s&gt;&quot;\n   (if closingp &quot;/&quot; &quot;&quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&quot; &quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &quot;%s=\&quot;%s\&quot;&quot; (car x) (cdr x)))\n\n attrs\n\n &quot; &quot;))\n     &quot;&quot;)))\n\n(print-tag &apos;html &apos;((color . blue) (label . test)))\n#+END_SRC\n\n#+RESULTS:\n: &lt;html color=&quot;blue&quot; label=&quot;test&quot;&gt;\n\n#+BEGIN_SRC emacs-lisp\n(defmacro tag (name attributes &amp;rest body)\n  `(format &quot;%s%s%s&quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat\n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &quot;html&quot; &apos;((test . &quot;id&quot;))\n     (tag &quot;body&quot; nil\n\n  (tag &quot;p&quot; nil (concat &quot;paragraph&quot; &quot; &amp; &lt; 1&quot;))\n\n  (tag &quot;p&quot; nil &quot;paragraph 2&quot;)))\n#+END_SRC\n\n#+RESULTS:\n: &lt;html test=&quot;id&quot;&gt;&lt;body&gt;&lt;p&gt;paragraph &amp; &lt; 1&lt;/p&gt;&lt;p&gt;paragraph 2&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n\n | x | y | \n | 7 | 8 | \n | 9 | 0 | \n\n#+BEGIN_SRC emacs-lisp\n(tag &apos;tables ()\n     (mapconcat &apos;identity\n\n\n(org-element-map\n\n\n    (org-element-parse-buffer)\n\n\n    &apos;table\n\n\n  (lambda (element)\n\n\n    (tag &apos;table ()\n\n\n\n (xml-escape-string\n\n\n\n  (buffer-substring\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n&quot;&quot;))\n#+END_SRC\n\n#+RESULTS:\n: &lt;tables&gt;&lt;table&gt; | x | y | \n: | 7 | 8 | \n: | 9 | 0 | \n: &lt;/table&gt;&lt;table&gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(defun print-tag (name attrs &amp;amp;amp;optional closingp)\n  (format\n   &amp;amp;quot;&amp;amp;lt;%s%s%s&amp;amp;gt;&amp;amp;quot;\n   (if closingp &amp;amp;quot;/&amp;amp;quot; &amp;amp;quot;&amp;amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;amp;quot; &amp;amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;amp;quot;%s=\&amp;amp;quot;%s\&amp;amp;quot;&amp;amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;amp;quot; &amp;amp;quot;))\n     &amp;amp;quot;&amp;amp;quot;)))\n\n(print-tag &amp;amp;apos;html &amp;amp;apos;((color . blue) (label . test)))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(defmacro tag (name attributes &amp;amp;amp;rest body)\n  `(format &amp;amp;quot;%s%s%s&amp;amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;amp;quot;html&amp;amp;quot; &amp;amp;apos;((test . &amp;amp;quot;id&amp;amp;quot;))\n     (tag &amp;amp;quot;body&amp;amp;quot; nil\n\n  (tag &amp;amp;quot;p&amp;amp;quot; nil (concat &amp;amp;quot;paragraph&amp;amp;quot; &amp;amp;quot; &amp;amp;amp; &amp;amp;lt; 1&amp;amp;quot;))\n\n  (tag &amp;amp;quot;p&amp;amp;quot; nil &amp;amp;quot;paragraph 2&amp;amp;quot;)))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;amp;apos;src-block\n  (lambda (element)\n    (tag &amp;amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(concat\n &amp;amp;quot;&amp;amp;lt;root&amp;amp;gt;&amp;amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;amp;apos;heading `((level . ,level))\n\n\n(tag &amp;amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;amp;apos;tags () (mapconcat &amp;amp;apos;identity tags &amp;amp;quot; &amp;amp;quot;))\n\n\n(tag &amp;amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;amp;quot;&amp;amp;quot;)))))))\n\n       \n\n  ;(tag &amp;amp;apos;content () (format &amp;amp;quot;%s&amp;amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;amp;quot;&amp;amp;lt;/root&amp;amp;gt;&amp;amp;quot;)\n\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | \n: &lt;/table&gt;&lt;/tables&gt;\n\n\n\n#+END_SRC\n\n#+BEGIN_SRC emacs-lisp\n(org-element-map\n    (org-element-parse-buffer)\n    &apos;src-block\n  (lambda (element)\n    (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &apos;contents () (xml-escape-string (org-element-property :value element))))))\n#+END_SRC\n\n#+RESULTS:\n | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)\n  (format\n   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;\n   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;quot; &amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;quot; &amp;quot;))\n     &amp;quot;&amp;quot;)))\n\n(print-tag &amp;apos;html &amp;apos;((color . blue) (label . test)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)\n  `(format &amp;quot;%s%s%s&amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;quot;html&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))\n     (tag &amp;quot;body&amp;quot; nil\n\n  (tag &amp;quot;p&amp;quot; nil (concat &amp;quot;paragraph&amp;quot; &amp;quot; &amp;amp; &amp;lt; 1&amp;quot;))\n\n  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;apos;src-block\n  (lambda (element)\n    (tag &amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(concat\n &amp;quot;&amp;lt;root&amp;gt;&amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;apos;heading `((level . ,level))\n\n\n(tag &amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))\n\n\n(tag &amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;quot;&amp;quot;)))))))\n\n       \n\n  ;(tag &amp;apos;content () (format &amp;quot;%s&amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)\n\n&lt;/contents&gt;&lt;/src-block&gt; | \n\n#+BEGIN_SRC emacs-lisp\n(let ((xml (tag &apos;root `((filename . ,(buffer-file-name))\n\n\n\n(indexed-on . ,(current-time-string)))\n\n\n;; map the headlines\n\n\n(mapconcat\n\n\n &apos;identity\n\n\n (org-map-entries\n\n\n  (lambda ()\n\n\n    (let* ((tags (org-get-tags))\n\n\n\n   (heading-components (org-heading-components))\n\n\n\n   (title (nth 4 heading-components))\n\n\n\n   (level (nth 0 heading-components))\n\n\n\n   (properties (org-entry-properties))\n\n\n\n   (elem (org-element-at-point))\n\n\n\n   (bp (org-element-property :contents-begin elem))\n\n\n\n   (ep (org-element-property :contents-end elem))\n\n\n\n   (content (buffer-substring bp ep)))\n\n\n      (tag &apos;heading `((level . ,level))\n\n\n\n   (tag &apos;title () (xml-escape-string title))\n\n\n\n   (tag &apos;tags () (mapconcat &apos;identity tags &quot; &quot;))\n\n\n\n   (tag &apos;properties ()\n\n\n\n\n(mapconcat\n\n\n\n\n (lambda (x)\n\n\n\n\n   (tag &apos;property `((label . (car ,x))) (cdr x)))\n\n\n\n\n properties\n\n\n\n\n &quot;&quot;))\n\n\n\n   (tag &apos;content () (format &quot;%s&quot; (xml-escape-string content)))))))\n\n\n &quot;&quot;)\n\n\n\n;; map specific element types    \n\n\n(tag &apos;source-blocks ()\n\n\n     (mapconcat\n\n\n      &apos;identity\n\n\n      (org-element-map\n\n\n\n  (org-element-parse-buffer)\n\n\n\n  &apos;src-block\n\n\n\n(lambda (element)\n\n\n\n  (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n\n\n       (tag &apos;contents ()\n\n\n\n\n    (xml-escape-string (org-element-property :value element)))))) &quot;&quot;))\n     \n\n\n(tag &apos;tables ()\n\n\n     (mapconcat &apos;identity\n\n\n\n\n(org-element-map\n\n\n\n\n    (org-element-parse-buffer)\n\n\n\n\n    &apos;table\n\n\n\n\n  (lambda (element)\n\n\n\n\n    (tag &apos;table ()\n\n\n\n\n\n (xml-escape-string\n\n\n\n\n\n  (buffer-substring\n\n\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n\n\n&quot;&quot;)))))\n  (with-temp-file &quot;org2xml.xml&quot;\n    (insert xml)))\n\n\n#+END_SRC\n\n#+RESULTS:\n\n** subheading\n\n\n\n    :tag1:\n   :PROPERTIES:\n   :categories: emacs\n   :END:\n\nwith some text\n)) | (heading ((level . 2)) (title nil subheading) (tags nil tag1) (properties nil (property ((label . (car (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org)))) /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (property ((label . (car (TAGS . :tag1:)))) :tag1:) (property ((label . (car (ALLTAGS . :tag1:)))) :tag1:) (property ((label . (car (BLOCKED . ))))) (property ((label . (car (categories . emacs)))) emacs) (property ((label . (car (CATEGORY . blog)))) blog)) (content nil    :PROPERTIES:\n   :categories: emacs\n   :END:\n\nwith some text\n)) | (source-blocks nil (src-block ((language . emacs-lisp)) (contents nil (defun print-tag (name attrs &amp;optional closingp)\n  (format\n   &quot;&lt;%s%s%s&gt;&quot;\n   (if closingp &quot;/&quot; &quot;&quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&quot; &quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &quot;%s=\&quot;%s\&quot;&quot; (car x) (cdr x)))\n\n attrs\n\n &quot; &quot;))\n     &quot;&quot;)))\n\n(print-tag &apos;html &apos;((color . blue) (label . test)))\n)) (src-block ((language . emacs-lisp)) (contents nil (defmacro tag (name attributes &amp;rest body)\n  `(format &quot;%s%s%s&quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat\n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &quot;html&quot; &apos;((test . &quot;id&quot;))\n     (tag &quot;body&quot; nil\n\n  (tag &quot;p&quot; nil (concat &quot;paragraph&quot; &quot; &amp; &lt; 1&quot;))\n\n  (tag &quot;p&quot; nil &quot;paragraph 2&quot;)))\n)) (src-block ((language . emacs-lisp)) (contents nil (tag &apos;tables ()\n     (mapconcat &apos;identity\n\n\n(org-element-map\n\n\n    (org-element-parse-buffer)\n\n\n    &apos;table\n\n\n  (lambda (element)\n\n\n    (tag &apos;table ()\n\n\n\n (xml-escape-string\n\n\n\n  (buffer-substring\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n&quot;&quot;))\n)) (src-block ((language . emacs-lisp)) (contents nil (org-element-map\n    (org-element-parse-buffer)\n    &apos;src-block\n  (lambda (element)\n    (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &apos;contents () (xml-escape-string (org-element-property :value element))))))\n)) (src-block ((language . emacs-lisp)) (contents nil (let ((xml (tag &apos;root `((filename . ,(buffer-file-name))\n\n\n\n(indexed-on . ,(current-time-string)))\n\n\n;; map the headlines\n\n\n(mapconcat\n\n\n &apos;identity\n\n\n (org-map-entries\n\n\n  (lambda ()\n\n\n    (let* ((tags (org-get-tags))\n\n\n\n   (heading-components (org-heading-components))\n\n\n\n   (title (nth 4 heading-components))\n\n\n\n   (level (nth 0 heading-components))\n\n\n\n   (properties (org-entry-properties))\n\n\n\n   (elem (org-element-at-point))\n\n\n\n   (bp (org-element-property :contents-begin elem))\n\n\n\n   (ep (org-element-property :contents-end elem))\n\n\n\n   (content (buffer-substring bp ep)))\n\n\n      (tag &apos;heading `((level . ,level))\n\n\n\n   (tag &apos;title () (xml-escape-string title))\n\n\n\n   (tag &apos;tags () (mapconcat &apos;identity tags &quot; &quot;))\n\n\n\n   (tag &apos;properties ()\n\n\n\n\n(mapconcat\n\n\n\n\n (lambda (x)\n\n\n\n\n   (tag &apos;property `((label . (car ,x))) (cdr x)))\n\n\n\n\n properties\n\n\n\n\n &quot;&quot;))\n\n\n\n   (tag &apos;content () (format &quot;%s&quot; (xml-escape-string content)))))))\n\n\n &quot;&quot;)\n\n\n\n;; map specific element types    \n\n\n(tag &apos;source-blocks ()\n\n\n     (mapconcat\n\n\n      &apos;identity\n\n\n      (org-element-map\n\n\n\n  (org-element-parse-buffer)\n\n\n\n  &apos;src-block\n\n\n\n(lambda (element)\n\n\n\n  (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n\n\n       (tag &apos;contents ()\n\n\n\n\n    (xml-escape-string (org-element-property :value element)))))) &quot;&quot;))\n     \n\n\n(tag &apos;tables ()\n\n\n     (mapconcat &apos;identity\n\n\n\n\n(org-element-map\n\n\n\n\n    (org-element-parse-buffer)\n\n\n\n\n    &apos;table\n\n\n\n\n  (lambda (element)\n\n\n\n\n    (tag &apos;table ()\n\n\n\n\n\n (xml-escape-string\n\n\n\n\n\n  (buffer-substring\n\n\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n\n\n&quot;&quot;)))))\n  (with-temp-file &quot;org2xml.xml&quot;\n    (insert xml)))\n\n\n))) | (tables nil (table nil | x | y | \n | 7 | 8 | \n | 9 | 0 | \n) (table nil | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)\n  (format\n   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;\n   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;quot; &amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;quot; &amp;quot;))\n     &amp;quot;&amp;quot;)))\n\n(print-tag &amp;apos;html &amp;apos;((color . blue) (label . test)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)\n  `(format &amp;quot;%s%s%s&amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;quot;html&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))\n     (tag &amp;quot;body&amp;quot; nil\n\n  (tag &amp;quot;p&amp;quot; nil (concat &amp;quot;paragraph&amp;quot; &amp;quot; &amp;amp; &amp;lt; 1&amp;quot;))\n\n  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;apos;src-block\n  (lambda (element)\n    (tag &amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(concat\n &amp;quot;&amp;lt;root&amp;gt;&amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;apos;heading `((level . ,level))\n\n\n(tag &amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))\n\n\n(tag &amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;quot;&amp;quot;)))))))\n\n       \n\n  ;(tag &amp;apos;content () (format &amp;quot;%s&amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)\n\n&lt;/contents&gt;&lt;/src-block&gt; | \n)) |

** subheading				    :tag1:
   :PROPERTIES:
   :categories: emacs
   :END:

with some text
</content></heading><heading level="2"><title>subheading</title><tags>tag1</tags><properties><property label="(car (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org))">/Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org</property><property label="(car (TAGS . :tag1:))">:tag1:</property><property label="(car (ALLTAGS . :tag1:))">:tag1:</property><property label="(car (BLOCKED . ))"></property><property label="(car (categories . emacs))">emacs</property><property label="(car (CATEGORY . blog))">blog</property></properties><content>   :PROPERTIES:
   :categories: emacs
   :END:

with some text
</content></heading><source-blocks><src-block language="emacs-lisp"><contents>(defun print-tag (name attrs &amp;optional closingp)
  &quot;Print an xml tag with NAME and ATTRS (a cons list of (attribute . value).
if CLOSINGP print the closing tag instead.&quot;
  (format
   &quot;&lt;%s%s%s&gt;&quot;
   (if closingp &quot;/&quot; &quot;&quot;)
   name
   (if (and attrs (not closingp))
       (concat
	&quot; &quot;
	(mapconcat
	 (lambda (x)
	   (format &quot;%s=\&quot;%s\&quot;&quot; (car x) (cdr x)))
	 attrs
	 &quot; &quot;))
     &quot;&quot;)))

(print-tag &apos;html &apos;((color . blue) (label . test)))
</contents></src-block><src-block language="emacs-lisp"><contents>(defmacro tag (name attributes &amp;rest body)
  `(format &quot;%s%s%s&quot;
	   (print-tag ,name ,attributes nil)
           (concat
	   ,@body)
	   (print-tag ,name nil t)))

(tag &quot;xml&quot; &apos;((test . &quot;id&quot;))
     (tag &quot;body&quot; nil
	  (tag &quot;p&quot; nil (xml-escape-string &quot;paragraph &amp; &lt; 1&quot;))
	  (tag &quot;p&quot; nil &quot;paragraph 2&quot;)))
</contents></src-block><src-block language="emacs-lisp"><contents>(tag &apos;tables ()
     (mapconcat &apos;identity
		(org-element-map
		    (org-element-parse-buffer)
		    &apos;table
		  (lambda (element)
		    (tag &apos;table ()
			 (xml-escape-string
			  (buffer-substring
			   (org-element-property :contents-begin element)
			   (org-element-property :contents-end element))))))
		&quot;&quot;))
</contents></src-block><src-block language="emacs-lisp"><contents>(org-element-map
    (org-element-parse-buffer)
    &apos;src-block
  (lambda (element)
    (tag &apos;src-block `((language . ,(org-element-property :language element)))
	 (tag &apos;contents () (xml-escape-string (org-element-property :value element))))))
</contents></src-block><src-block language="emacs-lisp"><contents>(let ((xml (tag &apos;root `((filename . ,(buffer-file-name))
			(indexed-on . ,(current-time-string)))
		;; map the headlines
		(mapconcat
		 &apos;identity
		 (org-map-entries
		  (lambda ()
		    (let* ((tags (org-get-tags))
			   (heading-components (org-heading-components))
			   (title (nth 4 heading-components))
			   (level (nth 0 heading-components))
			   (properties (org-entry-properties))
			   (elem (org-element-at-point))
			   (bp (org-element-property :contents-begin elem))
			   (ep (org-element-property :contents-end elem))
			   (content (buffer-substring bp ep)))
		      (tag &apos;heading `((level . ,level))
			   (tag &apos;title () (xml-escape-string title))
			   (tag &apos;tags () (mapconcat &apos;identity tags &quot; &quot;))
			   (tag &apos;properties ()
				(mapconcat
				 (lambda (x)
				   (tag &apos;property `((label . (car ,x))) (cdr x)))
				 properties
				 &quot;&quot;))
			   (tag &apos;content ()
				(format &quot;%s&quot; (xml-escape-string content)))))))
		 &quot;&quot;)

		;; map specific element types
		(tag &apos;source-blocks ()
		     (mapconcat
		      &apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &apos;src-block
			(lambda (element)
			  (tag &apos;src-block
			       `((language . ,(org-element-property :language element)))
			       (tag &apos;contents ()
				    (xml-escape-string
				     (org-element-property :value element)))))) &quot;&quot;))

		(tag &apos;tables ()
		     (mapconcat
		      &apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &apos;table
			(lambda (element)
			  (tag &apos;table ()
			       (xml-escape-string
				(buffer-substring
				 (org-element-property :contents-begin element)
				 (org-element-property :contents-end element))))))
		      &quot;&quot;))
		(tag &apos;paragraphs ()
		     (mapconcat
		      &apos;identity
		      (org-element-map
			  (org-element-parse-buffer)
			  &apos;paragraph
			(lambda (element)
			  (tag &apos;paragraph ()
			       (xml-escape-string
				(buffer-substring
				 (org-element-property :contents-begin element)
				 (org-element-property :contents-end element))))))
		      &quot;&quot;
		      ))
		)))
  (with-temp-file &quot;org2xml.xml&quot;
    (insert xml)))
</contents></src-block><src-block language="emacs-lisp"><contents>(xml-parse-file &quot;org2xml.xml&quot;)
</contents></src-block></source-blocks><tables><table>| x | y |
| 7 | 8 |
| 9 | 0 |
</table><table>| &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)\n  (format\n   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;\n   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;quot; &amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;quot; &amp;quot;))\n     &amp;quot;&amp;quot;)))\n\n(print-tag &amp;apos;html &amp;apos;((color . blue) (label . test)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)\n  `(format &amp;quot;%s%s%s&amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;quot;html&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))\n     (tag &amp;quot;body&amp;quot; nil\n\n  (tag &amp;quot;p&amp;quot; nil (concat &amp;quot;paragraph&amp;quot; &amp;quot; &amp;amp; &amp;lt; 1&amp;quot;))\n\n  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;apos;src-block\n  (lambda (element)\n    (tag &amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(concat\n &amp;quot;&amp;lt;root&amp;gt;&amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;apos;heading `((level . ,level))\n\n\n(tag &amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))\n\n\n(tag &amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;quot;&amp;quot;)))))))\n\n       \n\n  ;(tag &amp;apos;content () (format &amp;quot;%s&amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)\n\n&lt;/contents&gt;&lt;/src-block&gt; |
</table><table>| root | ((filename . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (indexed-on . Sat Jul  4 08:35:15 2015)) | (heading ((level . 1)) (title nil An xml representation of an org document) (tags nil) (properties nil (property ((label . (car (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org)))) /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (property ((label . (car (BLOCKED . ))))) (property ((label . (car (CATEGORY . blog)))) blog)) (content nil #+BEGIN_SRC emacs-lisp\n(defun print-tag (name attrs &amp;optional closingp)\n  (format\n   &quot;&lt;%s%s%s&gt;&quot;\n   (if closingp &quot;/&quot; &quot;&quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&quot; &quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &quot;%s=\&quot;%s\&quot;&quot; (car x) (cdr x)))\n\n attrs\n\n &quot; &quot;))\n     &quot;&quot;)))\n\n(print-tag &apos;html &apos;((color . blue) (label . test)))\n#+END_SRC\n\n#+RESULTS:\n: &lt;html color=&quot;blue&quot; label=&quot;test&quot;&gt;\n\n#+BEGIN_SRC emacs-lisp\n(defmacro tag (name attributes &amp;rest body)\n  `(format &quot;%s%s%s&quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat\n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &quot;html&quot; &apos;((test . &quot;id&quot;))\n     (tag &quot;body&quot; nil\n\n  (tag &quot;p&quot; nil (concat &quot;paragraph&quot; &quot; &amp; &lt; 1&quot;))\n\n  (tag &quot;p&quot; nil &quot;paragraph 2&quot;)))\n#+END_SRC\n\n#+RESULTS:\n: &lt;html test=&quot;id&quot;&gt;&lt;body&gt;&lt;p&gt;paragraph &amp; &lt; 1&lt;/p&gt;&lt;p&gt;paragraph 2&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;\n\n | x | y | \n | 7 | 8 | \n | 9 | 0 | \n\n#+BEGIN_SRC emacs-lisp\n(tag &apos;tables ()\n     (mapconcat &apos;identity\n\n\n(org-element-map\n\n\n    (org-element-parse-buffer)\n\n\n    &apos;table\n\n\n  (lambda (element)\n\n\n    (tag &apos;table ()\n\n\n\n (xml-escape-string\n\n\n\n  (buffer-substring\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n&quot;&quot;))\n#+END_SRC\n\n#+RESULTS:\n: &lt;tables&gt;&lt;table&gt; | x | y | \n: | 7 | 8 | \n: | 9 | 0 | \n: &lt;/table&gt;&lt;table&gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(defun print-tag (name attrs &amp;amp;amp;optional closingp)\n  (format\n   &amp;amp;quot;&amp;amp;lt;%s%s%s&amp;amp;gt;&amp;amp;quot;\n   (if closingp &amp;amp;quot;/&amp;amp;quot; &amp;amp;quot;&amp;amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;amp;quot; &amp;amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;amp;quot;%s=\&amp;amp;quot;%s\&amp;amp;quot;&amp;amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;amp;quot; &amp;amp;quot;))\n     &amp;amp;quot;&amp;amp;quot;)))\n\n(print-tag &amp;amp;apos;html &amp;amp;apos;((color . blue) (label . test)))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(defmacro tag (name attributes &amp;amp;amp;rest body)\n  `(format &amp;amp;quot;%s%s%s&amp;amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;amp;quot;html&amp;amp;quot; &amp;amp;apos;((test . &amp;amp;quot;id&amp;amp;quot;))\n     (tag &amp;amp;quot;body&amp;amp;quot; nil\n\n  (tag &amp;amp;quot;p&amp;amp;quot; nil (concat &amp;amp;quot;paragraph&amp;amp;quot; &amp;amp;quot; &amp;amp;amp; &amp;amp;lt; 1&amp;amp;quot;))\n\n  (tag &amp;amp;quot;p&amp;amp;quot; nil &amp;amp;quot;paragraph 2&amp;amp;quot;)))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;amp;apos;src-block\n  (lambda (element)\n    (tag &amp;amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | &amp;lt;src-block language=&amp;quot;emacs-lisp&amp;quot;&amp;gt;&amp;lt;contents&amp;gt;(concat\n &amp;amp;quot;&amp;amp;lt;root&amp;amp;gt;&amp;amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;amp;apos;heading `((level . ,level))\n\n\n(tag &amp;amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;amp;apos;tags () (mapconcat &amp;amp;apos;identity tags &amp;amp;quot; &amp;amp;quot;))\n\n\n(tag &amp;amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;amp;quot;&amp;amp;quot;)))))))\n\n       \n\n  ;(tag &amp;amp;apos;content () (format &amp;amp;quot;%s&amp;amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;amp;quot;&amp;amp;lt;/root&amp;amp;gt;&amp;amp;quot;)\n\n&amp;lt;/contents&amp;gt;&amp;lt;/src-block&amp;gt; | \n: &lt;/table&gt;&lt;/tables&gt;\n\n\n\n#+END_SRC\n\n#+BEGIN_SRC emacs-lisp\n(org-element-map\n    (org-element-parse-buffer)\n    &apos;src-block\n  (lambda (element)\n    (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &apos;contents () (xml-escape-string (org-element-property :value element))))))\n#+END_SRC\n\n#+RESULTS:\n | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)\n  (format\n   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;\n   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;quot; &amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;quot; &amp;quot;))\n     &amp;quot;&amp;quot;)))\n\n(print-tag &amp;apos;html &amp;apos;((color . blue) (label . test)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)\n  `(format &amp;quot;%s%s%s&amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;quot;html&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))\n     (tag &amp;quot;body&amp;quot; nil\n\n  (tag &amp;quot;p&amp;quot; nil (concat &amp;quot;paragraph&amp;quot; &amp;quot; &amp;amp; &amp;lt; 1&amp;quot;))\n\n  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;apos;src-block\n  (lambda (element)\n    (tag &amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(concat\n &amp;quot;&amp;lt;root&amp;gt;&amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;apos;heading `((level . ,level))\n\n\n(tag &amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))\n\n\n(tag &amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;quot;&amp;quot;)))))))\n\n       \n\n  ;(tag &amp;apos;content () (format &amp;quot;%s&amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)\n\n&lt;/contents&gt;&lt;/src-block&gt; | \n\n#+BEGIN_SRC emacs-lisp\n(let ((xml (tag &apos;root `((filename . ,(buffer-file-name))\n\n\n\n(indexed-on . ,(current-time-string)))\n\n\n;; map the headlines\n\n\n(mapconcat\n\n\n &apos;identity\n\n\n (org-map-entries\n\n\n  (lambda ()\n\n\n    (let* ((tags (org-get-tags))\n\n\n\n   (heading-components (org-heading-components))\n\n\n\n   (title (nth 4 heading-components))\n\n\n\n   (level (nth 0 heading-components))\n\n\n\n   (properties (org-entry-properties))\n\n\n\n   (elem (org-element-at-point))\n\n\n\n   (bp (org-element-property :contents-begin elem))\n\n\n\n   (ep (org-element-property :contents-end elem))\n\n\n\n   (content (buffer-substring bp ep)))\n\n\n      (tag &apos;heading `((level . ,level))\n\n\n\n   (tag &apos;title () (xml-escape-string title))\n\n\n\n   (tag &apos;tags () (mapconcat &apos;identity tags &quot; &quot;))\n\n\n\n   (tag &apos;properties ()\n\n\n\n\n(mapconcat\n\n\n\n\n (lambda (x)\n\n\n\n\n   (tag &apos;property `((label . (car ,x))) (cdr x)))\n\n\n\n\n properties\n\n\n\n\n &quot;&quot;))\n\n\n\n   (tag &apos;content () (format &quot;%s&quot; (xml-escape-string content)))))))\n\n\n &quot;&quot;)\n\n\n\n;; map specific element types    \n\n\n(tag &apos;source-blocks ()\n\n\n     (mapconcat\n\n\n      &apos;identity\n\n\n      (org-element-map\n\n\n\n  (org-element-parse-buffer)\n\n\n\n  &apos;src-block\n\n\n\n(lambda (element)\n\n\n\n  (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n\n\n       (tag &apos;contents ()\n\n\n\n\n    (xml-escape-string (org-element-property :value element)))))) &quot;&quot;))\n     \n\n\n(tag &apos;tables ()\n\n\n     (mapconcat &apos;identity\n\n\n\n\n(org-element-map\n\n\n\n\n    (org-element-parse-buffer)\n\n\n\n\n    &apos;table\n\n\n\n\n  (lambda (element)\n\n\n\n\n    (tag &apos;table ()\n\n\n\n\n\n (xml-escape-string\n\n\n\n\n\n  (buffer-substring\n\n\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n\n\n&quot;&quot;)))))\n  (with-temp-file &quot;org2xml.xml&quot;\n    (insert xml)))\n\n\n#+END_SRC\n\n#+RESULTS:\n\n** subheading\n\n\n\n    :tag1:\n   :PROPERTIES:\n   :categories: emacs\n   :END:\n\nwith some text\n)) | (heading ((level . 2)) (title nil subheading) (tags nil tag1) (properties nil (property ((label . (car (FILE . /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org)))) /Users/jkitchin/blogofile-jkitchin.github.com/_blog/blog.org) (property ((label . (car (TAGS . :tag1:)))) :tag1:) (property ((label . (car (ALLTAGS . :tag1:)))) :tag1:) (property ((label . (car (BLOCKED . ))))) (property ((label . (car (categories . emacs)))) emacs) (property ((label . (car (CATEGORY . blog)))) blog)) (content nil    :PROPERTIES:\n   :categories: emacs\n   :END:\n\nwith some text\n)) | (source-blocks nil (src-block ((language . emacs-lisp)) (contents nil (defun print-tag (name attrs &amp;optional closingp)\n  (format\n   &quot;&lt;%s%s%s&gt;&quot;\n   (if closingp &quot;/&quot; &quot;&quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&quot; &quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &quot;%s=\&quot;%s\&quot;&quot; (car x) (cdr x)))\n\n attrs\n\n &quot; &quot;))\n     &quot;&quot;)))\n\n(print-tag &apos;html &apos;((color . blue) (label . test)))\n)) (src-block ((language . emacs-lisp)) (contents nil (defmacro tag (name attributes &amp;rest body)\n  `(format &quot;%s%s%s&quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat\n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &quot;html&quot; &apos;((test . &quot;id&quot;))\n     (tag &quot;body&quot; nil\n\n  (tag &quot;p&quot; nil (concat &quot;paragraph&quot; &quot; &amp; &lt; 1&quot;))\n\n  (tag &quot;p&quot; nil &quot;paragraph 2&quot;)))\n)) (src-block ((language . emacs-lisp)) (contents nil (tag &apos;tables ()\n     (mapconcat &apos;identity\n\n\n(org-element-map\n\n\n    (org-element-parse-buffer)\n\n\n    &apos;table\n\n\n  (lambda (element)\n\n\n    (tag &apos;table ()\n\n\n\n (xml-escape-string\n\n\n\n  (buffer-substring\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n&quot;&quot;))\n)) (src-block ((language . emacs-lisp)) (contents nil (org-element-map\n    (org-element-parse-buffer)\n    &apos;src-block\n  (lambda (element)\n    (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &apos;contents () (xml-escape-string (org-element-property :value element))))))\n)) (src-block ((language . emacs-lisp)) (contents nil (let ((xml (tag &apos;root `((filename . ,(buffer-file-name))\n\n\n\n(indexed-on . ,(current-time-string)))\n\n\n;; map the headlines\n\n\n(mapconcat\n\n\n &apos;identity\n\n\n (org-map-entries\n\n\n  (lambda ()\n\n\n    (let* ((tags (org-get-tags))\n\n\n\n   (heading-components (org-heading-components))\n\n\n\n   (title (nth 4 heading-components))\n\n\n\n   (level (nth 0 heading-components))\n\n\n\n   (properties (org-entry-properties))\n\n\n\n   (elem (org-element-at-point))\n\n\n\n   (bp (org-element-property :contents-begin elem))\n\n\n\n   (ep (org-element-property :contents-end elem))\n\n\n\n   (content (buffer-substring bp ep)))\n\n\n      (tag &apos;heading `((level . ,level))\n\n\n\n   (tag &apos;title () (xml-escape-string title))\n\n\n\n   (tag &apos;tags () (mapconcat &apos;identity tags &quot; &quot;))\n\n\n\n   (tag &apos;properties ()\n\n\n\n\n(mapconcat\n\n\n\n\n (lambda (x)\n\n\n\n\n   (tag &apos;property `((label . (car ,x))) (cdr x)))\n\n\n\n\n properties\n\n\n\n\n &quot;&quot;))\n\n\n\n   (tag &apos;content () (format &quot;%s&quot; (xml-escape-string content)))))))\n\n\n &quot;&quot;)\n\n\n\n;; map specific element types    \n\n\n(tag &apos;source-blocks ()\n\n\n     (mapconcat\n\n\n      &apos;identity\n\n\n      (org-element-map\n\n\n\n  (org-element-parse-buffer)\n\n\n\n  &apos;src-block\n\n\n\n(lambda (element)\n\n\n\n  (tag &apos;src-block `((language . ,(org-element-property :language element)))\n\n\n\n       (tag &apos;contents ()\n\n\n\n\n    (xml-escape-string (org-element-property :value element)))))) &quot;&quot;))\n     \n\n\n(tag &apos;tables ()\n\n\n     (mapconcat &apos;identity\n\n\n\n\n(org-element-map\n\n\n\n\n    (org-element-parse-buffer)\n\n\n\n\n    &apos;table\n\n\n\n\n  (lambda (element)\n\n\n\n\n    (tag &apos;table ()\n\n\n\n\n\n (xml-escape-string\n\n\n\n\n\n  (buffer-substring\n\n\n\n\n\n   (org-element-property :contents-begin element)\n\n\n\n\n\n   (org-element-property :contents-end element))))))\n\n\n\n\n&quot;&quot;)))))\n  (with-temp-file &quot;org2xml.xml&quot;\n    (insert xml)))\n\n\n))) | (tables nil (table nil | x | y | \n | 7 | 8 | \n | 9 | 0 | \n) (table nil | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defun print-tag (name attrs &amp;amp;optional closingp)\n  (format\n   &amp;quot;&amp;lt;%s%s%s&amp;gt;&amp;quot;\n   (if closingp &amp;quot;/&amp;quot; &amp;quot;&amp;quot;)\n   name\n   (if (and attrs (not closingp))\n       (concat\n\n&amp;quot; &amp;quot;\n\n(mapconcat\n\n (lambda (x)\n\n   (format &amp;quot;%s=\&amp;quot;%s\&amp;quot;&amp;quot; (car x) (cdr x)))\n\n attrs\n\n &amp;quot; &amp;quot;))\n     &amp;quot;&amp;quot;)))\n\n(print-tag &amp;apos;html &amp;apos;((color . blue) (label . test)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(defmacro tag (name attributes &amp;amp;rest body)\n  `(format &amp;quot;%s%s%s&amp;quot;\n\n   (print-tag ,name ,attributes nil)\n           (concat \n\n   ,@body)\n\n   (print-tag ,name nil t)))\n\n(tag &amp;quot;html&amp;quot; &amp;apos;((test . &amp;quot;id&amp;quot;))\n     (tag &amp;quot;body&amp;quot; nil\n\n  (tag &amp;quot;p&amp;quot; nil (concat &amp;quot;paragraph&amp;quot; &amp;quot; &amp;amp; &amp;lt; 1&amp;quot;))\n\n  (tag &amp;quot;p&amp;quot; nil &amp;quot;paragraph 2&amp;quot;)))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(org-element-map\n    (org-element-parse-buffer)\n    &amp;apos;src-block\n  (lambda (element)\n    (tag &amp;apos;src-block `((language . ,(org-element-property :language element)))\n\n (tag &amp;apos;contents () (xml-escape-string (org-element-property :value element))))))\n&lt;/contents&gt;&lt;/src-block&gt; | &lt;src-block language=&quot;emacs-lisp&quot;&gt;&lt;contents&gt;(concat\n &amp;quot;&amp;lt;root&amp;gt;&amp;quot;\n (car (org-map-entries\n       (lambda ()\n\n (let* ((tags (org-get-tags))\n\n\n(heading-components (org-heading-components))\n\n\n(title (nth 4 heading-components))\n\n\n(level (nth 0 heading-components))\n\n\n(properties (org-entry-properties))\n\n\n(elem (org-element-at-point))\n\n\n(bp (org-element-property :contents-begin elem))\n\n\n(ep (org-element-property :contents-end elem))\n\n\n(content (buffer-substring bp ep)))\n\n   (tag &amp;apos;heading `((level . ,level))\n\n\n(tag &amp;apos;title () (xml-escape-string title))\n\n\n(tag &amp;apos;tags () (mapconcat &amp;apos;identity tags &amp;quot; &amp;quot;))\n\n\n(tag &amp;apos;properties ()\n\n\n     (mapconcat\n\n\n      (lambda (x)\n\n\n\n(tag &amp;apos;property `((label . (car ,x))) (cdr x)))\n\n\n      properties\n\n\n      &amp;quot;&amp;quot;)))))))\n\n       \n\n  ;(tag &amp;apos;content () (format &amp;quot;%s&amp;quot; (xml-escape-string content)))\n;\n  ))))))\n\n&amp;quot;&amp;lt;/root&amp;gt;&amp;quot;)\n\n&lt;/contents&gt;&lt;/src-block&gt; | \n)) |
</table></tables><paragraphs><paragraph>#+END_SRC
</paragraph><paragraph>with some text
</paragraph></paragraphs></root>