* date on check box
http://emacs.stackexchange.com/questions/21174/check-box-add-date-in-org-mode


- [X] one :04/26/2016
- [X] two :04/26/2016


#+BEGIN_SRC emacs-lisp
(defun date-hook-fn ()
  (goto-char (line-end-position))
  (insert (format-time-string " :%m/%d/%Y")))

(add-hook 'org-checkbox-statistics-hook 'date-hook-fn)
#+END_SRC

#+RESULTS:
| date-hook-fn |

* selective view of org-elements
  :PROPERTIES:
  :VISIBILITY: all
  :END:

Show only verse

#+BEGIN_SRC emacs-lisp
(require 'cl)

; http://stackoverflow.com/questions/969067/name-of-this-function-in-built-in-emacs-lisp-library
(defun flatten (LIST)
  "flattens LIST"
  (cond
   ((atom LIST) (list LIST))
   ((null (cdr LIST)) (flatten (car LIST)))
   (t (append (flatten (car LIST)) (flatten (cdr LIST))))))

(defvar non-verse-overlays '() "overlays  to hide non-verse text")
(defvar non-lilypad-overlays '() "overlays  to hide non-lilypad blocks")

(defun hide-non-verse ()
  "Hide everything but the verse blocks."
  (interactive)
  ;; make sure we are wide open.
  (org-cycle '(64))
  (add-to-invisibility-spec '(non-verse-block . t))
  (let ((p (append
	    (list (point-min))
	    (flatten (org-element-map (org-element-parse-buffer) 'verse-block
		       (lambda (vb) (list (org-element-property :begin vb)
					  (org-element-property :end vb)))))
	    (list (point-max)))))

    (loop for start in p by 'cddr
	  for end in (cdr p) by 'cddr
	  do
	  (let ((ov (make-overlay start end)))
	    (add-to-list 'non-verse-overlays ov)
	    (overlay-put ov 'invisible '(non-verse-block . t))))))

(defun show-non-verse ()
  "Show the non-verse"
  (interactive)
  (mapc 'delete-overlay non-verse-overlays)
  (setq non-verse-overlays '()))

(defun hide-non-lilypad ()
  "Hide everything but the verse blocks."
  (interactive)
  ;; make sure we are wide open.
  (org-cycle '(64))
  (add-to-invisibility-spec 'non-lilypad-block)
  (let ((p (append
	    (list (point-min))
	    (flatten (org-element-map (org-element-parse-buffer) 'src-block
		       (lambda (sb)
			 (when (string= "lilypond" (org-element-property :language sb))
			   (list (org-element-property :begin sb)
				 (org-element-property :end sb))))))
	    (list (point-max)))))

    (loop for start in p by 'cddr
	  for end in (cdr p) by 'cddr
	  do
	  (let ((ov (make-overlay start end)))
	    (add-to-list 'non-lilypad-overlays ov)
	    (overlay-put ov 'invisible 'non-lilypad-block)))))

(defun show-non-lilypad ()
  (interactive)
  (mapc 'delete-overlay non-lilypad-overlays)
  (setq non-lilypad-overlays '()))
#+END_SRC

#+RESULTS:
: show-non-lilypad






** SCENE II

description, dialogue, etc. description, dialogue, etc. description,
dialogue, etc. description, dialogue, etc. description, dialogue, etc.

#+NAME: song-name
#+BEGIN_VERSE
 la la la
 la la la

(remove-from-invisibility-spec 'not-verse-block)
  (ov-clear 'invisibility 'not-verse-block)
#+END_VERSE

#+NAME: song-name-melody
#+BEGIN_SRC lilypond :file song-name-melody.pdf
<< {
  /key d /major
  /time 3/4
  a4 a a |
  a4 a a |
 }

/addlyrics {
la la la |
la la la |
 }
>>
#+END_SRC

more description, dialogue, etc. description, dialogue, etc.
dialogue, etc. description, dialogue, etc. description, dialogue.

** SCENE III
etc.

#+NAME: song-name-2
#+BEGIN_VERSE
 tra la la
 tra la la
#+END_VERSE


Then end.
