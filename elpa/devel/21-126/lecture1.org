#+TITLE: Introduction to Mathematical software

[[./resized-logo.png]]

* Emacs
You are reading this Emacs. Do not be afraid.

* org-mode
This document is written in [[http://orgmode.org][org-mode]]. Org-mode is mostly plain
text. You can use some LaTeX like markup:

\alpha \beta \gamma \to \approx \propto  [[elisp:org-toggle-pretty-entities]]

and  /italics/, *bold*, _underlined_, =verbatim=, ~not sure what this but it looks verbatim~.

You can do some math markup, which is simply LateX.

$\int_0^x sin x dx$    [[elisp:org-preview-latex-fragment]]

** Exporting to other formats
Org-mode is easily converted to many other formats.

*** LaTeX
[[elisp:org-latex-export-as-latex]]

*** PDF
elisp:org-latex-export-to-pdf   [[./lecture1.pdf]]

*** HTML
[[elisp:org-html-export-as-html]]

* Interpreted languages
** Python

Remember that chapter (pkg:15-110|lists.org) on lists in 15-110?

Make a list of even numbers from 0 to 11.

#+BEGIN_SRC python
print [x for x in range(12) if x%2 == 0]
#+END_SRC


*************** TODO Homework 1
		 DEADLINE: <2014-02-14 Fri>
assignment:hwk1
*************** END
** MATLAB


#+BEGIN_SRC matlab
3 + 3
#+END_SRC

#+RESULTS:
** R
You can use R in org-mode.

#+begin_src R  :file fig1plot.png :results graphics
n <- floor(runif(1000)*10)
t <- table(n)
barplot(t)
#+end_src
** Ruby

#+BEGIN_SRC ruby
puts 'Hello world'
#+END_SRC

#+RESULTS:
: Hello world

* Compiled languages

** C

#+BEGIN_SRC C :tangle hello.c
//C hello world example
#include <stdio.h>

int main()
{
  printf("Hello world from C\n");
  return 0;
}
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.c++ | Makefile | hello.java | hello.c |

Compile:

#+BEGIN_SRC sh
gcc hello.c -o hello
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
./hello
#+END_SRC

#+RESULTS:
: Hello world from C

** C++
Here is an example of writing a c++ program in org-mode. Org-mode also supports C, Fortran and Java.

#+BEGIN_SRC c++ :tangle hello.c++
#include <iostream.h>

main()
{
  cout << "Hello World! ";
}
#+END_SRC

You can also tangle a Makefile.

#+BEGIN_SRC makefile :tangle Makefile
hello:	hello.c++
	g++ hello.c++
#+END_SRC

Now, we tangle the code out to the files.
#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.c++ | Makefile |

Next, we run make with the target to compile the code. You could also simply write the compiler command here.

#+BEGIN_SRC sh
make hello
#+END_SRC

#+RESULTS:
: g++ hello.c++

And now get the output by running the program.

#+BEGIN_SRC sh
./a.out
#+END_SRC

#+RESULTS:
: Hello World!

** Fortran
#+BEGIN_SRC fortran :tangle hello.f90
       program hello
          print *, "Hello World from Fortran!"
       end program hello
#+END_SRC

Tangle the file

#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.c | hello.c++ | Makefile | hello.f90 | hello.java |


Compile the program
#+BEGIN_SRC sh
gfortran hello.f90 -o hello-fortran
#+END_SRC

#+RESULTS:


Run the program.
#+BEGIN_SRC sh
./hello-fortran
#+END_SRC

#+RESULTS:
:  Hello World from Fortran!

** Java

#+BEGIN_SRC java :tangle hello.java
public class hello {

    public static void main(String[] args) {
        System.out.println("Hello, World from java");
    }

}
#+END_SRC

Tangle the file

#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.c++ | Makefile | hello.java |

#+BEGIN_SRC sh
javac hello.java
#+END_SRC

#+RESULTS:

Now, run the code.

#+BEGIN_SRC sh
java hello
#+END_SRC

#+RESULTS:
: Hello, World from java

