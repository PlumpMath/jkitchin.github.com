** Peak finding in Raman spectroscopy
   :PROPERTIES:
   :categories: data analysis
   :date:     2013/02/27 10:55:57
   :updated:  2013/02/27 10:55:57
   :END:
Raman spectroscopy is a vibrational spectroscopy. The data typically comes as intensity vs. wavenumber, and it is discrete. Sometimes it is necessary to identify the precise location of a peak. In this post, we will use spline smoothing to construct an interpolating function of the data, and then use fminbnd to identify peak positions.

This example was originally worked out in Matlab at http://matlab.cheme.cmu.edu/2012/08/27/peak-finding-in-raman-spectroscopy/

numpy:loadtxt

Let us take a look at the raw data.

#+BEGIN_SRC python :session 
import os
print os.getcwd()
print os.environ['HOME']
#+END_SRC

#+RESULTS:
: 
: /home/jkitchin/Dropbox/intro-python
: /home/jkitchin

#+BEGIN_SRC python :session
import numpy as np
import matplotlib.pyplot as plt

w, i = np.loadtxt('data/raman.txt', usecols=(0, 1), unpack=True)

plt.plot(w, i)
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (counts)')
plt.savefig('images/raman-1.png')
plt.show()
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> [<matplotlib.lines.Line2D object at 0x1d372810>]
: <matplotlib.text.Text object at 0x1d48df90>
: <matplotlib.text.Text object at 0x1d356a10>

[[./images/raman-1.png]]

The next thing to do is narrow our focus to the region we are interested in between 1340 cm^{-1} and 1360 cm^{-1}.

#+BEGIN_SRC python :session
ind = (w > 1340) & (w < 1360)
w1 = w[ind]
i1 = i[ind]

plt.plot(w1, i1, 'b. ')
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (counts)')
plt.savefig('images/raman-2.png')
plt.show()
#+END_SRC

#+RESULTS:
: 
: >>> [<matplotlib.lines.Line2D object at 0x1d5005d0>]
: <matplotlib.text.Text object at 0x1d37a650>
: <matplotlib.text.Text object at 0x1d3809d0>

[[./images/raman-2.png]]

Next we consider a scipy:UnivariateSpline. This function "smooths" the data.

#+BEGIN_SRC python :session
from scipy.interpolate import UnivariateSpline

# s is a "smoothing" factor
sp = UnivariateSpline(w1, i1, s=3000)

plt.plot(w1, i1, 'b. ')
plt.plot(w1, sp(w1), 'r-')
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (counts)')
plt.savefig('images/raman-3.png')
plt.show()
#+END_SRC

#+RESULTS:
: 
: ... [<matplotlib.lines.Line2D object at 0x1dd35e90>]
: [<matplotlib.lines.Line2D object at 0x2ab334a3d510>]
: <matplotlib.text.Text object at 0x1d49bad0>
: <matplotlib.text.Text object at 0x1dd3b950>

[[./images/raman-3.png]]

Note that the UnivariateSpline function returns a "callable" function! Our next goal is to find the places where there are peaks. This is defined by the first derivative of the data being equal to zero. It is easy to get the first derivative of a UnivariateSpline with a second argument as shown below.

#+BEGIN_SRC python :session
# get the first derivative evaluated at all the points
d1 =  sp(w1, 1)
plt.plot(w1, d1, label='first derivative')
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('First derivative')

# find the places where the first derivative crosses zero
s = np.zeros(d1.shape)
s[d1 >= 0] = 1
s[d1 < 0] = 0

initial_guesses = w1[np.diff(s) == -1]
plt.plot(initial_guesses, 0*initial_guesses, 'ro ', label='Guesses of zeros')
plt.legend(loc='best')
plt.savefig('images/raman-4.png'
plt.show()

#+END_SRC

#+RESULTS:
: 
: >>> [<matplotlib.lines.Line2D object at 0x1d9eaad0>]
: <matplotlib.text.Text object at 0x1d4f2210>
: <matplotlib.text.Text object at 0x1d9e6910>
: >>> ... >>> >>> >>> >>> >>> [<matplotlib.lines.Line2D object at 0x1d4f3250>]
: <matplotlib.legend.Legend object at 0x1d839510>

[[./images/raman-4.png]]

Now, we can use these initial guesses to solve for the actual values.

#+BEGIN_SRC python :session 
from scipy.optimize import fminbound

def func(w):
    'function to minimize'
    return -sp(w)

for value in initial_guesses:
    sol = fminbound(func, value - 1, value + 1)
    plt.plot(sol, sp(sol), 'ro ', ms=8)
    print 'Peak found at {0} cm^{{-1}}'.format(sol)

plt.plot(w1, i1, 'b. ')
plt.plot(w1, sp(w1), 'r-')
plt.xlabel('Raman shift (cm$^{-1}$)')
plt.ylabel('Intensity (counts)')
plt.savefig('images/raman-5.png')
plt.show()
#+END_SRC

#+RESULTS:
: 
: ... ... ... >>> ... [<matplotlib.lines.Line2D object at 0x1da00510>]
: Peak found at 1346.50980295 cm^{-1}
: [<matplotlib.lines.Line2D object at 0x1d4c0110>]
: Peak found at 1348.11261373 cm^{-1}
: [<matplotlib.lines.Line2D object at 0x1da02b90>]
: [<matplotlib.lines.Line2D object at 0x1da02750>]
: <matplotlib.text.Text object at 0x1da01850>
: <matplotlib.text.Text object at 0x1d9d4110>

In the end, we have illustrated how to construct a spline smoothing interpolation function and to find maxima in the function, including generating some initial guesses. There is more art to this than you might like, since you have to judge how much smoothing is enough or too much. With too much, you may smooth peaks out. With too little, noise may be mistaken for peaks.

*** Summary notes
Using org-mode with :session allows a large script to be broken up into mini sections. However, it only seems to work with the default python mode in Emacs, and it does not work with emacs-for-python or the latest python-mode. I also do not really like the output style, e.g. the output from the plotting commands.
