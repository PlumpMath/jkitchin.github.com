* Redirecting stderr in org-mode shell blocks
  :PROPERTIES:
  :categories: orgmode
  :date:     2015/01/04 08:59:04
  :updated:  2015/01/04 08:59:04
  :END:
Org-mode shell source blocks do not capture stderr. For example, in this block, with the default setup:

#+BEGIN_SRC sh :results output
echo "testing stdout" >&1
echo "testing stderr" >&2
echo "testing stderr with manual redirect" 2>&1 >&2
#+END_SRC

#+RESULTS:
: testing stdout
: testing stderr with manual redirect

You can see the second line is not in the output. The third line is because we manually redirect stderr to stdout.

If you run this command, you get an *Org-Babel Error Output* buffer saying it is an illegal option.

#+BEGIN_SRC sh
date -g
#+END_SRC

#+RESULTS:

It would be nice to just capture that error, and show it.

We solved this problem in [[http://kitchingroup.cheme.cmu.edu/blog/2014/12/21/Capturing-stderr-from-Python-in-org-mode-take-2/][Python]] by redirecting stderr at runtime. It is not that simple in shell blocks, but we can do a similar thing. The code block is executed (I think) by saving the block to a temporary file, and then running org-babel-sh-command on the file. That magic happens inside the command shell-command-on-region. We just need to make that command redirect stderr. Here is a new shell command that does this. This next block can be tangled out to an executable command. This script takes one argument, which I believe is a filename (the temporary file containing the source block region).

#+BEGIN_SRC sh :tangle sh_stderr.sh :tangle-mode (identity #o755)
#!/bin/bash
{
bash $1
} 2>&1
#+END_SRC

#+RESULTS:

Now, we set org-babel-sh-command to our new shell command. 

#+BEGIN_SRC emacs-lisp
(setq org-babel-sh-command "./sh_stderr.sh")
#+END_SRC

#+RESULTS:
: ./sh_stderr.sh

Now, it appears we get what we want:

#+BEGIN_SRC sh :results output
echo "testing stdout" >&1
echo "testing stderr" >&2
#+END_SRC
#+RESULTS:
: testing stdout
: testing stderr

And, with the bad option to date, we get:

#+BEGIN_SRC sh
date -g
echo
#+END_SRC
#+RESULTS:
: date: illegal option -- g
: usage: date [-jnu] [-d dst] [-r seconds] [-t west] [-v[+|-]val[ymwdHMS]] ... 
:             [-f fmt date | [[[mm]dd]HH]MM[[cc]yy][.ss]] [+format]
: 

Not bad! I have not tested this very thoroughly, i.e. beyond these little examples, but it seems like it could work.